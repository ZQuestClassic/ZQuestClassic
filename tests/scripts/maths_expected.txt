Compiling 'maths.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
ZQ_BUFFER Line 12 @ Columns 40-48 - Warning C020: Constant 10000000 is too long and has been truncated.
ZQ_BUFFER Line 12 @ Columns 40-48 - Warning C020: Constant 10000000 is too long and has been truncated.
ZQ_BUFFER Line 12 @ Columns 40-48 - Warning C020: Constant 10000000 is too long and has been truncated.
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR REFFFC; void run() Body Start
PUSHARGSV 0,0.0002
SETR d4,SP
STOREDV 1,1
STOREDV -10,0; for() #1 setup AND while(true) #1 Body [Opt:AlwaysOn] Start
LOADD d2,0; for() #1 LoopTest
COMPAREV d2,10
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 36; for() #1 TestFail?
PUSHR d4; for() #1 Body Start
LOADD d2,1; UsrFunc[void doMaths(bool, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[void doMaths(bool, int)] Params End
CALLFUNC 0.0040; UsrFunc[void doMaths(bool, int)] Call
PEEK d4
LOADD d2,1; UsrFunc[void doMaths(bool, int)] Params Start
PUSHR d2
LOADD d2,0
MULTV d2,10000
PUSHR d2; UsrFunc[void doMaths(bool, int)] Params End
CALLFUNC 0.0040; UsrFunc[void doMaths(bool, int)] Call
PEEK d4
LOADD d2,1; UsrFunc[void doMaths(bool, int)] Params Start
PUSHR d2
LOADD d2,0
MULTV d2,100000
PUSHR d2; UsrFunc[void doMaths(bool, int)] Params End
CALLFUNC 0.0040; UsrFunc[void doMaths(bool, int)] Call
POP d4; for() #1 Body End
LOADD d2,0; for() #1 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 6; for() #1 End
WAITFRAME; InlineFunc[void Waitframe()] Body
SETV d2,0
STORED d2,1; while(true) #1 Body [Opt:AlwaysOn] End
GOTO 5; while() #1 End AND [Opt:NeverRet] AND void run() Body End
PUSHARGSV 0,0.0020; Func[void doMaths(bool, int)] Body Start
SETR d4,SP
ALLOCATEMEMV d2,15
STORED d2,19
WRITEPODSTRING d2,"maths for: %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,19
PUSHR d2
LOADD d2,20
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,19
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,12
STORED d2,18
WRITEPODSTRING d2,"10 / i = %d"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,18
PUSHR d2
LOADD d2,20
DIVV2 10,d2
SETV d2,10
PUSHR d2
LOADD d2,20
POP d3
DIVR d3,d2
PUSHR d3; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,18
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,13
STORED d2,17
WRITEPODSTRING d2,"10 %% i = %d"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,17
PUSHR d2
LOADD d2,20
MODV2 10,d2
SETV d2,10
PUSHR d2
LOADD d2,20
POP d3
MODR d3,d2
PUSHR d3; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,17
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,12
STORED d2,16
WRITEPODSTRING d2,"i / 10 = %d"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,16
PUSHR d2
LOADD d2,20
DIVV d2,10
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,16
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,13
STORED d2,15
WRITEPODSTRING d2,"i %% 10 = %d"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,15
PUSHR d2
LOADD d2,20
MODV d2,10
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,15
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,12
STORED d2,14
WRITEPODSTRING d2,"i + i = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,14
PUSHR d2
LOADD d2,20
PUSHR d2
LOADD d2,20
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,14
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,12
STORED d2,13
WRITEPODSTRING d2,"i - i = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,13
PUSHR d2
LOADD d2,20
PUSHR d2
LOADD d2,20
POP d3
SUBR d3,d2
PUSHR d3; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,13
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,12
STORED d2,12
WRITEPODSTRING d2,"i * i = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,12
PUSHR d2
LOADD d2,20
PUSHR d2
LOADD d2,20
POP d3
MULTR d2,d3
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,12
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,13
STORED d2,11
WRITEPODSTRING d2,"i * -i = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,11
PUSHR d2
LOADD d2,20
PUSHR d2
LOADD d2,20
SUBV2 0,d2
POP d3
MULTR d2,d3
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,11
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,12
STORED d2,10
WRITEPODSTRING d2,"i / i = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,10
PUSHR d2
LOADD d2,20
PUSHR d2
LOADD d2,20
POP d3
DIVR d3,d2
PUSHR d3; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,10
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,13
STORED d2,9
WRITEPODSTRING d2,"i / -i = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,9
PUSHR d2
LOADD d2,20
PUSHR d2
LOADD d2,20
SUBV2 0,d2
POP d3
DIVR d3,d2
PUSHR d3; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,9
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,20
STORED d2,8
WRITEPODSTRING d2,"i %% (i - 50) = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,20
PUSHR d2
LOADD d2,20
SUBV d2,50
POP d3
MODR d3,d2
PUSHR d3; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,8
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,17
STORED d2,7
WRITEPODSTRING d2,"i + 100000 = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,20
ADDV d2,100000
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,7
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,17
STORED d2,6
WRITEPODSTRING d2,"i - 100000 = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,20
SUBV d2,100000
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,6
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,17
STORED d2,5
WRITEPODSTRING d2,"i * 100000 = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,20
MULTV d2,100000
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,5
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,18
STORED d2,4
WRITEPODSTRING d2,"i * -100000 = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,20
MULTV d2,-100000
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,4
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,17
STORED d2,3
WRITEPODSTRING d2,"i / 100000 = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2
LOADD d2,20
DIVV d2,100000
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,3
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,18
STORED d2,2
WRITEPODSTRING d2,"i / -100000 = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,20
DIVV d2,-100000
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,2
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,14
STORED d2,1
WRITEPODSTRING d2,"i %% 50 = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,20
MODV d2,50
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,1
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,15
STORED d2,0
WRITEPODSTRING d2,"i %% -50 = %d\n"
PUSHR d4
LOADD d2,21; UsrFunc[void maybePrint(bool, int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,20
MODV d2,-50
PUSHR d2; UsrFunc[void maybePrint(bool, int, int)] Params End
CALLFUNC 0.0377; UsrFunc[void maybePrint(bool, int, int)] Call
POP d4
LOADD d3,0
DEALLOCATEMEMR d3
POPARGS d5,0.0022
RETURNFUNC; Func[void doMaths(bool, int)] Body End
SETR d4,SP; Func[void maybePrint(bool, int, int)] Body Start
LOADD d2,2; if() #1 Test
COMPAREV d2,0
GOTOTRUE 387; Test 'if'
LOADD d2,1; InlineFunc[void printf(char32)] Params Start AND if() #1 Body Start
PUSHR d2
LOADD d2,0
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End AND if() #1 Body End
POPARGS d5,0.0003
RETURNFUNC; Func[void maybePrint(bool, int, int)] Body End


QUIT; void run() Body