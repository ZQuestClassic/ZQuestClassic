stderr:

Compiling 'ffc_hello_world.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 23,
    "symbols": 34,
    "identifiers": 106,
    "elided": true
  }
}

zasm:

SETV GD1 114; void run() Body Start
SETV GD2 116
QUIT; void run() Body End
PUSHR D0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0 0.0005
SETR D4 SP2
ALLOCATEMEMV D2 40 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "FFC script started, ID: %d x: %d y: %d\n"
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFFFC
PUSHVARGR FFCID
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_X
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_Y; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
ALLOCATEMEMV D2 9 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "num: %d\n"
PUSHR D2
LOAD D2 0.0006
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
ALLOCATEMEMV D2 19 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "Screen->Index: %d\n"
PUSHR D2
PUSHVARGR SCREEN_INDEX; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
STOREV 0 0.0004
WAITDRAW; InlineFunc[void Waitdraw()] Body AND while(true) #4 Body [Opt:AlwaysOn] Start
LOAD D2 0.0004; if() #422 Test
PUSHR D2
ADDV D2 1
STORE D2 0.0004
POP D2
COMPAREV D2 30
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 66 ==; Test 'if'
ALLOCATEMEMV D2 43 0; InlineFunc[void printf(char32[])] Params Start AND if() #422 Body Start
WRITEPODSTRING D2 "FFC script is running, ID: %d x: %d y: %d\n"
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFFFC
PUSHVARGR FFCID
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_X
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_Y; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End AND if() #422 Body End
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
SUBV D2 1
STORE D2 0.0003
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SUBV D2 1
STORE D2 0.0002
STOREV 18 0.0001
STOREV 18 0
SETR D2 GAMETIME
ANDV32 D2 0.0002
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 88 ==
SETV D2 0.0003
GOTO 89
SETV D2 0
PUSHR D2
POP D2
SETR SCREEN_DRAW_ORIGIN D2
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
PUSHR GD1
PUSHV 1
PUSHARGSV 0 0.0004
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #4 Body [Opt:AlwaysOn] End
GOTO 39; while() #4 End AND [Opt:NeverRet] AND void run(int) Body End
PUSHARGSV 0 0.0006; void run() Body Start
SETR D4 SP2
SETV D2 0.0003
PUSHR D2
POP D2
SETR SCREEN_DRAW_ORIGIN D2
WAITDRAW; InlineFunc[void Waitdraw()] Body AND while(true) #2 Body [Opt:AlwaysOn] Start
STOREV 1 0.0004; for() #150 setup
LOAD D2 0.0004; for() #150 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 177 ==; for() #150 TestFail?
LOAD D2 0.0004; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #150 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0003
LOAD D2 0.0003; unless() #420 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 173 ==; Test 'unless' AND continue 1; AND unless() #420 Body
STOREV 5 0.0002
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHV 6; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHR GD2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End AND for() #150 Body End
LOAD D2 0.0004; for() #150 LoopIncrement
ADDV D2 1
STORE D2 0.0004
GOTO 125; for() #150 End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #2 Body [Opt:AlwaysOn] End
GOTO 123; while() #2 End AND [Opt:NeverRet] AND void run() Body End
PUSHR REFDMAPDATA; void run() Body Start
PUSHARGSV 0 0.0005
SETR D4 SP2
SETV D2 0.0003
PUSHR D2
POP D2
SETR SCREEN_DRAW_ORIGIN D2
WAITDRAW; InlineFunc[void Waitdraw()] Body AND while(true) #3 Body [Opt:AlwaysOn] Start
STOREV 1 0.0004; for() #151 setup
LOAD D2 0.0004; for() #151 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 236 ==; for() #151 TestFail?
LOAD D2 0.0004; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #151 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0003
LOAD D2 0.0003; unless() #421 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 232 ==; Test 'unless' AND continue 1; AND unless() #421 Body
STOREV 3 0.0002
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 18
STORE D2 0
PUSHV 6; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHR GD2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End AND for() #151 Body End
LOAD D2 0.0004; for() #151 LoopIncrement
ADDV D2 1
STORE D2 0.0004
GOTO 188; for() #151 End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #3 Body [Opt:AlwaysOn] End
GOTO 186; while() #3 End AND [Opt:NeverRet] AND void run() Body End
