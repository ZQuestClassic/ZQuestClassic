stderr:

Compiling 'maths.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 6,
    "symbols": 14,
    "identifiers": 91,
    "elided": true
  }
}

zasm:

QUIT; void run() Body
PUSHR REFFFC; void run() Body Start
PUSHARGSV 0 0.0002
SETR D4 SP2
STOREV 1 0.0001
STOREV -10 0; for() #150 setup AND while(true) #2 Body [Opt:AlwaysOn] Start
LOAD D2 0; for() #150 LoopTest
COMPAREV D2 10
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 37 ==; for() #150 TestFail?
PUSHR D4; for() #150 Body Start
LOAD D2 0.0001; UsrFunc[void doMaths(bool, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void doMaths(bool, int)] Params End
CALLFUNC 0.0041; UsrFunc[void doMaths(bool, int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void doMaths(bool, int)] Params Start
PUSHR D2
LOAD D2 0
MULTV D2 10000
PUSHR D2; UsrFunc[void doMaths(bool, int)] Params End
CALLFUNC 0.0041; UsrFunc[void doMaths(bool, int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void doMaths(bool, int)] Params Start
PUSHR D2
LOAD D2 0
MULTV D2 100000
PUSHR D2; UsrFunc[void doMaths(bool, int)] Params End
CALLFUNC 0.0041; UsrFunc[void doMaths(bool, int)] Call
POP D4; for() #150 Body End
LOAD D2 0; for() #150 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7; for() #150 End
WAITFRAME; InlineFunc[void Waitframe()] Body
SETV D2 0
STORE D2 0.0001; while(true) #2 Body [Opt:AlwaysOn] End
GOTO 6; while() #2 End AND [Opt:NeverRet] AND void run() Body End
SETR D4 SP2; Func[void doMaths(bool, int)] Body Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 15 0
WRITEPODSTRING D2 "maths for: %d\n"
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 12 0
WRITEPODSTRING D2 "10 / i = %d"
PUSHR D2
LOAD D2 0
DIVV2 10 D2
SETV D2 10
PUSHR D2
LOAD D2 0
POP D3
DIVR D3 D2
PUSHR D3; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 13 0
WRITEPODSTRING D2 "10 %% i = %d"
PUSHR D2
LOAD D2 0
MODV2 10 D2
SETV D2 10
PUSHR D2
LOAD D2 0
POP D3
MODR D3 D2
PUSHR D3; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 12 0
WRITEPODSTRING D2 "i / 10 = %d"
PUSHR D2
LOAD D2 0
DIVV D2 10
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 13 0
WRITEPODSTRING D2 "i %% 10 = %d"
PUSHR D2
LOAD D2 0
MODV D2 10
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 12 0
WRITEPODSTRING D2 "i + i = %d\n"
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 12 0
WRITEPODSTRING D2 "i - i = %d\n"
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 12 0
WRITEPODSTRING D2 "i * i = %d\n"
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 13 0
WRITEPODSTRING D2 "i * -i = %d\n"
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
SUBV2 0 D2
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 12 0
WRITEPODSTRING D2 "i / i = %d\n"
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
POP D3
DIVR D3 D2
PUSHR D3; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 13 0
WRITEPODSTRING D2 "i / -i = %d\n"
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
SUBV2 0 D2
POP D3
DIVR D3 D2
PUSHR D3; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 20 0
WRITEPODSTRING D2 "i %% (i - 50) = %d\n"
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
SUBV D2 50
POP D3
MODR D3 D2
PUSHR D3; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 17 0
WRITEPODSTRING D2 "i + 100000 = %d\n"
PUSHR D2
LOAD D2 0
ADDV D2 100000
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 17 0
WRITEPODSTRING D2 "i - 100000 = %d\n"
PUSHR D2
LOAD D2 0
SUBV D2 100000
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 17 0
WRITEPODSTRING D2 "i * 100000 = %d\n"
PUSHR D2
LOAD D2 0
MULTV D2 100000
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 18 0
WRITEPODSTRING D2 "i * -100000 = %d\n"
PUSHR D2
LOAD D2 0
MULTV D2 -100000
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 17 0
WRITEPODSTRING D2 "i / 100000 = %d\n"
PUSHR D2
LOAD D2 0
DIVV D2 100000
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 18 0
WRITEPODSTRING D2 "i / -100000 = %d\n"
PUSHR D2
LOAD D2 0
DIVV D2 -100000
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 14 0
WRITEPODSTRING D2 "i %% 50 = %d\n"
PUSHR D2
LOAD D2 0
MODV D2 50
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void maybePrint(bool, char32[], int)] Params Start
PUSHR D2
ALLOCATEMEMV D2 15 0
WRITEPODSTRING D2 "i %% -50 = %d\n"
PUSHR D2
LOAD D2 0
MODV D2 -50
PUSHR D2; UsrFunc[void maybePrint(bool, char32[], int)] Params End
CALLFUNC 0.0278; UsrFunc[void maybePrint(bool, char32[], int)] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void doMaths(bool, int)] Body End
SETR D4 SP2; Func[void maybePrint(bool, char32[], int)] Body Start
MARK_TYPE_STACK 0.0001 0.0001
REF_INC 0.0001
LOAD D2 0.0002; if() #420 Test
COMPAREV D2 0
GOTOCMP 290 ==; Test 'if'
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start AND if() #420 Body Start
PUSHR D2
LOAD D2 0
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End AND if() #420 Body End
REF_REMOVE 0.0001
POPARGS D5 0.0003
RETURNFUNC; Func[void maybePrint(bool, char32[], int)] Body End
