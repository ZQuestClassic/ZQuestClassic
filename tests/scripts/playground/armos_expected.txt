stderr:

Compiling 'armos.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 13,
    "symbols": 45,
    "identifiers": 125,
    "elided": true
  }
}

zasm:

SETV GD8 0; void run() Body Start
SETV GD9 0
SETV GD11 0
SETV GD10 0
SETV GD4 0
SETV GD14 0
SETV GD5 0
SETV GD13 0
SETV GD12 0
SETV GD6 0
SETV GD7 0
SETV GD1 0
SETV GD2 0
SETV GD3 0
ALLOCATEGMEMV D2 25 0
SETR GD25 D2
SETV GD15 0
SETV GD16 0
SETV GD20 0
SETV GD17 0
SETV GD21 0
SETV GD18 0
SETV GD19 0
ALLOCATEGMEMV D2 32 0
SETR GD24 D2
SETV GD22 0
SETV GD23 0
ALLOCATEGMEMV D2 8 0
SETR GD26 D2
ALLOCATEGMEMV D2 1000 0
SETR GD27 D2
QUIT; void run() Body End
PUSHV 0; void run() Body Start
SETR D4 SP2
PUSHR D4
CALLFUNC 0.7928; UsrFunc[void StartGhostZH()] Call
POP D4
PUSHR D4; while(true) #8 Body [Opt:AlwaysOn] Start
CALLFUNC 1.4343; UsrFunc[void UpdateGhostZH1()] Call
POP D4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR D4
CALLFUNC 1.4405; UsrFunc[void UpdateGhostZH2()] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 38; while() #8 End AND [Opt:NeverRet] AND void run() Body End
PUSHR D0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #437 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 62 ==; Test 'if'
SETV D2 -1; if() #437 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
GOTO 68; if() #437 Body End
LOAD D2 0.0001; if() #437 Else Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #437 Else End
POPARGS D5 0.0002
QUIT; void run(int) Body End
PUSHR D0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0 0.0003
SETR D4 SP2
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
PUSHR D4
LOAD D2 0.0003; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Params End
CALLFUNC 0.6172; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
PUSHV 89; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.5103; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 3; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.5103; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.5103; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0003; UsrFunc[void SpawnAnimation(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void SpawnAnimation(ffc, npc)] Params End
CALLFUNC 1.5139; UsrFunc[void SpawnAnimation(ffc, npc)] Call
POP D4
LOAD D2 0.0002
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
STORE D2 0.0001
LOAD D2 0.0002
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0
SETR D2 GD3; if() #818 Test AND while(true) #9 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
GOTOCMP 132 !=
SETR D2 GD5
COMPAREV D2 0
GOTOCMP 132 >
SETV D2 1
GOTO 133
SETV D2 0
COMPAREV D2 0
GOTOCMP 139 ==; Test 'if'
SETV D2 1.5000; if() #818 Body Start
SETR GD5 D2
LOAD D2 0; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body AND if() #818 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params End
CALLFUNC 0.6340; UsrFunc[void Ghost_MoveTowardLink(int, int)] Call
PEEK D4
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 0.6411; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4; while(true) #9 Body [Opt:AlwaysOn] End
GOTO 124; while() #9 End AND [Opt:NeverRet] AND void run(int) Body End
SETR D4 SP2; Func[int RadianAngle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR D4 SP2; Func[int Randf(int)] Body Start
SETV D2 0; InlineFunc[long randgen::LRand(long)] Params Start AND return Start
PUSHR D2
LOAD D2 0; InlineFunc[long randgen::LRand(long)] Params End
POP REFRNG; InlineFunc[long randgen::LRand(long)] Body Start
RNGLRAND2 D2; InlineFunc[long randgen::LRand(long)] Body End
POP D5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR D4 SP2; Func[int AngleDir8(int)] Body Start
LOAD D2 0; InlineFunc[int WrapDegrees(int)] Params
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0
LOAD D2 0; if() #4 Test
COMPAREV D2 157.5000
GOTOCMP 209 >
LOAD D2 0
COMPAREV D2 112.5000
GOTOCMP 209 <=
SETV D2 1
GOTO 210
SETV D2 0
COMPAREV D2 0
GOTOCMP 214 ==; Test 'if'
SETV D2 6; return Start AND if() #4 Body Start
GOTO 293; return End AND if() #4 Body End
LOAD D2 0; if() #5 Test AND if() #4 Else Start
COMPAREV D2 112.5000
GOTOCMP 222 >
LOAD D2 0
COMPAREV D2 67.5000
GOTOCMP 222 <=
SETV D2 1
GOTO 223
SETV D2 0
COMPAREV D2 0
GOTOCMP 227 ==; Test 'if'
SETV D2 1; return Start AND if() #5 Body Start
GOTO 293; return End AND if() #5 Body End
LOAD D2 0; if() #6 Test AND if() #5 Else Start
COMPAREV D2 67.5000
GOTOCMP 235 >
LOAD D2 0
COMPAREV D2 22.5000
GOTOCMP 235 <=
SETV D2 1
GOTO 236
SETV D2 0
COMPAREV D2 0
GOTOCMP 240 ==; Test 'if'
SETV D2 7; return Start AND if() #6 Body Start
GOTO 293; return End AND if() #6 Body End
LOAD D2 0; if() #7 Test AND if() #6 Else Start
COMPAREV D2 22.5000
GOTOCMP 248 >
LOAD D2 0
COMPAREV D2 -22.5000
GOTOCMP 248 <=
SETV D2 1
GOTO 249
SETV D2 0
COMPAREV D2 0
GOTOCMP 253 ==; Test 'if'
SETV D2 3; return Start AND if() #7 Body Start
GOTO 293; return End AND if() #7 Body End
LOAD D2 0; if() #8 Test AND if() #7 Else Start
COMPAREV D2 -22.5000
GOTOCMP 261 >
LOAD D2 0
COMPAREV D2 -67.5000
GOTOCMP 261 <=
SETV D2 1
GOTO 262
SETV D2 0
COMPAREV D2 0
GOTOCMP 266 ==; Test 'if'
SETV D2 5; return Start AND if() #8 Body Start
GOTO 293; return End AND if() #8 Body End
LOAD D2 0; if() #9 Test AND if() #8 Else Start
COMPAREV D2 -67.5000
GOTOCMP 274 >
LOAD D2 0
COMPAREV D2 -112.5000
GOTOCMP 274 <=
SETV D2 1
GOTO 275
SETV D2 0
COMPAREV D2 0
GOTOCMP 279 ==; Test 'if'
SETV D2 0; return Start AND if() #9 Body Start
GOTO 293; return End AND if() #9 Body End
LOAD D2 0; if() #10 Test AND if() #9 Else Start
COMPAREV D2 -112.5000
GOTOCMP 287 >
LOAD D2 0
COMPAREV D2 -157.5000
GOTOCMP 287 <=
SETV D2 1
GOTO 288
SETV D2 0
COMPAREV D2 0
GOTOCMP 292 ==; Test 'if'
SETV D2 4; return Start AND if() #10 Body Start
GOTO 293; return End AND if() #10 Body End
SETV D2 2; return Start AND if() #10 Else Start
POP D5; return End AND if() #10 Else End AND if() #9 Else End AND if() #8 Else End AND if() #7 Else End AND if() #6 Else End AND if() #5 Else End AND if() #4 Else End
RETURNFUNC; Func[int AngleDir8(int)] Body End
PUSHARGSV 0 0.0007; Func[void AutoGhost()] Body Start
SETR D4 SP2
SETR D2 GD26; if() #11 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
GOTOCMP 671 !=; Test 'if' AND return (Void) AND if() #11 Body
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
SETR D2 NPCCOUNT; for() #2 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #2 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 671 ==; for() #2 TestFail?
LOAD D2 0.0003; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #2 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
LOAD D2 0.0006; if() #12 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 667 !=; Test 'if' AND continue 1; AND if() #12 Body
LOAD D2 0.0006; if() #13 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 667 !=; Test 'if' AND continue 1; AND if() #13 Body
LOAD D2 0.0006; if() #14 Test AND if(false) #13 [Opt:AlwaysOff]
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 667 !=; Test 'if' AND continue 1; AND if() #14 Body
LOAD D2 0.0006; unless() #15 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 667 ==; Test 'unless' AND continue 1; AND unless() #15 Body
LOAD D2 0.0006; unless() #16 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 667 ==; Test 'unless' AND continue 1; AND unless() #16 Body
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0006; if(false) #14 [Opt:AlwaysOff]
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0002
LOAD D2 0.0002; if() #17 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 402 ==; Test 'if'
ALLOCATEMEMV D2 2 0; if() #17 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0006; UsrFunc[int __AutoGhostParseName(npc, int[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int __AutoGhostParseName(npc, int[])] Params End
CALLFUNC 0.0673; UsrFunc[int __AutoGhostParseName(npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0002
LOAD D3 0
DEALLOCATEMEMR D3; if() #17 Body End
LOAD D2 0.0002; if() #18 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 421 ==; Test 'if'
ALLOCATEMEMV D2 47 0; if() #18 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, script <= 0\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0973; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 667; continue 1; AND if() #18 Body End
LOAD D2 0.0002; if() #19 Test
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 440 ==; Test 'if'
ALLOCATEMEMV D2 48 0; if() #19 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, script > 511\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0973; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 667; continue 1; AND if() #19 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR D2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.1024; UsrFunc[int FindUnusedFFC(int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0005; unless() #20 Test
COMPAREV D2 0
GOTOCMP 463 !=; Test 'unless'
ALLOCATEMEMV D2 52 0; unless() #20 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, no ffc available\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0973; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 667; continue 1; AND unless() #20 Body End
LOAD D2 0.0005; InlineFunc[ffc screendata::LoadFFC(int)] Params
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0004
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
SETV D2 1; if(true) #21 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0001; if() #22 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 637 ==; Test 'if'
LOAD D2 0.0001; if() #23 Test AND if() #22 Body Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 637 ==; Test 'if'
SETV D2 3; if() #23 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
SETV D2 1024
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #23 Body End
LOAD D2 0.0001; if() #22 Body End AND if() #15 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 655 ==; Test 'if'
SETV D2 1; if() #15 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 667; if() #15 Body End
LOAD D2 0.0001; if() #15 Else Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #15 Else End
LOAD D2 0.0003; for() #2 Body End AND for() #2 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 309; for() #2 End
POPARGS D5 0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0 0.0009; Func[int __AutoGhostParseName(npc, int[])] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 64 0
STORE D2 0.0008
ALLOCATEMEMV D2 64 0
STORE D2 0.0007
SETV D2 1
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End
STOREV 0 0.0006; for() #145 setup
LOAD D2 0.0006; for() #145 LoopTest
COMPAREV D2 63
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 911 ==; for() #145 TestFail?
LOAD D2 0.0008; if() #552 Test AND for() #145 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 64
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 907 ==; Test 'if'
LOAD D2 0.0008; if() #552 Body Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0005
PUSHR D4; if() #288 Test
LOAD D2 0.0005; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 1.4527; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 814 ==; Test 'if'
STOREV 0 0.0004; if() #288 Body Start
LOAD D2 0.0006; for() #146 setup
ADDV D2 1
STORE D2 0.0006
PUSHR D4; for() #146 LoopTest
LOAD D2 0.0008; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 1.4527; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 756 ==; for() #146 TestFail?
LOAD D2 0.0008; for() #146 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #146 Body End
LOAD D2 0.0006; for() #146 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 724; for() #146 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006
LOAD D2 0.0009; if() #553 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 907 ==; Test 'if'
ALLOCATEMEMV D2 59 0; if() #553 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script does not exist.\n"
STORE D2 0.0002
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Script name: %s\n"
STORE D2 0
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 971; return End
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3; if() #553 Body End
GOTO 907; if() #288 Body End
LOAD D2 0.0005; if() #554 Test AND if() #288 Else Start
COMPAREV D2 48
GOTOCMP 820 <
LOAD D2 0.0005
COMPAREV D2 57
GOTOCMP 825 <=
LOAD D2 0.0005
COMPAREV D2 45
GOTOCMP 825 ==
SETV D2 0
GOTO 826
SETV D2 1
COMPAREV D2 0
GOTOCMP 907 ==; Test 'if'
STOREV 0 0.0004; if() #554 Body Start
LOAD D2 0.0005; if() #555 Test
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 845 ==; Test 'if'
SETV D2 45; if() #555 Body Start
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 1
STORE D2 0.0004
LOAD D2 0.0006
ADDV D2 1
STORE D2 0.0006; if() #555 Body End
LOAD D2 0.0006; for() #147 setup
ADDV D2 1
STORE D2 0.0006
LOAD D2 0.0008; for() #147 LoopTest
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 48
GOTOCMP 864 <
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 57
GOTOCMP 864 >
SETV D2 1
GOTO 865
SETV D2 0
COMPAREV D2 0
GOTOCMP 887 ==; for() #147 TestFail?
LOAD D2 0.0008; for() #147 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #147 Body End
LOAD D2 0.0006; for() #147 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 848; for() #147 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int atoi(char32[])] Params Start
SETR D3 D2; InlineFunc[int atoi(char32[])] Params End
ATOI D2 D3; InlineFunc[int atoi(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006; if() #554 Body End
LOAD D2 0.0006; if() #288 Else End AND if() #552 Body End AND for() #145 Body End AND for() #145 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 691; for() #145 End
LOAD D2 0.0009; if() #557 Test AND unless(false) #556 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 961 ==; Test 'if'
ALLOCATEMEMV D2 54 0; if() #557 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script not found.\n"
STORE D2 0.0005
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Enemy name: %s\n"
STORE D2 0.0003
ALLOCATEMEMV D2 55 0
WRITEPODSTRING D2 "  Script name should start after this character: %c\n"
STORE D2 0.0001
LOAD D2 0.0005; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGV 64; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 971; return End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3; if() #557 Body End
SETV D2 1; return Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 971; return End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0011
RETURNFUNC; Func[int __AutoGhostParseName(npc, int[])] Body End
SETR D4 SP2; Func[void __AutoGhostKill(npc)] Body Start
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
POP D5
RETURNFUNC; Func[void __AutoGhostKill(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
LOAD D2 0.0002; InlineFunc[int Max(int, int)] Params Start AND for() #38 setup
ADDV D2 1
PUSHVARGR D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0
LOAD D2 0; for() #38 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1082 ==; for() #38 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #38 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #151 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 1058 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 1058 ==
SETV D2 0
GOTO 1059
SETV D2 1
COMPAREV D2 0
GOTOCMP 1078 ==; Test 'if'
LOAD D2 0.0001; unless() #152 Test AND if() #151 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 1078 !=; Test 'unless'
LOAD D2 0.0001; unless() #153 Test AND unless() #152 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 1078 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #153 Body Start
GOTO 1083; return End AND unless() #153 Body End
LOAD D2 0; unless() #152 Body End AND if() #151 Body End AND for() #38 Body End AND for() #38 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1033; for() #38 End
SETV D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR D4 SP2; Func[int CenterX(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(eweapon)] Body End
SETR D4 SP2; Func[int CenterY(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(eweapon)] Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #17 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1143 ==; Test 'if'
LOAD D2 0.0001; if() #17 Body Start
STORE D2 0.0002
GOTO 1153; if() #17 Body End
LOAD D2 0.0002; if() #65 Test AND if() #17 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1153 ==; Test 'if'
LOAD D2 0; if() #65 Body Start
STORE D2 0.0002; if() #65 Body End
LOAD D2 0.0002; if() #17 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR D4 SP2
SETR D2 LINKHP; if() #66 Test
COMPAREV D2 0
GOTOCMP 1164 >
GOTO 1164
SETV D2 1
GOTO 1165
SETV D2 0
COMPAREV D2 0
GOTOCMP 1214 ==; Test 'if'
STOREV 0 0.0001; if() #66 Body Start
STOREV 1 0; for() #3 setup
LOAD D2 0; for() #3 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1214 ==; for() #3 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #3 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
SETR D2 GD24; if() #67 Test
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
RSHIFTV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
ANDV D2 15
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1210 ==; Test 'if'
SETV D2 0; if() #67 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #67 Body End
LOAD D2 0; for() #3 Body End AND for() #3 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1169; for() #3 End
POPARGS D5 0.0002; if() #66 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
SETR D4 SP2; Func[bool ClockIsActive()] Body Start
SETR D2 GD26; return Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I!=
RETURNFUNC; return End AND Func[bool ClockIsActive()] Body End
PUSHARGSV 0 0.0002; Func[void DrawEWeaponShadow(eweapon)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
SUBV D2 1
MULTV D2 16
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHV 1; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #34 [Opt:AlwaysOn]
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
PUSHR D2
PUSHARGSV 1 0.0002
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(eweapon)] Body End
PUSHARGSV 0 0.0009; Func[void DrawGhostFFCs()] Body Start
SETR D4 SP2
SETV D2 1; if() #101 Test
PUSHR D2
POP D0
SETR D2 SCREENEFLAGSD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1306 ==; Test 'if'
PUSHR D4; unless() #102 Test AND if() #101 Body Start
CALLFUNC 0.1492; UsrFunc[bool __HaveAmulet()] Call
POP D4
COMPAREV D2 0
GOTOCMP 1490 ==; Test 'unless' AND return (Void) AND unless() #102 Body
STOREV 0 0.0008; if() #101 Body End
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
SETV D2 1; if() #36 Test AND if(true) #35 [Opt:AlwaysOn]
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1325 ==; Test 'if'
SETV D2 1; if() #36 Body Start
STORE D2 0.0003
GOTO 1327; if() #36 Body End
SETV D2 2; if() #36 Else Start
STORE D2 0.0003; if() #36 Else End
SETV D2 4
STORE D2 0.0002
STOREV 1 0.0001; for() #16 setup
LOAD D2 0.0001; for() #16 LoopTest
PUSHR D2
SETR D2 NPCCOUNT
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1490 ==; for() #16 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #16 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0006; UsrFunc[int[] __GetDrawingArray(npc)] Params Start
PUSHR D2; UsrFunc[int[] __GetDrawingArray(npc)] Params End
CALLFUNC 0.1511; UsrFunc[int[] __GetDrawingArray(npc)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008; unless() #103 Test
COMPAREV D2 0
GOTOCMP 1486 ==; Test 'unless' AND continue 1; AND unless() #103 Body
SETR D2 GD26; if() #104 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1370 ==; Test 'if'
LOAD D2 0.0008; if() #105 Test AND if() #104 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1486 !=; Test 'if' AND continue 1; AND if() #105 Body
LOAD D2 0.0008; if() #104 Body End AND if() #37 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1382 ==; Test 'if'
SETV D2 64; if() #37 Body Start
STORE D2 0.0005
GOTO 1384; if() #37 Body End
SETV D2 128; if() #37 Else Start
STORE D2 0.0005; if() #37 Else End
LOAD D2 0.0008; if() #38 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1396 ==; Test 'if'
LOAD D2 0.0002; if() #38 Body Start
STORE D2 0.0004
GOTO 1398; if() #38 Body End
LOAD D2 0.0003; if() #38 Else Start
STORE D2 0.0004; if() #38 Else End
SETV D2 3
STORE D2 0.0007
STOREV 0 0; for() #17 setup
LOAD D2 0; for() #17 LoopTest
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1486 ==; for() #17 TestFail?
LOAD D2 0.0008; if() #106 Test AND for() #17 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
GOTOCMP 1428 ==
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 1428 ==
SETV D2 1
GOTO 1429
SETV D2 0
COMPAREV D2 0
GOTOCMP 1479 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #106 Body Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
LOAD D2 0.0005
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #106 Body End
LOAD D2 0.0007
ADDV D2 6
STORE D2 0.0007; for() #17 Body End
LOAD D2 0; for() #17 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1401; for() #17 End
LOAD D2 0.0001; for() #16 Body End AND for() #16 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 1330; for() #16 End
POPARGS D5 0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR D4 SP2; Func[bool __HaveAmulet()] Body Start
SETV D2 50; if() #659 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1501 ==; Test 'if'
SETV D2 1; return Start AND if() #659 Body Start
GOTO 1510; return End AND if() #659 Body End
SETV D2 63; if() #660 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1509 ==; Test 'if'
SETV D2 1; return Start AND if() #660 Body Start
GOTO 1510; return End AND if() #660 Body End
SETV D2 0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int[] __GetDrawingArray(npc)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #570 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1527 ==; Test 'if'
SETV D2 0; return Start AND if() #570 Body Start
GOTO 1547; return End AND if() #570 Body End
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0; unless() #571 Test
COMPAREV D2 0
GOTOCMP 1541 !=; Test 'unless'
SETV D2 0; return Start AND unless() #571 Body Start
GOTO 1547; return End AND unless() #571 Body End
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 23
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int[] __GetDrawingArray(npc)] Body End
PUSHV 0; Func[bool IsWater(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #346 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1563 ==; Test 'if'
SETV D2 1; return Start AND if() #346 Body Start
GOTO 1591; return End AND if() #346 Body End
LOAD D2 0; if() #347 Test
COMPAREV D2 18
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1570 ==; Test 'if'
SETV D2 1; return Start AND if() #347 Body Start
GOTO 1591; return End AND if() #347 Body End
LOAD D2 0; if() #348 Test
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1577 ==; Test 'if'
SETV D2 1; return Start AND if() #348 Body Start
GOTO 1591; return End AND if() #348 Body End
LOAD D2 0; if() #349 Test
COMPAREV D2 86
GOTOCMP 1585 <
LOAD D2 0
COMPAREV D2 91
GOTOCMP 1585 >
SETV D2 1
GOTO 1586
SETV D2 0
COMPAREV D2 0
GOTOCMP 1590 ==; Test 'if'
SETV D2 1; return Start AND if() #349 Body Start
GOTO 1591; return End AND if() #349 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool IsWater(int)] Body End
SETR D4 SP2; Func[bool __IsPit(int)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[bool IsPit(int)] Params Start
PUSHR D2; UsrFunc[bool IsPit(int)] Params End
CALLFUNC 0.7652; UsrFunc[bool IsPit(int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[bool __IsPit(int)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC()] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 1 0; for() #37 setup
LOAD D2 0; for() #37 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1654 ==; for() #37 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #37 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #148 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 1630 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 1630 ==
SETV D2 0
GOTO 1631
SETV D2 1
COMPAREV D2 0
GOTOCMP 1650 ==; Test 'if'
LOAD D2 0.0001; unless() #149 Test AND if() #148 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 1650 !=; Test 'unless'
LOAD D2 0.0001; unless() #150 Test AND unless() #149 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 1650 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #150 Body Start
GOTO 1655; return End AND unless() #150 Body End
LOAD D2 0; unless() #149 Body End AND if() #148 Body End AND for() #37 Body End AND for() #37 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1605; for() #37 End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #174 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1670 ==; Test 'if'
PUSHR D4; if() #174 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.1816; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #174 Body End
LOAD D2 0.0002; if() #175 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1681 ==; Test 'if'
PUSHR D4; if() #175 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.1976; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #175 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001; if() #50 Test
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1751 ==; Test 'if'
PUSHR D4; if() #50 Body Start
LOAD D2 0.0006; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.2304; UsrFunc[int __UnblockableDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
GOTO 1760; if() #50 Body End
LOAD D2 0.0006; if() #50 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2; if() #50 Else End
LOAD D2 0.0003; if() #176 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1771 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #176 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #176 Body End
LOAD D2 0.0001; if() #177 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1787 ==; Test 'if'
SETV D2 0; if() #177 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #177 Body End
LOAD D2 0.0001; if() #178 Test
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1798 ==; Test 'if'
PUSHR D4; if() #178 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.2139; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #178 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #55 Test
COMPAREV D2 129
GOTOCMP 1826 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 1826 ==
SETV D2 0
GOTO 1827
SETV D2 1
COMPAREV D2 0
GOTOCMP 1831 ==; Test 'if'
SETV D2 17; return Start AND if() #55 Body Start
GOTO 1974; return End AND if() #55 Body End
LOAD D2 0.0003; if() #56 Test AND if() #55 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1838 ==; Test 'if'
SETV D2 18; return Start AND if() #56 Body Start
GOTO 1974; return End AND if() #56 Body End
LOAD D2 0.0003; if() #57 Test AND if() #56 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1845 ==; Test 'if'
SETV D2 19; return Start AND if() #57 Body Start
GOTO 1974; return End AND if() #57 Body End
LOAD D2 0.0003; if() #58 Test AND if() #57 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1852 ==; Test 'if'
SETV D2 35; return Start AND if() #58 Body Start
GOTO 1974; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1859 ==; Test 'if'
SETV D2 81; return Start AND if() #59 Body Start
GOTO 1974; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1866 ==; Test 'if'
SETV D2 80; return Start AND if() #60 Body Start
GOTO 1974; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1873 ==; Test 'if'
SETV D2 21; return Start AND if() #61 Body Start
GOTO 1974; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1880 ==; Test 'if'
SETV D2 20; return Start AND if() #62 Body Start
GOTO 1974; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1887 ==; Test 'if'
SETV D2 36; return Start AND if() #63 Body Start
GOTO 1974; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1894 ==; Test 'if'
SETV D2 76; return Start AND if() #64 Body Start
GOTO 1974; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1901 ==; Test 'if'
SETV D2 77; return Start AND if() #65 Body Start
GOTO 1974; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1973 ==; Test 'if'
STOREV 0 0.0002; if() #66 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #43 setup
LOAD D2 0; for() #43 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1957 ==; for() #43 TestFail?
LOAD D2 0; unless() #187 Test AND for() #43 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1953 ==; Test 'unless' AND continue 1; AND unless() #187 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #188 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1953 !=; Test 'if' AND continue 1; AND if() #188 Body
LOAD D2 0.0001; if() #189 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1953 ==; Test 'if'
LOAD D2 0.0001; if() #189 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #190 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1957 !=; Test 'if' AND break 1; AND if() #190 Body
LOAD D2 0; if() #189 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1909; for() #43 End
LOAD D2 0.0002; if() #67 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1964 ==; Test 'if'
SETV D2 4; return Start AND if() #67 Body Start
GOTO 1974; return End AND if() #67 Body End
LOAD D2 0.0002; if() #68 Test AND if() #67 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1971 ==; Test 'if'
SETV D2 5; return Start AND if() #68 Body Start
GOTO 1974; return End AND if() #68 Body End
SETV D2 6; return Start AND if() #68 Else Start
GOTO 1974; return End AND if() #68 Else End AND if() #67 Else End AND if() #66 Body End
SETV D2 0; return Start AND if() #66 Else Start
POPARGS D5 0.0004; return End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #51 Test
COMPAREV D2 129
GOTOCMP 1985 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 1985 ==
SETV D2 0
GOTO 1986
SETV D2 1
COMPAREV D2 0
GOTOCMP 1990 ==; Test 'if'
SETV D2 40; return Start AND if() #51 Body Start
GOTO 2027; return End AND if() #51 Body End
LOAD D2 0; if() #52 Test AND if() #51 Else Start
COMPAREV D2 134
GOTOCMP 1998 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 1998 ==
SETV D2 0
GOTO 1999
SETV D2 1
COMPAREV D2 0
GOTOCMP 2003 ==; Test 'if'
SETV D2 32; return Start AND if() #52 Body Start
GOTO 2027; return End AND if() #52 Body End
LOAD D2 0; if() #53 Test AND if() #52 Else Start
COMPAREV D2 140
GOTOCMP 2014 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 2014 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 2014 ==
SETV D2 0
GOTO 2015
SETV D2 1
COMPAREV D2 0
GOTOCMP 2019 ==; Test 'if'
SETV D2 13; return Start AND if() #53 Body Start
GOTO 2027; return End AND if() #53 Body End
LOAD D2 0; if() #54 Test AND if() #53 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2026 ==; Test 'if'
SETV D2 51; return Start AND if() #54 Body Start
GOTO 2027; return End AND if() #54 Body End
SETV D2 0; return Start AND if() #54 Else Start
POP D5; return End AND if() #54 Else End AND if() #53 Else End AND if() #52 Else End AND if() #51 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #488 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2046 ==; Test 'if'
LOAD D2 0.0001; if() #488 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #488 Body End
LOAD D2 0.0001; if() #186 Test
COMPAREV D2 0.3927
GOTOCMP 2054 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 2054 >
SETV D2 0
GOTO 2055
SETV D2 1
COMPAREV D2 0
GOTOCMP 2060 ==; Test 'if'
SETV D2 3; if() #186 Body Start
STORE D2 0
GOTO 2110; if() #186 Body End
LOAD D2 0.0001; if() #187 Test AND if() #186 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2068 ==; Test 'if'
SETV D2 7; if() #187 Body Start
STORE D2 0
GOTO 2110; if() #187 Body End
LOAD D2 0.0001; if() #188 Test AND if() #187 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2076 ==; Test 'if'
SETV D2 1; if() #188 Body Start
STORE D2 0
GOTO 2110; if() #188 Body End
LOAD D2 0.0001; if() #189 Test AND if() #188 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2084 ==; Test 'if'
SETV D2 6; if() #189 Body Start
STORE D2 0
GOTO 2110; if() #189 Body End
LOAD D2 0.0001; if() #190 Test AND if() #189 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2092 ==; Test 'if'
SETV D2 2; if() #190 Body Start
STORE D2 0
GOTO 2110; if() #190 Body End
LOAD D2 0.0001; if() #191 Test AND if() #190 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2100 ==; Test 'if'
SETV D2 4; if() #191 Body Start
STORE D2 0
GOTO 2110; if() #191 Body End
LOAD D2 0.0001; if() #192 Test AND if() #191 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2108 ==; Test 'if'
SETV D2 0; if() #192 Body Start
STORE D2 0
GOTO 2110; if() #192 Body End
SETV D2 5; if() #192 Else Start
STORE D2 0; if() #192 Else End
LOAD D2 0.0002; if() #191 Else End AND if() #190 Else End AND if() #189 Else End AND if() #188 Else End AND if() #187 Else End AND if() #186 Else End AND if() #489 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2128 ==; Test 'if'
PUSHR D4; if() #489 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.2304; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #489 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #210 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 2222 ==; Test 'if'
LOAD D2 0.0001; if() #210 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #494 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2161 ==; Test 'if'
LOAD D2 0; if() #494 Body Start
ADDV D2 6.2832
STORE D2 0; if() #494 Body End
LOAD D2 0; if() #211 Test
COMPAREV D2 0.7854
GOTOCMP 2169 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 2169 >
SETV D2 0
GOTO 2170
SETV D2 1
COMPAREV D2 0
GOTOCMP 2182 ==; Test 'if'
SETV D2 4; if() #211 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2302; if() #211 Body End
LOAD D2 0; if() #212 Test AND if() #211 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2197 ==; Test 'if'
SETV D2 3; if() #212 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2302; if() #212 Body End
LOAD D2 0; if() #213 Test AND if() #212 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2212 ==; Test 'if'
SETV D2 7; if() #213 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2302; if() #213 Body End
SETV D2 0; if() #213 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #213 Else End
GOTO 2302; if() #212 Else End AND if() #211 Else End AND if() #210 Body End
PUSHR D4; if() #210 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2440; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #214 Test
COMPAREV D2 0
GOTOCMP 2241 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 2241 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 2241 ==
SETV D2 0
GOTO 2242
SETV D2 1
COMPAREV D2 0
GOTOCMP 2254 ==; Test 'if'
SETV D2 0; if() #214 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2302; if() #214 Body End
LOAD D2 0; if() #215 Test AND if() #214 Else Start
COMPAREV D2 1
GOTOCMP 2265 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2265 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 2265 ==
SETV D2 0
GOTO 2266
SETV D2 1
COMPAREV D2 0
GOTOCMP 2278 ==; Test 'if'
SETV D2 3; if() #215 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2302; if() #215 Body End
LOAD D2 0; if() #216 Test AND if() #215 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2293 ==; Test 'if'
SETV D2 7; if() #216 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2302; if() #216 Body End
SETV D2 4; if() #216 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #216 Else End
POPARGS D5 0.0002; if() #215 Else End AND if() #214 Else End AND if() #210 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #683 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2312 ==; Test 'if'
SETV D2 8; return Start AND if() #683 Body Start
GOTO 2362; return End AND if() #683 Body End
LOAD D2 0; if() #684 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2319 ==; Test 'if'
SETV D2 12; return Start AND if() #684 Body Start
GOTO 2362; return End AND if() #684 Body End
LOAD D2 0; if() #685 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2326 ==; Test 'if'
SETV D2 14; return Start AND if() #685 Body Start
GOTO 2362; return End AND if() #685 Body End
LOAD D2 0; if() #686 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2333 ==; Test 'if'
SETV D2 10; return Start AND if() #686 Body Start
GOTO 2362; return End AND if() #686 Body End
LOAD D2 0; if() #687 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2340 ==; Test 'if'
SETV D2 15; return Start AND if() #687 Body Start
GOTO 2362; return End AND if() #687 Body End
LOAD D2 0; if() #688 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2347 ==; Test 'if'
SETV D2 9; return Start AND if() #688 Body Start
GOTO 2362; return End AND if() #688 Body End
LOAD D2 0; if() #689 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2354 ==; Test 'if'
SETV D2 13; return Start AND if() #689 Body Start
GOTO 2362; return End AND if() #689 Body End
LOAD D2 0; if() #690 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2361 ==; Test 'if'
SETV D2 11; return Start AND if() #690 Body Start
GOTO 2362; return End AND if() #690 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[bool Ghost_CanMove(int, int, int)] Body Start
PUSHR D4; return Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.2380; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int)] Body End
SETR D4 SP2; Func[bool Ghost_CanMove(int, int, int, bool)] Body Start
LOAD D2 0.0002; if() #217 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2388 ==; Test 'if'
SETV D2 1; return Start AND if() #217 Body Start
GOTO 2438; return End AND if() #217 Body End
LOAD D2 0.0003; if() #218 Test
COMPAREV D2 4
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 2396 ==; Test 'if'
LOAD D2 0.0002; if() #218 Body Start
MULTV D2 0.7071
STORE D2 0.0002; if() #218 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2440; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0002; while() #1 Test
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2427 ==; Test 'while'
PUSHR D4; unless() #219 Test AND while() #1 Body Start
LOAD D2 0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.2513; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2423 !=; Test 'unless'
SETV D2 0; return Start AND unless() #219 Body Start
GOTO 2438; return End AND unless() #219 Body End
LOAD D2 0.0002
SUBV D2 8
STORE D2 0.0002; while() #1 Body End
GOTO 2402; while() #1 End
PUSHR D4; return Start
LOAD D2 0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.2513; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0004; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int, bool)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #669 Test
COMPAREV D2 0
GOTOCMP 2449 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2449 >
SETV D2 1
GOTO 2450
SETV D2 0
COMPAREV D2 0
GOTOCMP 2454 ==; Test 'if'
LOAD D2 0; return Start AND if() #669 Body Start
GOTO 2511; return End AND if() #669 Body End
LOAD D2 0; if() #670 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2461 ==; Test 'if'
SETV D2 0; return Start AND if() #670 Body Start
GOTO 2511; return End AND if() #670 Body End
LOAD D2 0; if() #671 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2468 ==; Test 'if'
SETV D2 5; return Start AND if() #671 Body Start
GOTO 2511; return End AND if() #671 Body End
LOAD D2 0; if() #672 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2475 ==; Test 'if'
SETV D2 3; return Start AND if() #672 Body Start
GOTO 2511; return End AND if() #672 Body End
LOAD D2 0; if() #673 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2482 ==; Test 'if'
SETV D2 7; return Start AND if() #673 Body Start
GOTO 2511; return End AND if() #673 Body End
LOAD D2 0; if() #674 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2489 ==; Test 'if'
SETV D2 1; return Start AND if() #674 Body Start
GOTO 2511; return End AND if() #674 Body End
LOAD D2 0; if() #675 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2496 ==; Test 'if'
SETV D2 6; return Start AND if() #675 Body Start
GOTO 2511; return End AND if() #675 Body End
LOAD D2 0; if() #676 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2503 ==; Test 'if'
SETV D2 2; return Start AND if() #676 Body Start
GOTO 2511; return End AND if() #676 Body End
LOAD D2 0; if() #677 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2510 ==; Test 'if'
SETV D2 4; return Start AND if() #677 Body Start
GOTO 2511; return End AND if() #677 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
PUSHARGSV 0 0.0006; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0009; if() #302 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2642 ==; Test 'if'
SETR D2 GD13; if() #302 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #165 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #165 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2600 ==; for() #165 TestFail?
PUSHR D4; unless() #578 Test AND for() #165 Body Start
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.3295; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2596 !=; Test 'unless'
SETV D2 0; return Start AND unless() #578 Body Start
GOTO 3293; return End AND unless() #578 Body End
LOAD D2 0.0005; for() #165 Body End AND for() #165 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 2570; for() #165 End
PUSHR D4; unless() #579 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.3295; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2617 !=; Test 'unless'
SETV D2 0; return Start AND unless() #579 Body Start
GOTO 3293; return End AND unless() #579 Body End
PUSHR D4; unless() #580 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.3295; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2640 !=; Test 'unless'
SETV D2 0; return Start AND unless() #580 Body Start
GOTO 3293; return End AND unless() #580 Body End
SETV D2 1; return Start
GOTO 3293; return End AND if() #302 Body End
LOAD D2 0.0009; if() #303 Test AND if() #302 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2775 ==; Test 'if'
SETR D2 GD13; if() #303 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD1
PUSHR D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #166 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #166 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2733 ==; for() #166 TestFail?
PUSHR D4; unless() #581 Test AND for() #166 Body Start
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.3295; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2729 !=; Test 'unless'
SETV D2 0; return Start AND unless() #581 Body Start
GOTO 3293; return End AND unless() #581 Body End
LOAD D2 0.0005; for() #166 Body End AND for() #166 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 2703; for() #166 End
PUSHR D4; unless() #582 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.3295; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2750 !=; Test 'unless'
SETV D2 0; return Start AND unless() #582 Body Start
GOTO 3293; return End AND unless() #582 Body End
PUSHR D4; unless() #583 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.3295; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2773 !=; Test 'unless'
SETV D2 0; return Start AND unless() #583 Body Start
GOTO 3293; return End AND unless() #583 Body End
SETV D2 1; return Start
GOTO 3293; return End AND if() #303 Body End
LOAD D2 0.0009; if() #304 Test AND if() #303 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2915 ==; Test 'if'
PUSHR D4; if() #584 Test AND if() #304 Body Start
CALLFUNC 0.6394; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 2793 ==
PUSHR D4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2793 !=
SETV D2 1
GOTO 2794
SETV D2 0
COMPAREV D2 0
GOTOCMP 2798 ==; Test 'if'
SETV D2 0; return Start AND if() #584 Body Start
GOTO 3293; return End AND if() #584 Body End
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #167 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #167 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2873 ==; for() #167 TestFail?
PUSHR D4; unless() #585 Test AND for() #167 Body Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.3295; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2869 !=; Test 'unless'
SETV D2 0; return Start AND unless() #585 Body Start
GOTO 3293; return End AND unless() #585 Body End
LOAD D2 0.0005; for() #167 Body End AND for() #167 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 2843; for() #167 End
PUSHR D4; unless() #586 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.3295; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2890 !=; Test 'unless'
SETV D2 0; return Start AND unless() #586 Body Start
GOTO 3293; return End AND unless() #586 Body End
PUSHR D4; unless() #587 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.3295; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2913 !=; Test 'unless'
SETV D2 0; return Start AND unless() #587 Body Start
GOTO 3293; return End AND unless() #587 Body End
SETV D2 1; return Start
GOTO 3293; return End AND if() #304 Body End
LOAD D2 0.0009; if() #305 Test AND if() #304 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3048 ==; Test 'if'
SETR D2 GD12; if() #305 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #168 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #168 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3006 ==; for() #168 TestFail?
PUSHR D4; unless() #588 Test AND for() #168 Body Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.3295; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3002 !=; Test 'unless'
SETV D2 0; return Start AND unless() #588 Body Start
GOTO 3293; return End AND unless() #588 Body End
LOAD D2 0.0005; for() #168 Body End AND for() #168 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 2976; for() #168 End
PUSHR D4; unless() #589 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.3295; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3023 !=; Test 'unless'
SETV D2 0; return Start AND unless() #589 Body Start
GOTO 3293; return End AND unless() #589 Body End
PUSHR D4; unless() #590 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.3295; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3046 !=; Test 'unless'
SETV D2 0; return Start AND unless() #590 Body Start
GOTO 3293; return End AND unless() #590 Body End
SETV D2 1; return Start
GOTO 3293; return End AND if() #305 Body End
LOAD D2 0.0009; if() #306 Test AND if() #305 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3109 ==; Test 'if'
STOREV 0 0; if() #306 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.2380; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #591 Test
COMPAREV D2 0
GOTOCMP 3083 !=; Test 'unless'
SETV D2 0; return Start AND unless() #591 Body Start
GOTO 3293; return End AND unless() #591 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.2380; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 3293; return End AND if() #306 Body End
LOAD D2 0.0009; if() #307 Test AND if() #306 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3170 ==; Test 'if'
STOREV 0 0; if() #307 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.2380; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #592 Test
COMPAREV D2 0
GOTOCMP 3144 !=; Test 'unless'
SETV D2 0; return Start AND unless() #592 Body Start
GOTO 3293; return End AND unless() #592 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.2380; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 3293; return End AND if() #307 Body End
LOAD D2 0.0009; if() #308 Test AND if() #307 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3231 ==; Test 'if'
STOREV 0 0; if() #308 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.2380; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #593 Test
COMPAREV D2 0
GOTOCMP 3205 !=; Test 'unless'
SETV D2 0; return Start AND unless() #593 Body Start
GOTO 3293; return End AND unless() #593 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.2380; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 3293; return End AND if() #308 Body End
LOAD D2 0.0009; if() #309 Test AND if() #308 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3292 ==; Test 'if'
STOREV 0 0; if() #309 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.2380; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #594 Test
COMPAREV D2 0
GOTOCMP 3266 !=; Test 'unless'
SETV D2 0; return Start AND unless() #594 Body Start
GOTO 3293; return End AND unless() #594 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.2380; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 3293; return End AND if() #309 Body End
SETV D2 0; return Start AND if() #309 Else Start
POPARGS D5 0.0010; return End AND if() #309 Else End AND if() #308 Else End AND if() #307 Else End AND if() #306 Else End AND if() #305 Else End AND if() #304 Else End AND if() #303 Else End AND if() #302 Else End
RETURNFUNC; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body End
PUSHV 0; Func[bool Ghost_CanMovePixel(int, int, bool)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #220 Test
COMPAREV D2 0
GOTOCMP 3317 <
LOAD D2 0.0003
PUSHR D2
SETR D2 REGION_WIDTH
POP D3
COMPARER D3 D2
GOTOCMP 3317 >=
LOAD D2 0.0002
COMPAREV D2 0
GOTOCMP 3317 <
LOAD D2 0.0002
PUSHR D2
SETR D2 REGION_HEIGHT
POP D3
COMPARER D3 D2
GOTOCMP 3317 >=
SETV D2 0
GOTO 3318
SETV D2 1
COMPAREV D2 0
GOTOCMP 3325 ==; Test 'if'
PUSHR D4; return Start AND if() #220 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 3518; return End AND if() #220 Body End
LOAD D2 0.0003; InlineFunc[int ComboAt(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
SETR D3 D2; InlineFunc[int ComboAt(int, int)] Params End
POP D2; InlineFunc[int ComboAt(int, int)] Body Start
COMBO_AT D2 D3; InlineFunc[int ComboAt(int, int)] Body End
STORE D2 0
PUSHR D4; unless() #221 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3429 !=; Test 'unless'
LOAD D2 0; if() #222 Test AND unless() #221 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 110
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3348 ==; Test 'if'
SETV D2 0; return Start AND if() #222 Body Start
GOTO 3518; return End AND if() #222 Body End
LOAD D2 0; if() #223 Test
PUSHR D2
POP D0
SETR D2 COMBOFD
COMPAREV D2 96
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3358 ==; Test 'if'
SETV D2 0; return Start AND if() #223 Body Start
GOTO 3518; return End AND if() #223 Body End
LOAD D2 0; if() #224 Test
PUSHR D2
POP D0
SETR D2 COMBOID
COMPAREV D2 96
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3368 ==; Test 'if'
SETV D2 0; return Start AND if() #224 Body Start
GOTO 3518; return End AND if() #224 Body End
PUSHR D4; if() #77 Test
PUSHV 65536; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3385 ==; Test 'if'
LOAD D2 0; if() #225 Test AND if() #77 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3429 ==; Test 'if'
SETV D2 0; return Start AND if() #225 Body Start
GOTO 3518; return End AND if() #225 Body End
GOTO 3429; if() #77 Body End
LOAD D2 0.0001; if() #78 Test AND if() #77 Else Start
COMPAREV D2 0
GOTOCMP 3399 ==; Test 'if'
LOAD D2 0; if() #226 Test AND if() #78 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 54
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3429 ==; Test 'if'
SETV D2 0; return Start AND if() #226 Body Start
GOTO 3518; return End AND if() #226 Body End
GOTO 3429; if() #78 Body End
LOAD D2 0; if() #227 Test AND if() #78 Else Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 128
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3409 ==; Test 'if'
SETV D2 0; return Start AND if() #227 Body Start
GOTO 3518; return End AND if() #227 Body End
LOAD D2 0; if() #228 Test
PUSHR D2
POP D0
SETR D2 COMBOFD
COMPAREV D2 97
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3419 ==; Test 'if'
SETV D2 0; return Start AND if() #228 Body Start
GOTO 3518; return End AND if() #228 Body End
LOAD D2 0; if() #229 Test
PUSHR D2
POP D0
SETR D2 COMBOID
COMPAREV D2 97
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3429 ==; Test 'if'
SETV D2 0; return Start AND if() #229 Body Start
GOTO 3518; return End AND if() #229 Body End
PUSHR D4; if() #78 Else End AND if() #77 Else End AND unless() #221 Body End AND if() #230 Test
PUSHV 65539; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3441 ==; Test 'if'
PUSHR D4; return Start AND if() #230 Body Start
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.1549; UsrFunc[bool IsWater(int)] Call
POP D4
GOTO 3518; return End AND if() #230 Body End
PUSHR D4; if() #231 Test
PUSHV 65538; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3464 ==; Test 'if'
PUSHR D4; return Start AND if() #231 Body Start
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.1549; UsrFunc[bool IsWater(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3462 !=
LOAD D2 0
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 58
GOTOCMP 3462 ==
SETV D2 0
GOTO 3518
SETV D2 1
GOTO 3518; return End AND if() #231 Body End
PUSHR D4; if() #232 Test
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.1549; UsrFunc[bool IsWater(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3476 ==; Test 'if'
PUSHR D4; return Start AND if() #232 Body Start
PUSHV 2048; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 3518; return End AND if() #232 Body End
PUSHR D4; if() #233 Test
LOAD D2 0; UsrFunc[bool __IsPit(int)] Params Start
PUSHR D2; UsrFunc[bool __IsPit(int)] Params End
CALLFUNC 0.1593; UsrFunc[bool __IsPit(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3488 ==; Test 'if'
PUSHR D4; return Start AND if() #233 Body Start
PUSHV 4096; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 3518; return End AND if() #233 Body End
PUSHR D4; if() #79 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3496 ==; Test 'if'
SETV D2 1; return Start AND if() #79 Body Start
GOTO 3518; return End AND if() #79 Body End
PUSHR D4; if() #80 Test AND if() #79 Else Start
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3510 ==; Test 'if'
PUSHR D4; return Start AND if() #80 Body Start
LOAD D2 0.0003; UsrFunc[bool __FullTileWalkable(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[bool __FullTileWalkable(int, int)] Params End
CALLFUNC 0.3551; UsrFunc[bool __FullTileWalkable(int, int)] Call
POP D4
GOTO 3518; return End AND if() #80 Body End
LOAD D2 0.0003; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND return Start AND if() #80 Else Start
PUSHR D2
LOAD D2 0.0002
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
SETCMP D2 I==
POPARGS D5 0.0004; return End AND if() #80 Else End AND if() #79 Else End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int, bool)] Body End
SETR D4 SP2; Func[bool Ghost_FlagIsSet(int)] Body Start
LOAD D2 0; if() #113 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3539 ==; Test 'if'
SETR D2 GD16; return Start AND if() #113 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
GOTO 3549; return End AND if() #113 Body End
SETR D2 GD15; return Start AND if() #113 Else Start
PUSHR D2
LOAD D2 0
POP D3
ANDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
POP D5; return End AND if() #113 Else End
RETURNFUNC; Func[bool Ghost_FlagIsSet(int)] Body End
SETR D4 SP2; Func[bool __FullTileWalkable(int, int)] Body Start
LOAD D2 0.0001; if() #568 Test
COMPAREV D2 0
GOTOCMP 3572 <
LOAD D2 0
COMPAREV D2 0
GOTOCMP 3572 <
LOAD D2 0.0001
PUSHR D2
SETR D2 REGION_WIDTH
POP D3
COMPARER D3 D2
GOTOCMP 3572 >=
LOAD D2 0
PUSHR D2
SETR D2 REGION_HEIGHT
POP D3
COMPARER D3 D2
GOTOCMP 3572 >=
SETV D2 0
GOTO 3573
SETV D2 1
COMPAREV D2 0
GOTOCMP 3580 ==; Test 'if'
PUSHR D4; return Start AND if() #568 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 3640; return End AND if() #568 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0001
MODV D2 16
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0
MODV D2 16
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #569 Test
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 3634 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 3634 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 3634 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 3634 !=
SETV D2 0
GOTO 3635
SETV D2 1
COMPAREV D2 0
GOTOCMP 3639 ==; Test 'if'
SETV D2 0; return Start AND if() #569 Body Start
GOTO 3640; return End AND if() #569 Body End
SETV D2 1; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __FullTileWalkable(int, int)] Body End
PUSHARGSV 0 0.0004; Func[bool Ghost_CheckFreeze(ffc, npc)] Body Start
SETR D4 SP2
PUSHR D4; if() #234 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3655 ==
PUSHR D4
CALLFUNC 0.1216; UsrFunc[bool ClockIsActive()] Call
POP D4
COMPAREV D2 0
GOTOCMP 3669 !=
PUSHR D4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3667 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTUN
COMPAREV D2 0
GOTOCMP 3669 >
SETV D2 0
GOTO 3670
SETV D2 1
COMPAREV D2 0
GOTOCMP 3898 ==; Test 'if'
LOAD D2 0.0005; if() #234 Body Start
PUSHR D2
POP REFFFC
SETR D2 XD
STORE D2 0.0003
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 YD
STORE D2 0.0002
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 XD2
STORE D2 0.0001
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 YD2
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETR D2 GD17
ORV D2 2
SETR GD17 D2
PUSHR D4; while() #2 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3742 ==
PUSHR D4
CALLFUNC 0.1216; UsrFunc[bool ClockIsActive()] Call
POP D4
COMPAREV D2 0
GOTOCMP 3756 !=
PUSHR D4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3754 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTUN
COMPAREV D2 0
GOTOCMP 3756 >
SETV D2 0
GOTO 3757
SETV D2 1
COMPAREV D2 0
GOTOCMP 3862 ==; Test 'while'
PUSHR D4; while() #2 Body Start
LOAD D2 0.0005; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 0.3901; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_DrawShadow(npc)] Params Start
PUSHR D2; UsrFunc[void __Ghost_DrawShadow(npc)] Params End
CALLFUNC 0.3986; UsrFunc[void __Ghost_DrawShadow(npc)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 0.4151; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND unless() #81 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 3783 !=; Test 'unless'
SETV D2 0; return Start AND unless() #81 Body Start
GOTO 3899; return End
GOTO 3793; unless() #81 Body End
LOAD D2 0.0004; if() #235 Test AND unless() #81 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3793 ==; Test 'if'
SETV D2 0; return Start AND if() #235 Body Start
GOTO 3899; return End AND if() #235 Body End
PUSHR D4; unless() #81 Else End
LOAD D2 0.0005; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.4551; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3822 ==; Test 'if'
SETR D2 GD10; if() #82 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.2440; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
GOTO 3854; if() #82 Body End
PUSHR D4; if() #83 Test AND if() #82 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3845 ==; Test 'if'
SETR D2 GD10; if() #83 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.2440; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
GOTO 3854; if() #83 Body End
SETR D2 GD10; if() #83 Else Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #83 Else End
PUSHR D4; if() #82 Else End
LOAD D2 0.0005; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params End
CALLFUNC 0.4685; UsrFunc[void Ghost_CheckHit(ffc, npc)] Call
POP D4; while() #2 Body End
GOTO 3731; while() #2 End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2; if() #234 Body End
SETV D2 1; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool Ghost_CheckFreeze(ffc, npc)] Body End
PUSHV 0; Func[void __Ghost_UpdateFlashing(ffc, npc)] Body Start
SETR D4 SP2
STOREV 0 0
SETR D2 GD20; if() #635 Test
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 3919 ==; Test 'if'
SETR D2 GD20; if() #635 Body Start
SUBV D2 1
SETR GD20 D2
SETR D2 GD20; if() #636 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3919 ==; Test 'if'
SETV D2 1; if() #636 Body Start
STORE D2 0; if() #636 Body End
SETR D2 GD17; if() #635 Body End AND if() #637 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3984 ==; Test 'if'
SETR D2 GD20; if() #338 Test AND if() #637 Body Start
COMPAREV D2 0
GOTOCMP 3930 <=
SETV D2 1
GOTO 3931
SETV D2 0
COMPAREV D2 0
GOTOCMP 3948 ==; Test 'if'
SETR D2 GD26; if() #338 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
RSHIFTV D2 1
SUBV2 9 D2
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
GOTO 3984; if() #338 Body End
LOAD D2 0.0001; if() #339 Test AND if() #338 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 64
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3972 ==; Test 'if'
SETR D2 GD26; if() #339 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
ANDV D2 3
ADDV D2 6
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
GOTO 3984; if() #339 Body End
LOAD D2 0; if() #638 Test AND if() #339 Else Start
COMPAREV D2 0
GOTOCMP 3984 ==; Test 'if'
SETR D2 GD11; if() #638 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2; if() #638 Body End
POPARGS D5 0.0003; if() #339 Else End AND if() #338 Else End AND if() #637 Body End
RETURNFUNC; Func[void __Ghost_UpdateFlashing(ffc, npc)] Body End
PUSHARGSV 0 0.0004; Func[void __Ghost_DrawShadow(npc)] Body Start
SETR D4 SP2
SETR D2 GD3; if() #595 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4149 !=; Test 'if' AND return (Void) AND if() #595 Body
PUSHR D4; unless() #596 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4013 !=
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 4
GOTOCMP 4013 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCTYPE
COMPAREV D2 40
GOTOCMP 4013 ==
SETV D2 0
GOTO 4014
SETV D2 1
COMPAREV D2 0
GOTOCMP 4149 ==; Test 'unless' AND return (Void) AND unless() #596 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETR D2 GD12; if() #310 Test
COMPAREV D2 3
GOTOCMP 4028 <
SETR D2 GD13
COMPAREV D2 3
GOTOCMP 4028 <
SETV D2 0
GOTO 4029
SETV D2 1
COMPAREV D2 0
GOTOCMP 4077 ==; Test 'if'
SETR D2 GD1; if() #310 Body Start
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
SETV D2 1
STORE D2 0
PUSHR D4; if() #311 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4070 ==; Test 'if'
SETV D2 27400; if() #311 Body Start
STORE D2 0.0001
GOTO 4131; if() #311 Body End
SETR D2 GD26; if() #311 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
STORE D2 0.0001; if() #311 Else End
GOTO 4131; if() #310 Body End
SETR D2 GD1; if() #310 Else Start
PUSHR D2
SETR D2 GD12
SUBV D2 2
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 2
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
SUBV D2 2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
SETV D2 2
STORE D2 0
PUSHR D4; if() #312 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4116 ==; Test 'if'
SETV D2 27392; if() #312 Body Start
STORE D2 0.0001
GOTO 4131; if() #312 Body End
SETR D2 GD26; if() #312 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 4
MULTV D2 2
SETV D2 2
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
POP D3
MULTR D2 D3
ADDV D2 27392
STORE D2 0.0001; if() #312 Else End
PUSHV 1; if() #310 Else End AND InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #313 [Opt:AlwaysOn]
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_DrawShadow(npc)] Body End
PUSHARGSV 0 0.0004; Func[void Ghost_WaitframeLight(ffc, npc)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 24 0
PUSHR D2
SETR D0 D2
PUSHR D0
SETR D2 GD1
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
SETR D2 GD2
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
SETR D2 GD3
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D0
SETR D2 GD5
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
SETR D2 GD6
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
SETR D2 GD7
POP D0
WRITEPODARRAYVR 5 D2
PUSHR D0
SETR D2 GD8
POP D0
WRITEPODARRAYVR 6 D2
PUSHR D0
SETR D2 GD9
POP D0
WRITEPODARRAYVR 7 D2
PUSHR D0
SETR D2 GD18
POP D0
WRITEPODARRAYVR 8 D2
PUSHR D0
SETR D2 GD19
POP D0
WRITEPODARRAYVR 9 D2
PUSHR D0
SETR D2 GD11
POP D0
WRITEPODARRAYVR 10 D2
PUSHR D0
SETR D2 GD4
POP D0
WRITEPODARRAYVR 11 D2
PUSHR D0
SETR D2 GD10
POP D0
WRITEPODARRAYVR 12 D2
PUSHR D0
SETR D2 GD12
POP D0
WRITEPODARRAYVR 13 D2
PUSHR D0
SETR D2 GD13
POP D0
WRITEPODARRAYVR 14 D2
PUSHR D0
SETR D2 GD15
POP D0
WRITEPODARRAYVR 15 D2
PUSHR D0
SETR D2 GD16
POP D0
WRITEPODARRAYVR 16 D2
PUSHR D0
SETR D2 GD17
POP D0
WRITEPODARRAYVR 17 D2
PUSHR D0
SETR D2 GD20
POP D0
WRITEPODARRAYVR 18 D2
PUSHR D0
SETR D2 GD21
POP D0
WRITEPODARRAYVR 19 D2
PUSHR D0
SETR D2 GD14
POP D0
WRITEPODARRAYVR 20 D2
PUSHR D0
SETR D2 GD22
POP D0
WRITEPODARRAYVR 21 D2
PUSHR D0
SETR D2 GD23
POP D0
WRITEPODARRAYVR 22 D2
POP D2
STORE D2 0.0002
ALLOCATEMEMV D2 21 0
STORE D2 0.0001
SETR D2 GD25; if() #331 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4283 ==; Test 'if'
STOREV 0 0; for() #62 setup AND if() #331 Body Start
LOAD D2 0; for() #62 LoopTest
COMPAREV D2 21
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4283 ==; for() #62 TestFail?
SETR D2 GD25; for() #62 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #62 Body End
LOAD D2 0; for() #62 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 4261; for() #62 End
LOAD D2 0.0004; if() #331 Body End AND InlineFunc[bool npc::isValid()] Params AND if() #332 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 4300 ==; Test 'if'
LOAD D2 0.0002; if() #332 Body Start
ORV D2 65536
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #332 Body End
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND if() #162 Test AND do-while() #2 Body Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 4362 ==; Test 'if'
SETR D2 GD25; if() #164 Test AND if(true) #163 [Opt:AlwaysOn] AND if() #162 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4337 ==; Test 'if'
ALLOCATEMEMV D2 34 0; if() #164 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params End
CALLFUNC 0.7305; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 23 D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 0.7580; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 4367; if() #164 Body End
ALLOCATEMEMV D2 10 0; if() #164 Else Start
STORE D2 0
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params End
CALLFUNC 0.7305; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 23 D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 0.7580; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3; if() #164 Else End
GOTO 4367; if() #162 Body End
PUSHR D4; if() #162 Else Start
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 0.7580; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4; if() #162 Else End
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR GD1 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 1
SETR GD2 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 2
SETR GD3 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 3
SETR GD5 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 4
SETR GD6 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 5
SETR GD7 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 6
SETR GD8 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 7
SETR GD9 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 8
SETR GD18 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 9
SETR GD19 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 10
SETR GD11 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 11
SETR GD4 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 12
SETR GD10 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 13
SETR GD12 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 14
SETR GD13 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 15
SETR GD15 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 16
SETR GD16 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 17
SETR GD17 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 18
SETR GD20 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 19
SETR GD21 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 20
SETR GD14 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 21
SETR GD22 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 22
SETR GD23 D2
LOAD D2 0.0001; if() #165 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4514 ==; Test 'if'
STOREV 0 0; for() #63 setup AND if() #165 Body Start
LOAD D2 0; for() #63 LoopTest
COMPAREV D2 21
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4520 ==; for() #63 TestFail?
LOAD D2 0.0001; for() #63 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #63 Body End
LOAD D2 0; for() #63 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 4491; for() #63 End
GOTO 4520; if() #165 Body End
SETV D2 0; if() #165 Else Start
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #165 Else End
SETR D2 GD26; do-while() #2 Body End AND do-while() #2 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4300 !=; Test 'while'
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND if() #333 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 4545 ==; Test 'if'
SETV D2 65536; if() #333 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #333 Body End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
POPARGS D5 0.0006
RETURNFUNC; Func[void Ghost_WaitframeLight(ffc, npc)] Body End
SETR D4 SP2; Func[void Ghost_SetPosition(ffc, npc)] Body Start
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND unless() #300 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 4683 ==; Test 'unless' AND return (Void) AND unless() #300 Body
PUSHR D4; if() #156 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4564 !=
SETV D2 1
GOTO 4565
SETV D2 0
COMPAREV D2 0
GOTOCMP 4595 ==; Test 'if'
SETR D2 GD1; if() #156 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 4627; if() #156 Body End
SETR D2 GD1; if() #156 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
SETR D2 GD3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2; if() #156 Else End
PUSHR D4
SETR D2 GD1; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -64
PUSHR REGION_WIDTH; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.1131; UsrFunc[int Clamp(int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
PUSHR D4
SETR D2 GD2; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
SETR D2 GD3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
SUBR D3 D2
PUSHR D3
PUSHV -64
PUSHR REGION_HEIGHT; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.1131; UsrFunc[int Clamp(int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void Ghost_SetPosition(ffc, npc)] Body End
PUSHARGSV 0 0.0005; Func[void Ghost_CheckHit(ffc, npc)] Body Start
SETR D4 SP2
LOAD D2 0.0005; if() #236 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
SETR D2 GD14
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4866 ==; Test 'if'
SETR D2 GD17; if() #236 Body Start
ORV D2 1
SETR GD17 D2
LOAD D2 0.0005
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
SETR D2 GD20; if() #237 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4713 ==; Test 'if'
SETV D2 32; if() #237 Body Start
SETR GD20 D2; if() #237 Body End
PUSHR D4; if() #238 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4866 ==; Test 'if'
SETV D2 0.0001; if() #238 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params AND if() #84 Test
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETR D2 GD12
ADDV D2 1
MULTV D2 16
POP D3
COMPARER D3 D2
GOTOCMP 4759 >=
LOAD D2 0.0003; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETR D2 GD13
ADDV D2 1
MULTV D2 16
POP D3
COMPARER D3 D2
GOTOCMP 4759 >=
SETV D2 1
GOTO 4760
SETV D2 0
COMPAREV D2 0
GOTOCMP 4795 ==; Test 'if'
SETV D2 0.0001; if() #239 Test AND if() #84 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
ANDV D2 2
PUSHR D2
SETR D2 GD4
ANDV D2 2
POP D3
COMPARER D3 D2
GOTOCMP 4784 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 4784 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4784 !=
SETV D2 0
GOTO 4785
SETV D2 1
COMPAREV D2 0
GOTOCMP 4866 ==; Test 'if'
SETV D2 0.0001; if() #239 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
LSHIFTV D2 12
ORV D2 16
SETR GD21 D2; if() #239 Body End
GOTO 4866; if() #84 Body End
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params AND if() #85 Test AND if() #84 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0003; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4836 ==; Test 'if'
SETR D2 GD4; if() #240 Test AND if() #85 Body Start
COMPAREV D2 0
GOTOCMP 4822 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 4822 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 4822 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4822 !=
SETV D2 0
GOTO 4823
SETV D2 1
COMPAREV D2 0
GOTOCMP 4866 ==; Test 'if'
LOAD D2 0.0003; if() #86 Test AND if() #240 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4833 ==; Test 'if'
SETV D2 16; if() #86 Body Start
SETR GD21 D2
GOTO 4866; if() #86 Body End
SETV D2 4112; if() #86 Else Start
SETR GD21 D2; if() #86 Else End
GOTO 4866; if() #240 Body End AND if() #85 Body End
SETR D2 GD4; if() #241 Test AND if() #85 Else Start
COMPAREV D2 2
GOTOCMP 4853 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 4853 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 4853 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4853 !=
SETV D2 0
GOTO 4854
SETV D2 1
COMPAREV D2 0
GOTOCMP 4866 ==; Test 'if'
LOAD D2 0.0004; if() #87 Test AND if() #241 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4864 ==; Test 'if'
SETV D2 8208; if() #87 Body Start
SETR GD21 D2
GOTO 4866; if() #87 Body End
SETV D2 12304; if() #87 Else Start
SETR GD21 D2; if() #87 Else End
SETR D2 GD21; if() #241 Body End AND if() #85 Else End AND if() #84 Else End AND if() #238 Body End AND if() #236 Body End AND if() #242 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5093 ==; Test 'if'
SETR D2 GD21; if() #242 Body Start
RSHIFTV D2 12
STORE D2 0.0004
SETR D2 GD21
ANDV D2 4095
STORE D2 0.0003
STOREV 4 0.0002
PUSHR D4; if() #243 Test
PUSHV 5; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4887 ==; Test 'if'
LOAD D2 0.0002; if() #243 Body Start
DIVV D2 2
STORE D2 0.0002; if() #243 Body End
PUSHR D4; if() #88 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.2364; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4995 ==; Test 'if'
STOREV 0 0.0001; if() #88 Body Start
STOREV 0 0
LOAD D2 0.0003
SUBV D2 1
STORE D2 0.0003
LOAD D2 0.0003; if() #89 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4915 ==; Test 'if'
LOAD D2 0.0004; if() #89 Body Start
LSHIFTV D2 12
PUSHR D2
LOAD D2 0.0003
POP D3
ORR D2 D3
SETR GD21 D2
GOTO 4917; if() #89 Body End
SETV D2 0; if() #89 Else Start
SETR GD21 D2; if() #89 Else End
LOAD D2 0.0004; if() #90 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4926 ==; Test 'if'
LOAD D2 0.0002; if() #90 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 4945; if() #90 Body End
LOAD D2 0.0004; if() #91 Test AND if() #90 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4934 ==; Test 'if'
LOAD D2 0.0002; if() #91 Body Start
STORE D2 0
GOTO 4945; if() #91 Body End
LOAD D2 0.0004; if() #92 Test AND if() #91 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4943 ==; Test 'if'
LOAD D2 0.0002; if() #92 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 4945; if() #92 Body End
LOAD D2 0.0002; if() #92 Else Start
STORE D2 0.0001; if() #92 Else End
LOAD D2 0.0001; if() #91 Else End AND if() #90 Else End AND if() #93 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4970 ==; Test 'if'
SETR D2 GD1; if() #93 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
SETR GD1 D2
SETR D2 GD18
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
SETR GD18 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.4551; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
GOTO 5093; if() #93 Body End
LOAD D2 0; if() #244 Test AND if() #93 Else Start
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5093 ==; Test 'if'
SETR D2 GD2; if() #244 Body Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD2 D2
SETR D2 GD19
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD19 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.4551; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4; if() #244 Body End
GOTO 5093; if() #93 Else End AND if() #88 Body End
STOREV -1 0.0001; if() #88 Else Start
STOREV -1 0
SETV D2 0
SETR GD21 D2
SETR D2 GD17
ORV D2 16
SETR GD17 D2
LOAD D2 0.0004; if() #94 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5013 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Floor(int)] Params Start AND if() #94 Body Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
STORE D2 0
GOTO 5042; if() #94 Body End
LOAD D2 0.0004; if() #95 Test AND if() #94 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5025 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Ceiling(int)] Params Start AND if() #95 Body Start
LSHIFTV D2 0
DIVV D2 8; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
MULTV D2 8
STORE D2 0
GOTO 5042; if() #95 Body End
LOAD D2 0.0004; if() #96 Test AND if() #95 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5036 ==; Test 'if'
SETR D2 GD1; InlineFunc[int Floor(int)] Params Start AND if() #96 Body Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
STORE D2 0.0001
GOTO 5042; if() #96 Body End
SETR D2 GD1; InlineFunc[int Ceiling(int)] Params Start AND if() #96 Else Start
LSHIFTV D2 0
DIVV D2 8; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
MULTV D2 8
STORE D2 0.0001; if() #96 Else End
LOAD D2 0.0001; if() #95 Else End AND if() #94 Else End AND if() #97 Test
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5068 ==; Test 'if'
SETR D2 GD18; if() #97 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
SETR GD18 D2
LOAD D2 0.0001
SETR GD1 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.4551; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
GOTO 5093; if() #97 Body End
LOAD D2 0; if() #245 Test AND if() #97 Else Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5093 ==; Test 'if'
SETR D2 GD19; if() #245 Body Start
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
SETR GD19 D2
LOAD D2 0
SETR GD2 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.4551; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4; if() #245 Body End
POPARGS D5 0.0007; if() #97 Else End AND if() #88 Else End AND if() #242 Body End
RETURNFUNC; Func[void Ghost_CheckHit(ffc, npc)] Body End
SETR D4 SP2; Func[void Ghost_ClearCombos()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
RETURNFUNC; Func[void Ghost_ClearCombos()] Body End
SETR D4 SP2; Func[void Ghost_SetFlag(int)] Body Start
LOAD D2 0; if() #155 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5121 ==; Test 'if'
SETR D2 GD16; if() #155 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ORR D2 D3
SETR GD16 D2
GOTO 5127; if() #155 Body End
SETR D2 GD15; if() #155 Else Start
PUSHR D2
LOAD D2 0
POP D3
ORR D2 D3
SETR GD15 D2; if() #155 Else End
POP D5
RETURNFUNC; Func[void Ghost_SetFlag(int)] Body End
SETR D4 SP2; Func[void Ghost_UnsetFlag(int)] Body Start
LOAD D2 0; if() #157 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5147 ==; Test 'if'
SETR D2 GD16; if() #157 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 -2
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
SETR GD16 D2
GOTO 5154; if() #157 Body End
SETR D2 GD15; if() #157 Else Start
PUSHR D2
LOAD D2 0
BITNOT D2
POP D3
ANDR D2 D3
SETR GD15 D2; if() #157 Else End
POP D5
RETURNFUNC; Func[void Ghost_UnsetFlag(int)] Body End
PUSHARGSV 0 0.0004; Func[void Ghost_MoveXY(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0005; if() #292 Test
COMPAREV D2 0
GOTOCMP 5174 >=
PUSHR D4
CALLFUNC 0.6394; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 5174 ==
PUSHR D4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5174 !=
SETV D2 1
GOTO 5175
SETV D2 0
COMPAREV D2 0
GOTOCMP 5179 ==; Test 'if'
SETV D2 0; if() #292 Body Start
STORE D2 0.0005; if() #292 Body End
LOAD D2 0.0006; while() #3 Test AND InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 8
GOTOCMP 5189 >
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 8
GOTOCMP 5189 >
SETV D2 0
GOTO 5190
SETV D2 1
COMPAREV D2 0
GOTOCMP 5256 ==; Test 'while'
LOAD D2 0.0006; InlineFunc[int Abs(int)] Params AND if() #138 Test AND while() #3 Body Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 5229 ==; Test 'if'
LOAD D2 0.0006; if() #139 Test AND if() #138 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5218 ==; Test 'if'
PUSHR D4; if() #139 Body Start
PUSHV 8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.5156; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006
SUBV D2 8
STORE D2 0.0006
GOTO 5179; if() #139 Body End
PUSHR D4; if() #139 Else Start
PUSHV -8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.5156; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006
ADDV D2 8
STORE D2 0.0006; if() #139 Else End
GOTO 5179; if() #138 Body End
LOAD D2 0.0005; if() #140 Test AND if() #138 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5245 ==; Test 'if'
PUSHR D4; if() #140 Body Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 8
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.5156; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0005
SUBV D2 8
STORE D2 0.0005
GOTO 5179; if() #140 Body End
PUSHR D4; if() #140 Else Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV -8
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.5156; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0005
ADDV D2 8
STORE D2 0.0005; if() #140 Else End
GOTO 5179; if() #138 Else End AND while() #3 Body End AND while() #3 End
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0006; if() #141 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5331 ==; Test 'if'
SETR D2 GD22; if() #141 Body Start
RSHIFTV D2 8
STORE D2 0.0002
SETR D2 GD1
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #142 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5301 ==; Test 'if'
LOAD D2 0.0003; if() #142 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 5323; if() #142 Body End
PUSHR D4; if() #143 Test AND if() #142 Else Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0006
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.2364; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5319 ==; Test 'if'
LOAD D2 0.0003; if() #143 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 5323; if() #143 Body End
LOAD D2 0.0003; if() #143 Else Start
RSHIFTV D2 3
LSHIFTV D2 3
STORE D2 0.0003; if() #143 Else End
LOAD D2 0.0003; if() #142 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
GOTO 5414; if() #141 Body End
LOAD D2 0.0006; if() #293 Test AND if() #141 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5414 ==; Test 'if'
SETR D2 GD12; if() #293 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
STORE D2 0.0002
SETR D2 GD1
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #144 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5384 ==; Test 'if'
LOAD D2 0.0003; if() #144 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 5407; if() #144 Body End
PUSHR D4; if() #145 Test AND if() #144 Else Start
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.2364; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5401 ==; Test 'if'
LOAD D2 0.0003; if() #145 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 5407; if() #145 Body End
LOAD D2 0.0003; if() #145 Else Start
ADDV D2 7
RSHIFTV D2 3
LSHIFTV D2 3
SUBV D2 1
STORE D2 0.0003; if() #145 Else End
LOAD D2 0.0003; if() #144 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2; if() #293 Body End
LOAD D2 0.0005; if() #141 Else End AND if() #146 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5485 ==; Test 'if'
SETR D2 GD23; if() #146 Body Start
RSHIFTV D2 8
STORE D2 0.0002
SETR D2 GD2
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #147 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5455 ==; Test 'if'
LOAD D2 0.0003; if() #147 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 5477; if() #147 Body End
PUSHR D4; if() #148 Test AND if() #147 Else Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0005
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.2364; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5473 ==; Test 'if'
LOAD D2 0.0003; if() #148 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 5477; if() #148 Body End
LOAD D2 0.0003; if() #148 Else Start
RSHIFTV D2 3
LSHIFTV D2 3
STORE D2 0.0003; if() #148 Else End
LOAD D2 0.0003; if() #147 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
GOTO 5568; if() #146 Body End
LOAD D2 0.0005; if() #294 Test AND if() #146 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5568 ==; Test 'if'
SETR D2 GD13; if() #294 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
STORE D2 0.0002
SETR D2 GD2
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #149 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5538 ==; Test 'if'
LOAD D2 0.0003; if() #149 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 5561; if() #149 Body End
PUSHR D4; if() #150 Test AND if() #149 Else Start
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.2364; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5555 ==; Test 'if'
LOAD D2 0.0003; if() #150 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 5561; if() #150 Body End
LOAD D2 0.0003; if() #150 Else Start
ADDV D2 7
RSHIFTV D2 3
LSHIFTV D2 3
SUBV D2 1
STORE D2 0.0003; if() #150 Else End
LOAD D2 0.0003; if() #149 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2; if() #294 Body End
PUSHR D4; if() #146 Else End AND if() #295 Test
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5580 ==
SETR D2 GD17
ANDV D2 4
COMPAREV D2 0
GOTOCMP 5580 !=
SETV D2 1
GOTO 5581
SETV D2 0
COMPAREV D2 0
GOTOCMP 5638 ==; Test 'if'
PUSHR D4; if() #151 Test AND if() #295 Body Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5603 ==; Test 'if'
PUSHR D4; if() #151 Body Start
LOAD D2 0.0006; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapRadians(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2
LOAD D2 0.0005
SETR D1 D2; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapRadians(int)] Params End
WRAPRADIANS D2; InlineFunc[int WrapRadians(int)] Body
MULTV D2 57.2958
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0197; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 5634; if() #151 Body End
LOAD D2 0.0006; InlineFunc[int Abs(int)] Params AND if() #152 Test AND if() #151 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5624 ==; Test 'if'
LOAD D2 0.0005; if() #153 Test AND if() #152 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5621 ==; Test 'if'
SETV D2 0; if() #153 Body Start
SETR GD4 D2
GOTO 5634; if() #153 Body End
SETV D2 1; if() #153 Else Start
SETR GD4 D2; if() #153 Else End
GOTO 5634; if() #152 Body End
LOAD D2 0.0006; if() #154 Test AND if() #152 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5632 ==; Test 'if'
SETV D2 2; if() #154 Body Start
SETR GD4 D2
GOTO 5634; if() #154 Body End
SETV D2 3; if() #154 Else Start
SETR GD4 D2; if() #154 Else End
SETR D2 GD1; if() #152 Else End AND if() #151 Else End
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2; if() #295 Body End
POPARGS D5 0.0007
RETURNFUNC; Func[void Ghost_MoveXY(int, int, int)] Body End
PUSHV 0; Func[void __GhCleanUp(ffc)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFCWIDTH D2
SETV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFCHEIGHT D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DELAY D2
STOREV 0 0; for() #164 setup
LOAD D2 0; for() #164 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5772 ==; for() #164 TestFail?
SETV D2 0; for() #164 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; for() #164 Body End
LOAD D2 0; for() #164 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 5751; for() #164 End
POPARGS D5 0.0002
RETURNFUNC; Func[void __GhCleanUp(ffc)] Body End
SETR D4 SP2; Func[void Ghost_ForceDir(int)] Body Start
LOAD D2 0
SETR GD4 D2
SETR D2 GD17
ORV D2 4
SETR GD17 D2
POP D5
RETURNFUNC; Func[void Ghost_ForceDir(int)] Body End
PUSHARGSV 0 0.0002; Func[void Ghost_Move(int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0004; if() #130 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5795 ==; Test 'if'
LOAD D2 0.0003; if() #130 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 5873; if() #130 Body End
LOAD D2 0.0004; if() #131 Test AND if() #130 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5803 ==; Test 'if'
LOAD D2 0.0003; if() #131 Body Start
STORE D2 0
GOTO 5873; if() #131 Body End
LOAD D2 0.0004; if() #132 Test AND if() #131 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5812 ==; Test 'if'
LOAD D2 0.0003; if() #132 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 5873; if() #132 Body End
LOAD D2 0.0004; if() #133 Test AND if() #132 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5820 ==; Test 'if'
LOAD D2 0.0003; if() #133 Body Start
STORE D2 0.0001
GOTO 5873; if() #133 Body End
LOAD D2 0.0004; if() #134 Test AND if() #133 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5834 ==; Test 'if'
LOAD D2 0.0003; if() #134 Body Start
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0
GOTO 5873; if() #134 Body End
LOAD D2 0.0004; if() #135 Test AND if() #134 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5847 ==; Test 'if'
LOAD D2 0.0003; if() #135 Body Start
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0
GOTO 5873; if() #135 Body End
LOAD D2 0.0004; if() #136 Test AND if() #135 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5860 ==; Test 'if'
LOAD D2 0.0003; if() #136 Body Start
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
MULTV D2 0.7071
STORE D2 0
GOTO 5873; if() #136 Body End
LOAD D2 0.0004; if() #137 Test AND if() #136 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5882 ==; Test 'if'
LOAD D2 0.0003; if() #137 Body Start
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
MULTV D2 0.7071
STORE D2 0
GOTO 5873; if() #137 Body End
GOTO 5882; return (Void) AND if() #137 Else
PUSHR D4; if() #136 Else End AND if() #135 Else End AND if() #134 Else End AND if() #133 Else End AND if() #132 Else End AND if() #131 Else End AND if() #130 Else End
LOAD D2 0.0001; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.5156; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
POPARGS D5 0.0005
RETURNFUNC; Func[void Ghost_Move(int, int, int)] Body End
SETR D4 SP2; Func[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Body Start
LOAD D2 0.0001; if() #602 Test
COMPAREV D2 -1
GOTOCMP 5893 ==
LOAD D2 0.0001
COMPAREV D2 -2
GOTOCMP 5893 ==
SETV D2 0
GOTO 5894
SETV D2 1
COMPAREV D2 0
GOTOCMP 5898 ==; Test 'if'
SETV D2 1; if() #602 Body Start
STORE D2 0.0001; if() #602 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0001
SETR GD10 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
LOAD D2 0
SETR GD11 D2
LOAD D2 0.0002; if() #316 Test
COMPAREV D2 0
GOTOCMP 5944 ==; Test 'if'
LOAD D2 0.0003; if() #316 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
SETR GD1 D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SETR GD2 D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SETR GD3 D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_JUMP
SETR GD5 D2
GOTO 5976; if() #316 Body End
LOAD D2 0.0004; if() #316 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
SETR GD1 D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SETR GD2 D2
SETV D2 0
SETR GD3 D2
SETV D2 0
SETR GD5 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2; if() #316 Else End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.4551; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
SETR GD4 D2
SETV D2 0
SETR GD6 D2
SETV D2 0
SETR GD7 D2
SETV D2 0
SETR GD8 D2
SETV D2 0
SETR GD9 D2
SETR D2 GD1
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
SETR GD12 D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
SETR GD13 D2
SETV D2 0
SETR GD22 D2
SETV D2 0
SETR GD23 D2
LOAD D2 0.0001; if() #603 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6094 ==; Test 'if'
SETV D2 3; if(true) #317 [Opt:AlwaysOn] AND if() #603 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
SETV D2 65456
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCOTILE D2
SETV D2 65456; if(true) #604 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2; if() #603 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003; if() #318 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6125 ==; Test 'if'
SETV D2 1; if() #318 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
GOTO 6137; if() #318 Body End
SETV D2 0; if() #318 Else Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #318 Else End
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
SETV D2 0
SETR GD15 D2
SETV D2 0
SETR GD16 D2
SETV D2 0
SETR GD20 D2
SETV D2 0
SETR GD21 D2
SETV D2 0
SETR GD17 D2
SETV D2 0
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 65536
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Body End
PUSHARGSV 0 0.0008; Func[npc Ghost_InitAutoGhost(ffc, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
SETR D2 NPCCOUNT; for() #50 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #50 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6273 ==; for() #50 TestFail?
LOAD D2 0.0005; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #50 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0007
LOAD D2 0.0007; if() #128 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6203 ==; Test 'if'
SETV D2 0; if() #128 Body Start
STORE D2 0.0006
GOTO 6269; continue 1;
GOTO 6205; if() #128 Body End
SETV D2 1; if() #128 Else Start
STORE D2 0.0006; if() #128 Else End
LOAD D2 0.0007; if() #284 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6220 ==; Test 'if'
SETV D2 0; if() #284 Body Start
STORE D2 0.0006
GOTO 6269; continue 1; AND if() #284 Body End
LOAD D2 0.0006; if() #129 Test
COMPAREV D2 0
GOTOCMP 6273 ==; Test 'if'
PUSHR D4; if() #129 Body Start
LOAD D2 0.0009; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
PUSHV 1
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Params End
CALLFUNC 0.5884; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Call
POP D4
LOAD D2 0.0007; if() #285 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6265 ==; Test 'if'
SETV D2 1; if() #285 Body Start
PUSHR D2
LOAD D2 0.0009
POP D3
PUSHR D2
PUSHR D3
SETV D2 1
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #285 Body End
LOAD D2 0.0007; return Start
GOTO 6318; return End
GOTO 6269; if() #129 Body End
GOTO 6273; break 1; AND if() #129 Else
LOAD D2 0.0005; for() #50 Body End AND for() #50 LoopIncrement
SUBV D2 1
STORE D2 0.0005
GOTO 6178; for() #50 End
ALLOCATEMEMV D2 60 0
WRITEPODSTRING D2 "ghost.zh: AutoGhost initialization failed - enemy missing.\n"
STORE D2 0.0004
ALLOCATEMEMV D2 30 0
WRITEPODSTRING D2 "  DMap %d, screen %X\n"
STORE D2 0.0002
ALLOCATEMEMV D2 30 0
WRITEPODSTRING D2 "  Script %d, enemy ID %d\n"
STORE D2 0
LOAD D2 0.0004; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGR CURDMAP
PUSHVARGR CURDSCR; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP REFFFC
PUSHVARGR FFSCRIPT
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0009
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
QUIT; InlineFunc[void Quit()] Body
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0004
DEALLOCATEMEMR D3
POPARGS D5 0.0010
RETURNFUNC; Func[npc Ghost_InitAutoGhost(ffc, int)] Body End
SETR D4 SP2; Func[int VectorX(int, int)] Body Start
LOAD D2 0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR D4 SP2; Func[int VectorY(int, int)] Body Start
LOAD D2 0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
PUSHV 0; Func[void Ghost_MoveTowardLink(int, int)] Body Start
SETR D4 SP2
PUSHR D4
SETR D2 GD1; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
SETR D2 GD12
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD2
PUSHR D2
SETR D2 GD13
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0178; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
LOAD D2 0.0002; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.6320; UsrFunc[int VectorX(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.6330; UsrFunc[int VectorY(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.5156; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
POPARGS D5 0.0003
RETURNFUNC; Func[void Ghost_MoveTowardLink(int, int)] Body End
SETR D4 SP2; Func[bool IsSideview()] Body Start
SETV D2 0; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
PUSHR D2
SETR D2 CURDMAP; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATASIDEVIEW
POP D3
COMPARER D3 D2
SETCMP D2 BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
PUSHV 0; Func[bool Ghost_Waitframe(ffc, npc, bool, bool)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
PUSHR D4; unless() #322 Test
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 6568 !=; Test 'unless'
PUSHR D4; if() #158 Test AND unless() #322 Body Start
CALLFUNC 0.6394; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 6531 ==; Test 'if'
SETR D2 GD5; if() #323 Test AND if() #158 Body Start
COMPAREV D2 0
GOTOCMP 6445 !=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.2364; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 6445 !=
SETV D2 0
GOTO 6446
SETV D2 1
COMPAREV D2 0
GOTOCMP 6568 ==; Test 'if'
PUSHR D4; if() #323 Body Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0
PUSHR D4
PUSHV 64; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.5129; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
SETR D2 GD5; if() #159 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6500 ==; Test 'if'
PUSHR D4; if() #159 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.5103; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR GD5
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.5782; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2
SETR D2 GD5; if() #324 Test
COMPAREV D2 0
GOTOCMP 6490 <=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.2364; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 6490 !=
SETV D2 1
GOTO 6491
SETV D2 0
COMPAREV D2 0
GOTOCMP 6495 ==; Test 'if'
SETV D2 0; if() #324 Body Start
SETR GD5 D2; if() #324 Body End
PUSHR D4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.5129; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
GOTO 6523; if() #159 Body End
PUSHR D4; if() #159 Else Start
PUSHV 1; UsrFunc[void Ghost_Move(int, int, int)] Params Start
SETR D2 GD5
SUBV2 0 D2
PUSHR D2
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.5782; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.2364; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 6521 ==; Test 'if'
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start AND if() #160 Body Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2
GOTO 6523; if() #160 Body End
SETV D2 0; if() #160 Else Start
SETR GD5 D2; if() #160 Else End
LOAD D2 0; if() #159 Else End AND if() #325 Test
COMPAREV D2 0
GOTOCMP 6568 ==; Test 'if'
PUSHR D4; if() #325 Body Start
PUSHV 64; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.5103; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #325 Body End
GOTO 6568; if() #323 Body End AND if() #158 Body End
SETR D2 GD5; if() #326 Test AND if() #158 Else Start
COMPAREV D2 0
GOTOCMP 6539 !=
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 6539 >
SETV D2 0
GOTO 6540
SETV D2 1
COMPAREV D2 0
GOTOCMP 6568 ==; Test 'if'
SETR D2 GD3; if() #161 Test AND if() #326 Body Start
PUSHR D2
SETR D2 GD5
POP D3
ADDR D2 D3
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 6556 ==; Test 'if'
SETV D2 0; if() #161 Body Start
SETR GD3 D2
SETV D2 0
SETR GD5 D2
GOTO 6568; if() #161 Body End
SETR D2 GD3; if() #161 Else Start
PUSHR D2
SETR D2 GD5
POP D3
ADDR D2 D3
SETR GD3 D2
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2; if() #161 Else End
SETR D2 GD6; if() #326 Body End AND if() #158 Else End AND unless() #322 Body End AND if() #327 Test
COMPAREV D2 0
GOTOCMP 6582 !=
SETR D2 GD7
COMPAREV D2 0
GOTOCMP 6582 !=
SETR D2 GD8
COMPAREV D2 0
GOTOCMP 6582 !=
SETR D2 GD9
COMPAREV D2 0
GOTOCMP 6582 !=
SETV D2 0
GOTO 6583
SETV D2 1
COMPAREV D2 0
GOTOCMP 6606 ==; Test 'if'
SETR D2 GD6; if() #327 Body Start
PUSHR D2
SETR D2 GD8
POP D3
ADDR D2 D3
SETR GD6 D2
SETR D2 GD7
PUSHR D2
SETR D2 GD9
POP D3
ADDR D2 D3
SETR GD7 D2
PUSHR D4
PUSHR GD6; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR GD7
PUSHV 2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.5156; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[void Ghost_ForceDir(int)] Params
CALLFUNC 0.5774; UsrFunc[void Ghost_ForceDir(int)] Call
POP D4; if() #327 Body End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.4551; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 0; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Params End
CALLFUNC 0.6648; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 0.3901; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 0.4151; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
SETR D2 GD17
ANDV D2 32
SETR GD17 D2
PUSHR D4; return Start
LOAD D2 0.0004; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Params End
CALLFUNC 0.7152; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Call
POP D4
POPARGS D5 0.0005; return End
RETURNFUNC; Func[bool Ghost_Waitframe(ffc, npc, bool, bool)] Body End
PUSHARGSV 0 0.0002; Func[void __Ghost_WaitframePart1(ffc, npc, bool)] Body Start
SETR D4 SP2
SETR D2 GD17; if() #340 Test
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6666 ==; Test 'if'
SETR D2 GD4; if() #340 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
GOTO 6763; if() #340 Body End
LOAD D2 0.0002; if() #341 Test AND if() #340 Else Start
COMPAREV D2 0
GOTOCMP 6675 ==; Test 'if'
LOAD D2 0.0003; if() #341 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
SETR GD4 D2
GOTO 6763; if() #341 Body End
PUSHR D4; if() #639 Test AND if() #341 Else Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 6695 ==
SETR D2 GD18
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
GOTOCMP 6693 !=
SETR D2 GD19
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
GOTOCMP 6695 ==
SETV D2 1
GOTO 6696
SETV D2 0
COMPAREV D2 0
GOTOCMP 6763 ==; Test 'if'
SETR D2 GD1; if() #639 Body Start
PUSHR D2
SETR D2 GD18
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
SETR D2 GD2
PUSHR D2
SETR D2 GD19
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHR D4; if() #342 Test
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 6732 ==; Test 'if'
PUSHR D4; if() #342 Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapRadians(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapRadians(int)] Params End
WRAPRADIANS D2; InlineFunc[int WrapRadians(int)] Body
MULTV D2 57.2958
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0197; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 6763; if() #342 Body End
LOAD D2 0.0001; InlineFunc[int Abs(int)] Params AND if() #343 Test AND if() #342 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6753 ==; Test 'if'
LOAD D2 0.0001; if() #344 Test AND if() #343 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6750 ==; Test 'if'
SETV D2 2; if() #344 Body Start
SETR GD4 D2
GOTO 6763; if() #344 Body End
SETV D2 3; if() #344 Else Start
SETR GD4 D2; if() #344 Else End
GOTO 6763; if() #343 Body End
LOAD D2 0; if() #345 Test AND if() #343 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6761 ==; Test 'if'
SETV D2 0; if() #345 Body Start
SETR GD4 D2
GOTO 6763; if() #345 Body End
SETV D2 1; if() #345 Else Start
SETR GD4 D2; if() #345 Else End
SETR D2 GD4; if() #343 Else End AND if() #342 Else End AND if() #639 Body End AND if() #341 Else End AND if() #340 Else End
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
SETR D2 GD1
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2
SETR D2 GD10; if() #346 Test
COMPAREV D2 0
GOTOCMP 6784 ==
SETR D2 GD10
COMPAREV D2 1
GOTOCMP 6784 ==
SETV D2 0
GOTO 6785
SETV D2 1
COMPAREV D2 0
GOTOCMP 6808 ==; Test 'if'
LOAD D2 0.0004; if() #640 Test AND if() #346 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6904 ==; Test 'if'
SETR D2 GD10; if() #640 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #640 Body End
GOTO 6904; if() #346 Body End
PUSHR D4; if() #347 Test AND if() #346 Else Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 6846 ==; Test 'if'
LOAD D2 0.0004; if() #641 Test AND if() #347 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6904 ==; Test 'if'
SETR D2 GD10; if() #641 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.2440; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #641 Body End
GOTO 6904; if() #347 Body End
PUSHR D4; if() #348 Test AND if() #347 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 6884 ==; Test 'if'
LOAD D2 0.0004; if() #642 Test AND if() #348 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6904 ==; Test 'if'
SETR D2 GD10; if() #642 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.2440; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #642 Body End
GOTO 6904; if() #348 Body End
LOAD D2 0.0004; if() #643 Test AND if() #348 Else Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6904 ==; Test 'if'
SETR D2 GD10; if() #643 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #643 Body End
LOAD D2 0.0004; if() #348 Else End AND if() #347 Else End AND if() #346 Else End AND if() #644 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
SETR D2 GD12
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6924 ==; Test 'if'
SETR D2 GD12; if() #644 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2; if() #644 Body End
LOAD D2 0.0003; if() #645 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
SETR D2 GD12
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6968 ==; Test 'if'
SETR D2 GD12; if() #645 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_X D2; if() #645 Body End
LOAD D2 0.0004; if() #646 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
SETR D2 GD13
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6988 ==; Test 'if'
SETR D2 GD13; if() #646 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2; if() #646 Body End
LOAD D2 0.0003; if() #647 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
SETR D2 GD13
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 7032 ==; Test 'if'
SETR D2 GD13; if() #647 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2; if() #647 Body End
PUSHR D4; if() #648 Test
PUSHV 128; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.3520; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 7097 ==; Test 'if'
SETR D2 GD3; if() #349 Test AND if() #648 Body Start
COMPAREV D2 32
GOTOCMP 7052 <
LOAD D2 0.0004
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 7052 !=
SETV D2 1
GOTO 7053
SETV D2 0
COMPAREV D2 0
GOTOCMP 7068 ==; Test 'if'
SETV D2 1; if() #349 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
GOTO 7097; if() #349 Body End
SETR D2 GD3; if() #649 Test AND if() #349 Else Start
COMPAREV D2 32
GOTOCMP 7082 >=
LOAD D2 0.0004
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 7082 ==
SETV D2 1
GOTO 7083
SETV D2 0
COMPAREV D2 0
GOTOCMP 7097 ==; Test 'if'
SETV D2 0; if() #649 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #649 Body End
SETR D2 GD14; if() #349 Else End AND if() #648 Body End
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETR D2 GD11
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETR D2 GD17; if() #350 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 7131 ==; Test 'if'
SETR D2 GD11; if() #350 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
GOTO 7145; if() #350 Body End
SETR D2 GD20; if() #650 Test AND if() #350 Else Start
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7145 ==; Test 'if'
SETR D2 GD11; if() #650 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2; if() #650 Body End
PUSHR D4; if() #350 Else End
LOAD D2 0.0003; UsrFunc[void __Ghost_DrawShadow(npc)] Params Start
PUSHR D2; UsrFunc[void __Ghost_DrawShadow(npc)] Params End
CALLFUNC 0.3986; UsrFunc[void __Ghost_DrawShadow(npc)] Call
POP D4
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_WaitframePart1(ffc, npc, bool)] Body End
PUSHV 0; Func[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[bool npc::isValid()] Params AND unless() #651 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 7179 !=; Test 'unless'
LOAD D2 0.0002; if() #652 Test AND unless() #651 Body Start
COMPAREV D2 0
GOTOCMP 7171 ==; Test 'if'
PUSHR D4; if() #652 Body Start
LOAD D2 0.0004; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 0.5640; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2
PUSHR D4
CALLFUNC 0.5095; UsrFunc[void Ghost_ClearCombos()] Call
POP D4; if() #652 Body End
LOAD D2 0.0001; if() #653 Test
COMPAREV D2 0
GOTOCMP 7175 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #653 Body
SETV D2 0
SETR GD14 D2
SETV D2 0; return Start
GOTO 7303; return End AND unless() #651 Body End
STOREV 0 0
LOAD D2 0.0003; if() #654 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7190 ==; Test 'if'
SETV D2 1; if() #654 Body Start
STORE D2 0; if() #654 Body End
LOAD D2 0; unless() #655 Test
COMPAREV D2 0
GOTOCMP 7209 !=; Test 'unless'
PUSHR D4; unless() #655 Body Start
LOAD D2 0.0004; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params End
CALLFUNC 0.4685; UsrFunc[void Ghost_CheckHit(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Params End
CALLFUNC 0.3642; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Call
POP D4
COMPAREV D2 0
SETCMP D2 I==
STORE D2 0; unless() #655 Body End
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
LOAD D2 0; if() #656 Test
COMPAREV D2 0
GOTOCMP 7302 ==; Test 'if'
LOAD D2 0.0002; if() #657 Test AND if() #656 Body Start
COMPAREV D2 0
GOTOCMP 7296 ==; Test 'if'
SETV D2 1; if() #657 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD1
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 0.5640; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2; if() #657 Body End
LOAD D2 0.0001; if() #658 Test
COMPAREV D2 0
GOTOCMP 7300 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #658 Body
SETV D2 0; return Start
GOTO 7303; return End AND if() #656 Body End
SETV D2 1; return Start
POPARGS D5 0.0005; return End
RETURNFUNC; Func[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Body End
PUSHARGSV 0 0.0006; Func[void __SetUpDrawingArray(ffc, npc, int[])] Body Start
SETR D4 SP2
STOREV 0 0.0005
LOAD D2 0.0008; if() #678 Test
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 7320 ==; Test 'if'
LOAD D2 0.0005; if() #678 Body Start
ORV D2 4
STORE D2 0.0005; if() #678 Body End
LOAD D2 0.0008; if() #679 Test
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 7332 ==; Test 'if'
LOAD D2 0.0005; if() #679 Body Start
ORV D2 1
STORE D2 0.0005; if() #679 Body End
PUSHR D4; if() #680 Test
LOAD D2 0.0007; UsrFunc[bool __Ghost_IsFlickering(npc)] Params Start
PUSHR D2; UsrFunc[bool __Ghost_IsFlickering(npc)] Params End
CALLFUNC 1.5072; UsrFunc[bool __Ghost_IsFlickering(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 7342 ==; Test 'if'
LOAD D2 0.0005; if() #680 Body Start
ORV D2 2
STORE D2 0.0005; if() #680 Body End
LOAD D2 0.0008
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
STOREV 3 0.0004
SETR D2 GD1
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0002
SETR D2 GD25; if() #681 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 7510 ==; Test 'if'
STOREV 1 0.0001; if() #681 Body Start
STOREV 0 0; for() #176 setup
LOAD D2 0; for() #176 LoopTest
PUSHR D2
SETR D2 GD25
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7510 ==; for() #176 TestFail?
SETR D2 GD25; for() #176 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 1
POP D0
READPODARRAYR D2 D2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 2
POP D0
READPODARRAYR D2 D2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 4
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 6
STORE D2 0.0004
LOAD D2 0.0001
ADDV D2 6
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; for() #176 Body End
LOAD D2 0; for() #176 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7398; for() #176 End
LOAD D2 0.0008; if() #681 Body End AND if(true) #682 [Opt:AlwaysOn]
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0008
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0008
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 4
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
POPARGS D5 0.0009
RETURNFUNC; Func[void __SetUpDrawingArray(ffc, npc, int[])] Body End
PUSHV 0; Func[void __HideFFCAndWait(ffc)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
WAITFRAME; InlineFunc[void Waitframe()] Body
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __HideFFCAndWait(ffc)] Body End
SETR D4 SP2; Func[void InitializeGhostZHData()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
PUSHV 0; Func[bool IsPit(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #343 Test
COMPAREV D2 41
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7666 ==; Test 'if'
SETV D2 1; return Start AND if() #343 Body Start
GOTO 7687; return End AND if() #343 Body End
LOAD D2 0; if() #344 Test
COMPAREV D2 93
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7673 ==; Test 'if'
SETV D2 1; return Start AND if() #344 Body Start
GOTO 7687; return End AND if() #344 Body End
LOAD D2 0; if() #345 Test
COMPAREV D2 80
GOTOCMP 7681 <
LOAD D2 0
COMPAREV D2 82
GOTOCMP 7681 >
SETV D2 1
GOTO 7682
SETV D2 0
COMPAREV D2 0
GOTOCMP 7686 ==; Test 'if'
SETV D2 1; return Start AND if() #345 Body Start
GOTO 7687; return End AND if() #345 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool IsPit(int)] Body End
SETR D4 SP2; Func[void KillEWeapon(eweapon)] Body Start
LOAD D2 0
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 128
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POP D5
RETURNFUNC; Func[void KillEWeapon(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[int __GetEWeaponThrowHeight(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
STORE D2 0.0004
LOAD D2 0.0004; if() #572 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7726 ==; Test 'if'
SETV D2 1; return Start AND if() #572 Body Start
GOTO 7827; return End AND if() #572 Body End
LOAD D2 0.0005; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0003
LOAD D2 0.0003; if() #573 Test
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7775 ==; Test 'if'
SETV D2 1; return Start AND if() #573 Body Start
GOTO 7827; return End AND if() #573 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0001; while() #5 Test
COMPAREV D2 3.2000
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7802 ==; Test 'while'
LOAD D2 0.0001; while() #5 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002
LOAD D2 0.0002; if() #574 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7783 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #574 Body Start
GOTO 7827; return End AND if() #574 Body End
GOTO 7783; while() #5 Body End AND while() #5 End
STOREV 0 0
LOAD D2 0.0002; while() #6 Test
PUSHR D2
LOAD D2 0
DIVV D2 3.2000
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 7826 ==; Test 'while'
LOAD D2 0.0001; while() #6 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SUBV D2 3.2000
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002; while() #6 Body End
GOTO 7803; while() #6 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(eweapon)] Body End
SETR D4 SP2; Func[void SetEWeaponRotation(eweapon, int)] Body Start
PUSHR D4
LOAD D2 0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2440; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #217 Test
COMPAREV D2 0
GOTOCMP 7847 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 7847 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 7847 ==
SETV D2 0
GOTO 7848
SETV D2 1
COMPAREV D2 0
GOTOCMP 7860 ==; Test 'if'
SETV D2 0; if() #217 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 7908; if() #217 Body End
LOAD D2 0; if() #218 Test AND if() #217 Else Start
COMPAREV D2 1
GOTOCMP 7871 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 7871 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 7871 ==
SETV D2 0
GOTO 7872
SETV D2 1
COMPAREV D2 0
GOTOCMP 7884 ==; Test 'if'
SETV D2 3; if() #218 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 7908; if() #218 Body End
LOAD D2 0; if() #219 Test AND if() #218 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7899 ==; Test 'if'
SETV D2 7; if() #219 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 7908; if() #219 Body End
SETV D2 4; if() #219 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #219 Else End
POPARGS D5 0.0002; if() #218 Else End AND if() #217 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon, int)] Body End
SETR D4 SP2; Func[int Sign(int)] Body Start
LOAD D2 0; if() #235 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 7918 ==; Test 'if'
SETV D2 1; return Start AND if() #235 Body Start
GOTO 7926; return End AND if() #235 Body End
LOAD D2 0; if() #236 Test AND if() #235 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7925 ==; Test 'if'
SETV D2 -1; return Start AND if() #236 Body Start
GOTO 7926; return End AND if() #236 Body End
SETV D2 0; return Start AND if() #236 Else Start
POP D5; return End AND if() #236 Else End AND if() #235 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR D4 SP2; Func[void StartGhostZH()] Body Start
PUSHR D4
CALLFUNC 0.7608; UsrFunc[void InitializeGhostZHData()] Call
POP D4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0 0.0007; Func[void UpdateEWeapon(eweapon)] Body Start
SETR D4 SP2
SETR D2 GD26; if() #525 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9077 !=; Test 'if' AND return (Void) AND if() #525 Body
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0005
STOREV 1 0.0004
LOAD D2 0.0007; if() #245 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8348 ==; Test 'if'
LOAD D2 0.0007; if() #526 Test AND if() #245 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8190 ==; Test 'if'
LOAD D2 0.0007; if() #246 Test AND if() #526 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 6
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 8063 ==; Test 'if'
LOAD D2 0.0007; if() #247 Test AND if() #246 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8006 ==; Test 'if'
PUSHR D4; if() #247 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params End
CALLFUNC 0.9079; UsrFunc[void __UpdateEWMSineWave(eweapon)] Call
POP D4
GOTO 8190; if() #247 Body End
LOAD D2 0.0007; if() #248 Test AND if() #247 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8023 ==; Test 'if'
PUSHR D4; if() #248 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHoming(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHoming(eweapon)] Params End
CALLFUNC 0.9261; UsrFunc[void __UpdateEWMHoming(eweapon)] Call
POP D4
GOTO 8190; if() #248 Body End
LOAD D2 0.0007; if() #249 Test AND if() #248 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8040 ==; Test 'if'
PUSHR D4; if() #249 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params End
CALLFUNC 0.9473; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Call
POP D4
GOTO 8190; if() #249 Body End
LOAD D2 0.0007; if() #250 Test AND if() #249 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8057 ==; Test 'if'
PUSHR D4; if() #250 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandom(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandom(eweapon)] Params End
CALLFUNC 0.9814; UsrFunc[void __UpdateEWMRandom(eweapon)] Call
POP D4
GOTO 8190; if() #250 Body End
PUSHR D4; if() #250 Else Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params End
CALLFUNC 0.9934; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Call
POP D4; if() #250 Else End
GOTO 8190; if() #249 Else End AND if() #248 Else End AND if() #247 Else End AND if() #246 Body End
LOAD D2 0.0007; if() #251 Test AND if() #246 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8098 ==; Test 'if'
LOAD D2 0.0007; if() #251 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMVeer(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMVeer(eweapon)] Params End
CALLFUNC 1.0246; UsrFunc[void __UpdateEWMVeer(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 8190; if() #251 Body End
LOAD D2 0.0007; if() #252 Test AND if() #251 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8115 ==; Test 'if'
PUSHR D4; if() #252 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMThrow(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMThrow(eweapon)] Params End
CALLFUNC 1.0778; UsrFunc[void __UpdateEWMThrow(eweapon)] Call
POP D4
GOTO 8190; if() #252 Body End
LOAD D2 0.0007; if() #253 Test AND if() #252 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8132 ==; Test 'if'
PUSHR D4; if() #253 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMFall(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMFall(eweapon)] Params End
CALLFUNC 1.1088; UsrFunc[void __UpdateEWMFall(eweapon)] Call
POP D4
GOTO 8190; if() #253 Body End
LOAD D2 0.0007; if() #254 Test AND if() #253 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8167 ==; Test 'if'
LOAD D2 0.0007; if() #254 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDrift(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDrift(eweapon)] Params End
CALLFUNC 1.1354; UsrFunc[void __UpdateEWMDrift(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 8190; if() #254 Body End
LOAD D2 0.0007; if() #254 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params End
CALLFUNC 1.1858; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004; if() #254 Else End
LOAD D2 0.0007; if() #253 Else End AND if() #252 Else End AND if() #251 Else End AND if() #246 Else End AND if() #526 Body End AND if() #527 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8658 ==; Test 'if'
LOAD D2 0.0007; if() #255 Test AND if() #527 Body Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8248 ==; Test 'if'
LOAD D2 0.0007; if() #255 Body Start
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0007; if() #528 Test
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 8658 ==; Test 'if'
PUSHR D4; if() #528 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.7689; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #528 Body End
GOTO 8658; if() #255 Body End
LOAD D2 0.0007; if() #256 Test AND if() #255 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8298 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #529 Test AND if() #256 Body Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8658 ==; Test 'if'
PUSHR D4; if() #529 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.7689; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #529 Body End
GOTO 8658; if() #256 Body End
LOAD D2 0.0007; if() #530 Test AND if() #256 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8658 ==; Test 'if'
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params Start AND if() #530 Body Start
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
PUSHVARGR D3; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0007; if() #531 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 8658 ==; Test 'if'
PUSHR D4; if() #531 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.7689; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #531 Body End
GOTO 8658; if() #530 Body End AND if() #256 Else End AND if() #255 Else End AND if() #527 Body End AND if() #245 Body End
LOAD D2 0.0007; if() #532 Test AND if() #245 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 8369 ==
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 8369 !=
SETV D2 1
GOTO 8370
SETV D2 0
COMPAREV D2 0
GOTOCMP 8658 ==; Test 'if'
LOAD D2 0.0007; if() #257 Test AND if() #532 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8389 ==; Test 'if'
PUSHR D4; if() #257 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params End
CALLFUNC 1.2393; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Call
POP D4
GOTO 8658; if() #257 Body End
LOAD D2 0.0007; if() #258 Test AND if() #257 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8523 ==; Test 'if'
LOAD D2 0.0007; if() #259 Test AND if() #258 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8421 ==; Test 'if'
SETV D2 0; if() #259 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 8658; if() #259 Body End
LOAD D2 0.0007; if() #260 Test AND if() #259 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8438 ==; Test 'if'
PUSHR D4; if() #260 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params End
CALLFUNC 1.2804; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Call
POP D4
GOTO 8658; if() #260 Body End
LOAD D2 0.0007; if() #261 Test AND if() #260 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8455 ==; Test 'if'
PUSHR D4; if() #261 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params End
CALLFUNC 1.2977; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Call
POP D4
GOTO 8658; if() #261 Body End
LOAD D2 0.0007; if() #262 Test AND if() #261 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8472 ==; Test 'if'
PUSHR D4; if() #262 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params End
CALLFUNC 1.3021; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Call
POP D4
GOTO 8658; if() #262 Body End
LOAD D2 0.0007; if() #263 Test AND if() #262 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8489 ==; Test 'if'
PUSHR D4; if() #263 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params End
CALLFUNC 1.3065; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Call
POP D4
GOTO 8658; if() #263 Body End
LOAD D2 0.0007; if() #264 Test AND if() #263 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8506 ==; Test 'if'
PUSHR D4; if() #264 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params End
CALLFUNC 1.3123; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Call
POP D4
GOTO 8658; if() #264 Body End
LOAD D2 0.0007; if() #533 Test AND if() #264 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8658 ==; Test 'if'
PUSHR D4; if() #533 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params End
CALLFUNC 1.3181; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Call
POP D4; if() #533 Body End
GOTO 8658; if() #264 Else End AND if() #263 Else End AND if() #262 Else End AND if() #261 Else End AND if() #260 Else End AND if() #259 Else End AND if() #258 Body End
LOAD D2 0.0007; if() #265 Test AND if() #258 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8540 ==; Test 'if'
PUSHR D4; if() #265 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params End
CALLFUNC 1.3291; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Call
POP D4
GOTO 8658; if() #265 Body End
LOAD D2 0.0007; if() #266 Test AND if() #265 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8557 ==; Test 'if'
PUSHR D4; if() #266 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params End
CALLFUNC 1.3349; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Call
POP D4
GOTO 8658; if() #266 Body End
LOAD D2 0.0007; if() #267 Test AND if() #266 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8574 ==; Test 'if'
PUSHR D4; if() #267 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params End
CALLFUNC 1.3409; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Call
POP D4
GOTO 8658; if() #267 Body End
LOAD D2 0.0007; if() #268 Test AND if() #267 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8591 ==; Test 'if'
PUSHR D4; if() #268 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params End
CALLFUNC 1.3469; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Call
POP D4
GOTO 8658; if() #268 Body End
LOAD D2 0.0007; if() #269 Test AND if() #268 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8608 ==; Test 'if'
PUSHR D4; if() #269 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params End
CALLFUNC 1.3581; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Call
POP D4
GOTO 8658; if() #269 Body End
LOAD D2 0.0007; if() #270 Test AND if() #269 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8625 ==; Test 'if'
PUSHR D4; if() #270 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params End
CALLFUNC 1.3686; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Call
POP D4
GOTO 8658; if() #270 Body End
LOAD D2 0.0007; if() #271 Test AND if() #270 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8642 ==; Test 'if'
PUSHR D4; if() #271 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params End
CALLFUNC 1.3733; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Call
POP D4
GOTO 8658; if() #271 Body End
LOAD D2 0.0007; if() #534 Test AND if() #271 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8658 ==; Test 'if'
PUSHR D4; if() #534 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params End
CALLFUNC 1.3784; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Call
POP D4; if() #534 Body End
LOAD D2 0.0007; if() #271 Else End AND if() #270 Else End AND if() #269 Else End AND if() #268 Else End AND if() #267 Else End AND if() #266 Else End AND if() #265 Else End AND if() #258 Else End AND if() #257 Else End AND if() #532 Body End AND if() #245 Else End AND if() #535 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8683 ==; Test 'if'
LOAD D2 0.0007; if() #536 Test AND if() #535 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8683 ==; Test 'if'
PUSHR D4; if() #536 Body Start
LOAD D2 0.0007; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.1224; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #536 Body End
LOAD D2 0.0007; if() #535 Body End AND if() #272 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8966 ==; Test 'if'
SETV D2 1000; if() #272 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
SETR D2 LINKHP; if() #537 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9077 !=; Test 'if' AND return (Void) AND if() #537 Body
LOAD D2 0.0007; if() #538 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 8728 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 8728 ==
SETV D2 1
GOTO 8729
SETV D2 0
COMPAREV D2 0
GOTOCMP 9077 !=; Test 'if' AND return (Void) AND if() #538 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0007; if() #273 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 8747 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int RadtoDeg(int)] Params Start AND if() #273 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 8813; if() #273 Body End
PUSHR D4; if() #273 Else Start
LOAD D2 0.0007; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2440; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #274 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8763 ==; Test 'if'
SETV D2 -90; if() #274 Body Start
STORE D2 0.0001
GOTO 8813; if() #274 Body End
LOAD D2 0; if() #275 Test AND if() #274 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8771 ==; Test 'if'
SETV D2 -45; if() #275 Body Start
STORE D2 0.0001
GOTO 8813; if() #275 Body End
LOAD D2 0; if() #276 Test AND if() #275 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8779 ==; Test 'if'
SETV D2 0; if() #276 Body Start
STORE D2 0.0001
GOTO 8813; if() #276 Body End
LOAD D2 0; if() #277 Test AND if() #276 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8787 ==; Test 'if'
SETV D2 45; if() #277 Body Start
STORE D2 0.0001
GOTO 8813; if() #277 Body End
LOAD D2 0; if() #278 Test AND if() #277 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8795 ==; Test 'if'
SETV D2 90; if() #278 Body Start
STORE D2 0.0001
GOTO 8813; if() #278 Body End
LOAD D2 0; if() #279 Test AND if() #278 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8803 ==; Test 'if'
SETV D2 135; if() #279 Body Start
STORE D2 0.0001
GOTO 8813; if() #279 Body End
LOAD D2 0; if() #280 Test AND if() #279 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8811 ==; Test 'if'
SETV D2 180; if() #280 Body Start
STORE D2 0.0001
GOTO 8813; if() #280 Body End
SETV D2 -135; if() #280 Else Start
STORE D2 0.0001; if() #280 Else End
LOAD D2 0.0004; if() #279 Else End AND if() #278 Else End AND if() #277 Else End AND if() #276 Else End AND if() #275 Else End AND if() #274 Else End AND if() #273 Else End AND if() #281 Test
COMPAREV D2 0
GOTOCMP 8855 ==; Test 'if'
LOAD D2 0.0007; if() #281 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Cos(int)] Params Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
GOTO 8871; if() #281 Body End
LOAD D2 0.0007; if() #281 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0002; if() #281 Else End
LOAD D2 0.0006; unless() #539 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 8885 !=
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 8885 !=
SETV D2 1
GOTO 8886
SETV D2 0
COMPAREV D2 0
GOTOCMP 8900 !=; Test 'unless'
PUSHR D4; unless() #539 Body Start
LOAD D2 0.0006; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0178; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0001; unless() #539 Body End
STOREV 0 0
LOAD D2 0.0001; if() #282 Test
COMPAREV D2 0
GOTOCMP 8909 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 8909 >=
SETV D2 1
GOTO 8910
SETV D2 0
COMPAREV D2 0
GOTOCMP 8915 ==; Test 'if'
SETV D2 0; if() #282 Body Start
STORE D2 0
GOTO 8917; if() #282 Body End
SETV D2 2; if() #282 Else Start
STORE D2 0; if() #282 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE_W
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE_H
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 9023; if() #272 Body End
LOAD D2 0.0007; if() #540 Test AND if() #272 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9006 ==; Test 'if'
SETR D2 GD26; if() #283 Test AND if() #540 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8997 ==; Test 'if'
SETV D2 1000; if() #283 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
GOTO 9006; if() #283 Body End
SETV D2 0; if() #283 Else Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #283 Else End
LOAD D2 0.0007; if() #540 Body End AND if() #541 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9023 ==; Test 'if'
PUSHR D4; if() #541 Body Start
LOAD D2 0.0007; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.2139; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #541 Body End
LOAD D2 0.0007; if() #272 Else End AND if() #542 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 64
COMPAREV D2 0
GOTOCMP 9035 !=
SETV D2 0
GOTO 9036
SETV D2 1
COMPAREV D2 0
GOTOCMP 9077 ==; Test 'if'
LOAD D2 0.0007; if() #542 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z_OFFSET D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; if() #542 Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void UpdateEWeapon(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D3 SPRITE_MISCD; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(eweapon)] Body End
PUSHARGSV 0 0.0003; Func[void __UpdateEWMHoming(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0003
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0002
LOAD D2 0.0002; if() #694 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9277 ==; Test 'if'
LOAD D2 0.0002; if() #694 Body Start
ADDV D2 6.2832
STORE D2 0.0002; if() #694 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0153; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #695 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9305 ==; Test 'if'
LOAD D2 0.0001; if() #695 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #695 Body End
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
STORE D2 0
LOAD D2 0; if() #372 Test
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
COMPARER D3 D2
GOTOCMP 9340 <
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 6.2832 D2
POP D3
COMPARER D3 D2
GOTOCMP 9340 >
SETV D2 0
GOTO 9341
SETV D2 1
COMPAREV D2 0
GOTOCMP 9353 ==; Test 'if'
LOAD D2 0.0001; if() #372 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 9420; if() #372 Body End
PUSHR D4; if() #373 Test AND if() #372 Else Start
LOAD D2 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.7910; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Sign(int)] Params Start
SUBV D2 3.1416
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.7910; UsrFunc[int Sign(int)] Call
POP D4
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9397 ==; Test 'if'
LOAD D2 0.0003; if() #373 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 9420; if() #373 Body End
LOAD D2 0.0003; if() #373 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2; if() #373 Else End
PUSHR D4; if() #372 Else End
LOAD D2 0.0003; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.2029; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0003; if() #696 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9471 ==; Test 'if'
LOAD D2 0.0003; if() #696 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0003; if() #697 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9471 ==; Test 'if'
PUSHR D4; if() #697 Body Start
LOAD D2 0.0003; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.7689; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #697 Body End
POPARGS D5 0.0004; if() #696 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #698 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9504 ==; Test 'if'
LOAD D2 0.0001; if() #698 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #698 Body End
LOAD D2 0.0001; if() #374 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9603 ==; Test 'if'
LOAD D2 0.0001; if() #374 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #699 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9812 ==; Test 'if'
LOAD D2 0.0001; if() #375 Test AND if() #699 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9562 ==; Test 'if'
PUSHR D4; if() #375 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.7689; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 9812; if() #375 Body End
LOAD D2 0.0001; if() #375 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #375 Else End
GOTO 9812; if() #699 Body End AND if() #374 Body End
LOAD D2 0.0001; if() #374 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #700 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9709 ==; Test 'if'
SETV D2 45; if() #700 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0153; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.2029; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #701 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9709 ==; Test 'if'
PUSHR D4; if() #701 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.2139; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #701 Body End
LOAD D2 0.0001; if() #700 Body End AND if() #376 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9735 ==; Test 'if'
LOAD D2 0.0001; if() #376 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 9812; if() #376 Body End
LOAD D2 0.0001; if() #702 Test AND if() #376 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9812 ==; Test 'if'
LOAD D2 0.0001; if() #702 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.2000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #377 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9782 ==; Test 'if'
PUSHR D4; if() #377 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.7829; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 9812; if() #377 Body End
LOAD D2 0; if() #378 Test AND if() #377 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9794 ==; Test 'if'
PUSHR D4; if() #378 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.7829; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 9812; if() #378 Body End
LOAD D2 0; if() #379 Test AND if() #378 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9806 ==; Test 'if'
PUSHR D4; if() #379 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.7829; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 9812; if() #379 Body End
PUSHR D4; if() #379 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.7829; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #379 Else End
POPARGS D5 0.0002; if() #378 Else End AND if() #377 Else End AND if() #702 Body End AND if() #376 Else End AND if() #374 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(eweapon)] Body End
SETR D4 SP2; Func[void __UpdateEWMRandom(eweapon)] Body Start
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Randf(int)] Params Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.0170; UsrFunc[int Randf(int)] Call
POP D4
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.2029; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0; if() #703 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9886 ==; Test 'if'
PUSHR D4; if() #703 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.2139; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #703 Body End
LOAD D2 0; if() #704 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9932 ==; Test 'if'
LOAD D2 0; if() #704 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #705 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9932 ==; Test 'if'
PUSHR D4; if() #705 Body Start
LOAD D2 0; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.7689; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #705 Body End
POP D5; if() #704 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #706 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9965 ==; Test 'if'
LOAD D2 0.0001; if() #706 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #706 Body End
LOAD D2 0.0001; if() #380 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10064 ==; Test 'if'
LOAD D2 0.0001; if() #380 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #707 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10244 ==; Test 'if'
LOAD D2 0.0001; if() #381 Test AND if() #707 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 10023 ==; Test 'if'
PUSHR D4; if() #381 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.7689; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 10244; if() #381 Body End
LOAD D2 0.0001; if() #381 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #381 Else End
GOTO 10244; if() #707 Body End AND if() #380 Body End
LOAD D2 0.0001; if() #380 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #708 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10154 ==; Test 'if'
SETV D2 45; if() #708 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D3 62832; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
MULTV D2 0.0001
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.2029; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #709 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 10154 ==; Test 'if'
PUSHR D4; if() #709 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.2139; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #709 Body End
LOAD D2 0.0001; if() #708 Body End AND if() #382 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 10180 ==; Test 'if'
LOAD D2 0.0001; if() #382 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 10244; if() #382 Body End
LOAD D2 0.0001; if() #710 Test AND if() #382 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 10244 ==; Test 'if'
LOAD D2 0.0001; if() #710 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #383 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10214 ==; Test 'if'
PUSHR D4; if() #383 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.7829; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 10244; if() #383 Body End
LOAD D2 0; if() #384 Test AND if() #383 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10226 ==; Test 'if'
PUSHR D4; if() #384 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.7829; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 10244; if() #384 Body End
LOAD D2 0; if() #385 Test AND if() #384 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10238 ==; Test 'if'
PUSHR D4; if() #385 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.7829; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 10244; if() #385 Body End
PUSHR D4; if() #385 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.7829; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #385 Else End
POPARGS D5 0.0002; if() #384 Else End AND if() #383 Else End AND if() #710 Body End AND if() #382 Else End AND if() #380 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #393 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10361 ==; Test 'if'
LOAD D2 0.0001; if() #393 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 10718; if() #393 Body End
LOAD D2 0; if() #394 Test AND if() #393 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10395 ==; Test 'if'
LOAD D2 0.0001; if() #394 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 10718; if() #394 Body End
LOAD D2 0; if() #395 Test AND if() #394 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10430 ==; Test 'if'
LOAD D2 0.0001; if() #395 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 10718; if() #395 Body End
LOAD D2 0; if() #396 Test AND if() #395 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10464 ==; Test 'if'
LOAD D2 0.0001; if() #396 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 10718; if() #396 Body End
LOAD D2 0; if() #397 Test AND if() #396 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10530 ==; Test 'if'
LOAD D2 0.0001; if() #397 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 10718; if() #397 Body End
LOAD D2 0; if() #398 Test AND if() #397 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10595 ==; Test 'if'
LOAD D2 0.0001; if() #398 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 10718; if() #398 Body End
LOAD D2 0; if() #399 Test AND if() #398 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10660 ==; Test 'if'
LOAD D2 0.0001; if() #399 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 10718; if() #399 Body End
LOAD D2 0.0001; if() #399 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #399 Else End
LOAD D2 0.0001; if() #398 Else End AND if() #397 Else End AND if() #396 Else End AND if() #395 Else End AND if() #394 Else End AND if() #393 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
LOAD D2 0.0001; if() #711 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 10809 !=
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 10809 ==
SETV D2 1
GOTO 10810
SETV D2 0
COMPAREV D2 0
GOTOCMP 10842 ==; Test 'if'
LOAD D2 0.0001; if() #711 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #711 Body End
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4; unless() #387 Test AND if(true) #386 [Opt:AlwaysOn]
CALLFUNC 0.6394; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 10894 !=; Test 'unless'
LOAD D2 0.0001; unless() #387 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 10914; unless() #387 Body End
SETR D2 REGION_HEIGHT; unless() #387 Else Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; unless() #387 Else End
LOAD D2 0.0001; if() #388 Test
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10977 ==; Test 'if'
PUSHR D4; unless() #712 Test AND if(true) #389 [Opt:AlwaysOn] AND if() #388 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 1.5087; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 11086 !=; Test 'unless'
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start AND unless() #712 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; unless() #712 Body End
GOTO 11086; if() #388 Body End
STOREV 0 0; if() #388 Else Start
LOAD D2 0.0001; if() #390 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
GOTOCMP 11035 ==; Test 'if'
LOAD D2 0.0001; if() #391 Test AND if() #390 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11032 ==; Test 'if'
LOAD D2 0.0001; if() #391 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 11037; if() #391 Body End
SETV D2 1; if() #391 Else Start
STORE D2 0; if() #391 Else End
GOTO 11037; if() #390 Body End
SETV D2 1; if() #390 Else Start
STORE D2 0; if() #390 Else End
LOAD D2 0; if() #713 Test
COMPAREV D2 0
GOTOCMP 11086 ==; Test 'if'
LOAD D2 0.0001; if() #392 Test AND if() #713 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 11065 ==; Test 'if'
SETV D2 0; if() #392 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.7689; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 11086; if() #392 Body End
SETV D2 0; if() #392 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #392 Else End
POPARGS D5 0.0002; if() #713 Body End AND if() #388 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4; unless() #367 Test AND if(true) #366 [Opt:AlwaysOn]
CALLFUNC 0.6394; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 11149 !=; Test 'unless'
LOAD D2 0.0001; unless() #367 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 11179; unless() #367 Body End
LOAD D2 0.0001; unless() #367 Else Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; unless() #367 Else End
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 0.1600
PUSHVARGR D2
PUSHVARGV 3.2000; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #691 Test AND if(true) #368 [Opt:AlwaysOn]
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 11352 ==; Test 'if'
PUSHR D4; unless() #692 Test AND if() #691 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 1.5087; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 11352 !=; Test 'unless'
STOREV 0 0; unless() #692 Body Start
LOAD D2 0.0001; if() #369 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 11301 ==; Test 'if'
LOAD D2 0.0001; if() #370 Test AND if() #369 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11298 ==; Test 'if'
LOAD D2 0.0001; if() #370 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 11303; if() #370 Body End
SETV D2 1; if() #370 Else Start
STORE D2 0; if() #370 Else End
GOTO 11303; if() #369 Body End
SETV D2 1; if() #369 Else Start
STORE D2 0; if() #369 Else End
LOAD D2 0; if() #693 Test
COMPAREV D2 0
GOTOCMP 11352 ==; Test 'if'
LOAD D2 0.0001; if() #371 Test AND if() #693 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 11331 ==; Test 'if'
SETV D2 0; if() #371 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.7689; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 11352; if() #371 Body End
SETV D2 0; if() #371 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #371 Else End
POPARGS D5 0.0002; if() #693 Body End AND unless() #692 Body End AND if() #691 Body End
RETURNFUNC; Func[void __UpdateEWMFall(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #351 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11469 ==; Test 'if'
LOAD D2 0.0001; if() #351 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 11826; if() #351 Body End
LOAD D2 0; if() #352 Test AND if() #351 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11503 ==; Test 'if'
LOAD D2 0.0001; if() #352 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 11826; if() #352 Body End
LOAD D2 0; if() #353 Test AND if() #352 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11538 ==; Test 'if'
LOAD D2 0.0001; if() #353 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 11826; if() #353 Body End
LOAD D2 0; if() #354 Test AND if() #353 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11572 ==; Test 'if'
LOAD D2 0.0001; if() #354 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 11826; if() #354 Body End
LOAD D2 0; if() #355 Test AND if() #354 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11638 ==; Test 'if'
LOAD D2 0.0001; if() #355 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 11826; if() #355 Body End
LOAD D2 0; if() #356 Test AND if() #355 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11703 ==; Test 'if'
LOAD D2 0.0001; if() #356 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 11826; if() #356 Body End
LOAD D2 0; if() #357 Test AND if() #356 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11768 ==; Test 'if'
LOAD D2 0.0001; if() #357 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 11826; if() #357 Body End
LOAD D2 0.0001; if() #357 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #357 Else End
LOAD D2 0.0001; if() #356 Else End AND if() #355 Else End AND if() #354 Else End AND if() #353 Else End AND if() #352 Else End AND if() #351 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001; if() #358 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 16
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 11950 ==; Test 'if'
LOAD D2 0.0001; if() #358 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 11969; if() #358 Body End
LOAD D2 0.0001; if() #358 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #358 Else End
LOAD D2 0; if() #359 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12004 ==; Test 'if'
LOAD D2 0.0001; if() #359 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 12361; if() #359 Body End
LOAD D2 0; if() #360 Test AND if() #359 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12038 ==; Test 'if'
LOAD D2 0.0001; if() #360 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 12361; if() #360 Body End
LOAD D2 0; if() #361 Test AND if() #360 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12073 ==; Test 'if'
LOAD D2 0.0001; if() #361 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 12361; if() #361 Body End
LOAD D2 0; if() #362 Test AND if() #361 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12107 ==; Test 'if'
LOAD D2 0.0001; if() #362 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 12361; if() #362 Body End
LOAD D2 0; if() #363 Test AND if() #362 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12173 ==; Test 'if'
LOAD D2 0.0001; if() #363 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 12361; if() #363 Body End
LOAD D2 0; if() #364 Test AND if() #363 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12238 ==; Test 'if'
LOAD D2 0.0001; if() #364 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 12361; if() #364 Body End
LOAD D2 0; if() #365 Test AND if() #364 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12303 ==; Test 'if'
LOAD D2 0.0001; if() #365 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 12361; if() #365 Body End
LOAD D2 0.0001; if() #365 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #365 Else End
LOAD D2 0.0001; if() #364 Else End AND if() #363 Else End AND if() #362 Else End AND if() #361 Else End AND if() #360 Else End AND if() #359 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(eweapon)] Body End
PUSHARGSV 0 0.0011; Func[void __DoEWeaponDeathPrototype(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0010
STOREV 0 0.0009
STOREV 0 0.0008
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0011; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR D2; InlineFunc[untyped Floor(untyped)] Body
STORE D2 0.0010
SETR D2 EWPNCOUNT; for() #159 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #159 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12454 ==; for() #159 TestFail?
LOAD D2 0.0003; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #159 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0009
LOAD D2 0.0009; if() #562 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 768
COMPAREV D2 768
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 12450 !=; Test 'if' AND continue 1; AND if() #562 Body
LOAD D2 0.0009; if() #563 Test
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12454 !=; Test 'if' AND break 1; AND if() #563 Body
LOAD D2 0.0003; for() #159 Body End AND for() #159 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 12414; for() #159 End
LOAD D2 0.0003; if() #564 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12480 ==; Test 'if'
ALLOCATEMEMV D2 43 0; if() #564 Body Start
WRITEPODSTRING D2 "ghost.zh: Failed to find prototype eweapon"
STORE D2 0
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 12802; return (Void)
LOAD D3 0
DEALLOCATEMEMR D3; if() #564 Body End
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MODV D2 10
SUBV D2 6.2832
STORE D2 0.0005
LOAD D2 0.0011
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0010
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 10000
STORE D2 0.0004
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 100
RSHIFTV D2 0
STORE D2 0.0008
LOAD D2 0.0011; if() #298 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12570 ==; Test 'if'
LOAD D2 0.0011; if() #298 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
GOTO 12582; if() #298 Body End
LOAD D2 0.0011; if() #298 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
STORE D2 0.0006; if() #298 Else End
LOAD D2 0.0008; if() #299 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12635 ==; Test 'if'
STOREV 0 0.0001; for() #160 setup AND if() #299 Body Start
LOAD D2 0.0001; for() #160 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12626 ==; for() #160 TestFail?
PUSHR D4; for() #160 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
MULTV D2 6.2832
SETV D2 6.2832
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 1.4577; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #160 Body End
LOAD D2 0.0001; for() #160 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 12588; for() #160 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 12793; if() #299 Body End
LOAD D2 0.0008; if() #300 Test AND if() #299 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12675 ==; Test 'if'
STOREV 0 0.0001; for() #161 setup AND if() #300 Body Start
LOAD D2 0.0001; for() #161 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12666 ==; for() #161 TestFail?
PUSHR D4; for() #161 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D3 31416; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
DIVV D2 5000
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 1.4577; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #161 Body End
LOAD D2 0.0001; for() #161 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 12641; for() #161 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 12793; if() #300 Body End
LOAD D2 0.0004; if() #301 Test AND if() #300 Else Start
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12748 ==; Test 'if'
SETV D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND if() #301 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2
LOAD D2 0.0005
DIVV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
STOREV 0 0; for() #162 setup
LOAD D2 0; for() #162 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12785 ==; for() #162 TestFail?
PUSHR D4; for() #162 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 1.4577; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #162 Body End
LOAD D2 0; for() #162 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 12710; for() #162 End
GOTO 12785; if() #301 Body End
LOAD D2 0.0004; if() #565 Test AND if() #301 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12785 ==; Test 'if'
PUSHR D4; if() #565 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 1.4577; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; if() #565 Body End
LOAD D2 0.0009; if() #301 Else End AND InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body AND if() #300 Else End
SETV D2 0; if() #299 Else End
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #293 Test
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 12899 ==; Test 'if'
PUSHR D4; if() #293 Body Start
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0153; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.2029; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
SETV D2 300
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 12975; if() #293 Body End
LOAD D2 0.0001; if() #294 Test AND if() #293 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 12924 ==; Test 'if'
LOAD D2 0.0001; if() #294 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.2029; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
GOTO 12975; if() #294 Body End
LOAD D2 0.0001; if() #294 Else Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #295 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12945 ==; Test 'if'
PUSHR D4; if() #295 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.7829; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 12975; if() #295 Body End
LOAD D2 0; if() #296 Test AND if() #295 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12957 ==; Test 'if'
PUSHR D4; if() #296 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.7829; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 12975; if() #296 Body End
LOAD D2 0; if() #297 Test AND if() #296 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12969 ==; Test 'if'
PUSHR D4; if() #297 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.7829; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 12975; if() #297 Body End
PUSHR D4; if() #297 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.7829; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #297 Else End
POPARGS D5 0.0002; if() #296 Else End AND if() #295 Else End AND if() #294 Else End AND if() #293 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathExplode(eweapon)] Body Start
PUSHR D4
PUSHV 135; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body Start
PUSHR D4
PUSHV 136; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #149 setup
LOAD D2 0; for() #149 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13112 ==; for() #149 TestFail?
PUSHR D4; for() #149 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #149 Body End
LOAD D2 0; for() #149 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 13068; for() #149 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #148 setup
LOAD D2 0; for() #148 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13170 ==; for() #148 TestFail?
PUSHR D4; for() #148 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #148 Body End
LOAD D2 0; for() #148 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 13126; for() #148 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #291 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13235 ==; Test 'if'
STOREV 0 0; for() #150 setup AND if() #291 Body Start
LOAD D2 0; for() #150 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13280 ==; for() #150 TestFail?
PUSHR D4; for() #150 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #150 Body End
LOAD D2 0; for() #150 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 13190; for() #150 End
GOTO 13280; if() #291 Body End
STOREV 4 0; for() #151 setup AND if() #291 Else Start
LOAD D2 0; for() #151 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13280 ==; for() #151 TestFail?
PUSHR D4; for() #151 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #151 Body End
LOAD D2 0; for() #151 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 13236; for() #151 End
SETV D2 0; if() #291 Else End
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #156 setup
LOAD D2 0; for() #156 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13338 ==; for() #156 TestFail?
PUSHR D4; for() #156 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #156 Body End
LOAD D2 0; for() #156 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 13294; for() #156 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #153 setup
LOAD D2 0; for() #153 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13396 ==; for() #153 TestFail?
PUSHR D4; for() #153 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #153 Body End
LOAD D2 0; for() #153 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 13352; for() #153 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #152 setup
LOAD D2 0; for() #152 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13456 ==; for() #152 TestFail?
PUSHR D4; for() #152 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #152 Body End
LOAD D2 0; for() #152 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 13412; for() #152 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #292 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13523 ==; Test 'if'
STOREV 0 0; for() #154 setup AND if() #292 Body Start
LOAD D2 0; for() #154 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13568 ==; for() #154 TestFail?
PUSHR D4; for() #154 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #154 Body End
LOAD D2 0; for() #154 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 13478; for() #154 End
GOTO 13568; if() #292 Body End
STOREV 4 0; for() #155 setup AND if() #292 Else Start
LOAD D2 0; for() #155 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13568 ==; for() #155 TestFail?
PUSHR D4; for() #155 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #155 Body End
LOAD D2 0; for() #155 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 13524; for() #155 End
SETV D2 13; if() #292 Else End AND InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #157 setup
LOAD D2 0; for() #157 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13628 ==; for() #157 TestFail?
PUSHR D4; for() #157 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #157 Body End
LOAD D2 0; for() #157 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 13584; for() #157 End
STOREV 4 0; for() #158 setup
LOAD D2 0; for() #158 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13673 ==; for() #158 TestFail?
PUSHR D4; for() #158 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #158 Body End
LOAD D2 0; for() #158 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 13629; for() #158 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[npc screendata::CreateNPC(int)] Params Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[npc screendata::CreateNPC(int)] Params End
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body Start
PUSHR D4
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1657; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[void __DoEWeaponDeathRunScript(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
PUSHR D4
CALLFUNC 0.1601; UsrFunc[int FindUnusedFFC()] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #566 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13809 ==; Test 'if'
SETV D2 0; if() #566 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 13948; return (Void) AND if() #566 Body End
LOAD D2 0.0004; InlineFunc[ffc screendata::LoadFFC(int)] Params
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0003
SETR D2 EWPNCOUNT; for() #163 setup
STORE D2 0
LOAD D2 0; for() #163 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 13851 ==; for() #163 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #163 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0002
LOAD D2 0.0002; if() #567 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 768
COMPAREV D2 512
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 13847 !=; Test 'if' AND continue 1; AND if() #567 Body
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0002
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFSPRITE
PUSHVARGR SPRITE_MISCD; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001; for() #163 Body End
LOAD D2 0; for() #163 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 13814; for() #163 End
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 3
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0005
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 1024
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.1085; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.1108; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
POPARGS D5 0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void UpdateEWeapons()] Body Start
SETR D4 SP2
STOREV 0 0.0001
SETR D2 LINKACTION; unless() #284 Test
COMPAREV D2 4
GOTOCMP 13967 ==
SETR D2 LINKACTION
COMPAREV D2 5
GOTOCMP 13967 ==
SETR D2 LINKACTION
COMPAREV D2 14
GOTOCMP 13967 ==
SETR D2 LINKACTION
COMPAREV D2 15
GOTOCMP 13967 ==
SETV D2 0
GOTO 13968
SETV D2 1
COMPAREV D2 0
GOTOCMP 14017 !=; Test 'unless'
SETR D2 EWPNCOUNT; for() #143 setup AND unless() #284 Body Start
STORE D2 0
LOAD D2 0; for() #143 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 14063 ==; for() #143 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #143 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #543 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 14004 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 14004 !=
SETV D2 0
GOTO 14005
SETV D2 1
COMPAREV D2 0
GOTOCMP 14012 !=; Test 'if' AND continue 1; AND if() #543 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void UpdateEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void UpdateEWeapon(eweapon)] Params End
CALLFUNC 0.7933; UsrFunc[void UpdateEWeapon(eweapon)] Call
POP D4; for() #143 Body End
LOAD D2 0; for() #143 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 13972; for() #143 End
GOTO 14063; unless() #284 Body End
SETR D2 EWPNCOUNT; for() #144 setup AND unless() #284 Else Start
STORE D2 0
LOAD D2 0; for() #144 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 14063 ==; for() #144 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #144 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #544 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 14051 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 14051 !=
SETV D2 0
GOTO 14052
SETV D2 1
COMPAREV D2 0
GOTOCMP 14059 !=; Test 'if' AND continue 1; AND if() #544 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params End
CALLFUNC 1.4065; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Call
POP D4; for() #144 Body End
LOAD D2 0; for() #144 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 14019; for() #144 End
POPARGS D5 0.0002; unless() #284 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0 0.0002; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002; if() #714 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 14092 ==; Test 'if'
LOAD D2 0.0002; if() #715 Test AND if() #714 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 14092 ==; Test 'if'
PUSHR D4; if() #715 Body Start
LOAD D2 0.0002; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.1224; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #715 Body End
LOAD D2 0.0002; if() #714 Body End AND if() #400 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 14284 ==; Test 'if'
SETV D2 1000; if() #400 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0002; if() #716 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 14132 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 14132 ==
SETV D2 1
GOTO 14133
SETV D2 0
COMPAREV D2 0
GOTOCMP 14341 !=; Test 'if' AND return (Void) AND if() #716 Body
STOREV 0 0.0001
LOAD D2 0.0002; if() #401 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 14149 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int RadtoDeg(int)] Params Start AND if() #401 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 14215; if() #401 Body End
PUSHR D4; if() #401 Else Start
LOAD D2 0.0002; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2440; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #402 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14165 ==; Test 'if'
SETV D2 -90; if() #402 Body Start
STORE D2 0.0001
GOTO 14215; if() #402 Body End
LOAD D2 0; if() #403 Test AND if() #402 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14173 ==; Test 'if'
SETV D2 -45; if() #403 Body Start
STORE D2 0.0001
GOTO 14215; if() #403 Body End
LOAD D2 0; if() #404 Test AND if() #403 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14181 ==; Test 'if'
SETV D2 0; if() #404 Body Start
STORE D2 0.0001
GOTO 14215; if() #404 Body End
LOAD D2 0; if() #405 Test AND if() #404 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14189 ==; Test 'if'
SETV D2 45; if() #405 Body Start
STORE D2 0.0001
GOTO 14215; if() #405 Body End
LOAD D2 0; if() #406 Test AND if() #405 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14197 ==; Test 'if'
SETV D2 90; if() #406 Body Start
STORE D2 0.0001
GOTO 14215; if() #406 Body End
LOAD D2 0; if() #407 Test AND if() #406 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14205 ==; Test 'if'
SETV D2 135; if() #407 Body Start
STORE D2 0.0001
GOTO 14215; if() #407 Body End
LOAD D2 0; if() #408 Test AND if() #407 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14213 ==; Test 'if'
SETV D2 180; if() #408 Body Start
STORE D2 0.0001
GOTO 14215; if() #408 Body End
SETV D2 -135; if() #408 Else Start
STORE D2 0.0001; if() #408 Else End
STOREV 0 0; if() #407 Else End AND if() #406 Else End AND if() #405 Else End AND if() #404 Else End AND if() #403 Else End AND if() #402 Else End AND if() #401 Else End
LOAD D2 0.0001; if() #409 Test
COMPAREV D2 0
GOTOCMP 14224 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 14224 >=
SETV D2 1
GOTO 14225
SETV D2 0
COMPAREV D2 0
GOTOCMP 14230 ==; Test 'if'
SETV D2 0; if() #409 Body Start
STORE D2 0
GOTO 14232; if() #409 Body End
SETV D2 2; if() #409 Else Start
STORE D2 0; if() #409 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
PUSHARGSV 1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 14341; if() #400 Body End
LOAD D2 0.0002; if() #717 Test AND if() #400 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 14324 ==; Test 'if'
SETR D2 GD26; if() #410 Test AND if() #717 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 14315 ==; Test 'if'
SETV D2 1000; if() #410 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
GOTO 14324; if() #410 Body End
SETV D2 0; if() #410 Else Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #410 Else End
LOAD D2 0.0002; if() #717 Body End AND if() #718 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 14341 ==; Test 'if'
PUSHR D4; if() #718 Body Start
LOAD D2 0.0002; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.2139; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #718 Body End
POPARGS D5 0.0003; if() #400 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body End
SETR D4 SP2; Func[void UpdateGhostZH1()] Body Start
PUSHR D4
CALLFUNC 1.3950; UsrFunc[void UpdateEWeapons()] Call
PEEK D4
CALLFUNC 0.1156; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK D4
CALLFUNC 1.4352; UsrFunc[void UpdateGhostZHData1()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR D4 SP2
SETR D2 CURDMAP
LSHIFTV D2 8
PUSHR D2
SETR D2 CURDSCR
POP D3
ADDR D2 D3
STORE D2 0
SETR D2 GD26; if() #285 Test
PUSHR D2
POP D0
READPODARRAYV D2 7
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 14385 ==; Test 'if'
SETV D2 0; if() #285 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
GOTO 14403; if() #285 Body End
SETR D2 GD26; if() #545 Test AND if() #285 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 14403 ==; Test 'if'
SETR D2 GD26; if() #545 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 6
SUBV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #545 Body End
POP D5; if() #285 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR D4 SP2; Func[void UpdateGhostZH2()] Body Start
PUSHR D4
CALLFUNC 0.1290; UsrFunc[void DrawGhostFFCs()] Call
PEEK D4
CALLFUNC 0.0295; UsrFunc[void AutoGhost()] Call
PEEK D4
CALLFUNC 1.4414; UsrFunc[void UpdateGhostZHData2()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR D4 SP2; Func[void UpdateGhostZHData2()] Body Start
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 1
ADDV D2 1
MODV D2 8
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETR D2 GD26; if() #286 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14446 ==; Test 'if'
SETR D2 GD26; if() #286 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ORV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 14456; if() #286 Body End
SETR D2 GD26; if() #286 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 -2
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #286 Else End
SETR D2 GD26; if(true) #546 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 3
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26; if() #547 Test
PUSHR D2
POP D0
READPODARRAYV D2 3
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 14491 ==; Test 'if'
SETV D2 0; if() #547 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #547 Body End
SETR D2 GD26; if(true) #548 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 5
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26; if() #549 Test
PUSHR D2
POP D0
READPODARRAYV D2 5
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 14526 ==; Test 'if'
SETV D2 0; if() #549 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2; if() #549 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR D4 SP2; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOAD D2 0.0001; if() #661 Test
COMPAREV D2 97
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 14540 ==; Test 'if'
LOAD D2 0.0001; if() #662 Test AND if() #661 Body Start
COMPAREV D2 122
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 14540 ==; Test 'if'
SETV D2 1; return Start AND if() #662 Body Start
GOTO 14575; return End AND if() #662 Body End
LOAD D2 0.0001; if() #661 Body End AND if() #663 Test
COMPAREV D2 65
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 14552 ==; Test 'if'
LOAD D2 0.0001; if() #664 Test AND if() #663 Body Start
COMPAREV D2 90
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 14552 ==; Test 'if'
SETV D2 1; return Start AND if() #664 Body Start
GOTO 14575; return End AND if() #664 Body End
LOAD D2 0.0001; if() #663 Body End AND if() #665 Test
COMPAREV D2 95
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14559 ==; Test 'if'
SETV D2 1; return Start AND if() #665 Body Start
GOTO 14575; return End AND if() #665 Body End
LOAD D2 0; unless() #666 Test
COMPAREV D2 0
GOTOCMP 14574 !=; Test 'unless'
LOAD D2 0.0001; if() #667 Test AND unless() #666 Body Start
COMPAREV D2 48
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 14574 ==; Test 'if'
LOAD D2 0.0001; if() #668 Test AND if() #667 Body Start
COMPAREV D2 57
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 14574 ==; Test 'if'
SETV D2 1; return Start AND if() #668 Body Start
GOTO 14575; return End AND if() #668 Body End
SETV D2 0; if() #667 Body End AND unless() #666 Body End AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(eweapon, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params End
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0004; if() #558 Test
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 14609 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #558 Body Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #558 Body End
LOAD D2 0.0004; if() #289 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14745 ==; Test 'if'
SETV D2 3; if() #289 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
GOTO 14765; if() #289 Body End
LOAD D2 0.0003; if() #289 Else Start
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #289 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.2029; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004; if() #290 Test
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
GOTOCMP 14902 !=
LOAD D2 0.0004
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -1
GOTOCMP 14902 !=
SETV D2 1
GOTO 14903
SETV D2 0
COMPAREV D2 0
GOTOCMP 14922 ==; Test 'if'
PUSHR D4; if() #290 Body Start
LOAD D2 0; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params Start
PUSHR D2; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params End
CALLFUNC 0.7711; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 14940; if() #290 Body End
LOAD D2 0.0004; if() #290 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #290 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 -257
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #559 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 15053 ==; Test 'if'
SETV D2 0; if() #559 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #559 Body End
LOAD D2 0; if() #560 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 15070 ==; Test 'if'
PUSHR D4; if() #560 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.2139; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #560 Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __CopyEWeapon(eweapon, int, int, int)] Body End
SETR D4 SP2; Func[bool __Ghost_IsFlickering(npc)] Body Start
LOAD D2 0; if() #606 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 15084 ==; Test 'if'
SETV D2 1; return Start AND if() #606 Body Start
GOTO 15085; return End AND if() #606 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[bool __Ghost_IsFlickering(npc)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #183 setup
LOAD D2 0; for() #183 LoopTest
PUSHR D2
LOAD D2 0.0001
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 15136 ==; for() #183 TestFail?
LOAD D2 0.0006; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #729 Test AND for() #183 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15132 ==; Test 'if'
SETV D2 0; if() #730 Test AND if() #729 Body Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
COMPAREV D2 0
GOTOCMP 15132 ==; Test 'if'
SETV D2 1; return Start AND if() #730 Body Start
GOTO 15137; return End AND if() #730 Body End
LOAD D2 0; if() #729 Body End AND for() #183 Body End AND for() #183 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 15090; for() #183 End
SETV D2 0; return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0004; Func[void SpawnAnimation(ffc, npc)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 DATA
STORE D2 0.0003
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCCOLLDET
STORE D2 0.0002
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0005; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.4551; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
STOREV 0 0; for() #220 setup
LOAD D2 0; for() #220 LoopTest
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15282 ==; for() #220 TestFail?
SETV D2 0; for() #220 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
SETV D2 32768
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.4551; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 0.4151; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.4551; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 0.4151; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
LOAD D2 0; if() #817 Test
COMPAREV D2 29
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 15278 ==; Test 'if'
SETR D2 UNDERCOMBO; if() #817 Body Start
PUSHR D2
LOAD D2 0.0005; InlineFunc[int ComboAt(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D3 SPRITE_Y; InlineFunc[int ComboAt(int, int)] Params End
POP D2; InlineFunc[int ComboAt(int, int)] Body Start
COMBO_AT D2 D3; InlineFunc[int ComboAt(int, int)] Body End
PUSHR D2
POP D0
POP D2
SETR COMBODD D2
SETR D2 UNDERCSET
PUSHR D2
LOAD D2 0.0005; InlineFunc[int ComboAt(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D3 SPRITE_Y; InlineFunc[int ComboAt(int, int)] Params End
POP D2; InlineFunc[int ComboAt(int, int)] Body Start
COMBO_AT D2 D3; InlineFunc[int ComboAt(int, int)] Body End
PUSHR D2
POP D0
POP D2
SETR COMBOCD D2; if() #817 Body End
LOAD D2 0; for() #220 Body End AND for() #220 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 15174; for() #220 End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
POPARGS D5 0.0006
RETURNFUNC; Func[void SpawnAnimation(ffc, npc)] Body End
