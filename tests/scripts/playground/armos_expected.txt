stderr:

Compiling 'armos.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 13,
    "symbols": 43,
    "identifiers": 112,
    "elided": true
  }
}

zasm:

PUSHR D0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0 0.0003
SETR D4 SP2
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
PUSHR D4
LOAD D2 0.0003; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Params End
CALLFUNC 0.4178; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
PUSHV 89; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3109; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 3; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3109; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3109; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0003; UsrFunc[void SpawnAnimation(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void SpawnAnimation(ffc, npc)] Params End
CALLFUNC 0.5660; UsrFunc[void SpawnAnimation(ffc, npc)] Call
POP D4
LOAD D2 0.0002
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
STORE D2 0.0001
LOAD D2 0.0002
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0
SETR D2 GD3; if() #843 Test AND while(true) #9 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
GOTOCMP 63 !=
SETR D2 GD5
COMPAREV D2 0
GOTOCMP 63 >
SETV D2 1
GOTO 64
SETV D2 0
COMPAREV D2 0
GOTOCMP 70 ==; Test 'if'
SETV D2 1.5000; if() #843 Body Start
SETR GD5 D2
LOAD D2 0; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body AND if() #843 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params End
CALLFUNC 0.4346; UsrFunc[void Ghost_MoveTowardLink(int, int)] Call
PEEK D4
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 0.4411; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4; while(true) #9 Body [Opt:AlwaysOn] End
GOTO 55; while() #9 End AND [Opt:NeverRet] AND void run(int) Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR D4 SP2; Func[int AngleDir8(int)] Body Start
LOAD D2 0; if() #7 Test
COMPAREV D2 157.5000
GOTOCMP 112 >
LOAD D2 0
COMPAREV D2 112.5000
GOTOCMP 112 <=
SETV D2 1
GOTO 113
SETV D2 0
COMPAREV D2 0
GOTOCMP 117 ==; Test 'if'
SETV D2 6; return Start AND if() #7 Body Start
GOTO 196; return End AND if() #7 Body End
LOAD D2 0; if() #8 Test AND if() #7 Else Start
COMPAREV D2 112.5000
GOTOCMP 125 >
LOAD D2 0
COMPAREV D2 67.5000
GOTOCMP 125 <=
SETV D2 1
GOTO 126
SETV D2 0
COMPAREV D2 0
GOTOCMP 130 ==; Test 'if'
SETV D2 1; return Start AND if() #8 Body Start
GOTO 196; return End AND if() #8 Body End
LOAD D2 0; if() #9 Test AND if() #8 Else Start
COMPAREV D2 67.5000
GOTOCMP 138 >
LOAD D2 0
COMPAREV D2 22.5000
GOTOCMP 138 <=
SETV D2 1
GOTO 139
SETV D2 0
COMPAREV D2 0
GOTOCMP 143 ==; Test 'if'
SETV D2 7; return Start AND if() #9 Body Start
GOTO 196; return End AND if() #9 Body End
LOAD D2 0; if() #10 Test AND if() #9 Else Start
COMPAREV D2 22.5000
GOTOCMP 151 >
LOAD D2 0
COMPAREV D2 -22.5000
GOTOCMP 151 <=
SETV D2 1
GOTO 152
SETV D2 0
COMPAREV D2 0
GOTOCMP 156 ==; Test 'if'
SETV D2 3; return Start AND if() #10 Body Start
GOTO 196; return End AND if() #10 Body End
LOAD D2 0; if() #11 Test AND if() #10 Else Start
COMPAREV D2 -22.5000
GOTOCMP 164 >
LOAD D2 0
COMPAREV D2 -67.5000
GOTOCMP 164 <=
SETV D2 1
GOTO 165
SETV D2 0
COMPAREV D2 0
GOTOCMP 169 ==; Test 'if'
SETV D2 5; return Start AND if() #11 Body Start
GOTO 196; return End AND if() #11 Body End
LOAD D2 0; if() #12 Test AND if() #11 Else Start
COMPAREV D2 -67.5000
GOTOCMP 177 >
LOAD D2 0
COMPAREV D2 -112.5000
GOTOCMP 177 <=
SETV D2 1
GOTO 178
SETV D2 0
COMPAREV D2 0
GOTOCMP 182 ==; Test 'if'
SETV D2 0; return Start AND if() #12 Body Start
GOTO 196; return End AND if() #12 Body End
LOAD D2 0; if() #13 Test AND if() #12 Else Start
COMPAREV D2 -112.5000
GOTOCMP 190 >
LOAD D2 0
COMPAREV D2 -157.5000
GOTOCMP 190 <=
SETV D2 1
GOTO 191
SETV D2 0
COMPAREV D2 0
GOTOCMP 195 ==; Test 'if'
SETV D2 4; return Start AND if() #13 Body Start
GOTO 196; return End AND if() #13 Body End
SETV D2 2; return Start AND if() #13 Else Start
POP D5; return End AND if() #13 Else End AND if() #12 Else End AND if() #11 Else End AND if() #10 Else End AND if() #9 Else End AND if() #8 Else End AND if() #7 Else End
RETURNFUNC; Func[int AngleDir8(int)] Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #20 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 210 ==; Test 'if'
LOAD D2 0.0001; if() #20 Body Start
STORE D2 0.0002
GOTO 220; if() #20 Body End
LOAD D2 0.0002; if() #85 Test AND if() #20 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 220 ==; Test 'if'
LOAD D2 0; if() #85 Body Start
STORE D2 0.0002; if() #85 Body End
LOAD D2 0.0002; if() #20 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
SETR D4 SP2; Func[bool ClockIsActive()] Body Start
SETR D2 GD26; return Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I!=
RETURNFUNC; return End AND Func[bool ClockIsActive()] Body End
PUSHARGSV 0 0.0004; Func[int ComboAt(int, int)] Body Start
SETR D4 SP2
SETR D2 REGION_ID; if() #29 Test
COMPAREV D2 0
GOTOCMP 291 ==; Test 'if'
PUSHR D4; if() #29 Body Start
LOAD D2 0.0005; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR D2
SETR D2 REGION_WIDTH
SUBV D2 1
PUSHR D2
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0316; UsrFunc[int VBound(int, int, int)] Call
POP D4
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR D2
SETR D2 REGION_HEIGHT
SUBV D2 1
PUSHR D2
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0316; UsrFunc[int VBound(int, int, int)] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0005; InlineFunc[int Floor(int)] Params Start
DIVV D2 256; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0003
LOAD D2 0.0004; InlineFunc[int Floor(int)] Params Start
DIVV D2 176; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
SETR D2 REGION_SCREEN_WIDTH
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
MULTV D2 176
STORE D2 0.0001
LOAD D2 0.0004
MODV D2 176
ANDV D2 240
PUSHR D2
LOAD D2 0.0005
MODV D2 256
RSHIFTV D2 4
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0001; return Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
GOTO 314; return End AND if() #29 Body End
PUSHR D4; if() #29 Else Start
LOAD D2 0.0005; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR D2
PUSHV 255
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0316; UsrFunc[int VBound(int, int, int)] Call
POP D4
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR D2
PUSHV 175
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0316; UsrFunc[int VBound(int, int, int)] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; return Start
ANDV D2 240
PUSHR D2
LOAD D2 0.0005
RSHIFTV D2 4
POP D3
ADDR D2 D3
POPARGS D5 0.0006; return End AND if() #29 Else End
RETURNFUNC; Func[int ComboAt(int, int)] Body End
SETR D4 SP2; Func[int VBound(int, int, int)] Body Start
LOAD D2 0.0002; if() #351 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 328 ==; Test 'if'
LOAD D2 0; if() #351 Body Start
STORE D2 0.0002
GOTO 338; if() #351 Body End
LOAD D2 0.0002; if() #581 Test AND if() #351 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 338 ==; Test 'if'
LOAD D2 0.0001; if() #581 Body Start
STORE D2 0.0002; if() #581 Body End
LOAD D2 0.0002; if() #351 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int VBound(int, int, int)] Body End
PUSHV 0; Func[bool IsWater(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #371 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 355 ==; Test 'if'
SETV D2 1; return Start AND if() #371 Body Start
GOTO 383; return End AND if() #371 Body End
LOAD D2 0; if() #372 Test
COMPAREV D2 18
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 362 ==; Test 'if'
SETV D2 1; return Start AND if() #372 Body Start
GOTO 383; return End AND if() #372 Body End
LOAD D2 0; if() #373 Test
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 369 ==; Test 'if'
SETV D2 1; return Start AND if() #373 Body Start
GOTO 383; return End AND if() #373 Body End
LOAD D2 0; if() #374 Test
COMPAREV D2 86
GOTOCMP 377 <
LOAD D2 0
COMPAREV D2 91
GOTOCMP 377 >
SETV D2 1
GOTO 378
SETV D2 0
COMPAREV D2 0
GOTOCMP 382 ==; Test 'if'
SETV D2 1; return Start AND if() #374 Body Start
GOTO 383; return End AND if() #374 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool IsWater(int)] Body End
SETR D4 SP2; Func[bool __IsPit(int)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[bool IsPit(int)] Params Start
PUSHR D2; UsrFunc[bool IsPit(int)] Params End
CALLFUNC 0.5608; UsrFunc[bool IsPit(int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[bool __IsPit(int)] Body End
SETR D4 SP2; Func[bool Ghost_CanMove(int, int, int)] Body Start
PUSHR D4; return Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0409; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int)] Body End
SETR D4 SP2; Func[bool Ghost_CanMove(int, int, int, bool)] Body Start
LOAD D2 0.0002; if() #241 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 417 ==; Test 'if'
SETV D2 1; return Start AND if() #241 Body Start
GOTO 467; return End AND if() #241 Body End
LOAD D2 0.0003; if() #242 Test
COMPAREV D2 4
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 425 ==; Test 'if'
LOAD D2 0.0002; if() #242 Body Start
MULTV D2 0.7071
STORE D2 0.0002; if() #242 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.0469; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0002; while() #1 Test
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 456 ==; Test 'while'
PUSHR D4; unless() #243 Test AND while() #1 Body Start
LOAD D2 0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0542; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 452 !=; Test 'unless'
SETV D2 0; return Start AND unless() #243 Body Start
GOTO 467; return End AND unless() #243 Body End
LOAD D2 0.0002
SUBV D2 8
STORE D2 0.0002; while() #1 Body End
GOTO 431; while() #1 End
PUSHR D4; return Start
LOAD D2 0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0542; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0004; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int, bool)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #701 Test
COMPAREV D2 0
GOTOCMP 478 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 478 >
SETV D2 1
GOTO 479
SETV D2 0
COMPAREV D2 0
GOTOCMP 483 ==; Test 'if'
LOAD D2 0; return Start AND if() #701 Body Start
GOTO 540; return End AND if() #701 Body End
LOAD D2 0; if() #702 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 490 ==; Test 'if'
SETV D2 0; return Start AND if() #702 Body Start
GOTO 540; return End AND if() #702 Body End
LOAD D2 0; if() #703 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 497 ==; Test 'if'
SETV D2 5; return Start AND if() #703 Body Start
GOTO 540; return End AND if() #703 Body End
LOAD D2 0; if() #704 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 504 ==; Test 'if'
SETV D2 3; return Start AND if() #704 Body Start
GOTO 540; return End AND if() #704 Body End
LOAD D2 0; if() #705 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 511 ==; Test 'if'
SETV D2 7; return Start AND if() #705 Body Start
GOTO 540; return End AND if() #705 Body End
LOAD D2 0; if() #706 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 518 ==; Test 'if'
SETV D2 1; return Start AND if() #706 Body Start
GOTO 540; return End AND if() #706 Body End
LOAD D2 0; if() #707 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 525 ==; Test 'if'
SETV D2 6; return Start AND if() #707 Body Start
GOTO 540; return End AND if() #707 Body End
LOAD D2 0; if() #708 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 532 ==; Test 'if'
SETV D2 2; return Start AND if() #708 Body Start
GOTO 540; return End AND if() #708 Body End
LOAD D2 0; if() #709 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 539 ==; Test 'if'
SETV D2 4; return Start AND if() #709 Body Start
GOTO 540; return End AND if() #709 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
PUSHARGSV 0 0.0006; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0009; if() #366 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 671 ==; Test 'if'
SETR D2 GD13; if() #366 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #171 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #171 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 629 ==; for() #171 TestFail?
PUSHR D4; unless() #610 Test AND for() #171 Body Start
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1324; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 625 !=; Test 'unless'
SETV D2 0; return Start AND unless() #610 Body Start
GOTO 1322; return End AND unless() #610 Body End
LOAD D2 0.0005; for() #171 Body End AND for() #171 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 599; for() #171 End
PUSHR D4; unless() #611 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1324; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 646 !=; Test 'unless'
SETV D2 0; return Start AND unless() #611 Body Start
GOTO 1322; return End AND unless() #611 Body End
PUSHR D4; unless() #612 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1324; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 669 !=; Test 'unless'
SETV D2 0; return Start AND unless() #612 Body Start
GOTO 1322; return End AND unless() #612 Body End
SETV D2 1; return Start
GOTO 1322; return End AND if() #366 Body End
LOAD D2 0.0009; if() #367 Test AND if() #366 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 804 ==; Test 'if'
SETR D2 GD13; if() #367 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD1
PUSHR D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #172 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #172 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 762 ==; for() #172 TestFail?
PUSHR D4; unless() #613 Test AND for() #172 Body Start
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1324; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 758 !=; Test 'unless'
SETV D2 0; return Start AND unless() #613 Body Start
GOTO 1322; return End AND unless() #613 Body End
LOAD D2 0.0005; for() #172 Body End AND for() #172 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 732; for() #172 End
PUSHR D4; unless() #614 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1324; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 779 !=; Test 'unless'
SETV D2 0; return Start AND unless() #614 Body Start
GOTO 1322; return End AND unless() #614 Body End
PUSHR D4; unless() #615 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1324; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 802 !=; Test 'unless'
SETV D2 0; return Start AND unless() #615 Body Start
GOTO 1322; return End AND unless() #615 Body End
SETV D2 1; return Start
GOTO 1322; return End AND if() #367 Body End
LOAD D2 0.0009; if() #368 Test AND if() #367 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 944 ==; Test 'if'
PUSHR D4; if() #616 Test AND if() #368 Body Start
CALLFUNC 0.4394; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 822 ==
PUSHR D4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 822 !=
SETV D2 1
GOTO 823
SETV D2 0
COMPAREV D2 0
GOTOCMP 827 ==; Test 'if'
SETV D2 0; return Start AND if() #616 Body Start
GOTO 1322; return End AND if() #616 Body End
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #173 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #173 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 902 ==; for() #173 TestFail?
PUSHR D4; unless() #617 Test AND for() #173 Body Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1324; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 898 !=; Test 'unless'
SETV D2 0; return Start AND unless() #617 Body Start
GOTO 1322; return End AND unless() #617 Body End
LOAD D2 0.0005; for() #173 Body End AND for() #173 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 872; for() #173 End
PUSHR D4; unless() #618 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1324; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 919 !=; Test 'unless'
SETV D2 0; return Start AND unless() #618 Body Start
GOTO 1322; return End AND unless() #618 Body End
PUSHR D4; unless() #619 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1324; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 942 !=; Test 'unless'
SETV D2 0; return Start AND unless() #619 Body Start
GOTO 1322; return End AND unless() #619 Body End
SETV D2 1; return Start
GOTO 1322; return End AND if() #368 Body End
LOAD D2 0.0009; if() #369 Test AND if() #368 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1077 ==; Test 'if'
SETR D2 GD12; if() #369 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #174 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #174 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1035 ==; for() #174 TestFail?
PUSHR D4; unless() #620 Test AND for() #174 Body Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1324; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1031 !=; Test 'unless'
SETV D2 0; return Start AND unless() #620 Body Start
GOTO 1322; return End AND unless() #620 Body End
LOAD D2 0.0005; for() #174 Body End AND for() #174 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 1005; for() #174 End
PUSHR D4; unless() #621 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1324; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1052 !=; Test 'unless'
SETV D2 0; return Start AND unless() #621 Body Start
GOTO 1322; return End AND unless() #621 Body End
PUSHR D4; unless() #622 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1324; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1075 !=; Test 'unless'
SETV D2 0; return Start AND unless() #622 Body Start
GOTO 1322; return End AND unless() #622 Body End
SETV D2 1; return Start
GOTO 1322; return End AND if() #369 Body End
LOAD D2 0.0009; if() #370 Test AND if() #369 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1138 ==; Test 'if'
STOREV 0 0; if() #370 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0409; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #623 Test
COMPAREV D2 0
GOTOCMP 1112 !=; Test 'unless'
SETV D2 0; return Start AND unless() #623 Body Start
GOTO 1322; return End AND unless() #623 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0409; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 1322; return End AND if() #370 Body End
LOAD D2 0.0009; if() #371 Test AND if() #370 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1199 ==; Test 'if'
STOREV 0 0; if() #371 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0409; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #624 Test
COMPAREV D2 0
GOTOCMP 1173 !=; Test 'unless'
SETV D2 0; return Start AND unless() #624 Body Start
GOTO 1322; return End AND unless() #624 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0409; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 1322; return End AND if() #371 Body End
LOAD D2 0.0009; if() #372 Test AND if() #371 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1260 ==; Test 'if'
STOREV 0 0; if() #372 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0409; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #625 Test
COMPAREV D2 0
GOTOCMP 1234 !=; Test 'unless'
SETV D2 0; return Start AND unless() #625 Body Start
GOTO 1322; return End AND unless() #625 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0409; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 1322; return End AND if() #372 Body End
LOAD D2 0.0009; if() #373 Test AND if() #372 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1321 ==; Test 'if'
STOREV 0 0; if() #373 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0409; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #626 Test
COMPAREV D2 0
GOTOCMP 1295 !=; Test 'unless'
SETV D2 0; return Start AND unless() #626 Body Start
GOTO 1322; return End AND unless() #626 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0409; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 1322; return End AND if() #373 Body End
SETV D2 0; return Start AND if() #373 Else Start
POPARGS D5 0.0010; return End AND if() #373 Else End AND if() #372 Else End AND if() #371 Else End AND if() #370 Else End AND if() #369 Else End AND if() #368 Else End AND if() #367 Else End AND if() #366 Else End
RETURNFUNC; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body End
PUSHV 0; Func[bool Ghost_CanMovePixel(int, int, bool)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #244 Test
COMPAREV D2 0
GOTOCMP 1340 <
LOAD D2 0.0003
COMPAREV D2 255
GOTOCMP 1340 >
LOAD D2 0.0002
COMPAREV D2 0
GOTOCMP 1340 <
LOAD D2 0.0002
COMPAREV D2 175
GOTOCMP 1340 >
SETV D2 0
GOTO 1341
SETV D2 1
COMPAREV D2 0
GOTOCMP 1348 ==; Test 'if'
PUSHR D4; return Start AND if() #244 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 1542; return End AND if() #244 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0231; UsrFunc[int ComboAt(int, int)] Call
POP D4
STORE D2 0
PUSHR D4; unless() #245 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1453 !=; Test 'unless'
LOAD D2 0; if() #246 Test AND unless() #245 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 110
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1372 ==; Test 'if'
SETV D2 0; return Start AND if() #246 Body Start
GOTO 1542; return End AND if() #246 Body End
LOAD D2 0; if() #247 Test
PUSHR D2
POP D0
SETR D2 COMBOFD
COMPAREV D2 96
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1382 ==; Test 'if'
SETV D2 0; return Start AND if() #247 Body Start
GOTO 1542; return End AND if() #247 Body End
LOAD D2 0; if() #248 Test
PUSHR D2
POP D0
SETR D2 COMBOID
COMPAREV D2 96
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1392 ==; Test 'if'
SETV D2 0; return Start AND if() #248 Body Start
GOTO 1542; return End AND if() #248 Body End
PUSHR D4; if() #83 Test
PUSHV 65536; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1409 ==; Test 'if'
LOAD D2 0; if() #249 Test AND if() #83 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1453 ==; Test 'if'
SETV D2 0; return Start AND if() #249 Body Start
GOTO 1542; return End AND if() #249 Body End
GOTO 1453; if() #83 Body End
LOAD D2 0.0001; if() #84 Test AND if() #83 Else Start
COMPAREV D2 0
GOTOCMP 1423 ==; Test 'if'
LOAD D2 0; if() #250 Test AND if() #84 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 54
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1453 ==; Test 'if'
SETV D2 0; return Start AND if() #250 Body Start
GOTO 1542; return End AND if() #250 Body End
GOTO 1453; if() #84 Body End
LOAD D2 0; if() #251 Test AND if() #84 Else Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 128
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1433 ==; Test 'if'
SETV D2 0; return Start AND if() #251 Body Start
GOTO 1542; return End AND if() #251 Body End
LOAD D2 0; if() #252 Test
PUSHR D2
POP D0
SETR D2 COMBOFD
COMPAREV D2 97
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1443 ==; Test 'if'
SETV D2 0; return Start AND if() #252 Body Start
GOTO 1542; return End AND if() #252 Body End
LOAD D2 0; if() #253 Test
PUSHR D2
POP D0
SETR D2 COMBOID
COMPAREV D2 97
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1453 ==; Test 'if'
SETV D2 0; return Start AND if() #253 Body Start
GOTO 1542; return End AND if() #253 Body End
PUSHR D4; if() #84 Else End AND if() #83 Else End AND unless() #245 Body End AND if() #254 Test
PUSHV 65539; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1465 ==; Test 'if'
PUSHR D4; return Start AND if() #254 Body Start
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0341; UsrFunc[bool IsWater(int)] Call
POP D4
GOTO 1542; return End AND if() #254 Body End
PUSHR D4; if() #255 Test
PUSHV 65538; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1488 ==; Test 'if'
PUSHR D4; return Start AND if() #255 Body Start
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0341; UsrFunc[bool IsWater(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1486 !=
LOAD D2 0
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 58
GOTOCMP 1486 ==
SETV D2 0
GOTO 1542
SETV D2 1
GOTO 1542; return End AND if() #255 Body End
PUSHR D4; if() #256 Test
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0341; UsrFunc[bool IsWater(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1500 ==; Test 'if'
PUSHR D4; return Start AND if() #256 Body Start
PUSHV 2048; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 1542; return End AND if() #256 Body End
PUSHR D4; if() #257 Test
LOAD D2 0; UsrFunc[bool __IsPit(int)] Params Start
PUSHR D2; UsrFunc[bool __IsPit(int)] Params End
CALLFUNC 0.0385; UsrFunc[bool __IsPit(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1512 ==; Test 'if'
PUSHR D4; return Start AND if() #257 Body Start
PUSHV 4096; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 1542; return End AND if() #257 Body End
PUSHR D4; if() #85 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1520 ==; Test 'if'
SETV D2 1; return Start AND if() #85 Body Start
GOTO 1542; return End AND if() #85 Body End
PUSHR D4; if() #86 Test AND if() #85 Else Start
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1534 ==; Test 'if'
PUSHR D4; return Start AND if() #86 Body Start
LOAD D2 0.0003; UsrFunc[bool __FullTileWalkable(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[bool __FullTileWalkable(int, int)] Params End
CALLFUNC 0.1575; UsrFunc[bool __FullTileWalkable(int, int)] Call
POP D4
GOTO 1542; return End AND if() #86 Body End
LOAD D2 0.0003; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND return Start AND if() #86 Else Start
PUSHR D2
LOAD D2 0.0002
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
SETCMP D2 I==
POPARGS D5 0.0004; return End AND if() #86 Else End AND if() #85 Else End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int, bool)] Body End
SETR D4 SP2; Func[bool Ghost_FlagIsSet(int)] Body Start
LOAD D2 0; if() #119 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1563 ==; Test 'if'
SETR D2 GD16; return Start AND if() #119 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
GOTO 1573; return End AND if() #119 Body End
SETR D2 GD15; return Start AND if() #119 Else Start
PUSHR D2
LOAD D2 0
POP D3
ANDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
POP D5; return End AND if() #119 Else End
RETURNFUNC; Func[bool Ghost_FlagIsSet(int)] Body End
SETR D4 SP2; Func[bool __FullTileWalkable(int, int)] Body Start
LOAD D2 0.0001; if() #600 Test
COMPAREV D2 0
GOTOCMP 1590 <
LOAD D2 0
COMPAREV D2 0
GOTOCMP 1590 <
LOAD D2 0.0001
COMPAREV D2 256
GOTOCMP 1590 >=
LOAD D2 0
COMPAREV D2 176
GOTOCMP 1590 >=
SETV D2 0
GOTO 1591
SETV D2 1
COMPAREV D2 0
GOTOCMP 1598 ==; Test 'if'
PUSHR D4; return Start AND if() #600 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 1658; return End AND if() #600 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0001
MODV D2 16
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0
MODV D2 16
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #601 Test
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 1652 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 1652 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 1652 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 1652 !=
SETV D2 0
GOTO 1653
SETV D2 1
COMPAREV D2 0
GOTOCMP 1657 ==; Test 'if'
SETV D2 0; return Start AND if() #601 Body Start
GOTO 1658; return End AND if() #601 Body End
SETV D2 1; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __FullTileWalkable(int, int)] Body End
PUSHARGSV 0 0.0004; Func[bool Ghost_CheckFreeze(ffc, npc)] Body Start
SETR D4 SP2
PUSHR D4; if() #258 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1673 ==
PUSHR D4
CALLFUNC 0.0223; UsrFunc[bool ClockIsActive()] Call
POP D4
COMPAREV D2 0
GOTOCMP 1687 !=
PUSHR D4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1685 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTUN
COMPAREV D2 0
GOTOCMP 1687 >
SETV D2 0
GOTO 1688
SETV D2 1
COMPAREV D2 0
GOTOCMP 1916 ==; Test 'if'
LOAD D2 0.0005; if() #258 Body Start
PUSHR D2
POP REFFFC
SETR D2 XD
STORE D2 0.0003
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 YD
STORE D2 0.0002
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 XD2
STORE D2 0.0001
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 YD2
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETR D2 GD17
ORV D2 2
SETR GD17 D2
PUSHR D4; while() #2 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1760 ==
PUSHR D4
CALLFUNC 0.0223; UsrFunc[bool ClockIsActive()] Call
POP D4
COMPAREV D2 0
GOTOCMP 1774 !=
PUSHR D4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1772 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTUN
COMPAREV D2 0
GOTOCMP 1774 >
SETV D2 0
GOTO 1775
SETV D2 1
COMPAREV D2 0
GOTOCMP 1880 ==; Test 'while'
PUSHR D4; while() #2 Body Start
LOAD D2 0.0005; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 0.1919; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_DrawShadow(npc)] Params Start
PUSHR D2; UsrFunc[void __Ghost_DrawShadow(npc)] Params End
CALLFUNC 0.2004; UsrFunc[void __Ghost_DrawShadow(npc)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 0.2169; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND unless() #87 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 1801 !=; Test 'unless'
SETV D2 0; return Start AND unless() #87 Body Start
GOTO 1917; return End
GOTO 1811; unless() #87 Body End
LOAD D2 0.0004; if() #259 Test AND unless() #87 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1811 ==; Test 'if'
SETV D2 0; return Start AND if() #259 Body Start
GOTO 1917; return End AND if() #259 Body End
PUSHR D4; unless() #87 Else End
LOAD D2 0.0005; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.2569; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1840 ==; Test 'if'
SETR D2 GD10; if() #88 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0469; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
GOTO 1872; if() #88 Body End
PUSHR D4; if() #89 Test AND if() #88 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1863 ==; Test 'if'
SETR D2 GD10; if() #89 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0469; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
GOTO 1872; if() #89 Body End
SETR D2 GD10; if() #89 Else Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #89 Else End
PUSHR D4; if() #88 Else End
LOAD D2 0.0005; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params End
CALLFUNC 0.2703; UsrFunc[void Ghost_CheckHit(ffc, npc)] Call
POP D4; while() #2 Body End
GOTO 1749; while() #2 End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2; if() #258 Body End
SETV D2 1; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool Ghost_CheckFreeze(ffc, npc)] Body End
PUSHV 0; Func[void __Ghost_UpdateFlashing(ffc, npc)] Body Start
SETR D4 SP2
STOREV 0 0
SETR D2 GD20; if() #667 Test
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1937 ==; Test 'if'
SETR D2 GD20; if() #667 Body Start
SUBV D2 1
SETR GD20 D2
SETR D2 GD20; if() #668 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1937 ==; Test 'if'
SETV D2 1; if() #668 Body Start
STORE D2 0; if() #668 Body End
SETR D2 GD17; if() #667 Body End AND if() #669 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2002 ==; Test 'if'
SETR D2 GD20; if() #402 Test AND if() #669 Body Start
COMPAREV D2 0
GOTOCMP 1948 <=
SETV D2 1
GOTO 1949
SETV D2 0
COMPAREV D2 0
GOTOCMP 1966 ==; Test 'if'
SETR D2 GD26; if() #402 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
RSHIFTV D2 1
SUBV2 9 D2
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2
GOTO 2002; if() #402 Body End
LOAD D2 0.0001; if() #403 Test AND if() #402 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 64
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1990 ==; Test 'if'
SETR D2 GD26; if() #403 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
ANDV D2 3
ADDV D2 6
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2
GOTO 2002; if() #403 Body End
LOAD D2 0; if() #670 Test AND if() #403 Else Start
COMPAREV D2 0
GOTOCMP 2002 ==; Test 'if'
SETR D2 GD11; if() #670 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2; if() #670 Body End
POPARGS D5 0.0003; if() #403 Else End AND if() #402 Else End AND if() #669 Body End
RETURNFUNC; Func[void __Ghost_UpdateFlashing(ffc, npc)] Body End
PUSHARGSV 0 0.0004; Func[void __Ghost_DrawShadow(npc)] Body Start
SETR D4 SP2
SETR D2 GD3; if() #627 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2167 !=; Test 'if' AND return (Void) AND if() #627 Body
PUSHR D4; unless() #628 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2031 !=
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCEXTEND
COMPAREV D2 4
GOTOCMP 2031 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCTYPE
COMPAREV D2 40
GOTOCMP 2031 ==
SETV D2 0
GOTO 2032
SETV D2 1
COMPAREV D2 0
GOTOCMP 2167 ==; Test 'unless' AND return (Void) AND unless() #628 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETR D2 GD12; if() #374 Test
COMPAREV D2 3
GOTOCMP 2046 <
SETR D2 GD13
COMPAREV D2 3
GOTOCMP 2046 <
SETV D2 0
GOTO 2047
SETV D2 1
COMPAREV D2 0
GOTOCMP 2095 ==; Test 'if'
SETR D2 GD1; if() #374 Body Start
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
SETV D2 1
STORE D2 0
PUSHR D4; if() #375 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2088 ==; Test 'if'
SETV D2 27400; if() #375 Body Start
STORE D2 0.0001
GOTO 2149; if() #375 Body End
SETR D2 GD26; if() #375 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
STORE D2 0.0001; if() #375 Else End
GOTO 2149; if() #374 Body End
SETR D2 GD1; if() #374 Else Start
PUSHR D2
SETR D2 GD12
SUBV D2 2
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 2
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
SUBV D2 2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
SETV D2 2
STORE D2 0
PUSHR D4; if() #376 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2134 ==; Test 'if'
SETV D2 27392; if() #376 Body Start
STORE D2 0.0001
GOTO 2149; if() #376 Body End
SETR D2 GD26; if() #376 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 4
MULTV D2 2
SETV D2 2
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
POP D3
MULTR D2 D3
ADDV D2 27392
STORE D2 0.0001; if() #376 Else End
PUSHV 1; if() #374 Else End AND InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #377 [Opt:AlwaysOn]
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_DrawShadow(npc)] Body End
PUSHARGSV 0 0.0004; Func[void Ghost_WaitframeLight(ffc, npc)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 24 0
PUSHR D2
SETR D0 D2
PUSHR D0
SETR D2 GD1
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
SETR D2 GD2
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
SETR D2 GD3
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D0
SETR D2 GD5
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
SETR D2 GD6
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
SETR D2 GD7
POP D0
WRITEPODARRAYVR 5 D2
PUSHR D0
SETR D2 GD8
POP D0
WRITEPODARRAYVR 6 D2
PUSHR D0
SETR D2 GD9
POP D0
WRITEPODARRAYVR 7 D2
PUSHR D0
SETR D2 GD18
POP D0
WRITEPODARRAYVR 8 D2
PUSHR D0
SETR D2 GD19
POP D0
WRITEPODARRAYVR 9 D2
PUSHR D0
SETR D2 GD11
POP D0
WRITEPODARRAYVR 10 D2
PUSHR D0
SETR D2 GD4
POP D0
WRITEPODARRAYVR 11 D2
PUSHR D0
SETR D2 GD10
POP D0
WRITEPODARRAYVR 12 D2
PUSHR D0
SETR D2 GD12
POP D0
WRITEPODARRAYVR 13 D2
PUSHR D0
SETR D2 GD13
POP D0
WRITEPODARRAYVR 14 D2
PUSHR D0
SETR D2 GD15
POP D0
WRITEPODARRAYVR 15 D2
PUSHR D0
SETR D2 GD16
POP D0
WRITEPODARRAYVR 16 D2
PUSHR D0
SETR D2 GD17
POP D0
WRITEPODARRAYVR 17 D2
PUSHR D0
SETR D2 GD20
POP D0
WRITEPODARRAYVR 18 D2
PUSHR D0
SETR D2 GD21
POP D0
WRITEPODARRAYVR 19 D2
PUSHR D0
SETR D2 GD14
POP D0
WRITEPODARRAYVR 20 D2
PUSHR D0
SETR D2 GD22
POP D0
WRITEPODARRAYVR 21 D2
PUSHR D0
SETR D2 GD23
POP D0
WRITEPODARRAYVR 22 D2
POP D2
STORE D2 0.0002
ALLOCATEMEMV D2 21 0
STORE D2 0.0001
SETR D2 GD25; if() #355 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2301 ==; Test 'if'
STOREV 0 0; for() #67 setup AND if() #355 Body Start
LOAD D2 0; for() #67 LoopTest
COMPAREV D2 21
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2301 ==; for() #67 TestFail?
SETR D2 GD25; for() #67 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #67 Body End
LOAD D2 0; for() #67 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 2279; for() #67 End
LOAD D2 0.0004; if() #355 Body End AND InlineFunc[bool npc::isValid()] Params AND if() #356 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 2318 ==; Test 'if'
LOAD D2 0.0002; if() #356 Body Start
ORV D2 65536
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2; if() #356 Body End
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND if() #168 Test AND do-while() #2 Body Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 2380 ==; Test 'if'
SETR D2 GD25; if() #170 Test AND if(true) #169 [Opt:AlwaysOn] AND if() #168 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2355 ==; Test 'if'
ALLOCATEMEMV D2 34 0; if() #170 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params End
CALLFUNC 0.5305; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 23 D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 0.5580; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 2385; if() #170 Body End
ALLOCATEMEMV D2 10 0; if() #170 Else Start
STORE D2 0
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params End
CALLFUNC 0.5305; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 23 D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 0.5580; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3; if() #170 Else End
GOTO 2385; if() #168 Body End
PUSHR D4; if() #168 Else Start
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 0.5580; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4; if() #168 Else End
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR GD1 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 1
SETR GD2 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 2
SETR GD3 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 3
SETR GD5 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 4
SETR GD6 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 5
SETR GD7 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 6
SETR GD8 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 7
SETR GD9 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 8
SETR GD18 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 9
SETR GD19 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 10
SETR GD11 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 11
SETR GD4 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 12
SETR GD10 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 13
SETR GD12 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 14
SETR GD13 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 15
SETR GD15 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 16
SETR GD16 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 17
SETR GD17 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 18
SETR GD20 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 19
SETR GD21 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 20
SETR GD14 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 21
SETR GD22 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 22
SETR GD23 D2
LOAD D2 0.0001; if() #171 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2532 ==; Test 'if'
STOREV 0 0; for() #68 setup AND if() #171 Body Start
LOAD D2 0; for() #68 LoopTest
COMPAREV D2 21
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2538 ==; for() #68 TestFail?
LOAD D2 0.0001; for() #68 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #68 Body End
LOAD D2 0; for() #68 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 2509; for() #68 End
GOTO 2538; if() #171 Body End
SETV D2 0; if() #171 Else Start
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #171 Else End
SETR D2 GD26; do-while() #2 Body End AND do-while() #2 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2318 !=; Test 'while'
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND if() #357 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 2563 ==; Test 'if'
SETV D2 65536; if() #357 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2; if() #357 Body End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
POPARGS D5 0.0006
RETURNFUNC; Func[void Ghost_WaitframeLight(ffc, npc)] Body End
SETR D4 SP2; Func[void Ghost_SetPosition(ffc, npc)] Body Start
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND unless() #324 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 2701 ==; Test 'unless' AND return (Void) AND unless() #324 Body
PUSHR D4; if() #162 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2582 !=
SETV D2 1
GOTO 2583
SETV D2 0
COMPAREV D2 0
GOTOCMP 2613 ==; Test 'if'
SETR D2 GD1; if() #162 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
SETR D2 GD2
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETR D2 GD3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCZ D2
GOTO 2645; if() #162 Body End
SETR D2 GD1; if() #162 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
SETR D2 GD2
PUSHR D2
SETR D2 GD3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCZ D2; if() #162 Else End
PUSHR D4
SETR D2 GD1; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCXOFS
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -64
PUSHV 256; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0198; UsrFunc[int Clamp(int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR X D2
PUSHR D4
SETR D2 GD2; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
SETR D2 GD3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCYOFS
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCZOFS
POP D3
SUBR D3 D2
PUSHR D3
PUSHV -64
PUSHV 176; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0198; UsrFunc[int Clamp(int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void Ghost_SetPosition(ffc, npc)] Body End
PUSHARGSV 0 0.0005; Func[void Ghost_CheckHit(ffc, npc)] Body Start
SETR D4 SP2
LOAD D2 0.0005; if() #260 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
SETR D2 GD14
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2872 ==; Test 'if'
SETR D2 GD17; if() #260 Body Start
ORV D2 1
SETR GD17 D2
LOAD D2 0.0005
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
SETR D2 GD20; if() #261 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2731 ==; Test 'if'
SETV D2 32; if() #261 Body Start
SETR GD20 D2; if() #261 Body End
PUSHR D4; if() #262 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2872 ==; Test 'if'
SETR D2 LINKX; if() #262 Body Start
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 LINKY
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params AND if() #90 Test
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETR D2 GD12
ADDV D2 1
MULTV D2 16
POP D3
COMPARER D3 D2
GOTOCMP 2771 >=
LOAD D2 0.0003; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETR D2 GD13
ADDV D2 1
MULTV D2 16
POP D3
COMPARER D3 D2
GOTOCMP 2771 >=
SETV D2 1
GOTO 2772
SETV D2 0
COMPAREV D2 0
GOTOCMP 2801 ==; Test 'if'
SETR D2 LINKDIR; if() #263 Test AND if() #90 Body Start
ANDV D2 2
PUSHR D2
SETR D2 GD4
ANDV D2 2
POP D3
COMPARER D3 D2
GOTOCMP 2793 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 2793 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2793 !=
SETV D2 0
GOTO 2794
SETV D2 1
COMPAREV D2 0
GOTOCMP 2872 ==; Test 'if'
SETR D2 LINKDIR; if() #263 Body Start
LSHIFTV D2 12
ORV D2 16
SETR GD21 D2; if() #263 Body End
GOTO 2872; if() #90 Body End
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params AND if() #91 Test AND if() #90 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0003; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2842 ==; Test 'if'
SETR D2 GD4; if() #264 Test AND if() #91 Body Start
COMPAREV D2 0
GOTOCMP 2828 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 2828 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 2828 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2828 !=
SETV D2 0
GOTO 2829
SETV D2 1
COMPAREV D2 0
GOTOCMP 2872 ==; Test 'if'
LOAD D2 0.0003; if() #92 Test AND if() #264 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2839 ==; Test 'if'
SETV D2 16; if() #92 Body Start
SETR GD21 D2
GOTO 2872; if() #92 Body End
SETV D2 4112; if() #92 Else Start
SETR GD21 D2; if() #92 Else End
GOTO 2872; if() #264 Body End AND if() #91 Body End
SETR D2 GD4; if() #265 Test AND if() #91 Else Start
COMPAREV D2 2
GOTOCMP 2859 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 2859 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 2859 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2859 !=
SETV D2 0
GOTO 2860
SETV D2 1
COMPAREV D2 0
GOTOCMP 2872 ==; Test 'if'
LOAD D2 0.0004; if() #93 Test AND if() #265 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2870 ==; Test 'if'
SETV D2 8208; if() #93 Body Start
SETR GD21 D2
GOTO 2872; if() #93 Body End
SETV D2 12304; if() #93 Else Start
SETR GD21 D2; if() #93 Else End
SETR D2 GD21; if() #265 Body End AND if() #91 Else End AND if() #90 Else End AND if() #262 Body End AND if() #260 Body End AND if() #266 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3099 ==; Test 'if'
SETR D2 GD21; if() #266 Body Start
RSHIFTV D2 12
STORE D2 0.0004
SETR D2 GD21
ANDV D2 4095
STORE D2 0.0003
STOREV 4 0.0002
PUSHR D4; if() #267 Test
PUSHV 5; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2893 ==; Test 'if'
LOAD D2 0.0002; if() #267 Body Start
DIVV D2 2
STORE D2 0.0002; if() #267 Body End
PUSHR D4; if() #94 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0393; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3001 ==; Test 'if'
STOREV 0 0.0001; if() #94 Body Start
STOREV 0 0
LOAD D2 0.0003
SUBV D2 1
STORE D2 0.0003
LOAD D2 0.0003; if() #95 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2921 ==; Test 'if'
LOAD D2 0.0004; if() #95 Body Start
LSHIFTV D2 12
PUSHR D2
LOAD D2 0.0003
POP D3
ORR D2 D3
SETR GD21 D2
GOTO 2923; if() #95 Body End
SETV D2 0; if() #95 Else Start
SETR GD21 D2; if() #95 Else End
LOAD D2 0.0004; if() #96 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2932 ==; Test 'if'
LOAD D2 0.0002; if() #96 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 2951; if() #96 Body End
LOAD D2 0.0004; if() #97 Test AND if() #96 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2940 ==; Test 'if'
LOAD D2 0.0002; if() #97 Body Start
STORE D2 0
GOTO 2951; if() #97 Body End
LOAD D2 0.0004; if() #98 Test AND if() #97 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2949 ==; Test 'if'
LOAD D2 0.0002; if() #98 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 2951; if() #98 Body End
LOAD D2 0.0002; if() #98 Else Start
STORE D2 0.0001; if() #98 Else End
LOAD D2 0.0001; if() #97 Else End AND if() #96 Else End AND if() #99 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2976 ==; Test 'if'
SETR D2 GD1; if() #99 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
SETR GD1 D2
SETR D2 GD18
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
SETR GD18 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.2569; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
GOTO 3099; if() #99 Body End
LOAD D2 0; if() #268 Test AND if() #99 Else Start
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3099 ==; Test 'if'
SETR D2 GD2; if() #268 Body Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD2 D2
SETR D2 GD19
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD19 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.2569; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4; if() #268 Body End
GOTO 3099; if() #99 Else End AND if() #94 Body End
STOREV -1 0.0001; if() #94 Else Start
STOREV -1 0
SETV D2 0
SETR GD21 D2
SETR D2 GD17
ORV D2 16
SETR GD17 D2
LOAD D2 0.0004; if() #100 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3019 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Floor(int)] Params Start AND if() #100 Body Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
STORE D2 0
GOTO 3048; if() #100 Body End
LOAD D2 0.0004; if() #101 Test AND if() #100 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3031 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Ceiling(int)] Params Start AND if() #101 Body Start
LSHIFTV D2 0
DIVV D2 8; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
MULTV D2 8
STORE D2 0
GOTO 3048; if() #101 Body End
LOAD D2 0.0004; if() #102 Test AND if() #101 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3042 ==; Test 'if'
SETR D2 GD1; InlineFunc[int Floor(int)] Params Start AND if() #102 Body Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
STORE D2 0.0001
GOTO 3048; if() #102 Body End
SETR D2 GD1; InlineFunc[int Ceiling(int)] Params Start AND if() #102 Else Start
LSHIFTV D2 0
DIVV D2 8; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
MULTV D2 8
STORE D2 0.0001; if() #102 Else End
LOAD D2 0.0001; if() #101 Else End AND if() #100 Else End AND if() #103 Test
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3074 ==; Test 'if'
SETR D2 GD18; if() #103 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
SETR GD18 D2
LOAD D2 0.0001
SETR GD1 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.2569; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
GOTO 3099; if() #103 Body End
LOAD D2 0; if() #269 Test AND if() #103 Else Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3099 ==; Test 'if'
SETR D2 GD19; if() #269 Body Start
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
SETR GD19 D2
LOAD D2 0
SETR GD2 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.2569; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4; if() #269 Body End
POPARGS D5 0.0007; if() #103 Else End AND if() #94 Else End AND if() #266 Body End
RETURNFUNC; Func[void Ghost_CheckHit(ffc, npc)] Body End
SETR D4 SP2; Func[void Ghost_ClearCombos()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
RETURNFUNC; Func[void Ghost_ClearCombos()] Body End
SETR D4 SP2; Func[void Ghost_SetFlag(int)] Body Start
LOAD D2 0; if() #161 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3127 ==; Test 'if'
SETR D2 GD16; if() #161 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ORR D2 D3
SETR GD16 D2
GOTO 3133; if() #161 Body End
SETR D2 GD15; if() #161 Else Start
PUSHR D2
LOAD D2 0
POP D3
ORR D2 D3
SETR GD15 D2; if() #161 Else End
POP D5
RETURNFUNC; Func[void Ghost_SetFlag(int)] Body End
SETR D4 SP2; Func[void Ghost_UnsetFlag(int)] Body Start
LOAD D2 0; if() #163 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3153 ==; Test 'if'
SETR D2 GD16; if() #163 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 -2
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
SETR GD16 D2
GOTO 3160; if() #163 Body End
SETR D2 GD15; if() #163 Else Start
PUSHR D2
LOAD D2 0
BITNOT D2
POP D3
ANDR D2 D3
SETR GD15 D2; if() #163 Else End
POP D5
RETURNFUNC; Func[void Ghost_UnsetFlag(int)] Body End
PUSHARGSV 0 0.0004; Func[void Ghost_MoveXY(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0005; if() #316 Test
COMPAREV D2 0
GOTOCMP 3180 >=
PUSHR D4
CALLFUNC 0.4394; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 3180 ==
PUSHR D4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3180 !=
SETV D2 1
GOTO 3181
SETV D2 0
COMPAREV D2 0
GOTOCMP 3185 ==; Test 'if'
SETV D2 0; if() #316 Body Start
STORE D2 0.0005; if() #316 Body End
LOAD D2 0.0006; while() #3 Test AND InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 8
GOTOCMP 3195 >
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 8
GOTOCMP 3195 >
SETV D2 0
GOTO 3196
SETV D2 1
COMPAREV D2 0
GOTOCMP 3262 ==; Test 'while'
LOAD D2 0.0006; InlineFunc[int Abs(int)] Params AND if() #144 Test AND while() #3 Body Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 3235 ==; Test 'if'
LOAD D2 0.0006; if() #145 Test AND if() #144 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3224 ==; Test 'if'
PUSHR D4; if() #145 Body Start
PUSHV 8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3162; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006
SUBV D2 8
STORE D2 0.0006
GOTO 3185; if() #145 Body End
PUSHR D4; if() #145 Else Start
PUSHV -8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3162; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006
ADDV D2 8
STORE D2 0.0006; if() #145 Else End
GOTO 3185; if() #144 Body End
LOAD D2 0.0005; if() #146 Test AND if() #144 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3251 ==; Test 'if'
PUSHR D4; if() #146 Body Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 8
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3162; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0005
SUBV D2 8
STORE D2 0.0005
GOTO 3185; if() #146 Body End
PUSHR D4; if() #146 Else Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV -8
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3162; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0005
ADDV D2 8
STORE D2 0.0005; if() #146 Else End
GOTO 3185; if() #144 Else End AND while() #3 Body End AND while() #3 End
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0006; if() #147 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3337 ==; Test 'if'
SETR D2 GD22; if() #147 Body Start
RSHIFTV D2 8
STORE D2 0.0002
SETR D2 GD1
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #148 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3307 ==; Test 'if'
LOAD D2 0.0003; if() #148 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 3329; if() #148 Body End
PUSHR D4; if() #149 Test AND if() #148 Else Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0006
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0393; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3325 ==; Test 'if'
LOAD D2 0.0003; if() #149 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 3329; if() #149 Body End
LOAD D2 0.0003; if() #149 Else Start
RSHIFTV D2 3
LSHIFTV D2 3
STORE D2 0.0003; if() #149 Else End
LOAD D2 0.0003; if() #148 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
GOTO 3420; if() #147 Body End
LOAD D2 0.0006; if() #317 Test AND if() #147 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3420 ==; Test 'if'
SETR D2 GD12; if() #317 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
STORE D2 0.0002
SETR D2 GD1
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #150 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3390 ==; Test 'if'
LOAD D2 0.0003; if() #150 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 3413; if() #150 Body End
PUSHR D4; if() #151 Test AND if() #150 Else Start
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0393; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3407 ==; Test 'if'
LOAD D2 0.0003; if() #151 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 3413; if() #151 Body End
LOAD D2 0.0003; if() #151 Else Start
ADDV D2 7
RSHIFTV D2 3
LSHIFTV D2 3
SUBV D2 1
STORE D2 0.0003; if() #151 Else End
LOAD D2 0.0003; if() #150 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2; if() #317 Body End
LOAD D2 0.0005; if() #147 Else End AND if() #152 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3491 ==; Test 'if'
SETR D2 GD23; if() #152 Body Start
RSHIFTV D2 8
STORE D2 0.0002
SETR D2 GD2
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #153 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3461 ==; Test 'if'
LOAD D2 0.0003; if() #153 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 3483; if() #153 Body End
PUSHR D4; if() #154 Test AND if() #153 Else Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0005
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0393; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3479 ==; Test 'if'
LOAD D2 0.0003; if() #154 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 3483; if() #154 Body End
LOAD D2 0.0003; if() #154 Else Start
RSHIFTV D2 3
LSHIFTV D2 3
STORE D2 0.0003; if() #154 Else End
LOAD D2 0.0003; if() #153 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
GOTO 3574; if() #152 Body End
LOAD D2 0.0005; if() #318 Test AND if() #152 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3574 ==; Test 'if'
SETR D2 GD13; if() #318 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
STORE D2 0.0002
SETR D2 GD2
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #155 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3544 ==; Test 'if'
LOAD D2 0.0003; if() #155 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 3567; if() #155 Body End
PUSHR D4; if() #156 Test AND if() #155 Else Start
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0393; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3561 ==; Test 'if'
LOAD D2 0.0003; if() #156 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 3567; if() #156 Body End
LOAD D2 0.0003; if() #156 Else Start
ADDV D2 7
RSHIFTV D2 3
LSHIFTV D2 3
SUBV D2 1
STORE D2 0.0003; if() #156 Else End
LOAD D2 0.0003; if() #155 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2; if() #318 Body End
PUSHR D4; if() #152 Else End AND if() #319 Test
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3586 ==
SETR D2 GD17
ANDV D2 4
COMPAREV D2 0
GOTOCMP 3586 !=
SETV D2 1
GOTO 3587
SETV D2 0
COMPAREV D2 0
GOTOCMP 3644 ==; Test 'if'
PUSHR D4; if() #157 Test AND if() #319 Body Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3609 ==; Test 'if'
PUSHR D4; if() #157 Body Start
LOAD D2 0.0006; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2
LOAD D2 0.0005
SETR D1 D2; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS D2; InlineFunc[int WrapAngle(int)] Body
MULTV D2 57.2958
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0103; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 3640; if() #157 Body End
LOAD D2 0.0006; InlineFunc[int Abs(int)] Params AND if() #158 Test AND if() #157 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3630 ==; Test 'if'
LOAD D2 0.0005; if() #159 Test AND if() #158 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3627 ==; Test 'if'
SETV D2 0; if() #159 Body Start
SETR GD4 D2
GOTO 3640; if() #159 Body End
SETV D2 1; if() #159 Else Start
SETR GD4 D2; if() #159 Else End
GOTO 3640; if() #158 Body End
LOAD D2 0.0006; if() #160 Test AND if() #158 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3638 ==; Test 'if'
SETV D2 2; if() #160 Body Start
SETR GD4 D2
GOTO 3640; if() #160 Body End
SETV D2 3; if() #160 Else Start
SETR GD4 D2; if() #160 Else End
SETR D2 GD1; if() #158 Else End AND if() #157 Else End
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2; if() #319 Body End
POPARGS D5 0.0007
RETURNFUNC; Func[void Ghost_MoveXY(int, int, int)] Body End
PUSHV 0; Func[void __GhCleanUp(ffc)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR X D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTWIDTH D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTHEIGHT D2
SETV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFCWIDTH D2
SETV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFCHEIGHT D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DELAY D2
STOREV 0 0; for() #170 setup
LOAD D2 0; for() #170 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3778 ==; for() #170 TestFail?
SETV D2 0; for() #170 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; for() #170 Body End
LOAD D2 0; for() #170 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 3757; for() #170 End
POPARGS D5 0.0002
RETURNFUNC; Func[void __GhCleanUp(ffc)] Body End
SETR D4 SP2; Func[void Ghost_ForceDir(int)] Body Start
LOAD D2 0
SETR GD4 D2
SETR D2 GD17
ORV D2 4
SETR GD17 D2
POP D5
RETURNFUNC; Func[void Ghost_ForceDir(int)] Body End
PUSHARGSV 0 0.0002; Func[void Ghost_Move(int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0004; if() #136 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3801 ==; Test 'if'
LOAD D2 0.0003; if() #136 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 3879; if() #136 Body End
LOAD D2 0.0004; if() #137 Test AND if() #136 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3809 ==; Test 'if'
LOAD D2 0.0003; if() #137 Body Start
STORE D2 0
GOTO 3879; if() #137 Body End
LOAD D2 0.0004; if() #138 Test AND if() #137 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3818 ==; Test 'if'
LOAD D2 0.0003; if() #138 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 3879; if() #138 Body End
LOAD D2 0.0004; if() #139 Test AND if() #138 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3826 ==; Test 'if'
LOAD D2 0.0003; if() #139 Body Start
STORE D2 0.0001
GOTO 3879; if() #139 Body End
LOAD D2 0.0004; if() #140 Test AND if() #139 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3840 ==; Test 'if'
LOAD D2 0.0003; if() #140 Body Start
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0
GOTO 3879; if() #140 Body End
LOAD D2 0.0004; if() #141 Test AND if() #140 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3853 ==; Test 'if'
LOAD D2 0.0003; if() #141 Body Start
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0
GOTO 3879; if() #141 Body End
LOAD D2 0.0004; if() #142 Test AND if() #141 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3866 ==; Test 'if'
LOAD D2 0.0003; if() #142 Body Start
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
MULTV D2 0.7071
STORE D2 0
GOTO 3879; if() #142 Body End
LOAD D2 0.0004; if() #143 Test AND if() #142 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3888 ==; Test 'if'
LOAD D2 0.0003; if() #143 Body Start
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
MULTV D2 0.7071
STORE D2 0
GOTO 3879; if() #143 Body End
GOTO 3888; return (Void) AND if() #143 Else
PUSHR D4; if() #142 Else End AND if() #141 Else End AND if() #140 Else End AND if() #139 Else End AND if() #138 Else End AND if() #137 Else End AND if() #136 Else End
LOAD D2 0.0001; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3162; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
POPARGS D5 0.0005
RETURNFUNC; Func[void Ghost_Move(int, int, int)] Body End
SETR D4 SP2; Func[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Body Start
LOAD D2 0.0001; if() #634 Test
COMPAREV D2 -1
GOTOCMP 3899 ==
LOAD D2 0.0001
COMPAREV D2 -2
GOTOCMP 3899 ==
SETV D2 0
GOTO 3900
SETV D2 1
COMPAREV D2 0
GOTOCMP 3904 ==; Test 'if'
SETV D2 1; if() #634 Body Start
STORE D2 0.0001; if() #634 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0001
SETR GD10 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2
LOAD D2 0
SETR GD11 D2
LOAD D2 0.0002; if() #380 Test
COMPAREV D2 0
GOTOCMP 3950 ==; Test 'if'
LOAD D2 0.0003; if() #380 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCX
SETR GD1 D2
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCY
SETR GD2 D2
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCZ
SETR GD3 D2
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCJUMP
SETR GD5 D2
GOTO 3982; if() #380 Body End
LOAD D2 0.0004; if() #380 Else Start
PUSHR D2
POP REFFFC
SETR D2 X
SETR GD1 D2
LOAD D2 0.0004
PUSHR D2
POP REFFFC
SETR D2 Y
SETR GD2 D2
SETV D2 0
SETR GD3 D2
SETV D2 0
SETR GD5 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCZ D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCJUMP D2; if() #380 Else End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.2569; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCDIR
SETR GD4 D2
SETV D2 0
SETR GD6 D2
SETV D2 0
SETR GD7 D2
SETV D2 0
SETR GD8 D2
SETV D2 0
SETR GD9 D2
SETR D2 GD1
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2
LOAD D2 0.0004
PUSHR D2
POP REFFFC
SETR D2 FFTWIDTH
SETR GD12 D2
LOAD D2 0.0004
PUSHR D2
POP REFFFC
SETR D2 FFTHEIGHT
SETR GD13 D2
SETV D2 0
SETR GD22 D2
SETV D2 0
SETR GD23 D2
LOAD D2 0.0001; if() #635 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4100 ==; Test 'if'
SETV D2 3; if(true) #381 [Opt:AlwaysOn] AND if() #635 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCEXTEND D2
SETV D2 65456
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCOTILE D2
SETV D2 65456; if(true) #636 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTILE D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTXSZ D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTYSZ D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHXSZ D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHYSZ D2; if() #635 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2
LOAD D2 0.0003; if() #382 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4131 ==; Test 'if'
SETV D2 1; if() #382 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
GOTO 4143; if() #382 Body End
SETV D2 0; if() #382 Else Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #382 Else End
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
SETV D2 0
SETR GD15 D2
SETV D2 0
SETR GD16 D2
SETV D2 0
SETR GD20 D2
SETV D2 0
SETR GD21 D2
SETV D2 0
SETR GD17 D2
SETV D2 0
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 65536
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Body End
PUSHARGSV 0 0.0008; Func[npc Ghost_InitAutoGhost(ffc, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
SETR D2 NPCCOUNT; for() #55 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #55 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4279 ==; for() #55 TestFail?
LOAD D2 0.0005; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #55 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0007
LOAD D2 0.0007; if() #134 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4209 ==; Test 'if'
SETV D2 0; if() #134 Body Start
STORE D2 0.0006
GOTO 4275; continue 1;
GOTO 4211; if() #134 Body End
SETV D2 1; if() #134 Else Start
STORE D2 0.0006; if() #134 Else End
LOAD D2 0.0007; if() #308 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4226 ==; Test 'if'
SETV D2 0; if() #308 Body Start
STORE D2 0.0006
GOTO 4275; continue 1; AND if() #308 Body End
LOAD D2 0.0006; if() #135 Test
COMPAREV D2 0
GOTOCMP 4279 ==; Test 'if'
PUSHR D4; if() #135 Body Start
LOAD D2 0.0009; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
PUSHV 1
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65535
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFNPC
PUSHR NPCCSET; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Params End
CALLFUNC 0.3890; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Call
POP D4
LOAD D2 0.0007; if() #309 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4271 ==; Test 'if'
SETV D2 1; if() #309 Body Start
PUSHR D2
LOAD D2 0.0009
POP D3
PUSHR D2
PUSHR D3
SETV D2 1
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #309 Body End
LOAD D2 0.0007; return Start
GOTO 4324; return End
GOTO 4275; if() #135 Body End
GOTO 4279; break 1; AND if() #135 Else
LOAD D2 0.0005; for() #55 Body End AND for() #55 LoopIncrement
SUBV D2 1
STORE D2 0.0005
GOTO 4184; for() #55 End
ALLOCATEMEMV D2 60 0
WRITEPODSTRING D2 "ghost.zh: AutoGhost initialization failed - enemy missing.\n"
STORE D2 0.0004
ALLOCATEMEMV D2 30 0
WRITEPODSTRING D2 "  DMap %d, screen %X\n"
STORE D2 0.0002
ALLOCATEMEMV D2 30 0
WRITEPODSTRING D2 "  Script %d, enemy ID %d\n"
STORE D2 0
LOAD D2 0.0004; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGR CURDMAP
PUSHVARGR CURDSCR; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP REFFFC
PUSHVARGR FFSCRIPT
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0009
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
QUIT; InlineFunc[void Quit()] Body
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0004
DEALLOCATEMEMR D3
POPARGS D5 0.0010
RETURNFUNC; Func[npc Ghost_InitAutoGhost(ffc, int)] Body End
SETR D4 SP2; Func[int VectorX(int, int)] Body Start
LOAD D2 0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR D4 SP2; Func[int VectorY(int, int)] Body Start
LOAD D2 0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
PUSHV 0; Func[void Ghost_MoveTowardLink(int, int)] Body Start
SETR D4 SP2
PUSHR D4
SETR D2 GD1; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
SETR D2 GD12
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD2
PUSHR D2
SETR D2 GD13
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 LINKX
ADDV D2 8
PUSHR D2
SETR D2 LINKY
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0084; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
LOAD D2 0.0002; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.4326; UsrFunc[int VectorX(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.4336; UsrFunc[int VectorY(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3162; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
POPARGS D5 0.0003
RETURNFUNC; Func[void Ghost_MoveTowardLink(int, int)] Body End
SETR D4 SP2; Func[bool IsSideview()] Body Start
SETV D2 0; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
PUSHR D2
SETR D2 CURDMAP; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATASIDEVIEW
POP D3
COMPARER D3 D2
SETCMP D2 BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
PUSHV 0; Func[bool Ghost_Waitframe(ffc, npc, bool, bool)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCJUMP D2
PUSHR D4; unless() #346 Test
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4568 !=; Test 'unless'
PUSHR D4; if() #164 Test AND unless() #346 Body Start
CALLFUNC 0.4394; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 4531 ==; Test 'if'
SETR D2 GD5; if() #347 Test AND if() #164 Body Start
COMPAREV D2 0
GOTOCMP 4445 !=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0393; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4445 !=
SETV D2 0
GOTO 4446
SETV D2 1
COMPAREV D2 0
GOTOCMP 4568 ==; Test 'if'
PUSHR D4; if() #347 Body Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0
PUSHR D4
PUSHV 64; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3135; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
SETR D2 GD5; if() #165 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4500 ==; Test 'if'
PUSHR D4; if() #165 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3109; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR GD5
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.3788; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2
SETR D2 GD5; if() #348 Test
COMPAREV D2 0
GOTOCMP 4490 <=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0393; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4490 !=
SETV D2 1
GOTO 4491
SETV D2 0
COMPAREV D2 0
GOTOCMP 4495 ==; Test 'if'
SETV D2 0; if() #348 Body Start
SETR GD5 D2; if() #348 Body End
PUSHR D4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3135; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
GOTO 4523; if() #165 Body End
PUSHR D4; if() #165 Else Start
PUSHV 1; UsrFunc[void Ghost_Move(int, int, int)] Params Start
SETR D2 GD5
SUBV2 0 D2
PUSHR D2
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.3788; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0393; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4521 ==; Test 'if'
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start AND if() #166 Body Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2
GOTO 4523; if() #166 Body End
SETV D2 0; if() #166 Else Start
SETR GD5 D2; if() #166 Else End
LOAD D2 0; if() #165 Else End AND if() #349 Test
COMPAREV D2 0
GOTOCMP 4568 ==; Test 'if'
PUSHR D4; if() #349 Body Start
PUSHV 64; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3109; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #349 Body End
GOTO 4568; if() #347 Body End AND if() #164 Body End
SETR D2 GD5; if() #350 Test AND if() #164 Else Start
COMPAREV D2 0
GOTOCMP 4539 !=
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 4539 >
SETV D2 0
GOTO 4540
SETV D2 1
COMPAREV D2 0
GOTOCMP 4568 ==; Test 'if'
SETR D2 GD3; if() #167 Test AND if() #350 Body Start
PUSHR D2
SETR D2 GD5
POP D3
ADDR D2 D3
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4556 ==; Test 'if'
SETV D2 0; if() #167 Body Start
SETR GD3 D2
SETV D2 0
SETR GD5 D2
GOTO 4568; if() #167 Body End
SETR D2 GD3; if() #167 Else Start
PUSHR D2
SETR D2 GD5
POP D3
ADDR D2 D3
SETR GD3 D2
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2; if() #167 Else End
SETR D2 GD6; if() #350 Body End AND if() #164 Else End AND unless() #346 Body End AND if() #351 Test
COMPAREV D2 0
GOTOCMP 4582 !=
SETR D2 GD7
COMPAREV D2 0
GOTOCMP 4582 !=
SETR D2 GD8
COMPAREV D2 0
GOTOCMP 4582 !=
SETR D2 GD9
COMPAREV D2 0
GOTOCMP 4582 !=
SETV D2 0
GOTO 4583
SETV D2 1
COMPAREV D2 0
GOTOCMP 4606 ==; Test 'if'
SETR D2 GD6; if() #351 Body Start
PUSHR D2
SETR D2 GD8
POP D3
ADDR D2 D3
SETR GD6 D2
SETR D2 GD7
PUSHR D2
SETR D2 GD9
POP D3
ADDR D2 D3
SETR GD7 D2
PUSHR D4
PUSHR GD6; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR GD7
PUSHV 2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3162; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[void Ghost_ForceDir(int)] Params
CALLFUNC 0.3780; UsrFunc[void Ghost_ForceDir(int)] Call
POP D4; if() #351 Body End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.2569; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 0; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Params End
CALLFUNC 0.4648; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 0.1919; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 0.2169; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
SETR D2 GD17
ANDV D2 32
SETR GD17 D2
PUSHR D4; return Start
LOAD D2 0.0004; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Params End
CALLFUNC 0.5152; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Call
POP D4
POPARGS D5 0.0005; return End
RETURNFUNC; Func[bool Ghost_Waitframe(ffc, npc, bool, bool)] Body End
PUSHARGSV 0 0.0002; Func[void __Ghost_WaitframePart1(ffc, npc, bool)] Body Start
SETR D4 SP2
SETR D2 GD17; if() #404 Test
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4666 ==; Test 'if'
SETR D2 GD4; if() #404 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCDIR D2
GOTO 4763; if() #404 Body End
LOAD D2 0.0002; if() #405 Test AND if() #404 Else Start
COMPAREV D2 0
GOTOCMP 4675 ==; Test 'if'
LOAD D2 0.0003; if() #405 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCDIR
SETR GD4 D2
GOTO 4763; if() #405 Body End
PUSHR D4; if() #671 Test AND if() #405 Else Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4695 ==
SETR D2 GD18
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
GOTOCMP 4693 !=
SETR D2 GD19
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
GOTOCMP 4695 ==
SETV D2 1
GOTO 4696
SETV D2 0
COMPAREV D2 0
GOTOCMP 4763 ==; Test 'if'
SETR D2 GD1; if() #671 Body Start
PUSHR D2
SETR D2 GD18
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
SETR D2 GD2
PUSHR D2
SETR D2 GD19
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHR D4; if() #406 Test
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4732 ==; Test 'if'
PUSHR D4; if() #406 Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS D2; InlineFunc[int WrapAngle(int)] Body
MULTV D2 57.2958
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0103; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 4763; if() #406 Body End
LOAD D2 0.0001; InlineFunc[int Abs(int)] Params AND if() #407 Test AND if() #406 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4753 ==; Test 'if'
LOAD D2 0.0001; if() #408 Test AND if() #407 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4750 ==; Test 'if'
SETV D2 2; if() #408 Body Start
SETR GD4 D2
GOTO 4763; if() #408 Body End
SETV D2 3; if() #408 Else Start
SETR GD4 D2; if() #408 Else End
GOTO 4763; if() #407 Body End
LOAD D2 0; if() #409 Test AND if() #407 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4761 ==; Test 'if'
SETV D2 0; if() #409 Body Start
SETR GD4 D2
GOTO 4763; if() #409 Body End
SETV D2 1; if() #409 Else Start
SETR GD4 D2; if() #409 Else End
SETR D2 GD4; if() #407 Else End AND if() #406 Else End AND if() #671 Body End AND if() #405 Else End AND if() #404 Else End
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCDIR D2
SETR D2 GD1
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2
SETR D2 GD10; if() #410 Test
COMPAREV D2 0
GOTOCMP 4784 ==
SETR D2 GD10
COMPAREV D2 1
GOTOCMP 4784 ==
SETV D2 0
GOTO 4785
SETV D2 1
COMPAREV D2 0
GOTOCMP 4808 ==; Test 'if'
LOAD D2 0.0004; if() #672 Test AND if() #410 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4904 ==; Test 'if'
SETR D2 GD10; if() #672 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #672 Body End
GOTO 4904; if() #410 Body End
PUSHR D4; if() #411 Test AND if() #410 Else Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4846 ==; Test 'if'
LOAD D2 0.0004; if() #673 Test AND if() #411 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4904 ==; Test 'if'
SETR D2 GD10; if() #673 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0469; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #673 Body End
GOTO 4904; if() #411 Body End
PUSHR D4; if() #412 Test AND if() #411 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4884 ==; Test 'if'
LOAD D2 0.0004; if() #674 Test AND if() #412 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4904 ==; Test 'if'
SETR D2 GD10; if() #674 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0469; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #674 Body End
GOTO 4904; if() #412 Body End
LOAD D2 0.0004; if() #675 Test AND if() #412 Else Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4904 ==; Test 'if'
SETR D2 GD10; if() #675 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #675 Body End
LOAD D2 0.0004; if() #412 Else End AND if() #411 Else End AND if() #410 Else End AND if() #676 Test
PUSHR D2
POP REFFFC
SETR D2 FFTWIDTH
PUSHR D2
SETR D2 GD12
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4924 ==; Test 'if'
SETR D2 GD12; if() #676 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTWIDTH D2; if() #676 Body End
LOAD D2 0.0003; if() #677 Test
PUSHR D2
POP REFNPC
SETR D2 NPCTXSZ
PUSHR D2
SETR D2 GD12
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4968 ==; Test 'if'
SETR D2 GD12; if() #677 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTXSZ D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHXSZ D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHXOFS D2; if() #677 Body End
LOAD D2 0.0004; if() #678 Test
PUSHR D2
POP REFFFC
SETR D2 FFTHEIGHT
PUSHR D2
SETR D2 GD13
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4988 ==; Test 'if'
SETR D2 GD13; if() #678 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTHEIGHT D2; if() #678 Body End
LOAD D2 0.0003; if() #679 Test
PUSHR D2
POP REFNPC
SETR D2 NPCTYSZ
PUSHR D2
SETR D2 GD13
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5032 ==; Test 'if'
SETR D2 GD13; if() #679 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTYSZ D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHYSZ D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHYOFS D2; if() #679 Body End
PUSHR D4; if() #680 Test
PUSHV 128; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1544; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5097 ==; Test 'if'
SETR D2 GD3; if() #413 Test AND if() #680 Body Start
COMPAREV D2 32
GOTOCMP 5052 <
LOAD D2 0.0004
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 5052 !=
SETV D2 1
GOTO 5053
SETV D2 0
COMPAREV D2 0
GOTOCMP 5068 ==; Test 'if'
SETV D2 1; if() #413 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
GOTO 5097; if() #413 Body End
SETR D2 GD3; if() #681 Test AND if() #413 Else Start
COMPAREV D2 32
GOTOCMP 5082 >=
LOAD D2 0.0004
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 5082 ==
SETV D2 1
GOTO 5083
SETV D2 0
COMPAREV D2 0
GOTOCMP 5097 ==; Test 'if'
SETV D2 0; if() #681 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #681 Body End
SETR D2 GD14; if() #413 Else End AND if() #680 Body End
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETR D2 GD11
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCCSET D2
SETR D2 GD17; if() #414 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5131 ==; Test 'if'
SETR D2 GD11; if() #414 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2
GOTO 5145; if() #414 Body End
SETR D2 GD20; if() #682 Test AND if() #414 Else Start
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5145 ==; Test 'if'
SETR D2 GD11; if() #682 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2; if() #682 Body End
PUSHR D4; if() #414 Else End
LOAD D2 0.0003; UsrFunc[void __Ghost_DrawShadow(npc)] Params Start
PUSHR D2; UsrFunc[void __Ghost_DrawShadow(npc)] Params End
CALLFUNC 0.2004; UsrFunc[void __Ghost_DrawShadow(npc)] Call
POP D4
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_WaitframePart1(ffc, npc, bool)] Body End
PUSHV 0; Func[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[bool npc::isValid()] Params AND unless() #683 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 5179 !=; Test 'unless'
LOAD D2 0.0002; if() #684 Test AND unless() #683 Body Start
COMPAREV D2 0
GOTOCMP 5171 ==; Test 'if'
PUSHR D4; if() #684 Body Start
LOAD D2 0.0004; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 0.3646; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2
PUSHR D4
CALLFUNC 0.3101; UsrFunc[void Ghost_ClearCombos()] Call
POP D4; if() #684 Body End
LOAD D2 0.0001; if() #685 Test
COMPAREV D2 0
GOTOCMP 5175 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #685 Body
SETV D2 0
SETR GD14 D2
SETV D2 0; return Start
GOTO 5303; return End AND unless() #683 Body End
STOREV 0 0
LOAD D2 0.0003; if() #686 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5190 ==; Test 'if'
SETV D2 1; if() #686 Body Start
STORE D2 0; if() #686 Body End
LOAD D2 0; unless() #687 Test
COMPAREV D2 0
GOTOCMP 5209 !=; Test 'unless'
PUSHR D4; unless() #687 Body Start
LOAD D2 0.0004; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params End
CALLFUNC 0.2703; UsrFunc[void Ghost_CheckHit(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Params End
CALLFUNC 0.1660; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Call
POP D4
COMPAREV D2 0
SETCMP D2 I==
STORE D2 0; unless() #687 Body End
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
LOAD D2 0; if() #688 Test
COMPAREV D2 0
GOTOCMP 5302 ==; Test 'if'
LOAD D2 0.0002; if() #689 Test AND if() #688 Body Start
COMPAREV D2 0
GOTOCMP 5296 ==; Test 'if'
SETV D2 1; if() #689 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTXSZ D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCTYSZ D2
SETR D2 GD1
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCZ D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 0.3646; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2; if() #689 Body End
LOAD D2 0.0001; if() #690 Test
COMPAREV D2 0
GOTOCMP 5300 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #690 Body
SETV D2 0; return Start
GOTO 5303; return End AND if() #688 Body End
SETV D2 1; return Start
POPARGS D5 0.0005; return End
RETURNFUNC; Func[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Body End
PUSHARGSV 0 0.0006; Func[void __SetUpDrawingArray(ffc, npc, int[])] Body Start
SETR D4 SP2
STOREV 0 0.0005
LOAD D2 0.0008; if() #710 Test
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 5320 ==; Test 'if'
LOAD D2 0.0005; if() #710 Body Start
ORV D2 4
STORE D2 0.0005; if() #710 Body End
LOAD D2 0.0008; if() #711 Test
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 5332 ==; Test 'if'
LOAD D2 0.0005; if() #711 Body Start
ORV D2 1
STORE D2 0.0005; if() #711 Body End
PUSHR D4; if() #712 Test
LOAD D2 0.0007; UsrFunc[bool __Ghost_IsFlickering(npc)] Params Start
PUSHR D2; UsrFunc[bool __Ghost_IsFlickering(npc)] Params End
CALLFUNC 0.5645; UsrFunc[bool __Ghost_IsFlickering(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5342 ==; Test 'if'
LOAD D2 0.0005; if() #712 Body Start
ORV D2 2
STORE D2 0.0005; if() #712 Body End
LOAD D2 0.0008
PUSHR D2
POP REFFFC
SETR D2 CSET
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
STOREV 3 0.0004
SETR D2 GD1
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFNPC
SETR D2 NPCXOFS
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFNPC
SETR D2 NPCYOFS
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFNPC
SETR D2 NPCZOFS
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0002
SETR D2 GD25; if() #713 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5510 ==; Test 'if'
STOREV 1 0.0001; if() #713 Body Start
STOREV 0 0; for() #182 setup
LOAD D2 0; for() #182 LoopTest
PUSHR D2
SETR D2 GD25
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5510 ==; for() #182 TestFail?
SETR D2 GD25; for() #182 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 1
POP D0
READPODARRAYR D2 D2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 2
POP D0
READPODARRAYR D2 D2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 4
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 6
STORE D2 0.0004
LOAD D2 0.0001
ADDV D2 6
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; for() #182 Body End
LOAD D2 0; for() #182 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 5398; for() #182 End
LOAD D2 0.0008; if() #713 Body End AND if(true) #714 [Opt:AlwaysOn]
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0008
PUSHR D2
POP REFFFC
SETR D2 FFTWIDTH
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0008
PUSHR D2
POP REFFFC
SETR D2 FFTHEIGHT
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 4
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
POPARGS D5 0.0009
RETURNFUNC; Func[void __SetUpDrawingArray(ffc, npc, int[])] Body End
PUSHV 0; Func[void __HideFFCAndWait(ffc)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
WAITFRAME; InlineFunc[void Waitframe()] Body
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __HideFFCAndWait(ffc)] Body End
PUSHV 0; Func[bool IsPit(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #368 Test
COMPAREV D2 41
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5622 ==; Test 'if'
SETV D2 1; return Start AND if() #368 Body Start
GOTO 5643; return End AND if() #368 Body End
LOAD D2 0; if() #369 Test
COMPAREV D2 93
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5629 ==; Test 'if'
SETV D2 1; return Start AND if() #369 Body Start
GOTO 5643; return End AND if() #369 Body End
LOAD D2 0; if() #370 Test
COMPAREV D2 80
GOTOCMP 5637 <
LOAD D2 0
COMPAREV D2 82
GOTOCMP 5637 >
SETV D2 1
GOTO 5638
SETV D2 0
COMPAREV D2 0
GOTOCMP 5642 ==; Test 'if'
SETV D2 1; return Start AND if() #370 Body Start
GOTO 5643; return End AND if() #370 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool IsPit(int)] Body End
SETR D4 SP2; Func[bool __Ghost_IsFlickering(npc)] Body Start
LOAD D2 0; if() #638 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5657 ==; Test 'if'
SETV D2 1; return Start AND if() #638 Body Start
GOTO 5658; return End AND if() #638 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[bool __Ghost_IsFlickering(npc)] Body End
PUSHARGSV 0 0.0004; Func[void SpawnAnimation(ffc, npc)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 DATA
STORE D2 0.0003
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCCOLLDET
STORE D2 0.0002
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCXOFS
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0005; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.2569; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
STOREV 0 0; for() #226 setup
LOAD D2 0; for() #226 LoopTest
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5805 ==; for() #226 TestFail?
SETV D2 0; for() #226 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
SETV D2 32768
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.2569; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 0.2169; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 0.2569; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 0.2169; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
LOAD D2 0; if() #842 Test
COMPAREV D2 29
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5801 ==; Test 'if'
SETR D2 UNDERCOMBO; if() #842 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR D2
POP REFFFC
PUSHR X
LOAD D2 0.0005
PUSHR D2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0231; UsrFunc[int ComboAt(int, int)] Call
POP D4
PUSHR D2
POP D0
POP D2
SETR COMBODD D2
SETR D2 UNDERCSET
PUSHR D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR D2
POP REFFFC
PUSHR X
LOAD D2 0.0005
PUSHR D2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0231; UsrFunc[int ComboAt(int, int)] Call
POP D4
PUSHR D2
POP D0
POP D2
SETR COMBOCD D2; if() #842 Body End
LOAD D2 0; for() #226 Body End AND for() #226 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 5695; for() #226 End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2
POPARGS D5 0.0006
RETURNFUNC; Func[void SpawnAnimation(ffc, npc)] Body End


PUSHV 0; void run() Body Start
SETR D4 SP2
PUSHR D4
CALLFUNC 0.2380; UsrFunc[void StartGhostZH()] Call
POP D4
PUSHR D4; while(true) #8 Body [Opt:AlwaysOn] Start
CALLFUNC 0.8755; UsrFunc[void UpdateGhostZH1()] Call
POP D4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR D4
CALLFUNC 0.8817; UsrFunc[void UpdateGhostZH2()] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 6; while() #8 End AND [Opt:NeverRet] AND void run() Body End
SETR D4 SP2; Func[int RadianAngle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR D4 SP2; Func[int Randf(int)] Body Start
SETV D2 0; InlineFunc[long randgen::LRand(long)] Params Start AND return Start
PUSHR D2
LOAD D2 0; InlineFunc[long randgen::LRand(long)] Params End
POP REFRNG; InlineFunc[long randgen::LRand(long)] Body Start
RNGLRAND2 D2; InlineFunc[long randgen::LRand(long)] Body End
POP D5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void AutoGhost()] Body Start
SETR D4 SP2
SETR D2 GD26; if() #29 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
GOTOCMP 411 !=; Test 'if' AND return (Void) AND if() #29 Body
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
SETR D2 NPCCOUNT; for() #2 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #2 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 411 ==; for() #2 TestFail?
LOAD D2 0.0003; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #2 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
LOAD D2 0.0006; if() #30 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 407 !=; Test 'if' AND continue 1; AND if() #30 Body
LOAD D2 0.0006; if() #31 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 407 !=; Test 'if' AND continue 1; AND if() #31 Body
LOAD D2 0.0006; if() #32 Test AND if(false) #16 [Opt:AlwaysOff]
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 407 !=; Test 'if' AND continue 1; AND if() #32 Body
LOAD D2 0.0006; unless() #33 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 407 ==; Test 'unless' AND continue 1; AND unless() #33 Body
LOAD D2 0.0006; unless() #34 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 407 ==; Test 'unless' AND continue 1; AND unless() #34 Body
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0006; if(false) #17 [Opt:AlwaysOff]
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0002
LOAD D2 0.0002; if() #35 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 166 ==; Test 'if'
ALLOCATEMEMV D2 2 0; if() #35 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0006; UsrFunc[int __AutoGhostParseName(npc, int[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int __AutoGhostParseName(npc, int[])] Params End
CALLFUNC 0.0413; UsrFunc[int __AutoGhostParseName(npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0002
LOAD D3 0
DEALLOCATEMEMR D3; if() #35 Body End
LOAD D2 0.0002; if() #36 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 177 ==; Test 'if'
PUSHR D4; if() #36 Body Start
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0713; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 407; continue 1; AND if() #36 Body End
LOAD D2 0.0002; if() #37 Test
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 188 ==; Test 'if'
PUSHR D4; if() #37 Body Start
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0713; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 407; continue 1; AND if() #37 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR D2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.0764; UsrFunc[int FindUnusedFFC(int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0005; unless() #38 Test
COMPAREV D2 0
GOTOCMP 203 !=; Test 'unless'
PUSHR D4; unless() #38 Body Start
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0713; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 407; continue 1; AND unless() #38 Body End
LOAD D2 0.0005; InlineFunc[ffc screendata::LoadFFC(int)] Params
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0004
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCCSET
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTWIDTH D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTHEIGHT D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCX
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR X D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCY
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCZ
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
SETV D2 1; if(true) #39 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0001; if() #40 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
LOAD D2 0.0001; if() #41 Test AND if() #40 Body Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
SETV D2 3; if() #41 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCEXTEND D2
SETV D2 1024
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2; if() #41 Body End
LOAD D2 0.0001; if() #40 Body End AND if() #18 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 395 ==; Test 'if'
SETV D2 1; if() #18 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2
GOTO 407; if() #18 Body End
LOAD D2 0.0001; if() #18 Else Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2; if() #18 Else End
LOAD D2 0.0003; for() #2 Body End AND for() #2 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 73; for() #2 End
POPARGS D5 0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0 0.0009; Func[int __AutoGhostParseName(npc, int[])] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 64 0
STORE D2 0.0008
ALLOCATEMEMV D2 64 0
STORE D2 0.0007
SETV D2 1
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End
STOREV 0 0.0006; for() #151 setup
LOAD D2 0.0006; for() #151 LoopTest
COMPAREV D2 63
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 651 ==; for() #151 TestFail?
LOAD D2 0.0008; if() #584 Test AND for() #151 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 64
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 647 ==; Test 'if'
LOAD D2 0.0008; if() #584 Body Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0005
PUSHR D4; if() #352 Test
LOAD D2 0.0005; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8939; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 554 ==; Test 'if'
STOREV 0 0.0004; if() #352 Body Start
LOAD D2 0.0006; for() #152 setup
ADDV D2 1
STORE D2 0.0006
PUSHR D4; for() #152 LoopTest
LOAD D2 0.0008; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8939; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 496 ==; for() #152 TestFail?
LOAD D2 0.0008; for() #152 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #152 Body End
LOAD D2 0.0006; for() #152 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 464; for() #152 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006
LOAD D2 0.0009; if() #585 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 647 ==; Test 'if'
ALLOCATEMEMV D2 59 0; if() #585 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script does not exist.\n"
STORE D2 0.0002
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Script name: %s\n"
STORE D2 0
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 711; return End
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3; if() #585 Body End
GOTO 647; if() #352 Body End
LOAD D2 0.0005; if() #586 Test AND if() #352 Else Start
COMPAREV D2 48
GOTOCMP 560 <
LOAD D2 0.0005
COMPAREV D2 57
GOTOCMP 565 <=
LOAD D2 0.0005
COMPAREV D2 45
GOTOCMP 565 ==
SETV D2 0
GOTO 566
SETV D2 1
COMPAREV D2 0
GOTOCMP 647 ==; Test 'if'
STOREV 0 0.0004; if() #586 Body Start
LOAD D2 0.0005; if() #587 Test
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 585 ==; Test 'if'
SETV D2 45; if() #587 Body Start
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 1
STORE D2 0.0004
LOAD D2 0.0006
ADDV D2 1
STORE D2 0.0006; if() #587 Body End
LOAD D2 0.0006; for() #153 setup
ADDV D2 1
STORE D2 0.0006
LOAD D2 0.0008; for() #153 LoopTest
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 48
GOTOCMP 604 <
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 57
GOTOCMP 604 >
SETV D2 1
GOTO 605
SETV D2 0
COMPAREV D2 0
GOTOCMP 627 ==; for() #153 TestFail?
LOAD D2 0.0008; for() #153 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #153 Body End
LOAD D2 0.0006; for() #153 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 588; for() #153 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int atoi(char32[])] Params Start
SETR D3 D2; InlineFunc[int atoi(char32[])] Params End
ATOI D2 D3; InlineFunc[int atoi(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006; if() #586 Body End
LOAD D2 0.0006; if() #352 Else End AND if() #584 Body End AND for() #151 Body End AND for() #151 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 431; for() #151 End
LOAD D2 0.0009; if() #589 Test AND unless(false) #588 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 701 ==; Test 'if'
ALLOCATEMEMV D2 54 0; if() #589 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script not found.\n"
STORE D2 0.0005
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Enemy name: %s\n"
STORE D2 0.0003
ALLOCATEMEMV D2 55 0
WRITEPODSTRING D2 "  Script name should start after this character: %c\n"
STORE D2 0.0001
LOAD D2 0.0005; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGV 64; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 711; return End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3; if() #589 Body End
SETV D2 1; return Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 711; return End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0011
RETURNFUNC; Func[int __AutoGhostParseName(npc, int[])] Body End
SETR D4 SP2; Func[void __AutoGhostKill(npc)] Body Start
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
POP D5
RETURNFUNC; Func[void __AutoGhostKill(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
LOAD D2 0.0002; InlineFunc[int Max(int, int)] Params Start AND for() #43 setup
ADDV D2 1
PUSHVARGR D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0
LOAD D2 0; for() #43 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 819 ==; for() #43 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #43 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #175 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 795 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 795 ==
SETV D2 0
GOTO 796
SETV D2 1
COMPAREV D2 0
GOTOCMP 815 ==; Test 'if'
LOAD D2 0.0001; unless() #176 Test AND if() #175 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 815 !=; Test 'unless'
LOAD D2 0.0001; unless() #177 Test AND unless() #176 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 815 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #177 Body Start
GOTO 820; return End AND unless() #177 Body End
LOAD D2 0; unless() #176 Body End AND if() #175 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 773; for() #43 End
SETV D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR D4 SP2; Func[int CenterX(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(eweapon)] Body End
SETR D4 SP2; Func[int CenterY(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR D4 SP2
SETR D2 LINKHP; if() #86 Test
COMPAREV D2 0
GOTOCMP 876 >
GOTO 876
SETV D2 1
GOTO 877
SETV D2 0
COMPAREV D2 0
GOTOCMP 926 ==; Test 'if'
STOREV 0 0.0001; if() #86 Body Start
STOREV 1 0; for() #3 setup
LOAD D2 0; for() #3 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 926 ==; for() #3 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #3 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
SETR D2 GD24; if() #87 Test
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
RSHIFTV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
ANDV D2 15
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 922 ==; Test 'if'
SETV D2 0; if() #87 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #87 Body End
LOAD D2 0; for() #3 Body End AND for() #3 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 881; for() #3 End
POPARGS D5 0.0002; if() #86 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSV 0 0.0002; Func[void DrawEWeaponShadow(eweapon)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNXOFS
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
SUBV D2 1
MULTV D2 16
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNYOFS
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNZOFS
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHV 1; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #38 [Opt:AlwaysOn]
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
PUSHR D2
PUSHARGSV 1 0.0002
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(eweapon)] Body End
PUSHARGSV 0 0.0009; Func[void DrawGhostFFCs()] Body Start
SETR D4 SP2
SETV D2 1; if() #125 Test
PUSHR D2
POP D0
SETR D2 SCREENEFLAGSD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1010 ==; Test 'if'
PUSHR D4; unless() #126 Test AND if() #125 Body Start
CALLFUNC 0.1196; UsrFunc[bool __HaveAmulet()] Call
POP D4
COMPAREV D2 0
GOTOCMP 1194 ==; Test 'unless' AND return (Void) AND unless() #126 Body
STOREV 0 0.0008; if() #125 Body End
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
SETV D2 1; if() #40 Test AND if(true) #39 [Opt:AlwaysOn]
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1029 ==; Test 'if'
SETV D2 1; if() #40 Body Start
STORE D2 0.0003
GOTO 1031; if() #40 Body End
SETV D2 2; if() #40 Else Start
STORE D2 0.0003; if() #40 Else End
SETV D2 4
STORE D2 0.0002
STOREV 1 0.0001; for() #20 setup
LOAD D2 0.0001; for() #20 LoopTest
PUSHR D2
SETR D2 NPCCOUNT
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1194 ==; for() #20 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #20 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0006; UsrFunc[int[] __GetDrawingArray(npc)] Params Start
PUSHR D2; UsrFunc[int[] __GetDrawingArray(npc)] Params End
CALLFUNC 0.1215; UsrFunc[int[] __GetDrawingArray(npc)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008; unless() #127 Test
COMPAREV D2 0
GOTOCMP 1190 ==; Test 'unless' AND continue 1; AND unless() #127 Body
SETR D2 GD26; if() #128 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1074 ==; Test 'if'
LOAD D2 0.0008; if() #129 Test AND if() #128 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1190 !=; Test 'if' AND continue 1; AND if() #129 Body
LOAD D2 0.0008; if() #128 Body End AND if() #41 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1086 ==; Test 'if'
SETV D2 64; if() #41 Body Start
STORE D2 0.0005
GOTO 1088; if() #41 Body End
SETV D2 128; if() #41 Else Start
STORE D2 0.0005; if() #41 Else End
LOAD D2 0.0008; if() #42 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1100 ==; Test 'if'
LOAD D2 0.0002; if() #42 Body Start
STORE D2 0.0004
GOTO 1102; if() #42 Body End
LOAD D2 0.0003; if() #42 Else Start
STORE D2 0.0004; if() #42 Else End
SETV D2 3
STORE D2 0.0007
STOREV 0 0; for() #21 setup
LOAD D2 0; for() #21 LoopTest
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1190 ==; for() #21 TestFail?
LOAD D2 0.0008; if() #130 Test AND for() #21 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
GOTOCMP 1132 ==
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 1132 ==
SETV D2 1
GOTO 1133
SETV D2 0
COMPAREV D2 0
GOTOCMP 1183 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #130 Body Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
LOAD D2 0.0005
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #130 Body End
LOAD D2 0.0007
ADDV D2 6
STORE D2 0.0007; for() #21 Body End
LOAD D2 0; for() #21 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1105; for() #21 End
LOAD D2 0.0001; for() #20 Body End AND for() #20 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 1034; for() #20 End
POPARGS D5 0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR D4 SP2; Func[bool __HaveAmulet()] Body Start
SETV D2 50; if() #691 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1205 ==; Test 'if'
SETV D2 1; return Start AND if() #691 Body Start
GOTO 1214; return End AND if() #691 Body End
SETV D2 63; if() #692 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1213 ==; Test 'if'
SETV D2 1; return Start AND if() #692 Body Start
GOTO 1214; return End AND if() #692 Body End
SETV D2 0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int[] __GetDrawingArray(npc)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #602 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1231 ==; Test 'if'
SETV D2 0; return Start AND if() #602 Body Start
GOTO 1251; return End AND if() #602 Body End
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0; unless() #603 Test
COMPAREV D2 0
GOTOCMP 1245 !=; Test 'unless'
SETV D2 0; return Start AND unless() #603 Body Start
GOTO 1251; return End AND unless() #603 Body End
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 23
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int[] __GetDrawingArray(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC()] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 1 0; for() #42 setup
LOAD D2 0; for() #42 LoopTest
COMPAREV D2 33
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1303 ==; for() #42 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #42 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #172 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 1279 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 1279 ==
SETV D2 0
GOTO 1280
SETV D2 1
COMPAREV D2 0
GOTOCMP 1299 ==; Test 'if'
LOAD D2 0.0001; unless() #173 Test AND if() #172 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 1299 !=; Test 'unless'
LOAD D2 0.0001; unless() #174 Test AND unless() #173 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 1299 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #174 Body Start
GOTO 1304; return End AND unless() #174 Body End
LOAD D2 0; unless() #173 Body End AND if() #172 Body End AND for() #42 Body End AND for() #42 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1257; for() #42 End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #198 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1319 ==; Test 'if'
PUSHR D4; if() #198 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.1465; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #198 Body End
LOAD D2 0.0002; if() #199 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1330 ==; Test 'if'
PUSHR D4; if() #199 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.1625; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #199 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001; if() #54 Test
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1400 ==; Test 'if'
PUSHR D4; if() #54 Body Start
LOAD D2 0.0006; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1953; UsrFunc[int __UnblockableDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDIR D2
GOTO 1409; if() #54 Body End
LOAD D2 0.0006; if() #54 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDIR D2; if() #54 Else End
LOAD D2 0.0003; if() #200 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1420 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #200 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #200 Body End
LOAD D2 0.0001; if() #201 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1436 ==; Test 'if'
SETV D2 0; if() #201 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #201 Body End
LOAD D2 0.0001; if() #202 Test
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1447 ==; Test 'if'
PUSHR D4; if() #202 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #202 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #61 Test
COMPAREV D2 129
GOTOCMP 1475 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 1475 ==
SETV D2 0
GOTO 1476
SETV D2 1
COMPAREV D2 0
GOTOCMP 1480 ==; Test 'if'
SETV D2 17; return Start AND if() #61 Body Start
GOTO 1623; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1487 ==; Test 'if'
SETV D2 18; return Start AND if() #62 Body Start
GOTO 1623; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1494 ==; Test 'if'
SETV D2 19; return Start AND if() #63 Body Start
GOTO 1623; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1501 ==; Test 'if'
SETV D2 35; return Start AND if() #64 Body Start
GOTO 1623; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1508 ==; Test 'if'
SETV D2 81; return Start AND if() #65 Body Start
GOTO 1623; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1515 ==; Test 'if'
SETV D2 80; return Start AND if() #66 Body Start
GOTO 1623; return End AND if() #66 Body End
LOAD D2 0.0003; if() #67 Test AND if() #66 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1522 ==; Test 'if'
SETV D2 21; return Start AND if() #67 Body Start
GOTO 1623; return End AND if() #67 Body End
LOAD D2 0.0003; if() #68 Test AND if() #67 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1529 ==; Test 'if'
SETV D2 20; return Start AND if() #68 Body Start
GOTO 1623; return End AND if() #68 Body End
LOAD D2 0.0003; if() #69 Test AND if() #68 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1536 ==; Test 'if'
SETV D2 36; return Start AND if() #69 Body Start
GOTO 1623; return End AND if() #69 Body End
LOAD D2 0.0003; if() #70 Test AND if() #69 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1543 ==; Test 'if'
SETV D2 76; return Start AND if() #70 Body Start
GOTO 1623; return End AND if() #70 Body End
LOAD D2 0.0003; if() #71 Test AND if() #70 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1550 ==; Test 'if'
SETV D2 77; return Start AND if() #71 Body Start
GOTO 1623; return End AND if() #71 Body End
LOAD D2 0.0003; if() #72 Test AND if() #71 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1622 ==; Test 'if'
STOREV 0 0.0002; if() #72 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #48 setup
LOAD D2 0; for() #48 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1606 ==; for() #48 TestFail?
LOAD D2 0; unless() #211 Test AND for() #48 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1602 ==; Test 'unless' AND continue 1; AND unless() #211 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #212 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1602 !=; Test 'if' AND continue 1; AND if() #212 Body
LOAD D2 0.0001; if() #213 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1602 ==; Test 'if'
LOAD D2 0.0001; if() #213 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #214 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1606 !=; Test 'if' AND break 1; AND if() #214 Body
LOAD D2 0; if() #213 Body End AND for() #48 Body End AND for() #48 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1558; for() #48 End
LOAD D2 0.0002; if() #73 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1613 ==; Test 'if'
SETV D2 4; return Start AND if() #73 Body Start
GOTO 1623; return End AND if() #73 Body End
LOAD D2 0.0002; if() #74 Test AND if() #73 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1620 ==; Test 'if'
SETV D2 5; return Start AND if() #74 Body Start
GOTO 1623; return End AND if() #74 Body End
SETV D2 6; return Start AND if() #74 Else Start
GOTO 1623; return End AND if() #74 Else End AND if() #73 Else End AND if() #72 Body End
SETV D2 0; return Start AND if() #72 Else Start
POPARGS D5 0.0004; return End AND if() #72 Else End AND if() #71 Else End AND if() #70 Else End AND if() #69 Else End AND if() #68 Else End AND if() #67 Else End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #57 Test
COMPAREV D2 129
GOTOCMP 1634 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 1634 ==
SETV D2 0
GOTO 1635
SETV D2 1
COMPAREV D2 0
GOTOCMP 1639 ==; Test 'if'
SETV D2 40; return Start AND if() #57 Body Start
GOTO 1676; return End AND if() #57 Body End
LOAD D2 0; if() #58 Test AND if() #57 Else Start
COMPAREV D2 134
GOTOCMP 1647 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 1647 ==
SETV D2 0
GOTO 1648
SETV D2 1
COMPAREV D2 0
GOTOCMP 1652 ==; Test 'if'
SETV D2 32; return Start AND if() #58 Body Start
GOTO 1676; return End AND if() #58 Body End
LOAD D2 0; if() #59 Test AND if() #58 Else Start
COMPAREV D2 140
GOTOCMP 1663 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 1663 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 1663 ==
SETV D2 0
GOTO 1664
SETV D2 1
COMPAREV D2 0
GOTOCMP 1668 ==; Test 'if'
SETV D2 13; return Start AND if() #59 Body Start
GOTO 1676; return End AND if() #59 Body End
LOAD D2 0; if() #60 Test AND if() #59 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1675 ==; Test 'if'
SETV D2 51; return Start AND if() #60 Body Start
GOTO 1676; return End AND if() #60 Body End
SETV D2 0; return Start AND if() #60 Else Start
POP D5; return End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End AND if() #57 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #518 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1695 ==; Test 'if'
LOAD D2 0.0001; if() #518 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #518 Body End
LOAD D2 0.0001; if() #250 Test
COMPAREV D2 0.3927
GOTOCMP 1703 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 1703 >
SETV D2 0
GOTO 1704
SETV D2 1
COMPAREV D2 0
GOTOCMP 1709 ==; Test 'if'
SETV D2 3; if() #250 Body Start
STORE D2 0
GOTO 1759; if() #250 Body End
LOAD D2 0.0001; if() #251 Test AND if() #250 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1717 ==; Test 'if'
SETV D2 7; if() #251 Body Start
STORE D2 0
GOTO 1759; if() #251 Body End
LOAD D2 0.0001; if() #252 Test AND if() #251 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1725 ==; Test 'if'
SETV D2 1; if() #252 Body Start
STORE D2 0
GOTO 1759; if() #252 Body End
LOAD D2 0.0001; if() #253 Test AND if() #252 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1733 ==; Test 'if'
SETV D2 6; if() #253 Body Start
STORE D2 0
GOTO 1759; if() #253 Body End
LOAD D2 0.0001; if() #254 Test AND if() #253 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1741 ==; Test 'if'
SETV D2 2; if() #254 Body Start
STORE D2 0
GOTO 1759; if() #254 Body End
LOAD D2 0.0001; if() #255 Test AND if() #254 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1749 ==; Test 'if'
SETV D2 4; if() #255 Body Start
STORE D2 0
GOTO 1759; if() #255 Body End
LOAD D2 0.0001; if() #256 Test AND if() #255 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1757 ==; Test 'if'
SETV D2 0; if() #256 Body Start
STORE D2 0
GOTO 1759; if() #256 Body End
SETV D2 5; if() #256 Else Start
STORE D2 0; if() #256 Else End
LOAD D2 0.0002; if() #255 Else End AND if() #254 Else End AND if() #253 Else End AND if() #252 Else End AND if() #251 Else End AND if() #250 Else End AND if() #519 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1777 ==; Test 'if'
PUSHR D4; if() #519 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1953; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #519 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #274 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 1871 ==; Test 'if'
LOAD D2 0.0001; if() #274 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #524 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1810 ==; Test 'if'
LOAD D2 0; if() #524 Body Start
ADDV D2 6.2832
STORE D2 0; if() #524 Body End
LOAD D2 0; if() #275 Test
COMPAREV D2 0.7854
GOTOCMP 1818 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 1818 >
SETV D2 0
GOTO 1819
SETV D2 1
COMPAREV D2 0
GOTOCMP 1831 ==; Test 'if'
SETV D2 4; if() #275 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #275 Body End
LOAD D2 0; if() #276 Test AND if() #275 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1846 ==; Test 'if'
SETV D2 3; if() #276 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #276 Body End
LOAD D2 0; if() #277 Test AND if() #276 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1861 ==; Test 'if'
SETV D2 7; if() #277 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #277 Body End
SETV D2 0; if() #277 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2; if() #277 Else End
GOTO 1951; if() #276 Else End AND if() #275 Else End AND if() #274 Body End
PUSHR D4; if() #274 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2013; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #278 Test
COMPAREV D2 0
GOTOCMP 1890 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 1890 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 1890 ==
SETV D2 0
GOTO 1891
SETV D2 1
COMPAREV D2 0
GOTOCMP 1903 ==; Test 'if'
SETV D2 0; if() #278 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #278 Body End
LOAD D2 0; if() #279 Test AND if() #278 Else Start
COMPAREV D2 1
GOTOCMP 1914 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 1914 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 1914 ==
SETV D2 0
GOTO 1915
SETV D2 1
COMPAREV D2 0
GOTOCMP 1927 ==; Test 'if'
SETV D2 3; if() #279 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #279 Body End
LOAD D2 0; if() #280 Test AND if() #279 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1942 ==; Test 'if'
SETV D2 7; if() #280 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #280 Body End
SETV D2 4; if() #280 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2; if() #280 Else End
POPARGS D5 0.0002; if() #279 Else End AND if() #278 Else End AND if() #274 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #715 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1961 ==; Test 'if'
SETV D2 8; return Start AND if() #715 Body Start
GOTO 2011; return End AND if() #715 Body End
LOAD D2 0; if() #716 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1968 ==; Test 'if'
SETV D2 12; return Start AND if() #716 Body Start
GOTO 2011; return End AND if() #716 Body End
LOAD D2 0; if() #717 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1975 ==; Test 'if'
SETV D2 14; return Start AND if() #717 Body Start
GOTO 2011; return End AND if() #717 Body End
LOAD D2 0; if() #718 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1982 ==; Test 'if'
SETV D2 10; return Start AND if() #718 Body Start
GOTO 2011; return End AND if() #718 Body End
LOAD D2 0; if() #719 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1989 ==; Test 'if'
SETV D2 15; return Start AND if() #719 Body Start
GOTO 2011; return End AND if() #719 Body End
LOAD D2 0; if() #720 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1996 ==; Test 'if'
SETV D2 9; return Start AND if() #720 Body Start
GOTO 2011; return End AND if() #720 Body End
LOAD D2 0; if() #721 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2003 ==; Test 'if'
SETV D2 13; return Start AND if() #721 Body Start
GOTO 2011; return End AND if() #721 Body End
LOAD D2 0; if() #722 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2010 ==; Test 'if'
SETV D2 11; return Start AND if() #722 Body Start
GOTO 2011; return End AND if() #722 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #701 Test
COMPAREV D2 0
GOTOCMP 2022 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2022 >
SETV D2 1
GOTO 2023
SETV D2 0
COMPAREV D2 0
GOTOCMP 2027 ==; Test 'if'
LOAD D2 0; return Start AND if() #701 Body Start
GOTO 2084; return End AND if() #701 Body End
LOAD D2 0; if() #702 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2034 ==; Test 'if'
SETV D2 0; return Start AND if() #702 Body Start
GOTO 2084; return End AND if() #702 Body End
LOAD D2 0; if() #703 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2041 ==; Test 'if'
SETV D2 5; return Start AND if() #703 Body Start
GOTO 2084; return End AND if() #703 Body End
LOAD D2 0; if() #704 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2048 ==; Test 'if'
SETV D2 3; return Start AND if() #704 Body Start
GOTO 2084; return End AND if() #704 Body End
LOAD D2 0; if() #705 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2055 ==; Test 'if'
SETV D2 7; return Start AND if() #705 Body Start
GOTO 2084; return End AND if() #705 Body End
LOAD D2 0; if() #706 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2062 ==; Test 'if'
SETV D2 1; return Start AND if() #706 Body Start
GOTO 2084; return End AND if() #706 Body End
LOAD D2 0; if() #707 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2069 ==; Test 'if'
SETV D2 6; return Start AND if() #707 Body Start
GOTO 2084; return End AND if() #707 Body End
LOAD D2 0; if() #708 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2076 ==; Test 'if'
SETV D2 2; return Start AND if() #708 Body Start
GOTO 2084; return End AND if() #708 Body End
LOAD D2 0; if() #709 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2083 ==; Test 'if'
SETV D2 4; return Start AND if() #709 Body Start
GOTO 2084; return End AND if() #709 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR D4 SP2; Func[bool IsSideview()] Body Start
SETV D2 0; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
PUSHR D2
SETR D2 CURDMAP; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATASIDEVIEW
POP D3
COMPARER D3 D2
SETCMP D2 BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR D4 SP2; Func[void InitializeGhostZHData()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
SETR D4 SP2; Func[void KillEWeapon(eweapon)] Body Start
LOAD D2 0
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ORV D2 128
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
POP D5
RETURNFUNC; Func[void KillEWeapon(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[int __GetEWeaponThrowHeight(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
STORE D2 0.0004
LOAD D2 0.0004; if() #604 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2184 ==; Test 'if'
SETV D2 1; return Start AND if() #604 Body Start
GOTO 2279; return End AND if() #604 Body End
LOAD D2 0.0005; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNHXSZ
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNHYSZ
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 LINKX
ADDV D2 8
PUSHR D2
SETR D2 LINKY
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0003
LOAD D2 0.0003; if() #605 Test
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2227 ==; Test 'if'
SETV D2 1; return Start AND if() #605 Body Start
GOTO 2279; return End AND if() #605 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0001; while() #5 Test
COMPAREV D2 3.2000
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2254 ==; Test 'while'
LOAD D2 0.0001; while() #5 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002
LOAD D2 0.0002; if() #606 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2235 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #606 Body Start
GOTO 2279; return End AND if() #606 Body End
GOTO 2235; while() #5 Body End AND while() #5 End
STOREV 0 0
LOAD D2 0.0002; while() #6 Test
PUSHR D2
LOAD D2 0
DIVV D2 3.2000
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2278 ==; Test 'while'
LOAD D2 0.0001; while() #6 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SUBV D2 3.2000
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002; while() #6 Body End
GOTO 2255; while() #6 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(eweapon)] Body End
SETR D4 SP2; Func[void SetEWeaponRotation(eweapon, int)] Body Start
PUSHR D4
LOAD D2 0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2013; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #281 Test
COMPAREV D2 0
GOTOCMP 2299 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 2299 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 2299 ==
SETV D2 0
GOTO 2300
SETV D2 1
COMPAREV D2 0
GOTOCMP 2312 ==; Test 'if'
SETV D2 0; if() #281 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 2360; if() #281 Body End
LOAD D2 0; if() #282 Test AND if() #281 Else Start
COMPAREV D2 1
GOTOCMP 2323 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2323 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 2323 ==
SETV D2 0
GOTO 2324
SETV D2 1
COMPAREV D2 0
GOTOCMP 2336 ==; Test 'if'
SETV D2 3; if() #282 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 2360; if() #282 Body End
LOAD D2 0; if() #283 Test AND if() #282 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2351 ==; Test 'if'
SETV D2 7; if() #283 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 2360; if() #283 Body End
SETV D2 4; if() #283 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2; if() #283 Else End
POPARGS D5 0.0002; if() #282 Else End AND if() #281 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon, int)] Body End
SETR D4 SP2; Func[int Sign(int)] Body Start
LOAD D2 0; if() #299 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2370 ==; Test 'if'
SETV D2 1; return Start AND if() #299 Body Start
GOTO 2378; return End AND if() #299 Body End
LOAD D2 0; if() #300 Test AND if() #299 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2377 ==; Test 'if'
SETV D2 -1; return Start AND if() #300 Body Start
GOTO 2378; return End AND if() #300 Body End
SETV D2 0; return Start AND if() #300 Else Start
POP D5; return End AND if() #300 Else End AND if() #299 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR D4 SP2; Func[void StartGhostZH()] Body Start
PUSHR D4
CALLFUNC 0.2103; UsrFunc[void InitializeGhostZHData()] Call
POP D4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0 0.0007; Func[void UpdateEWeapon(eweapon)] Body Start
SETR D4 SP2
SETR D2 GD26; if() #555 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3523 !=; Test 'if' AND return (Void) AND if() #555 Body
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
STORE D2 0.0005
STOREV 1 0.0004
LOAD D2 0.0007; if() #309 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2794 ==; Test 'if'
LOAD D2 0.0007; if() #556 Test AND if() #309 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2642 ==; Test 'if'
LOAD D2 0.0007; if() #310 Test AND if() #556 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 6
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2515 ==; Test 'if'
LOAD D2 0.0007; if() #311 Test AND if() #310 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2458 ==; Test 'if'
PUSHR D4; if() #311 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params End
CALLFUNC 0.3525; UsrFunc[void __UpdateEWMSineWave(eweapon)] Call
POP D4
GOTO 2642; if() #311 Body End
LOAD D2 0.0007; if() #312 Test AND if() #311 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2475 ==; Test 'if'
PUSHR D4; if() #312 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHoming(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHoming(eweapon)] Params End
CALLFUNC 0.3707; UsrFunc[void __UpdateEWMHoming(eweapon)] Call
POP D4
GOTO 2642; if() #312 Body End
LOAD D2 0.0007; if() #313 Test AND if() #312 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2492 ==; Test 'if'
PUSHR D4; if() #313 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params End
CALLFUNC 0.3913; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Call
POP D4
GOTO 2642; if() #313 Body End
LOAD D2 0.0007; if() #314 Test AND if() #313 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2509 ==; Test 'if'
PUSHR D4; if() #314 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandom(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandom(eweapon)] Params End
CALLFUNC 0.4248; UsrFunc[void __UpdateEWMRandom(eweapon)] Call
POP D4
GOTO 2642; if() #314 Body End
PUSHR D4; if() #314 Else Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params End
CALLFUNC 0.4368; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Call
POP D4; if() #314 Else End
GOTO 2642; if() #313 Else End AND if() #312 Else End AND if() #311 Else End AND if() #310 Body End
LOAD D2 0.0007; if() #315 Test AND if() #310 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2550 ==; Test 'if'
LOAD D2 0.0007; if() #315 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMVeer(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMVeer(eweapon)] Params End
CALLFUNC 0.4680; UsrFunc[void __UpdateEWMVeer(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 2642; if() #315 Body End
LOAD D2 0.0007; if() #316 Test AND if() #315 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2567 ==; Test 'if'
PUSHR D4; if() #316 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMThrow(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMThrow(eweapon)] Params End
CALLFUNC 0.5212; UsrFunc[void __UpdateEWMThrow(eweapon)] Call
POP D4
GOTO 2642; if() #316 Body End
LOAD D2 0.0007; if() #317 Test AND if() #316 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2584 ==; Test 'if'
PUSHR D4; if() #317 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMFall(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMFall(eweapon)] Params End
CALLFUNC 0.5518; UsrFunc[void __UpdateEWMFall(eweapon)] Call
POP D4
GOTO 2642; if() #317 Body End
LOAD D2 0.0007; if() #318 Test AND if() #317 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2619 ==; Test 'if'
LOAD D2 0.0007; if() #318 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDrift(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDrift(eweapon)] Params End
CALLFUNC 0.5784; UsrFunc[void __UpdateEWMDrift(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 2642; if() #318 Body End
LOAD D2 0.0007; if() #318 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params End
CALLFUNC 0.6288; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004; if() #318 Else End
LOAD D2 0.0007; if() #317 Else End AND if() #316 Else End AND if() #315 Else End AND if() #310 Else End AND if() #556 Body End AND if() #557 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
LOAD D2 0.0007; if() #319 Test AND if() #557 Body Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2700 ==; Test 'if'
LOAD D2 0.0007; if() #319 Body Start
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0007; if() #558 Test
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #558 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #558 Body End
GOTO 3104; if() #319 Body End
LOAD D2 0.0007; if() #320 Test AND if() #319 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2744 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #559 Test AND if() #320 Body Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
SETR D2 LINKY; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #559 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #559 Body End
GOTO 3104; if() #320 Body End
LOAD D2 0.0007; if() #560 Test AND if() #320 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params Start AND if() #560 Body Start
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
PUSHVARGR D3; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0007; if() #561 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #561 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #561 Body End
GOTO 3104; if() #560 Body End AND if() #320 Else End AND if() #319 Else End AND if() #557 Body End AND if() #309 Body End
LOAD D2 0.0007; if() #562 Test AND if() #309 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
GOTOCMP 2815 ==
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 2815 !=
SETV D2 1
GOTO 2816
SETV D2 0
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
LOAD D2 0.0007; if() #321 Test AND if() #562 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2835 ==; Test 'if'
PUSHR D4; if() #321 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params End
CALLFUNC 0.6823; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Call
POP D4
GOTO 3104; if() #321 Body End
LOAD D2 0.0007; if() #322 Test AND if() #321 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2969 ==; Test 'if'
LOAD D2 0.0007; if() #323 Test AND if() #322 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2867 ==; Test 'if'
SETV D2 0; if() #323 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 3104; if() #323 Body End
LOAD D2 0.0007; if() #324 Test AND if() #323 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2884 ==; Test 'if'
PUSHR D4; if() #324 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params End
CALLFUNC 0.7222; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Call
POP D4
GOTO 3104; if() #324 Body End
LOAD D2 0.0007; if() #325 Test AND if() #324 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2901 ==; Test 'if'
PUSHR D4; if() #325 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params End
CALLFUNC 0.7389; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Call
POP D4
GOTO 3104; if() #325 Body End
LOAD D2 0.0007; if() #326 Test AND if() #325 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2918 ==; Test 'if'
PUSHR D4; if() #326 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params End
CALLFUNC 0.7433; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Call
POP D4
GOTO 3104; if() #326 Body End
LOAD D2 0.0007; if() #327 Test AND if() #326 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2935 ==; Test 'if'
PUSHR D4; if() #327 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params End
CALLFUNC 0.7477; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Call
POP D4
GOTO 3104; if() #327 Body End
LOAD D2 0.0007; if() #328 Test AND if() #327 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2952 ==; Test 'if'
PUSHR D4; if() #328 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params End
CALLFUNC 0.7535; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Call
POP D4
GOTO 3104; if() #328 Body End
LOAD D2 0.0007; if() #563 Test AND if() #328 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #563 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params End
CALLFUNC 0.7593; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Call
POP D4; if() #563 Body End
GOTO 3104; if() #328 Else End AND if() #327 Else End AND if() #326 Else End AND if() #325 Else End AND if() #324 Else End AND if() #323 Else End AND if() #322 Body End
LOAD D2 0.0007; if() #329 Test AND if() #322 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2986 ==; Test 'if'
PUSHR D4; if() #329 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params End
CALLFUNC 0.7703; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Call
POP D4
GOTO 3104; if() #329 Body End
LOAD D2 0.0007; if() #330 Test AND if() #329 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3003 ==; Test 'if'
PUSHR D4; if() #330 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params End
CALLFUNC 0.7761; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Call
POP D4
GOTO 3104; if() #330 Body End
LOAD D2 0.0007; if() #331 Test AND if() #330 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3020 ==; Test 'if'
PUSHR D4; if() #331 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params End
CALLFUNC 0.7821; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Call
POP D4
GOTO 3104; if() #331 Body End
LOAD D2 0.0007; if() #332 Test AND if() #331 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3037 ==; Test 'if'
PUSHR D4; if() #332 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params End
CALLFUNC 0.7881; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Call
POP D4
GOTO 3104; if() #332 Body End
LOAD D2 0.0007; if() #333 Test AND if() #332 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3054 ==; Test 'if'
PUSHR D4; if() #333 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params End
CALLFUNC 0.7993; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Call
POP D4
GOTO 3104; if() #333 Body End
LOAD D2 0.0007; if() #334 Test AND if() #333 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3071 ==; Test 'if'
PUSHR D4; if() #334 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params End
CALLFUNC 0.8098; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Call
POP D4
GOTO 3104; if() #334 Body End
LOAD D2 0.0007; if() #335 Test AND if() #334 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3088 ==; Test 'if'
PUSHR D4; if() #335 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params End
CALLFUNC 0.8145; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Call
POP D4
GOTO 3104; if() #335 Body End
LOAD D2 0.0007; if() #564 Test AND if() #335 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #564 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params End
CALLFUNC 0.8196; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Call
POP D4; if() #564 Body End
LOAD D2 0.0007; if() #335 Else End AND if() #334 Else End AND if() #333 Else End AND if() #332 Else End AND if() #331 Else End AND if() #330 Else End AND if() #329 Else End AND if() #322 Else End AND if() #321 Else End AND if() #562 Body End AND if() #309 Else End AND if() #565 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3129 ==; Test 'if'
LOAD D2 0.0007; if() #566 Test AND if() #565 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3129 ==; Test 'if'
PUSHR D4; if() #566 Body Start
LOAD D2 0.0007; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.0928; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #566 Body End
LOAD D2 0.0007; if() #565 Body End AND if() #336 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3412 ==; Test 'if'
SETV D2 1000; if() #336 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2
SETR D2 LINKHP; if() #567 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3523 !=; Test 'if' AND return (Void) AND if() #567 Body
LOAD D2 0.0007; if() #568 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 3174 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 3174 ==
SETV D2 1
GOTO 3175
SETV D2 0
COMPAREV D2 0
GOTOCMP 3523 !=; Test 'if' AND return (Void) AND if() #568 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0007; if() #337 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 3193 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int RadtoDeg(int)] Params Start AND if() #337 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 3259; if() #337 Body End
PUSHR D4; if() #337 Else Start
LOAD D2 0.0007; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2013; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #338 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3209 ==; Test 'if'
SETV D2 -90; if() #338 Body Start
STORE D2 0.0001
GOTO 3259; if() #338 Body End
LOAD D2 0; if() #339 Test AND if() #338 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3217 ==; Test 'if'
SETV D2 -45; if() #339 Body Start
STORE D2 0.0001
GOTO 3259; if() #339 Body End
LOAD D2 0; if() #340 Test AND if() #339 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3225 ==; Test 'if'
SETV D2 0; if() #340 Body Start
STORE D2 0.0001
GOTO 3259; if() #340 Body End
LOAD D2 0; if() #341 Test AND if() #340 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3233 ==; Test 'if'
SETV D2 45; if() #341 Body Start
STORE D2 0.0001
GOTO 3259; if() #341 Body End
LOAD D2 0; if() #342 Test AND if() #341 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3241 ==; Test 'if'
SETV D2 90; if() #342 Body Start
STORE D2 0.0001
GOTO 3259; if() #342 Body End
LOAD D2 0; if() #343 Test AND if() #342 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3249 ==; Test 'if'
SETV D2 135; if() #343 Body Start
STORE D2 0.0001
GOTO 3259; if() #343 Body End
LOAD D2 0; if() #344 Test AND if() #343 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3257 ==; Test 'if'
SETV D2 180; if() #344 Body Start
STORE D2 0.0001
GOTO 3259; if() #344 Body End
SETV D2 -135; if() #344 Else Start
STORE D2 0.0001; if() #344 Else End
LOAD D2 0.0004; if() #343 Else End AND if() #342 Else End AND if() #341 Else End AND if() #340 Else End AND if() #339 Else End AND if() #338 Else End AND if() #337 Else End AND if() #345 Test
COMPAREV D2 0
GOTOCMP 3301 ==; Test 'if'
LOAD D2 0.0007; if() #345 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Cos(int)] Params Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
GOTO 3317; if() #345 Body End
LOAD D2 0.0007; if() #345 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0002; if() #345 Else End
LOAD D2 0.0006; unless() #569 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 3331 !=
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 3331 !=
SETV D2 1
GOTO 3332
SETV D2 0
COMPAREV D2 0
GOTOCMP 3346 !=; Test 'unless'
PUSHR D4; unless() #569 Body Start
LOAD D2 0.0006; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0040; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0001; unless() #569 Body End
STOREV 0 0
LOAD D2 0.0001; if() #346 Test
COMPAREV D2 0
GOTOCMP 3355 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 3355 >=
SETV D2 1
GOTO 3356
SETV D2 0
COMPAREV D2 0
GOTOCMP 3361 ==; Test 'if'
SETV D2 0; if() #346 Body Start
STORE D2 0
GOTO 3363; if() #346 Body End
SETV D2 2; if() #346 Else Start
STORE D2 0; if() #346 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNTILE
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNTXSZ
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNTYSZ
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 3469; if() #336 Body End
LOAD D2 0.0007; if() #570 Test AND if() #336 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3452 ==; Test 'if'
SETR D2 GD26; if() #347 Test AND if() #570 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3443 ==; Test 'if'
SETV D2 1000; if() #347 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2
GOTO 3452; if() #347 Body End
SETV D2 0; if() #347 Else Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2; if() #347 Else End
LOAD D2 0.0007; if() #570 Body End AND if() #571 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3469 ==; Test 'if'
PUSHR D4; if() #571 Body Start
LOAD D2 0.0007; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #571 Body End
LOAD D2 0.0007; if() #336 Else End AND if() #572 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3481 !=
SETV D2 0
GOTO 3482
SETV D2 1
COMPAREV D2 0
GOTOCMP 3523 ==; Test 'if'
LOAD D2 0.0007; if() #572 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZOFS D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHYOFS D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNYOFS D2; if() #572 Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void UpdateEWeapon(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D3 EWPNMISCD; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(eweapon)] Body End
PUSHARGSV 0 0.0003; Func[void __UpdateEWMHoming(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0003
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0002
LOAD D2 0.0002; if() #726 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3723 ==; Test 'if'
LOAD D2 0.0002; if() #726 Body Start
ADDV D2 6.2832
STORE D2 0.0002; if() #726 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0003
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #727 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3745 ==; Test 'if'
LOAD D2 0.0001; if() #727 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #727 Body End
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
STORE D2 0
LOAD D2 0; if() #436 Test
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
COMPARER D3 D2
GOTOCMP 3780 <
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV2 6.2832 D2
POP D3
COMPARER D3 D2
GOTOCMP 3780 >
SETV D2 0
GOTO 3781
SETV D2 1
COMPAREV D2 0
GOTOCMP 3793 ==; Test 'if'
LOAD D2 0.0001; if() #436 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 3860; if() #436 Body End
PUSHR D4; if() #437 Test AND if() #436 Else Start
LOAD D2 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2362; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Sign(int)] Params Start
SUBV D2 3.1416
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2362; UsrFunc[int Sign(int)] Call
POP D4
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3837 ==; Test 'if'
LOAD D2 0.0003; if() #437 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 3860; if() #437 Body End
LOAD D2 0.0003; if() #437 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2; if() #437 Else End
PUSHR D4; if() #436 Else End
LOAD D2 0.0003; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0003; if() #728 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3911 ==; Test 'if'
LOAD D2 0.0003; if() #728 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0003; if() #729 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3911 ==; Test 'if'
PUSHR D4; if() #729 Body Start
LOAD D2 0.0003; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #729 Body End
POPARGS D5 0.0004; if() #728 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #730 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3944 ==; Test 'if'
LOAD D2 0.0001; if() #730 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #730 Body End
LOAD D2 0.0001; if() #438 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4043 ==; Test 'if'
LOAD D2 0.0001; if() #438 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #731 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4246 ==; Test 'if'
LOAD D2 0.0001; if() #439 Test AND if() #731 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4002 ==; Test 'if'
PUSHR D4; if() #439 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 4246; if() #439 Body End
LOAD D2 0.0001; if() #439 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #439 Else End
GOTO 4246; if() #731 Body End AND if() #438 Body End
LOAD D2 0.0001; if() #438 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #732 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4143 ==; Test 'if'
SETV D2 45; if() #732 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #733 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4143 ==; Test 'if'
PUSHR D4; if() #733 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #733 Body End
LOAD D2 0.0001; if() #732 Body End AND if() #440 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4169 ==; Test 'if'
LOAD D2 0.0001; if() #440 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 4246; if() #440 Body End
LOAD D2 0.0001; if() #734 Test AND if() #440 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4246 ==; Test 'if'
LOAD D2 0.0001; if() #734 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.2000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #441 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4216 ==; Test 'if'
PUSHR D4; if() #441 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4246; if() #441 Body End
LOAD D2 0; if() #442 Test AND if() #441 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4228 ==; Test 'if'
PUSHR D4; if() #442 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4246; if() #442 Body End
LOAD D2 0; if() #443 Test AND if() #442 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4240 ==; Test 'if'
PUSHR D4; if() #443 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4246; if() #443 Body End
PUSHR D4; if() #443 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #443 Else End
POPARGS D5 0.0002; if() #442 Else End AND if() #441 Else End AND if() #734 Body End AND if() #440 Else End AND if() #438 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(eweapon)] Body End
SETR D4 SP2; Func[void __UpdateEWMRandom(eweapon)] Body Start
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Randf(int)] Params Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.0032; UsrFunc[int Randf(int)] Call
POP D4
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0; if() #735 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4320 ==; Test 'if'
PUSHR D4; if() #735 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #735 Body End
LOAD D2 0; if() #736 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4366 ==; Test 'if'
LOAD D2 0; if() #736 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0; if() #737 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4366 ==; Test 'if'
PUSHR D4; if() #737 Body Start
LOAD D2 0; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #737 Body End
POP D5; if() #736 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #738 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4399 ==; Test 'if'
LOAD D2 0.0001; if() #738 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #738 Body End
LOAD D2 0.0001; if() #444 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4498 ==; Test 'if'
LOAD D2 0.0001; if() #444 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #739 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4678 ==; Test 'if'
LOAD D2 0.0001; if() #445 Test AND if() #739 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4457 ==; Test 'if'
PUSHR D4; if() #445 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 4678; if() #445 Body End
LOAD D2 0.0001; if() #445 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #445 Else End
GOTO 4678; if() #739 Body End AND if() #444 Body End
LOAD D2 0.0001; if() #444 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #740 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4588 ==; Test 'if'
SETV D2 45; if() #740 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D3 62832; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
MULTV D2 0.0001
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #741 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4588 ==; Test 'if'
PUSHR D4; if() #741 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #741 Body End
LOAD D2 0.0001; if() #740 Body End AND if() #446 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4614 ==; Test 'if'
LOAD D2 0.0001; if() #446 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 4678; if() #446 Body End
LOAD D2 0.0001; if() #742 Test AND if() #446 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4678 ==; Test 'if'
LOAD D2 0.0001; if() #742 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #447 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4648 ==; Test 'if'
PUSHR D4; if() #447 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4678; if() #447 Body End
LOAD D2 0; if() #448 Test AND if() #447 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4660 ==; Test 'if'
PUSHR D4; if() #448 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4678; if() #448 Body End
LOAD D2 0; if() #449 Test AND if() #448 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4672 ==; Test 'if'
PUSHR D4; if() #449 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4678; if() #449 Body End
PUSHR D4; if() #449 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #449 Else End
POPARGS D5 0.0002; if() #448 Else End AND if() #447 Else End AND if() #742 Body End AND if() #446 Else End AND if() #444 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0; if() #457 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4795 ==; Test 'if'
LOAD D2 0.0001; if() #457 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #457 Body End
LOAD D2 0; if() #458 Test AND if() #457 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4829 ==; Test 'if'
LOAD D2 0.0001; if() #458 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #458 Body End
LOAD D2 0; if() #459 Test AND if() #458 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4864 ==; Test 'if'
LOAD D2 0.0001; if() #459 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #459 Body End
LOAD D2 0; if() #460 Test AND if() #459 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4898 ==; Test 'if'
LOAD D2 0.0001; if() #460 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #460 Body End
LOAD D2 0; if() #461 Test AND if() #460 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4964 ==; Test 'if'
LOAD D2 0.0001; if() #461 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #461 Body End
LOAD D2 0; if() #462 Test AND if() #461 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5029 ==; Test 'if'
LOAD D2 0.0001; if() #462 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #462 Body End
LOAD D2 0; if() #463 Test AND if() #462 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5094 ==; Test 'if'
LOAD D2 0.0001; if() #463 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #463 Body End
LOAD D2 0.0001; if() #463 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #463 Else End
LOAD D2 0.0001; if() #462 Else End AND if() #461 Else End AND if() #460 Else End AND if() #459 Else End AND if() #458 Else End AND if() #457 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNJUMP D2
LOAD D2 0.0001; if() #743 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
GOTOCMP 5243 !=
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
GOTOCMP 5243 ==
SETV D2 1
GOTO 5244
SETV D2 0
COMPAREV D2 0
GOTOCMP 5276 ==; Test 'if'
LOAD D2 0.0001; if() #743 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #743 Body End
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
PUSHR D4; unless() #451 Test AND if(true) #450 [Opt:AlwaysOn]
CALLFUNC 0.2086; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 5328 !=; Test 'unless'
LOAD D2 0.0001; unless() #451 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZ D2
GOTO 5344; unless() #451 Body End
LOAD D2 0.0001; unless() #451 Else Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV2 176 D2
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2; unless() #451 Else End
LOAD D2 0.0001; if() #452 Test
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5407 ==; Test 'if'
PUSHR D4; unless() #744 Test AND if(true) #453 [Opt:AlwaysOn] AND if() #452 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNY
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHXOFS
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHYOFS
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHYSZ
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9484; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5516 !=; Test 'unless'
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start AND unless() #744 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; unless() #744 Body End
GOTO 5516; if() #452 Body End
STOREV 0 0; if() #452 Else Start
LOAD D2 0.0001; if() #454 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
GOTOCMP 5465 ==; Test 'if'
LOAD D2 0.0001; if() #455 Test AND if() #454 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5462 ==; Test 'if'
LOAD D2 0.0001; if() #455 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 5467; if() #455 Body End
SETV D2 1; if() #455 Else Start
STORE D2 0; if() #455 Else End
GOTO 5467; if() #454 Body End
SETV D2 1; if() #454 Else Start
STORE D2 0; if() #454 Else End
LOAD D2 0; if() #745 Test
COMPAREV D2 0
GOTOCMP 5516 ==; Test 'if'
LOAD D2 0.0001; if() #456 Test AND if() #745 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 5495 ==; Test 'if'
SETV D2 0; if() #456 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZ D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 5516; if() #456 Body End
SETV D2 0; if() #456 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #456 Else End
POPARGS D5 0.0002; if() #745 Body End AND if() #452 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNJUMP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
PUSHR D4; unless() #431 Test AND if(true) #430 [Opt:AlwaysOn]
CALLFUNC 0.2086; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 5579 !=; Test 'unless'
LOAD D2 0.0001; unless() #431 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZ D2
GOTO 5609; unless() #431 Body End
LOAD D2 0.0001; unless() #431 Else Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHYOFS D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNYOFS D2; unless() #431 Else End
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ADDV D2 0.1600
PUSHVARGR D2
PUSHVARGV 3.2000; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #723 Test AND if(true) #432 [Opt:AlwaysOn]
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5782 ==; Test 'if'
PUSHR D4; unless() #724 Test AND if() #723 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNY
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHXOFS
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHYOFS
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHYSZ
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9484; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5782 !=; Test 'unless'
STOREV 0 0; unless() #724 Body Start
LOAD D2 0.0001; if() #433 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5731 ==; Test 'if'
LOAD D2 0.0001; if() #434 Test AND if() #433 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5728 ==; Test 'if'
LOAD D2 0.0001; if() #434 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 5733; if() #434 Body End
SETV D2 1; if() #434 Else Start
STORE D2 0; if() #434 Else End
GOTO 5733; if() #433 Body End
SETV D2 1; if() #433 Else Start
STORE D2 0; if() #433 Else End
LOAD D2 0; if() #725 Test
COMPAREV D2 0
GOTOCMP 5782 ==; Test 'if'
LOAD D2 0.0001; if() #435 Test AND if() #725 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 5761 ==; Test 'if'
SETV D2 0; if() #435 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZ D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 5782; if() #435 Body End
SETV D2 0; if() #435 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #435 Else End
POPARGS D5 0.0002; if() #725 Body End AND unless() #724 Body End AND if() #723 Body End
RETURNFUNC; Func[void __UpdateEWMFall(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0; if() #415 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5899 ==; Test 'if'
LOAD D2 0.0001; if() #415 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #415 Body End
LOAD D2 0; if() #416 Test AND if() #415 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5933 ==; Test 'if'
LOAD D2 0.0001; if() #416 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #416 Body End
LOAD D2 0; if() #417 Test AND if() #416 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5968 ==; Test 'if'
LOAD D2 0.0001; if() #417 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #417 Body End
LOAD D2 0; if() #418 Test AND if() #417 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6002 ==; Test 'if'
LOAD D2 0.0001; if() #418 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #418 Body End
LOAD D2 0; if() #419 Test AND if() #418 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6068 ==; Test 'if'
LOAD D2 0.0001; if() #419 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #419 Body End
LOAD D2 0; if() #420 Test AND if() #419 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6133 ==; Test 'if'
LOAD D2 0.0001; if() #420 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #420 Body End
LOAD D2 0; if() #421 Test AND if() #420 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6198 ==; Test 'if'
LOAD D2 0.0001; if() #421 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #421 Body End
LOAD D2 0.0001; if() #421 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #421 Else End
LOAD D2 0.0001; if() #420 Else End AND if() #419 Else End AND if() #418 Else End AND if() #417 Else End AND if() #416 Else End AND if() #415 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0
LOAD D2 0.0001; if() #422 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 16
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 6380 ==; Test 'if'
LOAD D2 0.0001; if() #422 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6399; if() #422 Body End
LOAD D2 0.0001; if() #422 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #422 Else End
LOAD D2 0; if() #423 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6434 ==; Test 'if'
LOAD D2 0.0001; if() #423 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #423 Body End
LOAD D2 0; if() #424 Test AND if() #423 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6468 ==; Test 'if'
LOAD D2 0.0001; if() #424 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #424 Body End
LOAD D2 0; if() #425 Test AND if() #424 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6503 ==; Test 'if'
LOAD D2 0.0001; if() #425 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #425 Body End
LOAD D2 0; if() #426 Test AND if() #425 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6537 ==; Test 'if'
LOAD D2 0.0001; if() #426 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #426 Body End
LOAD D2 0; if() #427 Test AND if() #426 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6603 ==; Test 'if'
LOAD D2 0.0001; if() #427 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #427 Body End
LOAD D2 0; if() #428 Test AND if() #427 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6668 ==; Test 'if'
LOAD D2 0.0001; if() #428 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #428 Body End
LOAD D2 0; if() #429 Test AND if() #428 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6733 ==; Test 'if'
LOAD D2 0.0001; if() #429 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #429 Body End
LOAD D2 0.0001; if() #429 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #429 Else End
LOAD D2 0.0001; if() #428 Else End AND if() #427 Else End AND if() #426 Else End AND if() #425 Else End AND if() #424 Else End AND if() #423 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(eweapon)] Body End
PUSHARGSV 0 0.0011; Func[void __DoEWeaponDeathPrototype(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0010
STOREV 0 0.0009
STOREV 0 0.0008
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0011; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR D2; InlineFunc[untyped Floor(untyped)] Body
STORE D2 0.0010
SETR D2 EWPNCOUNT; for() #165 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #165 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6884 ==; for() #165 TestFail?
LOAD D2 0.0003; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #165 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0009
LOAD D2 0.0009; if() #594 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 768
COMPAREV D2 768
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6880 !=; Test 'if' AND continue 1; AND if() #594 Body
LOAD D2 0.0009; if() #595 Test
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6884 !=; Test 'if' AND break 1; AND if() #595 Body
LOAD D2 0.0003; for() #165 Body End AND for() #165 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 6844; for() #165 End
LOAD D2 0.0003; if() #596 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6910 ==; Test 'if'
ALLOCATEMEMV D2 43 0; if() #596 Body Start
WRITEPODSTRING D2 "ghost.zh: Failed to find prototype eweapon"
STORE D2 0
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 7220; return (Void)
LOAD D3 0
DEALLOCATEMEMR D3; if() #596 Body End
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MODV D2 10
SUBV D2 6.2832
STORE D2 0.0005
LOAD D2 0.0011
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0010
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 10000
STORE D2 0.0004
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 100
RSHIFTV D2 0
STORE D2 0.0008
LOAD D2 0.0011; if() #362 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNEXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7000 ==; Test 'if'
LOAD D2 0.0011; if() #362 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
GOTO 7012; if() #362 Body End
LOAD D2 0.0011; if() #362 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
ADDV D2 8
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
ADDV D2 8
STORE D2 0.0006; if() #362 Else End
LOAD D2 0.0008; if() #363 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7065 ==; Test 'if'
STOREV 0 0.0001; for() #166 setup AND if() #363 Body Start
LOAD D2 0.0001; for() #166 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7056 ==; for() #166 TestFail?
PUSHR D4; for() #166 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
MULTV D2 6.2832
SETV D2 6.2832
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.8989; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #166 Body End
LOAD D2 0.0001; for() #166 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 7018; for() #166 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 7211; if() #363 Body End
LOAD D2 0.0008; if() #364 Test AND if() #363 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7105 ==; Test 'if'
STOREV 0 0.0001; for() #167 setup AND if() #364 Body Start
LOAD D2 0.0001; for() #167 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7096 ==; for() #167 TestFail?
PUSHR D4; for() #167 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D3 31416; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
DIVV D2 5000
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.8989; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #167 Body End
LOAD D2 0.0001; for() #167 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 7071; for() #167 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 7211; if() #364 Body End
LOAD D2 0.0004; if() #365 Test AND if() #364 Else Start
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 7172 ==; Test 'if'
SETR D2 LINKX; InlineFunc[int ArcTan(int, int)] Params Start AND if() #365 Body Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETR D2 LINKY
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2
LOAD D2 0.0005
DIVV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
STOREV 0 0; for() #168 setup
LOAD D2 0; for() #168 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7203 ==; for() #168 TestFail?
PUSHR D4; for() #168 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.8989; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #168 Body End
LOAD D2 0; for() #168 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7134; for() #168 End
GOTO 7203; if() #365 Body End
LOAD D2 0.0004; if() #597 Test AND if() #365 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7203 ==; Test 'if'
PUSHR D4; if() #597 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETR D2 LINKX; InlineFunc[int ArcTan(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETR D2 LINKY
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.8989; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; if() #597 Body End
LOAD D2 0.0009; if() #365 Else End AND InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body AND if() #364 Else End
SETV D2 0; if() #363 Else End
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #357 Test
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7311 ==; Test 'if'
PUSHR D4; if() #357 Body Start
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
SETV D2 300
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 7387; if() #357 Body End
LOAD D2 0.0001; if() #358 Test AND if() #357 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 7336 ==; Test 'if'
LOAD D2 0.0001; if() #358 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
GOTO 7387; if() #358 Body End
LOAD D2 0.0001; if() #358 Else Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #359 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7357 ==; Test 'if'
PUSHR D4; if() #359 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7387; if() #359 Body End
LOAD D2 0; if() #360 Test AND if() #359 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7369 ==; Test 'if'
PUSHR D4; if() #360 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7387; if() #360 Body End
LOAD D2 0; if() #361 Test AND if() #360 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7381 ==; Test 'if'
PUSHR D4; if() #361 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7387; if() #361 Body End
PUSHR D4; if() #361 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #361 Else End
POPARGS D5 0.0002; if() #360 Else End AND if() #359 Else End AND if() #358 Else End AND if() #357 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathExplode(eweapon)] Body Start
PUSHR D4
PUSHV 135; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body Start
PUSHR D4
PUSHV 136; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #155 setup
LOAD D2 0; for() #155 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7524 ==; for() #155 TestFail?
PUSHR D4; for() #155 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #155 Body End
LOAD D2 0; for() #155 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7480; for() #155 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #154 setup
LOAD D2 0; for() #154 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7582 ==; for() #154 TestFail?
PUSHR D4; for() #154 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #154 Body End
LOAD D2 0; for() #154 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7538; for() #154 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #355 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7647 ==; Test 'if'
STOREV 0 0; for() #156 setup AND if() #355 Body Start
LOAD D2 0; for() #156 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7692 ==; for() #156 TestFail?
PUSHR D4; for() #156 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #156 Body End
LOAD D2 0; for() #156 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7602; for() #156 End
GOTO 7692; if() #355 Body End
STOREV 4 0; for() #157 setup AND if() #355 Else Start
LOAD D2 0; for() #157 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7692 ==; for() #157 TestFail?
PUSHR D4; for() #157 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #157 Body End
LOAD D2 0; for() #157 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7648; for() #157 End
SETV D2 0; if() #355 Else End
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #162 setup
LOAD D2 0; for() #162 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7750 ==; for() #162 TestFail?
PUSHR D4; for() #162 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #162 Body End
LOAD D2 0; for() #162 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7706; for() #162 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #159 setup
LOAD D2 0; for() #159 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7808 ==; for() #159 TestFail?
PUSHR D4; for() #159 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #159 Body End
LOAD D2 0; for() #159 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7764; for() #159 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #158 setup
LOAD D2 0; for() #158 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7868 ==; for() #158 TestFail?
PUSHR D4; for() #158 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #158 Body End
LOAD D2 0; for() #158 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7824; for() #158 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #356 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7935 ==; Test 'if'
STOREV 0 0; for() #160 setup AND if() #356 Body Start
LOAD D2 0; for() #160 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7980 ==; for() #160 TestFail?
PUSHR D4; for() #160 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #160 Body End
LOAD D2 0; for() #160 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7890; for() #160 End
GOTO 7980; if() #356 Body End
STOREV 4 0; for() #161 setup AND if() #356 Else Start
LOAD D2 0; for() #161 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7980 ==; for() #161 TestFail?
PUSHR D4; for() #161 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #161 Body End
LOAD D2 0; for() #161 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7936; for() #161 End
SETV D2 13; if() #356 Else End AND InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #163 setup
LOAD D2 0; for() #163 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8040 ==; for() #163 TestFail?
PUSHR D4; for() #163 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #163 Body End
LOAD D2 0; for() #163 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7996; for() #163 End
STOREV 4 0; for() #164 setup
LOAD D2 0; for() #164 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8085 ==; for() #164 TestFail?
PUSHR D4; for() #164 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #164 Body End
LOAD D2 0; for() #164 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 8041; for() #164 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[npc screendata::CreateNPC(int)] Params Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[npc screendata::CreateNPC(int)] Params End
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body Start
PUSHR D4
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[void __DoEWeaponDeathRunScript(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
PUSHR D4
CALLFUNC 0.1253; UsrFunc[int FindUnusedFFC()] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #598 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8221 ==; Test 'if'
SETV D2 0; if() #598 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 8360; return (Void) AND if() #598 Body End
LOAD D2 0.0004; InlineFunc[ffc screendata::LoadFFC(int)] Params
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0003
SETR D2 EWPNCOUNT; for() #169 setup
STORE D2 0
LOAD D2 0; for() #169 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8263 ==; for() #169 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #169 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0002
LOAD D2 0.0002; if() #599 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 768
COMPAREV D2 512
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8259 !=; Test 'if' AND continue 1; AND if() #599 Body
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0002
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFEWPN
PUSHVARGR EWPNMISCD; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001; for() #169 Body End
LOAD D2 0; for() #169 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8226; for() #169 End
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 3
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0005
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ORV D2 1024
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR X D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR Y D2
LOAD D2 0.0005
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
POPARGS D5 0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void UpdateEWeapons()] Body Start
SETR D4 SP2
STOREV 0 0.0001
SETR D2 LINKACTION; unless() #348 Test
COMPAREV D2 4
GOTOCMP 8379 ==
SETR D2 LINKACTION
COMPAREV D2 5
GOTOCMP 8379 ==
SETR D2 LINKACTION
COMPAREV D2 14
GOTOCMP 8379 ==
SETR D2 LINKACTION
COMPAREV D2 15
GOTOCMP 8379 ==
SETV D2 0
GOTO 8380
SETV D2 1
COMPAREV D2 0
GOTOCMP 8429 !=; Test 'unless'
SETR D2 EWPNCOUNT; for() #149 setup AND unless() #348 Body Start
STORE D2 0
LOAD D2 0; for() #149 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8475 ==; for() #149 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #149 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #573 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 8416 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 8416 !=
SETV D2 0
GOTO 8417
SETV D2 1
COMPAREV D2 0
GOTOCMP 8424 !=; Test 'if' AND continue 1; AND if() #573 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void UpdateEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void UpdateEWeapon(eweapon)] Params End
CALLFUNC 0.2385; UsrFunc[void UpdateEWeapon(eweapon)] Call
POP D4; for() #149 Body End
LOAD D2 0; for() #149 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8384; for() #149 End
GOTO 8475; unless() #348 Body End
SETR D2 EWPNCOUNT; for() #150 setup AND unless() #348 Else Start
STORE D2 0
LOAD D2 0; for() #150 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8475 ==; for() #150 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #150 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #574 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 8463 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 8463 !=
SETV D2 0
GOTO 8464
SETV D2 1
COMPAREV D2 0
GOTOCMP 8471 !=; Test 'if' AND continue 1; AND if() #574 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params End
CALLFUNC 0.8477; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Call
POP D4; for() #150 Body End
LOAD D2 0; for() #150 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8431; for() #150 End
POPARGS D5 0.0002; unless() #348 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0 0.0002; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002; if() #746 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8504 ==; Test 'if'
LOAD D2 0.0002; if() #747 Test AND if() #746 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8504 ==; Test 'if'
PUSHR D4; if() #747 Body Start
LOAD D2 0.0002; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.0928; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #747 Body End
LOAD D2 0.0002; if() #746 Body End AND if() #464 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8696 ==; Test 'if'
SETV D2 1000; if() #464 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2
LOAD D2 0.0002; if() #748 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 8544 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 8544 ==
SETV D2 1
GOTO 8545
SETV D2 0
COMPAREV D2 0
GOTOCMP 8753 !=; Test 'if' AND return (Void) AND if() #748 Body
STOREV 0 0.0001
LOAD D2 0.0002; if() #465 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 8561 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int RadtoDeg(int)] Params Start AND if() #465 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 8627; if() #465 Body End
PUSHR D4; if() #465 Else Start
LOAD D2 0.0002; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2013; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #466 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8577 ==; Test 'if'
SETV D2 -90; if() #466 Body Start
STORE D2 0.0001
GOTO 8627; if() #466 Body End
LOAD D2 0; if() #467 Test AND if() #466 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8585 ==; Test 'if'
SETV D2 -45; if() #467 Body Start
STORE D2 0.0001
GOTO 8627; if() #467 Body End
LOAD D2 0; if() #468 Test AND if() #467 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8593 ==; Test 'if'
SETV D2 0; if() #468 Body Start
STORE D2 0.0001
GOTO 8627; if() #468 Body End
LOAD D2 0; if() #469 Test AND if() #468 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8601 ==; Test 'if'
SETV D2 45; if() #469 Body Start
STORE D2 0.0001
GOTO 8627; if() #469 Body End
LOAD D2 0; if() #470 Test AND if() #469 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8609 ==; Test 'if'
SETV D2 90; if() #470 Body Start
STORE D2 0.0001
GOTO 8627; if() #470 Body End
LOAD D2 0; if() #471 Test AND if() #470 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8617 ==; Test 'if'
SETV D2 135; if() #471 Body Start
STORE D2 0.0001
GOTO 8627; if() #471 Body End
LOAD D2 0; if() #472 Test AND if() #471 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8625 ==; Test 'if'
SETV D2 180; if() #472 Body Start
STORE D2 0.0001
GOTO 8627; if() #472 Body End
SETV D2 -135; if() #472 Else Start
STORE D2 0.0001; if() #472 Else End
STOREV 0 0; if() #471 Else End AND if() #470 Else End AND if() #469 Else End AND if() #468 Else End AND if() #467 Else End AND if() #466 Else End AND if() #465 Else End
LOAD D2 0.0001; if() #473 Test
COMPAREV D2 0
GOTOCMP 8636 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 8636 >=
SETV D2 1
GOTO 8637
SETV D2 0
COMPAREV D2 0
GOTOCMP 8642 ==; Test 'if'
SETV D2 0; if() #473 Body Start
STORE D2 0
GOTO 8644; if() #473 Body End
SETV D2 2; if() #473 Else Start
STORE D2 0; if() #473 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
PUSHR EWPNTILE
PUSHARGSV 1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 8753; if() #464 Body End
LOAD D2 0.0002; if() #749 Test AND if() #464 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8736 ==; Test 'if'
SETR D2 GD26; if() #474 Test AND if() #749 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8727 ==; Test 'if'
SETV D2 1000; if() #474 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2
GOTO 8736; if() #474 Body End
SETV D2 0; if() #474 Else Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2; if() #474 Else End
LOAD D2 0.0002; if() #749 Body End AND if() #750 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8753 ==; Test 'if'
PUSHR D4; if() #750 Body Start
LOAD D2 0.0002; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #750 Body End
POPARGS D5 0.0003; if() #464 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body End
SETR D4 SP2; Func[void UpdateGhostZH1()] Body Start
PUSHR D4
CALLFUNC 0.8362; UsrFunc[void UpdateEWeapons()] Call
PEEK D4
CALLFUNC 0.0868; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK D4
CALLFUNC 0.8764; UsrFunc[void UpdateGhostZHData1()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR D4 SP2
SETR D2 CURDMAP
LSHIFTV D2 8
PUSHR D2
SETR D2 CURDSCR
POP D3
ADDR D2 D3
STORE D2 0
SETR D2 GD26; if() #349 Test
PUSHR D2
POP D0
READPODARRAYV D2 7
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8797 ==; Test 'if'
SETV D2 0; if() #349 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
GOTO 8815; if() #349 Body End
SETR D2 GD26; if() #575 Test AND if() #349 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8815 ==; Test 'if'
SETR D2 GD26; if() #575 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 6
SUBV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #575 Body End
POP D5; if() #349 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR D4 SP2; Func[void UpdateGhostZH2()] Body Start
PUSHR D4
CALLFUNC 0.0994; UsrFunc[void DrawGhostFFCs()] Call
PEEK D4
CALLFUNC 0.0059; UsrFunc[void AutoGhost()] Call
PEEK D4
CALLFUNC 0.8826; UsrFunc[void UpdateGhostZHData2()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR D4 SP2; Func[void UpdateGhostZHData2()] Body Start
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 1
ADDV D2 1
MODV D2 8
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETR D2 GD26; if() #350 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8858 ==; Test 'if'
SETR D2 GD26; if() #350 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ORV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 8868; if() #350 Body End
SETR D2 GD26; if() #350 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 -2
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #350 Else End
SETR D2 GD26; if(true) #576 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 3
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26; if() #577 Test
PUSHR D2
POP D0
READPODARRAYV D2 3
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8903 ==; Test 'if'
SETV D2 0; if() #577 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #577 Body End
SETR D2 GD26; if(true) #578 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 5
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26; if() #579 Test
PUSHR D2
POP D0
READPODARRAYV D2 5
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8938 ==; Test 'if'
SETV D2 0; if() #579 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2; if() #579 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR D4 SP2; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOAD D2 0.0001; if() #693 Test
COMPAREV D2 97
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8952 ==; Test 'if'
LOAD D2 0.0001; if() #694 Test AND if() #693 Body Start
COMPAREV D2 122
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 8952 ==; Test 'if'
SETV D2 1; return Start AND if() #694 Body Start
GOTO 8987; return End AND if() #694 Body End
LOAD D2 0.0001; if() #693 Body End AND if() #695 Test
COMPAREV D2 65
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8964 ==; Test 'if'
LOAD D2 0.0001; if() #696 Test AND if() #695 Body Start
COMPAREV D2 90
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 8964 ==; Test 'if'
SETV D2 1; return Start AND if() #696 Body Start
GOTO 8987; return End AND if() #696 Body End
LOAD D2 0.0001; if() #695 Body End AND if() #697 Test
COMPAREV D2 95
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8971 ==; Test 'if'
SETV D2 1; return Start AND if() #697 Body Start
GOTO 8987; return End AND if() #697 Body End
LOAD D2 0; unless() #698 Test
COMPAREV D2 0
GOTOCMP 8986 !=; Test 'unless'
LOAD D2 0.0001; if() #699 Test AND unless() #698 Body Start
COMPAREV D2 48
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8986 ==; Test 'if'
LOAD D2 0.0001; if() #700 Test AND if() #699 Body Start
COMPAREV D2 57
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 8986 ==; Test 'if'
SETV D2 1; return Start AND if() #700 Body Start
GOTO 8987; return End AND if() #700 Body End
SETV D2 0; if() #699 Body End AND unless() #698 Body End AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(eweapon, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params End
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0004; if() #590 Test
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9021 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #590 Body Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #590 Body End
LOAD D2 0.0004; if() #353 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNEXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9157 ==; Test 'if'
SETV D2 3; if() #353 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNEXTEND D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNTXSZ D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNTYSZ D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHXSZ D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHYSZ D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
GOTO 9177; if() #353 Body End
LOAD D2 0.0003; if() #353 Else Start
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2; if() #353 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004; if() #354 Test
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 15
GOTOCMP 9314 !=
LOAD D2 0.0004
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 -1
GOTOCMP 9314 !=
SETV D2 1
GOTO 9315
SETV D2 0
COMPAREV D2 0
GOTOCMP 9334 ==; Test 'if'
PUSHR D4; if() #354 Body Start
LOAD D2 0; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params Start
PUSHR D2; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params End
CALLFUNC 0.2169; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 9352; if() #354 Body End
LOAD D2 0.0004; if() #354 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #354 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 -257
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0; if() #591 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9465 ==; Test 'if'
SETV D2 0; if() #591 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #591 Body End
LOAD D2 0; if() #592 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9482 ==; Test 'if'
PUSHR D4; if() #592 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #592 Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __CopyEWeapon(eweapon, int, int, int)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #189 setup
LOAD D2 0; for() #189 LoopTest
PUSHR D2
LOAD D2 0.0001
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9533 ==; for() #189 TestFail?
LOAD D2 0.0006; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #761 Test AND for() #189 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 9529 ==; Test 'if'
SETV D2 0; if() #762 Test AND if() #761 Body Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
COMPAREV D2 0
GOTOCMP 9529 ==; Test 'if'
SETV D2 1; return Start AND if() #762 Body Start
GOTO 9534; return End AND if() #762 Body End
LOAD D2 0; if() #761 Body End AND for() #189 Body End AND for() #189 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9487; for() #189 End
SETV D2 0; return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End


PUSHR D0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #501 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 16 ==; Test 'if'
SETV D2 -1; if() #501 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
GOTO 22; if() #501 Body End
LOAD D2 0.0001; if() #501 Else Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #501 Else End
POPARGS D5 0.0002
QUIT; void run(int) Body End


SETV GD8 0; void run() Body Start
SETV GD9 0
SETV GD11 0
SETV GD10 0
SETV GD4 0
SETV GD14 0
SETV GD5 0
SETV GD13 0
SETV GD12 0
SETV GD6 0
SETV GD7 0
SETV GD1 0
SETV GD2 0
SETV GD3 0
ALLOCATEGMEMV D2 25 0
SETR GD25 D2
SETV GD15 0
SETV GD16 0
SETV GD20 0
SETV GD17 0
SETV GD21 0
SETV GD18 0
SETV GD19 0
ALLOCATEGMEMV D2 32 0
SETR GD24 D2
SETV GD22 0
SETV GD23 0
ALLOCATEGMEMV D2 8 0
SETR GD26 D2
ALLOCATEGMEMV D2 1000 0
SETR GD27 D2
QUIT; void run() Body End
