stderr:

Compiling 'bumper.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Debug: could not resolve symbol "fcc"
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 16,
    "symbols": 43,
    "identifiers": 138,
    "elided": true
  }
}

zasm:

PUSHR D0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0 0.0007
SETR D4 SP2
LOAD D2 0.0007
PUSHR D2
POP REFFFC
SETR D2 DATA
STORE D2 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
SETV D2 0
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #436 Test AND while(true) #2 Body [Opt:AlwaysOn] Start
LOAD D2 0.0007; UsrFunc[int CenterX(ffc)] Params Start
PUSHR D2; UsrFunc[int CenterX(ffc)] Params End
CALLFUNC 0.0817; UsrFunc[int CenterX(ffc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[int CenterY(ffc)] Params Start
PUSHR D2; UsrFunc[int CenterY(ffc)] Params End
CALLFUNC 0.0840; UsrFunc[int CenterY(ffc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 0.0803; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 0.0810; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
ADDV D2 2
POP D3
COMPARER D3 D2
GOTOCMP 68 >=
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
COMPAREV D2 0
GOTOCMP 68 !=
SETV D2 1
GOTO 69
SETV D2 0
COMPAREV D2 0
GOTOCMP 114 ==; Test 'if'
LOAD D2 0.0007; if() #437 Test AND if() #436 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 111 ==; Test 'if'
SETV D2 76; InlineFunc[void Audio::PlaySound(int)] Params AND if() #437 Body Start
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0007; UsrFunc[int CenterX(ffc)] Params Start
PUSHR D2; UsrFunc[int CenterX(ffc)] Params End
CALLFUNC 0.0817; UsrFunc[int CenterX(ffc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[int CenterY(ffc)] Params Start
PUSHR D2; UsrFunc[int CenterY(ffc)] Params End
CALLFUNC 0.0840; UsrFunc[int CenterY(ffc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 0.0803; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 0.0810; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0511; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0008
STORE D2 0.0004
SETV D2 16
STORE D2 0.0003; if() #437 Body End
PUSHR D4
CALLFUNC 0.0863; UsrFunc[void NoAction()] Call
POP D4; if() #436 Body End
LOAD D2 0.0004; if() #438 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 144 ==; Test 'if'
LOAD D2 0.0002; if() #438 Body Start
PUSHR D2
PUSHR D4
PUSHV 3; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0005
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0909; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0001
PUSHR D2
PUSHR D4
PUSHV 3; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0005
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0919; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0004
SUBV D2 1
STORE D2 0.0004; if() #438 Body End
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params AND if() #439 Test
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 296 ==; Test 'if'
STOREV 0 0; for() #148 setup AND if() #439 Body Start
LOAD D2 0; for() #148 LoopTest
COMPAREV D2 4
GOTOCMP 159 >=
LOAD D2 0.0002
COMPAREV D2 -1
GOTOCMP 159 >
SETV D2 1
GOTO 160
SETV D2 0
COMPAREV D2 0
GOTOCMP 223 ==; for() #148 TestFail?
PUSHR D4; if() #109 Test AND for() #148 Body Start
SETV D2 0.0001; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHV 2
PUSHV 1
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0530; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 195 ==; Test 'if'
SETV D2 0.0001; if() #109 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
SUBV D2 1
PUSHR D2
SETV D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
ADDV D2 1
STORE D2 0.0002
GOTO 219; if() #109 Body End
LOAD D2 0.0001; InlineFunc[int Abs(int)] Params AND if() #440 Test AND if() #109 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 217 ==; Test 'if'
LOAD D2 0.0001; if() #440 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Sign(int)] Params Start
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0929; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params Start
DIVV D2 2; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0001; if() #440 Body End
SETV D2 0
STORE D2 0.0002; if() #109 Else End
LOAD D2 0; for() #148 Body End AND for() #148 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 151; for() #148 End
STOREV 0 0; for() #149 setup
LOAD D2 0; for() #149 LoopTest
COMPAREV D2 4
GOTOCMP 232 >=
LOAD D2 0.0002
COMPAREV D2 1
GOTOCMP 232 <
SETV D2 1
GOTO 233
SETV D2 0
COMPAREV D2 0
GOTOCMP 296 ==; for() #149 TestFail?
PUSHR D4; if() #110 Test AND for() #149 Body Start
SETV D2 0.0001; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHV 3
PUSHV 1
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0530; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 268 ==; Test 'if'
SETV D2 0.0001; if() #110 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 1
PUSHR D2
SETV D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
SUBV D2 1
STORE D2 0.0002
GOTO 292; if() #110 Body End
LOAD D2 0.0001; InlineFunc[int Abs(int)] Params AND if() #441 Test AND if() #110 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 290 ==; Test 'if'
LOAD D2 0.0001; if() #441 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Sign(int)] Params Start
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0929; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params Start
DIVV D2 2; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0001; if() #441 Body End
SETV D2 0
STORE D2 0.0002; if() #110 Else End
LOAD D2 0; for() #149 Body End AND for() #149 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 224; for() #149 End
LOAD D2 0.0001; if() #439 Body End AND InlineFunc[int Abs(int)] Params AND if() #442 Test
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 447 ==; Test 'if'
STOREV 0 0; for() #150 setup AND if() #442 Body Start
LOAD D2 0; for() #150 LoopTest
COMPAREV D2 4
GOTOCMP 311 >=
LOAD D2 0.0001
COMPAREV D2 -1
GOTOCMP 311 >
SETV D2 1
GOTO 312
SETV D2 0
COMPAREV D2 0
GOTOCMP 375 ==; for() #150 TestFail?
PUSHR D4; if() #111 Test AND for() #150 Body Start
SETV D2 0.0001; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHV 0
PUSHV 1
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0530; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 347 ==; Test 'if'
SETV D2 0.0001; if() #111 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SUBV D2 1
PUSHR D2
SETV D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0001
ADDV D2 1
STORE D2 0.0001
GOTO 371; if() #111 Body End
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params AND if() #443 Test AND if() #111 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 369 ==; Test 'if'
LOAD D2 0.0002; if() #443 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0929; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Abs(int)] Params Start
DIVV D2 2; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #443 Body End
SETV D2 0
STORE D2 0.0001; if() #111 Else End
LOAD D2 0; for() #150 Body End AND for() #150 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 303; for() #150 End
STOREV 0 0; for() #151 setup
LOAD D2 0; for() #151 LoopTest
COMPAREV D2 4
GOTOCMP 384 >=
LOAD D2 0.0001
COMPAREV D2 1
GOTOCMP 384 <
SETV D2 1
GOTO 385
SETV D2 0
COMPAREV D2 0
GOTOCMP 447 ==; for() #151 TestFail?
PUSHR D4; if() #112 Test AND for() #151 Body Start
SETV D2 0.0001; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHARGSV 1 0.0002
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0530; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 419 ==; Test 'if'
SETV D2 0.0001; if() #112 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 1
PUSHR D2
SETV D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0001
SUBV D2 1
STORE D2 0.0001
GOTO 443; if() #112 Body End
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params AND if() #444 Test AND if() #112 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 441 ==; Test 'if'
LOAD D2 0.0002; if() #444 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0929; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Abs(int)] Params Start
DIVV D2 2; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #444 Body End
SETV D2 0
STORE D2 0.0001; if() #112 Else End
LOAD D2 0; for() #151 Body End AND for() #151 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 376; for() #151 End
LOAD D2 0.0003; if() #442 Body End AND if() #445 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 455 ==; Test 'if'
LOAD D2 0.0003; if() #445 Body Start
SUBV D2 1
STORE D2 0.0003; if() #445 Body End
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 4; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #2 Body [Opt:AlwaysOn] End
GOTO 27; while() #2 End AND [Opt:NeverRet] AND void run(int) Body End
SETR D4 SP2; Func[int DirNormal(int)] Body Start
LOAD D2 0; switch() #9 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 8
GOTOCMP 492 ==; case '80000'
COMPAREV SWITCHKEY 9
GOTOCMP 494 ==; case '90000'
COMPAREV SWITCHKEY 10
GOTOCMP 496 ==; case '100000'
COMPAREV SWITCHKEY 11
GOTOCMP 498 ==; case '110000'
COMPAREV SWITCHKEY 12
GOTOCMP 500 ==; case '120000'
COMPAREV SWITCHKEY 13
GOTOCMP 502 ==; case '130000'
COMPAREV SWITCHKEY 14
GOTOCMP 504 ==; case '140000'
COMPAREV SWITCHKEY 15
GOTOCMP 506 ==; case '150000'
GOTO 508; switch() #9 NoMatch
SETV D2 0; Case block AND return Start
GOTO 509; return End
SETV D2 5; Case block AND return Start
GOTO 509; return End
SETV D2 3; Case block AND return Start
GOTO 509; return End
SETV D2 7; Case block AND return Start
GOTO 509; return End
SETV D2 1; Case block AND return Start
GOTO 509; return End
SETV D2 6; Case block AND return Start
GOTO 509; return End
SETV D2 2; Case block AND return Start
GOTO 509; return End
SETV D2 4; Case block AND return Start
GOTO 509; return End
LOAD D2 0; Case block AND return Start
POP D5; return End
RETURNFUNC; Func[int DirNormal(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0 0.0004; Func[bool CanWalk(int, int, int, int, bool)] Body Start
SETR D4 SP2
STOREV 8 0.0003
LOAD D2 0.0008
ADDV D2 15
STORE D2 0.0002
LOAD D2 0.0007
ADDV D2 15
STORE D2 0.0001
LOAD D2 0.0004; if() #29 Test
COMPAREV D2 0
GOTOCMP 544 ==; Test 'if'
SETV D2 0; if() #29 Body Start
STORE D2 0.0003; if() #29 Body End
PUSHR D4; switch() #4 Key
LOAD D2 0.0006; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 0.0472; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 0
GOTOCMP 559 ==; case '0'
COMPAREV SWITCHKEY 1
GOTOCMP 622 ==; case '10000'
COMPAREV SWITCHKEY 2
GOTOCMP 672 ==; case '20000'
COMPAREV SWITCHKEY 3
GOTOCMP 731 ==; case '30000'
GOTO 789; switch() #4 NoMatch
LOAD D2 0.0007; Case block AND return Start
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 618 <
LOAD D2 0.0008; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 618 !=
LOAD D2 0.0008; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 618 !=
LOAD D2 0.0002; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 618 !=
SETV D2 0
GOTO 619
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 801; return End
LOAD D2 0.0001; Case block AND return Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
COMPAREV D2 176
GOTOCMP 668 >=
LOAD D2 0.0008; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 668 !=
LOAD D2 0.0008; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 668 !=
LOAD D2 0.0002; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 668 !=
SETV D2 0
GOTO 669
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 801; return End
LOAD D2 0.0008; Case block AND return Start
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 727 <
LOAD D2 0.0008; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 727 !=
LOAD D2 0.0008; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
ADDV D2 7
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 727 !=
LOAD D2 0.0008; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 727 !=
SETV D2 0
GOTO 728
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 801; return End
LOAD D2 0.0002; Case block AND return Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
COMPAREV D2 256
GOTOCMP 785 >=
LOAD D2 0.0002; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 785 !=
LOAD D2 0.0002; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
ADDV D2 7
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 785 !=
LOAD D2 0.0002; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 785 !=
SETV D2 0
GOTO 786
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 801; return End
ALLOCATEMEMV D2 60 0; Case block
STORE D2 0
WRITEPODSTRING D2 "Invalid direction %d passed to CanWalk(x,y,dir,step,bool) \n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
SETV D2 0; return Start
POPARGS D5 0.0009; return End
RETURNFUNC; Func[bool CanWalk(int, int, int, int, bool)] Body End
SETR D4 SP2; Func[int CenterLinkX()] Body Start
SETV D2 0.0001; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
RETURNFUNC; return End AND Func[int CenterLinkX()] Body End
SETR D4 SP2; Func[int CenterLinkY()] Body Start
SETV D2 0.0001; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
RETURNFUNC; return End AND Func[int CenterLinkY()] Body End
SETR D4 SP2; Func[int CenterX(ffc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(ffc)] Body End
SETR D4 SP2; Func[int CenterY(ffc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(ffc)] Body End
PUSHV 0; Func[void NoAction()] Body Start
SETR D4 SP2
STOREV 0 0; for() #68 setup
LOAD D2 0; for() #68 LoopTest
COMPAREV D2 14
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 907 ==; for() #68 TestFail?
LOAD D2 0; if() #242 Test AND for() #68 Body Start
COMPAREV D2 9
GOTOCMP 877 !=
GOTO 877
SETV D2 1
GOTO 878
SETV D2 0
COMPAREV D2 0
GOTOCMP 903 !=; Test 'if' AND continue 1; AND if() #242 Body
LOAD D2 0; if() #243 Test
COMPAREV D2 6
GOTOCMP 886 !=
GOTO 886
SETV D2 1
GOTO 887
SETV D2 0
COMPAREV D2 0
GOTOCMP 903 !=; Test 'if' AND continue 1; AND if() #243 Body
SETV D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
POP D2
SETR BUTTONINPUT D2
SETV D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
POP D2
SETR BUTTONPRESS D2; for() #68 Body End
LOAD D2 0; for() #68 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 866; for() #68 End
POP D5
RETURNFUNC; Func[void NoAction()] Body End
SETR D4 SP2; Func[int VectorX(int, int)] Body Start
LOAD D2 0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR D4 SP2; Func[int VectorY(int, int)] Body Start
LOAD D2 0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
SETR D4 SP2; Func[int Sign(int)] Body Start
LOAD D2 0; if() #72 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 937 ==; Test 'if'
SETV D2 1; return Start AND if() #72 Body Start
GOTO 945; return End AND if() #72 Body End
LOAD D2 0; if() #73 Test AND if() #72 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 944 ==; Test 'if'
SETV D2 -1; return Start AND if() #73 Body Start
GOTO 945; return End AND if() #73 Body End
SETV D2 0; return Start AND if() #73 Else Start
POP D5; return End AND if() #73 Else End AND if() #72 Else End
RETURNFUNC; Func[int Sign(int)] Body End


QUIT; void run() Body
