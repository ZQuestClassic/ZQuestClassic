stderr:

Compiling 'std_unit.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 3,
    "symbols": 20,
    "identifiers": 82,
    "elided": true
  }
}

zasm:

QUIT; void run() Body
PUSHR REFDMAPDATA; void run() Body Start
PUSHARGSV 0 0.0003
SETR D4 SP2
ALLOCATEMEMV D2 100 0
STORE_OBJECT D2 0.0002
LOAD D2 0.0002; InlineFunc[void Game::GetSaveName(char32[])] Params
GETSAVENAME D2; InlineFunc[void Game::GetSaveName(char32[])] Body
ALLOCATEMEMV D2 19 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "[Test] Running %s\n"
PUSHR D2
LOAD D2 0.0002
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0002; InlineFunc[int Game::GetGenericScript(char32[])] Params
GETGENERICSCRIPT D2; InlineFunc[int Game::GetGenericScript(char32[])] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #421 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30 ==; Test 'if'
ALLOCATEMEMV D2 53 0; InlineFunc[void printf(char32[])] Params Start AND if() #421 Body Start
WRITEPODSTRING D2 "[Test] failed to start - could not find test script\n"
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #421 Body End
LOAD D2 0.0001; InlineFunc[genericdata Game::LoadGenericData(int)] Params
LOADGENERICDATA D2; InlineFunc[genericdata Game::LoadGenericData(int)] Body Start
SETR D2 REFGENERICDATA; InlineFunc[genericdata Game::LoadGenericData(int)] Body End
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFGENERICDATA
SETR GENDATARUNNING D2
LOAD D2 0; while() #2 Test
PUSHR D2
POP REFGENERICDATA
SETR D2 GENDATARUNNING
COMPAREV D2 0
GOTOCMP 52 ==; Test 'while'
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #2 Body
GOTO 44; while() #2 End
CALLFUNC 0.0661; UsrFunc[void End()] Call AND [Opt:NeverRet]
REF_REMOVE 0.0002; [Opt:NeverRet] AND void run() Body End
PUSHR REFGENERICDATA; void run() Body Start
PUSHV 0
SETR D4 SP2
STOREV 0 0
PUSHR D4
LOAD D2 0; UsrFunc[void Init(int)] Params Start
PUSHR D2; UsrFunc[void Init(int)] Params End
CALLFUNC 0.0668; UsrFunc[void Init(int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 0; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 3; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHV 1; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 0; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 1; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHV 16; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 0; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 7; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHV 17; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 0; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 5; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHV -1; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 0; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 2; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHV -1; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 9999; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 2; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHV -1; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHV 0; InlineFunc[int ComboAdjust(int, int, int)] Params Start AND UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 16
SETV D0 0; InlineFunc[int ComboAdjust(int, int, int)] Params End
POP D1; InlineFunc[int ComboAdjust(int, int, int)] Body Start
POP D2
COMBO_ADJUST D2 D1 D0; InlineFunc[int ComboAdjust(int, int, int)] Body End
PUSHR D2
PUSHV 1; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHV 1; InlineFunc[int ComboAdjust(int, int, int)] Params Start AND UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 32
SETV D0 32; InlineFunc[int ComboAdjust(int, int, int)] Params End
POP D1; InlineFunc[int ComboAdjust(int, int, int)] Body Start
POP D2
COMBO_ADJUST D2 D1 D0; InlineFunc[int ComboAdjust(int, int, int)] Body End
PUSHR D2
PUSHV 35; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHV 0; InlineFunc[int ComboAdjust(int, int, int)] Params Start AND UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV -16
SETV D0 0; InlineFunc[int ComboAdjust(int, int, int)] Params End
POP D1; InlineFunc[int ComboAdjust(int, int, int)] Body Start
POP D2
COMBO_ADJUST D2 D1 D0; InlineFunc[int ComboAdjust(int, int, int)] Body End
PUSHR D2
PUSHV 0; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void loadRegion(int, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void loadRegion(int, int)] Params End
CALLFUNC 0.0689; UsrFunc[void loadRegion(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 0; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 3; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHV 1; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 0; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 1; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHV 16; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 0; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 7; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHV 17; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 175; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 3; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHR D4; InlineFunc[int ComboAt(int, int)] Params Start
PUSHV 175; UsrFunc[int ComboX(int)] Params
CALLFUNC 0.0516; UsrFunc[int ComboX(int)] Call
POP D4
ADDV D2 16
PUSHR D2
PUSHR D4
PUSHV 175; UsrFunc[int ComboY(int)] Params
CALLFUNC 0.0559; UsrFunc[int ComboY(int)] Call
POP D4
SETR D3 D2; InlineFunc[int ComboAt(int, int)] Params End
POP D2; InlineFunc[int ComboAt(int, int)] Body Start
COMBO_AT D2 D3; InlineFunc[int ComboAt(int, int)] Body End
PUSHR D2; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 175; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 1; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHR D4; InlineFunc[int ComboAt(int, int)] Params Start
PUSHV 175; UsrFunc[int ComboX(int)] Params
CALLFUNC 0.0516; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV 175; UsrFunc[int ComboY(int)] Params
CALLFUNC 0.0559; UsrFunc[int ComboY(int)] Call
POP D4
ADDV D2 16
SETR D3 D2; InlineFunc[int ComboAt(int, int)] Params End
POP D2; InlineFunc[int ComboAt(int, int)] Body Start
COMBO_AT D2 D3; InlineFunc[int ComboAt(int, int)] Body End
PUSHR D2; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 175; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 7; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHR D4; InlineFunc[int ComboAt(int, int)] Params Start
PUSHV 175; UsrFunc[int ComboX(int)] Params
CALLFUNC 0.0516; UsrFunc[int ComboX(int)] Call
POP D4
ADDV D2 16
PUSHR D2
PUSHR D4
PUSHV 175; UsrFunc[int ComboY(int)] Params
CALLFUNC 0.0559; UsrFunc[int ComboY(int)] Call
POP D4
ADDV D2 16
SETR D3 D2; InlineFunc[int ComboAt(int, int)] Params End
POP D2; InlineFunc[int ComboAt(int, int)] Body Start
COMBO_AT D2 D3; InlineFunc[int ComboAt(int, int)] Body End
PUSHR D2; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 0; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 5; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHV -1; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 0; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 2; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHV -1; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 9999; UsrFunc[int AdjacentCombo(int, int)] Params Start
PUSHV 2; UsrFunc[int AdjacentCombo(int, int)] Params End
CALLFUNC 0.0328; UsrFunc[int AdjacentCombo(int, int)] Call
POP D4
PUSHR D2
PUSHV -1; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHV 0; InlineFunc[int ComboAdjust(int, int, int)] Params Start AND UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 16
SETV D0 0; InlineFunc[int ComboAdjust(int, int, int)] Params End
POP D1; InlineFunc[int ComboAdjust(int, int, int)] Body Start
POP D2
COMBO_ADJUST D2 D1 D0; InlineFunc[int ComboAdjust(int, int, int)] Body End
PUSHR D2
PUSHV 1; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHV 175; InlineFunc[int ComboAdjust(int, int, int)] Params Start AND UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV -16
SETV D0 0; InlineFunc[int ComboAdjust(int, int, int)] Params End
POP D1; InlineFunc[int ComboAdjust(int, int, int)] Body Start
POP D2
COMBO_ADJUST D2 D1 D0; InlineFunc[int ComboAdjust(int, int, int)] Body End
PUSHR D2
PUSHV 174; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHV 175; InlineFunc[int ComboAdjust(int, int, int)] Params Start AND UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 16
SETV D0 0; InlineFunc[int ComboAdjust(int, int, int)] Params End
POP D1; InlineFunc[int ComboAdjust(int, int, int)] Body Start
POP D2
COMBO_ADJUST D2 D1 D0; InlineFunc[int ComboAdjust(int, int, int)] Body End
PUSHR D2
PUSHV 336; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHV 175; InlineFunc[int ComboAdjust(int, int, int)] Params Start AND UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 32
SETV D0 32; InlineFunc[int ComboAdjust(int, int, int)] Params End
POP D1; InlineFunc[int ComboAdjust(int, int, int)] Body Start
POP D2
COMBO_ADJUST D2 D1 D0; InlineFunc[int ComboAdjust(int, int, int)] Body End
PUSHR D2
PUSHV 721; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
PUSHV 0; InlineFunc[int ComboAdjust(int, int, int)] Params Start AND UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV -16
SETV D0 0; InlineFunc[int ComboAdjust(int, int, int)] Params End
POP D1; InlineFunc[int ComboAdjust(int, int, int)] Body Start
POP D2
COMBO_ADJUST D2 D1 D0; InlineFunc[int ComboAdjust(int, int, int)] Body End
PUSHR D2
PUSHV 0; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.0786; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void reset(int)] Params Start
PUSHR D2; UsrFunc[void reset(int)] Params End
CALLFUNC 0.0765; UsrFunc[void reset(int)] Call
POP D4
CALLFUNC 0.0661; UsrFunc[void End()] Call AND [Opt:NeverRet] AND [Opt:NeverRet] AND void run() Body End
PUSHARGSV 0 0.0002; Func[int AdjacentCombo(int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002; if() #1 Test
COMPAREV D2 0
GOTOCMP 347 <
LOAD D2 0.0002
COMPAREV D2 15
GOTOCMP 347 >
LOAD D2 0.0003
COMPAREV D2 0
GOTOCMP 347 <
LOAD D2 0.0003
PUSHR D2
SETR D2 REGION_NUM_COMBOS
POP D3
COMPARER D3 D2
GOTOCMP 347 >=
SETV D2 0
GOTO 348
SETV D2 1
COMPAREV D2 0
GOTOCMP 352 ==; Test 'if'
SETV D2 -1; return Start AND if() #1 Body Start
GOTO 475; return End AND if() #1 Body End
PUSHR D4
LOAD D2 0.0002; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 0.0477; UsrFunc[int DirNormal(int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 0.0516; UsrFunc[int ComboX(int)] Call
POP D4
DIVV D2 16
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 0.0559; UsrFunc[int ComboY(int)] Call
POP D4
DIVV D2 16
STORE D2 0
LOAD D2 0.0002; if() #2 Test
COMPAREV D2 0
GOTOCMP 383 ==
LOAD D2 0.0002
COMPAREV D2 4
GOTOCMP 383 ==
LOAD D2 0.0002
COMPAREV D2 5
GOTOCMP 383 ==
SETV D2 0
GOTO 384
SETV D2 1
COMPAREV D2 0
GOTOCMP 389 ==; Test 'if'
LOAD D2 0; if() #2 Body Start
SUBV D2 1
STORE D2 0; if() #2 Body End
LOAD D2 0.0002; if() #3 Test
COMPAREV D2 1
GOTOCMP 400 ==
LOAD D2 0.0002
COMPAREV D2 6
GOTOCMP 400 ==
LOAD D2 0.0002
COMPAREV D2 7
GOTOCMP 400 ==
SETV D2 0
GOTO 401
SETV D2 1
COMPAREV D2 0
GOTOCMP 406 ==; Test 'if'
LOAD D2 0; if() #3 Body Start
ADDV D2 1
STORE D2 0; if() #3 Body End
LOAD D2 0.0002; if() #4 Test
COMPAREV D2 2
GOTOCMP 417 ==
LOAD D2 0.0002
COMPAREV D2 4
GOTOCMP 417 ==
LOAD D2 0.0002
COMPAREV D2 6
GOTOCMP 417 ==
SETV D2 0
GOTO 418
SETV D2 1
COMPAREV D2 0
GOTOCMP 423 ==; Test 'if'
LOAD D2 0.0001; if() #4 Body Start
SUBV D2 1
STORE D2 0.0001; if() #4 Body End
LOAD D2 0.0002; if() #5 Test
COMPAREV D2 3
GOTOCMP 434 ==
LOAD D2 0.0002
COMPAREV D2 5
GOTOCMP 434 ==
LOAD D2 0.0002
COMPAREV D2 7
GOTOCMP 434 ==
SETV D2 0
GOTO 435
SETV D2 1
COMPAREV D2 0
GOTOCMP 440 ==; Test 'if'
LOAD D2 0.0001; if() #5 Body Start
ADDV D2 1
STORE D2 0.0001; if() #5 Body End
LOAD D2 0.0001; if() #6 Test
COMPAREV D2 0
GOTOCMP 462 <
LOAD D2 0
COMPAREV D2 0
GOTOCMP 462 <
LOAD D2 0.0001
PUSHR D2
SETR D2 REGION_SCREEN_WIDTH
MULTV D2 16
POP D3
COMPARER D3 D2
GOTOCMP 462 >=
LOAD D2 0
PUSHR D2
SETR D2 REGION_SCREEN_HEIGHT
MULTV D2 11
POP D3
COMPARER D3 D2
GOTOCMP 462 >=
SETV D2 0
GOTO 463
SETV D2 1
COMPAREV D2 0
GOTOCMP 467 ==; Test 'if'
SETV D2 -1; return Start AND if() #6 Body Start
GOTO 475; return End AND if() #6 Body End
LOAD D2 0.0001; InlineFunc[int ComboAt(int, int)] Params Start AND return Start
MULTV D2 16
PUSHR D2
LOAD D2 0
MULTV D2 16
SETR D3 D2; InlineFunc[int ComboAt(int, int)] Params End
POP D2; InlineFunc[int ComboAt(int, int)] Body Start
COMBO_AT D2 D3; InlineFunc[int ComboAt(int, int)] Body End
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int AdjacentCombo(int, int)] Body End
SETR D4 SP2; Func[int DirNormal(int)] Body Start
LOAD D2 0; switch() #9 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 8
GOTOCMP 497 ==; case '80000'
COMPAREV SWITCHKEY 9
GOTOCMP 499 ==; case '90000'
COMPAREV SWITCHKEY 10
GOTOCMP 501 ==; case '100000'
COMPAREV SWITCHKEY 11
GOTOCMP 503 ==; case '110000'
COMPAREV SWITCHKEY 12
GOTOCMP 505 ==; case '120000'
COMPAREV SWITCHKEY 13
GOTOCMP 507 ==; case '130000'
COMPAREV SWITCHKEY 14
GOTOCMP 509 ==; case '140000'
COMPAREV SWITCHKEY 15
GOTOCMP 511 ==; case '150000'
GOTO 513; switch() #9 NoMatch
SETV D2 0; Case block AND return Start
GOTO 514; return End
SETV D2 5; Case block AND return Start
GOTO 514; return End
SETV D2 3; Case block AND return Start
GOTO 514; return End
SETV D2 7; Case block AND return Start
GOTO 514; return End
SETV D2 1; Case block AND return Start
GOTO 514; return End
SETV D2 6; Case block AND return Start
GOTO 514; return End
SETV D2 2; Case block AND return Start
GOTO 514; return End
SETV D2 4; Case block AND return Start
GOTO 514; return End
LOAD D2 0; Case block AND return Start
POP D5; return End
RETURNFUNC; Func[int DirNormal(int)] Body End
PUSHARGSV 0 0.0004; Func[int ComboX(int)] Body Start
SETR D4 SP2
SETR D2 REGION_ID; if() #23 Test
COMPAREV D2 0
GOTOCMP 554 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Floor(int)] Params Start AND if() #23 Body Start
DIVV D2 176; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0003
SETR D2 REGION_SCREEN_WIDTH
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0002
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
LOAD D2 0.0004
MODV D2 176
STORE D2 0
LOAD D2 0.0001; return Start
MULTV D2 16
MULTV D2 16
PUSHR D2
LOAD D2 0
MODV D2 16
MULTV D2 16
POP D3
ADDR D2 D3
GOTO 557; return End AND if() #23 Body End
LOAD D2 0.0004; return Start AND if() #23 Else Start
MODV D2 16
MULTV D2 16
POPARGS D5 0.0005; return End AND if() #23 Else End
RETURNFUNC; Func[int ComboX(int)] Body End
PUSHARGSV 0 0.0004; Func[int ComboY(int)] Body Start
SETR D4 SP2
SETR D2 REGION_ID; if() #24 Test
COMPAREV D2 0
GOTOCMP 590 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Floor(int)] Params Start AND if() #24 Body Start
DIVV D2 176; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0003
SETR D2 REGION_SCREEN_WIDTH
STORE D2 0.0002
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0002
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0004
MODV D2 176
STORE D2 0
LOAD D2 0.0001; return Start
MULTV D2 11
MULTV D2 16
PUSHR D2
LOAD D2 0
ANDV D2 240
POP D3
ADDR D2 D3
GOTO 592; return End AND if() #24 Body End
LOAD D2 0.0004; return Start AND if() #24 Else Start
ANDV D2 240
POPARGS D5 0.0005; return End AND if() #24 Else End
RETURNFUNC; Func[int ComboY(int)] Body End
SETR D4 SP2; Func[void ClearRegion(int)] Body Start
PUSHR D4
LOAD D2 0; UsrFunc[void SetRegion(int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 16
PUSHV 8
PUSHV 0; UsrFunc[void SetRegion(int, int, int, int, int)] Params End
CALLFUNC 0.0606; UsrFunc[void SetRegion(int, int, int, int, int)] Call
POP D4
POP D5
RETURNFUNC; Func[void ClearRegion(int)] Body End
PUSHARGSV 0 0.0003; Func[void SetRegion(int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0002; for() #96 setup
LOAD D2 0.0002; for() #96 LoopTest
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 659 ==; for() #96 TestFail?
STOREV 0 0.0001; for() #97 setup AND for() #96 Body Start
LOAD D2 0.0001; for() #97 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 655 ==; for() #97 TestFail?
LOAD D2 0.0006; for() #97 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
MULTV D2 16
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0007; InlineFunc[mapdata Game::LoadMapData(int, int)] Params Start
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[mapdata Game::LoadMapData(int, int)] Params End
POP D0; InlineFunc[mapdata Game::LoadMapData(int, int)] Body Start
SETR D2 LOADMAPDATA; InlineFunc[mapdata Game::LoadMapData(int, int)] Body End
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFMAPDATA
SETR MAPDATAREGIONID D2; for() #97 Body End
LOAD D2 0.0001; for() #97 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 618; for() #97 End
LOAD D2 0.0002; for() #96 Body End AND for() #96 LoopIncrement
ADDV D2 1
STORE D2 0.0002
GOTO 609; for() #96 End
POPARGS D5 0.0008
RETURNFUNC; Func[void SetRegion(int, int, int, int, int)] Body End
SETR D4 SP2; Func[void End()] Body Start
ALLOCATEMEMV D2 13 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "[Test] done\n"
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND [Opt:NeverRet] AND Func[void End()] Body End
SETR D4 SP2; Func[void Init(int)] Body Start
ALLOCATEMEMV D2 35 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "[Test] started: dmap %d screen %d\n"
PUSHR D2
PUSHVARGV 5
LOAD D2 0
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; if() #420 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 687 ==; Test 'if'
PUSHV 5; InlineFunc[void hero::Warp(int, int)] Params Start AND if() #420 Body Start
LOAD D2 0; InlineFunc[void hero::Warp(int, int)] Params End
POP D3; InlineFunc[void hero::Warp(int, int)] Body Start
WARPR D3 D2; InlineFunc[void hero::Warp(int, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND if() #420 Body End
POP D5
RETURNFUNC; Func[void Init(int)] Body End
PUSHARGSV 0 0.0004; Func[void loadRegion(int, int)] Body Start
SETR D4 SP2
SETV D2 5; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATAMAP
STORE D2 0.0003
STOREV 0 0.0002; for() #150 setup
LOAD D2 0.0002; for() #150 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 758 ==; for() #150 TestFail?
STOREV 0 0.0001; for() #151 setup AND for() #150 Body Start
LOAD D2 0.0001; for() #151 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 754 ==; for() #151 TestFail?
LOAD D2 0.0003; InlineFunc[mapdata Game::LoadMapData(int, int)] Params Start AND for() #151 Body Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
MULTV D2 16
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[mapdata Game::LoadMapData(int, int)] Params End
POP D0; InlineFunc[mapdata Game::LoadMapData(int, int)] Body Start
SETR D2 LOADMAPDATA; InlineFunc[mapdata Game::LoadMapData(int, int)] Body End
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFMAPDATA
SETR MAPDATAVALID D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFMAPDATA
SETR MAPDATAREGIONID D2; for() #151 Body End
LOAD D2 0.0001; for() #151 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 708; for() #151 End
LOAD D2 0.0002; for() #150 Body End AND for() #150 LoopIncrement
ADDV D2 1
STORE D2 0.0002
GOTO 699; for() #150 End
PUSHV 5; InlineFunc[void hero::Warp(int, int)] Params Start
LOAD D2 0.0005; InlineFunc[void hero::Warp(int, int)] Params End
POP D3; InlineFunc[void hero::Warp(int, int)] Body Start
WARPR D3 D2; InlineFunc[void hero::Warp(int, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body
POPARGS D5 0.0006
RETURNFUNC; Func[void loadRegion(int, int)] Body End
PUSHV 0; Func[void reset(int)] Body Start
SETR D4 SP2
SETV D2 5; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATAMAP
STORE D2 0
PUSHR D4
LOAD D2 0; UsrFunc[void ClearRegion(int)] Params Start
PUSHR D2; UsrFunc[void ClearRegion(int)] Params End
CALLFUNC 0.0594; UsrFunc[void ClearRegion(int)] Call
POP D4
PUSHV 5; InlineFunc[void hero::Warp(int, int)] Params Start
SETV D2 0; InlineFunc[void hero::Warp(int, int)] Params End
POP D3; InlineFunc[void hero::Warp(int, int)] Body Start
WARPR D3 D2; InlineFunc[void hero::Warp(int, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body
POPARGS D5 0.0002
RETURNFUNC; Func[void reset(int)] Body End
SETR D4 SP2; Func[void AssertEqual(int, int)] Body Start
LOAD D2 0; if() #422 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 805 ==; Test 'if'
ALLOCATEMEMV D2 49 0; InlineFunc[void printf(char32[])] Params Start AND if() #422 Body Start
WRITEPODSTRING D2 "[Test] failed assertion: expected %d but got %d\n"
PUSHR D2
LOAD D2 0
PUSHVARGR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #422 Body End
POPARGS D5 0.0002
RETURNFUNC; Func[void AssertEqual(int, int)] Body End
