stderr:

Compiling 'garbage_collection.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 84,
    "symbols": 147,
    "identifiers": 629,
    "elided": true
  }
}

zasm:

PUSHARGSV 0 0.0006; void run() Body Start
SETR D4 SP2
ALLOCATEMEMV D2 100 0
STORE D2 0.0004
LOAD D2 0.0004; InlineFunc[void Game::GetSaveName(char32[])] Params
GETSAVENAME D2; InlineFunc[void Game::GetSaveName(char32[])] Body
ALLOCATEMEMV D2 19 0
STORE D2 0.0003
WRITEPODSTRING D2 "[Test] Running %s\n"
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D2 0.0004; InlineFunc[int Game::GetGenericScript(char32[])] Params
GETGENERICSCRIPT D2; InlineFunc[int Game::GetGenericScript(char32[])] Body
STORE D2 0.0002
LOAD D2 0.0002; if() #437 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36 ==; Test 'if'
ALLOCATEMEMV D2 53 0; if() #437 Body Start
STORE D2 0.0001
WRITEPODSTRING D2 "[Test] failed to start - could not find test script\n"
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0001
DEALLOCATEMEMR D3
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #437 Body End
LOAD D2 0.0002; InlineFunc[genericdata Game::LoadGenericData(int)] Params
LOADGENERICDATA D2; InlineFunc[genericdata Game::LoadGenericData(int)] Body Start
SETR D2 REFGENERICDATA; InlineFunc[genericdata Game::LoadGenericData(int)] Body End
STORE D2 0.0001
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFGENERICDATA
SETR GENDATARUNNING D2
LOAD D2 0.0001; while() #2 Test
PUSHR D2
POP REFGENERICDATA
SETR D2 GENDATARUNNING
COMPAREV D2 0
GOTOCMP 58 ==; Test 'while'
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #2 Body
GOTO 50; while() #2 End
ALLOCATEMEMV D2 13 0
STORE D2 0
WRITEPODSTRING D2 "[Test] done\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
GAMEEXIT; InlineFunc[void Game::Exit()] Body
LOAD D3 0.0004
DEALLOCATEMEMR D3; [Opt:NeverRet] AND void run() Body End


PUSHR REFGENERICDATA; void run() Body Start
PUSHARGSV 0 0.0054
SETR D4 SP2
PUSHR D4
PUSHV 5; UsrFunc[void Init(int, int)] Params Start
PUSHV 15; UsrFunc[void Init(int, int)] Params End
CALLFUNC 0.2457; UsrFunc[void Init(int, int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0053
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0053; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0053
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0052
ALLOCATEMEMV D2 16 0
STORE D2 0.0051
WRITEPODSTRING D2 "(1) RefCount(a)"
PUSHR D4
LOAD D2 0.0051; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0052; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0051
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 16 0
STORE D2 0.0050
WRITEPODSTRING D2 "(2) RefCount(a)"
PUSHR D4
LOAD D2 0.0050; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0052; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0050
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0052
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0052
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0052; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0052
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0051
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0050
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0050; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0051; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0050
DEALLOCATEMEMR D3
LOAD D2 0.0051
STORE_OBJECT D2 0.0051
ALLOCATEMEMV D2 12 0
STORE D2 0.0049
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0049; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0051; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0049
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0051
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0051
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0051; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0051
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0050
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0049
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0049; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0050; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0049
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0050
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0050
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0050; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0050
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0049
PUSHR CLASS_THISKEY
PUSHR D4
CALLFUNC 0.2621; ClassFunc[Hat Hat::Hat()] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2
LOAD D2 0.0049
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0.0001
ALLOCATEMEMV D2 17 0
STORE D2 0.0048
WRITEPODSTRING D2 "RefCount(a->hat)"
PUSHR D4
LOAD D2 0.0048; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0049; InlineFunc[long RefCount(untyped)] Params Start
ZCLASS_READ D2 0.0001; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0048
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 2; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0049
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
PEEK D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0049
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0049; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0049
DEALLOCATEMEMR D3
LOADRNG; InlineFunc[randgen randgen::randgen()] Body
STORE_OBJECT D2 0.0048
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0047
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0047; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0048; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0047
DEALLOCATEMEMR D3
REF_REMOVE 0.0048
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0048
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0048; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0048
DEALLOCATEMEMR D3
STOREV 0 0.0047
LOADRNG; InlineFunc[randgen Game::LoadRNG()] Body
STORE_OBJECT D2 0.0046
LOAD D2 0.0046
STORE D2 0.0047
ALLOCATEMEMV D2 14 0
STORE D2 0.0045
WRITEPODSTRING D2 "RefCount(rng)"
PUSHR D4
LOAD D2 0.0045; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0045
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
REF_REMOVE 0.0046
ALLOCATEMEMV D2 18 0
STORE D2 0.0046
WRITEPODSTRING D2 "RefCount(scratch)"
PUSHR D4
LOAD D2 0.0046; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0047; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0046
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0047
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0047; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0047
DEALLOCATEMEMR D3
STOREV 0 0.0046
LOADRNG; InlineFunc[randgen Game::LoadRNG()] Body
STORE_OBJECT D2 0.0045
LOAD D2 0.0045
STORE D2 0.0046
ALLOCATEMEMV D2 14 0
STORE D2 0.0044
WRITEPODSTRING D2 "RefCount(rng)"
PUSHR D4
LOAD D2 0.0044; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0045; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0044
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
REF_REMOVE 0.0045
ALLOCATEMEMV D2 18 0
STORE D2 0.0045
WRITEPODSTRING D2 "RefCount(scratch)"
PUSHR D4
LOAD D2 0.0045; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0045
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0046
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0046; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0046
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 6 0
STORE D2 0.0045
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0045; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0045
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0045
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0045; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0045
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
GC; InlineFunc[void GC()] Body
ALLOCATEMEMV D2 6 0
STORE D2 0.0044
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0044; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0044
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0044
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0044; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0044
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 10; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
STORE D2 0.0043
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 4 0
STORE D2 0.0042
WRITEPODSTRING D2 "age"
PUSHR D4
LOAD D2 0.0042; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 10; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0042
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 6 0
STORE D2 0.0041
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0041; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0041
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0043
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0043; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0043
DEALLOCATEMEMR D3
STOREV 0 0.0042
REF_REMOVE 0.0042
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0042
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0042; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0042
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 10; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
PUSHR D2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 20; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
POP D3
ADDR D2 D3
STORE D2 0.0041
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 4 0
STORE D2 0.0040
WRITEPODSTRING D2 "age"
PUSHR D4
LOAD D2 0.0040; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0041
PUSHR D2
PUSHV 30; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0040
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 6 0
STORE D2 0.0039
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0039; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0039
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0041
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0041; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0041
DEALLOCATEMEMR D3
SETR D2 GD1
PUSHR D2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD1
POP D3
ADDR D2 D3
PUSHR D2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD1
POP D3
ADDR D2 D3
STORE D2 0.0040
ALLOCATEMEMV D2 2 0
STORE D2 0.0039
WRITEPODSTRING D2 "c"
PUSHR D4
LOAD D2 0.0039; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 3; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0039
DEALLOCATEMEMR D3
GC; InlineFunc[void GC()] Body
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0040
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0040; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0040
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 23 0
STORE D2 0.0039
WRITEPODSTRING D2 "RefCount(new Person())"
PUSHR D4
LOAD D2 0.0039; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR CLASS_THISKEY; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0039
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
PEEK D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0039
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0039; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0039
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0038
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
LOAD D2 0.0038
SET_OBJECT GD5 D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0037
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0037; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0038; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0037
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0038
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
SETV D2 0
SET_OBJECT GD5 D2
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0038
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0038; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0038
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0037
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
PEEK D4
LOAD D2 0.0037; UsrFunc[void usePerson1(Person)] Params Start
PUSHR D2; UsrFunc[void usePerson1(Person)] Params End
CALLFUNC 0.2632; UsrFunc[void usePerson1(Person)] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0036
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0036; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0037; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0036
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0037
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0037
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0037; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0037
DEALLOCATEMEMR D3
PUSHR D4
PUSHR CLASS_THISKEY; UsrFunc[void usePerson2(Person)] Params Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2; UsrFunc[void usePerson2(Person)] Params End
CALLFUNC 0.2653; UsrFunc[void usePerson2(Person)] Call
PEEK D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
PEEK D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0036
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0036; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0036
DEALLOCATEMEMR D3
PUSHR D4
PUSHR CLASS_THISKEY; UsrFunc[Person usePerson3(Person)] Params Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2; UsrFunc[Person usePerson3(Person)] Params End
CALLFUNC 0.2680; UsrFunc[Person usePerson3(Person)] Call
POP D4
STORE_OBJECT D2 0.0035
ALLOCATEMEMV D2 12 0
STORE D2 0.0034
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0034; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0035; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0034
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0033
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0033; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0035; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0033
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0035
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0035
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0035; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0035
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.2573; UsrFunc[Person createPerson1()] Call
POP D4
STORE_OBJECT D2 0.0034
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0033
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0033; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0034; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0033
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0034
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0034
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0034; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0034
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.2606; UsrFunc[Person createPerson2()] Call
POP D4
STORE_OBJECT D2 0.0033
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0032
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0032; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0033; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0032
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0033
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0033
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0033; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0033
DEALLOCATEMEMR D3
PUSHARGSR D4 0.0002; UsrFunc[Person usePerson3(Person)] Params Start
CALLFUNC 0.2606; UsrFunc[Person createPerson2()] Call
POP D4
PUSHR D2; UsrFunc[Person usePerson3(Person)] Params End
CALLFUNC 0.2680; UsrFunc[Person usePerson3(Person)] Call
POP D4
STORE_OBJECT D2 0.0032
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0031
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0031; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0032; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0031
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0032
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0032
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0032; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0032
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0031
ALLOCATEMEMV D2 12 0
STORE D2 0.0030
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0030; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0031; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0030
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
PEEK D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
REF_REMOVE 0.0031
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0031
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0031; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0031
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0030
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0029
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0029; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0030; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0029
DEALLOCATEMEMR D3
LOAD D2 0.0030
STORE_OBJECT D2 0.0028
ALLOCATEMEMV D2 12 0
STORE D2 0.0027
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0027; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0030; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0027
DEALLOCATEMEMR D3
LOAD D2 0.0028
STORE_OBJECT D2 0.0026
ALLOCATEMEMV D2 12 0
STORE D2 0.0025
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0025; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0030; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0025
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0030
REF_REMOVE 0.0028
REF_REMOVE 0.0026
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0030
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0030; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0030
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0029
ALLOCATEMEMV D2 10 0
STORE D2 0.0028
WRITEPODSTRING D2 "(1) count"
PUSHR D4
LOAD D2 0.0028; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0028
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0027
ALLOCATEMEMV D2 10 0
STORE D2 0.0026
WRITEPODSTRING D2 "(2) count"
PUSHR D4
LOAD D2 0.0026; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 2; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0026
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 16 0
STORE D2 0.0025
WRITEPODSTRING D2 "(3) RefCount(a)"
PUSHR D4
LOAD D2 0.0025; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0029; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0025
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 16 0
STORE D2 0.0024
WRITEPODSTRING D2 "(4) RefCount(b)"
PUSHR D4
LOAD D2 0.0024; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0027; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0024
DEALLOCATEMEMR D3
LOAD D2 0.0029
STORE_OBJECT D2 0.0027
ALLOCATEMEMV D2 10 0
STORE D2 0.0023
WRITEPODSTRING D2 "(5) count"
PUSHR D4
LOAD D2 0.0023; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0023
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 16 0
STORE D2 0.0022
WRITEPODSTRING D2 "(6) RefCount(a)"
PUSHR D4
LOAD D2 0.0022; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0029; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0022
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 16 0
STORE D2 0.0021
WRITEPODSTRING D2 "(7) RefCount(b)"
PUSHR D4
LOAD D2 0.0021; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0027; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0021
DEALLOCATEMEMR D3
REF_REMOVE 0.0029
REF_REMOVE 0.0027
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0029
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0029; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0029
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0028
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
LOAD D2 0.0028
PUSHR D2
SETR D2 GD4
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETR D2 GD4
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
SETR D2 GD4
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0027
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0027; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0028; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0027
DEALLOCATEMEMR D3
SETV D2 0
PUSHR D2
SETR D2 GD4
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0026
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0026; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0028; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0026
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0028
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
SETV D2 0
PUSHR D2
SETR D2 GD4
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0028
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0028; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0028
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0027
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0026
PUSHR D4
PUSHV 2; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0026
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0027
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0027
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0027; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0027
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0026
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
PUSHR GD4; InlineFunc[bool ArrayPushBack(Person[], Person)] Params Start
LOAD D2 0.0026
PUSHR D2; InlineFunc[bool ArrayPushBack(Person[], Person)] Params End
PUSHV -1; InlineFunc[bool ArrayPushBack(Person[], Person)] Body Start
ARRAYPUSH
POPARGS D5 0.0003; InlineFunc[bool ArrayPushBack(Person[], Person)] Body End
ALLOCATEMEMV D2 12 0
STORE D2 0.0025
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0025; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0026; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0025
DEALLOCATEMEMR D3
LOAD D2 0.0026
STORE_OBJECT D2 0.0024
SETV D2 0
STORE_OBJECT D2 0.0026
ALLOCATEMEMV D2 12 0
STORE D2 0.0023
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0023; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0024; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0023
DEALLOCATEMEMR D3
PUSHR GD4; InlineFunc[Person ArrayPopBack(Person[])] Params
PUSHV -1; InlineFunc[Person ArrayPopBack(Person[])] Body Start
ARRAYPOP
POPARGS D5 0.0002; InlineFunc[Person ArrayPopBack(Person[])] Body End
ALLOCATEMEMV D2 12 0
STORE D2 0.0022
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0022; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0024; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0022
DEALLOCATEMEMR D3
REF_REMOVE 0.0026
REF_REMOVE 0.0024
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0026
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0026; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0026
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0025
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 1 0.0008
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0025
POP D0
WRITEPODARRAYVR 0 D2
POP D2
STORE D2 0.0023
ALLOCATEMEMV D2 12 0
STORE D2 0.0022
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0022; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0023; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0022
DEALLOCATEMEMR D3
LOAD D3 0.0023
DEALLOCATEMEMR D3
REF_REMOVE 0.0025
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0025
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0025; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0025
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 1 0.0008
PUSHR D2
SETR D0 D2
PUSHR D0
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
POP D0
WRITEPODARRAYVR 0 D2
POP D2
STORE D2 0.0023
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0022
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0022; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0023; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0022
DEALLOCATEMEMR D3
LOAD D3 0.0023
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0024
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0024; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0024
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 1 0.0008
PUSHR D2
SETR D0 D2
PUSHR D0
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
POP D0
WRITEPODARRAYVR 0 D2
POP D2
STORE D2 0.0022
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
LOAD D2 0.0022; InlineFunc[void ResizeArray(Person[], int)] Params Start
PUSHR D2
SETV D3 0; InlineFunc[void ResizeArray(Person[], int)] Params End
POP D2; InlineFunc[void ResizeArray(Person[], int)] Body Start
RESIZEARRAYR D2 D3; InlineFunc[void ResizeArray(Person[], int)] Body End
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
LOAD D3 0.0022
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0023
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0023; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0023
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0022
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0021
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0022
ZCLASS_READ D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0020
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0020; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0021; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0020
DEALLOCATEMEMR D3
REF_REMOVE 0.0022
REF_REMOVE 0.0021
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0022
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0022; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0022
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0021
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0021
ZCLASS_READ D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0020
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0020; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0021; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0020
DEALLOCATEMEMR D3
REF_REMOVE 0.0021
ALLOCATEMEMV D2 6 0
STORE D2 0.0021
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0021; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0021
DEALLOCATEMEMR D3
GC; InlineFunc[void GC()] Body
ALLOCATEMEMV D2 6 0
STORE D2 0.0020
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0020; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0020
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0019
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0019; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0019
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0018
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0017
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
LOAD D2 0.0017
PUSHR D2
LOAD D2 0.0018
ZCLASS_READ D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0017
ZCLASS_READ D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0016
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0016; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0018; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0016
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 12 0
STORE D2 0.0015
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0015; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0017; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0015
DEALLOCATEMEMR D3
SETV D2 0
STORE_OBJECT D2 0.0018
ALLOCATEMEMV D2 25 0
STORE D2 0.0014
WRITEPODSTRING D2 "RefCount(b->children[0])"
PUSHR D4
LOAD D2 0.0014; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0017; InlineFunc[long RefCount(untyped)] Params Start
ZCLASS_READ D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0014
DEALLOCATEMEMR D3
REF_REMOVE 0.0018
REF_REMOVE 0.0017
ALLOCATEMEMV D2 6 0
STORE D2 0.0018
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0018; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 2; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0018
DEALLOCATEMEMR D3
GC; InlineFunc[void GC()] Body
ALLOCATEMEMV D2 6 0
STORE D2 0.0017
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0017; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0017
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0016
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0016; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0016
DEALLOCATEMEMR D3
STOREV 0 0.0015
ALLOCATEMEMV D2 12 0
STORE D2 0.0014
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0014; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0015; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0014
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0015
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0013
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0013; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0015; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0013
DEALLOCATEMEMR D3
LOAD D2 0.0015
ZCLASS_FREE D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0012
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0012; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0015; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0012
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0015
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0015
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0015; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0015
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE D2 0.0014
ALLOCATEMEMV D2 12 0
STORE D2 0.0013
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0013; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0014; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0013
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 10 0
STORE D2 0.0012
WRITEPODSTRING D2 "(1) count"
PUSHR D4
LOAD D2 0.0012; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0012
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 10 0
STORE D2 0.0011
WRITEPODSTRING D2 "(2) count"
PUSHR D4
LOAD D2 0.0011; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0011
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0014
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0014; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0014
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE D2 0.0013
LOAD D2 0.0013
STORE_OBJECT D2 0.0012
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0011
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0011; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0013; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0011
DEALLOCATEMEMR D3
REF_REMOVE 0.0012
ALLOCATEMEMV D2 6 0
STORE D2 0.0013
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0013; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0013
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0012
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0012; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0012
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE D2 0.0011
LOAD D2 0.0011
STORE_OBJECT D2 0.0010
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0009
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0009; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0011; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0009
DEALLOCATEMEMR D3
SETV D2 0
STORE_OBJECT D2 0.0010
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0010
ALLOCATEMEMV D2 6 0
STORE D2 0.0011
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0011; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0011
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0010
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0010; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0010
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0009
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0007
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0007; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0009; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0007
DEALLOCATEMEMR D3
SETV D2 0
STORE_OBJECT D2 0.0009
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0009
ALLOCATEMEMV D2 6 0
STORE D2 0.0009
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0009; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0009
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0008
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0008; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0008
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 2 0
STORE D2 0.0007
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0006
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0005
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0005; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0006; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0005
DEALLOCATEMEMR D3
REF_REMOVE 0.0006
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
LOAD D3 0.0007
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0007
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0007; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0007
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0006
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0005
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0005; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0006; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0005
DEALLOCATEMEMR D3
STOREV 0 0.0004; for() #149 setup
LOAD D2 0.0004; for() #149 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2277 ==; for() #149 TestFail?
ALLOCATEMEMV D2 12 0; for() #149 Body Start
STORE D2 0.0003
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0003; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0006; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D2 0.0006
STORE_OBJECT D2 0.0002
ALLOCATEMEMV D2 12 0
STORE D2 0.0001
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0001; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0006; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
PEEK D4
PUSHV 2; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0002
REF_REMOVE 0; for() #149 Body End
LOAD D2 0.0004; for() #149 LoopIncrement
ADDV D2 1
STORE D2 0.0004
GOTO 2223; for() #149 End
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0006
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0006
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0006; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0006
DEALLOCATEMEMR D3
STOREV 0 0.0005; for() #150 setup
LOAD D2 0.0005; for() #150 LoopTest
COMPAREV D2 300
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2325 ==; for() #150 TestFail?
LOADRNG; InlineFunc[randgen Game::LoadRNG()] Body AND for() #150 Body Start
STORE_OBJECT D2 0.0004
LOAD D2 0.0004; if() #440 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2320 ==; Test 'if'
ALLOCATEMEMV D2 28 0; if() #440 Body Start
STORE D2 0.0003
WRITEPODSTRING D2 "failed to allocate randgen\n"
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0003
DEALLOCATEMEMR D3; if() #440 Body End
REF_REMOVE 0.0004; for() #150 Body End
LOAD D2 0.0005; for() #150 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 2299; for() #150 End
GC; InlineFunc[void GC()] Body
ALLOCATEMEMV D2 18 0
STORE D2 0.0005
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0005; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0005
DEALLOCATEMEMR D3
SETV D2 -1; InlineFunc[bitmap Game::LoadBitmapID(int)] Params
LOADBITMAPDATAR D2; InlineFunc[bitmap Game::LoadBitmapID(int)] Body Start
SETR D2 REFBITMAP; InlineFunc[bitmap Game::LoadBitmapID(int)] Body End
STORE_OBJECT D2 0.0004
SETV D2 0; InlineFunc[bitmap Game::LoadBitmapID(int)] Params
LOADBITMAPDATAR D2; InlineFunc[bitmap Game::LoadBitmapID(int)] Body Start
SETR D2 REFBITMAP; InlineFunc[bitmap Game::LoadBitmapID(int)] Body End
STORE_OBJECT D2 0.0003
ALLOCATEMEMV D2 25 0
STORE D2 0.0002
WRITEPODSTRING D2 "RefCount(internal_bmp_1)"
PUSHR D4
LOAD D2 0.0002; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0004; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0002
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 25 0
STORE D2 0.0001
WRITEPODSTRING D2 "RefCount(internal_bmp_2)"
PUSHR D4
LOAD D2 0.0001; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
PEEK D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
SETV D2 0
STORE_OBJECT D2 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
PUSHV 256; InlineFunc[bitmap Game::CreateBitmap(int, int)] Params Start
SETV D1 256; InlineFunc[bitmap Game::CreateBitmap(int, int)] Params End
POP D0; InlineFunc[bitmap Game::CreateBitmap(int, int)] Body Start
SETR D2 CREATEBITMAP; InlineFunc[bitmap Game::CreateBitmap(int, int)] Body End
STORE_OBJECT D2 0.0004
ALLOCATEMEMV D2 25 0
STORE D2 0
WRITEPODSTRING D2 "RefCount(internal_bmp_1)"
PUSHR D4
LOAD D2 0; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0004; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
REF_REMOVE 0.0004
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0004
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0004; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0004
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
LOAD D2 0.0003; InlineFunc[void GlobalObject(untyped)] Params
ZCLASS_GLOBALIZE D2; InlineFunc[void GlobalObject(untyped)] Body
REF_REMOVE 0.0003
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.2526; UsrFunc[void checkCountWithGC(int)] Call
POP D4
SETR D2 GD3; while() #3 Test
COMPAREV D2 100
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2455 ==; Test 'while'
PUSHR D4; while() #3 Body Start
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4; while() #3 Body End
GOTO 2446; while() #3 End
POPARGS D5 0.0055
QUIT; void run() Body End
PUSHV 0; Func[void Init(int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 35 0
STORE D2 0
WRITEPODSTRING D2 "[Test] started: dmap %d screen %d\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHVARGR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D2 0.0002; if() #436 Test
COMPAREV D2 5
GOTOCMP 2480 !=
LOAD D2 0.0001
COMPAREV D2 15
GOTOCMP 2480 !=
SETV D2 0
GOTO 2481
SETV D2 1
COMPAREV D2 0
GOTOCMP 2488 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[void hero::Warp(int, int)] Params Start AND if() #436 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void hero::Warp(int, int)] Params End
POP D3; InlineFunc[void hero::Warp(int, int)] Body Start
WARPR D3 D2; InlineFunc[void hero::Warp(int, int)] Body End AND if() #436 Body End
POPARGS D5 0.0003
RETURNFUNC; Func[void Init(int, int)] Body End
SETR D4 SP2; Func[void check(char32[], int, int)] Body Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.2500; UsrFunc[void AssertEqual(int, int)] Call
POP D4
POPARGS D5 0.0003
RETURNFUNC; Func[void check(char32[], int, int)] Body End
PUSHV 0; Func[void AssertEqual(int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #441 Test
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2524 ==; Test 'if'
ALLOCATEMEMV D2 49 0; if() #441 Body Start
STORE D2 0
WRITEPODSTRING D2 "[Test] failed assertion: expected %d but got %d\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHVARGR D2
LOAD D2 0.0002
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #441 Body End
POPARGS D5 0.0003
RETURNFUNC; Func[void AssertEqual(int, int)] Body End
PUSHV 0; Func[void checkCountWithGC(int)] Body Start
SETR D4 SP2
SETR D2 GD1; if() #438 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2549 ==; Test 'if'
ALLOCATEMEMV D2 6 0; if() #438 Body Start
STORE D2 0
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
LOAD D2 0.0001
PUSHR D2; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3; if() #438 Body End
GC; InlineFunc[void GC()] Body
SETR D2 GD1; if() #439 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2571 ==; Test 'if'
ALLOCATEMEMV D2 16 0; if() #439 Body Start
STORE D2 0
WRITEPODSTRING D2 "count (post GC)"
PUSHR D4
LOAD D2 0; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
LOAD D2 0.0001
PUSHR D2; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3; if() #439 Body End
POPARGS D5 0.0002
RETURNFUNC; Func[void checkCountWithGC(int)] Body End
PUSHV 0; Func[Person createPerson1()] Body Start
SETR D4 SP2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0
LOAD D2 0; return Start
REF_AUTORELEASE D2
REF_REMOVE 0
POP D5; return End
RETURNFUNC; Func[Person createPerson1()] Body End
SETV D2 0.2718; Func[Person Person::Person(int)] Body Start
SETR CLASS_THISKEY2 CLASS_THISKEY
ZCLASS_CONSTRUCT CLASS_THISKEY {0.0002,0.0003}
ZCLASS_MARK_TYPE {0.0002,0.0008,0.0001,0.0008}
SETR D4 SP2
PUSHR CLASS_THISKEY2
SETR D2 GD1
ADDV D2 1
SETR GD1 D2
LOAD D2 0
PUSHR D2
SETR D2 CLASS_THISKEY
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0
POP D5
SETR D2 CLASS_THISKEY
POP CLASS_THISKEY
RETURNFUNC; Func[Person Person::Person(int)] Body End
SETR D4 SP2; Func[Person createPerson2()] Body Start
PUSHR CLASS_THISKEY; return Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
REF_AUTORELEASE D2
RETURNFUNC; return End AND Func[Person createPerson2()] Body End
SETR D4 SP2; Func[void yield()] Body Start
WAITFRAME; InlineFunc[void Waitframe()] Body
SETR D2 GD3
ADDV D2 1
SETR GD3 D2
RETURNFUNC; Func[void yield()] Body End
SETV D2 0.2712; Func[Hat Hat::Hat()] Body Start
SETR CLASS_THISKEY2 CLASS_THISKEY
ZCLASS_CONSTRUCT CLASS_THISKEY {0}
SETR D4 SP2
PUSHR CLASS_THISKEY2
SETR D2 GD1
ADDV D2 1
SETR GD1 D2
SETR D2 CLASS_THISKEY
POP CLASS_THISKEY
RETURNFUNC; Func[Hat Hat::Hat()] Body End
PUSHV 0; Func[void usePerson1(Person)] Body Start
SETR D4 SP2
MARK_TYPE_STACK 0.0001 0.0001
REF_INC 0.0001
ALLOCATEMEMV D2 17 0
STORE D2 0
WRITEPODSTRING D2 "RefCount(person)"
PUSHR D4
LOAD D2 0; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
REF_REMOVE 0.0001
POPARGS D5 0.0002
RETURNFUNC; Func[void usePerson1(Person)] Body End
PUSHV 0; Func[void usePerson2(Person)] Body Start
SETR D4 SP2
MARK_TYPE_STACK 0.0001 0.0001
REF_INC 0.0001
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ALLOCATEMEMV D2 17 0
STORE D2 0
WRITEPODSTRING D2 "RefCount(person)"
PUSHR D4
LOAD D2 0; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
REF_REMOVE 0.0001
POPARGS D5 0.0002
RETURNFUNC; Func[void usePerson2(Person)] Body End
PUSHV 0; Func[Person usePerson3(Person)] Body Start
SETR D4 SP2
MARK_TYPE_STACK 0.0001 0.0001
REF_INC 0.0001
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.2587; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D4
CALLFUNC 0.2615; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 17 0
STORE D2 0
WRITEPODSTRING D2 "RefCount(person)"
PUSHR D4
LOAD D2 0; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.2490; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D2 0.0001; return Start
REF_AUTORELEASE D2
REF_REMOVE 0.0001; return End
POPARGS D5 0.0002
RETURNFUNC; Func[Person usePerson3(Person)] Body End
STARTDESTRUCTOR "Hat"; Func[void ~Hat::Hat()] Body Start
SETR D4 SP2
SETR D2 GD1
SUBV D2 1
SETR GD1 D2
RETURNFUNC; Func[void ~Hat::Hat()] Body End
STARTDESTRUCTOR "Person"; Func[void ~Person::Person()] Body Start
SETR D4 SP2
SETR D2 GD1
SUBV D2 1
SETR GD1 D2
RETURNFUNC; Func[void ~Person::Person()] Body End


SETV GD1 0; void run() Body Start
SETV GD3 0
MARK_TYPE_REG GD5 0.0008
SETV GD5 0
ALLOCATEGMEMV D2 10 0.0008
SETR GD4 D2
SETV GD2 0
QUIT; void run() Body End
