stderr:

Compiling 'garbage_collection.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
garbage_collection.zs Line 207 @ Columns 19-32 - Warning S094: Function 'Game::LoadRNG()' is deprecated, and should not be used.

205    int scratch;
206    {
207        randgen rng = Game->LoadRNG();
                         ^~~~~~~~~~~~~


INFO: Use `new randgen()` instead.
garbage_collection.zs Line 219 @ Columns 25-38 - Warning S094: Function 'Game::LoadRNG()' is deprecated, and should not be used.

217    int scratch;
218    {
219        const randgen rng = Game->LoadRNG();
                               ^~~~~~~~~~~~~


INFO: Use `new randgen()` instead.
garbage_collection.zs Line 678 @ Columns 19-32 - Warning S094: Function 'Game::LoadRNG()' is deprecated, and should not be used.

676    for (int i = 0; i < 300; i++)
677    {
678        randgen rng = Game->LoadRNG();
                         ^~~~~~~~~~~~~


INFO: Use `new randgen()` instead.
Pass 5: Checking code paths
Pass 6: Generating object code
garbage_collection.zs Line 596 @ Columns 4-12 - Warning S094: The operator 'delete' is deprecated, and should not be used.

594    a = new Person();
595    check("RefCount(a)", RefCount(a), 1L);
596    delete a;
       ^~~~~~~~


INFO: This operator no longer does anything. Objects are freed automatically when they become unreachable
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [
    {
      "range": {
        "start": {
          "line": 206,
          "character": 18
        },
        "end": {
          "line": 206,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::LoadRNG()' is deprecated, and should not be used.\nUse `new randgen()` instead."
    },
    {
      "range": {
        "start": {
          "line": 218,
          "character": 24
        },
        "end": {
          "line": 218,
          "character": 37
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::LoadRNG()' is deprecated, and should not be used.\nUse `new randgen()` instead."
    },
    {
      "range": {
        "start": {
          "line": 677,
          "character": 18
        },
        "end": {
          "line": 677,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::LoadRNG()' is deprecated, and should not be used.\nUse `new randgen()` instead."
    },
    {
      "range": {
        "start": {
          "line": 595,
          "character": 3
        },
        "end": {
          "line": 595,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S094: The operator 'delete' is deprecated, and should not be used.\nThis operator no longer does anything. Objects are freed automatically when they become unreachable"
    }
  ],
  "metadata": {
    "currentFileSymbols": 128,
    "symbols": 94,
    "identifiers": 1015,
    "elided": true
  }
}

zasm:

SETV GD1 0; void run() Body Start
SETV GD3 0
MARK_TYPE_REG GD5 0.0008
SETV GD5 0
ALLOCATEGMEMV D2 10 0.0008
SETR GD4 D2
SETV GD2 0
QUIT; void run() Body End
PUSHR REFDMAPDATA; void run() Body Start
PUSHARGSV 0 0.0004
SETR D4 SP2
ALLOCATEMEMV D2 100 0
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[void Game::GetSaveName(char32[])] Params
GETSAVENAME D2; InlineFunc[void Game::GetSaveName(char32[])] Body
ALLOCATEMEMV D2 19 0
STORE D2 0.0002
WRITEPODSTRING D2 "[Test] Running %s\n"
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D2 0.0003; InlineFunc[int Game::GetGenericScript(char32[])] Params
GETGENERICSCRIPT D2; InlineFunc[int Game::GetGenericScript(char32[])] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #421 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 45 ==; Test 'if'
ALLOCATEMEMV D2 53 0; if() #421 Body Start
STORE D2 0
WRITEPODSTRING D2 "[Test] failed to start - could not find test script\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #421 Body End
LOAD D2 0.0001; InlineFunc[genericdata Game::LoadGenericData(int)] Params
LOADGENERICDATA D2; InlineFunc[genericdata Game::LoadGenericData(int)] Body Start
SETR D2 REFGENERICDATA; InlineFunc[genericdata Game::LoadGenericData(int)] Body End
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFGENERICDATA
SETR GENDATARUNNING D2
LOAD D2 0; while() #2 Test
PUSHR D2
POP REFGENERICDATA
SETR D2 GENDATARUNNING
COMPAREV D2 0
GOTOCMP 67 ==; Test 'while'
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #2 Body
GOTO 59; while() #2 End
CALLFUNC 0.3109; UsrFunc[void End()] Call AND [Opt:NeverRet]
LOAD D3 0.0003
DEALLOCATEMEMR D3; [Opt:NeverRet] AND void run() Body End
PUSHR REFGENERICDATA; void run() Body Start
PUSHARGSV 0 0.0060
SETR D4 SP2
PUSHR D4
PUSHV 0; UsrFunc[void Init(int)] Params
CALLFUNC 0.3152; UsrFunc[void Init(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0059
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0059; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0059
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0058
ALLOCATEMEMV D2 16 0
STORE D2 0.0057
WRITEPODSTRING D2 "(1) RefCount(a)"
PUSHR D4
LOAD D2 0.0057; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0058; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0057
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 6 0
STORE D2 0.0056
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0056; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0056
DEALLOCATEMEMR D3
SETV D2 0
STORE_OBJECT D2 0.0058
ALLOCATEMEMV D2 6 0
STORE D2 0.0055
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0055; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0055
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 23 0
STORE D2 0.0054
WRITEPODSTRING D2 "RefCount(new Person())"
PUSHR D4
LOAD D2 0.0054; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR CLASS_THISKEY; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0054
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 6 0
STORE D2 0.0053
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0053; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0053
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 6 0
STORE D2 0.0052
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0052; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0052
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0058
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0058
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0058
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0058; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0058
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 6 0
STORE D2 0.0057
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0057; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0057
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0057
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0057; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0057
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0056
ALLOCATEMEMV D2 12 0
STORE D2 0.0055
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0055; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0056; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0055
DEALLOCATEMEMR D3
LOAD D2 0.0056
STORE_OBJECT D2 0.0056
ALLOCATEMEMV D2 12 0
STORE D2 0.0054
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0054; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0056; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0054
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0056
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0056
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0056; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0056
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0055
PUSHR CLASS_THISKEY
PUSHR D4
CALLFUNC 0.3403; ClassFunc[Hat Hat::Hat()] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2
LOAD D2 0.0055
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0.0001
ALLOCATEMEMV D2 17 0
STORE D2 0.0054
WRITEPODSTRING D2 "RefCount(a->hat)"
PUSHR D4
LOAD D2 0.0054; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0055; InlineFunc[long RefCount(untyped)] Params Start
ZCLASS_READ D2 0.0001; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0054
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 2; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0055
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
PEEK D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 44 0
STORE D2 0.0055
WRITEPODSTRING D2 "=== Test %d - custom object functions === \n"
LOAD D2 0.0055; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0055
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0054
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0053
PUSHR CLASS_THISKEY
PUSHR D4
LOAD D2 0.0053; ClassFunc[void Person::shakeHands(Person)] Params Start
PUSHR D2
LOAD D2 0.0054
SETR CLASS_THISKEY D2; ClassFunc[void Person::shakeHands(Person)] Params End
CALLFUNC 0.3178; ClassFunc[void Person::shakeHands(Person)] Call
POP D4
POP CLASS_THISKEY
ALLOCATEMEMV D2 12 0
STORE D2 0.0052
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0052; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0054; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0052
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 12 0
STORE D2 0.0051
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0051; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0053; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0051
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 2; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0054
REF_REMOVE 0.0053
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0054
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0054; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0054
DEALLOCATEMEMR D3
LOADRNG; InlineFunc[randgen randgen::randgen()] Body
STORE_OBJECT D2 0.0053
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0052
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0052; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0053; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0052
DEALLOCATEMEMR D3
REF_REMOVE 0.0053
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0053
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0053; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0053
DEALLOCATEMEMR D3
STOREV 0 0.0052
LOADRNG; InlineFunc[randgen Game::LoadRNG()] Body
STORE_OBJECT D2 0.0051
LOAD D2 0.0051
STORE D2 0.0052
ALLOCATEMEMV D2 14 0
STORE D2 0.0050
WRITEPODSTRING D2 "RefCount(rng)"
PUSHR D4
LOAD D2 0.0050; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0051; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0050
DEALLOCATEMEMR D3
REF_REMOVE 0.0051
ALLOCATEMEMV D2 18 0
STORE D2 0.0051
WRITEPODSTRING D2 "RefCount(scratch)"
PUSHR D4
LOAD D2 0.0051; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0052; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0051
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0052
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0052; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0052
DEALLOCATEMEMR D3
STOREV 0 0.0051
LOADRNG; InlineFunc[randgen Game::LoadRNG()] Body
STORE_OBJECT D2 0.0050
LOAD D2 0.0050
STORE D2 0.0051
ALLOCATEMEMV D2 14 0
STORE D2 0.0049
WRITEPODSTRING D2 "RefCount(rng)"
PUSHR D4
LOAD D2 0.0049; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0050; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0049
DEALLOCATEMEMR D3
REF_REMOVE 0.0050
ALLOCATEMEMV D2 18 0
STORE D2 0.0050
WRITEPODSTRING D2 "RefCount(scratch)"
PUSHR D4
LOAD D2 0.0050; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0051; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0050
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 57 0
STORE D2 0.0051
WRITEPODSTRING D2 "=== Test %d - GC keeps objects in autorelease pool === \n"
LOAD D2 0.0051; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0051
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
GC; InlineFunc[void GC()] Body
ALLOCATEMEMV D2 6 0
STORE D2 0.0050
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0050; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0050
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0050
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0050; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0050
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 10; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
STORE D2 0.0049
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 4 0
STORE D2 0.0048
WRITEPODSTRING D2 "age"
PUSHR D4
LOAD D2 0.0048; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0049
PUSHR D2
PUSHV 10; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0048
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 6 0
STORE D2 0.0047
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0047; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0047
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0049
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0049; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0049
DEALLOCATEMEMR D3
STOREV 0 0.0048
REF_REMOVE 0.0048
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0048
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0048; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0048
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 10; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
PUSHR D2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 20; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
POP D3
ADDR D2 D3
STORE D2 0.0047
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 4 0
STORE D2 0.0046
WRITEPODSTRING D2 "age"
PUSHR D4
LOAD D2 0.0046; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0047
PUSHR D2
PUSHV 30; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0046
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 6 0
STORE D2 0.0045
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0045; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0045
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0047
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0047; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0047
DEALLOCATEMEMR D3
SETR D2 GD1
PUSHR D2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD1
POP D3
ADDR D2 D3
PUSHR D2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD1
POP D3
ADDR D2 D3
STORE D2 0.0046
ALLOCATEMEMV D2 2 0
STORE D2 0.0045
WRITEPODSTRING D2 "c"
PUSHR D4
LOAD D2 0.0045; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
PUSHR D2
PUSHV 3; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0045
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
PEEK D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0046
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0046; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0046
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0045
LOAD D2 0.0045
SET_OBJECT GD5 D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0044
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0044; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0045; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0044
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0045
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
SETV D2 0
SET_OBJECT GD5 D2
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0045
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0045; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0045
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0044
PUSHR D4
LOAD D2 0.0044; UsrFunc[void usePerson1(Person)] Params Start
PUSHR D2; UsrFunc[void usePerson1(Person)] Params End
CALLFUNC 0.3414; UsrFunc[void usePerson1(Person)] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0043
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0043; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0044; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0043
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0044
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 50 0
STORE D2 0.0044
WRITEPODSTRING D2 "=== Test %d - pass free object as parameter === \n"
LOAD D2 0.0044; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0044
DEALLOCATEMEMR D3
PUSHR D4
PUSHR CLASS_THISKEY; UsrFunc[void usePerson2(Person)] Params Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2; UsrFunc[void usePerson2(Person)] Params End
CALLFUNC 0.3435; UsrFunc[void usePerson2(Person)] Call
PEEK D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 71 0
STORE D2 0.0043
WRITEPODSTRING D2 "=== Test %d - functions add returned objects to autorelease pool === \n"
LOAD D2 0.0043; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0043
DEALLOCATEMEMR D3
PUSHR D4
PUSHR CLASS_THISKEY; UsrFunc[Person usePerson3(Person)] Params Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2; UsrFunc[Person usePerson3(Person)] Params End
CALLFUNC 0.3456; UsrFunc[Person usePerson3(Person)] Call
POP D4
STORE_OBJECT D2 0.0042
ALLOCATEMEMV D2 12 0
STORE D2 0.0041
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0041; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0042; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0041
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0042
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 33 0
STORE D2 0.0042
WRITEPODSTRING D2 "=== Test %d - simple block === \n"
LOAD D2 0.0042; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0042
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0041
LOAD D2 0.0041
STORE_OBJECT D2 0.0040
ALLOCATEMEMV D2 12 0
STORE D2 0.0039
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0039; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0040; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0039
DEALLOCATEMEMR D3
REF_REMOVE 0.0040
ALLOCATEMEMV D2 12 0
STORE D2 0.0040
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0040; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0041; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0040
DEALLOCATEMEMR D3
REF_REMOVE 0.0041
ALLOCATEMEMV D2 23 0
STORE D2 0.0041
WRITEPODSTRING D2 "=== Test %d - if === \n"
LOAD D2 0.0041; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0041
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0040
LOAD D2 0.0040; if() #424 Test
COMPAREV D2 0
GOTOCMP 1019 ==; Test 'if'
LOAD D2 0.0040; if() #424 Body Start
STORE_OBJECT D2 0.0039
ALLOCATEMEMV D2 12 0
STORE D2 0.0038
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0038; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0039; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0038
DEALLOCATEMEMR D3
REF_REMOVE 0.0039; if() #424 Body End
ALLOCATEMEMV D2 12 0
STORE D2 0.0039
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0039; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0040; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0039
DEALLOCATEMEMR D3
REF_REMOVE 0.0040
ALLOCATEMEMV D2 38 0
STORE D2 0.0040
WRITEPODSTRING D2 "=== Test %d - if w/ declaration === \n"
LOAD D2 0.0040; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0040
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0039
LOAD D2 0.0039; if(b) #425 Decl
STORE_OBJECT D2 0.0038
LOAD D2 0.0038; if(b) #425 Test
COMPAREV D2 0
GOTOCMP 1073 ==; Test 'if'
ALLOCATEMEMV D2 12 0; if(b) #425 Body Start
STORE D2 0.0037
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0037; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0038; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0037
DEALLOCATEMEMR D3; if(b) #425 Body End
REF_REMOVE 0.0038
ALLOCATEMEMV D2 12 0
STORE D2 0.0038
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0038; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0039; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0038
DEALLOCATEMEMR D3
REF_REMOVE 0.0039
ALLOCATEMEMV D2 26 0
STORE D2 0.0039
WRITEPODSTRING D2 "=== Test %d - while === \n"
LOAD D2 0.0039; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0039
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0038
STOREV 0 0.0037
LOAD D2 0.0037; while() #3 Test
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1148 ==; Test 'while'
ALLOCATEMEMV D2 12 0; while() #3 Body Start
STORE D2 0.0036
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0036; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0038; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0036
DEALLOCATEMEMR D3
LOAD D2 0.0038
STORE_OBJECT D2 0.0035
ALLOCATEMEMV D2 12 0
STORE D2 0.0034
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0034; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0035; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0034
DEALLOCATEMEMR D3
LOAD D2 0.0037
ADDV D2 1
STORE D2 0.0037
REF_REMOVE 0.0035; while() #3 Body End
GOTO 1108; while() #3 End
ALLOCATEMEMV D2 12 0
STORE D2 0.0036
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0036; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0038; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0036
DEALLOCATEMEMR D3
SETV D2 0
STORE D2 0.0037
LOAD D2 0.0037; while() #4 Test
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1204 ==; Test 'while'
ALLOCATEMEMV D2 12 0; while() #4 Body Start
STORE D2 0.0035
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0035; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0038; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0035
DEALLOCATEMEMR D3
LOAD D2 0.0038
STORE_OBJECT D2 0.0034
ALLOCATEMEMV D2 12 0
STORE D2 0.0033
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0033; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0034; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0033
DEALLOCATEMEMR D3
LOAD D2 0.0037
ADDV D2 1
STORE D2 0.0037
REF_REMOVE 0.0034; while() #4 Body End
GOTO 1164; while() #4 End
ALLOCATEMEMV D2 12 0; while() #4 Else Start
STORE D2 0.0035
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0035; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0038; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0035
DEALLOCATEMEMR D3
LOAD D2 0.0038
STORE_OBJECT D2 0.0034
ALLOCATEMEMV D2 13 0
STORE D2 0.0033
WRITEPODSTRING D2 "RefCount(b2)"
PUSHR D4
LOAD D2 0.0033; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0034; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0033
DEALLOCATEMEMR D3
REF_REMOVE 0.0034; while() #4 Else End
ALLOCATEMEMV D2 12 0
STORE D2 0.0035
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0035; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0038; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0035
DEALLOCATEMEMR D3
SETV D2 0
STORE D2 0.0037
LOAD D2 0.0037; while() #5 Test
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1298 ==; Test 'while'
LOAD D2 0.0037; if() #426 Test AND while() #5 Body Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1263 ==; Test 'if'
REF_REMOVE 0.0033; if() #426 Body Start
GOTO 1298; break 1; AND if() #426 Body End
ALLOCATEMEMV D2 12 0
STORE D2 0.0034
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0034; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0038; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0034
DEALLOCATEMEMR D3
LOAD D2 0.0038
STORE_OBJECT D2 0.0033
ALLOCATEMEMV D2 12 0
STORE D2 0.0032
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0032; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0033; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0032
DEALLOCATEMEMR D3
LOAD D2 0.0037
ADDV D2 1
STORE D2 0.0037
REF_REMOVE 0.0033; while() #5 Body End
GOTO 1251; while() #5 End
ALLOCATEMEMV D2 12 0
STORE D2 0.0034
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0034; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0038; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0034
DEALLOCATEMEMR D3
REF_REMOVE 0.0038
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 51 0
STORE D2 0.0038
WRITEPODSTRING D2 "=== Test %d - if w/ declaration inside while === \n"
LOAD D2 0.0038; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0038
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0037
LOAD D2 0.0037; while() #6 Test
COMPAREV D2 0
GOTOCMP 1398 ==; Test 'while'
LOAD D2 0.0037; while() #6 Body Start
STORE_OBJECT D2 0.0036
ALLOCATEMEMV D2 13 0
STORE D2 0.0035
WRITEPODSTRING D2 "RefCount(b1)"
PUSHR D4
LOAD D2 0.0035; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0036; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0035
DEALLOCATEMEMR D3
LOAD D2 0.0037; if(b2) #427 Decl
STORE_OBJECT D2 0.0034
LOAD D2 0.0034; if(b2) #427 Test
COMPAREV D2 0
GOTOCMP 1396 ==; Test 'if'
ALLOCATEMEMV D2 13 0; if(b2) #427 Body Start
STORE D2 0.0033
WRITEPODSTRING D2 "RefCount(b2)"
PUSHR D4
LOAD D2 0.0033; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0034; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0033
DEALLOCATEMEMR D3
LOAD D2 0.0037
STORE_OBJECT D2 0.0032
ALLOCATEMEMV D2 13 0
STORE D2 0.0031
WRITEPODSTRING D2 "RefCount(b3)"
PUSHR D4
LOAD D2 0.0031; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0032; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0004; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0031
DEALLOCATEMEMR D3
REF_REMOVE 0.0032
REF_REMOVE 0.0034
REF_REMOVE 0.0036
GOTO 1398; break 1;
REF_REMOVE 0.0032; if(b2) #427 Body End
REF_REMOVE 0.0034
REF_REMOVE 0.0036; while() #6 Body End
GOTO 1336; while() #6 End
ALLOCATEMEMV D2 12 0
STORE D2 0.0036
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0036; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0037; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0036
DEALLOCATEMEMR D3
REF_REMOVE 0.0037
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 31 0
STORE D2 0.0037
WRITEPODSTRING D2 "=== Test %d - usePerson5 === \n"
LOAD D2 0.0037; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0037
DEALLOCATEMEMR D3
PUSHR D4
PUSHR CLASS_THISKEY; UsrFunc[Person usePerson5(Person, bool)] Params Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2
PUSHV 0; UsrFunc[Person usePerson5(Person, bool)] Params End
CALLFUNC 0.3488; UsrFunc[Person usePerson5(Person, bool)] Call
POP D4
STORE_OBJECT D2 0.0036
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0035
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0035; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0036; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0035
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0036
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 31 0
STORE D2 0.0036
WRITEPODSTRING D2 "=== Test %d - usePerson5 === \n"
LOAD D2 0.0036; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0036
DEALLOCATEMEMR D3
PUSHR D4
PUSHR CLASS_THISKEY; UsrFunc[Person usePerson5(Person, bool)] Params Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2
PUSHV 1; UsrFunc[Person usePerson5(Person, bool)] Params End
CALLFUNC 0.3488; UsrFunc[Person usePerson5(Person, bool)] Call
POP D4
STORE_OBJECT D2 0.0035
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0034
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0034; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0035; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0034
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0035
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 34 0
STORE D2 0.0035
WRITEPODSTRING D2 "=== Test %d - createPerson1 === \n"
LOAD D2 0.0035; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0035
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.3330; UsrFunc[Person createPerson1()] Call
POP D4
STORE_OBJECT D2 0.0034
ALLOCATEMEMV D2 12 0
STORE D2 0.0033
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0033; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0034; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0033
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0034
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 34 0
STORE D2 0.0034
WRITEPODSTRING D2 "=== Test %d - createPerson2 === \n"
LOAD D2 0.0034; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0034
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.3365; UsrFunc[Person createPerson2()] Call
POP D4
STORE_OBJECT D2 0.0033
ALLOCATEMEMV D2 12 0
STORE D2 0.0032
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0032; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0033; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0032
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0033
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 34 0
STORE D2 0.0033
WRITEPODSTRING D2 "=== Test %d - createPerson2 === \n"
LOAD D2 0.0033; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0033
DEALLOCATEMEMR D3
PUSHARGSR D4 0.0002; UsrFunc[Person usePerson3(Person)] Params Start
CALLFUNC 0.3365; UsrFunc[Person createPerson2()] Call
POP D4
PUSHR D2; UsrFunc[Person usePerson3(Person)] Params End
CALLFUNC 0.3456; UsrFunc[Person usePerson3(Person)] Call
POP D4
STORE_OBJECT D2 0.0032
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0031
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0031; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0032; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0031
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0032
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0032
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0032; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0032
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.3374; UsrFunc[Person createPerson3()] Call
POP D4
STORE_OBJECT D2 0.0031
ALLOCATEMEMV D2 12 0
STORE D2 0.0030
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0030; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0031; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0030
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0031
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0031
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0031; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0031
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0030
ALLOCATEMEMV D2 12 0
STORE D2 0.0029
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0029; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0030; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0029
DEALLOCATEMEMR D3
LOAD D2 0.0030
STORE_OBJECT D2 0.0028
ALLOCATEMEMV D2 12 0
STORE D2 0.0027
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0027; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0030; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0027
DEALLOCATEMEMR D3
LOAD D2 0.0028
STORE_OBJECT D2 0.0026
ALLOCATEMEMV D2 12 0
STORE D2 0.0025
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0025; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0030; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0025
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0030
REF_REMOVE 0.0028
REF_REMOVE 0.0026
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0030
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0030; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0030
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0029
ALLOCATEMEMV D2 10 0
STORE D2 0.0028
WRITEPODSTRING D2 "(1) count"
PUSHR D4
LOAD D2 0.0028; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0028
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0027
ALLOCATEMEMV D2 10 0
STORE D2 0.0026
WRITEPODSTRING D2 "(2) count"
PUSHR D4
LOAD D2 0.0026; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 2; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0026
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 16 0
STORE D2 0.0025
WRITEPODSTRING D2 "(3) RefCount(a)"
PUSHR D4
LOAD D2 0.0025; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0029; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0025
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 16 0
STORE D2 0.0024
WRITEPODSTRING D2 "(4) RefCount(b)"
PUSHR D4
LOAD D2 0.0024; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0027; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0024
DEALLOCATEMEMR D3
LOAD D2 0.0029
STORE_OBJECT D2 0.0027
ALLOCATEMEMV D2 10 0
STORE D2 0.0023
WRITEPODSTRING D2 "(5) count"
PUSHR D4
LOAD D2 0.0023; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0023
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 16 0
STORE D2 0.0022
WRITEPODSTRING D2 "(6) RefCount(a)"
PUSHR D4
LOAD D2 0.0022; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0029; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0022
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 16 0
STORE D2 0.0021
WRITEPODSTRING D2 "(7) RefCount(b)"
PUSHR D4
LOAD D2 0.0021; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0027; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0021
DEALLOCATEMEMR D3
REF_REMOVE 0.0029
REF_REMOVE 0.0027
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0029
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0029; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0029
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0028
LOAD D2 0.0028
PUSHR D2
SETR D2 GD4
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETR D2 GD4
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
SETR D2 GD4
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0027
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0027; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0028; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0027
DEALLOCATEMEMR D3
SETV D2 0
PUSHR D2
SETR D2 GD4
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0026
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0026; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0028; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0026
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0028
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
SETV D2 0
PUSHR D2
SETR D2 GD4
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0028
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0028; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0028
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0027
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0026
PUSHR D4
PUSHV 2; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0026
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0027
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0027
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0027; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0027
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0026
PUSHR GD4; InlineFunc[bool ArrayPushBack(Person[], Person)] Params Start
LOAD D2 0.0026
PUSHR D2; InlineFunc[bool ArrayPushBack(Person[], Person)] Params End
PUSHV -1; InlineFunc[bool ArrayPushBack(Person[], Person)] Body Start
ARRAYPUSH
POPARGS D5 0.0003; InlineFunc[bool ArrayPushBack(Person[], Person)] Body End
ALLOCATEMEMV D2 12 0
STORE D2 0.0025
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0025; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0026; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0025
DEALLOCATEMEMR D3
LOAD D2 0.0026
STORE_OBJECT D2 0.0024
SETV D2 0
STORE_OBJECT D2 0.0026
ALLOCATEMEMV D2 12 0
STORE D2 0.0023
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0023; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0024; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0023
DEALLOCATEMEMR D3
PUSHR GD4; InlineFunc[Person ArrayPopBack(Person[])] Params
PUSHV -1; InlineFunc[Person ArrayPopBack(Person[])] Body Start
ARRAYPOP
POPARGS D5 0.0002; InlineFunc[Person ArrayPopBack(Person[])] Body End
ALLOCATEMEMV D2 12 0
STORE D2 0.0022
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0022; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0024; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0022
DEALLOCATEMEMR D3
REF_REMOVE 0.0026
REF_REMOVE 0.0024
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0026
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0026; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0026
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0025
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 1 0.0008
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0025
POP D0
WRITEPODARRAYVR 0 D2
POP D2
STORE D2 0.0023
ALLOCATEMEMV D2 12 0
STORE D2 0.0022
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0022; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0023; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0022
DEALLOCATEMEMR D3
LOAD D3 0.0023
DEALLOCATEMEMR D3
REF_REMOVE 0.0025
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0025
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0025; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0025
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 1 0.0008
PUSHR D2
SETR D0 D2
PUSHR D0
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
POP D0
WRITEPODARRAYVR 0 D2
POP D2
STORE D2 0.0023
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0022
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0022; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0023; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0022
DEALLOCATEMEMR D3
LOAD D3 0.0023
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0024
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0024; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0024
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 1 0.0008
PUSHR D2
SETR D0 D2
PUSHR D0
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
POP D0
WRITEPODARRAYVR 0 D2
POP D2
STORE D2 0.0022
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
LOAD D2 0.0022; InlineFunc[void ResizeArray(Person[], int)] Params Start
PUSHR D2
SETV D3 0; InlineFunc[void ResizeArray(Person[], int)] Params End
POP D2; InlineFunc[void ResizeArray(Person[], int)] Body Start
RESIZEARRAYR D2 D3; InlineFunc[void ResizeArray(Person[], int)] Body End
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
LOAD D3 0.0022
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0023
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0023; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0023
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0022
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0021
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0022
ZCLASS_READ D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0020
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0020; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0021; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0020
DEALLOCATEMEMR D3
REF_REMOVE 0.0022
REF_REMOVE 0.0021
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0022
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0022; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0022
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0021
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0021
ZCLASS_READ D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0020
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0020; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0021; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0020
DEALLOCATEMEMR D3
REF_REMOVE 0.0021
ALLOCATEMEMV D2 6 0
STORE D2 0.0021
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0021; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0021
DEALLOCATEMEMR D3
GC; InlineFunc[void GC()] Body
ALLOCATEMEMV D2 6 0
STORE D2 0.0020
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0020; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0020
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0019
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0019; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0019
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0018
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0017
LOAD D2 0.0017
PUSHR D2
LOAD D2 0.0018
ZCLASS_READ D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0017
ZCLASS_READ D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0016
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0016; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0018; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0016
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 12 0
STORE D2 0.0015
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D4
LOAD D2 0.0015; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0017; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0015
DEALLOCATEMEMR D3
SETV D2 0
STORE_OBJECT D2 0.0018
ALLOCATEMEMV D2 25 0
STORE D2 0.0014
WRITEPODSTRING D2 "RefCount(b->children[0])"
PUSHR D4
LOAD D2 0.0014; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0017; InlineFunc[long RefCount(untyped)] Params Start
ZCLASS_READ D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0014
DEALLOCATEMEMR D3
REF_REMOVE 0.0018
REF_REMOVE 0.0017
ALLOCATEMEMV D2 6 0
STORE D2 0.0018
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0018; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 2; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0018
DEALLOCATEMEMR D3
GC; InlineFunc[void GC()] Body
ALLOCATEMEMV D2 6 0
STORE D2 0.0017
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0017; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0017
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0016
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0016; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0016
DEALLOCATEMEMR D3
STOREV 0 0.0015
ALLOCATEMEMV D2 12 0
STORE D2 0.0014
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0014; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0015; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0014
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0015
ALLOCATEMEMV D2 12 0
STORE D2 0.0013
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0013; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0015; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0013
DEALLOCATEMEMR D3
LOAD D2 0.0015
ZCLASS_FREE D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0012
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0012; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0015; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0012
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0015
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 28 0
STORE D2 0.0015
WRITEPODSTRING D2 "=== Test %d - untyped === \n"
LOAD D2 0.0015; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0015
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE D2 0.0014
ALLOCATEMEMV D2 12 0
STORE D2 0.0013
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0013; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0014; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0013
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 10 0
STORE D2 0.0012
WRITEPODSTRING D2 "(1) count"
PUSHR D4
LOAD D2 0.0012; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0012
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 10 0
STORE D2 0.0011
WRITEPODSTRING D2 "(2) count"
PUSHR D4
LOAD D2 0.0011; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0011
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0014
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0014; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0014
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE D2 0.0013
LOAD D2 0.0013
STORE_OBJECT D2 0.0012
ALLOCATEMEMV D2 12 0
STORE D2 0.0011
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0011; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0013; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0011
DEALLOCATEMEMR D3
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 12 0
STORE D2 0.0010
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0010; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0013; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0010
DEALLOCATEMEMR D3
REF_REMOVE 0.0012
ALLOCATEMEMV D2 6 0
STORE D2 0.0013
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0013; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0013
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0012
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0012; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0012
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE D2 0.0011
LOAD D2 0.0011
STORE_OBJECT D2 0.0010
ALLOCATEMEMV D2 12 0
STORE D2 0.0009
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0009; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0011; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0009
DEALLOCATEMEMR D3
SETV D2 0
STORE_OBJECT D2 0.0010
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0010
ALLOCATEMEMV D2 6 0
STORE D2 0.0011
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0011; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0011
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0010
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0010; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0010
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0009
ALLOCATEMEMV D2 12 0
STORE D2 0.0007
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0007; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0009; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0007
DEALLOCATEMEMR D3
SETV D2 0
STORE_OBJECT D2 0.0009
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0009
ALLOCATEMEMV D2 6 0
STORE D2 0.0009
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0.0009; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0009
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0008
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0008; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0008
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 2 0
STORE D2 0.0007
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0006
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
ALLOCATEMEMV D2 12 0
STORE D2 0.0005
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0005; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0006; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0005
DEALLOCATEMEMR D3
REF_REMOVE 0.0006
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
LOAD D3 0.0007
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 18 0
STORE D2 0.0007
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0007; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0007
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0006
ALLOCATEMEMV D2 12 0
STORE D2 0.0005
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0005; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0006; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0005
DEALLOCATEMEMR D3
STOREV 0 0.0004; for() #152 setup
LOAD D2 0.0004; for() #152 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2922 ==; for() #152 TestFail?
ALLOCATEMEMV D2 12 0; for() #152 Body Start
STORE D2 0.0003
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0003; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0006; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D2 0.0006
STORE_OBJECT D2 0.0002
ALLOCATEMEMV D2 12 0
STORE D2 0.0001
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D4
LOAD D2 0.0001; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0006; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
PEEK D4
PUSHV 2; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0002
REF_REMOVE 0; for() #152 Body End
LOAD D2 0.0004; for() #152 LoopIncrement
ADDV D2 1
STORE D2 0.0004
GOTO 2868; for() #152 End
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0006
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0006
WRITEPODSTRING D2 "=== Test %d === \n"
LOAD D2 0.0006; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0006
DEALLOCATEMEMR D3
STOREV 0 0.0005; for() #153 setup
LOAD D2 0.0005; for() #153 LoopTest
COMPAREV D2 300
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2992 ==; for() #153 TestFail?
LOADRNG; InlineFunc[randgen Game::LoadRNG()] Body AND for() #153 Body Start
STORE_OBJECT D2 0.0004
LOAD D2 0.0004; if() #428 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2964 ==; Test 'if'
ALLOCATEMEMV D2 27 0; if() #428 Body Start
STORE D2 0.0003
WRITEPODSTRING D2 "failed to allocate randgen"
LOAD D2 0.0003; UsrFunc[void Fail(char32[])] Params Start
PUSHR D2; UsrFunc[void Fail(char32[])] Params End
CALLFUNC 0.3121; UsrFunc[void Fail(char32[])] Call AND [Opt:NeverRet]
LOAD D3 0.0003
DEALLOCATEMEMR D3; if() #428 Body End
PUSHR CLASS_THISKEY
PUSHR D4
LOAD D2 0.0004; ClassFunc[SelfRetainingRng SelfRetainingRng::SelfRetainingRng(randgen)] Params Start
PUSHR D2; ClassFunc[SelfRetainingRng SelfRetainingRng::SelfRetainingRng(randgen)] Params End
CALLFUNC 0.3818; ClassFunc[SelfRetainingRng SelfRetainingRng::SelfRetainingRng(randgen)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
ALLOCATEMEMV D2 14 0
STORE D2 0.0002
WRITEPODSTRING D2 "RefCount(rng)"
PUSHR D4
LOAD D2 0.0002; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0004; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0002
DEALLOCATEMEMR D3
REF_REMOVE 0.0003
REF_REMOVE 0.0004; for() #153 Body End
LOAD D2 0.0005; for() #153 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 2944; for() #153 End
GC; InlineFunc[void GC()] Body
ALLOCATEMEMV D2 37 0
STORE D2 0.0005
WRITEPODSTRING D2 "=== Test %d - internal bitmaps === \n"
LOAD D2 0.0005; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0005
DEALLOCATEMEMR D3
SETV D2 -1; InlineFunc[bitmap Game::LoadBitmapID(int)] Params
LOADBITMAPDATAR D2; InlineFunc[bitmap Game::LoadBitmapID(int)] Body Start
SETR D2 REFBITMAP; InlineFunc[bitmap Game::LoadBitmapID(int)] Body End
STORE_OBJECT D2 0.0004
SETV D2 0; InlineFunc[bitmap Game::LoadBitmapID(int)] Params
LOADBITMAPDATAR D2; InlineFunc[bitmap Game::LoadBitmapID(int)] Body Start
SETR D2 REFBITMAP; InlineFunc[bitmap Game::LoadBitmapID(int)] Body End
STORE_OBJECT D2 0.0003
ALLOCATEMEMV D2 25 0
STORE D2 0.0002
WRITEPODSTRING D2 "RefCount(internal_bmp_1)"
PUSHR D4
LOAD D2 0.0002; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0004; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0002
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 25 0
STORE D2 0.0001
WRITEPODSTRING D2 "RefCount(internal_bmp_2)"
PUSHR D4
LOAD D2 0.0001; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
SETV D2 0
STORE_OBJECT D2 0.0003
PUSHV 256; InlineFunc[bitmap bitmap::bitmap(int, int)] Params Start
SETV D1 256; InlineFunc[bitmap bitmap::bitmap(int, int)] Params End
POP D0; InlineFunc[bitmap bitmap::bitmap(int, int)] Body Start
SETR D2 CREATEBITMAP; InlineFunc[bitmap bitmap::bitmap(int, int)] Body End
STORE_OBJECT D2 0.0004
ALLOCATEMEMV D2 25 0
STORE D2 0
WRITEPODSTRING D2 "RefCount(internal_bmp_1)"
PUSHR D4
LOAD D2 0; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0004; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
REF_REMOVE 0.0004
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 33 0
STORE D2 0.0004
WRITEPODSTRING D2 "=== Test %d - GlobalObject === \n"
LOAD D2 0.0004; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
ADDV D2 1
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0004
DEALLOCATEMEMR D3
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
LOAD D2 0.0003; InlineFunc[void GlobalObject(untyped)] Params
ZCLASS_GLOBALIZE D2; InlineFunc[void GlobalObject(untyped)] Body
REF_REMOVE 0.0003
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3283; UsrFunc[void checkCountWithGC(int)] Call
POP D4
SETR D2 GD3; while() #7 Test
COMPAREV D2 100
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3107 ==; Test 'while'
PUSHR D4; while() #7 Body Start
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4; while() #7 Body End
GOTO 3098; while() #7 End
POPARGS D5 0.0061
QUIT; void run() Body End
PUSHV 0; Func[void End()] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 13 0
STORE D2 0
WRITEPODSTRING D2 "[Test] done\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND [Opt:NeverRet] AND Func[void End()] Body End
PUSHV 0; Func[void Fail(char32[])] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int strlen(char32[])] Params Start AND if() #96 Test
SETR D3 D2; InlineFunc[int strlen(char32[])] Params End
STRINGLENGTH D2 D3; InlineFunc[int strlen(char32[])] Body
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3142 ==; Test 'if'
ALLOCATEMEMV D2 24 0; if() #96 Body Start
STORE D2 0
WRITEPODSTRING D2 "[Test] failed test: %s\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 3151; if() #96 Body End
ALLOCATEMEMV D2 20 0; if() #96 Else Start
STORE D2 0
WRITEPODSTRING D2 "[Test] failed test\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3; if() #96 Else End
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND [Opt:NeverRet] AND Func[void Fail(char32[])] Body End
PUSHV 0; Func[void Init(int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 35 0
STORE D2 0
WRITEPODSTRING D2 "[Test] started: dmap %d screen %d\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGV 5
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D2 0.0001; if() #420 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3176 ==; Test 'if'
PUSHV 5; InlineFunc[void hero::Warp(int, int)] Params Start AND if() #420 Body Start
LOAD D2 0.0001; InlineFunc[void hero::Warp(int, int)] Params End
POP D3; InlineFunc[void hero::Warp(int, int)] Body Start
WARPR D3 D2; InlineFunc[void hero::Warp(int, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND if() #420 Body End
POPARGS D5 0.0002
RETURNFUNC; Func[void Init(int)] Body End
PUSHARGSV 0 0.0002; Func[void Person::shakeHands(Person)] Body Start
SETR D4 SP2
MARK_TYPE_STACK 0.0001 0.0002
REF_INC 0.0002
ALLOCATEMEMV D2 15 0
STORE D2 0.0001
WRITEPODSTRING D2 "RefCount(this)"
PUSHR D4
SETR D2 CLASS_THISKEY; InlineFunc[long RefCount(untyped)] Params AND UsrFunc[void AssertEqual(long, long, char32[])] Params Start
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001
LOAD D2 0.0001
PUSHR D2; UsrFunc[void AssertEqual(long, long, char32[])] Params End
CALLFUNC 0.3215; UsrFunc[void AssertEqual(long, long, char32[])] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 16 0
STORE D2 0
WRITEPODSTRING D2 "RefCount(other)"
PUSHR D4
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params AND UsrFunc[void AssertEqual(long, long, char32[])] Params Start
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002
LOAD D2 0
PUSHR D2; UsrFunc[void AssertEqual(long, long, char32[])] Params End
CALLFUNC 0.3215; UsrFunc[void AssertEqual(long, long, char32[])] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D2 0.0002
ZCLASS_WRITE CLASS_THISKEY 0.0002
REF_REMOVE 0.0002
POPARGS D5 0.0003
RETURNFUNC; Func[void Person::shakeHands(Person)] Body End
PUSHV 0; Func[void AssertEqual(long, long, char32[])] Body Start
SETR D4 SP2
LOAD D2 0.0002; if() #436 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3241 ==; Test 'if'
ALLOCATEMEMV D2 53 0; if() #436 Body Start
STORE D2 0
WRITEPODSTRING D2 "[Test] failed assertion: expected %d but got %d. %s\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHVARGR D2
LOAD D2 0.0003
PUSHVARGR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #436 Body End
POPARGS D5 0.0004
RETURNFUNC; Func[void AssertEqual(long, long, char32[])] Body End
SETR D4 SP2; Func[void check(char32[], int, int)] Body Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[void AssertEqual(int, int, char32[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void AssertEqual(int, int, char32[])] Params End
CALLFUNC 0.3255; UsrFunc[void AssertEqual(int, int, char32[])] Call
POP D4
POPARGS D5 0.0003
RETURNFUNC; Func[void check(char32[], int, int)] Body End
PUSHV 0; Func[void AssertEqual(int, int, char32[])] Body Start
SETR D4 SP2
LOAD D2 0.0002; if() #435 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3281 ==; Test 'if'
ALLOCATEMEMV D2 53 0; if() #435 Body Start
STORE D2 0
WRITEPODSTRING D2 "[Test] failed assertion: expected %d but got %d. %s\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHVARGR D2
LOAD D2 0.0003
PUSHVARGR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #435 Body End
POPARGS D5 0.0004
RETURNFUNC; Func[void AssertEqual(int, int, char32[])] Body End
PUSHV 0; Func[void checkCountWithGC(int)] Body Start
SETR D4 SP2
SETR D2 GD1; if() #422 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3306 ==; Test 'if'
ALLOCATEMEMV D2 6 0; if() #422 Body Start
STORE D2 0
WRITEPODSTRING D2 "count"
PUSHR D4
LOAD D2 0; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
LOAD D2 0.0001
PUSHR D2; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3; if() #422 Body End
GC; InlineFunc[void GC()] Body
SETR D2 GD1; if() #423 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3328 ==; Test 'if'
ALLOCATEMEMV D2 16 0; if() #423 Body Start
STORE D2 0
WRITEPODSTRING D2 "count (post GC)"
PUSHR D4
LOAD D2 0; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
PUSHR GD1
LOAD D2 0.0001
PUSHR D2; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3; if() #423 Body End
POPARGS D5 0.0002
RETURNFUNC; Func[void checkCountWithGC(int)] Body End
PUSHV 0; Func[Person createPerson1()] Body Start
SETR D4 SP2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0
LOAD D2 0; return Start
REF_AUTORELEASE D2
REF_REMOVE 0
GOTO 3344; return End
REF_REMOVE 0
POP D5
RETURNFUNC; Func[Person createPerson1()] Body End
SETV D2 0.3849; Func[Person Person::Person(int)] Body Start
SETR CLASS_THISKEY2 CLASS_THISKEY
ZCLASS_CONSTRUCT CLASS_THISKEY {0.0003,0.0003}
ZCLASS_MARK_TYPE {0.0003,0.0008,0.0001,0.0008,0.0002,0.0008}
SETR D4 SP2
PUSHR CLASS_THISKEY2
SETR D2 GD1
ADDV D2 1
SETR GD1 D2
LOAD D2 0
PUSHR D2
SETR D2 CLASS_THISKEY
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0
POP D5
SETR D2 CLASS_THISKEY
POP CLASS_THISKEY
RETURNFUNC; Func[Person Person::Person(int)] Body End
SETR D4 SP2; Func[Person createPerson2()] Body Start
PUSHR CLASS_THISKEY; return Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
REF_AUTORELEASE D2
RETURNFUNC; return End AND Func[Person createPerson2()] Body End
PUSHV 0; Func[Person createPerson3()] Body Start
SETR D4 SP2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0
LOAD D2 0; if() #97 Test
COMPAREV D2 0
GOTOCMP 3391 ==; Test 'if'
LOAD D2 0; return Start AND if() #97 Body Start
REF_AUTORELEASE D2
REF_REMOVE 0
GOTO 3395; return End
GOTO 3394; if() #97 Body End
SETV D2 0; return Start AND if() #97 Else Start
REF_REMOVE 0
GOTO 3395; return End AND if() #97 Else End
REF_REMOVE 0
POP D5
RETURNFUNC; Func[Person createPerson3()] Body End
SETR D4 SP2; Func[void yield()] Body Start
WAITFRAME; InlineFunc[void Waitframe()] Body
SETR D2 GD3
ADDV D2 1
SETR GD3 D2
RETURNFUNC; Func[void yield()] Body End
SETV D2 0.3843; Func[Hat Hat::Hat()] Body Start
SETR CLASS_THISKEY2 CLASS_THISKEY
ZCLASS_CONSTRUCT CLASS_THISKEY {0}
SETR D4 SP2
PUSHR CLASS_THISKEY2
SETR D2 GD1
ADDV D2 1
SETR GD1 D2
SETR D2 CLASS_THISKEY
POP CLASS_THISKEY
RETURNFUNC; Func[Hat Hat::Hat()] Body End
PUSHV 0; Func[void usePerson1(Person)] Body Start
SETR D4 SP2
MARK_TYPE_STACK 0.0001 0.0001
REF_INC 0.0001
ALLOCATEMEMV D2 17 0
STORE D2 0
WRITEPODSTRING D2 "RefCount(person)"
PUSHR D4
LOAD D2 0; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
REF_REMOVE 0.0001
POPARGS D5 0.0002
RETURNFUNC; Func[void usePerson1(Person)] Body End
PUSHV 0; Func[void usePerson2(Person)] Body Start
SETR D4 SP2
MARK_TYPE_STACK 0.0001 0.0001
REF_INC 0.0001
ALLOCATEMEMV D2 17 0
STORE D2 0
WRITEPODSTRING D2 "RefCount(person)"
PUSHR D4
LOAD D2 0; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
REF_REMOVE 0.0001
POPARGS D5 0.0002
RETURNFUNC; Func[void usePerson2(Person)] Body End
PUSHV 0; Func[Person usePerson3(Person)] Body Start
SETR D4 SP2
MARK_TYPE_STACK 0.0001 0.0001
REF_INC 0.0001
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3346; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 17 0
STORE D2 0
WRITEPODSTRING D2 "RefCount(person)"
PUSHR D4
LOAD D2 0; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D2 0.0001; return Start
REF_AUTORELEASE D2
REF_REMOVE 0.0001; return End
POPARGS D5 0.0002
RETURNFUNC; Func[Person usePerson3(Person)] Body End
PUSHARGSV 0 0.0016; Func[Person usePerson5(Person, bool)] Body Start
SETR D4 SP2
MARK_TYPE_STACK 0.0001 0.0017
REF_INC 0.0017
PUSHR D4
CALLFUNC 0.3397; UsrFunc[void yield()] Call
POP D4
ALLOCATEMEMV D2 21 0
STORE D2 0.0015
WRITEPODSTRING D2 "(a) RefCount(person)"
PUSHR D4
LOAD D2 0.0015; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0017; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0015
DEALLOCATEMEMR D3
LOAD D2 0.0017
STORE_OBJECT D2 0.0014
ALLOCATEMEMV D2 21 0
STORE D2 0.0013
WRITEPODSTRING D2 "(b) RefCount(person)"
PUSHR D4
LOAD D2 0.0013; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0014; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0013
DEALLOCATEMEMR D3
LOAD D2 0.0017; if() #429 Test
COMPAREV D2 0
GOTOCMP 3811 ==; Test 'if'
LOAD D2 0.0017; if() #429 Body Start
STORE_OBJECT D2 0.0012
ALLOCATEMEMV D2 21 0
STORE D2 0.0011
WRITEPODSTRING D2 "(c) RefCount(person)"
PUSHR D4
LOAD D2 0.0011; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0012; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0011
DEALLOCATEMEMR D3
LOAD D2 0.0017; while() #8 Test
COMPAREV D2 0
GOTOCMP 3570 ==; Test 'while'
LOAD D2 0.0017; while() #8 Body Start
STORE_OBJECT D2 0.0010
ALLOCATEMEMV D2 21 0
STORE D2 0.0009
WRITEPODSTRING D2 "(d) RefCount(person)"
PUSHR D4
LOAD D2 0.0009; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0010; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0004; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D2 0.0010; if() #430 Test
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
REF_REMOVE 0.0010; if() #430 Body Start
GOTO 3570; break 1; AND if() #430 Body End
REF_REMOVE 0.0010; while() #8 Body End
GOTO 3544; while() #8 End
ALLOCATEMEMV D2 21 0
STORE D2 0.0010
WRITEPODSTRING D2 "(e) RefCount(person)"
PUSHR D4
LOAD D2 0.0010; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0012; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D2 0.0017; while() #9 Test
COMPAREV D2 0
GOTOCMP 3614 ==; Test 'while'
LOAD D2 0.0017; while() #9 Body Start
STORE_OBJECT D2 0.0009
LOAD D2 0.0009; if() #431 Test
COMPAREV D2 0
GOTOCMP 3612 ==; Test 'if'
LOAD D2 0.0009; if() #431 Body Start
STORE_OBJECT D2 0.0008
ALLOCATEMEMV D2 21 0
STORE D2 0.0007
WRITEPODSTRING D2 "(f) RefCount(person)"
PUSHR D4
LOAD D2 0.0007; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0008; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0005; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0007
DEALLOCATEMEMR D3
REF_REMOVE 0.0008
REF_REMOVE 0.0009
GOTO 3614; break 1;
REF_REMOVE 0.0008; if() #431 Body End
REF_REMOVE 0.0009; while() #9 Body End
GOTO 3584; while() #9 End
ALLOCATEMEMV D2 21 0
STORE D2 0.0009
WRITEPODSTRING D2 "(g) RefCount(person)"
PUSHR D4
LOAD D2 0.0009; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0012; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D2 0.0016; while() #10 Test
COMPAREV D2 0
GOTOCMP 3644 ==; Test 'while'
STOREV 13 0.0008; while() #10 Body Start
SETV D2 14
STORE D2 0.0008
LOAD D2 0.0008; if() #432 Test
COMPAREV D2 0
GOTOCMP 3628 ==; Test 'if'
LOAD D2 0.0017; return Start AND if() #432 Body Start
REF_AUTORELEASE D2
REF_REMOVE 0.0012
REF_REMOVE 0.0007
REF_REMOVE 0.0014
GOTO 3815; return End AND if() #432 Body End
GOTO 3628; while() #10 Body End AND while() #10 End
ALLOCATEMEMV D2 22 0
STORE D2 0.0008
WRITEPODSTRING D2 "(g2) RefCount(person)"
PUSHR D4
LOAD D2 0.0008; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0012; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D2 0.0017
STORE_OBJECT D2 0.0007
ALLOCATEMEMV D2 22 0
STORE D2 0.0006
WRITEPODSTRING D2 "(g3) RefCount(person)"
PUSHR D4
LOAD D2 0.0006; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0007; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0004; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0006
DEALLOCATEMEMR D3
SETV D2 0
STORE_OBJECT D2 0.0007
SETR D2 GD1; switch() #51 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 1
GOTOCMP 3699 !=; case '10000' AND switch() #51 NoMatch
LOAD D2 0.0017; Case block
STORE_OBJECT D2 0.0005
ALLOCATEMEMV D2 21 0
STORE D2 0.0004
WRITEPODSTRING D2 "(h) RefCount(person)"
PUSHR D4
LOAD D2 0.0004; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0005; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0004; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0004
DEALLOCATEMEMR D3
REF_REMOVE 0.0005
GOTO 3700; break 1;
REF_REMOVE 0.0005
QUIT; Case block AND InlineFunc[void Quit()] Body
ALLOCATEMEMV D2 22 0
STORE D2 0.0005
WRITEPODSTRING D2 "(g4) RefCount(person)"
PUSHR D4
LOAD D2 0.0005; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0017; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D2 0.0017; while(true) #11 Body [Opt:AlwaysOn] Start
STORE_OBJECT D2 0.0004
SETR D2 GD1; switch() #52 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 1
GOTOCMP 3740 !=; case '10000' AND switch() #52 NoMatch
LOAD D2 0.0017; Case block
STORE_OBJECT D2 0.0003
ALLOCATEMEMV D2 21 0
STORE D2 0.0002
WRITEPODSTRING D2 "(i) RefCount(person)"
PUSHR D4
LOAD D2 0.0002; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0005; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0002
DEALLOCATEMEMR D3
REF_REMOVE 0.0003
REF_REMOVE 0.0004
GOTO 3743; break 2;
REF_REMOVE 0.0003
QUIT; Case block AND InlineFunc[void Quit()] Body
REF_REMOVE 0.0004; while(true) #11 Body [Opt:AlwaysOn] End
GOTO 3714; while() #11 End
ALLOCATEMEMV D2 22 0
STORE D2 0.0004
WRITEPODSTRING D2 "(g5) RefCount(person)"
PUSHR D4
LOAD D2 0.0004; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0017; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0004
DEALLOCATEMEMR D3
LOAD D2 0.0017; while() #12 Test
COMPAREV D2 0
GOTOCMP 3809 ==; Test 'while'
LOAD D2 0.0017; while() #12 Body Start
STORE_OBJECT D2 0.0003
ALLOCATEMEMV D2 21 0
STORE D2 0.0002
WRITEPODSTRING D2 "(j) RefCount(person)"
PUSHR D4
LOAD D2 0.0002; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0004; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D2 0.0003; if() #433 Test
COMPAREV D2 0
GOTOCMP 3807 ==; Test 'if'
LOAD D2 0.0017; if() #433 Body Start
STORE_OBJECT D2 0.0001
ALLOCATEMEMV D2 21 0
STORE D2 0
WRITEPODSTRING D2 "(k) RefCount(person)"
PUSHR D4
LOAD D2 0; UsrFunc[void check(char32[], int, int)] Params Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0005; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3243; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D2 0.0001; if() #434 Test
COMPAREV D2 0
GOTOCMP 3806 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #434 Body Start
REF_AUTORELEASE D2
REF_REMOVE 0.0001
REF_REMOVE 0.0003
REF_REMOVE 0.0012
REF_REMOVE 0.0007
REF_REMOVE 0.0014
GOTO 3815; return End AND if() #434 Body End
REF_REMOVE 0.0001; if() #433 Body End
REF_REMOVE 0.0003; while() #12 Body End
GOTO 3757; while() #12 End
REF_REMOVE 0.0012
REF_REMOVE 0.0007; if() #429 Body End
SETV D2 0; return Start
REF_REMOVE 0.0014
GOTO 3815; return End
REF_REMOVE 0.0014
REF_REMOVE 0.0017
POPARGS D5 0.0018
RETURNFUNC; Func[Person usePerson5(Person, bool)] Body End
SETV D2 0; Func[SelfRetainingRng SelfRetainingRng::SelfRetainingRng(randgen)] Body Start
SETR CLASS_THISKEY2 CLASS_THISKEY
ZCLASS_CONSTRUCT CLASS_THISKEY {0.0002}
ZCLASS_MARK_TYPE {0.0001,0.0005,0,0.0008}
SETR D4 SP2
PUSHR CLASS_THISKEY2
MARK_TYPE_STACK 0.0001 0
REF_INC 0
ZCLASS_READ CLASS_THISKEY 0
PUSHR D2
SETR D2 CLASS_THISKEY
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0
LOAD D2 0
PUSHR D2
SETR D2 CLASS_THISKEY
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0.0001
REF_REMOVE 0
POP D5
SETR D2 CLASS_THISKEY
POP CLASS_THISKEY
RETURNFUNC; Func[SelfRetainingRng SelfRetainingRng::SelfRetainingRng(randgen)] Body End
STARTDESTRUCTOR "Hat"; Func[void ~Hat::Hat()] Body Start
SETR D4 SP2
SETR D2 GD1
SUBV D2 1
SETR GD1 D2
RETURNFUNC; Func[void ~Hat::Hat()] Body End
STARTDESTRUCTOR "Person"; Func[void ~Person::Person()] Body Start
SETR D4 SP2
SETR D2 GD1
SUBV D2 1
SETR GD1 D2
RETURNFUNC; Func[void ~Person::Person()] Body End
