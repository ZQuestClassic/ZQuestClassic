stderr:

Compiling 'garbage_collection.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
garbage_collection.zs Line 221 @ Columns 19-32 - Warning S094: Function 'Game::LoadRNG()' is deprecated, and should not be used.

219    int scratch;
220    {
221        randgen rng = Game->LoadRNG();
                         ^~~~~~~~~~~~~


INFO: Use `new randgen()` instead.
garbage_collection.zs Line 235 @ Columns 25-38 - Warning S094: Function 'Game::LoadRNG()' is deprecated, and should not be used.

233    int scratch;
234    {
235        const randgen rng = Game->LoadRNG();
                               ^~~~~~~~~~~~~


INFO: Use `new randgen()` instead.
garbage_collection.zs Line 706 @ Columns 19-32 - Warning S094: Function 'Game::LoadRNG()' is deprecated, and should not be used.

704    for (int i = 0; i < 300; i++)
705    {
706        randgen rng = Game->LoadRNG();
                         ^~~~~~~~~~~~~


INFO: Use `new randgen()` instead.
Pass 5: Checking code paths
Pass 6: Generating object code
garbage_collection.zs Line 624 @ Columns 4-12 - Warning S094: The operator 'delete' is deprecated, and should not be used.

622    a = new Person();
623    check("RefCount(a)", RefCount(a), 1L);
624    delete a;
       ^~~~~~~~


INFO: This operator no longer does anything. Objects are freed automatically when they become unreachable
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [
    {
      "range": {
        "start": {
          "line": 220,
          "character": 18
        },
        "end": {
          "line": 220,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::LoadRNG()' is deprecated, and should not be used.\nUse `new randgen()` instead."
    },
    {
      "range": {
        "start": {
          "line": 234,
          "character": 24
        },
        "end": {
          "line": 234,
          "character": 37
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::LoadRNG()' is deprecated, and should not be used.\nUse `new randgen()` instead."
    },
    {
      "range": {
        "start": {
          "line": 705,
          "character": 18
        },
        "end": {
          "line": 705,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::LoadRNG()' is deprecated, and should not be used.\nUse `new randgen()` instead."
    },
    {
      "range": {
        "start": {
          "line": 623,
          "character": 3
        },
        "end": {
          "line": 623,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S094: The operator 'delete' is deprecated, and should not be used.\nThis operator no longer does anything. Objects are freed automatically when they become unreachable"
    }
  ],
  "metadata": {
    "currentFileSymbols": 155,
    "symbols": 125,
    "identifiers": 1265,
    "elided": true
  }
}

zasm:

SETV GD1 0; void run() Body Start
SETV GD2 0
MARK_TYPE_REG GD3 0.0009
SETV GD3 0
SETV GD5 0
MARK_TYPE_REG GD7 0.0008
SETV GD7 0
ALLOCATEGMEMV D2 10 0.0008
MARK_TYPE_REG GD6 0.0009
SET_OBJECT GD6 D2
SETV GD4 0
QUIT; void run() Body End
PUSHR REFDMAPDATA; void run() Body Start
PUSHARGSV 0 0.0003
SETR D4 SP2
ALLOCATEMEMV D2 100 0
STORE_OBJECT D2 0.0002
LOAD D2 0.0002; InlineFunc[void Game::GetSaveName(char32[])] Params
GETSAVENAME D2; InlineFunc[void Game::GetSaveName(char32[])] Body
ALLOCATEMEMV D2 19 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "[Test] Running %s\n"
PUSHR D2
LOAD D2 0.0002
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0002; InlineFunc[int Game::GetGenericScript(char32[])] Params
GETGENERICSCRIPT D2; InlineFunc[int Game::GetGenericScript(char32[])] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #421 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 41 ==; Test 'if'
ALLOCATEMEMV D2 53 0; InlineFunc[void printf(char32[])] Params Start AND if() #421 Body Start
WRITEPODSTRING D2 "[Test] failed to start - could not find test script\n"
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #421 Body End
LOAD D2 0.0001; InlineFunc[genericdata Game::LoadGenericData(int)] Params
LOADGENERICDATA D2; InlineFunc[genericdata Game::LoadGenericData(int)] Body Start
SETR D2 REFGENERICDATA; InlineFunc[genericdata Game::LoadGenericData(int)] Body End
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFGENERICDATA
SETR GENDATARUNNING D2
LOAD D2 0; while() #2 Test
PUSHR D2
POP REFGENERICDATA
SETR D2 GENDATARUNNING
COMPAREV D2 0
GOTOCMP 63 ==; Test 'while'
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #2 Body
GOTO 55; while() #2 End
CALLFUNC 0.3399; UsrFunc[void End()] Call AND [Opt:NeverRet]
REF_REMOVE 0.0002; [Opt:NeverRet] AND void run() Body End
PUSHR REFGENERICDATA; void run() Body Start
PUSHARGSV 0 0.0004
SETR D4 SP2
PUSHR D4
PUSHV 0; UsrFunc[void Init(int)] Params
CALLFUNC 0.3430; UsrFunc[void Init(int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 16 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(1) RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
SETV D2 0
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 23 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(new Person())"
PUSHR D2
PUSHR CLASS_THISKEY; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR CLASS_THISKEY
PUSHR D4
CALLFUNC 0.3694; ClassFunc[Hat Hat::Hat()] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2
LOAD D2 0.0003
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0.0001
PUSHR D4
ALLOCATEMEMV D2 17 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a->hat)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params Start
ZCLASS_READ D2 0.0001; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 2; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 44 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - custom object functions === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0002
PUSHR CLASS_THISKEY
PUSHR D4
LOAD D2 0.0002; ClassFunc[void Person::shakeHands(Person)] Params Start
PUSHR D2
LOAD D2 0.0003
SETR CLASS_THISKEY D2; ClassFunc[void Person::shakeHands(Person)] Params End
CALLFUNC 0.3451; ClassFunc[void Person::shakeHands(Person)] Call
POP D4
POP CLASS_THISKEY
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 2; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
REF_REMOVE 0.0002
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 28 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - randgen === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOADRNG; InlineFunc[randgen randgen::randgen()] Body
STORE_OBJECT D2 0.0003
PUSHR D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 48 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - int does not retain randgen === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
STOREV 0 0.0003
LOADRNG; InlineFunc[randgen Game::LoadRNG()] Body
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 14 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(rng)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0002
STORE D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 14 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(rng)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0002
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
STORE D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 18 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(scratch)"
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 54 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - int does not retain const randgen === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
STOREV 0 0.0003
LOADRNG; InlineFunc[randgen Game::LoadRNG()] Body
STORE_OBJECT D2 0.0002
LOAD D2 0.0002
STORE D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 14 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(rng)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0002
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
STORE D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 18 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(scratch)"
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 57 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - GC keeps objects in autorelease pool === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
GC; InlineFunc[void GC()] Body
PUSHR D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 10; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
STORE D2 0.0003
PUSHR D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
ALLOCATEMEMV D2 4 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "age"
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 10; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
STOREV 0 0.0003
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 10; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
PUSHR D2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 20; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
POP D3
ADDR D2 D3
STORE D2 0.0003
PUSHR D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
ALLOCATEMEMV D2 4 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "age"
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 30; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETR D2 GD1
PUSHR D2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD1
POP D3
ADDR D2 D3
PUSHR D2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
ZCLASS_READ D2 0
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD1
POP D3
ADDR D2 D3
STORE D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 2 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "c"
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 3; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
LOAD D2 0.0003
SET_OBJECT GD7 D2
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
SETV D2 0
SET_OBJECT GD7 D2
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR D4
LOAD D2 0.0003; UsrFunc[void usePerson1(Person)] Params Start
PUSHR D2; UsrFunc[void usePerson1(Person)] Params End
CALLFUNC 0.3705; UsrFunc[void usePerson1(Person)] Call
PEEK D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 50 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - pass free object as parameter === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR D4
PUSHR CLASS_THISKEY; UsrFunc[void usePerson2(Person)] Params Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2; UsrFunc[void usePerson2(Person)] Params End
CALLFUNC 0.3721; UsrFunc[void usePerson2(Person)] Call
PEEK D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 71 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - functions add returned objects to autorelease pool === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR D4
PUSHR CLASS_THISKEY; UsrFunc[Person usePerson3(Person)] Params Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2; UsrFunc[Person usePerson3(Person)] Params End
CALLFUNC 0.3737; UsrFunc[Person usePerson3(Person)] Call
POP D4
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 33 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - simple block === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
LOAD D2 0.0003
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0002
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
ALLOCATEMEMV D2 23 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - if === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
LOAD D2 0.0003; if() #424 Test
COMPAREV D2 0
GOTOCMP 840 ==; Test 'if'
LOAD D2 0.0003; if() #424 Body Start
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0002; if() #424 Body End
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
ALLOCATEMEMV D2 38 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - if w/ declaration === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
LOAD D2 0.0003; if(b) #425 Decl
STORE_OBJECT D2 0.0002
LOAD D2 0.0002; if(b) #425 Test
COMPAREV D2 0
GOTOCMP 883 ==; Test 'if'
PUSHR D4; if(b) #425 Body Start
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4; if(b) #425 Body End
REF_REMOVE 0.0002
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
ALLOCATEMEMV D2 26 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - while === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
STOREV 0 0.0002
LOAD D2 0.0002; while() #3 Test
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 943 ==; Test 'while'
PUSHR D4; while() #3 Body Start
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
STORE_OBJECT D2 0.0001
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0002
ADDV D2 1
STORE D2 0.0002
REF_REMOVE 0.0001; while() #3 Body End
GOTO 911; while() #3 End
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
SETV D2 0
STORE D2 0.0002
LOAD D2 0.0002; while() #4 Test
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 987 ==; Test 'while'
PUSHR D4; while() #4 Body Start
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
STORE_OBJECT D2 0.0001
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0002
ADDV D2 1
STORE D2 0.0002
REF_REMOVE 0.0001; while() #4 Body End
GOTO 955; while() #4 End
PUSHR D4; while() #4 Else Start
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
STORE_OBJECT D2 0.0001
PUSHR D4
ALLOCATEMEMV D2 13 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b2)"
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0001; while() #4 Else End
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
SETV D2 0
STORE D2 0.0002
LOAD D2 0.0002; while() #5 Test
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1061 ==; Test 'while'
LOAD D2 0.0002; if() #426 Test AND while() #5 Body Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1034 ==; Test 'if'
REF_REMOVE 0.0001; if() #426 Body Start
GOTO 1061; break 1; AND if() #426 Body End
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
STORE_OBJECT D2 0.0001
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0002
ADDV D2 1
STORE D2 0.0002
REF_REMOVE 0.0001; while() #5 Body End
GOTO 1022; while() #5 End
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 51 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - if w/ declaration inside while === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
LOAD D2 0.0003; while() #6 Test
COMPAREV D2 0
GOTOCMP 1142 ==; Test 'while'
LOAD D2 0.0003; while() #6 Body Start
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 13 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b1)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003; if(b2) #427 Decl
STORE_OBJECT D2 0.0001
LOAD D2 0.0001; if(b2) #427 Test
COMPAREV D2 0
GOTOCMP 1140 ==; Test 'if'
PUSHR D4; if(b2) #427 Body Start
ALLOCATEMEMV D2 13 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b2)"
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
STORE_OBJECT D2 0
PUSHR D4
ALLOCATEMEMV D2 13 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b3)"
PUSHR D2
LOAD D2 0; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0004; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0
REF_REMOVE 0.0001
REF_REMOVE 0.0002
GOTO 1142; break 1;
REF_REMOVE 0; if(b2) #427 Body End
REF_REMOVE 0.0001
REF_REMOVE 0.0002; while() #6 Body End
GOTO 1092; while() #6 End
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 31 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - usePerson5 === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR D4
PUSHR CLASS_THISKEY; UsrFunc[Person usePerson5(Person, bool)] Params Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2
PUSHV 0; UsrFunc[Person usePerson5(Person, bool)] Params End
CALLFUNC 0.3763; UsrFunc[Person usePerson5(Person, bool)] Call
POP D4
STORE_OBJECT D2 0.0003
PUSHR D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 31 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - usePerson5 === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR D4
PUSHR CLASS_THISKEY; UsrFunc[Person usePerson5(Person, bool)] Params Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2
PUSHV 1; UsrFunc[Person usePerson5(Person, bool)] Params End
CALLFUNC 0.3763; UsrFunc[Person usePerson5(Person, bool)] Call
POP D4
STORE_OBJECT D2 0.0003
PUSHR D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 34 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - createPerson1 === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR D4
CALLFUNC 0.3583; UsrFunc[Person createPerson1()] Call
POP D4
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 34 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - createPerson2 === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR D4
CALLFUNC 0.3618; UsrFunc[Person createPerson2()] Call
POP D4
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 34 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - createPerson2 === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHARGSR D4 0.0002; UsrFunc[Person usePerson3(Person)] Params Start
CALLFUNC 0.3618; UsrFunc[Person createPerson2()] Call
POP D4
PUSHR D2; UsrFunc[Person usePerson3(Person)] Params End
CALLFUNC 0.3737; UsrFunc[Person usePerson3(Person)] Call
POP D4
STORE_OBJECT D2 0.0003
PUSHR D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR D4
CALLFUNC 0.3627; UsrFunc[Person createPerson3()] Call
POP D4
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0002
STORE_OBJECT D2 0.0001
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
REF_REMOVE 0.0002
REF_REMOVE 0.0001
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 10 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(1) count"
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 10 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(2) count"
PUSHR D2
PUSHR GD1
PUSHV 2; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 16 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(3) RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 16 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(4) RefCount(b)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 10 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(5) count"
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 16 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(6) RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 16 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(7) RefCount(b)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
REF_REMOVE 0.0002
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 29 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - arrays 1 === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
LOAD D2 0.0003
PUSHR D2
SETR D2 GD6
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETR D2 GD6
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
SETR D2 GD6
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
SETV D2 0
PUSHR D2
SETR D2 GD6
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
ALLOCATEMEMV D2 4 0; InlineFunc[void Trace(char32[])] Params Start
WRITEPODSTRING D2 "(a)"; InlineFunc[void Trace(char32[])] Params End
TRACE6 D2; InlineFunc[void Trace(char32[])] Body Start
TRACE3; InlineFunc[void Trace(char32[])] Body End
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
SETV D2 0
PUSHR D2
SETR D2 GD6
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
ALLOCATEMEMV D2 4 0; InlineFunc[void Trace(char32[])] Params Start
WRITEPODSTRING D2 "(b)"; InlineFunc[void Trace(char32[])] Params End
TRACE6 D2; InlineFunc[void Trace(char32[])] Body Start
TRACE3; InlineFunc[void Trace(char32[])] Body End
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0002
PUSHR D4
PUSHV 2; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0002
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 29 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - arrays 2 === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR GD6; InlineFunc[bool ArrayPushBack(Person[], Person)] Params Start
LOAD D2 0.0003
PUSHR D2; InlineFunc[bool ArrayPushBack(Person[], Person)] Params End
PUSHV -1; InlineFunc[bool ArrayPushBack(Person[], Person)] Body Start
ARRAYPUSH
POPARGS D5 0.0003; InlineFunc[bool ArrayPushBack(Person[], Person)] Body End
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
STORE_OBJECT D2 0.0002
SETV D2 0
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
PUSHR GD6; InlineFunc[Person ArrayPopBack(Person[])] Params
PUSHV -1; InlineFunc[Person ArrayPopBack(Person[])] Body Start
ARRAYPOP
POPARGS D5 0.0002; InlineFunc[Person ArrayPopBack(Person[])] Body End
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
REF_REMOVE 0.0002
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 29 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - arrays 3 === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
ALLOCATEMEMV D2 1 0.0008
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0003
POP D0
WRITEPODARRAYVR 0 D2
POP D2
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(c)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
SETV D2 0
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
REF_REMOVE 0.0002
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 29 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - arrays 4 === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
ALLOCATEMEMV D2 1 0.0008
PUSHR D2
SETR D0 D2
PUSHR D0
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
POP D0
WRITEPODARRAYVR 0 D2
POP D2
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(c)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 15 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(c[0])"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 29 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - arrays 5 === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
ALLOCATEMEMV D2 1 0.0008
PUSHR D2
SETR D0 D2
PUSHR D0
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
POP D0
WRITEPODARRAYVR 0 D2
POP D2
STORE_OBJECT D2 0.0003
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
LOAD D2 0.0003; InlineFunc[void ResizeArray(Person[], int)] Params Start
PUSHR D2
SETV D3 0; InlineFunc[void ResizeArray(Person[], int)] Params End
POP D2; InlineFunc[void ResizeArray(Person[], int)] Body Start
RESIZEARRAYR D2 D3; InlineFunc[void ResizeArray(Person[], int)] Body End
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0002
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
ZCLASS_READ D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ZCLASS_READ D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
REF_REMOVE 0.0002
PUSHR D4
ALLOCATEMEMV D2 15 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count (pre GC)"
PUSHR D2
PUSHR GD1
PUSHV 2; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
GC; InlineFunc[void GC()] Body
PUSHR D4
ALLOCATEMEMV D2 16 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count (post GC)"
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0003
ZCLASS_READ D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
GC; InlineFunc[void GC()] Body
PUSHR D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0002
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
ZCLASS_READ D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ZCLASS_READ D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
SETV D2 0
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 25 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b->children[0])"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params Start
ZCLASS_READ D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
REF_REMOVE 0.0002
PUSHR D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 2; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
GC; InlineFunc[void GC()] Body
PUSHR D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
STOREV 0 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
ZCLASS_FREE D2
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 28 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - untyped === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 10 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(1) count"
PUSHR D2
PUSHR GD1
PUSHV 1; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
ALLOCATEMEMV D2 10 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(2) count"
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE D2 0.0003
LOAD D2 0.0003
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0002
PUSHR D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE D2 0.0003
LOAD D2 0.0003
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
SETV D2 0
STORE_OBJECT D2 0.0002
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0002
PUSHR D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
ALLOCATEMEMV D2 3 0
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0003
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0003
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0003
POP D0
WRITEPODARRAYVR 2 D2
POP D2
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
SETV D2 0
STORE_OBJECT D2 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
REF_REMOVE 0.0002
PUSHR D4
ALLOCATEMEMV D2 6 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count"
PUSHR D2
PUSHR GD1
PUSHV 0; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
ALLOCATEMEMV D2 2 0
STORE_OBJECT D2 0.0003
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0002
PUSHR D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
POP D4
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0002
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
STOREV 0 0.0002; for() #153 setup
LOAD D2 0.0002; for() #153 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2433 ==; for() #153 TestFail?
PUSHR D4; for() #153 Body Start
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
STORE_OBJECT D2 0.0001
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0
PUSHR D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
PUSHV 2; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0001
REF_REMOVE 0; for() #153 Body End
LOAD D2 0.0002; for() #153 LoopIncrement
ADDV D2 1
STORE D2 0.0002
GOTO 2387; for() #153 End
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 35 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - randgen (many) === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
STOREV 0 0.0003; for() #154 setup
LOAD D2 0.0003; for() #154 LoopTest
COMPAREV D2 300
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2504 ==; for() #154 TestFail?
LOADRNG; InlineFunc[randgen Game::LoadRNG()] Body AND for() #154 Body Start
STORE_OBJECT D2 0.0002
LOAD D2 0.0002; if() #428 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2468 ==; Test 'if'
ALLOCATEMEMV D2 27 0; UsrFunc[void Fail(char32[])] Params Start AND if() #428 Body Start
WRITEPODSTRING D2 "failed to allocate randgen"
PUSHR D2; UsrFunc[void Fail(char32[])] Params End
CALLFUNC 0.3406; UsrFunc[void Fail(char32[])] Call AND [Opt:NeverRet] AND if() #428 Body End
PUSHR CLASS_THISKEY
PUSHR D4
LOAD D2 0.0002; ClassFunc[SelfRetainingRng SelfRetainingRng::SelfRetainingRng(randgen)] Params Start
PUSHR D2; ClassFunc[SelfRetainingRng SelfRetainingRng::SelfRetainingRng(randgen)] Params End
CALLFUNC 0.4032; ClassFunc[SelfRetainingRng SelfRetainingRng::SelfRetainingRng(randgen)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0001
PUSHR D4
ALLOCATEMEMV D2 14 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(rng)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003; if() #429 Test
COMPAREV D2 100
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2498 ==; Test 'if'
PUSHR D4; if() #429 Body Start
PUSHR GD2; UsrFunc[void AssertEqual(int, int)] Params Start
LOAD D2 0.0003
ADDV D2 1
PUSHR D2; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.4060; UsrFunc[void AssertEqual(int, int)] Call
POP D4; if() #429 Body End
REF_REMOVE 0.0001
REF_REMOVE 0.0002; for() #154 Body End
LOAD D2 0.0003; for() #154 LoopIncrement
ADDV D2 1
STORE D2 0.0003
GOTO 2452; for() #154 End
GC; InlineFunc[void GC()] Body
PUSHR D4
PUSHR GD2; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHV 0; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.4060; UsrFunc[void AssertEqual(int, int)] Call
POP D4
ALLOCATEMEMV D2 46 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - Arrays and array literals === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
ALLOCATEMEMV D2 2 0
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 2 0
PUSHR D2
WRITEPODARRAY D2 {1,2}
POP D2
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0002
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(a)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0002
PUSHR D4
LOAD D2 0.0003; UsrFunc[void AssertEqual(int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHV 1; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.4060; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
ALLOCATEMEMV D2 2 0.0009
PUSHR D2
SETR D0 D2
PUSHR D0
ALLOCATEMEMV D2 1 0
PUSHR D2
WRITEPODARRAY D2 {1}
POP D2
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
ALLOCATEMEMV D2 1 0
PUSHR D2
WRITEPODARRAY D2 {2}
POP D2
POP D0
WRITEPODARRAYVR 1 D2
POP D2
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 16 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(a) RefCount(b)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 15 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b[0])"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 19 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(a) RefCount(b[1])"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 1; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 1
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 19 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(b) RefCount(b[1])"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 1; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
PUSHR D4
ALLOCATEMEMV D2 16 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(b) RefCount(b)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
REF_REMOVE 0.0002
ALLOCATEMEMV D2 28 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - bitmaps === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 -1; InlineFunc[bitmap Game::LoadBitmapID(int)] Params
LOADBITMAPDATAR D2; InlineFunc[bitmap Game::LoadBitmapID(int)] Body Start
SETR D2 REFBITMAP; InlineFunc[bitmap Game::LoadBitmapID(int)] Body End
STORE_OBJECT D2 0.0003
SETV D2 0; InlineFunc[bitmap Game::LoadBitmapID(int)] Params
LOADBITMAPDATAR D2; InlineFunc[bitmap Game::LoadBitmapID(int)] Body Start
SETR D2 REFBITMAP; InlineFunc[bitmap Game::LoadBitmapID(int)] Body End
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 25 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(internal_bmp_1)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 25 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(internal_bmp_2)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV -0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
SETV D2 0
STORE_OBJECT D2 0.0002
PUSHV 256; InlineFunc[bitmap bitmap::bitmap(int, int)] Params Start
SETV D1 256; InlineFunc[bitmap bitmap::bitmap(int, int)] Params End
POP D0; InlineFunc[bitmap bitmap::bitmap(int, int)] Body Start
SETR D2 CREATEBITMAP; InlineFunc[bitmap bitmap::bitmap(int, int)] Body End
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 25 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(internal_bmp_1)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
REF_REMOVE 0.0002
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 40 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - class member arrays === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; ProtoFunc[List List::List()] Set Destructor
ZCLASS_CONSTRUCT D2 {0.0001,0}
ZCLASS_MARK_TYPE {0.0001,0,0,0.0008}; ProtoFunc[List List::List()] Default Construct
STORE_OBJECT D2 0.0003
LOAD D2 0.0003; InlineFunc[bool ArrayPushBack(int[], int)] Params Start
ZCLASS_READ D2 0.0001
PUSHR D2
PUSHV 1337; InlineFunc[bool ArrayPushBack(int[], int)] Params End
PUSHV -1; InlineFunc[bool ArrayPushBack(int[], int)] Body Start
ARRAYPUSH
POPARGS D5 0.0003; InlineFunc[bool ArrayPushBack(int[], int)] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D2
LOAD D2 0.0003
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0
PUSHR D4
ALLOCATEMEMV D2 22 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(list->items)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params Start
ZCLASS_READ D2 0.0001; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
ZCLASS_READ D2 0.0001
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 16 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(items)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 9 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "items[0]"
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHV 1337; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0003
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0.0001
PUSHR D4
ALLOCATEMEMV D2 16 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(items)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
REF_REMOVE 0.0002
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 40 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - return local string === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR D4
PUSHV 5; UsrFunc[char32[] makeString(int)] Params
CALLFUNC 0.3657; UsrFunc[char32[] makeString(int)] Call
POP D4
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(s)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
LOAD D2 0.0003; InlineFunc[int strlen(char32[])] Params Start AND UsrFunc[void AssertEqual(int, int)] Params Start
SETR D3 D2; InlineFunc[int strlen(char32[])] Params End
STRINGLENGTH D2 D3; InlineFunc[int strlen(char32[])] Body
PUSHR D2
PUSHV 5; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.4060; UsrFunc[void AssertEqual(int, int)] Call
POP D4
REF_REMOVE 0.0003
ALLOCATEMEMV D2 39 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - return local array === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR D4
CALLFUNC 0.3650; UsrFunc[int[] makeArray()] Call
POP D4
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 14 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(arr)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
LOAD D2 0.0003; InlineFunc[int SizeOfArray(int[])] Params AND UsrFunc[void AssertEqual(int, int)] Params Start
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
PUSHR D2
PUSHV 3; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.4060; UsrFunc[void AssertEqual(int, int)] Call
POP D4
REF_REMOVE 0.0003
ALLOCATEMEMV D2 35 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - string literal === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
ALLOCATEMEMV D2 10 0
WRITEPODSTRING D2 "hi there\n"
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 14 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(str)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003; InlineFunc[void Trace(char32[])] Params
TRACE6 D2; InlineFunc[void Trace(char32[])] Body Start
TRACE3; InlineFunc[void Trace(char32[])] Body End
PUSHR D4
ALLOCATEMEMV D2 20 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(\"literal\")"
PUSHR D2
ALLOCATEMEMV D2 8 0; InlineFunc[long RefCount(untyped)] Params Start
WRITEPODSTRING D2 "literal"; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
ALLOCATEMEMV D2 34 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - array literal === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
ALLOCATEMEMV D2 3 0.0008
PUSHR D2
SETR D0 D2
PUSHR D0
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
POP D0
WRITEPODARRAYVR 2 D2
POP D2
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 14 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(arr)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 17 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(arr[0])"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
LOAD D2 0.0003; InlineFunc[int SizeOfArray(Person[])] Params AND UsrFunc[void AssertEqual(int, int)] Params Start
ARRAYSIZE D2; InlineFunc[int SizeOfArray(Person[])] Body
PUSHR D2
PUSHV 3; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.4060; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
ALLOCATEMEMV D2 20 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount({0, 1, 2})"
PUSHR D2
ALLOCATEMEMV D2 3 0; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
WRITEPODARRAY D2 {0,1,2}; InlineFunc[long RefCount(untyped)] Params End
POP D2; InlineFunc[long RefCount(untyped)] Body Start
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body End
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 17 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount({NULL})"
PUSHR D2
ALLOCATEMEMV D2 1 0; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
WRITEPODARRAY D2 {0}; InlineFunc[long RefCount(untyped)] Params End
POP D2; InlineFunc[long RefCount(untyped)] Body Start
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body End
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 25 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount({new Person()})"
PUSHR D2
ALLOCATEMEMV D2 1 0.0008; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
SETR D0 D2
PUSHR D0
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
POP D0
WRITEPODARRAYVR 0 D2; InlineFunc[long RefCount(untyped)] Params End
POP D2; InlineFunc[long RefCount(untyped)] Body Start
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body End
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 28 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount({new Person()}[0])"
PUSHR D2
ALLOCATEMEMV D2 1 0.0008; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
SETR D0 D2
PUSHR D0
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
POP D0
WRITEPODARRAYVR 0 D2
PEEK D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
PUSHV 5; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
PEEK D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
POP D4
REF_REMOVE 0.0003
PUSHR D4
PUSHV 0; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
ALLOCATEMEMV D2 37 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - array of strings === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
ALLOCATEMEMV D2 2 0.0009
PUSHR D2
SETR D0 D2
PUSHR D0
ALLOCATEMEMV D2 3 0
WRITEPODSTRING D2 "hi"
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
ALLOCATEMEMV D2 6 0
WRITEPODSTRING D2 "there"
POP D0
WRITEPODARRAYVR 1 D2
POP D2
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 14 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(arr)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 17 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(arr[0])"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
LOAD D2 0.0003; InlineFunc[int SizeOfArray(char32[][])] Params AND UsrFunc[void AssertEqual(int, int)] Params Start
ARRAYSIZE D2; InlineFunc[int SizeOfArray(char32[][])] Body
PUSHR D2
PUSHV 2; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.4060; UsrFunc[void AssertEqual(int, int)] Call
PEEK D4
ALLOCATEMEMV D2 20 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount({0, 1, 2})"
PUSHR D2
ALLOCATEMEMV D2 3 0; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
WRITEPODARRAY D2 {0,1,2}; InlineFunc[long RefCount(untyped)] Params End
POP D2; InlineFunc[long RefCount(untyped)] Body Start
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body End
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 26 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount({\"hi\", \"there\"})"
PUSHR D2
ALLOCATEMEMV D2 2 0.0009; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
SETR D0 D2
PUSHR D0
ALLOCATEMEMV D2 3 0
WRITEPODSTRING D2 "hi"
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
ALLOCATEMEMV D2 6 0
WRITEPODSTRING D2 "there"
POP D0
WRITEPODARRAYVR 1 D2; InlineFunc[long RefCount(untyped)] Params End
POP D2; InlineFunc[long RefCount(untyped)] Body Start
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body End
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 29 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount({\"hi\", \"there\"}[0])"
PUSHR D2
ALLOCATEMEMV D2 2 0.0009; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
SETR D0 D2
PUSHR D0
ALLOCATEMEMV D2 3 0
WRITEPODSTRING D2 "hi"
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
ALLOCATEMEMV D2 6 0
WRITEPODSTRING D2 "there"
POP D0
WRITEPODARRAYVR 1 D2
PEEK D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 2 0.0009; InlineFunc[int SizeOfArray(char32[])] Params Start AND UsrFunc[void AssertEqual(int, int)] Params Start
PUSHR D2
SETR D0 D2
PUSHR D0
ALLOCATEMEMV D2 3 0
WRITEPODSTRING D2 "hi"
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
ALLOCATEMEMV D2 6 0
WRITEPODSTRING D2 "there"
POP D0
WRITEPODARRAYVR 1 D2
PEEK D2
POP D0
READPODARRAYV D2 1; InlineFunc[int SizeOfArray(char32[])] Params End
ARRAYSIZE D2; InlineFunc[int SizeOfArray(char32[])] Body
PUSHR D2
PUSHV 6; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.4060; UsrFunc[void AssertEqual(int, int)] Call
POP D4
REF_REMOVE 0.0003
ALLOCATEMEMV D2 40 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - 2d array of strings === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
ALLOCATEMEMV D2 2 0.0009
PUSHR D2
SETR D0 D2
PUSHR D0
ALLOCATEMEMV D2 2 0.0009
PUSHR D2
SETR D0 D2
PUSHR D0
ALLOCATEMEMV D2 3 0
WRITEPODSTRING D2 "hi"
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
ALLOCATEMEMV D2 6 0
WRITEPODSTRING D2 "there"
POP D0
WRITEPODARRAYVR 1 D2
POP D2
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
ALLOCATEMEMV D2 1 0.0009
PUSHR D2
SETR D0 D2
PUSHR D0
ALLOCATEMEMV D2 1 0
WRITEPODSTRING D2 ""
POP D0
WRITEPODARRAYVR 0 D2
POP D2
POP D0
WRITEPODARRAYVR 1 D2
POP D2
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 14 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(arr)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 17 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(arr[0])"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 20 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(arr[0][0])"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[long RefCount(untyped)] Params End
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
LOAD D2 0.0003; InlineFunc[int SizeOfArray(char32[][][])] Params AND UsrFunc[void AssertEqual(int, int)] Params Start
ARRAYSIZE D2; InlineFunc[int SizeOfArray(char32[][][])] Body
PUSHR D2
PUSHV 2; UsrFunc[void AssertEqual(int, int)] Params End
CALLFUNC 0.4060; UsrFunc[void AssertEqual(int, int)] Call
POP D4
REF_REMOVE 0.0003
ALLOCATEMEMV D2 18 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD_INTERNAL_ARRAY_REF D2 @SCREEN_NPCS REFSCREENDATA
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0003
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 12 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(b)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
PEEK D4
ALLOCATEMEMV D2 23 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(Screen->NPCs)"
PUSHR D2
LOAD_INTERNAL_ARRAY_REF D2 @SCREEN_NPCS REFSCREENDATA; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0003
REF_REMOVE 0.0002
ALLOCATEMEMV D2 28 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - varargs === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR D4
PUSHVARGV 1; UsrFunc[void storeVarargs(int[])] Params Start
PUSHVARGV 2
PUSHVARGV 3
MAKEVARGARRAY 0; Allocate Vargs array
PUSHR D2; Push the Vargs array pointer AND UsrFunc[void storeVarargs(int[])] Params End
CALLFUNC 0.4081; UsrFunc[void storeVarargs(int[])] Call
PEEK D4
ALLOCATEMEMV D2 24 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(storedVarargs)"
PUSHR D2
SETR D2 GD3; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
ALLOCATEMEMV D2 33 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "=== Test %d - GlobalObject === \n"
PUSHR D2
SETR D2 GD4
ADDV D2 1
SETR GD4 D2
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0.0003
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
LOAD D2 0.0003; InlineFunc[void GlobalObject(untyped)] Params
ZCLASS_GLOBALIZE D2; InlineFunc[void GlobalObject(untyped)] Body
REF_REMOVE 0.0003
PUSHR D4
PUSHV 1; UsrFunc[void checkCountWithGC(int)] Params
CALLFUNC 0.3545; UsrFunc[void checkCountWithGC(int)] Call
POP D4
SETR D2 GD5; while() #7 Test
COMPAREV D2 100
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3397 ==; Test 'while'
PUSHR D4; while() #7 Body Start
CALLFUNC 0.3688; UsrFunc[void yield()] Call
POP D4; while() #7 Body End
GOTO 3388; while() #7 End
POPARGS D5 0.0005
QUIT; void run() Body End
SETR D4 SP2; Func[void End()] Body Start
ALLOCATEMEMV D2 13 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "[Test] done\n"
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND [Opt:NeverRet] AND Func[void End()] Body End
SETR D4 SP2; Func[void Fail(char32[])] Body Start
MARK_TYPE_STACK 0.0001 0
REF_INC 0
LOAD D2 0; InlineFunc[int strlen(char32[])] Params Start AND if() #96 Test
SETR D3 D2; InlineFunc[int strlen(char32[])] Params End
STRINGLENGTH D2 D3; InlineFunc[int strlen(char32[])] Body
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3424 ==; Test 'if'
ALLOCATEMEMV D2 24 0; InlineFunc[void printf(char32[])] Params Start AND if() #96 Body Start
WRITEPODSTRING D2 "[Test] failed test: %s\n"
PUSHR D2
LOAD D2 0
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
GOTO 3429; if() #96 Body End
ALLOCATEMEMV D2 20 0; InlineFunc[void printf(char32[])] Params Start AND if() #96 Else Start
WRITEPODSTRING D2 "[Test] failed test\n"
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End AND if() #96 Else End
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND [Opt:NeverRet] AND Func[void Fail(char32[])] Body End
SETR D4 SP2; Func[void Init(int)] Body Start
ALLOCATEMEMV D2 35 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "[Test] started: dmap %d screen %d\n"
PUSHR D2
PUSHVARGV 5
LOAD D2 0
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; if() #420 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3449 ==; Test 'if'
PUSHV 5; InlineFunc[void hero::Warp(int, int)] Params Start AND if() #420 Body Start
LOAD D2 0; InlineFunc[void hero::Warp(int, int)] Params End
POP D3; InlineFunc[void hero::Warp(int, int)] Body Start
WARPR D3 D2; InlineFunc[void hero::Warp(int, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND if() #420 Body End
POP D5
RETURNFUNC; Func[void Init(int)] Body End
SETR D4 SP2; Func[void Person::shakeHands(Person)] Body Start
MARK_TYPE_STACK 0.0001 0
REF_INC 0
PUSHR D4
SETR D2 CLASS_THISKEY; InlineFunc[long RefCount(untyped)] Params AND UsrFunc[void AssertEqual(long, long, char32[])] Params Start
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001
ALLOCATEMEMV D2 15 0
WRITEPODSTRING D2 "RefCount(this)"
PUSHR D2; UsrFunc[void AssertEqual(long, long, char32[])] Params End
CALLFUNC 0.3478; UsrFunc[void AssertEqual(long, long, char32[])] Call
PEEK D4
LOAD D2 0; InlineFunc[long RefCount(untyped)] Params AND UsrFunc[void AssertEqual(long, long, char32[])] Params Start
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002
ALLOCATEMEMV D2 16 0
WRITEPODSTRING D2 "RefCount(other)"
PUSHR D2; UsrFunc[void AssertEqual(long, long, char32[])] Params End
CALLFUNC 0.3478; UsrFunc[void AssertEqual(long, long, char32[])] Call
POP D4
LOAD D2 0
ZCLASS_WRITE CLASS_THISKEY 0.0002
REF_REMOVE 0
POP D5
RETURNFUNC; Func[void Person::shakeHands(Person)] Body End
SETR D4 SP2; Func[void AssertEqual(long, long, char32[])] Body Start
MARK_TYPE_STACK 0.0001 0
REF_INC 0
LOAD D2 0.0001; if() #438 Test
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3501 ==; Test 'if'
ALLOCATEMEMV D2 53 0; InlineFunc[void printf(char32[])] Params Start AND if() #438 Body Start
WRITEPODSTRING D2 "[Test] failed assertion: expected %d but got %d. %s\n"
PUSHR D2
LOAD D2 0.0001
PUSHVARGR D2
LOAD D2 0.0002
PUSHVARGR D2
LOAD D2 0
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #438 Body End
REF_REMOVE 0
POPARGS D5 0.0003
RETURNFUNC; Func[void AssertEqual(long, long, char32[])] Body End
SETR D4 SP2; Func[void check(char32[], int, int)] Body Start
MARK_TYPE_STACK 0.0001 0.0002
REF_INC 0.0002
PUSHR D4
LOAD D2 0.0001; UsrFunc[void AssertEqual(int, int, char32[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void AssertEqual(int, int, char32[])] Params End
CALLFUNC 0.3519; UsrFunc[void AssertEqual(int, int, char32[])] Call
POP D4
REF_REMOVE 0.0002
POPARGS D5 0.0003
RETURNFUNC; Func[void check(char32[], int, int)] Body End
SETR D4 SP2; Func[void AssertEqual(int, int, char32[])] Body Start
MARK_TYPE_STACK 0.0001 0
REF_INC 0
LOAD D2 0.0001; if() #437 Test
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3542 ==; Test 'if'
ALLOCATEMEMV D2 53 0; InlineFunc[void printf(char32[])] Params Start AND if() #437 Body Start
WRITEPODSTRING D2 "[Test] failed assertion: expected %d but got %d. %s\n"
PUSHR D2
LOAD D2 0.0001
PUSHVARGR D2
LOAD D2 0.0002
PUSHVARGR D2
LOAD D2 0
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #437 Body End
REF_REMOVE 0
POPARGS D5 0.0003
RETURNFUNC; Func[void AssertEqual(int, int, char32[])] Body End
SETR D4 SP2; Func[void checkCountWithGC(int)] Body Start
SETR D2 GD1; if() #422 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3563 ==; Test 'if'
PUSHR D4; if() #422 Body Start
ALLOCATEMEMV D2 15 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count (pre GC)"
PUSHR D2
PUSHR GD1
LOAD D2 0
PUSHR D2; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4; if() #422 Body End
GC; InlineFunc[void GC()] Body
SETR D2 GD1; if() #423 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3581 ==; Test 'if'
PUSHR D4; if() #423 Body Start
ALLOCATEMEMV D2 16 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "count (post GC)"
PUSHR D2
PUSHR GD1
LOAD D2 0
PUSHR D2; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4; if() #423 Body End
POP D5
RETURNFUNC; Func[void checkCountWithGC(int)] Body End
PUSHV 0; Func[Person createPerson1()] Body Start
SETR D4 SP2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0
LOAD D2 0; return Start
REF_AUTORELEASE D2
REF_REMOVE 0
GOTO 3597; return End
REF_REMOVE 0
POP D5
RETURNFUNC; Func[Person createPerson1()] Body End
SETV D2 0.4105; Func[Person Person::Person(int)] Body Start
SETR CLASS_THISKEY2 CLASS_THISKEY
ZCLASS_CONSTRUCT CLASS_THISKEY {0.0003,0.0003}
ZCLASS_MARK_TYPE {0.0003,0.0008,0.0001,0.0008,0.0002,0.0008}
SETR D4 SP2
PUSHR CLASS_THISKEY2
SETR D2 GD1
ADDV D2 1
SETR GD1 D2
LOAD D2 0
PUSHR D2
SETR D2 CLASS_THISKEY
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0
POP D5
SETR D2 CLASS_THISKEY
POP CLASS_THISKEY
RETURNFUNC; Func[Person Person::Person(int)] Body End
SETR D4 SP2; Func[Person createPerson2()] Body Start
PUSHR CLASS_THISKEY; return Start
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
REF_AUTORELEASE D2
RETURNFUNC; return End AND Func[Person createPerson2()] Body End
PUSHV 0; Func[Person createPerson3()] Body Start
SETR D4 SP2
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
STORE_OBJECT D2 0
LOAD D2 0; if() #97 Test
COMPAREV D2 0
GOTOCMP 3644 ==; Test 'if'
LOAD D2 0; return Start AND if() #97 Body Start
REF_AUTORELEASE D2
REF_REMOVE 0
GOTO 3648; return End
GOTO 3647; if() #97 Body End
SETV D2 0; return Start AND if() #97 Else Start
REF_REMOVE 0
GOTO 3648; return End AND if() #97 Else End
REF_REMOVE 0
POP D5
RETURNFUNC; Func[Person createPerson3()] Body End
SETR D4 SP2; Func[int[] makeArray()] Body Start
ALLOCATEMEMV D2 3 0; return Start
PUSHR D2
WRITEPODARRAY D2 {1,2,3}
POP D2
REF_AUTORELEASE D2
RETURNFUNC; return End AND Func[int[] makeArray()] Body End
PUSHARGSV 0 0.0002; Func[char32[] makeString(int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 1 0
WRITEPODSTRING D2 ""
STORE_OBJECT D2 0.0001
STOREV 0 0; for() #152 setup
LOAD D2 0; for() #152 LoopTest
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3681 ==; for() #152 TestFail?
LOAD D2 0.0001; InlineFunc[bool ArrayPushFront(char32[], char32)] Params Start AND for() #152 Body Start
PUSHR D2
PUSHV 46; InlineFunc[bool ArrayPushFront(char32[], char32)] Params End
PUSHV 0; InlineFunc[bool ArrayPushFront(char32[], char32)] Body Start
ARRAYPUSH
POPARGS D5 0.0003; InlineFunc[bool ArrayPushFront(char32[], char32)] Body End AND for() #152 Body End
LOAD D2 0; for() #152 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 3663; for() #152 End
LOAD D2 0.0001; return Start
REF_AUTORELEASE D2
REF_REMOVE 0.0001
GOTO 3686; return End
REF_REMOVE 0.0001
POPARGS D5 0.0003
RETURNFUNC; Func[char32[] makeString(int)] Body End
SETR D4 SP2; Func[void yield()] Body Start
WAITFRAME; InlineFunc[void Waitframe()] Body
SETR D2 GD5
ADDV D2 1
SETR GD5 D2
RETURNFUNC; Func[void yield()] Body End
SETV D2 0.4099; Func[Hat Hat::Hat()] Body Start
SETR CLASS_THISKEY2 CLASS_THISKEY
ZCLASS_CONSTRUCT CLASS_THISKEY {0}
SETR D4 SP2
PUSHR CLASS_THISKEY2
SETR D2 GD1
ADDV D2 1
SETR GD1 D2
SETR D2 CLASS_THISKEY
POP CLASS_THISKEY
RETURNFUNC; Func[Hat Hat::Hat()] Body End
SETR D4 SP2; Func[void usePerson1(Person)] Body Start
MARK_TYPE_STACK 0.0001 0
REF_INC 0
PUSHR D4
ALLOCATEMEMV D2 17 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(person)"
PUSHR D2
LOAD D2 0; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0
POP D5
RETURNFUNC; Func[void usePerson1(Person)] Body End
SETR D4 SP2; Func[void usePerson2(Person)] Body Start
MARK_TYPE_STACK 0.0001 0
REF_INC 0
PUSHR D4
ALLOCATEMEMV D2 17 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(person)"
PUSHR D2
LOAD D2 0; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0
POP D5
RETURNFUNC; Func[void usePerson2(Person)] Body End
SETR D4 SP2; Func[Person usePerson3(Person)] Body Start
MARK_TYPE_STACK 0.0001 0
REF_INC 0
PUSHR CLASS_THISKEY
PUSHR D4
PUSHV 0; ClassFunc[Person Person::Person(int)] Params
CALLFUNC 0.3599; ClassFunc[Person Person::Person(int)] Constructor Call
POP D4
POP CLASS_THISKEY
PUSHR D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
ALLOCATEMEMV D2 17 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(person)"
PUSHR D2
LOAD D2 0; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0; return Start
REF_AUTORELEASE D2
REF_REMOVE 0; return End
POP D5
RETURNFUNC; Func[Person usePerson3(Person)] Body End
PUSHARGSV 0 0.0005; Func[Person usePerson5(Person, bool)] Body Start
SETR D4 SP2
MARK_TYPE_STACK 0.0001 0.0006
REF_INC 0.0006
PUSHR D4
CALLFUNC 0.3688; UsrFunc[void yield()] Call
PEEK D4
ALLOCATEMEMV D2 21 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(a) RefCount(person)"
PUSHR D2
LOAD D2 0.0006; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0006
STORE_OBJECT D2 0.0004
PUSHR D4
ALLOCATEMEMV D2 21 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(b) RefCount(person)"
PUSHR D2
LOAD D2 0.0004; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0002; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0006; if() #430 Test
COMPAREV D2 0
GOTOCMP 4025 ==; Test 'if'
LOAD D2 0.0006; if() #430 Body Start
STORE_OBJECT D2 0.0003
PUSHR D4
ALLOCATEMEMV D2 21 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(c) RefCount(person)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0006; while() #8 Test
COMPAREV D2 0
GOTOCMP 3828 ==; Test 'while'
LOAD D2 0.0006; while() #8 Body Start
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 21 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(d) RefCount(person)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0004; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0002; if() #431 Test
COMPAREV D2 0
GOTOCMP 3826 ==; Test 'if'
REF_REMOVE 0.0002; if() #431 Body Start
GOTO 3828; break 1; AND if() #431 Body End
REF_REMOVE 0.0002; while() #8 Body End
GOTO 3806; while() #8 End
PUSHR D4
ALLOCATEMEMV D2 21 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(e) RefCount(person)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0006; while() #9 Test
COMPAREV D2 0
GOTOCMP 3864 ==; Test 'while'
LOAD D2 0.0006; while() #9 Body Start
STORE_OBJECT D2 0.0002
LOAD D2 0.0002; if() #432 Test
COMPAREV D2 0
GOTOCMP 3862 ==; Test 'if'
LOAD D2 0.0002; if() #432 Body Start
STORE_OBJECT D2 0.0001
PUSHR D4
ALLOCATEMEMV D2 21 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(f) RefCount(person)"
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0005; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0001
REF_REMOVE 0.0002
GOTO 3864; break 1;
REF_REMOVE 0.0001; if() #432 Body End
REF_REMOVE 0.0002; while() #9 Body End
GOTO 3838; while() #9 End
PUSHR D4
ALLOCATEMEMV D2 21 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(g) RefCount(person)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0005; while() #10 Test
COMPAREV D2 0
GOTOCMP 3890 ==; Test 'while'
STOREV 13 0.0002; while() #10 Body Start
SETV D2 14
STORE D2 0.0002
LOAD D2 0.0002; if() #433 Test
COMPAREV D2 0
GOTOCMP 3874 ==; Test 'if'
LOAD D2 0.0006; return Start AND if() #433 Body Start
REF_AUTORELEASE D2
REF_REMOVE 0.0003
REF_REMOVE 0.0002
REF_REMOVE 0.0004
GOTO 4029; return End AND if() #433 Body End
GOTO 3874; while() #10 Body End AND while() #10 End
PUSHR D4
ALLOCATEMEMV D2 22 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(g2) RefCount(person)"
PUSHR D2
LOAD D2 0.0003; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0006
STORE_OBJECT D2 0.0002
PUSHR D4
ALLOCATEMEMV D2 22 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(g3) RefCount(person)"
PUSHR D2
LOAD D2 0.0002; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0004; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
SETV D2 0
STORE_OBJECT D2 0.0002
SETR D2 GD1; switch() #51 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 1
GOTOCMP 3933 !=; case '10000' AND switch() #51 NoMatch
LOAD D2 0.0006; Case block
STORE_OBJECT D2 0.0001
PUSHR D4
ALLOCATEMEMV D2 21 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(h) RefCount(person)"
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0004; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0.0001
GOTO 3934; break 1;
REF_REMOVE 0.0001
QUIT; Case block AND InlineFunc[void Quit()] Body
PUSHR D4
ALLOCATEMEMV D2 22 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(g4) RefCount(person)"
PUSHR D2
LOAD D2 0.0006; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0006; while(true) #11 Body [Opt:AlwaysOn] Start
STORE_OBJECT D2 0.0001
SETR D2 GD1; switch() #52 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 1
GOTOCMP 3966 !=; case '10000' AND switch() #52 NoMatch
LOAD D2 0.0006; Case block
STORE_OBJECT D2 0
PUSHR D4
ALLOCATEMEMV D2 21 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(i) RefCount(person)"
PUSHR D2
LOAD D2 0; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0005; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
REF_REMOVE 0
REF_REMOVE 0.0001
GOTO 3969; break 2;
REF_REMOVE 0
QUIT; Case block AND InlineFunc[void Quit()] Body
REF_REMOVE 0.0001; while(true) #11 Body [Opt:AlwaysOn] End
GOTO 3944; while() #11 End
PUSHR D4
ALLOCATEMEMV D2 22 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(g5) RefCount(person)"
PUSHR D2
LOAD D2 0.0006; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0003; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0006; while() #12 Test
COMPAREV D2 0
GOTOCMP 4023 ==; Test 'while'
LOAD D2 0.0006; while() #12 Body Start
STORE_OBJECT D2 0.0001
PUSHR D4
ALLOCATEMEMV D2 21 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(j) RefCount(person)"
PUSHR D2
LOAD D2 0.0001; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0004; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0.0001; if() #434 Test
COMPAREV D2 0
GOTOCMP 4021 ==; Test 'if'
LOAD D2 0.0006; if() #434 Body Start
STORE_OBJECT D2 0
PUSHR D4
ALLOCATEMEMV D2 21 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "(k) RefCount(person)"
PUSHR D2
LOAD D2 0; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0005; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0; if() #435 Test
COMPAREV D2 0
GOTOCMP 4020 ==; Test 'if'
LOAD D2 0; return Start AND if() #435 Body Start
REF_AUTORELEASE D2
REF_REMOVE 0
REF_REMOVE 0.0001
REF_REMOVE 0.0003
REF_REMOVE 0.0002
REF_REMOVE 0.0004
GOTO 4029; return End AND if() #435 Body End
REF_REMOVE 0; if() #434 Body End
REF_REMOVE 0.0001; while() #12 Body End
GOTO 3979; while() #12 End
REF_REMOVE 0.0003
REF_REMOVE 0.0002; if() #430 Body End
SETV D2 0; return Start
REF_REMOVE 0.0004
GOTO 4029; return End
REF_REMOVE 0.0004
REF_REMOVE 0.0006
POPARGS D5 0.0007
RETURNFUNC; Func[Person usePerson5(Person, bool)] Body End
SETV D2 0.4111; Func[SelfRetainingRng SelfRetainingRng::SelfRetainingRng(randgen)] Body Start
SETR CLASS_THISKEY2 CLASS_THISKEY
ZCLASS_CONSTRUCT CLASS_THISKEY {0.0002}
ZCLASS_MARK_TYPE {0.0001,0.0005,0,0.0008}
SETR D4 SP2
PUSHR CLASS_THISKEY2
MARK_TYPE_STACK 0.0001 0
REF_INC 0
SETR D2 CLASS_THISKEY
PUSHR D2
SETR D2 CLASS_THISKEY
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0
LOAD D2 0
PUSHR D2
SETR D2 CLASS_THISKEY
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0.0001
SETR D2 GD2
ADDV D2 1
SETR GD2 D2
REF_REMOVE 0
POP D5
SETR D2 CLASS_THISKEY
POP CLASS_THISKEY
RETURNFUNC; Func[SelfRetainingRng SelfRetainingRng::SelfRetainingRng(randgen)] Body End
SETR D4 SP2; Func[void AssertEqual(int, int)] Body Start
LOAD D2 0; if() #436 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4079 ==; Test 'if'
ALLOCATEMEMV D2 49 0; InlineFunc[void printf(char32[])] Params Start AND if() #436 Body Start
WRITEPODSTRING D2 "[Test] failed assertion: expected %d but got %d\n"
PUSHR D2
LOAD D2 0
PUSHVARGR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #436 Body End
POPARGS D5 0.0002
RETURNFUNC; Func[void AssertEqual(int, int)] Body End
SETR D4 SP2; Func[void storeVarargs(int[])] Body Start
MARK_TYPE_STACK 0.0001 0
REF_INC 0
PUSHR D4
ALLOCATEMEMV D2 18 0; UsrFunc[void check(char32[], int, int)] Params Start
WRITEPODSTRING D2 "RefCount(varargs)"
PUSHR D2
LOAD D2 0; InlineFunc[long RefCount(untyped)] Params
REF_COUNT D2; InlineFunc[long RefCount(untyped)] Body
PUSHR D2
PUSHV 0.0001; UsrFunc[void check(char32[], int, int)] Params End
CALLFUNC 0.3504; UsrFunc[void check(char32[], int, int)] Call
POP D4
LOAD D2 0
SET_OBJECT GD3 D2
REF_REMOVE 0
POP D5
RETURNFUNC; Func[void storeVarargs(int[])] Body End
STARTDESTRUCTOR "Hat"; Func[void ~Hat::Hat()] Body Start
SETR D4 SP2
SETR D2 GD1
SUBV D2 1
SETR GD1 D2
RETURNFUNC; Func[void ~Hat::Hat()] Body End
STARTDESTRUCTOR "Person"; Func[void ~Person::Person()] Body Start
SETR D4 SP2
SETR D2 GD1
SUBV D2 1
SETR GD1 D2
RETURNFUNC; Func[void ~Person::Person()] Body End
STARTDESTRUCTOR "SelfRetainingRng"; Func[void ~SelfRetainingRng::SelfRetainingRng()] Body Start
SETR D4 SP2
SETR D2 GD2
SUBV D2 1
SETR GD2 D2
RETURNFUNC; Func[void ~SelfRetainingRng::SelfRetainingRng()] Body End
