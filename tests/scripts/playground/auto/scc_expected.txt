stderr:

Compiling 'scc.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 18,
    "symbols": 44,
    "identifiers": 153,
    "elided": true
  }
}

zasm:

QUIT; void run() Body
PUSHR REFDMAPDATA; void run() Body Start
PUSHARGSV 0 0.0004
SETR D4 SP2
ALLOCATEMEMV D2 100 0
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[void Game::GetSaveName(char32[])] Params
GETSAVENAME D2; InlineFunc[void Game::GetSaveName(char32[])] Body
ALLOCATEMEMV D2 19 0
STORE D2 0.0002
WRITEPODSTRING D2 "[Test] Running %s\n"
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D2 0.0003; InlineFunc[int Game::GetGenericScript(char32[])] Params
GETGENERICSCRIPT D2; InlineFunc[int Game::GetGenericScript(char32[])] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #421 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 38 ==; Test 'if'
ALLOCATEMEMV D2 53 0; if() #421 Body Start
STORE D2 0
WRITEPODSTRING D2 "[Test] failed to start - could not find test script\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #421 Body End
LOAD D2 0.0001; InlineFunc[genericdata Game::LoadGenericData(int)] Params
LOADGENERICDATA D2; InlineFunc[genericdata Game::LoadGenericData(int)] Body Start
SETR D2 REFGENERICDATA; InlineFunc[genericdata Game::LoadGenericData(int)] Body End
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFGENERICDATA
SETR GENDATARUNNING D2
LOAD D2 0; while() #2 Test
PUSHR D2
POP REFGENERICDATA
SETR D2 GENDATARUNNING
COMPAREV D2 0
GOTOCMP 60 ==; Test 'while'
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #2 Body
GOTO 52; while() #2 End
CALLFUNC 0.0489; UsrFunc[void End()] Call AND [Opt:NeverRet]
LOAD D3 0.0003
DEALLOCATEMEMR D3; [Opt:NeverRet] AND void run() Body End
PUSHR REFGENERICDATA; void run() Body Start
PUSHARGSV 0 0.0012
SETR D4 SP2
PUSHR D4
PUSHV 0; UsrFunc[void Init(int)] Params
CALLFUNC 0.0501; UsrFunc[void Init(int)] Call
POP D4
SETV D2 0
PUSHR D2
SETV D2 41
PUSHR D2
POP D0
POP D2
SETR FFRULE D2
ALLOCATEMEMV D2 1000 0
STORE D2 0.0011
ALLOCATEMEMV D2 12 0
STORE D2 0.0010
WRITEPODSTRING D2 "hello world"
PUSHR D4
LOAD D2 0.0010; UsrFunc[void playMessage(char32[])] Params Start
PUSHR D2; UsrFunc[void playMessage(char32[])] Params End
CALLFUNC 0.0549; UsrFunc[void playMessage(char32[])] Call
POP D4
LOAD D3 0.0010
DEALLOCATEMEMR D3
STOREV 32 0.0009; for() #152 setup
LOAD D2 0.0009; for() #152 LoopTest
COMPAREV D2 126
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 126 ==; for() #152 TestFail?
ALLOCATEMEMV D2 1 0; for() #152 Body Start
STORE D2 0.0008
ALLOCATEMEMV D2 3 0
STORE D2 0.0007
WRITEPODSTRING D2 "%c"
LOAD D2 0.0008; InlineFunc[int sprintf(char32[], char32[])] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
PUSHR D4
LOAD D2 0.0009; UsrFunc[int scc(int)] Params Start
PUSHR D2; UsrFunc[int scc(int)] Params End
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int sprintf(char32[], char32[])] Params End
SPRINTFVARG; InlineFunc[int sprintf(char32[], char32[])] Body Start
POPARGS D5 0.0002; InlineFunc[int sprintf(char32[], char32[])] Body End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D2 0.0011; InlineFunc[int strcat(char32[], char32[])] Params Start
PUSHR D2
LOAD D2 0.0008
SETR D1 D2; InlineFunc[int strcat(char32[], char32[])] Params End
POP D0; InlineFunc[int strcat(char32[], char32[])] Body Start
STRCAT D2; InlineFunc[int strcat(char32[], char32[])] Body End
LOAD D3 0.0008
DEALLOCATEMEMR D3; for() #152 Body End
LOAD D2 0.0009; for() #152 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 90; for() #152 End
PUSHR D4
LOAD D2 0.0011; UsrFunc[void playMessage(char32[])] Params Start
PUSHR D2; UsrFunc[void playMessage(char32[])] Params End
CALLFUNC 0.0549; UsrFunc[void playMessage(char32[])] Call
POP D4
ALLOCATEMEMV D2 14 0
STORE D2 0.0009
WRITEPODSTRING D2 "hello %cworld"
LOAD D2 0.0011; InlineFunc[int sprintf(char32[], char32[])] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2
PUSHR D4
PUSHV 25; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int sprintf(char32[], char32[])] Params End
SPRINTFVARG; InlineFunc[int sprintf(char32[], char32[])] Body Start
POPARGS D5 0.0002; InlineFunc[int sprintf(char32[], char32[])] Body End
LOAD D3 0.0009
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0011; UsrFunc[void playMessage(char32[])] Params Start
PUSHR D2; UsrFunc[void playMessage(char32[])] Params End
CALLFUNC 0.0549; UsrFunc[void playMessage(char32[])] Call
POP D4
ALLOCATEMEMV D2 18 0
STORE D2 0.0008
WRITEPODSTRING D2 "hello %c%c%cworld"
LOAD D2 0.0011; InlineFunc[int sprintf(char32[], char32[])] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
PUSHR D4
PUSHV 1; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 1; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 2; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int sprintf(char32[], char32[])] Params End
SPRINTFVARG; InlineFunc[int sprintf(char32[], char32[])] Body Start
POPARGS D5 0.0002; InlineFunc[int sprintf(char32[], char32[])] Body End
LOAD D3 0.0008
DEALLOCATEMEMR D3
STOREV 0 0.0007; for() #153 setup
LOAD D2 0.0007; for() #153 LoopTest
COMPAREV D2 50
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 226 ==; for() #153 TestFail?
ALLOCATEMEMV D2 1 0; for() #153 Body Start
STORE D2 0.0006
ALLOCATEMEMV D2 8 0
STORE D2 0.0005
WRITEPODSTRING D2 "%c%c%c!"
LOAD D2 0.0006; InlineFunc[int sprintf(char32[], char32[])] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
PUSHR D4
PUSHV 1; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 0; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[int scc(int)] Params Start
MODV D2 10
PUSHR D2; UsrFunc[int scc(int)] Params End
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int sprintf(char32[], char32[])] Params End
SPRINTFVARG; InlineFunc[int sprintf(char32[], char32[])] Body Start
POPARGS D5 0.0002; InlineFunc[int sprintf(char32[], char32[])] Body End
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D2 0.0011; InlineFunc[int strcat(char32[], char32[])] Params Start
PUSHR D2
LOAD D2 0.0006
SETR D1 D2; InlineFunc[int strcat(char32[], char32[])] Params End
POP D0; InlineFunc[int strcat(char32[], char32[])] Body Start
STRCAT D2; InlineFunc[int strcat(char32[], char32[])] Body End
LOAD D3 0.0006
DEALLOCATEMEMR D3; for() #153 Body End
LOAD D2 0.0007; for() #153 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 179; for() #153 End
PUSHR D4
LOAD D2 0.0011; UsrFunc[void playMessage(char32[])] Params Start
PUSHR D2; UsrFunc[void playMessage(char32[])] Params End
CALLFUNC 0.0549; UsrFunc[void playMessage(char32[])] Call
POP D4
ALLOCATEMEMV D2 47 0
STORE D2 0.0007
WRITEPODSTRING D2 "sounds....%c%c..............%c%c..........done"
LOAD D2 0.0011; InlineFunc[int sprintf(char32[], char32[])] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
PUSHR D4
PUSHV 20; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 1; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 20; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 2; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int sprintf(char32[], char32[])] Params End
SPRINTFVARG; InlineFunc[int sprintf(char32[], char32[])] Body Start
POPARGS D5 0.0002; InlineFunc[int sprintf(char32[], char32[])] Body End
LOAD D3 0.0007
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0011; UsrFunc[void playMessage(char32[])] Params Start
PUSHR D2; UsrFunc[void playMessage(char32[])] Params End
CALLFUNC 0.0549; UsrFunc[void playMessage(char32[])] Call
POP D4
ALLOCATEMEMV D2 32 0
STORE D2 0.0006
WRITEPODSTRING D2 "counter set%c%c%c check%c%c%c%c"
LOAD D2 0.0011; InlineFunc[int sprintf(char32[], char32[])] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHR D4
PUSHV 12; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 1; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 10; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 6; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 1; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 10; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 2; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int sprintf(char32[], char32[])] Params End
SPRINTFVARG; InlineFunc[int sprintf(char32[], char32[])] Body Start
POPARGS D5 0.0002; InlineFunc[int sprintf(char32[], char32[])] Body End
LOAD D3 0.0006
DEALLOCATEMEMR D3
SETV D2 3
PUSHR D2
PUSHR D4
PUSHV 1; UsrFunc[messagedata setMessage(int, char32[])] Params Start
LOAD D2 0.0011
PUSHR D2; UsrFunc[messagedata setMessage(int, char32[])] Params End
CALLFUNC 0.0561; UsrFunc[messagedata setMessage(int, char32[])] Call
POP D4
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFMSGDATA
SETR MESSAGEDATANEXT D2
ALLOCATEMEMV D2 8 0
STORE D2 0.0005
WRITEPODSTRING D2 "true..."
PUSHR D4
PUSHV 2; UsrFunc[messagedata setMessage(int, char32[])] Params Start
LOAD D2 0.0005
PUSHR D2; UsrFunc[messagedata setMessage(int, char32[])] Params End
CALLFUNC 0.0561; UsrFunc[messagedata setMessage(int, char32[])] Call
POP D4
LOAD D3 0.0005
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 9 0
STORE D2 0.0004
WRITEPODSTRING D2 "false..."
PUSHR D4
PUSHV 3; UsrFunc[messagedata setMessage(int, char32[])] Params Start
LOAD D2 0.0004
PUSHR D2; UsrFunc[messagedata setMessage(int, char32[])] Params End
CALLFUNC 0.0561; UsrFunc[messagedata setMessage(int, char32[])] Call
POP D4
LOAD D3 0.0004
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void playMessage(int)] Params
CALLFUNC 0.0527; UsrFunc[void playMessage(int)] Call
POP D4
ALLOCATEMEMV D2 32 0
STORE D2 0.0003
WRITEPODSTRING D2 "counter set%c%c%c check%c%c%c%c"
LOAD D2 0.0011; InlineFunc[int sprintf(char32[], char32[])] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHR D4
PUSHV 12; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 1; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 10; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 6; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 1; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 100; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 2; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int sprintf(char32[], char32[])] Params End
SPRINTFVARG; InlineFunc[int sprintf(char32[], char32[])] Body Start
POPARGS D5 0.0002; InlineFunc[int sprintf(char32[], char32[])] Body End
LOAD D3 0.0003
DEALLOCATEMEMR D3
SETV D2 3
PUSHR D2
PUSHR D4
PUSHV 1; UsrFunc[messagedata setMessage(int, char32[])] Params Start
LOAD D2 0.0011
PUSHR D2; UsrFunc[messagedata setMessage(int, char32[])] Params End
CALLFUNC 0.0561; UsrFunc[messagedata setMessage(int, char32[])] Call
POP D4
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFMSGDATA
SETR MESSAGEDATANEXT D2
ALLOCATEMEMV D2 8 0
STORE D2 0.0002
WRITEPODSTRING D2 "true..."
PUSHR D4
PUSHV 2; UsrFunc[messagedata setMessage(int, char32[])] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[messagedata setMessage(int, char32[])] Params End
CALLFUNC 0.0561; UsrFunc[messagedata setMessage(int, char32[])] Call
POP D4
LOAD D3 0.0002
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 9 0
STORE D2 0.0001
WRITEPODSTRING D2 "false..."
PUSHR D4
PUSHV 3; UsrFunc[messagedata setMessage(int, char32[])] Params Start
LOAD D2 0.0001
PUSHR D2; UsrFunc[messagedata setMessage(int, char32[])] Params End
CALLFUNC 0.0561; UsrFunc[messagedata setMessage(int, char32[])] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
PUSHR D4
PUSHV 1; UsrFunc[void playMessage(int)] Params
CALLFUNC 0.0527; UsrFunc[void playMessage(int)] Call
POP D4
ALLOCATEMEMV D2 41 0
STORE D2 0
WRITEPODSTRING D2 "speed%c%c.......%c%c............%c%c...."
LOAD D2 0.0011; InlineFunc[int sprintf(char32[], char32[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHR D4
PUSHV 2; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 0; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 2; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 10; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 2; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2
PUSHR D4
PUSHV 60; UsrFunc[int scc(int)] Params
CALLFUNC 0.0612; UsrFunc[int scc(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int sprintf(char32[], char32[])] Params End
SPRINTFVARG; InlineFunc[int sprintf(char32[], char32[])] Body Start
POPARGS D5 0.0002; InlineFunc[int sprintf(char32[], char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0011; UsrFunc[void playMessage(char32[])] Params Start
PUSHR D2; UsrFunc[void playMessage(char32[])] Params End
CALLFUNC 0.0549; UsrFunc[void playMessage(char32[])] Call
POP D4
LOAD D3 0.0011
DEALLOCATEMEMR D3
POPARGS D5 0.0013
QUIT; void run() Body End
PUSHV 0; Func[void End()] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 13 0
STORE D2 0
WRITEPODSTRING D2 "[Test] done\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND [Opt:NeverRet] AND Func[void End()] Body End
PUSHV 0; Func[void Init(int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 35 0
STORE D2 0
WRITEPODSTRING D2 "[Test] started: dmap %d screen %d\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGV 5
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D2 0.0001; if() #420 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 525 ==; Test 'if'
PUSHV 5; InlineFunc[void hero::Warp(int, int)] Params Start AND if() #420 Body Start
LOAD D2 0.0001; InlineFunc[void hero::Warp(int, int)] Params End
POP D3; InlineFunc[void hero::Warp(int, int)] Body Start
WARPR D3 D2; InlineFunc[void hero::Warp(int, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND if() #420 Body End
POPARGS D5 0.0002
RETURNFUNC; Func[void Init(int)] Body End
SETR D4 SP2; Func[void playMessage(int)] Body Start
LOAD D2 0; InlineFunc[void screendata::Message(int)] Params Start
SETR D3 D2; InlineFunc[void screendata::Message(int)] Params End
MSGSTRR D3; InlineFunc[void screendata::Message(int)] Body
SETR D2 SHOWNMSG; while() #3 Test
COMPAREV D2 0
GOTOCMP 547 ==; Test 'while'
PUSHV 36; InlineFunc[void WaitTo(ScriptTiming, bool)] Params Start AND while() #3 Body Start
SETV D3 0; InlineFunc[void WaitTo(ScriptTiming, bool)] Params End
POP D2; InlineFunc[void WaitTo(ScriptTiming, bool)] Body Start
WAITTO D2 D3; InlineFunc[void WaitTo(ScriptTiming, bool)] Body End
SETV D2 1
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP D2
SETR BUTTONINPUT D2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #3 Body End
GOTO 531; while() #3 End
POP D5
RETURNFUNC; Func[void playMessage(int)] Body End
SETR D4 SP2; Func[void playMessage(char32[])] Body Start
PUSHR D4
PUSHV 1; UsrFunc[messagedata setMessage(int, char32[])] Params Start
LOAD D2 0
PUSHR D2; UsrFunc[messagedata setMessage(int, char32[])] Params End
CALLFUNC 0.0561; UsrFunc[messagedata setMessage(int, char32[])] Call
PEEK D4
PUSHV 1; UsrFunc[void playMessage(int)] Params
CALLFUNC 0.0527; UsrFunc[void playMessage(int)] Call
POP D4
POP D5
RETURNFUNC; Func[void playMessage(char32[])] Body End
PUSHV 0; Func[messagedata setMessage(int, char32[])] Body Start
SETR D4 SP2
LOAD D2 0.0002; InlineFunc[messagedata Game::LoadMessageData(int)] Params
LOADMESSAGEDATAR D2; InlineFunc[messagedata Game::LoadMessageData(int)] Body Start
SETR D2 REFMSGDATA; InlineFunc[messagedata Game::LoadMessageData(int)] Body End
STORE D2 0
LOAD D2 0; InlineFunc[void messagedata::Set(char32[])] Params Start
PUSHR D2
LOAD D2 0.0001
SETR D3 D2; InlineFunc[void messagedata::Set(char32[])] Params End
POP REFMSGDATA; InlineFunc[void messagedata::Set(char32[])] Body Start
MESSAGEDATASETSTRINGR D3; InlineFunc[void messagedata::Set(char32[])] Body End
SETV D2 24
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFMSGDATA
SETR MESSAGEDATAX D2
SETV D2 32
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFMSGDATA
SETR MESSAGEDATAY D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFMSGDATA
SETR MESSAGEDATASFX D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFMSGDATA
SETR MESSAGEDATANEXT D2
LOAD D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[messagedata setMessage(int, char32[])] Body End
SETR D4 SP2; Func[int scc(int)] Body Start
LOAD D2 0; return Start
ADDV D2 1
POP D5; return End
RETURNFUNC; Func[int scc(int)] Body End
