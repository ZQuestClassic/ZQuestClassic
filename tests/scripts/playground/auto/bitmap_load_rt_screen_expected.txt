stderr:

Compiling 'bitmap_load_rt_screen.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
bitmap_load_rt_screen.zs Line 9 @ Columns 15-33 - Warning S094: Function 'Game::CreateBitmap(int, int)' is deprecated, and should not be used.

 7            Test::Init();
 8    
 9            bitmap b1 = Game->CreateBitmap(16, 16);
                          ^~~~~~~~~~~~~~~~~~


INFO: Use `new bitmap(width, height)` instead!
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [
    {
      "range": {
        "start": {
          "line": 8,
          "character": 14
        },
        "end": {
          "line": 8,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::CreateBitmap(int, int)' is deprecated, and should not be used.\nUse `new bitmap(width, height)` instead!"
    }
  ],
  "metadata": {
    "currentFileSymbols": 6,
    "symbols": 26,
    "identifiers": 82,
    "elided": true
  }
}

zasm:

QUIT; void run() Body
PUSHR REFDMAPDATA; void run() Body Start
PUSHARGSV 0 0.0003
SETR D4 SP2
ALLOCATEMEMV D2 100 0
STORE_OBJECT D2 0.0002
LOAD D2 0.0002; InlineFunc[void Game::GetSaveName(char32[])] Params
GETSAVENAME D2; InlineFunc[void Game::GetSaveName(char32[])] Body
ALLOCATEMEMV D2 19 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "[Test] Running %s\n"
PUSHR D2
LOAD D2 0.0002
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0002; InlineFunc[int Game::GetGenericScript(char32[])] Params
GETGENERICSCRIPT D2; InlineFunc[int Game::GetGenericScript(char32[])] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #9 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30 ==; Test 'if'
ALLOCATEMEMV D2 53 0; InlineFunc[void printf(char32[])] Params Start AND if() #9 Body Start
WRITEPODSTRING D2 "[Test] failed to start - could not find test script\n"
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND if() #9 Body End
LOAD D2 0.0001; InlineFunc[genericdata Game::LoadGenericData(int)] Params
LOADGENERICDATA D2; InlineFunc[genericdata Game::LoadGenericData(int)] Body Start
SETR D2 REFGENERICDATA; InlineFunc[genericdata Game::LoadGenericData(int)] Body End
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFGENERICDATA
SETR GENDATARUNNING D2
LOAD D2 0; while() #1 Test
PUSHR D2
POP REFGENERICDATA
SETR D2 GENDATARUNNING
COMPAREV D2 0
GOTOCMP 52 ==; Test 'while'
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #1 Body
GOTO 44; while() #1 End
CALLFUNC 0.0271; UsrFunc[void End()] Call AND [Opt:NeverRet]
REF_REMOVE 0.0002; [Opt:NeverRet] AND void run() Body End
PUSHR REFGENERICDATA; void run() Body Start
PUSHARGSV 0 0.0004
SETR D4 SP2
PUSHR D4
PUSHV 0; UsrFunc[void Init(int)] Params
CALLFUNC 0.0278; UsrFunc[void Init(int)] Call
POP D4
PUSHV 16; InlineFunc[bitmap Game::CreateBitmap(int, int)] Params Start
SETV D1 16; InlineFunc[bitmap Game::CreateBitmap(int, int)] Params End
POP D0; InlineFunc[bitmap Game::CreateBitmap(int, int)] Body Start
SETR D2 CREATEBITMAP; InlineFunc[bitmap Game::CreateBitmap(int, int)] Body End
STORE_OBJECT D2 0.0003
SETV D2 -1; InlineFunc[bitmap Game::LoadBitmapID(int)] Params
LOADBITMAPDATAR D2; InlineFunc[bitmap Game::LoadBitmapID(int)] Body Start
SETR D2 REFBITMAP; InlineFunc[bitmap Game::LoadBitmapID(int)] Body End
STORE_OBJECT D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0001; while() #2 Test
PUSHR D2
ADDV D2 1
STORE D2 0.0001
POP D2
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 130 ==; Test 'while'
LOAD D2 0.0003; InlineFunc[void bitmap::Clear(int)] Params Start AND while() #2 Body Start
PUSHR D2
PUSHV 0; InlineFunc[void bitmap::Clear(int)] Params End
CLEARBITMAP; InlineFunc[void bitmap::Clear(int)] Body Start
POPARGS D5 0.0002; InlineFunc[void bitmap::Clear(int)] Body End
LOAD D2 0.0003; InlineFunc[void bitmap::FastTile(int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHARGSV 0 0.0003
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHV 128; InlineFunc[void bitmap::FastTile(int, int, int, int, int, int)] Params End
BMPFASTTILER; InlineFunc[void bitmap::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0007; InlineFunc[void bitmap::FastTile(int, int, int, int, int, int)] Body End
LOAD D2 0.0003; InlineFunc[void bitmap::ReplaceColors(int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 113
PUSHV 1
PUSHV 255; InlineFunc[void bitmap::ReplaceColors(int, int, int, int)] Params End
BMPREPLCOLOR; InlineFunc[void bitmap::ReplaceColors(int, int, int, int)] Body Start
POPARGS D5 0.0005; InlineFunc[void bitmap::ReplaceColors(int, int, int, int)] Body End
LOAD D2 0.0003; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Params Start
PUSHR D2
PUSHV 6
PUSHV -1
PUSHARGSV 0 0.0002
PUSHARGSV 16 0.0002
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SUBV D2 16
PUSHR D2
PUSHARGSV 16 0.0002
PUSHARGSV 0 0.0005
PUSHV 1; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Params End
BMPBLIT; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Body Start
POPARGS D5 0.0017; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #2 Body End
GOTO 71; while() #2 End
SETV D2 0
STORE D2 0.0001
LOAD D2 0.0001; while() #3 Test
PUSHR D2
ADDV D2 1
STORE D2 0.0001
POP D2
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 192 ==; Test 'while'
LOAD D2 0.0003; InlineFunc[void bitmap::Clear(int)] Params Start AND while() #3 Body Start
PUSHR D2
PUSHV 0; InlineFunc[void bitmap::Clear(int)] Params End
CLEARBITMAP; InlineFunc[void bitmap::Clear(int)] Body Start
POPARGS D5 0.0002; InlineFunc[void bitmap::Clear(int)] Body End
LOAD D2 0.0003; InlineFunc[void bitmap::FastTile(int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHARGSV 0 0.0003
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHV 128; InlineFunc[void bitmap::FastTile(int, int, int, int, int, int)] Params End
BMPFASTTILER; InlineFunc[void bitmap::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0007; InlineFunc[void bitmap::FastTile(int, int, int, int, int, int)] Body End
LOAD D2 0.0003; InlineFunc[void bitmap::ReplaceColors(int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 113
PUSHV 1
PUSHV 255; InlineFunc[void bitmap::ReplaceColors(int, int, int, int)] Params End
BMPREPLCOLOR; InlineFunc[void bitmap::ReplaceColors(int, int, int, int)] Body Start
POPARGS D5 0.0005; InlineFunc[void bitmap::ReplaceColors(int, int, int, int)] Body End
LOAD D2 0.0003; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Params Start
PUSHR D2
PUSHV 6
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 0 0.0002
PUSHARGSV 16 0.0002
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SUBV D2 16
PUSHR D2
PUSHARGSV 16 0.0002
PUSHARGSV 0 0.0005
PUSHV 1; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Params End
BMPBLIT; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Body Start
POPARGS D5 0.0017; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #3 Body End
GOTO 132; while() #3 End
SETV D2 0
STORE D2 0.0001
LOAD D2 0.0001; while() #4 Test
PUSHR D2
ADDV D2 1
STORE D2 0.0001
POP D2
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 211 ==; Test 'while'
LOAD D2 0.0002; InlineFunc[void bitmap::ClearToColor(int, int)] Params Start AND while() #4 Body Start
PUSHR D2
PUSHV 1
PUSHV 5; InlineFunc[void bitmap::ClearToColor(int, int)] Params End
BITMAPCLEARTOCOLOR; InlineFunc[void bitmap::ClearToColor(int, int)] Body Start
POPARGS D5 0.0003; InlineFunc[void bitmap::ClearToColor(int, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #4 Body End
GOTO 194; while() #4 End
SETV D2 0
STORE D2 0.0001
LOAD D2 0.0001; while() #5 Test
PUSHR D2
ADDV D2 1
STORE D2 0.0001
POP D2
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 267 ==; Test 'while'
STOREV 1 0; while() #5 Body Start
LOAD D2 0.0002; InlineFunc[void bitmap::ClearToColor(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 5; InlineFunc[void bitmap::ClearToColor(int, int)] Params End
BITMAPCLEARTOCOLOR; InlineFunc[void bitmap::ClearToColor(int, int)] Body Start
POPARGS D5 0.0003; InlineFunc[void bitmap::ClearToColor(int, int)] Body End
LOAD D2 0.0002; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHARGSV 0 0.0002
PUSHARGSV 16 0.0002
PUSHARGSV 0 0.0002
PUSHARGSV 16 0.0002
PUSHARGSV 0 0.0005
PUSHV 1; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Params End
BMPBLIT; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Body Start
POPARGS D5 0.0017; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Body End
LOAD D2 0.0002; InlineFunc[void bitmap::ClearToColor(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1; InlineFunc[void bitmap::ClearToColor(int, int)] Params End
BITMAPCLEARTOCOLOR; InlineFunc[void bitmap::ClearToColor(int, int)] Body Start
POPARGS D5 0.0003; InlineFunc[void bitmap::ClearToColor(int, int)] Body End
LOAD D2 0.0003; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 0 0.0002
PUSHARGSV 16 0.0002
PUSHARGSV 0 0.0002
PUSHARGSV 16 0.0002
PUSHARGSV 0 0.0005
PUSHV 1; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Params End
BMPBLIT; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Body Start
POPARGS D5 0.0017; InlineFunc[void bitmap::Blit(int, untyped, int, int, int, int, int, int, int, int, int, int, int, int, int, bool)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #5 Body End
GOTO 213; while() #5 End
REF_REMOVE 0.0003
REF_REMOVE 0.0002
POPARGS D5 0.0005
QUIT; void run() Body End
SETR D4 SP2; Func[void End()] Body Start
ALLOCATEMEMV D2 13 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "[Test] done\n"
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
GAMEEXIT; InlineFunc[void Game::Exit()] Body AND [Opt:NeverRet] AND Func[void End()] Body End
SETR D4 SP2; Func[void Init(int)] Body Start
ALLOCATEMEMV D2 35 0; InlineFunc[void printf(char32[])] Params Start
WRITEPODSTRING D2 "[Test] started: dmap %d screen %d\n"
PUSHR D2
PUSHVARGV 5
LOAD D2 0
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; if() #8 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 297 ==; Test 'if'
PUSHV 5; InlineFunc[void hero::Warp(int, int)] Params Start AND if() #8 Body Start
LOAD D2 0; InlineFunc[void hero::Warp(int, int)] Params End
POP D3; InlineFunc[void hero::Warp(int, int)] Body Start
WARPR D3 D2; InlineFunc[void hero::Warp(int, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND if() #8 Body End
POP D5
RETURNFUNC; Func[void Init(int)] Body End
