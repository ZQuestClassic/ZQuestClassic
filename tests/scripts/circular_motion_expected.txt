Compiling 'circular_motion.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR d0; void run(int, int, int, int, int) Params
PUSHR d1
PUSHR d2
PUSHR d3
PUSHR d4
PUSHR REFFFC; void run(int, int, int, int, int) Body Start
PUSHARGSV 0,0.0002
SETR d4,SP
LOADD d2,4; if() #3457 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 16; Test 'if'
LOADD d2,7; if() #3457 Body Start
STORED d2,4; if() #3457 Body End
LOADD d2,5; if() #3458 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 26; Test 'if'
SETV d3,360; InlineFunc[int Rand(int)] Params AND if() #3458 Body Start
RNDR d2,d3; InlineFunc[int Rand(int)] Body
STORED d2,5; if() #3458 Body End
LOADD d2,2
PUSHR d2
POP REFFFC
SETR d2,X
STORED d2,1
LOADD d2,2
PUSHR d2
POP REFFFC
SETR d2,Y
STORED d2,0
LOADD d2,5; while(true) #3459 Body [Opt:AlwaysOn] Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,5
LOADD d2,5; if() #3461 Test
COMPAREV d2,-360
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 53; Test 'if'
LOADD d2,5; if() #3461 Body Start
ADDV d2,360
STORED d2,5
GOTO 63; if() #3461 Body End
LOADD d2,5; if() #3463 Test AND if() #3461 Else Start
COMPAREV d2,360
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 63; Test 'if'
LOADD d2,5; if() #3463 Body Start
SUBV d2,360
STORED d2,5; if() #3463 Body End
LOADD d2,3; if() #3461 Else End AND if() #3464 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 107; Test 'if'
LOADD d2,1; if() #3464 Body Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,5; InlineFunc[int Cos(int)] Params Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
LOADD d2,0
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,5; InlineFunc[int Sin(int)] Params Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
GOTO 190; if() #3464 Body End
LOADD d2,1; if() #3464 Else Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,5; InlineFunc[int Cos(int)] Params Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3; InlineFunc[int Cos(int)] Params Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,5; InlineFunc[int Sin(int)] Params Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3; InlineFunc[int Sin(int)] Params Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
LOADD d2,0
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,5; InlineFunc[int Sin(int)] Params Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3; InlineFunc[int Cos(int)] Params Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,5; InlineFunc[int Cos(int)] Params Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3; InlineFunc[int Sin(int)] Params Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2; if() #3464 Else End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #3459 Body [Opt:AlwaysOn] End
GOTO 36; while() #3459 End
NOP; [Opt:NeverRet] AND void run(int, int, int, int, int) Body End


QUIT; void run() Body