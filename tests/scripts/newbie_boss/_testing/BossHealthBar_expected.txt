stderr:

Compiling 'BossHealthBar.z'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
BossHealthBar.z Line 233 @ Columns 7-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

231    void HealthBar_CapString(int str){
232        for(int i=SizeOfArray(str)-1; i>=0; i--){
233            if(str[i]>32){
                  ^~~~~~


BossHealthBar.z Line 234 @ Columns 5-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

232    for(int i=SizeOfArray(str)-1; i>=0; i--){
233        if(str[i]>32){
234            str[i+1] = 0;
               ^~~~~~~~


BossHealthBar.z Line 156 @ Columns 13-28 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

154    //Returns the nth enemy with a certain ID on the screen
155    npc HealthBar_GetNPC(int id, int extra){
156        for(int i=Screen->NumNPCs(); i>=1; i--){
                     ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
BossHealthBar.z Line 405 @ Columns 7-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

403    void HealthBar_CapString(int str){
404        for(int i=SizeOfArray(str)-1; i>=0; i--){
405            if(str[i]>32){
                  ^~~~~~


BossHealthBar.z Line 406 @ Columns 5-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

404    for(int i=SizeOfArray(str)-1; i>=0; i--){
405        if(str[i]>32){
406            str[i+1] = 0;
               ^~~~~~~~


BossHealthBar.z Line 321 @ Columns 13-28 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

319    int HealthBar_GetHPTotal(int npcid1, int npcid2, int npcid3, int npcid4, int npcid5, int npcid6){
320        int total;
321        for(int i=Screen->NumNPCs(); i>=1; i--){
                     ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
BossHealthBar.z Line 699 @ Columns 7-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

697    void HealthBar_CapString(int str){
698        for(int i=SizeOfArray(str)-1; i>=0; i--){
699            if(str[i]>32){
                  ^~~~~~


BossHealthBar.z Line 700 @ Columns 5-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

698    for(int i=SizeOfArray(str)-1; i>=0; i--){
699        if(str[i]>32){
700            str[i+1] = 0;
               ^~~~~~~~


BossHealthBar.z Line 566 @ Columns 13-28 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

564    //Returns the nth enemy with a certain ID on the screen
565    npc HealthBar_GetNPC(int id, int extra){
566        for(int i=Screen->NumNPCs(); i>=1; i--){
                     ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
BossHealthBar.z Line 928 @ Columns 7-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

926    void HealthBar_CapString(int str){
927        for(int i=SizeOfArray(str)-1; i>=0; i--){
928            if(str[i]>32){
                  ^~~~~~


BossHealthBar.z Line 929 @ Columns 5-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

927    for(int i=SizeOfArray(str)-1; i>=0; i--){
928        if(str[i]>32){
929            str[i+1] = 0;
               ^~~~~~~~


BossHealthBar.z Line 788 @ Columns 13-28 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

786    int HealthBar_GetHPTotal(int npcid1, int npcid2, int npcid3, int npcid4, int npcid5, int npcid6){
787        int total;
788        for(int i=Screen->NumNPCs(); i>=1; i--){
                     ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
Pass 5: Checking code paths
BossHealthBar.z Line 155 @ Columns 6-22 - Warning S101: Function 'HealthBar_GetNPC' is not void, and should return a value!

153    }
154    //Returns the nth enemy with a certain ID on the screen
155    npc HealthBar_GetNPC(int id, int extra){
           ^~~~~~~~~~~~~~~~


BossHealthBar.z Line 565 @ Columns 6-22 - Warning S101: Function 'HealthBar_GetNPC' is not void, and should return a value!

563    }
564    //Returns the nth enemy with a certain ID on the screen
565    npc HealthBar_GetNPC(int id, int extra){
           ^~~~~~~~~~~~~~~~


BossHealthBar.z Line 155 @ Columns 6-22 - Warning S101: Function 'HealthBar_GetNPC' is not void, and should return a value!

153    }
154    //Returns the nth enemy with a certain ID on the screen
155    npc HealthBar_GetNPC(int id, int extra){
           ^~~~~~~~~~~~~~~~


BossHealthBar.z Line 565 @ Columns 6-22 - Warning S101: Function 'HealthBar_GetNPC' is not void, and should return a value!

563    }
564    //Returns the nth enemy with a certain ID on the screen
565    npc HealthBar_GetNPC(int id, int extra){
           ^~~~~~~~~~~~~~~~


Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [
    {
      "range": {
        "start": {
          "line": 232,
          "character": 6
        },
        "end": {
          "line": 232,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 233,
          "character": 4
        },
        "end": {
          "line": 233,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 155,
          "character": 12
        },
        "end": {
          "line": 155,
          "character": 27
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 404,
          "character": 6
        },
        "end": {
          "line": 404,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 405,
          "character": 4
        },
        "end": {
          "line": 405,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 320,
          "character": 12
        },
        "end": {
          "line": 320,
          "character": 27
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 698,
          "character": 6
        },
        "end": {
          "line": 698,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 699,
          "character": 4
        },
        "end": {
          "line": 699,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 565,
          "character": 12
        },
        "end": {
          "line": 565,
          "character": 27
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 927,
          "character": 6
        },
        "end": {
          "line": 927,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 928,
          "character": 4
        },
        "end": {
          "line": 928,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 787,
          "character": 12
        },
        "end": {
          "line": 787,
          "character": 27
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 154,
          "character": 5
        },
        "end": {
          "line": 154,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S101: Function 'HealthBar_GetNPC' is not void, and should return a value!"
    },
    {
      "range": {
        "start": {
          "line": 564,
          "character": 5
        },
        "end": {
          "line": 564,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S101: Function 'HealthBar_GetNPC' is not void, and should return a value!"
    },
    {
      "range": {
        "start": {
          "line": 154,
          "character": 5
        },
        "end": {
          "line": 154,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S101: Function 'HealthBar_GetNPC' is not void, and should return a value!"
    },
    {
      "range": {
        "start": {
          "line": 564,
          "character": 5
        },
        "end": {
          "line": 564,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S101: Function 'HealthBar_GetNPC' is not void, and should return a value!"
    }
  ],
  "metadata": {
    "currentFileSymbols": 181,
    "symbols": 170,
    "identifiers": 1730,
    "elided": true
  }
}

zasm:

SETV GD8 0; void run() Body Start
SETV GD9 0
SETV GD11 0
SETV GD10 0
SETV GD4 0
SETV GD14 0
SETV GD5 0
SETV GD13 0
SETV GD12 0
SETV GD6 0
SETV GD7 0
SETV GD1 0
SETV GD2 0
SETV GD3 0
ALLOCATEGMEMV D2 25 0
SETR GD25 D2
SETV GD15 0
SETV GD16 0
SETV GD20 0
SETV GD17 0
SETV GD21 0
SETV GD18 0
SETV GD19 0
ALLOCATEGMEMV D2 32 0
SETR GD24 D2
SETV GD22 0
SETV GD23 0
ALLOCATEGMEMV D2 8 0
SETR GD26 D2
ALLOCATEGMEMV D2 1000 0
SETR GD27 D2
QUIT; void run() Body End
PUSHV 0; void run() Body Start
SETR D4 SP2
PUSHR D4
CALLFUNC 0.3883; UsrFunc[void StartGhostZH()] Call
POP D4
PUSHR D4; while(true) #8 Body [Opt:AlwaysOn] Start
CALLFUNC 1.0298; UsrFunc[void UpdateGhostZH1()] Call
POP D4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR D4
CALLFUNC 1.0360; UsrFunc[void UpdateGhostZH2()] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 38; while() #8 End AND [Opt:NeverRet] AND void run() Body End
PUSHR D0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #434 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 62 ==; Test 'if'
SETV D2 -1; if() #434 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
GOTO 68; if() #434 Body End
LOAD D2 0.0001; if() #434 Else Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #434 Else End
POPARGS D5 0.0002
QUIT; void run(int) Body End
PUSHR D0; void run(int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR REFFFC; void run(int, int, int, int) Body Start
PUSHARGSV 0 0.0011
SETR D4 SP2
SETV D2 4; InlineFunc[void Waitframes(int)] Params
WAITFRAMESR D2; InlineFunc[void Waitframes(int)] Body
PUSHR D4
LOAD D2 0.0015; UsrFunc[npc HealthBar_GetNPC(int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2; UsrFunc[npc HealthBar_GetNPC(int, int)] Params End
CALLFUNC 1.2231; UsrFunc[npc HealthBar_GetNPC(int, int)] Call
POP D4
STORE D2 0.0010
LOAD D2 0.0010; InlineFunc[bool npc::isValid()] Params AND unless() #854 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 92 !=; Test 'unless'
QUIT; InlineFunc[void Quit()] Body AND unless() #854 Body
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0009
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0008
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0007
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 1 0.0001; for() #226 setup
LOAD D2 0.0001; for() #226 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 165 ==; for() #226 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #226 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #855 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 161 ==; Test 'if'
LOAD D2 0; if() #438 Test AND if() #855 Body Start
PUSHR D2
LOAD D2 0.0011
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 158 ==; Test 'if'
GOTO 165; break 1; AND if() #438 Body Start
GOTO 161; if() #438 Body End
LOAD D2 0.0002; if() #438 Else Start
ADDV D2 1
STORE D2 0.0002; if() #438 Else End
LOAD D2 0.0001; if() #855 Body End AND for() #226 Body End AND for() #226 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 126; for() #226 End
ALLOCATEMEMV D2 256 0
STORE D2 0.0001
LOAD D2 0.0014; if() #439 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 178 ==; Test 'if'
LOAD D2 0.0014; InlineFunc[void Game::GetMessage(int, char32[])] Params Start AND if() #439 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void Game::GetMessage(int, char32[])] Params End
POP D3; InlineFunc[void Game::GetMessage(int, char32[])] Body Start
GETMESSAGE D3 D2; InlineFunc[void Game::GetMessage(int, char32[])] Body End
GOTO 183; if() #439 Body End
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start AND if() #439 Else Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End AND if() #439 Else End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_CapString(int)] Params Start
PUSHR D2; UsrFunc[void HealthBar_CapString(int)] Params End
CALLFUNC 1.1715; UsrFunc[void HealthBar_CapString(int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
LOAD D2 0.0006; while() #11 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 336 ==; Test 'while'
LOAD D2 0.0010; InlineFunc[bool npc::isValid()] Params AND if() #440 Test AND while() #11 Body Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 219 ==; Test 'if'
PUSHR D4; InlineFunc[int Max(int, int)] Params Start AND if() #440 Body Start
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0009
GOTO 221; if() #440 Body End
SETV D2 0; if() #440 Else Start
STORE D2 0.0009; if() #440 Else End
LOAD D2 0.0003; if() #856 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 229 ==; Test 'if'
LOAD D2 0.0003; if() #856 Body Start
SUBV D2 1
STORE D2 0.0003; if() #856 Body End
LOAD D2 0.0009; if() #857 Test
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 275 ==; Test 'if'
LOAD D2 0.0009; if() #858 Test AND if() #857 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 271 ==; Test 'if'
LOAD D2 0.0003; if() #441 Test AND if() #858 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 262 ==; Test 'if'
LOAD D2 0.0004; if() #441 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0004
GOTO 269; if() #441 Body End
LOAD D2 0.0007; if() #441 Else Start
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004; if() #441 Else End
SETV D2 96
STORE D2 0.0003; if() #858 Body End
LOAD D2 0.0007
STORE D2 0.0005
LOAD D2 0.0009
STORE D2 0.0007; if() #857 Body End
LOAD D2 0.0006; if() #859 Test
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 311 ==; Test 'if'
LOAD D2 0.0006; if() #442 Test AND if() #859 Body Start
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 309 ==; Test 'if'
LOAD D2 0.0006; InlineFunc[int Max(int, int)] Params Start AND if() #442 Body Start
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
DIVV D2 16
POP D3
SUBR D3 D2
PUSHVARGR D3
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0006
GOTO 311; if() #442 Body End
LOAD D2 0.0009; if() #442 Else Start
STORE D2 0.0006; if() #442 Else End
PUSHR D4; if() #859 Body End
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 12
SETV D2 12
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.1797; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #11 Body End
GOTO 200; while() #11 End
SETV D2 1
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
LOAD D2 0.0003; if() #860 Test AND while(true) #12 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 356 ==; Test 'if'
LOAD D2 0.0003; if() #860 Body Start
SUBV D2 1
STORE D2 0.0003; if() #860 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 12
SETV D2 12
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.1797; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0012; if() #861 Test
COMPAREV D2 0
GOTOCMP 387 ==; Test 'if'
PUSHR D4; if() #862 Test AND if() #861 Body Start
LOAD D2 0.0011; UsrFunc[bool HealthBar_CheckDone(ffc)] Params Start
PUSHR D2; UsrFunc[bool HealthBar_CheckDone(ffc)] Params End
CALLFUNC 1.1752; UsrFunc[bool HealthBar_CheckDone(ffc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 389 !=; Test 'if' AND break 1; AND if() #862 Body
WAITFRAME; if() #861 Body End AND InlineFunc[void Waitframe()] Body AND while(true) #12 Body [Opt:AlwaysOn] End
GOTO 348; while() #12 End
STOREV 0 0; for() #227 setup
LOAD D2 0; for() #227 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 429 ==; for() #227 TestFail?
LOAD D2 0.0003; if() #863 Test AND for() #227 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 403 ==; Test 'if'
LOAD D2 0.0003; if() #863 Body Start
SUBV D2 1
STORE D2 0.0003; if() #863 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 12
SETV D2 12
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.1797; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #227 Body End
LOAD D2 0; for() #227 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 390; for() #227 End
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0016
QUIT; void run(int, int, int, int) Body End
PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
PUSHARGSV 0 0.0009
SETR D4 SP2
SETV D2 4; InlineFunc[void Waitframes(int)] Params
WAITFRAMESR D2; InlineFunc[void Waitframes(int)] Body
PUSHR D4; if() #831 Test
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 1.1549; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 466 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #831 Body
PUSHR D4
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 1.1549; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008
STORE D2 0.0007
LOAD D2 0.0008
STORE D2 0.0006
LOAD D2 0.0008
STORE D2 0.0005
LOAD D2 0.0008
STORE D2 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
ALLOCATEMEMV D2 256 0
STORE D2 0.0001
LOAD D2 0.0011; if() #832 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 504 ==; Test 'if'
LOAD D2 0.0011; InlineFunc[void Game::GetMessage(int, char32[])] Params Start AND if() #832 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void Game::GetMessage(int, char32[])] Params End
POP D3; InlineFunc[void Game::GetMessage(int, char32[])] Body Start
GETMESSAGE D3 D2; InlineFunc[void Game::GetMessage(int, char32[])] Body End AND if() #832 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_CapString(int)] Params Start
PUSHR D2; UsrFunc[void HealthBar_CapString(int)] Params End
CALLFUNC 1.1078; UsrFunc[void HealthBar_CapString(int)] Call
POP D4
LOAD D2 0.0005; while() #9 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 648 ==; Test 'while'
PUSHR D4; while() #9 Body Start
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 1.1549; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0007; if() #833 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 540 ==; Test 'if'
LOAD D2 0.0008; if() #833 Body Start
STORE D2 0.0007; if() #833 Body End
LOAD D2 0.0002; if() #834 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 548 ==; Test 'if'
LOAD D2 0.0002; if() #834 Body Start
SUBV D2 1
STORE D2 0.0002; if() #834 Body End
LOAD D2 0.0008; if() #835 Test
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 594 ==; Test 'if'
LOAD D2 0.0008; if() #836 Test AND if() #835 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 590 ==; Test 'if'
LOAD D2 0.0002; if() #435 Test AND if() #836 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 581 ==; Test 'if'
LOAD D2 0.0003; if() #435 Body Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 588; if() #435 Body End
LOAD D2 0.0006; if() #435 Else Start
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003; if() #435 Else End
SETV D2 96
STORE D2 0.0002; if() #836 Body End
LOAD D2 0.0006
STORE D2 0.0004
LOAD D2 0.0008
STORE D2 0.0006; if() #835 Body End
LOAD D2 0.0005; if() #837 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 630 ==; Test 'if'
LOAD D2 0.0005; if() #436 Test AND if() #837 Body Start
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 628 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Max(int, int)] Params Start AND if() #436 Body Start
PUSHR D2
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
DIVV D2 16
POP D3
SUBR D3 D2
PUSHVARGR D3
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0005
GOTO 630; if() #436 Body End
LOAD D2 0.0008; if() #436 Else Start
STORE D2 0.0005; if() #436 Else End
PUSHR D4; if() #837 Body End
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.1115; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #9 Body End
GOTO 509; while() #9 End
LOAD D2 0.0010; unless() #838 Test
COMPAREV D2 0
GOTOCMP 675 !=; Test 'unless'
LOAD D2 0.0002; unless() #838 Body Start AND if() #839 Test AND while(true) #10 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 659 ==; Test 'if'
LOAD D2 0.0002; if() #839 Body Start
SUBV D2 1
STORE D2 0.0002; if() #839 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.1115; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #10 Body [Opt:AlwaysOn] End
GOTO 651; while() #10 End AND unless() #838 Body End
STOREV 0 0; for() #222 setup
LOAD D2 0; for() #222 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 708 ==; for() #222 TestFail?
LOAD D2 0.0002; if() #840 Test AND for() #222 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 689 ==; Test 'if'
LOAD D2 0.0002; if() #840 Body Start
SUBV D2 1
STORE D2 0.0002; if() #840 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.1115; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #222 Body End
LOAD D2 0; for() #222 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 676; for() #222 End
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0018
QUIT; void run(int, int, int, int, int, int, int, int) Body End
PUSHR D0; void run(int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR REFFFC; void run(int, int, int, int) Body Start
PUSHARGSV 0 0.0011
SETR D4 SP2
SETV D2 4; InlineFunc[void Waitframes(int)] Params
WAITFRAMESR D2; InlineFunc[void Waitframes(int)] Body
PUSHR D4
LOAD D2 0.0015; UsrFunc[npc HealthBar_GetNPC(int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2; UsrFunc[npc HealthBar_GetNPC(int, int)] Params End
CALLFUNC 1.3680; UsrFunc[npc HealthBar_GetNPC(int, int)] Call
POP D4
STORE D2 0.0010
LOAD D2 0.0010; InlineFunc[bool npc::isValid()] Params AND unless() #909 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 734 !=; Test 'unless'
QUIT; InlineFunc[void Quit()] Body AND unless() #909 Body
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0009
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0008
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0007
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 1 0.0001; for() #236 setup
LOAD D2 0.0001; for() #236 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 807 ==; for() #236 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #236 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #910 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 803 ==; Test 'if'
LOAD D2 0; if() #458 Test AND if() #910 Body Start
PUSHR D2
LOAD D2 0.0011
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 800 ==; Test 'if'
GOTO 807; break 1; AND if() #458 Body Start
GOTO 803; if() #458 Body End
LOAD D2 0.0002; if() #458 Else Start
ADDV D2 1
STORE D2 0.0002; if() #458 Else End
LOAD D2 0.0001; if() #910 Body End AND for() #236 Body End AND for() #236 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 768; for() #236 End
ALLOCATEMEMV D2 256 0
STORE D2 0.0001
LOAD D2 0.0014; if() #459 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 820 ==; Test 'if'
LOAD D2 0.0014; InlineFunc[void Game::GetMessage(int, char32[])] Params Start AND if() #459 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void Game::GetMessage(int, char32[])] Params End
POP D3; InlineFunc[void Game::GetMessage(int, char32[])] Body Start
GETMESSAGE D3 D2; InlineFunc[void Game::GetMessage(int, char32[])] Body End
GOTO 825; if() #459 Body End
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start AND if() #459 Else Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End AND if() #459 Else End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_CapString(int)] Params Start
PUSHR D2; UsrFunc[void HealthBar_CapString(int)] Params End
CALLFUNC 1.3037; UsrFunc[void HealthBar_CapString(int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
LOAD D2 0.0006; while() #15 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 978 ==; Test 'while'
LOAD D2 0.0010; InlineFunc[bool npc::isValid()] Params AND if() #460 Test AND while() #15 Body Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 861 ==; Test 'if'
PUSHR D4; InlineFunc[int Max(int, int)] Params Start AND if() #460 Body Start
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0009
GOTO 863; if() #460 Body End
SETV D2 0; if() #460 Else Start
STORE D2 0.0009; if() #460 Else End
LOAD D2 0.0003; if() #911 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 871 ==; Test 'if'
LOAD D2 0.0003; if() #911 Body Start
SUBV D2 1
STORE D2 0.0003; if() #911 Body End
LOAD D2 0.0009; if() #912 Test
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 917 ==; Test 'if'
LOAD D2 0.0009; if() #913 Test AND if() #912 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 913 ==; Test 'if'
LOAD D2 0.0003; if() #461 Test AND if() #913 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 904 ==; Test 'if'
LOAD D2 0.0004; if() #461 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0004
GOTO 911; if() #461 Body End
LOAD D2 0.0007; if() #461 Else Start
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004; if() #461 Else End
SETV D2 96
STORE D2 0.0003; if() #913 Body End
LOAD D2 0.0007
STORE D2 0.0005
LOAD D2 0.0009
STORE D2 0.0007; if() #912 Body End
LOAD D2 0.0006; if() #914 Test
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 953 ==; Test 'if'
LOAD D2 0.0006; if() #462 Test AND if() #914 Body Start
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 951 ==; Test 'if'
LOAD D2 0.0006; InlineFunc[int Max(int, int)] Params Start AND if() #462 Body Start
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
DIVV D2 16
POP D3
SUBR D3 D2
PUSHVARGR D3
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0006
GOTO 953; if() #462 Body End
LOAD D2 0.0009; if() #462 Else Start
STORE D2 0.0006; if() #462 Else End
PUSHR D4; if() #914 Body End
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.3119; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #15 Body End
GOTO 842; while() #15 End
SETV D2 1
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
LOAD D2 0.0003; if() #915 Test AND while(true) #16 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 998 ==; Test 'if'
LOAD D2 0.0003; if() #915 Body Start
SUBV D2 1
STORE D2 0.0003; if() #915 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.3119; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0012; if() #916 Test
COMPAREV D2 0
GOTOCMP 1029 ==; Test 'if'
PUSHR D4; if() #917 Test AND if() #916 Body Start
LOAD D2 0.0011; UsrFunc[bool HealthBar_CheckDone(ffc)] Params Start
PUSHR D2; UsrFunc[bool HealthBar_CheckDone(ffc)] Params End
CALLFUNC 1.3074; UsrFunc[bool HealthBar_CheckDone(ffc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1031 !=; Test 'if' AND break 1; AND if() #917 Body
WAITFRAME; if() #916 Body End AND InlineFunc[void Waitframe()] Body AND while(true) #16 Body [Opt:AlwaysOn] End
GOTO 990; while() #16 End
STOREV 0 0; for() #237 setup
LOAD D2 0; for() #237 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1071 ==; for() #237 TestFail?
LOAD D2 0.0003; if() #918 Test AND for() #237 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1045 ==; Test 'if'
LOAD D2 0.0003; if() #918 Body Start
SUBV D2 1
STORE D2 0.0003; if() #918 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.3119; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #237 Body End
LOAD D2 0; for() #237 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1032; for() #237 End
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0016
QUIT; void run(int, int, int, int) Body End
PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
PUSHARGSV 0 0.0009
SETR D4 SP2
SETV D2 4; InlineFunc[void Waitframes(int)] Params
WAITFRAMESR D2; InlineFunc[void Waitframes(int)] Body
PUSHR D4; if() #883 Test
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 1.2871; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1108 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #883 Body
PUSHR D4
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 1.2871; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008
STORE D2 0.0007
LOAD D2 0.0008
STORE D2 0.0006
LOAD D2 0.0008
STORE D2 0.0005
LOAD D2 0.0008
STORE D2 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
ALLOCATEMEMV D2 256 0
STORE D2 0.0001
LOAD D2 0.0011; if() #884 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1146 ==; Test 'if'
LOAD D2 0.0011; InlineFunc[void Game::GetMessage(int, char32[])] Params Start AND if() #884 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void Game::GetMessage(int, char32[])] Params End
POP D3; InlineFunc[void Game::GetMessage(int, char32[])] Body Start
GETMESSAGE D3 D2; InlineFunc[void Game::GetMessage(int, char32[])] Body End AND if() #884 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_CapString(int)] Params Start
PUSHR D2; UsrFunc[void HealthBar_CapString(int)] Params End
CALLFUNC 1.2273; UsrFunc[void HealthBar_CapString(int)] Call
POP D4
LOAD D2 0.0005; while() #13 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1290 ==; Test 'while'
PUSHR D4; while() #13 Body Start
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 1.2871; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0007; if() #885 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1182 ==; Test 'if'
LOAD D2 0.0008; if() #885 Body Start
STORE D2 0.0007; if() #885 Body End
LOAD D2 0.0002; if() #886 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1190 ==; Test 'if'
LOAD D2 0.0002; if() #886 Body Start
SUBV D2 1
STORE D2 0.0002; if() #886 Body End
LOAD D2 0.0008; if() #887 Test
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1236 ==; Test 'if'
LOAD D2 0.0008; if() #888 Test AND if() #887 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1232 ==; Test 'if'
LOAD D2 0.0002; if() #449 Test AND if() #888 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1223 ==; Test 'if'
LOAD D2 0.0003; if() #449 Body Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 1230; if() #449 Body End
LOAD D2 0.0006; if() #449 Else Start
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003; if() #449 Else End
SETV D2 96
STORE D2 0.0002; if() #888 Body End
LOAD D2 0.0006
STORE D2 0.0004
LOAD D2 0.0008
STORE D2 0.0006; if() #887 Body End
LOAD D2 0.0005; if() #889 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1272 ==; Test 'if'
LOAD D2 0.0005; if() #450 Test AND if() #889 Body Start
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1270 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Max(int, int)] Params Start AND if() #450 Body Start
PUSHR D2
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
DIVV D2 16
POP D3
SUBR D3 D2
PUSHVARGR D3
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0005
GOTO 1272; if() #450 Body End
LOAD D2 0.0008; if() #450 Else Start
STORE D2 0.0005; if() #450 Else End
PUSHR D4; if() #889 Body End
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.2310; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #13 Body End
GOTO 1151; while() #13 End
LOAD D2 0.0010; unless() #890 Test
COMPAREV D2 0
GOTOCMP 1317 !=; Test 'unless'
LOAD D2 0.0002; unless() #890 Body Start AND if() #891 Test AND while(true) #14 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1301 ==; Test 'if'
LOAD D2 0.0002; if() #891 Body Start
SUBV D2 1
STORE D2 0.0002; if() #891 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.2310; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #14 Body [Opt:AlwaysOn] End
GOTO 1293; while() #14 End AND unless() #890 Body End
STOREV 0 0; for() #231 setup
LOAD D2 0; for() #231 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1350 ==; for() #231 TestFail?
LOAD D2 0.0002; if() #892 Test AND for() #231 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1331 ==; Test 'if'
LOAD D2 0.0002; if() #892 Body Start
SUBV D2 1
STORE D2 0.0002; if() #892 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.2310; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #231 Body End
LOAD D2 0; for() #231 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1318; for() #231 End
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0018
QUIT; void run(int, int, int, int, int, int, int, int) Body End
SETR D4 SP2; Func[int RadianAngle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR D4 SP2; Func[int Randf(int)] Body Start
SETV D2 0; InlineFunc[long randgen::LRand(long)] Params Start AND return Start
PUSHR D2
LOAD D2 0; InlineFunc[long randgen::LRand(long)] Params End
POP REFRNG; InlineFunc[long randgen::LRand(long)] Body Start
RNGLRAND2 D2; InlineFunc[long randgen::LRand(long)] Body End
POP D5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void AutoGhost()] Body Start
SETR D4 SP2
SETR D2 GD26; if() #11 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
GOTOCMP 1774 !=; Test 'if' AND return (Void) AND if() #11 Body
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
SETR D2 NPCCOUNT; for() #2 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #2 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1774 ==; for() #2 TestFail?
LOAD D2 0.0003; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #2 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
LOAD D2 0.0006; if() #12 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1770 !=; Test 'if' AND continue 1; AND if() #12 Body
LOAD D2 0.0006; if() #13 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1770 !=; Test 'if' AND continue 1; AND if() #13 Body
LOAD D2 0.0006; if() #14 Test AND if(false) #13 [Opt:AlwaysOff]
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 1770 !=; Test 'if' AND continue 1; AND if() #14 Body
LOAD D2 0.0006; unless() #15 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 1770 ==; Test 'unless' AND continue 1; AND unless() #15 Body
LOAD D2 0.0006; unless() #16 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 1770 ==; Test 'unless' AND continue 1; AND unless() #16 Body
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0006; if(false) #14 [Opt:AlwaysOff]
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0002
LOAD D2 0.0002; if() #17 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1505 ==; Test 'if'
ALLOCATEMEMV D2 2 0; if() #17 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0006; UsrFunc[int __AutoGhostParseName(npc, int[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int __AutoGhostParseName(npc, int[])] Params End
CALLFUNC 0.1776; UsrFunc[int __AutoGhostParseName(npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0002
LOAD D3 0
DEALLOCATEMEMR D3; if() #17 Body End
LOAD D2 0.0002; if() #18 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1524 ==; Test 'if'
ALLOCATEMEMV D2 47 0; if() #18 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, script <= 0\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.2076; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 1770; continue 1; AND if() #18 Body End
LOAD D2 0.0002; if() #19 Test
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1543 ==; Test 'if'
ALLOCATEMEMV D2 48 0; if() #19 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, script > 511\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.2076; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 1770; continue 1; AND if() #19 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR D2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.2127; UsrFunc[int FindUnusedFFC(int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0005; unless() #20 Test
COMPAREV D2 0
GOTOCMP 1566 !=; Test 'unless'
ALLOCATEMEMV D2 52 0; unless() #20 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, no ffc available\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.2076; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 1770; continue 1; AND unless() #20 Body End
LOAD D2 0.0005; InlineFunc[ffc screendata::LoadFFC(int)] Params
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0004
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
SETV D2 1; if(true) #21 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0001; if() #22 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1740 ==; Test 'if'
LOAD D2 0.0001; if() #23 Test AND if() #22 Body Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1740 ==; Test 'if'
SETV D2 3; if() #23 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
SETV D2 1024
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #23 Body End
LOAD D2 0.0001; if() #22 Body End AND if() #15 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1758 ==; Test 'if'
SETV D2 1; if() #15 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 1770; if() #15 Body End
LOAD D2 0.0001; if() #15 Else Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #15 Else End
LOAD D2 0.0003; for() #2 Body End AND for() #2 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 1412; for() #2 End
POPARGS D5 0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0 0.0009; Func[int __AutoGhostParseName(npc, int[])] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 64 0
STORE D2 0.0008
ALLOCATEMEMV D2 64 0
STORE D2 0.0007
SETV D2 1
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End
STOREV 0 0.0006; for() #145 setup
LOAD D2 0.0006; for() #145 LoopTest
COMPAREV D2 63
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2014 ==; for() #145 TestFail?
LOAD D2 0.0008; if() #550 Test AND for() #145 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 64
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2010 ==; Test 'if'
LOAD D2 0.0008; if() #550 Body Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0005
PUSHR D4; if() #285 Test
LOAD D2 0.0005; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 1.0482; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1917 ==; Test 'if'
STOREV 0 0.0004; if() #285 Body Start
LOAD D2 0.0006; for() #146 setup
ADDV D2 1
STORE D2 0.0006
PUSHR D4; for() #146 LoopTest
LOAD D2 0.0008; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 1.0482; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1859 ==; for() #146 TestFail?
LOAD D2 0.0008; for() #146 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #146 Body End
LOAD D2 0.0006; for() #146 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 1827; for() #146 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006
LOAD D2 0.0009; if() #551 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2010 ==; Test 'if'
ALLOCATEMEMV D2 59 0; if() #551 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script does not exist.\n"
STORE D2 0.0002
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Script name: %s\n"
STORE D2 0
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 2074; return End
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3; if() #551 Body End
GOTO 2010; if() #285 Body End
LOAD D2 0.0005; if() #552 Test AND if() #285 Else Start
COMPAREV D2 48
GOTOCMP 1923 <
LOAD D2 0.0005
COMPAREV D2 57
GOTOCMP 1928 <=
LOAD D2 0.0005
COMPAREV D2 45
GOTOCMP 1928 ==
SETV D2 0
GOTO 1929
SETV D2 1
COMPAREV D2 0
GOTOCMP 2010 ==; Test 'if'
STOREV 0 0.0004; if() #552 Body Start
LOAD D2 0.0005; if() #553 Test
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1948 ==; Test 'if'
SETV D2 45; if() #553 Body Start
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 1
STORE D2 0.0004
LOAD D2 0.0006
ADDV D2 1
STORE D2 0.0006; if() #553 Body End
LOAD D2 0.0006; for() #147 setup
ADDV D2 1
STORE D2 0.0006
LOAD D2 0.0008; for() #147 LoopTest
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 48
GOTOCMP 1967 <
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 57
GOTOCMP 1967 >
SETV D2 1
GOTO 1968
SETV D2 0
COMPAREV D2 0
GOTOCMP 1990 ==; for() #147 TestFail?
LOAD D2 0.0008; for() #147 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #147 Body End
LOAD D2 0.0006; for() #147 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 1951; for() #147 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int atoi(char32[])] Params Start
SETR D3 D2; InlineFunc[int atoi(char32[])] Params End
ATOI D2 D3; InlineFunc[int atoi(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006; if() #552 Body End
LOAD D2 0.0006; if() #285 Else End AND if() #550 Body End AND for() #145 Body End AND for() #145 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 1794; for() #145 End
LOAD D2 0.0009; if() #555 Test AND unless(false) #554 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2064 ==; Test 'if'
ALLOCATEMEMV D2 54 0; if() #555 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script not found.\n"
STORE D2 0.0005
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Enemy name: %s\n"
STORE D2 0.0003
ALLOCATEMEMV D2 55 0
WRITEPODSTRING D2 "  Script name should start after this character: %c\n"
STORE D2 0.0001
LOAD D2 0.0005; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGV 64; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 2074; return End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3; if() #555 Body End
SETV D2 1; return Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 2074; return End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0011
RETURNFUNC; Func[int __AutoGhostParseName(npc, int[])] Body End
SETR D4 SP2; Func[void __AutoGhostKill(npc)] Body Start
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
POP D5
RETURNFUNC; Func[void __AutoGhostKill(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
LOAD D2 0.0002; InlineFunc[int Max(int, int)] Params Start AND for() #38 setup
ADDV D2 1
PUSHVARGR D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0
LOAD D2 0; for() #38 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2185 ==; for() #38 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #38 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #151 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 2161 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 2161 ==
SETV D2 0
GOTO 2162
SETV D2 1
COMPAREV D2 0
GOTOCMP 2181 ==; Test 'if'
LOAD D2 0.0001; unless() #152 Test AND if() #151 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 2181 !=; Test 'unless'
LOAD D2 0.0001; unless() #153 Test AND unless() #152 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 2181 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #153 Body Start
GOTO 2186; return End AND unless() #153 Body End
LOAD D2 0; unless() #152 Body End AND if() #151 Body End AND for() #38 Body End AND for() #38 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 2136; for() #38 End
SETV D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR D4 SP2; Func[int CenterX(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(eweapon)] Body End
SETR D4 SP2; Func[int CenterY(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(eweapon)] Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #17 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2246 ==; Test 'if'
LOAD D2 0.0001; if() #17 Body Start
STORE D2 0.0002
GOTO 2256; if() #17 Body End
LOAD D2 0.0002; if() #65 Test AND if() #17 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2256 ==; Test 'if'
LOAD D2 0; if() #65 Body Start
STORE D2 0.0002; if() #65 Body End
LOAD D2 0.0002; if() #17 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR D4 SP2
SETR D2 LINKHP; if() #66 Test
COMPAREV D2 0
GOTOCMP 2267 >
GOTO 2267
SETV D2 1
GOTO 2268
SETV D2 0
COMPAREV D2 0
GOTOCMP 2317 ==; Test 'if'
STOREV 0 0.0001; if() #66 Body Start
STOREV 1 0; for() #3 setup
LOAD D2 0; for() #3 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2317 ==; for() #3 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #3 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
SETR D2 GD24; if() #67 Test
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
RSHIFTV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
ANDV D2 15
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2313 ==; Test 'if'
SETV D2 0; if() #67 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #67 Body End
LOAD D2 0; for() #3 Body End AND for() #3 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 2272; for() #3 End
POPARGS D5 0.0002; if() #66 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSV 0 0.0002; Func[void DrawEWeaponShadow(eweapon)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
SUBV D2 1
MULTV D2 16
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHV 1; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #34 [Opt:AlwaysOn]
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
PUSHR D2
PUSHARGSV 1 0.0002
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(eweapon)] Body End
PUSHARGSV 0 0.0009; Func[void DrawGhostFFCs()] Body Start
SETR D4 SP2
SETV D2 18; if() #101 Test
PUSHR D2
POP D0
SETR D2 SCREEN_FLAG
COMPAREV D2 0
GOTOCMP 2398 ==; Test 'if'
PUSHR D4; unless() #102 Test AND if() #101 Body Start
CALLFUNC 0.2581; UsrFunc[bool __HaveAmulet()] Call
POP D4
COMPAREV D2 0
GOTOCMP 2579 ==; Test 'unless' AND return (Void) AND unless() #102 Body
STOREV 0 0.0008; if() #101 Body End
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
SETV D2 49; if() #36 Test AND if(true) #35 [Opt:AlwaysOn]
PUSHR D2
POP D0
SETR D2 SCREEN_FLAG
COMPAREV D2 0
GOTOCMP 2414 ==; Test 'if'
SETV D2 1; if() #36 Body Start
STORE D2 0.0003
GOTO 2416; if() #36 Body End
SETV D2 2; if() #36 Else Start
STORE D2 0.0003; if() #36 Else End
SETV D2 4
STORE D2 0.0002
STOREV 1 0.0001; for() #16 setup
LOAD D2 0.0001; for() #16 LoopTest
PUSHR D2
SETR D2 NPCCOUNT
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2579 ==; for() #16 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #16 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0006; UsrFunc[int[] __GetDrawingArray(npc)] Params Start
PUSHR D2; UsrFunc[int[] __GetDrawingArray(npc)] Params End
CALLFUNC 0.2600; UsrFunc[int[] __GetDrawingArray(npc)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008; unless() #103 Test
COMPAREV D2 0
GOTOCMP 2575 ==; Test 'unless' AND continue 1; AND unless() #103 Body
SETR D2 GD26; if() #104 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2459 ==; Test 'if'
LOAD D2 0.0008; if() #105 Test AND if() #104 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2575 !=; Test 'if' AND continue 1; AND if() #105 Body
LOAD D2 0.0008; if() #104 Body End AND if() #37 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2471 ==; Test 'if'
SETV D2 64; if() #37 Body Start
STORE D2 0.0005
GOTO 2473; if() #37 Body End
SETV D2 128; if() #37 Else Start
STORE D2 0.0005; if() #37 Else End
LOAD D2 0.0008; if() #38 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2485 ==; Test 'if'
LOAD D2 0.0002; if() #38 Body Start
STORE D2 0.0004
GOTO 2487; if() #38 Body End
LOAD D2 0.0003; if() #38 Else Start
STORE D2 0.0004; if() #38 Else End
SETV D2 3
STORE D2 0.0007
STOREV 0 0; for() #17 setup
LOAD D2 0; for() #17 LoopTest
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2575 ==; for() #17 TestFail?
LOAD D2 0.0008; if() #106 Test AND for() #17 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
GOTOCMP 2517 ==
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 2517 ==
SETV D2 1
GOTO 2518
SETV D2 0
COMPAREV D2 0
GOTOCMP 2568 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #106 Body Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
LOAD D2 0.0005
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #106 Body End
LOAD D2 0.0007
ADDV D2 6
STORE D2 0.0007; for() #17 Body End
LOAD D2 0; for() #17 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 2490; for() #17 End
LOAD D2 0.0001; for() #16 Body End AND for() #16 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 2419; for() #16 End
POPARGS D5 0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR D4 SP2; Func[bool __HaveAmulet()] Body Start
SETV D2 50; if() #657 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 2590 ==; Test 'if'
SETV D2 1; return Start AND if() #657 Body Start
GOTO 2599; return End AND if() #657 Body End
SETV D2 63; if() #658 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 2598 ==; Test 'if'
SETV D2 1; return Start AND if() #658 Body Start
GOTO 2599; return End AND if() #658 Body End
SETV D2 0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int[] __GetDrawingArray(npc)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #568 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2616 ==; Test 'if'
SETV D2 0; return Start AND if() #568 Body Start
GOTO 2636; return End AND if() #568 Body End
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0; unless() #569 Test
COMPAREV D2 0
GOTOCMP 2630 !=; Test 'unless'
SETV D2 0; return Start AND unless() #569 Body Start
GOTO 2636; return End AND unless() #569 Body End
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 23
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int[] __GetDrawingArray(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC()] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 1 0; for() #37 setup
LOAD D2 0; for() #37 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2691 ==; for() #37 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #37 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #148 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 2667 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 2667 ==
SETV D2 0
GOTO 2668
SETV D2 1
COMPAREV D2 0
GOTOCMP 2687 ==; Test 'if'
LOAD D2 0.0001; unless() #149 Test AND if() #148 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 2687 !=; Test 'unless'
LOAD D2 0.0001; unless() #150 Test AND unless() #149 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 2687 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #150 Body Start
GOTO 2692; return End AND unless() #150 Body End
LOAD D2 0; unless() #149 Body End AND if() #148 Body End AND for() #37 Body End AND for() #37 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 2642; for() #37 End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #174 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2707 ==; Test 'if'
PUSHR D4; if() #174 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.2853; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #174 Body End
LOAD D2 0.0002; if() #175 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2718 ==; Test 'if'
PUSHR D4; if() #175 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.3013; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #175 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001; if() #50 Test
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2788 ==; Test 'if'
PUSHR D4; if() #50 Body Start
LOAD D2 0.0006; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.3341; UsrFunc[int __UnblockableDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
GOTO 2797; if() #50 Body End
LOAD D2 0.0006; if() #50 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2; if() #50 Else End
LOAD D2 0.0003; if() #176 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 2808 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #176 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #176 Body End
LOAD D2 0.0001; if() #177 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2824 ==; Test 'if'
SETV D2 0; if() #177 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #177 Body End
LOAD D2 0.0001; if() #178 Test
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2835 ==; Test 'if'
PUSHR D4; if() #178 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.3176; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #178 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #55 Test
COMPAREV D2 129
GOTOCMP 2863 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 2863 ==
SETV D2 0
GOTO 2864
SETV D2 1
COMPAREV D2 0
GOTOCMP 2868 ==; Test 'if'
SETV D2 17; return Start AND if() #55 Body Start
GOTO 3011; return End AND if() #55 Body End
LOAD D2 0.0003; if() #56 Test AND if() #55 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2875 ==; Test 'if'
SETV D2 18; return Start AND if() #56 Body Start
GOTO 3011; return End AND if() #56 Body End
LOAD D2 0.0003; if() #57 Test AND if() #56 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2882 ==; Test 'if'
SETV D2 19; return Start AND if() #57 Body Start
GOTO 3011; return End AND if() #57 Body End
LOAD D2 0.0003; if() #58 Test AND if() #57 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2889 ==; Test 'if'
SETV D2 35; return Start AND if() #58 Body Start
GOTO 3011; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2896 ==; Test 'if'
SETV D2 81; return Start AND if() #59 Body Start
GOTO 3011; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2903 ==; Test 'if'
SETV D2 80; return Start AND if() #60 Body Start
GOTO 3011; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2910 ==; Test 'if'
SETV D2 21; return Start AND if() #61 Body Start
GOTO 3011; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2917 ==; Test 'if'
SETV D2 20; return Start AND if() #62 Body Start
GOTO 3011; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2924 ==; Test 'if'
SETV D2 36; return Start AND if() #63 Body Start
GOTO 3011; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2931 ==; Test 'if'
SETV D2 76; return Start AND if() #64 Body Start
GOTO 3011; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2938 ==; Test 'if'
SETV D2 77; return Start AND if() #65 Body Start
GOTO 3011; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3010 ==; Test 'if'
STOREV 0 0.0002; if() #66 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #43 setup
LOAD D2 0; for() #43 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2994 ==; for() #43 TestFail?
LOAD D2 0; unless() #187 Test AND for() #43 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 2990 ==; Test 'unless' AND continue 1; AND unless() #187 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #188 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2990 !=; Test 'if' AND continue 1; AND if() #188 Body
LOAD D2 0.0001; if() #189 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2990 ==; Test 'if'
LOAD D2 0.0001; if() #189 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #190 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 2994 !=; Test 'if' AND break 1; AND if() #190 Body
LOAD D2 0; if() #189 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 2946; for() #43 End
LOAD D2 0.0002; if() #67 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3001 ==; Test 'if'
SETV D2 4; return Start AND if() #67 Body Start
GOTO 3011; return End AND if() #67 Body End
LOAD D2 0.0002; if() #68 Test AND if() #67 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3008 ==; Test 'if'
SETV D2 5; return Start AND if() #68 Body Start
GOTO 3011; return End AND if() #68 Body End
SETV D2 6; return Start AND if() #68 Else Start
GOTO 3011; return End AND if() #68 Else End AND if() #67 Else End AND if() #66 Body End
SETV D2 0; return Start AND if() #66 Else Start
POPARGS D5 0.0004; return End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #51 Test
COMPAREV D2 129
GOTOCMP 3022 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 3022 ==
SETV D2 0
GOTO 3023
SETV D2 1
COMPAREV D2 0
GOTOCMP 3027 ==; Test 'if'
SETV D2 40; return Start AND if() #51 Body Start
GOTO 3064; return End AND if() #51 Body End
LOAD D2 0; if() #52 Test AND if() #51 Else Start
COMPAREV D2 134
GOTOCMP 3035 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 3035 ==
SETV D2 0
GOTO 3036
SETV D2 1
COMPAREV D2 0
GOTOCMP 3040 ==; Test 'if'
SETV D2 32; return Start AND if() #52 Body Start
GOTO 3064; return End AND if() #52 Body End
LOAD D2 0; if() #53 Test AND if() #52 Else Start
COMPAREV D2 140
GOTOCMP 3051 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 3051 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 3051 ==
SETV D2 0
GOTO 3052
SETV D2 1
COMPAREV D2 0
GOTOCMP 3056 ==; Test 'if'
SETV D2 13; return Start AND if() #53 Body Start
GOTO 3064; return End AND if() #53 Body End
LOAD D2 0; if() #54 Test AND if() #53 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3063 ==; Test 'if'
SETV D2 51; return Start AND if() #54 Body Start
GOTO 3064; return End AND if() #54 Body End
SETV D2 0; return Start AND if() #54 Else Start
POP D5; return End AND if() #54 Else End AND if() #53 Else End AND if() #52 Else End AND if() #51 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #486 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3083 ==; Test 'if'
LOAD D2 0.0001; if() #486 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #486 Body End
LOAD D2 0.0001; if() #185 Test
COMPAREV D2 0.3927
GOTOCMP 3091 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 3091 >
SETV D2 0
GOTO 3092
SETV D2 1
COMPAREV D2 0
GOTOCMP 3097 ==; Test 'if'
SETV D2 3; if() #185 Body Start
STORE D2 0
GOTO 3147; if() #185 Body End
LOAD D2 0.0001; if() #186 Test AND if() #185 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3105 ==; Test 'if'
SETV D2 7; if() #186 Body Start
STORE D2 0
GOTO 3147; if() #186 Body End
LOAD D2 0.0001; if() #187 Test AND if() #186 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3113 ==; Test 'if'
SETV D2 1; if() #187 Body Start
STORE D2 0
GOTO 3147; if() #187 Body End
LOAD D2 0.0001; if() #188 Test AND if() #187 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3121 ==; Test 'if'
SETV D2 6; if() #188 Body Start
STORE D2 0
GOTO 3147; if() #188 Body End
LOAD D2 0.0001; if() #189 Test AND if() #188 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3129 ==; Test 'if'
SETV D2 2; if() #189 Body Start
STORE D2 0
GOTO 3147; if() #189 Body End
LOAD D2 0.0001; if() #190 Test AND if() #189 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3137 ==; Test 'if'
SETV D2 4; if() #190 Body Start
STORE D2 0
GOTO 3147; if() #190 Body End
LOAD D2 0.0001; if() #191 Test AND if() #190 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3145 ==; Test 'if'
SETV D2 0; if() #191 Body Start
STORE D2 0
GOTO 3147; if() #191 Body End
SETV D2 5; if() #191 Else Start
STORE D2 0; if() #191 Else End
LOAD D2 0.0002; if() #190 Else End AND if() #189 Else End AND if() #188 Else End AND if() #187 Else End AND if() #186 Else End AND if() #185 Else End AND if() #487 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3165 ==; Test 'if'
PUSHR D4; if() #487 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.3341; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #487 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #209 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 3259 ==; Test 'if'
LOAD D2 0.0001; if() #209 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #492 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3198 ==; Test 'if'
LOAD D2 0; if() #492 Body Start
ADDV D2 6.2832
STORE D2 0; if() #492 Body End
LOAD D2 0; if() #210 Test
COMPAREV D2 0.7854
GOTOCMP 3206 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 3206 >
SETV D2 0
GOTO 3207
SETV D2 1
COMPAREV D2 0
GOTOCMP 3219 ==; Test 'if'
SETV D2 4; if() #210 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 3339; if() #210 Body End
LOAD D2 0; if() #211 Test AND if() #210 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3234 ==; Test 'if'
SETV D2 3; if() #211 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 3339; if() #211 Body End
LOAD D2 0; if() #212 Test AND if() #211 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3249 ==; Test 'if'
SETV D2 7; if() #212 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 3339; if() #212 Body End
SETV D2 0; if() #212 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #212 Else End
GOTO 3339; if() #211 Else End AND if() #210 Else End AND if() #209 Body End
PUSHR D4; if() #209 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.3502; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #213 Test
COMPAREV D2 0
GOTOCMP 3278 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 3278 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 3278 ==
SETV D2 0
GOTO 3279
SETV D2 1
COMPAREV D2 0
GOTOCMP 3291 ==; Test 'if'
SETV D2 0; if() #213 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 3339; if() #213 Body End
LOAD D2 0; if() #214 Test AND if() #213 Else Start
COMPAREV D2 1
GOTOCMP 3302 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 3302 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 3302 ==
SETV D2 0
GOTO 3303
SETV D2 1
COMPAREV D2 0
GOTOCMP 3315 ==; Test 'if'
SETV D2 3; if() #214 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 3339; if() #214 Body End
LOAD D2 0; if() #215 Test AND if() #214 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3330 ==; Test 'if'
SETV D2 7; if() #215 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 3339; if() #215 Body End
SETV D2 4; if() #215 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #215 Else End
POPARGS D5 0.0002; if() #214 Else End AND if() #213 Else End AND if() #209 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #681 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3349 ==; Test 'if'
SETV D2 8; return Start AND if() #681 Body Start
GOTO 3399; return End AND if() #681 Body End
LOAD D2 0; if() #682 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3356 ==; Test 'if'
SETV D2 12; return Start AND if() #682 Body Start
GOTO 3399; return End AND if() #682 Body End
LOAD D2 0; if() #683 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3363 ==; Test 'if'
SETV D2 14; return Start AND if() #683 Body Start
GOTO 3399; return End AND if() #683 Body End
LOAD D2 0; if() #684 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3370 ==; Test 'if'
SETV D2 10; return Start AND if() #684 Body Start
GOTO 3399; return End AND if() #684 Body End
LOAD D2 0; if() #685 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3377 ==; Test 'if'
SETV D2 15; return Start AND if() #685 Body Start
GOTO 3399; return End AND if() #685 Body End
LOAD D2 0; if() #686 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3384 ==; Test 'if'
SETV D2 9; return Start AND if() #686 Body Start
GOTO 3399; return End AND if() #686 Body End
LOAD D2 0; if() #687 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3391 ==; Test 'if'
SETV D2 13; return Start AND if() #687 Body Start
GOTO 3399; return End AND if() #687 Body End
LOAD D2 0; if() #688 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3398 ==; Test 'if'
SETV D2 11; return Start AND if() #688 Body Start
GOTO 3399; return End AND if() #688 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
PUSHV 0; Func[int GetEnemyProperty(npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0.0002; if() #69 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 3427 ==
LOAD D2 0
COMPAREV D2 0
GOTOCMP 3427 ==
SETV D2 1
GOTO 3428
SETV D2 0
COMPAREV D2 0
GOTOCMP 3436 ==; Test 'if'
LOAD D2 0; return Start AND if() #69 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
GOTO 3500; return End AND if() #69 Body End
LOAD D2 0.0001; if() #70 Test AND if() #69 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3446 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #70 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
GOTO 3500; return End AND if() #70 Body End
LOAD D2 0.0001; if() #71 Test AND if() #70 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3456 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #71 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
GOTO 3500; return End AND if() #71 Body End
LOAD D2 0.0001; if() #72 Test AND if() #71 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3466 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #72 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
GOTO 3500; return End AND if() #72 Body End
LOAD D2 0.0001; if() #73 Test AND if() #72 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3476 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #73 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_JUMP
GOTO 3500; return End AND if() #73 Body End
LOAD D2 0.0001; if() #74 Test AND if() #73 Else Start
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3486 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #74 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
GOTO 3500; return End AND if() #74 Body End
LOAD D2 0.0001; if() #75 Test AND if() #74 Else Start
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3496 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #75 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
GOTO 3500; return End AND if() #75 Body End
LOAD D2 0.0002; return Start AND if() #75 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
POPARGS D5 0.0003; return End AND if() #75 Else End AND if() #74 Else End AND if() #73 Else End AND if() #72 Else End AND if() #71 Else End AND if() #70 Else End AND if() #69 Else End
RETURNFUNC; Func[int GetEnemyProperty(npc, int)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #667 Test
COMPAREV D2 0
GOTOCMP 3511 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 3511 >
SETV D2 1
GOTO 3512
SETV D2 0
COMPAREV D2 0
GOTOCMP 3516 ==; Test 'if'
LOAD D2 0; return Start AND if() #667 Body Start
GOTO 3573; return End AND if() #667 Body End
LOAD D2 0; if() #668 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3523 ==; Test 'if'
SETV D2 0; return Start AND if() #668 Body Start
GOTO 3573; return End AND if() #668 Body End
LOAD D2 0; if() #669 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3530 ==; Test 'if'
SETV D2 5; return Start AND if() #669 Body Start
GOTO 3573; return End AND if() #669 Body End
LOAD D2 0; if() #670 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3537 ==; Test 'if'
SETV D2 3; return Start AND if() #670 Body Start
GOTO 3573; return End AND if() #670 Body End
LOAD D2 0; if() #671 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3544 ==; Test 'if'
SETV D2 7; return Start AND if() #671 Body Start
GOTO 3573; return End AND if() #671 Body End
LOAD D2 0; if() #672 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3551 ==; Test 'if'
SETV D2 1; return Start AND if() #672 Body Start
GOTO 3573; return End AND if() #672 Body End
LOAD D2 0; if() #673 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3558 ==; Test 'if'
SETV D2 6; return Start AND if() #673 Body Start
GOTO 3573; return End AND if() #673 Body End
LOAD D2 0; if() #674 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3565 ==; Test 'if'
SETV D2 2; return Start AND if() #674 Body Start
GOTO 3573; return End AND if() #674 Body End
LOAD D2 0; if() #675 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3572 ==; Test 'if'
SETV D2 4; return Start AND if() #675 Body Start
GOTO 3573; return End AND if() #675 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR D4 SP2; Func[bool IsSideview()] Body Start
SETV D2 51; return Start
PUSHR D2
POP D0
SETR D2 SCREEN_FLAG
PUSHR D2
SETR D2 CURDMAP; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATASIDEVIEW
POP D3
COMPARER D3 D2
SETCMP D2 BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR D4 SP2; Func[int HealthBar_GetHP(npc)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[int GetEnemyProperty(npc, int)] Params Start
PUSHR D2
PUSHV 20; UsrFunc[int GetEnemyProperty(npc, int)] Params End
CALLFUNC 0.3401; UsrFunc[int GetEnemyProperty(npc, int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[int HealthBar_GetHP(npc)] Body End
SETR D4 SP2; Func[void InitializeGhostZHData()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
SETR D4 SP2; Func[void KillEWeapon(eweapon)] Body Start
LOAD D2 0
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 128
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POP D5
RETURNFUNC; Func[void KillEWeapon(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[int __GetEWeaponThrowHeight(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
STORE D2 0.0004
LOAD D2 0.0004; if() #570 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3681 ==; Test 'if'
SETV D2 1; return Start AND if() #570 Body Start
GOTO 3782; return End AND if() #570 Body End
LOAD D2 0.0005; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0003
LOAD D2 0.0003; if() #571 Test
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3730 ==; Test 'if'
SETV D2 1; return Start AND if() #571 Body Start
GOTO 3782; return End AND if() #571 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0001; while() #5 Test
COMPAREV D2 3.2000
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3757 ==; Test 'while'
LOAD D2 0.0001; while() #5 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002
LOAD D2 0.0002; if() #572 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3738 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #572 Body Start
GOTO 3782; return End AND if() #572 Body End
GOTO 3738; while() #5 Body End AND while() #5 End
STOREV 0 0
LOAD D2 0.0002; while() #6 Test
PUSHR D2
LOAD D2 0
DIVV D2 3.2000
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3781 ==; Test 'while'
LOAD D2 0.0001; while() #6 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SUBV D2 3.2000
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002; while() #6 Body End
GOTO 3758; while() #6 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(eweapon)] Body End
SETR D4 SP2; Func[void SetEWeaponRotation(eweapon, int)] Body Start
PUSHR D4
LOAD D2 0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.3502; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #216 Test
COMPAREV D2 0
GOTOCMP 3802 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 3802 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 3802 ==
SETV D2 0
GOTO 3803
SETV D2 1
COMPAREV D2 0
GOTOCMP 3815 ==; Test 'if'
SETV D2 0; if() #216 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 3863; if() #216 Body End
LOAD D2 0; if() #217 Test AND if() #216 Else Start
COMPAREV D2 1
GOTOCMP 3826 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 3826 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 3826 ==
SETV D2 0
GOTO 3827
SETV D2 1
COMPAREV D2 0
GOTOCMP 3839 ==; Test 'if'
SETV D2 3; if() #217 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 3863; if() #217 Body End
LOAD D2 0; if() #218 Test AND if() #217 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3854 ==; Test 'if'
SETV D2 7; if() #218 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 3863; if() #218 Body End
SETV D2 4; if() #218 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #218 Else End
POPARGS D5 0.0002; if() #217 Else End AND if() #216 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon, int)] Body End
SETR D4 SP2; Func[int Sign(int)] Body Start
LOAD D2 0; if() #232 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3873 ==; Test 'if'
SETV D2 1; return Start AND if() #232 Body Start
GOTO 3881; return End AND if() #232 Body End
LOAD D2 0; if() #233 Test AND if() #232 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3880 ==; Test 'if'
SETV D2 -1; return Start AND if() #233 Body Start
GOTO 3881; return End AND if() #233 Body End
SETV D2 0; return Start AND if() #233 Else Start
POP D5; return End AND if() #233 Else End AND if() #232 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR D4 SP2; Func[void StartGhostZH()] Body Start
PUSHR D4
CALLFUNC 0.3600; UsrFunc[void InitializeGhostZHData()] Call
POP D4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0 0.0007; Func[void UpdateEWeapon(eweapon)] Body Start
SETR D4 SP2
SETR D2 GD26; if() #523 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5032 !=; Test 'if' AND return (Void) AND if() #523 Body
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0005
STOREV 1 0.0004
LOAD D2 0.0007; if() #242 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4303 ==; Test 'if'
LOAD D2 0.0007; if() #524 Test AND if() #242 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4145 ==; Test 'if'
LOAD D2 0.0007; if() #243 Test AND if() #524 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 6
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4018 ==; Test 'if'
LOAD D2 0.0007; if() #244 Test AND if() #243 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3961 ==; Test 'if'
PUSHR D4; if() #244 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params End
CALLFUNC 0.5034; UsrFunc[void __UpdateEWMSineWave(eweapon)] Call
POP D4
GOTO 4145; if() #244 Body End
LOAD D2 0.0007; if() #245 Test AND if() #244 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3978 ==; Test 'if'
PUSHR D4; if() #245 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHoming(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHoming(eweapon)] Params End
CALLFUNC 0.5216; UsrFunc[void __UpdateEWMHoming(eweapon)] Call
POP D4
GOTO 4145; if() #245 Body End
LOAD D2 0.0007; if() #246 Test AND if() #245 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3995 ==; Test 'if'
PUSHR D4; if() #246 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params End
CALLFUNC 0.5428; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Call
POP D4
GOTO 4145; if() #246 Body End
LOAD D2 0.0007; if() #247 Test AND if() #246 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4012 ==; Test 'if'
PUSHR D4; if() #247 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandom(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandom(eweapon)] Params End
CALLFUNC 0.5769; UsrFunc[void __UpdateEWMRandom(eweapon)] Call
POP D4
GOTO 4145; if() #247 Body End
PUSHR D4; if() #247 Else Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params End
CALLFUNC 0.5889; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Call
POP D4; if() #247 Else End
GOTO 4145; if() #246 Else End AND if() #245 Else End AND if() #244 Else End AND if() #243 Body End
LOAD D2 0.0007; if() #248 Test AND if() #243 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4053 ==; Test 'if'
LOAD D2 0.0007; if() #248 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMVeer(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMVeer(eweapon)] Params End
CALLFUNC 0.6201; UsrFunc[void __UpdateEWMVeer(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 4145; if() #248 Body End
LOAD D2 0.0007; if() #249 Test AND if() #248 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4070 ==; Test 'if'
PUSHR D4; if() #249 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMThrow(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMThrow(eweapon)] Params End
CALLFUNC 0.6733; UsrFunc[void __UpdateEWMThrow(eweapon)] Call
POP D4
GOTO 4145; if() #249 Body End
LOAD D2 0.0007; if() #250 Test AND if() #249 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4087 ==; Test 'if'
PUSHR D4; if() #250 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMFall(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMFall(eweapon)] Params End
CALLFUNC 0.7043; UsrFunc[void __UpdateEWMFall(eweapon)] Call
POP D4
GOTO 4145; if() #250 Body End
LOAD D2 0.0007; if() #251 Test AND if() #250 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4122 ==; Test 'if'
LOAD D2 0.0007; if() #251 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDrift(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDrift(eweapon)] Params End
CALLFUNC 0.7309; UsrFunc[void __UpdateEWMDrift(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 4145; if() #251 Body End
LOAD D2 0.0007; if() #251 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params End
CALLFUNC 0.7813; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004; if() #251 Else End
LOAD D2 0.0007; if() #250 Else End AND if() #249 Else End AND if() #248 Else End AND if() #243 Else End AND if() #524 Body End AND if() #525 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4613 ==; Test 'if'
LOAD D2 0.0007; if() #252 Test AND if() #525 Body Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4203 ==; Test 'if'
LOAD D2 0.0007; if() #252 Body Start
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0007; if() #526 Test
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4613 ==; Test 'if'
PUSHR D4; if() #526 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.3644; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #526 Body End
GOTO 4613; if() #252 Body End
LOAD D2 0.0007; if() #253 Test AND if() #252 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4253 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #527 Test AND if() #253 Body Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4613 ==; Test 'if'
PUSHR D4; if() #527 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.3644; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #527 Body End
GOTO 4613; if() #253 Body End
LOAD D2 0.0007; if() #528 Test AND if() #253 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4613 ==; Test 'if'
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params Start AND if() #528 Body Start
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
PUSHVARGR D3; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0007; if() #529 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4613 ==; Test 'if'
PUSHR D4; if() #529 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.3644; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #529 Body End
GOTO 4613; if() #528 Body End AND if() #253 Else End AND if() #252 Else End AND if() #525 Body End AND if() #242 Body End
LOAD D2 0.0007; if() #530 Test AND if() #242 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 4324 ==
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 4324 !=
SETV D2 1
GOTO 4325
SETV D2 0
COMPAREV D2 0
GOTOCMP 4613 ==; Test 'if'
LOAD D2 0.0007; if() #254 Test AND if() #530 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4344 ==; Test 'if'
PUSHR D4; if() #254 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params End
CALLFUNC 0.8348; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Call
POP D4
GOTO 4613; if() #254 Body End
LOAD D2 0.0007; if() #255 Test AND if() #254 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4478 ==; Test 'if'
LOAD D2 0.0007; if() #256 Test AND if() #255 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4376 ==; Test 'if'
SETV D2 0; if() #256 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 4613; if() #256 Body End
LOAD D2 0.0007; if() #257 Test AND if() #256 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4393 ==; Test 'if'
PUSHR D4; if() #257 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params End
CALLFUNC 0.8759; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Call
POP D4
GOTO 4613; if() #257 Body End
LOAD D2 0.0007; if() #258 Test AND if() #257 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4410 ==; Test 'if'
PUSHR D4; if() #258 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params End
CALLFUNC 0.8932; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Call
POP D4
GOTO 4613; if() #258 Body End
LOAD D2 0.0007; if() #259 Test AND if() #258 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4427 ==; Test 'if'
PUSHR D4; if() #259 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params End
CALLFUNC 0.8976; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Call
POP D4
GOTO 4613; if() #259 Body End
LOAD D2 0.0007; if() #260 Test AND if() #259 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4444 ==; Test 'if'
PUSHR D4; if() #260 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params End
CALLFUNC 0.9020; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Call
POP D4
GOTO 4613; if() #260 Body End
LOAD D2 0.0007; if() #261 Test AND if() #260 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4461 ==; Test 'if'
PUSHR D4; if() #261 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params End
CALLFUNC 0.9078; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Call
POP D4
GOTO 4613; if() #261 Body End
LOAD D2 0.0007; if() #531 Test AND if() #261 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4613 ==; Test 'if'
PUSHR D4; if() #531 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params End
CALLFUNC 0.9136; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Call
POP D4; if() #531 Body End
GOTO 4613; if() #261 Else End AND if() #260 Else End AND if() #259 Else End AND if() #258 Else End AND if() #257 Else End AND if() #256 Else End AND if() #255 Body End
LOAD D2 0.0007; if() #262 Test AND if() #255 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4495 ==; Test 'if'
PUSHR D4; if() #262 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params End
CALLFUNC 0.9246; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Call
POP D4
GOTO 4613; if() #262 Body End
LOAD D2 0.0007; if() #263 Test AND if() #262 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4512 ==; Test 'if'
PUSHR D4; if() #263 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params End
CALLFUNC 0.9304; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Call
POP D4
GOTO 4613; if() #263 Body End
LOAD D2 0.0007; if() #264 Test AND if() #263 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4529 ==; Test 'if'
PUSHR D4; if() #264 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params End
CALLFUNC 0.9364; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Call
POP D4
GOTO 4613; if() #264 Body End
LOAD D2 0.0007; if() #265 Test AND if() #264 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4546 ==; Test 'if'
PUSHR D4; if() #265 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params End
CALLFUNC 0.9424; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Call
POP D4
GOTO 4613; if() #265 Body End
LOAD D2 0.0007; if() #266 Test AND if() #265 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4563 ==; Test 'if'
PUSHR D4; if() #266 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params End
CALLFUNC 0.9536; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Call
POP D4
GOTO 4613; if() #266 Body End
LOAD D2 0.0007; if() #267 Test AND if() #266 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4580 ==; Test 'if'
PUSHR D4; if() #267 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params End
CALLFUNC 0.9641; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Call
POP D4
GOTO 4613; if() #267 Body End
LOAD D2 0.0007; if() #268 Test AND if() #267 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4597 ==; Test 'if'
PUSHR D4; if() #268 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params End
CALLFUNC 0.9688; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Call
POP D4
GOTO 4613; if() #268 Body End
LOAD D2 0.0007; if() #532 Test AND if() #268 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4613 ==; Test 'if'
PUSHR D4; if() #532 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params End
CALLFUNC 0.9739; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Call
POP D4; if() #532 Body End
LOAD D2 0.0007; if() #268 Else End AND if() #267 Else End AND if() #266 Else End AND if() #265 Else End AND if() #264 Else End AND if() #263 Else End AND if() #262 Else End AND if() #255 Else End AND if() #254 Else End AND if() #530 Body End AND if() #242 Else End AND if() #533 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4638 ==; Test 'if'
LOAD D2 0.0007; if() #534 Test AND if() #533 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4638 ==; Test 'if'
PUSHR D4; if() #534 Body Start
LOAD D2 0.0007; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.2319; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #534 Body End
LOAD D2 0.0007; if() #533 Body End AND if() #269 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4921 ==; Test 'if'
SETV D2 1000; if() #269 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
SETR D2 LINKHP; if() #535 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5032 !=; Test 'if' AND return (Void) AND if() #535 Body
LOAD D2 0.0007; if() #536 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 4683 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 4683 ==
SETV D2 1
GOTO 4684
SETV D2 0
COMPAREV D2 0
GOTOCMP 5032 !=; Test 'if' AND return (Void) AND if() #536 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0007; if() #270 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 4702 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int RadtoDeg(int)] Params Start AND if() #270 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 4768; if() #270 Body End
PUSHR D4; if() #270 Else Start
LOAD D2 0.0007; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.3502; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #271 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4718 ==; Test 'if'
SETV D2 -90; if() #271 Body Start
STORE D2 0.0001
GOTO 4768; if() #271 Body End
LOAD D2 0; if() #272 Test AND if() #271 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4726 ==; Test 'if'
SETV D2 -45; if() #272 Body Start
STORE D2 0.0001
GOTO 4768; if() #272 Body End
LOAD D2 0; if() #273 Test AND if() #272 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4734 ==; Test 'if'
SETV D2 0; if() #273 Body Start
STORE D2 0.0001
GOTO 4768; if() #273 Body End
LOAD D2 0; if() #274 Test AND if() #273 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4742 ==; Test 'if'
SETV D2 45; if() #274 Body Start
STORE D2 0.0001
GOTO 4768; if() #274 Body End
LOAD D2 0; if() #275 Test AND if() #274 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4750 ==; Test 'if'
SETV D2 90; if() #275 Body Start
STORE D2 0.0001
GOTO 4768; if() #275 Body End
LOAD D2 0; if() #276 Test AND if() #275 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4758 ==; Test 'if'
SETV D2 135; if() #276 Body Start
STORE D2 0.0001
GOTO 4768; if() #276 Body End
LOAD D2 0; if() #277 Test AND if() #276 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4766 ==; Test 'if'
SETV D2 180; if() #277 Body Start
STORE D2 0.0001
GOTO 4768; if() #277 Body End
SETV D2 -135; if() #277 Else Start
STORE D2 0.0001; if() #277 Else End
LOAD D2 0.0004; if() #276 Else End AND if() #275 Else End AND if() #274 Else End AND if() #273 Else End AND if() #272 Else End AND if() #271 Else End AND if() #270 Else End AND if() #278 Test
COMPAREV D2 0
GOTOCMP 4810 ==; Test 'if'
LOAD D2 0.0007; if() #278 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Cos(int)] Params Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
GOTO 4826; if() #278 Body End
LOAD D2 0.0007; if() #278 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0002; if() #278 Else End
LOAD D2 0.0006; unless() #537 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 4840 !=
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 4840 !=
SETV D2 1
GOTO 4841
SETV D2 0
COMPAREV D2 0
GOTOCMP 4855 !=; Test 'unless'
PUSHR D4; unless() #537 Body Start
LOAD D2 0.0006; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0001; unless() #537 Body End
STOREV 0 0
LOAD D2 0.0001; if() #279 Test
COMPAREV D2 0
GOTOCMP 4864 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 4864 >=
SETV D2 1
GOTO 4865
SETV D2 0
COMPAREV D2 0
GOTOCMP 4870 ==; Test 'if'
SETV D2 0; if() #279 Body Start
STORE D2 0
GOTO 4872; if() #279 Body End
SETV D2 2; if() #279 Else Start
STORE D2 0; if() #279 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE_W
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE_H
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 4978; if() #269 Body End
LOAD D2 0.0007; if() #538 Test AND if() #269 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4961 ==; Test 'if'
SETR D2 GD26; if() #280 Test AND if() #538 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4952 ==; Test 'if'
SETV D2 1000; if() #280 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
GOTO 4961; if() #280 Body End
SETV D2 0; if() #280 Else Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #280 Else End
LOAD D2 0.0007; if() #538 Body End AND if() #539 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4978 ==; Test 'if'
PUSHR D4; if() #539 Body Start
LOAD D2 0.0007; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.3176; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #539 Body End
LOAD D2 0.0007; if() #269 Else End AND if() #540 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 64
COMPAREV D2 0
GOTOCMP 4990 !=
SETV D2 0
GOTO 4991
SETV D2 1
COMPAREV D2 0
GOTOCMP 5032 ==; Test 'if'
LOAD D2 0.0007; if() #540 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z_OFFSET D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; if() #540 Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void UpdateEWeapon(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D3 SPRITE_MISCD; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(eweapon)] Body End
PUSHARGSV 0 0.0003; Func[void __UpdateEWMHoming(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0003
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0002
LOAD D2 0.0002; if() #692 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5232 ==; Test 'if'
LOAD D2 0.0002; if() #692 Body Start
ADDV D2 6.2832
STORE D2 0.0002; if() #692 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.1354; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #693 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5260 ==; Test 'if'
LOAD D2 0.0001; if() #693 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #693 Body End
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
STORE D2 0
LOAD D2 0; if() #369 Test
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
COMPARER D3 D2
GOTOCMP 5295 <
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 6.2832 D2
POP D3
COMPARER D3 D2
GOTOCMP 5295 >
SETV D2 0
GOTO 5296
SETV D2 1
COMPAREV D2 0
GOTOCMP 5308 ==; Test 'if'
LOAD D2 0.0001; if() #369 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 5375; if() #369 Body End
PUSHR D4; if() #370 Test AND if() #369 Else Start
LOAD D2 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.3865; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Sign(int)] Params Start
SUBV D2 3.1416
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.3865; UsrFunc[int Sign(int)] Call
POP D4
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5352 ==; Test 'if'
LOAD D2 0.0003; if() #370 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 5375; if() #370 Body End
LOAD D2 0.0003; if() #370 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2; if() #370 Else End
PUSHR D4; if() #369 Else End
LOAD D2 0.0003; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.3066; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0003; if() #694 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5426 ==; Test 'if'
LOAD D2 0.0003; if() #694 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0003; if() #695 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5426 ==; Test 'if'
PUSHR D4; if() #695 Body Start
LOAD D2 0.0003; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.3644; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #695 Body End
POPARGS D5 0.0004; if() #694 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #696 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5459 ==; Test 'if'
LOAD D2 0.0001; if() #696 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #696 Body End
LOAD D2 0.0001; if() #371 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5558 ==; Test 'if'
LOAD D2 0.0001; if() #371 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #697 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5767 ==; Test 'if'
LOAD D2 0.0001; if() #372 Test AND if() #697 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5517 ==; Test 'if'
PUSHR D4; if() #372 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.3644; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 5767; if() #372 Body End
LOAD D2 0.0001; if() #372 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #372 Else End
GOTO 5767; if() #697 Body End AND if() #371 Body End
LOAD D2 0.0001; if() #371 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #698 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5664 ==; Test 'if'
SETV D2 45; if() #698 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.1354; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.3066; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #699 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5664 ==; Test 'if'
PUSHR D4; if() #699 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.3176; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #699 Body End
LOAD D2 0.0001; if() #698 Body End AND if() #373 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5690 ==; Test 'if'
LOAD D2 0.0001; if() #373 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 5767; if() #373 Body End
LOAD D2 0.0001; if() #700 Test AND if() #373 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5767 ==; Test 'if'
LOAD D2 0.0001; if() #700 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.2000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #374 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5737 ==; Test 'if'
PUSHR D4; if() #374 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.3784; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 5767; if() #374 Body End
LOAD D2 0; if() #375 Test AND if() #374 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5749 ==; Test 'if'
PUSHR D4; if() #375 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.3784; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 5767; if() #375 Body End
LOAD D2 0; if() #376 Test AND if() #375 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5761 ==; Test 'if'
PUSHR D4; if() #376 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.3784; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 5767; if() #376 Body End
PUSHR D4; if() #376 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.3784; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #376 Else End
POPARGS D5 0.0002; if() #375 Else End AND if() #374 Else End AND if() #700 Body End AND if() #373 Else End AND if() #371 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(eweapon)] Body End
SETR D4 SP2; Func[void __UpdateEWMRandom(eweapon)] Body Start
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Randf(int)] Params Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.1371; UsrFunc[int Randf(int)] Call
POP D4
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.3066; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0; if() #701 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5841 ==; Test 'if'
PUSHR D4; if() #701 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.3176; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #701 Body End
LOAD D2 0; if() #702 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5887 ==; Test 'if'
LOAD D2 0; if() #702 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #703 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5887 ==; Test 'if'
PUSHR D4; if() #703 Body Start
LOAD D2 0; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.3644; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #703 Body End
POP D5; if() #702 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #704 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5920 ==; Test 'if'
LOAD D2 0.0001; if() #704 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #704 Body End
LOAD D2 0.0001; if() #377 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6019 ==; Test 'if'
LOAD D2 0.0001; if() #377 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #705 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6199 ==; Test 'if'
LOAD D2 0.0001; if() #378 Test AND if() #705 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5978 ==; Test 'if'
PUSHR D4; if() #378 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.3644; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 6199; if() #378 Body End
LOAD D2 0.0001; if() #378 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #378 Else End
GOTO 6199; if() #705 Body End AND if() #377 Body End
LOAD D2 0.0001; if() #377 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #706 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6109 ==; Test 'if'
SETV D2 45; if() #706 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D3 62832; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
MULTV D2 0.0001
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.3066; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #707 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6109 ==; Test 'if'
PUSHR D4; if() #707 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.3176; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #707 Body End
LOAD D2 0.0001; if() #706 Body End AND if() #379 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6135 ==; Test 'if'
LOAD D2 0.0001; if() #379 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 6199; if() #379 Body End
LOAD D2 0.0001; if() #708 Test AND if() #379 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6199 ==; Test 'if'
LOAD D2 0.0001; if() #708 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #380 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6169 ==; Test 'if'
PUSHR D4; if() #380 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.3784; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 6199; if() #380 Body End
LOAD D2 0; if() #381 Test AND if() #380 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6181 ==; Test 'if'
PUSHR D4; if() #381 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.3784; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 6199; if() #381 Body End
LOAD D2 0; if() #382 Test AND if() #381 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6193 ==; Test 'if'
PUSHR D4; if() #382 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.3784; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 6199; if() #382 Body End
PUSHR D4; if() #382 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.3784; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #382 Else End
POPARGS D5 0.0002; if() #381 Else End AND if() #380 Else End AND if() #708 Body End AND if() #379 Else End AND if() #377 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #390 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6316 ==; Test 'if'
LOAD D2 0.0001; if() #390 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6673; if() #390 Body End
LOAD D2 0; if() #391 Test AND if() #390 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6350 ==; Test 'if'
LOAD D2 0.0001; if() #391 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6673; if() #391 Body End
LOAD D2 0; if() #392 Test AND if() #391 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6385 ==; Test 'if'
LOAD D2 0.0001; if() #392 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6673; if() #392 Body End
LOAD D2 0; if() #393 Test AND if() #392 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6419 ==; Test 'if'
LOAD D2 0.0001; if() #393 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6673; if() #393 Body End
LOAD D2 0; if() #394 Test AND if() #393 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6485 ==; Test 'if'
LOAD D2 0.0001; if() #394 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6673; if() #394 Body End
LOAD D2 0; if() #395 Test AND if() #394 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6550 ==; Test 'if'
LOAD D2 0.0001; if() #395 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6673; if() #395 Body End
LOAD D2 0; if() #396 Test AND if() #395 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6615 ==; Test 'if'
LOAD D2 0.0001; if() #396 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6673; if() #396 Body End
LOAD D2 0.0001; if() #396 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #396 Else End
LOAD D2 0.0001; if() #395 Else End AND if() #394 Else End AND if() #393 Else End AND if() #392 Else End AND if() #391 Else End AND if() #390 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
LOAD D2 0.0001; if() #709 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 6764 !=
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 6764 ==
SETV D2 1
GOTO 6765
SETV D2 0
COMPAREV D2 0
GOTOCMP 6797 ==; Test 'if'
LOAD D2 0.0001; if() #709 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #709 Body End
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4; unless() #384 Test AND if(true) #383 [Opt:AlwaysOn]
CALLFUNC 0.3575; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 6849 !=; Test 'unless'
LOAD D2 0.0001; unless() #384 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 6869; unless() #384 Body End
SETR D2 REGION_HEIGHT; unless() #384 Else Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; unless() #384 Else End
LOAD D2 0.0001; if() #385 Test
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6932 ==; Test 'if'
PUSHR D4; unless() #710 Test AND if(true) #386 [Opt:AlwaysOn] AND if() #385 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 1.1027; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 7041 !=; Test 'unless'
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start AND unless() #710 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; unless() #710 Body End
GOTO 7041; if() #385 Body End
STOREV 0 0; if() #385 Else Start
LOAD D2 0.0001; if() #387 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
GOTOCMP 6990 ==; Test 'if'
LOAD D2 0.0001; if() #388 Test AND if() #387 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6987 ==; Test 'if'
LOAD D2 0.0001; if() #388 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 6992; if() #388 Body End
SETV D2 1; if() #388 Else Start
STORE D2 0; if() #388 Else End
GOTO 6992; if() #387 Body End
SETV D2 1; if() #387 Else Start
STORE D2 0; if() #387 Else End
LOAD D2 0; if() #711 Test
COMPAREV D2 0
GOTOCMP 7041 ==; Test 'if'
LOAD D2 0.0001; if() #389 Test AND if() #711 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 7020 ==; Test 'if'
SETV D2 0; if() #389 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.3644; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 7041; if() #389 Body End
SETV D2 0; if() #389 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #389 Else End
POPARGS D5 0.0002; if() #711 Body End AND if() #385 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4; unless() #364 Test AND if(true) #363 [Opt:AlwaysOn]
CALLFUNC 0.3575; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 7104 !=; Test 'unless'
LOAD D2 0.0001; unless() #364 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 7134; unless() #364 Body End
LOAD D2 0.0001; unless() #364 Else Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; unless() #364 Else End
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 0.1600
PUSHVARGR D2
PUSHVARGV 3.2000; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #689 Test AND if(true) #365 [Opt:AlwaysOn]
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7307 ==; Test 'if'
PUSHR D4; unless() #690 Test AND if() #689 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 1.1027; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 7307 !=; Test 'unless'
STOREV 0 0; unless() #690 Body Start
LOAD D2 0.0001; if() #366 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 7256 ==; Test 'if'
LOAD D2 0.0001; if() #367 Test AND if() #366 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7253 ==; Test 'if'
LOAD D2 0.0001; if() #367 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 7258; if() #367 Body End
SETV D2 1; if() #367 Else Start
STORE D2 0; if() #367 Else End
GOTO 7258; if() #366 Body End
SETV D2 1; if() #366 Else Start
STORE D2 0; if() #366 Else End
LOAD D2 0; if() #691 Test
COMPAREV D2 0
GOTOCMP 7307 ==; Test 'if'
LOAD D2 0.0001; if() #368 Test AND if() #691 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 7286 ==; Test 'if'
SETV D2 0; if() #368 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.3644; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 7307; if() #368 Body End
SETV D2 0; if() #368 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #368 Else End
POPARGS D5 0.0002; if() #691 Body End AND unless() #690 Body End AND if() #689 Body End
RETURNFUNC; Func[void __UpdateEWMFall(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #348 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7424 ==; Test 'if'
LOAD D2 0.0001; if() #348 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 7781; if() #348 Body End
LOAD D2 0; if() #349 Test AND if() #348 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7458 ==; Test 'if'
LOAD D2 0.0001; if() #349 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 7781; if() #349 Body End
LOAD D2 0; if() #350 Test AND if() #349 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7493 ==; Test 'if'
LOAD D2 0.0001; if() #350 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 7781; if() #350 Body End
LOAD D2 0; if() #351 Test AND if() #350 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7527 ==; Test 'if'
LOAD D2 0.0001; if() #351 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 7781; if() #351 Body End
LOAD D2 0; if() #352 Test AND if() #351 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7593 ==; Test 'if'
LOAD D2 0.0001; if() #352 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 7781; if() #352 Body End
LOAD D2 0; if() #353 Test AND if() #352 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7658 ==; Test 'if'
LOAD D2 0.0001; if() #353 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 7781; if() #353 Body End
LOAD D2 0; if() #354 Test AND if() #353 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7723 ==; Test 'if'
LOAD D2 0.0001; if() #354 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 7781; if() #354 Body End
LOAD D2 0.0001; if() #354 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #354 Else End
LOAD D2 0.0001; if() #353 Else End AND if() #352 Else End AND if() #351 Else End AND if() #350 Else End AND if() #349 Else End AND if() #348 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001; if() #355 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 16
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 7905 ==; Test 'if'
LOAD D2 0.0001; if() #355 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 7924; if() #355 Body End
LOAD D2 0.0001; if() #355 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #355 Else End
LOAD D2 0; if() #356 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7959 ==; Test 'if'
LOAD D2 0.0001; if() #356 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 8316; if() #356 Body End
LOAD D2 0; if() #357 Test AND if() #356 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7993 ==; Test 'if'
LOAD D2 0.0001; if() #357 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 8316; if() #357 Body End
LOAD D2 0; if() #358 Test AND if() #357 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8028 ==; Test 'if'
LOAD D2 0.0001; if() #358 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 8316; if() #358 Body End
LOAD D2 0; if() #359 Test AND if() #358 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8062 ==; Test 'if'
LOAD D2 0.0001; if() #359 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 8316; if() #359 Body End
LOAD D2 0; if() #360 Test AND if() #359 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8128 ==; Test 'if'
LOAD D2 0.0001; if() #360 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 8316; if() #360 Body End
LOAD D2 0; if() #361 Test AND if() #360 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8193 ==; Test 'if'
LOAD D2 0.0001; if() #361 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 8316; if() #361 Body End
LOAD D2 0; if() #362 Test AND if() #361 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8258 ==; Test 'if'
LOAD D2 0.0001; if() #362 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 8316; if() #362 Body End
LOAD D2 0.0001; if() #362 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #362 Else End
LOAD D2 0.0001; if() #361 Else End AND if() #360 Else End AND if() #359 Else End AND if() #358 Else End AND if() #357 Else End AND if() #356 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(eweapon)] Body End
PUSHARGSV 0 0.0011; Func[void __DoEWeaponDeathPrototype(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0010
STOREV 0 0.0009
STOREV 0 0.0008
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0011; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR D2; InlineFunc[untyped Floor(untyped)] Body
STORE D2 0.0010
SETR D2 EWPNCOUNT; for() #159 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #159 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8409 ==; for() #159 TestFail?
LOAD D2 0.0003; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #159 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0009
LOAD D2 0.0009; if() #560 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 768
COMPAREV D2 768
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8405 !=; Test 'if' AND continue 1; AND if() #560 Body
LOAD D2 0.0009; if() #561 Test
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8409 !=; Test 'if' AND break 1; AND if() #561 Body
LOAD D2 0.0003; for() #159 Body End AND for() #159 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 8369; for() #159 End
LOAD D2 0.0003; if() #562 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8435 ==; Test 'if'
ALLOCATEMEMV D2 43 0; if() #562 Body Start
WRITEPODSTRING D2 "ghost.zh: Failed to find prototype eweapon"
STORE D2 0
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 8757; return (Void)
LOAD D3 0
DEALLOCATEMEMR D3; if() #562 Body End
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MODV D2 10
SUBV D2 6.2832
STORE D2 0.0005
LOAD D2 0.0011
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0010
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 10000
STORE D2 0.0004
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 100
RSHIFTV D2 0
STORE D2 0.0008
LOAD D2 0.0011; if() #295 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8525 ==; Test 'if'
LOAD D2 0.0011; if() #295 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
GOTO 8537; if() #295 Body End
LOAD D2 0.0011; if() #295 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
STORE D2 0.0006; if() #295 Else End
LOAD D2 0.0008; if() #296 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8590 ==; Test 'if'
STOREV 0 0.0001; for() #160 setup AND if() #296 Body Start
LOAD D2 0.0001; for() #160 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8581 ==; for() #160 TestFail?
PUSHR D4; for() #160 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
MULTV D2 6.2832
SETV D2 6.2832
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 1.0532; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #160 Body End
LOAD D2 0.0001; for() #160 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 8543; for() #160 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 8748; if() #296 Body End
LOAD D2 0.0008; if() #297 Test AND if() #296 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8630 ==; Test 'if'
STOREV 0 0.0001; for() #161 setup AND if() #297 Body Start
LOAD D2 0.0001; for() #161 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8621 ==; for() #161 TestFail?
PUSHR D4; for() #161 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D3 31416; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
DIVV D2 5000
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 1.0532; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #161 Body End
LOAD D2 0.0001; for() #161 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 8596; for() #161 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 8748; if() #297 Body End
LOAD D2 0.0004; if() #298 Test AND if() #297 Else Start
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8703 ==; Test 'if'
SETV D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND if() #298 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2
LOAD D2 0.0005
DIVV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
STOREV 0 0; for() #162 setup
LOAD D2 0; for() #162 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8740 ==; for() #162 TestFail?
PUSHR D4; for() #162 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 1.0532; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #162 Body End
LOAD D2 0; for() #162 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 8665; for() #162 End
GOTO 8740; if() #298 Body End
LOAD D2 0.0004; if() #563 Test AND if() #298 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8740 ==; Test 'if'
PUSHR D4; if() #563 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 1.0532; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; if() #563 Body End
LOAD D2 0.0009; if() #298 Else End AND InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body AND if() #297 Else End
SETV D2 0; if() #296 Else End
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #290 Test
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 8854 ==; Test 'if'
PUSHR D4; if() #290 Body Start
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.1354; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.3066; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
SETV D2 300
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 8930; if() #290 Body End
LOAD D2 0.0001; if() #291 Test AND if() #290 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 8879 ==; Test 'if'
LOAD D2 0.0001; if() #291 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.3066; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
GOTO 8930; if() #291 Body End
LOAD D2 0.0001; if() #291 Else Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #292 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8900 ==; Test 'if'
PUSHR D4; if() #292 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.3784; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 8930; if() #292 Body End
LOAD D2 0; if() #293 Test AND if() #292 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8912 ==; Test 'if'
PUSHR D4; if() #293 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.3784; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 8930; if() #293 Body End
LOAD D2 0; if() #294 Test AND if() #293 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8924 ==; Test 'if'
PUSHR D4; if() #294 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.3784; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 8930; if() #294 Body End
PUSHR D4; if() #294 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.3784; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #294 Else End
POPARGS D5 0.0002; if() #293 Else End AND if() #292 Else End AND if() #291 Else End AND if() #290 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathExplode(eweapon)] Body Start
PUSHR D4
PUSHV 135; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body Start
PUSHR D4
PUSHV 136; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #149 setup
LOAD D2 0; for() #149 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9067 ==; for() #149 TestFail?
PUSHR D4; for() #149 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #149 Body End
LOAD D2 0; for() #149 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9023; for() #149 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #148 setup
LOAD D2 0; for() #148 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9125 ==; for() #148 TestFail?
PUSHR D4; for() #148 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #148 Body End
LOAD D2 0; for() #148 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9081; for() #148 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #288 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9190 ==; Test 'if'
STOREV 0 0; for() #150 setup AND if() #288 Body Start
LOAD D2 0; for() #150 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9235 ==; for() #150 TestFail?
PUSHR D4; for() #150 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #150 Body End
LOAD D2 0; for() #150 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9145; for() #150 End
GOTO 9235; if() #288 Body End
STOREV 4 0; for() #151 setup AND if() #288 Else Start
LOAD D2 0; for() #151 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9235 ==; for() #151 TestFail?
PUSHR D4; for() #151 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #151 Body End
LOAD D2 0; for() #151 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9191; for() #151 End
SETV D2 0; if() #288 Else End
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #156 setup
LOAD D2 0; for() #156 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9293 ==; for() #156 TestFail?
PUSHR D4; for() #156 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #156 Body End
LOAD D2 0; for() #156 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9249; for() #156 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #153 setup
LOAD D2 0; for() #153 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9351 ==; for() #153 TestFail?
PUSHR D4; for() #153 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #153 Body End
LOAD D2 0; for() #153 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9307; for() #153 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #152 setup
LOAD D2 0; for() #152 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9411 ==; for() #152 TestFail?
PUSHR D4; for() #152 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #152 Body End
LOAD D2 0; for() #152 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9367; for() #152 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #289 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9478 ==; Test 'if'
STOREV 0 0; for() #154 setup AND if() #289 Body Start
LOAD D2 0; for() #154 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9523 ==; for() #154 TestFail?
PUSHR D4; for() #154 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #154 Body End
LOAD D2 0; for() #154 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9433; for() #154 End
GOTO 9523; if() #289 Body End
STOREV 4 0; for() #155 setup AND if() #289 Else Start
LOAD D2 0; for() #155 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9523 ==; for() #155 TestFail?
PUSHR D4; for() #155 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #155 Body End
LOAD D2 0; for() #155 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9479; for() #155 End
SETV D2 13; if() #289 Else End AND InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #157 setup
LOAD D2 0; for() #157 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9583 ==; for() #157 TestFail?
PUSHR D4; for() #157 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #157 Body End
LOAD D2 0; for() #157 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9539; for() #157 End
STOREV 4 0; for() #158 setup
LOAD D2 0; for() #158 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9628 ==; for() #158 TestFail?
PUSHR D4; for() #158 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #158 Body End
LOAD D2 0; for() #158 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9584; for() #158 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[npc screendata::CreateNPC(int)] Params Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[npc screendata::CreateNPC(int)] Params End
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body Start
PUSHR D4
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2694; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[void __DoEWeaponDeathRunScript(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
PUSHR D4
CALLFUNC 0.2638; UsrFunc[int FindUnusedFFC()] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #564 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9764 ==; Test 'if'
SETV D2 0; if() #564 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 9903; return (Void) AND if() #564 Body End
LOAD D2 0.0004; InlineFunc[ffc screendata::LoadFFC(int)] Params
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0003
SETR D2 EWPNCOUNT; for() #163 setup
STORE D2 0
LOAD D2 0; for() #163 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9806 ==; for() #163 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #163 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0002
LOAD D2 0.0002; if() #565 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 768
COMPAREV D2 512
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9802 !=; Test 'if' AND continue 1; AND if() #565 Body
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0002
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFSPRITE
PUSHVARGR SPRITE_MISCD; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001; for() #163 Body End
LOAD D2 0; for() #163 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 9769; for() #163 End
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 3
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0005
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 1024
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.2188; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.2211; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
POPARGS D5 0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void UpdateEWeapons()] Body Start
SETR D4 SP2
STOREV 0 0.0001
SETR D2 LINKACTION; unless() #281 Test
COMPAREV D2 4
GOTOCMP 9922 ==
SETR D2 LINKACTION
COMPAREV D2 5
GOTOCMP 9922 ==
SETR D2 LINKACTION
COMPAREV D2 14
GOTOCMP 9922 ==
SETR D2 LINKACTION
COMPAREV D2 15
GOTOCMP 9922 ==
SETV D2 0
GOTO 9923
SETV D2 1
COMPAREV D2 0
GOTOCMP 9972 !=; Test 'unless'
SETR D2 EWPNCOUNT; for() #143 setup AND unless() #281 Body Start
STORE D2 0
LOAD D2 0; for() #143 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10018 ==; for() #143 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #143 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #541 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 9959 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 9959 !=
SETV D2 0
GOTO 9960
SETV D2 1
COMPAREV D2 0
GOTOCMP 9967 !=; Test 'if' AND continue 1; AND if() #541 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void UpdateEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void UpdateEWeapon(eweapon)] Params End
CALLFUNC 0.3888; UsrFunc[void UpdateEWeapon(eweapon)] Call
POP D4; for() #143 Body End
LOAD D2 0; for() #143 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 9927; for() #143 End
GOTO 10018; unless() #281 Body End
SETR D2 EWPNCOUNT; for() #144 setup AND unless() #281 Else Start
STORE D2 0
LOAD D2 0; for() #144 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10018 ==; for() #144 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #144 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #542 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 10006 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 10006 !=
SETV D2 0
GOTO 10007
SETV D2 1
COMPAREV D2 0
GOTOCMP 10014 !=; Test 'if' AND continue 1; AND if() #542 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params End
CALLFUNC 1.0020; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Call
POP D4; for() #144 Body End
LOAD D2 0; for() #144 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 9974; for() #144 End
POPARGS D5 0.0002; unless() #281 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0 0.0002; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002; if() #712 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 10047 ==; Test 'if'
LOAD D2 0.0002; if() #713 Test AND if() #712 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10047 ==; Test 'if'
PUSHR D4; if() #713 Body Start
LOAD D2 0.0002; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.2319; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #713 Body End
LOAD D2 0.0002; if() #712 Body End AND if() #397 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 10239 ==; Test 'if'
SETV D2 1000; if() #397 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0002; if() #714 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 10087 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 10087 ==
SETV D2 1
GOTO 10088
SETV D2 0
COMPAREV D2 0
GOTOCMP 10296 !=; Test 'if' AND return (Void) AND if() #714 Body
STOREV 0 0.0001
LOAD D2 0.0002; if() #398 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 10104 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int RadtoDeg(int)] Params Start AND if() #398 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 10170; if() #398 Body End
PUSHR D4; if() #398 Else Start
LOAD D2 0.0002; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.3502; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #399 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10120 ==; Test 'if'
SETV D2 -90; if() #399 Body Start
STORE D2 0.0001
GOTO 10170; if() #399 Body End
LOAD D2 0; if() #400 Test AND if() #399 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10128 ==; Test 'if'
SETV D2 -45; if() #400 Body Start
STORE D2 0.0001
GOTO 10170; if() #400 Body End
LOAD D2 0; if() #401 Test AND if() #400 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10136 ==; Test 'if'
SETV D2 0; if() #401 Body Start
STORE D2 0.0001
GOTO 10170; if() #401 Body End
LOAD D2 0; if() #402 Test AND if() #401 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10144 ==; Test 'if'
SETV D2 45; if() #402 Body Start
STORE D2 0.0001
GOTO 10170; if() #402 Body End
LOAD D2 0; if() #403 Test AND if() #402 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10152 ==; Test 'if'
SETV D2 90; if() #403 Body Start
STORE D2 0.0001
GOTO 10170; if() #403 Body End
LOAD D2 0; if() #404 Test AND if() #403 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10160 ==; Test 'if'
SETV D2 135; if() #404 Body Start
STORE D2 0.0001
GOTO 10170; if() #404 Body End
LOAD D2 0; if() #405 Test AND if() #404 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10168 ==; Test 'if'
SETV D2 180; if() #405 Body Start
STORE D2 0.0001
GOTO 10170; if() #405 Body End
SETV D2 -135; if() #405 Else Start
STORE D2 0.0001; if() #405 Else End
STOREV 0 0; if() #404 Else End AND if() #403 Else End AND if() #402 Else End AND if() #401 Else End AND if() #400 Else End AND if() #399 Else End AND if() #398 Else End
LOAD D2 0.0001; if() #406 Test
COMPAREV D2 0
GOTOCMP 10179 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 10179 >=
SETV D2 1
GOTO 10180
SETV D2 0
COMPAREV D2 0
GOTOCMP 10185 ==; Test 'if'
SETV D2 0; if() #406 Body Start
STORE D2 0
GOTO 10187; if() #406 Body End
SETV D2 2; if() #406 Else Start
STORE D2 0; if() #406 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
PUSHARGSV 1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 10296; if() #397 Body End
LOAD D2 0.0002; if() #715 Test AND if() #397 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 10279 ==; Test 'if'
SETR D2 GD26; if() #407 Test AND if() #715 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 10270 ==; Test 'if'
SETV D2 1000; if() #407 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
GOTO 10279; if() #407 Body End
SETV D2 0; if() #407 Else Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #407 Else End
LOAD D2 0.0002; if() #715 Body End AND if() #716 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 10296 ==; Test 'if'
PUSHR D4; if() #716 Body Start
LOAD D2 0.0002; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.3176; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #716 Body End
POPARGS D5 0.0003; if() #397 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body End
SETR D4 SP2; Func[void UpdateGhostZH1()] Body Start
PUSHR D4
CALLFUNC 0.9905; UsrFunc[void UpdateEWeapons()] Call
PEEK D4
CALLFUNC 0.2259; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK D4
CALLFUNC 1.0307; UsrFunc[void UpdateGhostZHData1()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR D4 SP2
SETR D2 CURDMAP
LSHIFTV D2 8
PUSHR D2
SETR D2 CURDSCR
POP D3
ADDR D2 D3
STORE D2 0
SETR D2 GD26; if() #282 Test
PUSHR D2
POP D0
READPODARRAYV D2 7
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 10340 ==; Test 'if'
SETV D2 0; if() #282 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
GOTO 10358; if() #282 Body End
SETR D2 GD26; if() #543 Test AND if() #282 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10358 ==; Test 'if'
SETR D2 GD26; if() #543 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 6
SUBV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #543 Body End
POP D5; if() #282 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR D4 SP2; Func[void UpdateGhostZH2()] Body Start
PUSHR D4
CALLFUNC 0.2385; UsrFunc[void DrawGhostFFCs()] Call
PEEK D4
CALLFUNC 0.1398; UsrFunc[void AutoGhost()] Call
PEEK D4
CALLFUNC 1.0369; UsrFunc[void UpdateGhostZHData2()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR D4 SP2; Func[void UpdateGhostZHData2()] Body Start
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 1
ADDV D2 1
MODV D2 8
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETR D2 GD26; if() #283 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10401 ==; Test 'if'
SETR D2 GD26; if() #283 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ORV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 10411; if() #283 Body End
SETR D2 GD26; if() #283 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 -2
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #283 Else End
SETR D2 GD26; if(true) #544 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 3
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26; if() #545 Test
PUSHR D2
POP D0
READPODARRAYV D2 3
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 10446 ==; Test 'if'
SETV D2 0; if() #545 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #545 Body End
SETR D2 GD26; if(true) #546 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 5
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26; if() #547 Test
PUSHR D2
POP D0
READPODARRAYV D2 5
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 10481 ==; Test 'if'
SETV D2 0; if() #547 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2; if() #547 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR D4 SP2; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOAD D2 0.0001; if() #659 Test
COMPAREV D2 97
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 10495 ==; Test 'if'
LOAD D2 0.0001; if() #660 Test AND if() #659 Body Start
COMPAREV D2 122
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 10495 ==; Test 'if'
SETV D2 1; return Start AND if() #660 Body Start
GOTO 10530; return End AND if() #660 Body End
LOAD D2 0.0001; if() #659 Body End AND if() #661 Test
COMPAREV D2 65
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 10507 ==; Test 'if'
LOAD D2 0.0001; if() #662 Test AND if() #661 Body Start
COMPAREV D2 90
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 10507 ==; Test 'if'
SETV D2 1; return Start AND if() #662 Body Start
GOTO 10530; return End AND if() #662 Body End
LOAD D2 0.0001; if() #661 Body End AND if() #663 Test
COMPAREV D2 95
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10514 ==; Test 'if'
SETV D2 1; return Start AND if() #663 Body Start
GOTO 10530; return End AND if() #663 Body End
LOAD D2 0; unless() #664 Test
COMPAREV D2 0
GOTOCMP 10529 !=; Test 'unless'
LOAD D2 0.0001; if() #665 Test AND unless() #664 Body Start
COMPAREV D2 48
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 10529 ==; Test 'if'
LOAD D2 0.0001; if() #666 Test AND if() #665 Body Start
COMPAREV D2 57
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 10529 ==; Test 'if'
SETV D2 1; return Start AND if() #666 Body Start
GOTO 10530; return End AND if() #666 Body End
SETV D2 0; if() #665 Body End AND unless() #664 Body End AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(eweapon, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params End
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0004; if() #556 Test
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10564 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #556 Body Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #556 Body End
LOAD D2 0.0004; if() #286 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10700 ==; Test 'if'
SETV D2 3; if() #286 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
GOTO 10720; if() #286 Body End
LOAD D2 0.0003; if() #286 Else Start
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #286 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.3066; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004; if() #287 Test
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
GOTOCMP 10857 !=
LOAD D2 0.0004
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -1
GOTOCMP 10857 !=
SETV D2 1
GOTO 10858
SETV D2 0
COMPAREV D2 0
GOTOCMP 10877 ==; Test 'if'
PUSHR D4; if() #287 Body Start
LOAD D2 0; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params Start
PUSHR D2; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params End
CALLFUNC 0.3666; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 10895; if() #287 Body End
LOAD D2 0.0004; if() #287 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #287 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 -257
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #557 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 11008 ==; Test 'if'
SETV D2 0; if() #557 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #557 Body End
LOAD D2 0; if() #558 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 11025 ==; Test 'if'
PUSHR D4; if() #558 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.3176; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #558 Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __CopyEWeapon(eweapon, int, int, int)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #183 setup
LOAD D2 0; for() #183 LoopTest
PUSHR D2
LOAD D2 0.0001
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 11075 ==; for() #183 TestFail?
LOAD D2 0.0006; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #727 Test AND for() #183 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 11071 ==; Test 'if'
SETV D2 51; if() #728 Test AND if() #727 Body Start
PUSHR D2
POP D0
SETR D2 SCREEN_FLAG
COMPAREV D2 0
GOTOCMP 11071 ==; Test 'if'
SETV D2 1; return Start AND if() #728 Body Start
GOTO 11076; return End AND if() #728 Body End
LOAD D2 0; if() #727 Body End AND for() #183 Body End AND for() #183 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 11030; for() #183 End
SETV D2 0; return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End
PUSHV 0; Func[void HealthBar_CapString(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int SizeOfArray(int[])] Params AND for() #220 setup
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #220 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 11113 ==; for() #220 TestFail?
LOAD D2 0.0001; if() #815 Test AND for() #220 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 32
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11109 ==; Test 'if'
SETV D2 0; if() #815 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 11113; return (Void) AND if() #815 Body End
LOAD D2 0; for() #220 Body End AND for() #220 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 11084; for() #220 End
POPARGS D5 0.0002
RETURNFUNC; Func[void HealthBar_CapString(int)] Body End
PUSHARGSV 0 0.0006; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 8 0.0005
LOAD D2 0.0006
ADDV D2 16
STORE D2 0.0004
STOREV 247 0.0003
LOAD D2 0.0006
ADDV D2 19
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 8
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0009; if() #816 Test
COMPAREV D2 0
GOTOCMP 11180 <=
SETV D2 1
GOTO 11181
SETV D2 0
COMPAREV D2 0
GOTOCMP 11220 ==; Test 'if'
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #816 Body Start
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.2234; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
PUSHR D2
PUSHV 135
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #816 Body End
LOAD D2 0.0011; if() #817 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11262 ==; Test 'if'
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #817 Body Start
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.2234; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
PUSHR D2
PUSHV 134
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #817 Body End
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 8
PUSHV 1
PUSHARGSV 0 0.0004
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0012; if() #818 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11297 ==; Test 'if'
PUSHR D4; if() #818 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
ADDV D2 -6
PUSHR D2
PUSHV 2
PUSHV 12
PUSHV 8
PUSHV 0
LOAD D2 0.0012
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 1.1318; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4; if() #818 Body End
LOAD D2 0.0007; if() #820 Test AND if(true) #819 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11316 ==; Test 'if'
PUSHR D4; if() #820 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
ADDV D2 -6
PUSHR D2
PUSHV 2
PUSHV 12
PUSHV 8
LOAD D2 0.0008
PUSHR D2; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.1415; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Call
POP D4; if() #820 Body End
POPARGS D5 0.0013
RETURNFUNC; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body Start
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 8 0
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0002; if() #821 Test
COMPAREV D2 10000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 11441 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #821 Body Start
DIVV D2 10000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #821 Body End
LOAD D2 0.0002; if() #822 Test
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 11462 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #822 Body Start
DIVV D2 1000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #822 Body End
LOAD D2 0.0002; if() #823 Test
COMPAREV D2 100
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 11483 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #823 Body Start
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #823 Body End
LOAD D2 0.0002; if() #824 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 11504 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #824 Body Start
DIVV D2 10; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #824 Body End
LOAD D2 0.0002
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 1.1318; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0009
RETURNFUNC; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0002
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND for() #221 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #221 LoopTest
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 11712 ==; for() #221 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #221 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0
LOAD D2 0; if() #825 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11588 ==; Test 'if'
LOAD D2 0.0002; if() #825 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #825 Body End
LOAD D2 0; if() #826 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11612 ==; Test 'if'
LOAD D2 0.0002; if() #826 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #826 Body End
LOAD D2 0; if() #827 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11636 ==; Test 'if'
LOAD D2 0.0002; if() #827 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #827 Body End
LOAD D2 0; if() #828 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11660 ==; Test 'if'
LOAD D2 0.0002; if() #828 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #828 Body End
LOAD D2 0; if() #829 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11684 ==; Test 'if'
LOAD D2 0.0002; if() #829 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #829 Body End
LOAD D2 0; if() #830 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11708 ==; Test 'if'
LOAD D2 0.0002; if() #830 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #830 Body End
LOAD D2 0.0001; for() #221 Body End AND for() #221 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 11554; for() #221 End
LOAD D2 0.0002; return Start
POPARGS D5 0.0009; return End
RETURNFUNC; Func[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Body End
PUSHV 0; Func[void HealthBar_CapString(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int SizeOfArray(int[])] Params AND for() #223 setup
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #223 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 11750 ==; for() #223 TestFail?
LOAD D2 0.0001; if() #841 Test AND for() #223 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 32
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11746 ==; Test 'if'
SETV D2 0; if() #841 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 11750; return (Void) AND if() #841 Body End
LOAD D2 0; for() #223 Body End AND for() #223 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 11721; for() #223 End
POPARGS D5 0.0002
RETURNFUNC; Func[void HealthBar_CapString(int)] Body End
PUSHARGSV 0 0.0002; Func[bool HealthBar_CheckDone(ffc)] Body Start
SETR D4 SP2
STOREV 1 0.0001; for() #224 setup
LOAD D2 0.0001; for() #224 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 11794 ==; for() #224 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #224 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #842 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11790 ==; Test 'if'
LOAD D2 0; if() #843 Test AND if() #842 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11790 ==; Test 'if'
SETV D2 0; return Start AND if() #843 Body Start
GOTO 11795; return End AND if() #843 Body End
LOAD D2 0.0001; if() #842 Body End AND for() #224 Body End AND for() #224 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 11755; for() #224 End
SETV D2 1; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool HealthBar_CheckDone(ffc)] Body End
PUSHARGSV 0 0.0006; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 8 0.0005
LOAD D2 0.0006
ADDV D2 16
STORE D2 0.0004
STOREV 247 0.0003
LOAD D2 0.0006
ADDV D2 19
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 8
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0009; if() #844 Test
COMPAREV D2 0
GOTOCMP 11862 <=
SETV D2 1
GOTO 11863
SETV D2 0
COMPAREV D2 0
GOTOCMP 11902 ==; Test 'if'
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #844 Body Start
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.2234; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
PUSHR D2
PUSHV 135
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #844 Body End
LOAD D2 0.0011; if() #845 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11944 ==; Test 'if'
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #845 Body Start
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.2234; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
PUSHR D2
PUSHV 134
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #845 Body End
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 8
PUSHV 1
PUSHARGSV 0 0.0004
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0012; if() #846 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11979 ==; Test 'if'
PUSHR D4; if() #846 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
ADDV D2 -6
PUSHR D2
PUSHV 2
PUSHV 12
PUSHV 8
PUSHV 0
LOAD D2 0.0012
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 1.2000; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4; if() #846 Body End
LOAD D2 0.0007; if() #848 Test AND if(true) #847 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11998 ==; Test 'if'
PUSHR D4; if() #848 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
ADDV D2 -6
PUSHR D2
PUSHV 2
PUSHV 12
PUSHV 8
LOAD D2 0.0008
PUSHR D2; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.2097; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Call
POP D4; if() #848 Body End
POPARGS D5 0.0013
RETURNFUNC; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body Start
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 8 0
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0002; if() #849 Test
COMPAREV D2 10000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 12123 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #849 Body Start
DIVV D2 10000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #849 Body End
LOAD D2 0.0002; if() #850 Test
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 12144 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #850 Body Start
DIVV D2 1000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #850 Body End
LOAD D2 0.0002; if() #851 Test
COMPAREV D2 100
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 12165 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #851 Body Start
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #851 Body End
LOAD D2 0.0002; if() #852 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 12186 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #852 Body Start
DIVV D2 10; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #852 Body End
LOAD D2 0.0002
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 1.2000; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0009
RETURNFUNC; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[npc HealthBar_GetNPC(int, int)] Body Start
SETR D4 SP2
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND for() #225 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #225 LoopTest
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 12271 ==; for() #225 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #225 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0
LOAD D2 0; if() #853 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12267 ==; Test 'if'
LOAD D2 0.0002; if() #437 Test AND if() #853 Body Start
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 12264 ==; Test 'if'
LOAD D2 0; return Start AND if() #437 Body Start
GOTO 12271; return End
GOTO 12267; if() #437 Body End
LOAD D2 0.0002; if() #437 Else Start
SUBV D2 1
STORE D2 0.0002; if() #437 Else End
LOAD D2 0.0001; if() #853 Body End AND for() #225 Body End AND for() #225 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 12235; for() #225 End
POPARGS D5 0.0004
RETURNFUNC; Func[npc HealthBar_GetNPC(int, int)] Body End
PUSHV 0; Func[void HealthBar_CapString(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int SizeOfArray(int[])] Params AND for() #228 setup
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #228 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 12308 ==; for() #228 TestFail?
LOAD D2 0.0001; if() #864 Test AND for() #228 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 32
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12304 ==; Test 'if'
SETV D2 0; if() #864 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 12308; return (Void) AND if() #864 Body End
LOAD D2 0; for() #228 Body End AND for() #228 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 12279; for() #228 End
POPARGS D5 0.0002
RETURNFUNC; Func[void HealthBar_CapString(int)] Body End
PUSHARGSV 0 0.0003; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 16 0.0002
STOREV 16 0.0001
LOAD D2 0.0002
ADDV D2 224
SUBV D2 1
STORE D2 0
PUSHR D4; if(true) #865 [Opt:AlwaysOn]
PUSHV 6; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 5
PUSHV 52080
PUSHV 52100
PUSHV 52120
PUSHV 52004
PUSHV 52006
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 1.2410; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 6; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 5
PUSHV 52020
PUSHV 52040
PUSHV 52060
PUSHV 52000
PUSHV 52002
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 1.2410; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0009; if() #867 Test AND unless(false) #866 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12385 ==; Test 'if'
PUSHR D4; if() #867 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 -6
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 14
PUSHV 12
PUSHV 8
PUSHV 0
LOAD D2 0.0009
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 1.2640; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4; if() #867 Body End
LOAD D2 0.0004; if() #869 Test AND if(true) #868 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12408 ==; Test 'if'
PUSHR D4; if() #869 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params Start
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
ADDV D2 -6
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 14
PUSHV 12
PUSHV 8
LOAD D2 0.0005
PUSHR D2; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.2737; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Call
POP D4; if() #869 Body End
POPARGS D5 0.0010
RETURNFUNC; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0008; Func[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
LOAD D2 0.0008
DIVV D2 14
STORE D2 0.0004
PUSHR D4
LOAD D2 0.0009; InlineFunc[int Floor(int)] Params Start AND UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
PUSHV 0
PUSHV 14; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.2234; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0004
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
MULTV D2 17
PUSHR D2
PUSHV 0
PUSHV 16; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.2234; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #874 Test
COMPAREV D2 16
GOTOCMP 12469 !=
LOAD D2 0.0009
COMPAREV D2 0
GOTOCMP 12469 <=
LOAD D2 0.0003
COMPAREV D2 0
GOTOCMP 12469 !=
SETV D2 1
GOTO 12470
SETV D2 0
COMPAREV D2 0
GOTOCMP 12474 ==; Test 'if'
SETV D2 15; if() #874 Body Start
STORE D2 0.0001; if() #874 Body End
STOREV 0 0; for() #229 setup
LOAD D2 0; for() #229 LoopTest
COMPAREV D2 14
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12565 ==; for() #229 TestFail?
LOAD D2 0.0017; for() #229 Body Start
STORE D2 0.0007
LOAD D2 0.0016
STORE D2 0.0006
LOAD D2 0.0007; if(false) #443 [Opt:AlwaysOff]
PUSHR D2
LOAD D2 0
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0013
STORE D2 0.0005
LOAD D2 0; if() #444 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12520 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #444 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 12561; if() #444 Body End
LOAD D2 0; if() #445 Test AND if() #444 Else Start
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12546 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #445 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 12561; if() #445 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #445 Else Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 17
SUBV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #445 Else End
LOAD D2 0; if() #444 Else End AND for() #229 Body End AND for() #229 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 12475; for() #229 End
LOAD D2 0.0009; if() #447 Test AND if(false) #446 [Opt:AlwaysOff] AND if(true) #876 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12585 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #447 Body Start
PUSHR D2
LOAD D2 0.0017
SUBV D2 16
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 12600; if() #447 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #447 Else Start
PUSHR D2
LOAD D2 0.0017
SUBV D2 16
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0011
ADDV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #447 Else End
LOAD D2 0.0009; if() #448 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12624 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #448 Body Start
PUSHR D2
LOAD D2 0.0017
ADDV D2 224
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0010
ADDV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 12638; if() #448 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #448 Else Start
PUSHR D2
LOAD D2 0.0017
ADDV D2 224
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #448 Else End
POPARGS D5 0.0019
RETURNFUNC; Func[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body Start
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 8 0
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0002; if() #870 Test
COMPAREV D2 10000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 12763 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #870 Body Start
DIVV D2 10000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #870 Body End
LOAD D2 0.0002; if() #871 Test
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 12784 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #871 Body Start
DIVV D2 1000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #871 Body End
LOAD D2 0.0002; if() #872 Test
COMPAREV D2 100
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 12805 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #872 Body Start
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #872 Body End
LOAD D2 0.0002; if() #873 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 12826 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #873 Body Start
DIVV D2 10; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #873 Body End
LOAD D2 0.0002
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 1.2640; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0009
RETURNFUNC; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0002
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND for() #230 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #230 LoopTest
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 13034 ==; for() #230 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #230 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0
LOAD D2 0; if() #877 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12910 ==; Test 'if'
LOAD D2 0.0002; if() #877 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #877 Body End
LOAD D2 0; if() #878 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12934 ==; Test 'if'
LOAD D2 0.0002; if() #878 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #878 Body End
LOAD D2 0; if() #879 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12958 ==; Test 'if'
LOAD D2 0.0002; if() #879 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #879 Body End
LOAD D2 0; if() #880 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12982 ==; Test 'if'
LOAD D2 0.0002; if() #880 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #880 Body End
LOAD D2 0; if() #881 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13006 ==; Test 'if'
LOAD D2 0.0002; if() #881 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #881 Body End
LOAD D2 0; if() #882 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13030 ==; Test 'if'
LOAD D2 0.0002; if() #882 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.3591; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #882 Body End
LOAD D2 0.0001; for() #230 Body End AND for() #230 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 12876; for() #230 End
LOAD D2 0.0002; return Start
POPARGS D5 0.0009; return End
RETURNFUNC; Func[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Body End
PUSHV 0; Func[void HealthBar_CapString(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int SizeOfArray(int[])] Params AND for() #232 setup
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #232 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 13072 ==; for() #232 TestFail?
LOAD D2 0.0001; if() #893 Test AND for() #232 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 32
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 13068 ==; Test 'if'
SETV D2 0; if() #893 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 13072; return (Void) AND if() #893 Body End
LOAD D2 0; for() #232 Body End AND for() #232 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 13043; for() #232 End
POPARGS D5 0.0002
RETURNFUNC; Func[void HealthBar_CapString(int)] Body End
PUSHARGSV 0 0.0002; Func[bool HealthBar_CheckDone(ffc)] Body Start
SETR D4 SP2
STOREV 1 0.0001; for() #233 setup
LOAD D2 0.0001; for() #233 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13116 ==; for() #233 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #233 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #894 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13112 ==; Test 'if'
LOAD D2 0; if() #895 Test AND if() #894 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13112 ==; Test 'if'
SETV D2 0; return Start AND if() #895 Body Start
GOTO 13117; return End AND if() #895 Body End
LOAD D2 0.0001; if() #894 Body End AND for() #233 Body End AND for() #233 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 13077; for() #233 End
SETV D2 1; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool HealthBar_CheckDone(ffc)] Body End
PUSHARGSV 0 0.0003; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 16 0.0002
STOREV 16 0.0001
LOAD D2 0.0002
ADDV D2 224
SUBV D2 1
STORE D2 0
PUSHR D4; if(true) #896 [Opt:AlwaysOn]
PUSHV 6; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 5
PUSHV 52080
PUSHV 52100
PUSHV 52120
PUSHV 52004
PUSHV 52006
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 1.3219; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 6; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 5
PUSHV 52020
PUSHV 52040
PUSHV 52060
PUSHV 52000
PUSHV 52002
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 1.3219; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0009; if() #898 Test AND unless(false) #897 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 13194 ==; Test 'if'
PUSHR D4; if() #898 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 -6
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 14
PUSHV 12
PUSHV 8
PUSHV 0
LOAD D2 0.0009
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 1.3449; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4; if() #898 Body End
LOAD D2 0.0004; if() #900 Test AND if(true) #899 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 13217 ==; Test 'if'
PUSHR D4; if() #900 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params Start
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
ADDV D2 -6
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 14
PUSHV 12
PUSHV 8
LOAD D2 0.0005
PUSHR D2; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params End
CALLFUNC 1.3546; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Call
POP D4; if() #900 Body End
POPARGS D5 0.0010
RETURNFUNC; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0008; Func[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
LOAD D2 0.0008
DIVV D2 14
STORE D2 0.0004
PUSHR D4
LOAD D2 0.0009; InlineFunc[int Floor(int)] Params Start AND UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
PUSHV 0
PUSHV 14; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.2234; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0004
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
MULTV D2 17
PUSHR D2
PUSHV 0
PUSHV 16; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.2234; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #905 Test
COMPAREV D2 16
GOTOCMP 13278 !=
LOAD D2 0.0009
COMPAREV D2 0
GOTOCMP 13278 <=
LOAD D2 0.0003
COMPAREV D2 0
GOTOCMP 13278 !=
SETV D2 1
GOTO 13279
SETV D2 0
COMPAREV D2 0
GOTOCMP 13283 ==; Test 'if'
SETV D2 15; if() #905 Body Start
STORE D2 0.0001; if() #905 Body End
STOREV 0 0; for() #234 setup
LOAD D2 0; for() #234 LoopTest
COMPAREV D2 14
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13374 ==; for() #234 TestFail?
LOAD D2 0.0017; for() #234 Body Start
STORE D2 0.0007
LOAD D2 0.0016
STORE D2 0.0006
LOAD D2 0.0007; if(false) #451 [Opt:AlwaysOff]
PUSHR D2
LOAD D2 0
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0013
STORE D2 0.0005
LOAD D2 0; if() #452 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13329 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #452 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 13370; if() #452 Body End
LOAD D2 0; if() #453 Test AND if() #452 Else Start
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13355 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #453 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 13370; if() #453 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #453 Else Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 17
SUBV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #453 Else End
LOAD D2 0; if() #452 Else End AND for() #234 Body End AND for() #234 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 13284; for() #234 End
LOAD D2 0.0009; if() #455 Test AND if(false) #454 [Opt:AlwaysOff] AND if(true) #907 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 13394 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #455 Body Start
PUSHR D2
LOAD D2 0.0017
SUBV D2 16
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 13409; if() #455 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #455 Else Start
PUSHR D2
LOAD D2 0.0017
SUBV D2 16
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0011
ADDV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #455 Else End
LOAD D2 0.0009; if() #456 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13433 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #456 Body Start
PUSHR D2
LOAD D2 0.0017
ADDV D2 224
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0010
ADDV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 13447; if() #456 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #456 Else Start
PUSHR D2
LOAD D2 0.0017
ADDV D2 224
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #456 Else End
POPARGS D5 0.0019
RETURNFUNC; Func[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body Start
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 8 0
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0002; if() #901 Test
COMPAREV D2 10000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 13572 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #901 Body Start
DIVV D2 10000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #901 Body End
LOAD D2 0.0002; if() #902 Test
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 13593 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #902 Body Start
DIVV D2 1000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #902 Body End
LOAD D2 0.0002; if() #903 Test
COMPAREV D2 100
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 13614 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #903 Body Start
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #903 Body End
LOAD D2 0.0002; if() #904 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 13635 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #904 Body Start
DIVV D2 10; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #904 Body End
LOAD D2 0.0002
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 1.3449; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0009
RETURNFUNC; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[npc HealthBar_GetNPC(int, int)] Body Start
SETR D4 SP2
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND for() #235 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #235 LoopTest
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 13720 ==; for() #235 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #235 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0
LOAD D2 0; if() #908 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13716 ==; Test 'if'
LOAD D2 0.0002; if() #457 Test AND if() #908 Body Start
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13713 ==; Test 'if'
LOAD D2 0; return Start AND if() #457 Body Start
GOTO 13720; return End
GOTO 13716; if() #457 Body End
LOAD D2 0.0002; if() #457 Else Start
SUBV D2 1
STORE D2 0.0002; if() #457 Else End
LOAD D2 0.0001; if() #908 Body End AND for() #235 Body End AND for() #235 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 13684; for() #235 End
POPARGS D5 0.0004
RETURNFUNC; Func[npc HealthBar_GetNPC(int, int)] Body End
