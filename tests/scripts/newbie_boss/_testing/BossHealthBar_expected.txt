stderr:

Compiling 'BossHealthBar.z'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
BossHealthBar.z Line 233 @ Columns 7-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

231    void HealthBar_CapString(int str){
232        for(int i=SizeOfArray(str)-1; i>=0; i--){
233            if(str[i]>32){
                  ^~~~~~


BossHealthBar.z Line 234 @ Columns 5-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

232    for(int i=SizeOfArray(str)-1; i>=0; i--){
233        if(str[i]>32){
234            str[i+1] = 0;
               ^~~~~~~~


BossHealthBar.z Line 405 @ Columns 7-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

403    void HealthBar_CapString(int str){
404        for(int i=SizeOfArray(str)-1; i>=0; i--){
405            if(str[i]>32){
                  ^~~~~~


BossHealthBar.z Line 406 @ Columns 5-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

404    for(int i=SizeOfArray(str)-1; i>=0; i--){
405        if(str[i]>32){
406            str[i+1] = 0;
               ^~~~~~~~


BossHealthBar.z Line 699 @ Columns 7-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

697    void HealthBar_CapString(int str){
698        for(int i=SizeOfArray(str)-1; i>=0; i--){
699            if(str[i]>32){
                  ^~~~~~


BossHealthBar.z Line 700 @ Columns 5-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

698    for(int i=SizeOfArray(str)-1; i>=0; i--){
699        if(str[i]>32){
700            str[i+1] = 0;
               ^~~~~~~~


BossHealthBar.z Line 928 @ Columns 7-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

926    void HealthBar_CapString(int str){
927        for(int i=SizeOfArray(str)-1; i>=0; i--){
928            if(str[i]>32){
                  ^~~~~~


BossHealthBar.z Line 929 @ Columns 5-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

927    for(int i=SizeOfArray(str)-1; i>=0; i--){
928        if(str[i]>32){
929            str[i+1] = 0;
               ^~~~~~~~


Pass 5: Checking code paths
BossHealthBar.z Line 155 @ Columns 6-22 - Warning S101: Function 'HealthBar_GetNPC' is not void, and should return a value!

153    }
154    //Returns the nth enemy with a certain ID on the screen
155    npc HealthBar_GetNPC(int id, int extra){
           ^~~~~~~~~~~~~~~~


BossHealthBar.z Line 565 @ Columns 6-22 - Warning S101: Function 'HealthBar_GetNPC' is not void, and should return a value!

563    }
564    //Returns the nth enemy with a certain ID on the screen
565    npc HealthBar_GetNPC(int id, int extra){
           ^~~~~~~~~~~~~~~~


BossHealthBar.z Line 155 @ Columns 6-22 - Warning S101: Function 'HealthBar_GetNPC' is not void, and should return a value!

153    }
154    //Returns the nth enemy with a certain ID on the screen
155    npc HealthBar_GetNPC(int id, int extra){
           ^~~~~~~~~~~~~~~~


BossHealthBar.z Line 565 @ Columns 6-22 - Warning S101: Function 'HealthBar_GetNPC' is not void, and should return a value!

563    }
564    //Returns the nth enemy with a certain ID on the screen
565    npc HealthBar_GetNPC(int id, int extra){
           ^~~~~~~~~~~~~~~~


Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [
    {
      "range": {
        "start": {
          "line": 232,
          "character": 6
        },
        "end": {
          "line": 232,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 233,
          "character": 4
        },
        "end": {
          "line": 233,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 404,
          "character": 6
        },
        "end": {
          "line": 404,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 405,
          "character": 4
        },
        "end": {
          "line": 405,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 698,
          "character": 6
        },
        "end": {
          "line": 698,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 699,
          "character": 4
        },
        "end": {
          "line": 699,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 927,
          "character": 6
        },
        "end": {
          "line": 927,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 928,
          "character": 4
        },
        "end": {
          "line": 928,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 154,
          "character": 5
        },
        "end": {
          "line": 154,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S101: Function 'HealthBar_GetNPC' is not void, and should return a value!"
    },
    {
      "range": {
        "start": {
          "line": 564,
          "character": 5
        },
        "end": {
          "line": 564,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S101: Function 'HealthBar_GetNPC' is not void, and should return a value!"
    },
    {
      "range": {
        "start": {
          "line": 154,
          "character": 5
        },
        "end": {
          "line": 154,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S101: Function 'HealthBar_GetNPC' is not void, and should return a value!"
    },
    {
      "range": {
        "start": {
          "line": 564,
          "character": 5
        },
        "end": {
          "line": 564,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S101: Function 'HealthBar_GetNPC' is not void, and should return a value!"
    }
  ],
  "metadata": {
    "currentFileSymbols": 181,
    "symbols": 369,
    "identifiers": 1547,
    "elided": true
  }
}

zasm:

PUSHV 0; void run() Body Start
SETR D4 SP2
PUSHR D4
CALLFUNC 0.2416; UsrFunc[void StartGhostZH()] Call
POP D4
PUSHR D4; while(true) #8 Body [Opt:AlwaysOn] Start
CALLFUNC 0.8831; UsrFunc[void UpdateGhostZH1()] Call
POP D4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR D4
CALLFUNC 0.8893; UsrFunc[void UpdateGhostZH2()] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 6; while() #8 End AND [Opt:NeverRet] AND void run() Body End
SETR D4 SP2; Func[int RadianAngle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR D4 SP2; Func[int Randf(int)] Body Start
SETV D2 0; InlineFunc[long randgen::LRand(long)] Params Start AND return Start
PUSHR D2
LOAD D2 0; InlineFunc[long randgen::LRand(long)] Params End
POP REFRNG; InlineFunc[long randgen::LRand(long)] Body Start
RNGLRAND2 D2; InlineFunc[long randgen::LRand(long)] Body End
POP D5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void AutoGhost()] Body Start
SETR D4 SP2
SETR D2 GD26; if() #11 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
GOTOCMP 435 !=; Test 'if' AND return (Void) AND if() #11 Body
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
SETR D2 NPCCOUNT; for() #2 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #2 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 435 ==; for() #2 TestFail?
LOAD D2 0.0003; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #2 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
LOAD D2 0.0006; if() #12 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 431 !=; Test 'if' AND continue 1; AND if() #12 Body
LOAD D2 0.0006; if() #13 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 431 !=; Test 'if' AND continue 1; AND if() #13 Body
LOAD D2 0.0006; if() #14 Test AND if(false) #13 [Opt:AlwaysOff]
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 431 !=; Test 'if' AND continue 1; AND if() #14 Body
LOAD D2 0.0006; unless() #15 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 431 ==; Test 'unless' AND continue 1; AND unless() #15 Body
LOAD D2 0.0006; unless() #16 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 431 ==; Test 'unless' AND continue 1; AND unless() #16 Body
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0006; if(false) #14 [Opt:AlwaysOff]
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0002
LOAD D2 0.0002; if() #17 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 166 ==; Test 'if'
ALLOCATEMEMV D2 2 0; if() #17 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0006; UsrFunc[int __AutoGhostParseName(npc, int[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int __AutoGhostParseName(npc, int[])] Params End
CALLFUNC 0.0437; UsrFunc[int __AutoGhostParseName(npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0002
LOAD D3 0
DEALLOCATEMEMR D3; if() #17 Body End
LOAD D2 0.0002; if() #18 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 185 ==; Test 'if'
ALLOCATEMEMV D2 47 0; if() #18 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, script <= 0\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0737; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 431; continue 1; AND if() #18 Body End
LOAD D2 0.0002; if() #19 Test
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 204 ==; Test 'if'
ALLOCATEMEMV D2 48 0; if() #19 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, script > 511\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0737; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 431; continue 1; AND if() #19 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR D2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.0788; UsrFunc[int FindUnusedFFC(int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0005; unless() #20 Test
COMPAREV D2 0
GOTOCMP 227 !=; Test 'unless'
ALLOCATEMEMV D2 52 0; unless() #20 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, no ffc available\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0737; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 431; continue 1; AND unless() #20 Body End
LOAD D2 0.0005; InlineFunc[ffc screendata::LoadFFC(int)] Params
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0004
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
SETV D2 1; if(true) #21 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0001; if() #22 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 401 ==; Test 'if'
LOAD D2 0.0001; if() #23 Test AND if() #22 Body Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 401 ==; Test 'if'
SETV D2 3; if() #23 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
SETV D2 1024
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #23 Body End
LOAD D2 0.0001; if() #22 Body End AND if() #15 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 419 ==; Test 'if'
SETV D2 1; if() #15 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 431; if() #15 Body End
LOAD D2 0.0001; if() #15 Else Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #15 Else End
LOAD D2 0.0003; for() #2 Body End AND for() #2 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 73; for() #2 End
POPARGS D5 0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0 0.0009; Func[int __AutoGhostParseName(npc, int[])] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 64 0
STORE D2 0.0008
ALLOCATEMEMV D2 64 0
STORE D2 0.0007
SETV D2 1
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End
STOREV 0 0.0006; for() #143 setup
LOAD D2 0.0006; for() #143 LoopTest
COMPAREV D2 63
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 675 ==; for() #143 TestFail?
LOAD D2 0.0008; if() #555 Test AND for() #143 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 64
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 671 ==; Test 'if'
LOAD D2 0.0008; if() #555 Body Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0005
PUSHR D4; if() #293 Test
LOAD D2 0.0005; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.9015; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 578 ==; Test 'if'
STOREV 0 0.0004; if() #293 Body Start
LOAD D2 0.0006; for() #144 setup
ADDV D2 1
STORE D2 0.0006
PUSHR D4; for() #144 LoopTest
LOAD D2 0.0008; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.9015; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 520 ==; for() #144 TestFail?
LOAD D2 0.0008; for() #144 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #144 Body End
LOAD D2 0.0006; for() #144 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 488; for() #144 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006
LOAD D2 0.0009; if() #556 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 671 ==; Test 'if'
ALLOCATEMEMV D2 59 0; if() #556 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script does not exist.\n"
STORE D2 0.0002
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Script name: %s\n"
STORE D2 0
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 735; return End
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3; if() #556 Body End
GOTO 671; if() #293 Body End
LOAD D2 0.0005; if() #557 Test AND if() #293 Else Start
COMPAREV D2 48
GOTOCMP 584 <
LOAD D2 0.0005
COMPAREV D2 57
GOTOCMP 589 <=
LOAD D2 0.0005
COMPAREV D2 45
GOTOCMP 589 ==
SETV D2 0
GOTO 590
SETV D2 1
COMPAREV D2 0
GOTOCMP 671 ==; Test 'if'
STOREV 0 0.0004; if() #557 Body Start
LOAD D2 0.0005; if() #558 Test
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 609 ==; Test 'if'
SETV D2 45; if() #558 Body Start
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 1
STORE D2 0.0004
LOAD D2 0.0006
ADDV D2 1
STORE D2 0.0006; if() #558 Body End
LOAD D2 0.0006; for() #145 setup
ADDV D2 1
STORE D2 0.0006
LOAD D2 0.0008; for() #145 LoopTest
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 48
GOTOCMP 628 <
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 57
GOTOCMP 628 >
SETV D2 1
GOTO 629
SETV D2 0
COMPAREV D2 0
GOTOCMP 651 ==; for() #145 TestFail?
LOAD D2 0.0008; for() #145 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #145 Body End
LOAD D2 0.0006; for() #145 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 612; for() #145 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int atoi(char32[])] Params Start
SETR D3 D2; InlineFunc[int atoi(char32[])] Params End
ATOI D2 D3; InlineFunc[int atoi(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006; if() #557 Body End
LOAD D2 0.0006; if() #293 Else End AND if() #555 Body End AND for() #143 Body End AND for() #143 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 455; for() #143 End
LOAD D2 0.0009; if() #560 Test AND unless(false) #559 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 725 ==; Test 'if'
ALLOCATEMEMV D2 54 0; if() #560 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script not found.\n"
STORE D2 0.0005
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Enemy name: %s\n"
STORE D2 0.0003
ALLOCATEMEMV D2 55 0
WRITEPODSTRING D2 "  Script name should start after this character: %c\n"
STORE D2 0.0001
LOAD D2 0.0005; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGV 64; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 735; return End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3; if() #560 Body End
SETV D2 1; return Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 735; return End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0011
RETURNFUNC; Func[int __AutoGhostParseName(npc, int[])] Body End
SETR D4 SP2; Func[void __AutoGhostKill(npc)] Body Start
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
POP D5
RETURNFUNC; Func[void __AutoGhostKill(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
LOAD D2 0.0002; InlineFunc[int Max(int, int)] Params Start AND for() #38 setup
ADDV D2 1
PUSHVARGR D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0
LOAD D2 0; for() #38 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 846 ==; for() #38 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #38 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #151 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 822 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 822 ==
SETV D2 0
GOTO 823
SETV D2 1
COMPAREV D2 0
GOTOCMP 842 ==; Test 'if'
LOAD D2 0.0001; unless() #152 Test AND if() #151 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 842 !=; Test 'unless'
LOAD D2 0.0001; unless() #153 Test AND unless() #152 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 842 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #153 Body Start
GOTO 847; return End AND unless() #153 Body End
LOAD D2 0; unless() #152 Body End AND if() #151 Body End AND for() #38 Body End AND for() #38 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 797; for() #38 End
SETV D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR D4 SP2; Func[int CenterX(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(eweapon)] Body End
SETR D4 SP2; Func[int CenterY(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR D4 SP2
SETR D2 LINKHP; if() #66 Test
COMPAREV D2 0
GOTOCMP 903 >
GOTO 903
SETV D2 1
GOTO 904
SETV D2 0
COMPAREV D2 0
GOTOCMP 953 ==; Test 'if'
STOREV 0 0.0001; if() #66 Body Start
STOREV 1 0; for() #3 setup
LOAD D2 0; for() #3 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 953 ==; for() #3 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #3 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
SETR D2 GD24; if() #67 Test
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
RSHIFTV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
ANDV D2 15
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 949 ==; Test 'if'
SETV D2 0; if() #67 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #67 Body End
LOAD D2 0; for() #3 Body End AND for() #3 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 908; for() #3 End
POPARGS D5 0.0002; if() #66 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSV 0 0.0002; Func[void DrawEWeaponShadow(eweapon)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
SUBV D2 1
MULTV D2 16
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHV 1; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #35 [Opt:AlwaysOn]
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
PUSHR D2
PUSHARGSV 1 0.0002
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(eweapon)] Body End
PUSHARGSV 0 0.0009; Func[void DrawGhostFFCs()] Body Start
SETR D4 SP2
SETV D2 1; if() #101 Test
PUSHR D2
POP D0
SETR D2 SCREENEFLAGSD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1037 ==; Test 'if'
PUSHR D4; unless() #102 Test AND if() #101 Body Start
CALLFUNC 0.1223; UsrFunc[bool __HaveAmulet()] Call
POP D4
COMPAREV D2 0
GOTOCMP 1221 ==; Test 'unless' AND return (Void) AND unless() #102 Body
STOREV 0 0.0008; if() #101 Body End
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
SETV D2 1; if() #37 Test AND if(true) #36 [Opt:AlwaysOn]
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1056 ==; Test 'if'
SETV D2 1; if() #37 Body Start
STORE D2 0.0003
GOTO 1058; if() #37 Body End
SETV D2 2; if() #37 Else Start
STORE D2 0.0003; if() #37 Else End
SETV D2 4
STORE D2 0.0002
STOREV 1 0.0001; for() #16 setup
LOAD D2 0.0001; for() #16 LoopTest
PUSHR D2
SETR D2 NPCCOUNT
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1221 ==; for() #16 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #16 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0006; UsrFunc[int[] __GetDrawingArray(npc)] Params Start
PUSHR D2; UsrFunc[int[] __GetDrawingArray(npc)] Params End
CALLFUNC 0.1242; UsrFunc[int[] __GetDrawingArray(npc)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008; unless() #103 Test
COMPAREV D2 0
GOTOCMP 1217 ==; Test 'unless' AND continue 1; AND unless() #103 Body
SETR D2 GD26; if() #104 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1101 ==; Test 'if'
LOAD D2 0.0008; if() #105 Test AND if() #104 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1217 !=; Test 'if' AND continue 1; AND if() #105 Body
LOAD D2 0.0008; if() #104 Body End AND if() #38 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1113 ==; Test 'if'
SETV D2 64; if() #38 Body Start
STORE D2 0.0005
GOTO 1115; if() #38 Body End
SETV D2 128; if() #38 Else Start
STORE D2 0.0005; if() #38 Else End
LOAD D2 0.0008; if() #39 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1127 ==; Test 'if'
LOAD D2 0.0002; if() #39 Body Start
STORE D2 0.0004
GOTO 1129; if() #39 Body End
LOAD D2 0.0003; if() #39 Else Start
STORE D2 0.0004; if() #39 Else End
SETV D2 3
STORE D2 0.0007
STOREV 0 0; for() #17 setup
LOAD D2 0; for() #17 LoopTest
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1217 ==; for() #17 TestFail?
LOAD D2 0.0008; if() #106 Test AND for() #17 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
GOTOCMP 1159 ==
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 1159 ==
SETV D2 1
GOTO 1160
SETV D2 0
COMPAREV D2 0
GOTOCMP 1210 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #106 Body Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
LOAD D2 0.0005
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #106 Body End
LOAD D2 0.0007
ADDV D2 6
STORE D2 0.0007; for() #17 Body End
LOAD D2 0; for() #17 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1132; for() #17 End
LOAD D2 0.0001; for() #16 Body End AND for() #16 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 1061; for() #16 End
POPARGS D5 0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR D4 SP2; Func[bool __HaveAmulet()] Body Start
SETV D2 50; if() #662 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1232 ==; Test 'if'
SETV D2 1; return Start AND if() #662 Body Start
GOTO 1241; return End AND if() #662 Body End
SETV D2 63; if() #663 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1240 ==; Test 'if'
SETV D2 1; return Start AND if() #663 Body Start
GOTO 1241; return End AND if() #663 Body End
SETV D2 0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int[] __GetDrawingArray(npc)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #573 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1258 ==; Test 'if'
SETV D2 0; return Start AND if() #573 Body Start
GOTO 1278; return End AND if() #573 Body End
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0; unless() #574 Test
COMPAREV D2 0
GOTOCMP 1272 !=; Test 'unless'
SETV D2 0; return Start AND unless() #574 Body Start
GOTO 1278; return End AND unless() #574 Body End
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 23
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int[] __GetDrawingArray(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC()] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 1 0; for() #37 setup
LOAD D2 0; for() #37 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1333 ==; for() #37 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #37 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #148 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 1309 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 1309 ==
SETV D2 0
GOTO 1310
SETV D2 1
COMPAREV D2 0
GOTOCMP 1329 ==; Test 'if'
LOAD D2 0.0001; unless() #149 Test AND if() #148 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 1329 !=; Test 'unless'
LOAD D2 0.0001; unless() #150 Test AND unless() #149 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 1329 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #150 Body Start
GOTO 1334; return End AND unless() #150 Body End
LOAD D2 0; unless() #149 Body End AND if() #148 Body End AND for() #37 Body End AND for() #37 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1284; for() #37 End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #174 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1349 ==; Test 'if'
PUSHR D4; if() #174 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.1495; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #174 Body End
LOAD D2 0.0002; if() #175 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1360 ==; Test 'if'
PUSHR D4; if() #175 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.1655; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #175 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001; if() #51 Test
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1430 ==; Test 'if'
PUSHR D4; if() #51 Body Start
LOAD D2 0.0006; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1983; UsrFunc[int __UnblockableDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
GOTO 1439; if() #51 Body End
LOAD D2 0.0006; if() #51 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2; if() #51 Else End
LOAD D2 0.0003; if() #176 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1450 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #176 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #176 Body End
LOAD D2 0.0001; if() #177 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1466 ==; Test 'if'
SETV D2 0; if() #177 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #177 Body End
LOAD D2 0.0001; if() #178 Test
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1477 ==; Test 'if'
PUSHR D4; if() #178 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #178 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #56 Test
COMPAREV D2 129
GOTOCMP 1505 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 1505 ==
SETV D2 0
GOTO 1506
SETV D2 1
COMPAREV D2 0
GOTOCMP 1510 ==; Test 'if'
SETV D2 17; return Start AND if() #56 Body Start
GOTO 1653; return End AND if() #56 Body End
LOAD D2 0.0003; if() #57 Test AND if() #56 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1517 ==; Test 'if'
SETV D2 18; return Start AND if() #57 Body Start
GOTO 1653; return End AND if() #57 Body End
LOAD D2 0.0003; if() #58 Test AND if() #57 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1524 ==; Test 'if'
SETV D2 19; return Start AND if() #58 Body Start
GOTO 1653; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1531 ==; Test 'if'
SETV D2 35; return Start AND if() #59 Body Start
GOTO 1653; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1538 ==; Test 'if'
SETV D2 81; return Start AND if() #60 Body Start
GOTO 1653; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1545 ==; Test 'if'
SETV D2 80; return Start AND if() #61 Body Start
GOTO 1653; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1552 ==; Test 'if'
SETV D2 21; return Start AND if() #62 Body Start
GOTO 1653; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1559 ==; Test 'if'
SETV D2 20; return Start AND if() #63 Body Start
GOTO 1653; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1566 ==; Test 'if'
SETV D2 36; return Start AND if() #64 Body Start
GOTO 1653; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1573 ==; Test 'if'
SETV D2 76; return Start AND if() #65 Body Start
GOTO 1653; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1580 ==; Test 'if'
SETV D2 77; return Start AND if() #66 Body Start
GOTO 1653; return End AND if() #66 Body End
LOAD D2 0.0003; if() #67 Test AND if() #66 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1652 ==; Test 'if'
STOREV 0 0.0002; if() #67 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #43 setup
LOAD D2 0; for() #43 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1636 ==; for() #43 TestFail?
LOAD D2 0; unless() #187 Test AND for() #43 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1632 ==; Test 'unless' AND continue 1; AND unless() #187 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #188 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1632 !=; Test 'if' AND continue 1; AND if() #188 Body
LOAD D2 0.0001; if() #189 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1632 ==; Test 'if'
LOAD D2 0.0001; if() #189 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #190 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1636 !=; Test 'if' AND break 1; AND if() #190 Body
LOAD D2 0; if() #189 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1588; for() #43 End
LOAD D2 0.0002; if() #68 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1643 ==; Test 'if'
SETV D2 4; return Start AND if() #68 Body Start
GOTO 1653; return End AND if() #68 Body End
LOAD D2 0.0002; if() #69 Test AND if() #68 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1650 ==; Test 'if'
SETV D2 5; return Start AND if() #69 Body Start
GOTO 1653; return End AND if() #69 Body End
SETV D2 6; return Start AND if() #69 Else Start
GOTO 1653; return End AND if() #69 Else End AND if() #68 Else End AND if() #67 Body End
SETV D2 0; return Start AND if() #67 Else Start
POPARGS D5 0.0004; return End AND if() #67 Else End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End AND if() #57 Else End AND if() #56 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #52 Test
COMPAREV D2 129
GOTOCMP 1664 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 1664 ==
SETV D2 0
GOTO 1665
SETV D2 1
COMPAREV D2 0
GOTOCMP 1669 ==; Test 'if'
SETV D2 40; return Start AND if() #52 Body Start
GOTO 1706; return End AND if() #52 Body End
LOAD D2 0; if() #53 Test AND if() #52 Else Start
COMPAREV D2 134
GOTOCMP 1677 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 1677 ==
SETV D2 0
GOTO 1678
SETV D2 1
COMPAREV D2 0
GOTOCMP 1682 ==; Test 'if'
SETV D2 32; return Start AND if() #53 Body Start
GOTO 1706; return End AND if() #53 Body End
LOAD D2 0; if() #54 Test AND if() #53 Else Start
COMPAREV D2 140
GOTOCMP 1693 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 1693 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 1693 ==
SETV D2 0
GOTO 1694
SETV D2 1
COMPAREV D2 0
GOTOCMP 1698 ==; Test 'if'
SETV D2 13; return Start AND if() #54 Body Start
GOTO 1706; return End AND if() #54 Body End
LOAD D2 0; if() #55 Test AND if() #54 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1705 ==; Test 'if'
SETV D2 51; return Start AND if() #55 Body Start
GOTO 1706; return End AND if() #55 Body End
SETV D2 0; return Start AND if() #55 Else Start
POP D5; return End AND if() #55 Else End AND if() #54 Else End AND if() #53 Else End AND if() #52 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #491 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1725 ==; Test 'if'
LOAD D2 0.0001; if() #491 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #491 Body End
LOAD D2 0.0001; if() #191 Test
COMPAREV D2 0.3927
GOTOCMP 1733 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 1733 >
SETV D2 0
GOTO 1734
SETV D2 1
COMPAREV D2 0
GOTOCMP 1739 ==; Test 'if'
SETV D2 3; if() #191 Body Start
STORE D2 0
GOTO 1789; if() #191 Body End
LOAD D2 0.0001; if() #192 Test AND if() #191 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1747 ==; Test 'if'
SETV D2 7; if() #192 Body Start
STORE D2 0
GOTO 1789; if() #192 Body End
LOAD D2 0.0001; if() #193 Test AND if() #192 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1755 ==; Test 'if'
SETV D2 1; if() #193 Body Start
STORE D2 0
GOTO 1789; if() #193 Body End
LOAD D2 0.0001; if() #194 Test AND if() #193 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1763 ==; Test 'if'
SETV D2 6; if() #194 Body Start
STORE D2 0
GOTO 1789; if() #194 Body End
LOAD D2 0.0001; if() #195 Test AND if() #194 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1771 ==; Test 'if'
SETV D2 2; if() #195 Body Start
STORE D2 0
GOTO 1789; if() #195 Body End
LOAD D2 0.0001; if() #196 Test AND if() #195 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1779 ==; Test 'if'
SETV D2 4; if() #196 Body Start
STORE D2 0
GOTO 1789; if() #196 Body End
LOAD D2 0.0001; if() #197 Test AND if() #196 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1787 ==; Test 'if'
SETV D2 0; if() #197 Body Start
STORE D2 0
GOTO 1789; if() #197 Body End
SETV D2 5; if() #197 Else Start
STORE D2 0; if() #197 Else End
LOAD D2 0.0002; if() #196 Else End AND if() #195 Else End AND if() #194 Else End AND if() #193 Else End AND if() #192 Else End AND if() #191 Else End AND if() #492 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1807 ==; Test 'if'
PUSHR D4; if() #492 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1983; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #492 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #215 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 1901 ==; Test 'if'
LOAD D2 0.0001; if() #215 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #497 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1840 ==; Test 'if'
LOAD D2 0; if() #497 Body Start
ADDV D2 6.2832
STORE D2 0; if() #497 Body End
LOAD D2 0; if() #216 Test
COMPAREV D2 0.7854
GOTOCMP 1848 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 1848 >
SETV D2 0
GOTO 1849
SETV D2 1
COMPAREV D2 0
GOTOCMP 1861 ==; Test 'if'
SETV D2 4; if() #216 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1981; if() #216 Body End
LOAD D2 0; if() #217 Test AND if() #216 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1876 ==; Test 'if'
SETV D2 3; if() #217 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1981; if() #217 Body End
LOAD D2 0; if() #218 Test AND if() #217 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1891 ==; Test 'if'
SETV D2 7; if() #218 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1981; if() #218 Body End
SETV D2 0; if() #218 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #218 Else End
GOTO 1981; if() #217 Else End AND if() #216 Else End AND if() #215 Body End
PUSHR D4; if() #215 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2043; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #219 Test
COMPAREV D2 0
GOTOCMP 1920 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 1920 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 1920 ==
SETV D2 0
GOTO 1921
SETV D2 1
COMPAREV D2 0
GOTOCMP 1933 ==; Test 'if'
SETV D2 0; if() #219 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1981; if() #219 Body End
LOAD D2 0; if() #220 Test AND if() #219 Else Start
COMPAREV D2 1
GOTOCMP 1944 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 1944 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 1944 ==
SETV D2 0
GOTO 1945
SETV D2 1
COMPAREV D2 0
GOTOCMP 1957 ==; Test 'if'
SETV D2 3; if() #220 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1981; if() #220 Body End
LOAD D2 0; if() #221 Test AND if() #220 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1972 ==; Test 'if'
SETV D2 7; if() #221 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1981; if() #221 Body End
SETV D2 4; if() #221 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #221 Else End
POPARGS D5 0.0002; if() #220 Else End AND if() #219 Else End AND if() #215 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #686 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1991 ==; Test 'if'
SETV D2 8; return Start AND if() #686 Body Start
GOTO 2041; return End AND if() #686 Body End
LOAD D2 0; if() #687 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1998 ==; Test 'if'
SETV D2 12; return Start AND if() #687 Body Start
GOTO 2041; return End AND if() #687 Body End
LOAD D2 0; if() #688 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2005 ==; Test 'if'
SETV D2 14; return Start AND if() #688 Body Start
GOTO 2041; return End AND if() #688 Body End
LOAD D2 0; if() #689 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2012 ==; Test 'if'
SETV D2 10; return Start AND if() #689 Body Start
GOTO 2041; return End AND if() #689 Body End
LOAD D2 0; if() #690 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2019 ==; Test 'if'
SETV D2 15; return Start AND if() #690 Body Start
GOTO 2041; return End AND if() #690 Body End
LOAD D2 0; if() #691 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2026 ==; Test 'if'
SETV D2 9; return Start AND if() #691 Body Start
GOTO 2041; return End AND if() #691 Body End
LOAD D2 0; if() #692 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2033 ==; Test 'if'
SETV D2 13; return Start AND if() #692 Body Start
GOTO 2041; return End AND if() #692 Body End
LOAD D2 0; if() #693 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2040 ==; Test 'if'
SETV D2 11; return Start AND if() #693 Body Start
GOTO 2041; return End AND if() #693 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #672 Test
COMPAREV D2 0
GOTOCMP 2052 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2052 >
SETV D2 1
GOTO 2053
SETV D2 0
COMPAREV D2 0
GOTOCMP 2057 ==; Test 'if'
LOAD D2 0; return Start AND if() #672 Body Start
GOTO 2114; return End AND if() #672 Body End
LOAD D2 0; if() #673 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2064 ==; Test 'if'
SETV D2 0; return Start AND if() #673 Body Start
GOTO 2114; return End AND if() #673 Body End
LOAD D2 0; if() #674 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2071 ==; Test 'if'
SETV D2 5; return Start AND if() #674 Body Start
GOTO 2114; return End AND if() #674 Body End
LOAD D2 0; if() #675 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2078 ==; Test 'if'
SETV D2 3; return Start AND if() #675 Body Start
GOTO 2114; return End AND if() #675 Body End
LOAD D2 0; if() #676 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2085 ==; Test 'if'
SETV D2 7; return Start AND if() #676 Body Start
GOTO 2114; return End AND if() #676 Body End
LOAD D2 0; if() #677 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2092 ==; Test 'if'
SETV D2 1; return Start AND if() #677 Body Start
GOTO 2114; return End AND if() #677 Body End
LOAD D2 0; if() #678 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2099 ==; Test 'if'
SETV D2 6; return Start AND if() #678 Body Start
GOTO 2114; return End AND if() #678 Body End
LOAD D2 0; if() #679 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2106 ==; Test 'if'
SETV D2 2; return Start AND if() #679 Body Start
GOTO 2114; return End AND if() #679 Body End
LOAD D2 0; if() #680 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2113 ==; Test 'if'
SETV D2 4; return Start AND if() #680 Body Start
GOTO 2114; return End AND if() #680 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR D4 SP2; Func[bool IsSideview()] Body Start
SETV D2 0; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
PUSHR D2
SETR D2 CURDMAP; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATASIDEVIEW
POP D3
COMPARER D3 D2
SETCMP D2 BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR D4 SP2; Func[void InitializeGhostZHData()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
SETR D4 SP2; Func[void KillEWeapon(eweapon)] Body Start
LOAD D2 0
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 128
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POP D5
RETURNFUNC; Func[void KillEWeapon(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[int __GetEWeaponThrowHeight(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
STORE D2 0.0004
LOAD D2 0.0004; if() #575 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2214 ==; Test 'if'
SETV D2 1; return Start AND if() #575 Body Start
GOTO 2315; return End AND if() #575 Body End
LOAD D2 0.0005; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0003
LOAD D2 0.0003; if() #576 Test
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2263 ==; Test 'if'
SETV D2 1; return Start AND if() #576 Body Start
GOTO 2315; return End AND if() #576 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0001; while() #5 Test
COMPAREV D2 3.2000
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2290 ==; Test 'while'
LOAD D2 0.0001; while() #5 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002
LOAD D2 0.0002; if() #577 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2271 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #577 Body Start
GOTO 2315; return End AND if() #577 Body End
GOTO 2271; while() #5 Body End AND while() #5 End
STOREV 0 0
LOAD D2 0.0002; while() #6 Test
PUSHR D2
LOAD D2 0
DIVV D2 3.2000
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2314 ==; Test 'while'
LOAD D2 0.0001; while() #6 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SUBV D2 3.2000
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002; while() #6 Body End
GOTO 2291; while() #6 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(eweapon)] Body End
SETR D4 SP2; Func[void SetEWeaponRotation(eweapon, int)] Body Start
PUSHR D4
LOAD D2 0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2043; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #222 Test
COMPAREV D2 0
GOTOCMP 2335 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 2335 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 2335 ==
SETV D2 0
GOTO 2336
SETV D2 1
COMPAREV D2 0
GOTOCMP 2348 ==; Test 'if'
SETV D2 0; if() #222 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2396; if() #222 Body End
LOAD D2 0; if() #223 Test AND if() #222 Else Start
COMPAREV D2 1
GOTOCMP 2359 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2359 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 2359 ==
SETV D2 0
GOTO 2360
SETV D2 1
COMPAREV D2 0
GOTOCMP 2372 ==; Test 'if'
SETV D2 3; if() #223 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2396; if() #223 Body End
LOAD D2 0; if() #224 Test AND if() #223 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2387 ==; Test 'if'
SETV D2 7; if() #224 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2396; if() #224 Body End
SETV D2 4; if() #224 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #224 Else End
POPARGS D5 0.0002; if() #223 Else End AND if() #222 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon, int)] Body End
SETR D4 SP2; Func[int Sign(int)] Body Start
LOAD D2 0; if() #240 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2406 ==; Test 'if'
SETV D2 1; return Start AND if() #240 Body Start
GOTO 2414; return End AND if() #240 Body End
LOAD D2 0; if() #241 Test AND if() #240 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2413 ==; Test 'if'
SETV D2 -1; return Start AND if() #241 Body Start
GOTO 2414; return End AND if() #241 Body End
SETV D2 0; return Start AND if() #241 Else Start
POP D5; return End AND if() #241 Else End AND if() #240 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR D4 SP2; Func[void StartGhostZH()] Body Start
PUSHR D4
CALLFUNC 0.2133; UsrFunc[void InitializeGhostZHData()] Call
POP D4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0 0.0007; Func[void UpdateEWeapon(eweapon)] Body Start
SETR D4 SP2
SETR D2 GD26; if() #528 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3565 !=; Test 'if' AND return (Void) AND if() #528 Body
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0005
STOREV 1 0.0004
LOAD D2 0.0007; if() #250 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2836 ==; Test 'if'
LOAD D2 0.0007; if() #529 Test AND if() #250 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2678 ==; Test 'if'
LOAD D2 0.0007; if() #251 Test AND if() #529 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 6
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2551 ==; Test 'if'
LOAD D2 0.0007; if() #252 Test AND if() #251 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2494 ==; Test 'if'
PUSHR D4; if() #252 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params End
CALLFUNC 0.3567; UsrFunc[void __UpdateEWMSineWave(eweapon)] Call
POP D4
GOTO 2678; if() #252 Body End
LOAD D2 0.0007; if() #253 Test AND if() #252 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2511 ==; Test 'if'
PUSHR D4; if() #253 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHoming(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHoming(eweapon)] Params End
CALLFUNC 0.3749; UsrFunc[void __UpdateEWMHoming(eweapon)] Call
POP D4
GOTO 2678; if() #253 Body End
LOAD D2 0.0007; if() #254 Test AND if() #253 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2528 ==; Test 'if'
PUSHR D4; if() #254 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params End
CALLFUNC 0.3961; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Call
POP D4
GOTO 2678; if() #254 Body End
LOAD D2 0.0007; if() #255 Test AND if() #254 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2545 ==; Test 'if'
PUSHR D4; if() #255 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandom(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandom(eweapon)] Params End
CALLFUNC 0.4302; UsrFunc[void __UpdateEWMRandom(eweapon)] Call
POP D4
GOTO 2678; if() #255 Body End
PUSHR D4; if() #255 Else Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params End
CALLFUNC 0.4422; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Call
POP D4; if() #255 Else End
GOTO 2678; if() #254 Else End AND if() #253 Else End AND if() #252 Else End AND if() #251 Body End
LOAD D2 0.0007; if() #256 Test AND if() #251 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2586 ==; Test 'if'
LOAD D2 0.0007; if() #256 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMVeer(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMVeer(eweapon)] Params End
CALLFUNC 0.4734; UsrFunc[void __UpdateEWMVeer(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 2678; if() #256 Body End
LOAD D2 0.0007; if() #257 Test AND if() #256 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2603 ==; Test 'if'
PUSHR D4; if() #257 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMThrow(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMThrow(eweapon)] Params End
CALLFUNC 0.5266; UsrFunc[void __UpdateEWMThrow(eweapon)] Call
POP D4
GOTO 2678; if() #257 Body End
LOAD D2 0.0007; if() #258 Test AND if() #257 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2620 ==; Test 'if'
PUSHR D4; if() #258 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMFall(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMFall(eweapon)] Params End
CALLFUNC 0.5576; UsrFunc[void __UpdateEWMFall(eweapon)] Call
POP D4
GOTO 2678; if() #258 Body End
LOAD D2 0.0007; if() #259 Test AND if() #258 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2655 ==; Test 'if'
LOAD D2 0.0007; if() #259 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDrift(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDrift(eweapon)] Params End
CALLFUNC 0.5842; UsrFunc[void __UpdateEWMDrift(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 2678; if() #259 Body End
LOAD D2 0.0007; if() #259 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params End
CALLFUNC 0.6346; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004; if() #259 Else End
LOAD D2 0.0007; if() #258 Else End AND if() #257 Else End AND if() #256 Else End AND if() #251 Else End AND if() #529 Body End AND if() #530 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
LOAD D2 0.0007; if() #260 Test AND if() #530 Body Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2736 ==; Test 'if'
LOAD D2 0.0007; if() #260 Body Start
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0007; if() #531 Test
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
PUSHR D4; if() #531 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #531 Body End
GOTO 3146; if() #260 Body End
LOAD D2 0.0007; if() #261 Test AND if() #260 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2786 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #532 Test AND if() #261 Body Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
PUSHR D4; if() #532 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #532 Body End
GOTO 3146; if() #261 Body End
LOAD D2 0.0007; if() #533 Test AND if() #261 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params Start AND if() #533 Body Start
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
PUSHVARGR D3; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0007; if() #534 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
PUSHR D4; if() #534 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #534 Body End
GOTO 3146; if() #533 Body End AND if() #261 Else End AND if() #260 Else End AND if() #530 Body End AND if() #250 Body End
LOAD D2 0.0007; if() #535 Test AND if() #250 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 2857 ==
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 2857 !=
SETV D2 1
GOTO 2858
SETV D2 0
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
LOAD D2 0.0007; if() #262 Test AND if() #535 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2877 ==; Test 'if'
PUSHR D4; if() #262 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params End
CALLFUNC 0.6881; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Call
POP D4
GOTO 3146; if() #262 Body End
LOAD D2 0.0007; if() #263 Test AND if() #262 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3011 ==; Test 'if'
LOAD D2 0.0007; if() #264 Test AND if() #263 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2909 ==; Test 'if'
SETV D2 0; if() #264 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 3146; if() #264 Body End
LOAD D2 0.0007; if() #265 Test AND if() #264 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2926 ==; Test 'if'
PUSHR D4; if() #265 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params End
CALLFUNC 0.7292; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Call
POP D4
GOTO 3146; if() #265 Body End
LOAD D2 0.0007; if() #266 Test AND if() #265 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2943 ==; Test 'if'
PUSHR D4; if() #266 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params End
CALLFUNC 0.7465; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Call
POP D4
GOTO 3146; if() #266 Body End
LOAD D2 0.0007; if() #267 Test AND if() #266 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2960 ==; Test 'if'
PUSHR D4; if() #267 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params End
CALLFUNC 0.7509; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Call
POP D4
GOTO 3146; if() #267 Body End
LOAD D2 0.0007; if() #268 Test AND if() #267 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2977 ==; Test 'if'
PUSHR D4; if() #268 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params End
CALLFUNC 0.7553; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Call
POP D4
GOTO 3146; if() #268 Body End
LOAD D2 0.0007; if() #269 Test AND if() #268 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2994 ==; Test 'if'
PUSHR D4; if() #269 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params End
CALLFUNC 0.7611; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Call
POP D4
GOTO 3146; if() #269 Body End
LOAD D2 0.0007; if() #536 Test AND if() #269 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
PUSHR D4; if() #536 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params End
CALLFUNC 0.7669; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Call
POP D4; if() #536 Body End
GOTO 3146; if() #269 Else End AND if() #268 Else End AND if() #267 Else End AND if() #266 Else End AND if() #265 Else End AND if() #264 Else End AND if() #263 Body End
LOAD D2 0.0007; if() #270 Test AND if() #263 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3028 ==; Test 'if'
PUSHR D4; if() #270 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params End
CALLFUNC 0.7779; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Call
POP D4
GOTO 3146; if() #270 Body End
LOAD D2 0.0007; if() #271 Test AND if() #270 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3045 ==; Test 'if'
PUSHR D4; if() #271 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params End
CALLFUNC 0.7837; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Call
POP D4
GOTO 3146; if() #271 Body End
LOAD D2 0.0007; if() #272 Test AND if() #271 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3062 ==; Test 'if'
PUSHR D4; if() #272 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params End
CALLFUNC 0.7897; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Call
POP D4
GOTO 3146; if() #272 Body End
LOAD D2 0.0007; if() #273 Test AND if() #272 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3079 ==; Test 'if'
PUSHR D4; if() #273 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params End
CALLFUNC 0.7957; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Call
POP D4
GOTO 3146; if() #273 Body End
LOAD D2 0.0007; if() #274 Test AND if() #273 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3096 ==; Test 'if'
PUSHR D4; if() #274 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params End
CALLFUNC 0.8069; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Call
POP D4
GOTO 3146; if() #274 Body End
LOAD D2 0.0007; if() #275 Test AND if() #274 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3113 ==; Test 'if'
PUSHR D4; if() #275 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params End
CALLFUNC 0.8174; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Call
POP D4
GOTO 3146; if() #275 Body End
LOAD D2 0.0007; if() #276 Test AND if() #275 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3130 ==; Test 'if'
PUSHR D4; if() #276 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params End
CALLFUNC 0.8221; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Call
POP D4
GOTO 3146; if() #276 Body End
LOAD D2 0.0007; if() #537 Test AND if() #276 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
PUSHR D4; if() #537 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params End
CALLFUNC 0.8272; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Call
POP D4; if() #537 Body End
LOAD D2 0.0007; if() #276 Else End AND if() #275 Else End AND if() #274 Else End AND if() #273 Else End AND if() #272 Else End AND if() #271 Else End AND if() #270 Else End AND if() #263 Else End AND if() #262 Else End AND if() #535 Body End AND if() #250 Else End AND if() #538 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3171 ==; Test 'if'
LOAD D2 0.0007; if() #539 Test AND if() #538 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3171 ==; Test 'if'
PUSHR D4; if() #539 Body Start
LOAD D2 0.0007; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.0955; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #539 Body End
LOAD D2 0.0007; if() #538 Body End AND if() #277 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3454 ==; Test 'if'
SETV D2 1000; if() #277 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
SETR D2 LINKHP; if() #540 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3565 !=; Test 'if' AND return (Void) AND if() #540 Body
LOAD D2 0.0007; if() #541 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 3216 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 3216 ==
SETV D2 1
GOTO 3217
SETV D2 0
COMPAREV D2 0
GOTOCMP 3565 !=; Test 'if' AND return (Void) AND if() #541 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0007; if() #278 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 3235 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int RadtoDeg(int)] Params Start AND if() #278 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 3301; if() #278 Body End
PUSHR D4; if() #278 Else Start
LOAD D2 0.0007; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2043; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #279 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3251 ==; Test 'if'
SETV D2 -90; if() #279 Body Start
STORE D2 0.0001
GOTO 3301; if() #279 Body End
LOAD D2 0; if() #280 Test AND if() #279 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3259 ==; Test 'if'
SETV D2 -45; if() #280 Body Start
STORE D2 0.0001
GOTO 3301; if() #280 Body End
LOAD D2 0; if() #281 Test AND if() #280 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3267 ==; Test 'if'
SETV D2 0; if() #281 Body Start
STORE D2 0.0001
GOTO 3301; if() #281 Body End
LOAD D2 0; if() #282 Test AND if() #281 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3275 ==; Test 'if'
SETV D2 45; if() #282 Body Start
STORE D2 0.0001
GOTO 3301; if() #282 Body End
LOAD D2 0; if() #283 Test AND if() #282 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3283 ==; Test 'if'
SETV D2 90; if() #283 Body Start
STORE D2 0.0001
GOTO 3301; if() #283 Body End
LOAD D2 0; if() #284 Test AND if() #283 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3291 ==; Test 'if'
SETV D2 135; if() #284 Body Start
STORE D2 0.0001
GOTO 3301; if() #284 Body End
LOAD D2 0; if() #285 Test AND if() #284 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3299 ==; Test 'if'
SETV D2 180; if() #285 Body Start
STORE D2 0.0001
GOTO 3301; if() #285 Body End
SETV D2 -135; if() #285 Else Start
STORE D2 0.0001; if() #285 Else End
LOAD D2 0.0004; if() #284 Else End AND if() #283 Else End AND if() #282 Else End AND if() #281 Else End AND if() #280 Else End AND if() #279 Else End AND if() #278 Else End AND if() #286 Test
COMPAREV D2 0
GOTOCMP 3343 ==; Test 'if'
LOAD D2 0.0007; if() #286 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Cos(int)] Params Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
GOTO 3359; if() #286 Body End
LOAD D2 0.0007; if() #286 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0002; if() #286 Else End
LOAD D2 0.0006; unless() #542 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 3373 !=
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 3373 !=
SETV D2 1
GOTO 3374
SETV D2 0
COMPAREV D2 0
GOTOCMP 3388 !=; Test 'unless'
PUSHR D4; unless() #542 Body Start
LOAD D2 0.0006; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0040; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0001; unless() #542 Body End
STOREV 0 0
LOAD D2 0.0001; if() #287 Test
COMPAREV D2 0
GOTOCMP 3397 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 3397 >=
SETV D2 1
GOTO 3398
SETV D2 0
COMPAREV D2 0
GOTOCMP 3403 ==; Test 'if'
SETV D2 0; if() #287 Body Start
STORE D2 0
GOTO 3405; if() #287 Body End
SETV D2 2; if() #287 Else Start
STORE D2 0; if() #287 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE_W
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE_H
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 3511; if() #277 Body End
LOAD D2 0.0007; if() #543 Test AND if() #277 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3494 ==; Test 'if'
SETR D2 GD26; if() #288 Test AND if() #543 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3485 ==; Test 'if'
SETV D2 1000; if() #288 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
GOTO 3494; if() #288 Body End
SETV D2 0; if() #288 Else Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #288 Else End
LOAD D2 0.0007; if() #543 Body End AND if() #544 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3511 ==; Test 'if'
PUSHR D4; if() #544 Body Start
LOAD D2 0.0007; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #544 Body End
LOAD D2 0.0007; if() #277 Else End AND if() #545 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3523 !=
SETV D2 0
GOTO 3524
SETV D2 1
COMPAREV D2 0
GOTOCMP 3565 ==; Test 'if'
LOAD D2 0.0007; if() #545 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z_OFFSET D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; if() #545 Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void UpdateEWeapon(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D3 SPRITE_MISCD; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(eweapon)] Body End
PUSHARGSV 0 0.0003; Func[void __UpdateEWMHoming(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0003
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0002
LOAD D2 0.0002; if() #697 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3765 ==; Test 'if'
LOAD D2 0.0002; if() #697 Body Start
ADDV D2 6.2832
STORE D2 0.0002; if() #697 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #698 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3793 ==; Test 'if'
LOAD D2 0.0001; if() #698 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #698 Body End
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
STORE D2 0
LOAD D2 0; if() #377 Test
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
COMPARER D3 D2
GOTOCMP 3828 <
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 6.2832 D2
POP D3
COMPARER D3 D2
GOTOCMP 3828 >
SETV D2 0
GOTO 3829
SETV D2 1
COMPAREV D2 0
GOTOCMP 3841 ==; Test 'if'
LOAD D2 0.0001; if() #377 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 3908; if() #377 Body End
PUSHR D4; if() #378 Test AND if() #377 Else Start
LOAD D2 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2398; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Sign(int)] Params Start
SUBV D2 3.1416
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2398; UsrFunc[int Sign(int)] Call
POP D4
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3885 ==; Test 'if'
LOAD D2 0.0003; if() #378 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 3908; if() #378 Body End
LOAD D2 0.0003; if() #378 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2; if() #378 Else End
PUSHR D4; if() #377 Else End
LOAD D2 0.0003; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0003; if() #699 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3959 ==; Test 'if'
LOAD D2 0.0003; if() #699 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0003; if() #700 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3959 ==; Test 'if'
PUSHR D4; if() #700 Body Start
LOAD D2 0.0003; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #700 Body End
POPARGS D5 0.0004; if() #699 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #701 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3992 ==; Test 'if'
LOAD D2 0.0001; if() #701 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #701 Body End
LOAD D2 0.0001; if() #379 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4091 ==; Test 'if'
LOAD D2 0.0001; if() #379 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #702 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4300 ==; Test 'if'
LOAD D2 0.0001; if() #380 Test AND if() #702 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4050 ==; Test 'if'
PUSHR D4; if() #380 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 4300; if() #380 Body End
LOAD D2 0.0001; if() #380 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #380 Else End
GOTO 4300; if() #702 Body End AND if() #379 Body End
LOAD D2 0.0001; if() #379 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #703 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4197 ==; Test 'if'
SETV D2 45; if() #703 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #704 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4197 ==; Test 'if'
PUSHR D4; if() #704 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #704 Body End
LOAD D2 0.0001; if() #703 Body End AND if() #381 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4223 ==; Test 'if'
LOAD D2 0.0001; if() #381 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 4300; if() #381 Body End
LOAD D2 0.0001; if() #705 Test AND if() #381 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4300 ==; Test 'if'
LOAD D2 0.0001; if() #705 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.2000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #382 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4270 ==; Test 'if'
PUSHR D4; if() #382 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4300; if() #382 Body End
LOAD D2 0; if() #383 Test AND if() #382 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4282 ==; Test 'if'
PUSHR D4; if() #383 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4300; if() #383 Body End
LOAD D2 0; if() #384 Test AND if() #383 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4294 ==; Test 'if'
PUSHR D4; if() #384 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4300; if() #384 Body End
PUSHR D4; if() #384 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #384 Else End
POPARGS D5 0.0002; if() #383 Else End AND if() #382 Else End AND if() #705 Body End AND if() #381 Else End AND if() #379 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(eweapon)] Body End
SETR D4 SP2; Func[void __UpdateEWMRandom(eweapon)] Body Start
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Randf(int)] Params Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.0032; UsrFunc[int Randf(int)] Call
POP D4
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0; if() #706 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4374 ==; Test 'if'
PUSHR D4; if() #706 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #706 Body End
LOAD D2 0; if() #707 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4420 ==; Test 'if'
LOAD D2 0; if() #707 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #708 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4420 ==; Test 'if'
PUSHR D4; if() #708 Body Start
LOAD D2 0; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #708 Body End
POP D5; if() #707 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #709 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4453 ==; Test 'if'
LOAD D2 0.0001; if() #709 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #709 Body End
LOAD D2 0.0001; if() #385 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4552 ==; Test 'if'
LOAD D2 0.0001; if() #385 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #710 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4732 ==; Test 'if'
LOAD D2 0.0001; if() #386 Test AND if() #710 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4511 ==; Test 'if'
PUSHR D4; if() #386 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 4732; if() #386 Body End
LOAD D2 0.0001; if() #386 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #386 Else End
GOTO 4732; if() #710 Body End AND if() #385 Body End
LOAD D2 0.0001; if() #385 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #711 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4642 ==; Test 'if'
SETV D2 45; if() #711 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D3 62832; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
MULTV D2 0.0001
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #712 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4642 ==; Test 'if'
PUSHR D4; if() #712 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #712 Body End
LOAD D2 0.0001; if() #711 Body End AND if() #387 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4668 ==; Test 'if'
LOAD D2 0.0001; if() #387 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 4732; if() #387 Body End
LOAD D2 0.0001; if() #713 Test AND if() #387 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4732 ==; Test 'if'
LOAD D2 0.0001; if() #713 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #388 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4702 ==; Test 'if'
PUSHR D4; if() #388 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4732; if() #388 Body End
LOAD D2 0; if() #389 Test AND if() #388 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4714 ==; Test 'if'
PUSHR D4; if() #389 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4732; if() #389 Body End
LOAD D2 0; if() #390 Test AND if() #389 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4726 ==; Test 'if'
PUSHR D4; if() #390 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4732; if() #390 Body End
PUSHR D4; if() #390 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #390 Else End
POPARGS D5 0.0002; if() #389 Else End AND if() #388 Else End AND if() #713 Body End AND if() #387 Else End AND if() #385 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #398 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4849 ==; Test 'if'
LOAD D2 0.0001; if() #398 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #398 Body End
LOAD D2 0; if() #399 Test AND if() #398 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4883 ==; Test 'if'
LOAD D2 0.0001; if() #399 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #399 Body End
LOAD D2 0; if() #400 Test AND if() #399 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4918 ==; Test 'if'
LOAD D2 0.0001; if() #400 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #400 Body End
LOAD D2 0; if() #401 Test AND if() #400 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4952 ==; Test 'if'
LOAD D2 0.0001; if() #401 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #401 Body End
LOAD D2 0; if() #402 Test AND if() #401 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5018 ==; Test 'if'
LOAD D2 0.0001; if() #402 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #402 Body End
LOAD D2 0; if() #403 Test AND if() #402 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5083 ==; Test 'if'
LOAD D2 0.0001; if() #403 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #403 Body End
LOAD D2 0; if() #404 Test AND if() #403 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5148 ==; Test 'if'
LOAD D2 0.0001; if() #404 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #404 Body End
LOAD D2 0.0001; if() #404 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #404 Else End
LOAD D2 0.0001; if() #403 Else End AND if() #402 Else End AND if() #401 Else End AND if() #400 Else End AND if() #399 Else End AND if() #398 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
LOAD D2 0.0001; if() #714 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 5297 !=
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 5297 ==
SETV D2 1
GOTO 5298
SETV D2 0
COMPAREV D2 0
GOTOCMP 5330 ==; Test 'if'
LOAD D2 0.0001; if() #714 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #714 Body End
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4; unless() #392 Test AND if(true) #391 [Opt:AlwaysOn]
CALLFUNC 0.2116; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 5382 !=; Test 'unless'
LOAD D2 0.0001; unless() #392 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 5402; unless() #392 Body End
SETR D2 REGION_HEIGHT; unless() #392 Else Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; unless() #392 Else End
LOAD D2 0.0001; if() #393 Test
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5465 ==; Test 'if'
PUSHR D4; unless() #715 Test AND if(true) #394 [Opt:AlwaysOn] AND if() #393 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9560; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5574 !=; Test 'unless'
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start AND unless() #715 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; unless() #715 Body End
GOTO 5574; if() #393 Body End
STOREV 0 0; if() #393 Else Start
LOAD D2 0.0001; if() #395 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
GOTOCMP 5523 ==; Test 'if'
LOAD D2 0.0001; if() #396 Test AND if() #395 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5520 ==; Test 'if'
LOAD D2 0.0001; if() #396 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 5525; if() #396 Body End
SETV D2 1; if() #396 Else Start
STORE D2 0; if() #396 Else End
GOTO 5525; if() #395 Body End
SETV D2 1; if() #395 Else Start
STORE D2 0; if() #395 Else End
LOAD D2 0; if() #716 Test
COMPAREV D2 0
GOTOCMP 5574 ==; Test 'if'
LOAD D2 0.0001; if() #397 Test AND if() #716 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 5553 ==; Test 'if'
SETV D2 0; if() #397 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 5574; if() #397 Body End
SETV D2 0; if() #397 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #397 Else End
POPARGS D5 0.0002; if() #716 Body End AND if() #393 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4; unless() #372 Test AND if(true) #371 [Opt:AlwaysOn]
CALLFUNC 0.2116; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 5637 !=; Test 'unless'
LOAD D2 0.0001; unless() #372 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 5667; unless() #372 Body End
LOAD D2 0.0001; unless() #372 Else Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; unless() #372 Else End
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 0.1600
PUSHVARGR D2
PUSHVARGV 3.2000; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #694 Test AND if(true) #373 [Opt:AlwaysOn]
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5840 ==; Test 'if'
PUSHR D4; unless() #695 Test AND if() #694 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9560; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5840 !=; Test 'unless'
STOREV 0 0; unless() #695 Body Start
LOAD D2 0.0001; if() #374 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5789 ==; Test 'if'
LOAD D2 0.0001; if() #375 Test AND if() #374 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5786 ==; Test 'if'
LOAD D2 0.0001; if() #375 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 5791; if() #375 Body End
SETV D2 1; if() #375 Else Start
STORE D2 0; if() #375 Else End
GOTO 5791; if() #374 Body End
SETV D2 1; if() #374 Else Start
STORE D2 0; if() #374 Else End
LOAD D2 0; if() #696 Test
COMPAREV D2 0
GOTOCMP 5840 ==; Test 'if'
LOAD D2 0.0001; if() #376 Test AND if() #696 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 5819 ==; Test 'if'
SETV D2 0; if() #376 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 5840; if() #376 Body End
SETV D2 0; if() #376 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #376 Else End
POPARGS D5 0.0002; if() #696 Body End AND unless() #695 Body End AND if() #694 Body End
RETURNFUNC; Func[void __UpdateEWMFall(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #356 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5957 ==; Test 'if'
LOAD D2 0.0001; if() #356 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #356 Body End
LOAD D2 0; if() #357 Test AND if() #356 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5991 ==; Test 'if'
LOAD D2 0.0001; if() #357 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #357 Body End
LOAD D2 0; if() #358 Test AND if() #357 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6026 ==; Test 'if'
LOAD D2 0.0001; if() #358 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #358 Body End
LOAD D2 0; if() #359 Test AND if() #358 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6060 ==; Test 'if'
LOAD D2 0.0001; if() #359 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #359 Body End
LOAD D2 0; if() #360 Test AND if() #359 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6126 ==; Test 'if'
LOAD D2 0.0001; if() #360 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #360 Body End
LOAD D2 0; if() #361 Test AND if() #360 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6191 ==; Test 'if'
LOAD D2 0.0001; if() #361 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #361 Body End
LOAD D2 0; if() #362 Test AND if() #361 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6256 ==; Test 'if'
LOAD D2 0.0001; if() #362 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #362 Body End
LOAD D2 0.0001; if() #362 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #362 Else End
LOAD D2 0.0001; if() #361 Else End AND if() #360 Else End AND if() #359 Else End AND if() #358 Else End AND if() #357 Else End AND if() #356 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001; if() #363 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 16
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 6438 ==; Test 'if'
LOAD D2 0.0001; if() #363 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6457; if() #363 Body End
LOAD D2 0.0001; if() #363 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #363 Else End
LOAD D2 0; if() #364 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6492 ==; Test 'if'
LOAD D2 0.0001; if() #364 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #364 Body End
LOAD D2 0; if() #365 Test AND if() #364 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6526 ==; Test 'if'
LOAD D2 0.0001; if() #365 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #365 Body End
LOAD D2 0; if() #366 Test AND if() #365 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6561 ==; Test 'if'
LOAD D2 0.0001; if() #366 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #366 Body End
LOAD D2 0; if() #367 Test AND if() #366 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6595 ==; Test 'if'
LOAD D2 0.0001; if() #367 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #367 Body End
LOAD D2 0; if() #368 Test AND if() #367 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6661 ==; Test 'if'
LOAD D2 0.0001; if() #368 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #368 Body End
LOAD D2 0; if() #369 Test AND if() #368 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6726 ==; Test 'if'
LOAD D2 0.0001; if() #369 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #369 Body End
LOAD D2 0; if() #370 Test AND if() #369 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6791 ==; Test 'if'
LOAD D2 0.0001; if() #370 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #370 Body End
LOAD D2 0.0001; if() #370 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #370 Else End
LOAD D2 0.0001; if() #369 Else End AND if() #368 Else End AND if() #367 Else End AND if() #366 Else End AND if() #365 Else End AND if() #364 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(eweapon)] Body End
PUSHARGSV 0 0.0011; Func[void __DoEWeaponDeathPrototype(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0010
STOREV 0 0.0009
STOREV 0 0.0008
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0011; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR D2; InlineFunc[untyped Floor(untyped)] Body
STORE D2 0.0010
SETR D2 EWPNCOUNT; for() #157 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #157 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6942 ==; for() #157 TestFail?
LOAD D2 0.0003; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #157 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0009
LOAD D2 0.0009; if() #565 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 768
COMPAREV D2 768
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6938 !=; Test 'if' AND continue 1; AND if() #565 Body
LOAD D2 0.0009; if() #566 Test
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6942 !=; Test 'if' AND break 1; AND if() #566 Body
LOAD D2 0.0003; for() #157 Body End AND for() #157 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 6902; for() #157 End
LOAD D2 0.0003; if() #567 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6968 ==; Test 'if'
ALLOCATEMEMV D2 43 0; if() #567 Body Start
WRITEPODSTRING D2 "ghost.zh: Failed to find prototype eweapon"
STORE D2 0
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 7290; return (Void)
LOAD D3 0
DEALLOCATEMEMR D3; if() #567 Body End
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MODV D2 10
SUBV D2 6.2832
STORE D2 0.0005
LOAD D2 0.0011
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0010
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 10000
STORE D2 0.0004
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 100
RSHIFTV D2 0
STORE D2 0.0008
LOAD D2 0.0011; if() #303 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7058 ==; Test 'if'
LOAD D2 0.0011; if() #303 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
GOTO 7070; if() #303 Body End
LOAD D2 0.0011; if() #303 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
STORE D2 0.0006; if() #303 Else End
LOAD D2 0.0008; if() #304 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7123 ==; Test 'if'
STOREV 0 0.0001; for() #158 setup AND if() #304 Body Start
LOAD D2 0.0001; for() #158 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7114 ==; for() #158 TestFail?
PUSHR D4; for() #158 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
MULTV D2 6.2832
SETV D2 6.2832
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.9065; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #158 Body End
LOAD D2 0.0001; for() #158 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 7076; for() #158 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 7281; if() #304 Body End
LOAD D2 0.0008; if() #305 Test AND if() #304 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7163 ==; Test 'if'
STOREV 0 0.0001; for() #159 setup AND if() #305 Body Start
LOAD D2 0.0001; for() #159 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7154 ==; for() #159 TestFail?
PUSHR D4; for() #159 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D3 31416; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
DIVV D2 5000
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.9065; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #159 Body End
LOAD D2 0.0001; for() #159 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 7129; for() #159 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 7281; if() #305 Body End
LOAD D2 0.0004; if() #306 Test AND if() #305 Else Start
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 7236 ==; Test 'if'
SETV D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND if() #306 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2
LOAD D2 0.0005
DIVV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
STOREV 0 0; for() #160 setup
LOAD D2 0; for() #160 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7273 ==; for() #160 TestFail?
PUSHR D4; for() #160 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.9065; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #160 Body End
LOAD D2 0; for() #160 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7198; for() #160 End
GOTO 7273; if() #306 Body End
LOAD D2 0.0004; if() #568 Test AND if() #306 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7273 ==; Test 'if'
PUSHR D4; if() #568 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.9065; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; if() #568 Body End
LOAD D2 0.0009; if() #306 Else End AND InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body AND if() #305 Else End
SETV D2 0; if() #304 Else End
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #298 Test
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7387 ==; Test 'if'
PUSHR D4; if() #298 Body Start
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
SETV D2 300
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 7463; if() #298 Body End
LOAD D2 0.0001; if() #299 Test AND if() #298 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 7412 ==; Test 'if'
LOAD D2 0.0001; if() #299 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
GOTO 7463; if() #299 Body End
LOAD D2 0.0001; if() #299 Else Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #300 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7433 ==; Test 'if'
PUSHR D4; if() #300 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7463; if() #300 Body End
LOAD D2 0; if() #301 Test AND if() #300 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7445 ==; Test 'if'
PUSHR D4; if() #301 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7463; if() #301 Body End
LOAD D2 0; if() #302 Test AND if() #301 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7457 ==; Test 'if'
PUSHR D4; if() #302 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7463; if() #302 Body End
PUSHR D4; if() #302 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #302 Else End
POPARGS D5 0.0002; if() #301 Else End AND if() #300 Else End AND if() #299 Else End AND if() #298 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathExplode(eweapon)] Body Start
PUSHR D4
PUSHV 135; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body Start
PUSHR D4
PUSHV 136; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #147 setup
LOAD D2 0; for() #147 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7600 ==; for() #147 TestFail?
PUSHR D4; for() #147 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #147 Body End
LOAD D2 0; for() #147 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7556; for() #147 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #146 setup
LOAD D2 0; for() #146 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7658 ==; for() #146 TestFail?
PUSHR D4; for() #146 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #146 Body End
LOAD D2 0; for() #146 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7614; for() #146 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #296 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7723 ==; Test 'if'
STOREV 0 0; for() #148 setup AND if() #296 Body Start
LOAD D2 0; for() #148 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7768 ==; for() #148 TestFail?
PUSHR D4; for() #148 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #148 Body End
LOAD D2 0; for() #148 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7678; for() #148 End
GOTO 7768; if() #296 Body End
STOREV 4 0; for() #149 setup AND if() #296 Else Start
LOAD D2 0; for() #149 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7768 ==; for() #149 TestFail?
PUSHR D4; for() #149 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #149 Body End
LOAD D2 0; for() #149 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7724; for() #149 End
SETV D2 0; if() #296 Else End
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #154 setup
LOAD D2 0; for() #154 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7826 ==; for() #154 TestFail?
PUSHR D4; for() #154 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #154 Body End
LOAD D2 0; for() #154 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7782; for() #154 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #151 setup
LOAD D2 0; for() #151 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7884 ==; for() #151 TestFail?
PUSHR D4; for() #151 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #151 Body End
LOAD D2 0; for() #151 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7840; for() #151 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #150 setup
LOAD D2 0; for() #150 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7944 ==; for() #150 TestFail?
PUSHR D4; for() #150 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #150 Body End
LOAD D2 0; for() #150 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7900; for() #150 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #297 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8011 ==; Test 'if'
STOREV 0 0; for() #152 setup AND if() #297 Body Start
LOAD D2 0; for() #152 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8056 ==; for() #152 TestFail?
PUSHR D4; for() #152 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #152 Body End
LOAD D2 0; for() #152 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7966; for() #152 End
GOTO 8056; if() #297 Body End
STOREV 4 0; for() #153 setup AND if() #297 Else Start
LOAD D2 0; for() #153 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8056 ==; for() #153 TestFail?
PUSHR D4; for() #153 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #153 Body End
LOAD D2 0; for() #153 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 8012; for() #153 End
SETV D2 13; if() #297 Else End AND InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #155 setup
LOAD D2 0; for() #155 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8116 ==; for() #155 TestFail?
PUSHR D4; for() #155 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #155 Body End
LOAD D2 0; for() #155 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 8072; for() #155 End
STOREV 4 0; for() #156 setup
LOAD D2 0; for() #156 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8161 ==; for() #156 TestFail?
PUSHR D4; for() #156 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #156 Body End
LOAD D2 0; for() #156 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 8117; for() #156 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[npc screendata::CreateNPC(int)] Params Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[npc screendata::CreateNPC(int)] Params End
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body Start
PUSHR D4
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[void __DoEWeaponDeathRunScript(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
PUSHR D4
CALLFUNC 0.1280; UsrFunc[int FindUnusedFFC()] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #569 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8297 ==; Test 'if'
SETV D2 0; if() #569 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 8436; return (Void) AND if() #569 Body End
LOAD D2 0.0004; InlineFunc[ffc screendata::LoadFFC(int)] Params
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0003
SETR D2 EWPNCOUNT; for() #161 setup
STORE D2 0
LOAD D2 0; for() #161 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8339 ==; for() #161 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #161 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0002
LOAD D2 0.0002; if() #570 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 768
COMPAREV D2 512
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8335 !=; Test 'if' AND continue 1; AND if() #570 Body
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0002
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFSPRITE
PUSHVARGR SPRITE_MISCD; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001; for() #161 Body End
LOAD D2 0; for() #161 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8302; for() #161 End
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 3
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0005
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 1024
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
POPARGS D5 0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void UpdateEWeapons()] Body Start
SETR D4 SP2
STOREV 0 0.0001
SETR D2 LINKACTION; unless() #289 Test
COMPAREV D2 4
GOTOCMP 8455 ==
SETR D2 LINKACTION
COMPAREV D2 5
GOTOCMP 8455 ==
SETR D2 LINKACTION
COMPAREV D2 14
GOTOCMP 8455 ==
SETR D2 LINKACTION
COMPAREV D2 15
GOTOCMP 8455 ==
SETV D2 0
GOTO 8456
SETV D2 1
COMPAREV D2 0
GOTOCMP 8505 !=; Test 'unless'
SETR D2 EWPNCOUNT; for() #141 setup AND unless() #289 Body Start
STORE D2 0
LOAD D2 0; for() #141 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8551 ==; for() #141 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #141 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #546 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 8492 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 8492 !=
SETV D2 0
GOTO 8493
SETV D2 1
COMPAREV D2 0
GOTOCMP 8500 !=; Test 'if' AND continue 1; AND if() #546 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void UpdateEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void UpdateEWeapon(eweapon)] Params End
CALLFUNC 0.2421; UsrFunc[void UpdateEWeapon(eweapon)] Call
POP D4; for() #141 Body End
LOAD D2 0; for() #141 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8460; for() #141 End
GOTO 8551; unless() #289 Body End
SETR D2 EWPNCOUNT; for() #142 setup AND unless() #289 Else Start
STORE D2 0
LOAD D2 0; for() #142 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8551 ==; for() #142 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #142 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #547 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 8539 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 8539 !=
SETV D2 0
GOTO 8540
SETV D2 1
COMPAREV D2 0
GOTOCMP 8547 !=; Test 'if' AND continue 1; AND if() #547 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params End
CALLFUNC 0.8553; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Call
POP D4; for() #142 Body End
LOAD D2 0; for() #142 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8507; for() #142 End
POPARGS D5 0.0002; unless() #289 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0 0.0002; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002; if() #717 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8580 ==; Test 'if'
LOAD D2 0.0002; if() #718 Test AND if() #717 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8580 ==; Test 'if'
PUSHR D4; if() #718 Body Start
LOAD D2 0.0002; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.0955; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #718 Body End
LOAD D2 0.0002; if() #717 Body End AND if() #405 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8772 ==; Test 'if'
SETV D2 1000; if() #405 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0002; if() #719 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 8620 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 8620 ==
SETV D2 1
GOTO 8621
SETV D2 0
COMPAREV D2 0
GOTOCMP 8829 !=; Test 'if' AND return (Void) AND if() #719 Body
STOREV 0 0.0001
LOAD D2 0.0002; if() #406 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 8637 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int RadtoDeg(int)] Params Start AND if() #406 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 8703; if() #406 Body End
PUSHR D4; if() #406 Else Start
LOAD D2 0.0002; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2043; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #407 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8653 ==; Test 'if'
SETV D2 -90; if() #407 Body Start
STORE D2 0.0001
GOTO 8703; if() #407 Body End
LOAD D2 0; if() #408 Test AND if() #407 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8661 ==; Test 'if'
SETV D2 -45; if() #408 Body Start
STORE D2 0.0001
GOTO 8703; if() #408 Body End
LOAD D2 0; if() #409 Test AND if() #408 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8669 ==; Test 'if'
SETV D2 0; if() #409 Body Start
STORE D2 0.0001
GOTO 8703; if() #409 Body End
LOAD D2 0; if() #410 Test AND if() #409 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8677 ==; Test 'if'
SETV D2 45; if() #410 Body Start
STORE D2 0.0001
GOTO 8703; if() #410 Body End
LOAD D2 0; if() #411 Test AND if() #410 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8685 ==; Test 'if'
SETV D2 90; if() #411 Body Start
STORE D2 0.0001
GOTO 8703; if() #411 Body End
LOAD D2 0; if() #412 Test AND if() #411 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8693 ==; Test 'if'
SETV D2 135; if() #412 Body Start
STORE D2 0.0001
GOTO 8703; if() #412 Body End
LOAD D2 0; if() #413 Test AND if() #412 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8701 ==; Test 'if'
SETV D2 180; if() #413 Body Start
STORE D2 0.0001
GOTO 8703; if() #413 Body End
SETV D2 -135; if() #413 Else Start
STORE D2 0.0001; if() #413 Else End
STOREV 0 0; if() #412 Else End AND if() #411 Else End AND if() #410 Else End AND if() #409 Else End AND if() #408 Else End AND if() #407 Else End AND if() #406 Else End
LOAD D2 0.0001; if() #414 Test
COMPAREV D2 0
GOTOCMP 8712 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 8712 >=
SETV D2 1
GOTO 8713
SETV D2 0
COMPAREV D2 0
GOTOCMP 8718 ==; Test 'if'
SETV D2 0; if() #414 Body Start
STORE D2 0
GOTO 8720; if() #414 Body End
SETV D2 2; if() #414 Else Start
STORE D2 0; if() #414 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
PUSHARGSV 1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 8829; if() #405 Body End
LOAD D2 0.0002; if() #720 Test AND if() #405 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8812 ==; Test 'if'
SETR D2 GD26; if() #415 Test AND if() #720 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8803 ==; Test 'if'
SETV D2 1000; if() #415 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
GOTO 8812; if() #415 Body End
SETV D2 0; if() #415 Else Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #415 Else End
LOAD D2 0.0002; if() #720 Body End AND if() #721 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8829 ==; Test 'if'
PUSHR D4; if() #721 Body Start
LOAD D2 0.0002; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #721 Body End
POPARGS D5 0.0003; if() #405 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body End
SETR D4 SP2; Func[void UpdateGhostZH1()] Body Start
PUSHR D4
CALLFUNC 0.8438; UsrFunc[void UpdateEWeapons()] Call
PEEK D4
CALLFUNC 0.0895; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK D4
CALLFUNC 0.8840; UsrFunc[void UpdateGhostZHData1()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR D4 SP2
SETR D2 CURDMAP
LSHIFTV D2 8
PUSHR D2
SETR D2 CURDSCR
POP D3
ADDR D2 D3
STORE D2 0
SETR D2 GD26; if() #290 Test
PUSHR D2
POP D0
READPODARRAYV D2 7
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8873 ==; Test 'if'
SETV D2 0; if() #290 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
GOTO 8891; if() #290 Body End
SETR D2 GD26; if() #548 Test AND if() #290 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8891 ==; Test 'if'
SETR D2 GD26; if() #548 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 6
SUBV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #548 Body End
POP D5; if() #290 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR D4 SP2; Func[void UpdateGhostZH2()] Body Start
PUSHR D4
CALLFUNC 0.1021; UsrFunc[void DrawGhostFFCs()] Call
PEEK D4
CALLFUNC 0.0059; UsrFunc[void AutoGhost()] Call
PEEK D4
CALLFUNC 0.8902; UsrFunc[void UpdateGhostZHData2()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR D4 SP2; Func[void UpdateGhostZHData2()] Body Start
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 1
ADDV D2 1
MODV D2 8
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETR D2 GD26; if() #291 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8934 ==; Test 'if'
SETR D2 GD26; if() #291 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ORV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 8944; if() #291 Body End
SETR D2 GD26; if() #291 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 -2
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #291 Else End
SETR D2 GD26; if(true) #549 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 3
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26; if() #550 Test
PUSHR D2
POP D0
READPODARRAYV D2 3
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8979 ==; Test 'if'
SETV D2 0; if() #550 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #550 Body End
SETR D2 GD26; if(true) #551 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 5
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26; if() #552 Test
PUSHR D2
POP D0
READPODARRAYV D2 5
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 9014 ==; Test 'if'
SETV D2 0; if() #552 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2; if() #552 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR D4 SP2; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOAD D2 0.0001; if() #664 Test
COMPAREV D2 97
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 9028 ==; Test 'if'
LOAD D2 0.0001; if() #665 Test AND if() #664 Body Start
COMPAREV D2 122
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9028 ==; Test 'if'
SETV D2 1; return Start AND if() #665 Body Start
GOTO 9063; return End AND if() #665 Body End
LOAD D2 0.0001; if() #664 Body End AND if() #666 Test
COMPAREV D2 65
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 9040 ==; Test 'if'
LOAD D2 0.0001; if() #667 Test AND if() #666 Body Start
COMPAREV D2 90
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9040 ==; Test 'if'
SETV D2 1; return Start AND if() #667 Body Start
GOTO 9063; return End AND if() #667 Body End
LOAD D2 0.0001; if() #666 Body End AND if() #668 Test
COMPAREV D2 95
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9047 ==; Test 'if'
SETV D2 1; return Start AND if() #668 Body Start
GOTO 9063; return End AND if() #668 Body End
LOAD D2 0; unless() #669 Test
COMPAREV D2 0
GOTOCMP 9062 !=; Test 'unless'
LOAD D2 0.0001; if() #670 Test AND unless() #669 Body Start
COMPAREV D2 48
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 9062 ==; Test 'if'
LOAD D2 0.0001; if() #671 Test AND if() #670 Body Start
COMPAREV D2 57
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9062 ==; Test 'if'
SETV D2 1; return Start AND if() #671 Body Start
GOTO 9063; return End AND if() #671 Body End
SETV D2 0; if() #670 Body End AND unless() #669 Body End AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(eweapon, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params End
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0004; if() #561 Test
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9097 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #561 Body Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #561 Body End
LOAD D2 0.0004; if() #294 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9233 ==; Test 'if'
SETV D2 3; if() #294 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
GOTO 9253; if() #294 Body End
LOAD D2 0.0003; if() #294 Else Start
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #294 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004; if() #295 Test
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
GOTOCMP 9390 !=
LOAD D2 0.0004
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -1
GOTOCMP 9390 !=
SETV D2 1
GOTO 9391
SETV D2 0
COMPAREV D2 0
GOTOCMP 9410 ==; Test 'if'
PUSHR D4; if() #295 Body Start
LOAD D2 0; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params Start
PUSHR D2; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params End
CALLFUNC 0.2199; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 9428; if() #295 Body End
LOAD D2 0.0004; if() #295 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #295 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 -257
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #562 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9541 ==; Test 'if'
SETV D2 0; if() #562 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #562 Body End
LOAD D2 0; if() #563 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9558 ==; Test 'if'
PUSHR D4; if() #563 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #563 Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __CopyEWeapon(eweapon, int, int, int)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #181 setup
LOAD D2 0; for() #181 LoopTest
PUSHR D2
LOAD D2 0.0001
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9609 ==; for() #181 TestFail?
LOAD D2 0.0006; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #732 Test AND for() #181 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 9605 ==; Test 'if'
SETV D2 0; if() #733 Test AND if() #732 Body Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
COMPAREV D2 0
GOTOCMP 9605 ==; Test 'if'
SETV D2 1; return Start AND if() #733 Body Start
GOTO 9610; return End AND if() #733 Body End
LOAD D2 0; if() #732 Body End AND for() #181 Body End AND for() #181 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9563; for() #181 End
SETV D2 0; return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End


PUSHR D0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #442 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 16 ==; Test 'if'
SETV D2 -1; if() #442 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
GOTO 22; if() #442 Body End
LOAD D2 0.0001; if() #442 Else Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #442 Else End
POPARGS D5 0.0002
QUIT; void run(int) Body End


PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
PUSHARGSV 0 0.0009
SETR D4 SP2
SETV D2 4; InlineFunc[void Waitframes(int)] Params
WAITFRAMESR D2; InlineFunc[void Waitframes(int)] Body
PUSHR D4; if() #829 Test
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 0.0886; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #829 Body
PUSHR D4
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 0.0886; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008
STORE D2 0.0007
LOAD D2 0.0008
STORE D2 0.0006
LOAD D2 0.0008
STORE D2 0.0005
LOAD D2 0.0008
STORE D2 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
ALLOCATEMEMV D2 256 0
STORE D2 0.0001
LOAD D2 0.0011; if() #830 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 72 ==; Test 'if'
LOAD D2 0.0011; InlineFunc[void Game::GetMessage(int, char32[])] Params Start AND if() #830 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void Game::GetMessage(int, char32[])] Params End
POP D3; InlineFunc[void Game::GetMessage(int, char32[])] Body Start
GETMESSAGE D3 D2; InlineFunc[void Game::GetMessage(int, char32[])] Body End AND if() #830 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_CapString(int)] Params Start
PUSHR D2; UsrFunc[void HealthBar_CapString(int)] Params End
CALLFUNC 0.0415; UsrFunc[void HealthBar_CapString(int)] Call
POP D4
LOAD D2 0.0005; while() #9 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 216 ==; Test 'while'
PUSHR D4; while() #9 Body Start
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 0.0886; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0007; if() #831 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 108 ==; Test 'if'
LOAD D2 0.0008; if() #831 Body Start
STORE D2 0.0007; if() #831 Body End
LOAD D2 0.0002; if() #832 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 116 ==; Test 'if'
LOAD D2 0.0002; if() #832 Body Start
SUBV D2 1
STORE D2 0.0002; if() #832 Body End
LOAD D2 0.0008; if() #833 Test
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 162 ==; Test 'if'
LOAD D2 0.0008; if() #834 Test AND if() #833 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 158 ==; Test 'if'
LOAD D2 0.0002; if() #443 Test AND if() #834 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 149 ==; Test 'if'
LOAD D2 0.0003; if() #443 Body Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 156; if() #443 Body End
LOAD D2 0.0006; if() #443 Else Start
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003; if() #443 Else End
SETV D2 96
STORE D2 0.0002; if() #834 Body End
LOAD D2 0.0006
STORE D2 0.0004
LOAD D2 0.0008
STORE D2 0.0006; if() #833 Body End
LOAD D2 0.0005; if() #835 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 198 ==; Test 'if'
LOAD D2 0.0005; if() #444 Test AND if() #835 Body Start
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 196 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Max(int, int)] Params Start AND if() #444 Body Start
PUSHR D2
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
DIVV D2 16
POP D3
SUBR D3 D2
PUSHVARGR D3
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0005
GOTO 198; if() #444 Body End
LOAD D2 0.0008; if() #444 Else Start
STORE D2 0.0005; if() #444 Else End
PUSHR D4; if() #835 Body End
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0452; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #9 Body End
GOTO 77; while() #9 End
LOAD D2 0.0010; unless() #836 Test
COMPAREV D2 0
GOTOCMP 243 !=; Test 'unless'
LOAD D2 0.0002; unless() #836 Body Start AND if() #837 Test AND while(true) #10 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 227 ==; Test 'if'
LOAD D2 0.0002; if() #837 Body Start
SUBV D2 1
STORE D2 0.0002; if() #837 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0452; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #10 Body [Opt:AlwaysOn] End
GOTO 219; while() #10 End AND unless() #836 Body End
STOREV 0 0; for() #220 setup
LOAD D2 0; for() #220 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 276 ==; for() #220 TestFail?
LOAD D2 0.0002; if() #838 Test AND for() #220 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 257 ==; Test 'if'
LOAD D2 0.0002; if() #838 Body Start
SUBV D2 1
STORE D2 0.0002; if() #838 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0452; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #220 Body End
LOAD D2 0; for() #220 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 244; for() #220 End
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0018
QUIT; void run(int, int, int, int, int, int, int, int) Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #17 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 292 ==; Test 'if'
LOAD D2 0.0001; if() #17 Body Start
STORE D2 0.0002
GOTO 302; if() #17 Body End
LOAD D2 0.0002; if() #65 Test AND if() #17 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 302 ==; Test 'if'
LOAD D2 0; if() #65 Body Start
STORE D2 0.0002; if() #65 Body End
LOAD D2 0.0002; if() #17 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
PUSHV 0; Func[int GetEnemyProperty(npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0.0002; if() #70 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 331 ==
LOAD D2 0
COMPAREV D2 0
GOTOCMP 331 ==
SETV D2 1
GOTO 332
SETV D2 0
COMPAREV D2 0
GOTOCMP 340 ==; Test 'if'
LOAD D2 0; return Start AND if() #70 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
GOTO 404; return End AND if() #70 Body End
LOAD D2 0.0001; if() #71 Test AND if() #70 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 350 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #71 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
GOTO 404; return End AND if() #71 Body End
LOAD D2 0.0001; if() #72 Test AND if() #71 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 360 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #72 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
GOTO 404; return End AND if() #72 Body End
LOAD D2 0.0001; if() #73 Test AND if() #72 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 370 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #73 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
GOTO 404; return End AND if() #73 Body End
LOAD D2 0.0001; if() #74 Test AND if() #73 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 380 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #74 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_JUMP
GOTO 404; return End AND if() #74 Body End
LOAD D2 0.0001; if() #75 Test AND if() #74 Else Start
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 390 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #75 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
GOTO 404; return End AND if() #75 Body End
LOAD D2 0.0001; if() #76 Test AND if() #75 Else Start
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 400 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #76 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
GOTO 404; return End AND if() #76 Body End
LOAD D2 0.0002; return Start AND if() #76 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
POPARGS D5 0.0003; return End AND if() #76 Else End AND if() #75 Else End AND if() #74 Else End AND if() #73 Else End AND if() #72 Else End AND if() #71 Else End AND if() #70 Else End
RETURNFUNC; Func[int GetEnemyProperty(npc, int)] Body End
SETR D4 SP2; Func[int HealthBar_GetHP(npc)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[int GetEnemyProperty(npc, int)] Params Start
PUSHR D2
PUSHV 20; UsrFunc[int GetEnemyProperty(npc, int)] Params End
CALLFUNC 0.0305; UsrFunc[int GetEnemyProperty(npc, int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[int HealthBar_GetHP(npc)] Body End
PUSHV 0; Func[void HealthBar_CapString(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int SizeOfArray(int[])] Params AND for() #218 setup
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #218 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 450 ==; for() #218 TestFail?
LOAD D2 0.0001; if() #813 Test AND for() #218 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 32
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 446 ==; Test 'if'
SETV D2 0; if() #813 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 450; return (Void) AND if() #813 Body End
LOAD D2 0; for() #218 Body End AND for() #218 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 421; for() #218 End
POPARGS D5 0.0002
RETURNFUNC; Func[void HealthBar_CapString(int)] Body End
PUSHARGSV 0 0.0006; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 8 0.0005
LOAD D2 0.0006
ADDV D2 16
STORE D2 0.0004
STOREV 247 0.0003
LOAD D2 0.0006
ADDV D2 19
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 8
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0009; if() #814 Test
COMPAREV D2 0
GOTOCMP 517 <=
SETV D2 1
GOTO 518
SETV D2 0
COMPAREV D2 0
GOTOCMP 557 ==; Test 'if'
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #814 Body Start
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0280; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
PUSHR D2
PUSHV 135
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #814 Body End
LOAD D2 0.0011; if() #815 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 599 ==; Test 'if'
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #815 Body Start
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0280; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
PUSHR D2
PUSHV 134
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #815 Body End
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 8
PUSHV 1
PUSHARGSV 0 0.0004
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0012; if() #816 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 634 ==; Test 'if'
PUSHR D4; if() #816 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
ADDV D2 -6
PUSHR D2
PUSHV 2
PUSHV 12
PUSHV 8
PUSHV 0
LOAD D2 0.0012
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0655; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4; if() #816 Body End
LOAD D2 0.0007; if() #818 Test AND if(true) #817 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 653 ==; Test 'if'
PUSHR D4; if() #818 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
ADDV D2 -6
PUSHR D2
PUSHV 2
PUSHV 12
PUSHV 8
LOAD D2 0.0008
PUSHR D2; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0752; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Call
POP D4; if() #818 Body End
POPARGS D5 0.0013
RETURNFUNC; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body Start
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 8 0
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0002; if() #819 Test
COMPAREV D2 10000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 778 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #819 Body Start
DIVV D2 10000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #819 Body End
LOAD D2 0.0002; if() #820 Test
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 799 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #820 Body Start
DIVV D2 1000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #820 Body End
LOAD D2 0.0002; if() #821 Test
COMPAREV D2 100
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 820 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #821 Body Start
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #821 Body End
LOAD D2 0.0002; if() #822 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 841 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #822 Body Start
DIVV D2 10; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #822 Body End
LOAD D2 0.0002
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0655; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0009
RETURNFUNC; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0002
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND for() #219 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #219 LoopTest
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1049 ==; for() #219 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #219 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0
LOAD D2 0; if() #823 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 925 ==; Test 'if'
LOAD D2 0.0002; if() #823 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0406; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #823 Body End
LOAD D2 0; if() #824 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 949 ==; Test 'if'
LOAD D2 0.0002; if() #824 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0406; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #824 Body End
LOAD D2 0; if() #825 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 973 ==; Test 'if'
LOAD D2 0.0002; if() #825 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0406; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #825 Body End
LOAD D2 0; if() #826 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 997 ==; Test 'if'
LOAD D2 0.0002; if() #826 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0406; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #826 Body End
LOAD D2 0; if() #827 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1021 ==; Test 'if'
LOAD D2 0.0002; if() #827 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0406; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #827 Body End
LOAD D2 0; if() #828 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1045 ==; Test 'if'
LOAD D2 0.0002; if() #828 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0406; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #828 Body End
LOAD D2 0.0001; for() #219 Body End AND for() #219 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 891; for() #219 End
LOAD D2 0.0002; return Start
POPARGS D5 0.0009; return End
RETURNFUNC; Func[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Body End


PUSHR D0; void run(int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR REFFFC; void run(int, int, int, int) Body Start
PUSHARGSV 0 0.0011
SETR D4 SP2
SETV D2 4; InlineFunc[void Waitframes(int)] Params
WAITFRAMESR D2; InlineFunc[void Waitframes(int)] Body
PUSHR D4
LOAD D2 0.0015; UsrFunc[npc HealthBar_GetNPC(int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2; UsrFunc[npc HealthBar_GetNPC(int, int)] Params End
CALLFUNC 0.1015; UsrFunc[npc HealthBar_GetNPC(int, int)] Call
POP D4
STORE D2 0.0010
LOAD D2 0.0010; InlineFunc[bool npc::isValid()] Params AND unless() #852 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23 !=; Test 'unless'
QUIT; InlineFunc[void Quit()] Body AND unless() #852 Body
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0490; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0009
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0490; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0008
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0490; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0007
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0490; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0490; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 1 0.0001; for() #224 setup
LOAD D2 0.0001; for() #224 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 96 ==; for() #224 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #224 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #853 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 92 ==; Test 'if'
LOAD D2 0; if() #446 Test AND if() #853 Body Start
PUSHR D2
LOAD D2 0.0011
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 89 ==; Test 'if'
GOTO 96; break 1; AND if() #446 Body Start
GOTO 92; if() #446 Body End
LOAD D2 0.0002; if() #446 Else Start
ADDV D2 1
STORE D2 0.0002; if() #446 Else End
LOAD D2 0.0001; if() #853 Body End AND for() #224 Body End AND for() #224 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 57; for() #224 End
ALLOCATEMEMV D2 256 0
STORE D2 0.0001
LOAD D2 0.0014; if() #447 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 109 ==; Test 'if'
LOAD D2 0.0014; InlineFunc[void Game::GetMessage(int, char32[])] Params Start AND if() #447 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void Game::GetMessage(int, char32[])] Params End
POP D3; InlineFunc[void Game::GetMessage(int, char32[])] Body Start
GETMESSAGE D3 D2; InlineFunc[void Game::GetMessage(int, char32[])] Body End
GOTO 114; if() #447 Body End
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start AND if() #447 Else Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End AND if() #447 Else End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_CapString(int)] Params Start
PUSHR D2; UsrFunc[void HealthBar_CapString(int)] Params End
CALLFUNC 0.0499; UsrFunc[void HealthBar_CapString(int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
LOAD D2 0.0006; while() #11 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 267 ==; Test 'while'
LOAD D2 0.0010; InlineFunc[bool npc::isValid()] Params AND if() #448 Test AND while() #11 Body Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 150 ==; Test 'if'
PUSHR D4; InlineFunc[int Max(int, int)] Params Start AND if() #448 Body Start
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0490; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0009
GOTO 152; if() #448 Body End
SETV D2 0; if() #448 Else Start
STORE D2 0.0009; if() #448 Else End
LOAD D2 0.0003; if() #854 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 160 ==; Test 'if'
LOAD D2 0.0003; if() #854 Body Start
SUBV D2 1
STORE D2 0.0003; if() #854 Body End
LOAD D2 0.0009; if() #855 Test
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 206 ==; Test 'if'
LOAD D2 0.0009; if() #856 Test AND if() #855 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 202 ==; Test 'if'
LOAD D2 0.0003; if() #449 Test AND if() #856 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 193 ==; Test 'if'
LOAD D2 0.0004; if() #449 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0004
GOTO 200; if() #449 Body End
LOAD D2 0.0007; if() #449 Else Start
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004; if() #449 Else End
SETV D2 96
STORE D2 0.0003; if() #856 Body End
LOAD D2 0.0007
STORE D2 0.0005
LOAD D2 0.0009
STORE D2 0.0007; if() #855 Body End
LOAD D2 0.0006; if() #857 Test
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 242 ==; Test 'if'
LOAD D2 0.0006; if() #450 Test AND if() #857 Body Start
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 240 ==; Test 'if'
LOAD D2 0.0006; InlineFunc[int Max(int, int)] Params Start AND if() #450 Body Start
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
DIVV D2 16
POP D3
SUBR D3 D2
PUSHVARGR D3
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0006
GOTO 242; if() #450 Body End
LOAD D2 0.0009; if() #450 Else Start
STORE D2 0.0006; if() #450 Else End
PUSHR D4; if() #857 Body End
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 12
SETV D2 12
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0581; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #11 Body End
GOTO 131; while() #11 End
SETV D2 1
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
LOAD D2 0.0003; if() #858 Test AND while(true) #12 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 287 ==; Test 'if'
LOAD D2 0.0003; if() #858 Body Start
SUBV D2 1
STORE D2 0.0003; if() #858 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 12
SETV D2 12
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0581; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0012; if() #859 Test
COMPAREV D2 0
GOTOCMP 318 ==; Test 'if'
PUSHR D4; if() #860 Test AND if() #859 Body Start
LOAD D2 0.0011; UsrFunc[bool HealthBar_CheckDone(ffc)] Params Start
PUSHR D2; UsrFunc[bool HealthBar_CheckDone(ffc)] Params End
CALLFUNC 0.0536; UsrFunc[bool HealthBar_CheckDone(ffc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 320 !=; Test 'if' AND break 1; AND if() #860 Body
WAITFRAME; if() #859 Body End AND InlineFunc[void Waitframe()] Body AND while(true) #12 Body [Opt:AlwaysOn] End
GOTO 279; while() #12 End
STOREV 0 0; for() #225 setup
LOAD D2 0; for() #225 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 360 ==; for() #225 TestFail?
LOAD D2 0.0003; if() #861 Test AND for() #225 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 334 ==; Test 'if'
LOAD D2 0.0003; if() #861 Body Start
SUBV D2 1
STORE D2 0.0003; if() #861 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 12
SETV D2 12
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0581; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #225 Body End
LOAD D2 0; for() #225 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 321; for() #225 End
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0016
QUIT; void run(int, int, int, int) Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #17 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 376 ==; Test 'if'
LOAD D2 0.0001; if() #17 Body Start
STORE D2 0.0002
GOTO 386; if() #17 Body End
LOAD D2 0.0002; if() #65 Test AND if() #17 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 386 ==; Test 'if'
LOAD D2 0; if() #65 Body Start
STORE D2 0.0002; if() #65 Body End
LOAD D2 0.0002; if() #17 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
PUSHV 0; Func[int GetEnemyProperty(npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0.0002; if() #70 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 415 ==
LOAD D2 0
COMPAREV D2 0
GOTOCMP 415 ==
SETV D2 1
GOTO 416
SETV D2 0
COMPAREV D2 0
GOTOCMP 424 ==; Test 'if'
LOAD D2 0; return Start AND if() #70 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
GOTO 488; return End AND if() #70 Body End
LOAD D2 0.0001; if() #71 Test AND if() #70 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 434 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #71 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
GOTO 488; return End AND if() #71 Body End
LOAD D2 0.0001; if() #72 Test AND if() #71 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 444 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #72 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
GOTO 488; return End AND if() #72 Body End
LOAD D2 0.0001; if() #73 Test AND if() #72 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 454 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #73 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
GOTO 488; return End AND if() #73 Body End
LOAD D2 0.0001; if() #74 Test AND if() #73 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 464 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #74 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_JUMP
GOTO 488; return End AND if() #74 Body End
LOAD D2 0.0001; if() #75 Test AND if() #74 Else Start
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 474 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #75 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
GOTO 488; return End AND if() #75 Body End
LOAD D2 0.0001; if() #76 Test AND if() #75 Else Start
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 484 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #76 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
GOTO 488; return End AND if() #76 Body End
LOAD D2 0.0002; return Start AND if() #76 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
POPARGS D5 0.0003; return End AND if() #76 Else End AND if() #75 Else End AND if() #74 Else End AND if() #73 Else End AND if() #72 Else End AND if() #71 Else End AND if() #70 Else End
RETURNFUNC; Func[int GetEnemyProperty(npc, int)] Body End
SETR D4 SP2; Func[int HealthBar_GetHP(npc)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[int GetEnemyProperty(npc, int)] Params Start
PUSHR D2
PUSHV 20; UsrFunc[int GetEnemyProperty(npc, int)] Params End
CALLFUNC 0.0389; UsrFunc[int GetEnemyProperty(npc, int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[int HealthBar_GetHP(npc)] Body End
PUSHV 0; Func[void HealthBar_CapString(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int SizeOfArray(int[])] Params AND for() #221 setup
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #221 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 534 ==; for() #221 TestFail?
LOAD D2 0.0001; if() #839 Test AND for() #221 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 32
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 530 ==; Test 'if'
SETV D2 0; if() #839 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 534; return (Void) AND if() #839 Body End
LOAD D2 0; for() #221 Body End AND for() #221 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 505; for() #221 End
POPARGS D5 0.0002
RETURNFUNC; Func[void HealthBar_CapString(int)] Body End
PUSHARGSV 0 0.0002; Func[bool HealthBar_CheckDone(ffc)] Body Start
SETR D4 SP2
STOREV 1 0.0001; for() #222 setup
LOAD D2 0.0001; for() #222 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 578 ==; for() #222 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #222 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #840 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 574 ==; Test 'if'
LOAD D2 0; if() #841 Test AND if() #840 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 574 ==; Test 'if'
SETV D2 0; return Start AND if() #841 Body Start
GOTO 579; return End AND if() #841 Body End
LOAD D2 0.0001; if() #840 Body End AND for() #222 Body End AND for() #222 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 539; for() #222 End
SETV D2 1; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool HealthBar_CheckDone(ffc)] Body End
PUSHARGSV 0 0.0006; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 8 0.0005
LOAD D2 0.0006
ADDV D2 16
STORE D2 0.0004
STOREV 247 0.0003
LOAD D2 0.0006
ADDV D2 19
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 8
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0009; if() #842 Test
COMPAREV D2 0
GOTOCMP 646 <=
SETV D2 1
GOTO 647
SETV D2 0
COMPAREV D2 0
GOTOCMP 686 ==; Test 'if'
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #842 Body Start
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0364; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
PUSHR D2
PUSHV 135
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #842 Body End
LOAD D2 0.0011; if() #843 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 728 ==; Test 'if'
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #843 Body Start
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0364; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
PUSHR D2
PUSHV 134
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #843 Body End
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 8
PUSHV 1
PUSHARGSV 0 0.0004
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0012; if() #844 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 763 ==; Test 'if'
PUSHR D4; if() #844 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
ADDV D2 -6
PUSHR D2
PUSHV 2
PUSHV 12
PUSHV 8
PUSHV 0
LOAD D2 0.0012
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0784; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4; if() #844 Body End
LOAD D2 0.0007; if() #846 Test AND if(true) #845 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 782 ==; Test 'if'
PUSHR D4; if() #846 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
ADDV D2 -6
PUSHR D2
PUSHV 2
PUSHV 12
PUSHV 8
LOAD D2 0.0008
PUSHR D2; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0881; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Call
POP D4; if() #846 Body End
POPARGS D5 0.0013
RETURNFUNC; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body Start
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 8 0
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0002; if() #847 Test
COMPAREV D2 10000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 907 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #847 Body Start
DIVV D2 10000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #847 Body End
LOAD D2 0.0002; if() #848 Test
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 928 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #848 Body Start
DIVV D2 1000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #848 Body End
LOAD D2 0.0002; if() #849 Test
COMPAREV D2 100
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 949 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #849 Body Start
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #849 Body End
LOAD D2 0.0002; if() #850 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 970 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #850 Body Start
DIVV D2 10; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #850 Body End
LOAD D2 0.0002
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0784; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0009
RETURNFUNC; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[npc HealthBar_GetNPC(int, int)] Body Start
SETR D4 SP2
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND for() #223 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #223 LoopTest
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1055 ==; for() #223 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #223 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0
LOAD D2 0; if() #851 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1051 ==; Test 'if'
LOAD D2 0.0002; if() #445 Test AND if() #851 Body Start
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1048 ==; Test 'if'
LOAD D2 0; return Start AND if() #445 Body Start
GOTO 1055; return End
GOTO 1051; if() #445 Body End
LOAD D2 0.0002; if() #445 Else Start
SUBV D2 1
STORE D2 0.0002; if() #445 Else End
LOAD D2 0.0001; if() #851 Body End AND for() #223 Body End AND for() #223 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 1019; for() #223 End
POPARGS D5 0.0004
RETURNFUNC; Func[npc HealthBar_GetNPC(int, int)] Body End


PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
PUSHARGSV 0 0.0009
SETR D4 SP2
SETV D2 4; InlineFunc[void Waitframes(int)] Params
WAITFRAMESR D2; InlineFunc[void Waitframes(int)] Body
PUSHR D4; if() #881 Test
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 0.1013; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #881 Body
PUSHR D4
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 0.1013; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008
STORE D2 0.0007
LOAD D2 0.0008
STORE D2 0.0006
LOAD D2 0.0008
STORE D2 0.0005
LOAD D2 0.0008
STORE D2 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
ALLOCATEMEMV D2 256 0
STORE D2 0.0001
LOAD D2 0.0011; if() #882 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 72 ==; Test 'if'
LOAD D2 0.0011; InlineFunc[void Game::GetMessage(int, char32[])] Params Start AND if() #882 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void Game::GetMessage(int, char32[])] Params End
POP D3; InlineFunc[void Game::GetMessage(int, char32[])] Body Start
GETMESSAGE D3 D2; InlineFunc[void Game::GetMessage(int, char32[])] Body End AND if() #882 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_CapString(int)] Params Start
PUSHR D2; UsrFunc[void HealthBar_CapString(int)] Params End
CALLFUNC 0.0415; UsrFunc[void HealthBar_CapString(int)] Call
POP D4
LOAD D2 0.0005; while() #13 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 216 ==; Test 'while'
PUSHR D4; while() #13 Body Start
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 0.1013; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0007; if() #883 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 108 ==; Test 'if'
LOAD D2 0.0008; if() #883 Body Start
STORE D2 0.0007; if() #883 Body End
LOAD D2 0.0002; if() #884 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 116 ==; Test 'if'
LOAD D2 0.0002; if() #884 Body Start
SUBV D2 1
STORE D2 0.0002; if() #884 Body End
LOAD D2 0.0008; if() #885 Test
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 162 ==; Test 'if'
LOAD D2 0.0008; if() #886 Test AND if() #885 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 158 ==; Test 'if'
LOAD D2 0.0002; if() #457 Test AND if() #886 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 149 ==; Test 'if'
LOAD D2 0.0003; if() #457 Body Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 156; if() #457 Body End
LOAD D2 0.0006; if() #457 Else Start
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003; if() #457 Else End
SETV D2 96
STORE D2 0.0002; if() #886 Body End
LOAD D2 0.0006
STORE D2 0.0004
LOAD D2 0.0008
STORE D2 0.0006; if() #885 Body End
LOAD D2 0.0005; if() #887 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 198 ==; Test 'if'
LOAD D2 0.0005; if() #458 Test AND if() #887 Body Start
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 196 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Max(int, int)] Params Start AND if() #458 Body Start
PUSHR D2
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
DIVV D2 16
POP D3
SUBR D3 D2
PUSHVARGR D3
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0005
GOTO 198; if() #458 Body End
LOAD D2 0.0008; if() #458 Else Start
STORE D2 0.0005; if() #458 Else End
PUSHR D4; if() #887 Body End
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0452; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #13 Body End
GOTO 77; while() #13 End
LOAD D2 0.0010; unless() #888 Test
COMPAREV D2 0
GOTOCMP 243 !=; Test 'unless'
LOAD D2 0.0002; unless() #888 Body Start AND if() #889 Test AND while(true) #14 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 227 ==; Test 'if'
LOAD D2 0.0002; if() #889 Body Start
SUBV D2 1
STORE D2 0.0002; if() #889 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0452; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #14 Body [Opt:AlwaysOn] End
GOTO 219; while() #14 End AND unless() #888 Body End
STOREV 0 0; for() #229 setup
LOAD D2 0; for() #229 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 276 ==; for() #229 TestFail?
LOAD D2 0.0002; if() #890 Test AND for() #229 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 257 ==; Test 'if'
LOAD D2 0.0002; if() #890 Body Start
SUBV D2 1
STORE D2 0.0002; if() #890 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0452; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #229 Body End
LOAD D2 0; for() #229 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 244; for() #229 End
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0018
QUIT; void run(int, int, int, int, int, int, int, int) Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #17 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 292 ==; Test 'if'
LOAD D2 0.0001; if() #17 Body Start
STORE D2 0.0002
GOTO 302; if() #17 Body End
LOAD D2 0.0002; if() #65 Test AND if() #17 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 302 ==; Test 'if'
LOAD D2 0; if() #65 Body Start
STORE D2 0.0002; if() #65 Body End
LOAD D2 0.0002; if() #17 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
PUSHV 0; Func[int GetEnemyProperty(npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0.0002; if() #70 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 331 ==
LOAD D2 0
COMPAREV D2 0
GOTOCMP 331 ==
SETV D2 1
GOTO 332
SETV D2 0
COMPAREV D2 0
GOTOCMP 340 ==; Test 'if'
LOAD D2 0; return Start AND if() #70 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
GOTO 404; return End AND if() #70 Body End
LOAD D2 0.0001; if() #71 Test AND if() #70 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 350 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #71 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
GOTO 404; return End AND if() #71 Body End
LOAD D2 0.0001; if() #72 Test AND if() #71 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 360 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #72 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
GOTO 404; return End AND if() #72 Body End
LOAD D2 0.0001; if() #73 Test AND if() #72 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 370 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #73 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
GOTO 404; return End AND if() #73 Body End
LOAD D2 0.0001; if() #74 Test AND if() #73 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 380 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #74 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_JUMP
GOTO 404; return End AND if() #74 Body End
LOAD D2 0.0001; if() #75 Test AND if() #74 Else Start
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 390 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #75 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
GOTO 404; return End AND if() #75 Body End
LOAD D2 0.0001; if() #76 Test AND if() #75 Else Start
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 400 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #76 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
GOTO 404; return End AND if() #76 Body End
LOAD D2 0.0002; return Start AND if() #76 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
POPARGS D5 0.0003; return End AND if() #76 Else End AND if() #75 Else End AND if() #74 Else End AND if() #73 Else End AND if() #72 Else End AND if() #71 Else End AND if() #70 Else End
RETURNFUNC; Func[int GetEnemyProperty(npc, int)] Body End
SETR D4 SP2; Func[int HealthBar_GetHP(npc)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[int GetEnemyProperty(npc, int)] Params Start
PUSHR D2
PUSHV 20; UsrFunc[int GetEnemyProperty(npc, int)] Params End
CALLFUNC 0.0305; UsrFunc[int GetEnemyProperty(npc, int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[int HealthBar_GetHP(npc)] Body End
PUSHV 0; Func[void HealthBar_CapString(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int SizeOfArray(int[])] Params AND for() #226 setup
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #226 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 450 ==; for() #226 TestFail?
LOAD D2 0.0001; if() #862 Test AND for() #226 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 32
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 446 ==; Test 'if'
SETV D2 0; if() #862 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 450; return (Void) AND if() #862 Body End
LOAD D2 0; for() #226 Body End AND for() #226 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 421; for() #226 End
POPARGS D5 0.0002
RETURNFUNC; Func[void HealthBar_CapString(int)] Body End
PUSHARGSV 0 0.0003; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 16 0.0002
STOREV 16 0.0001
LOAD D2 0.0002
ADDV D2 224
SUBV D2 1
STORE D2 0
PUSHR D4; if(true) #863 [Opt:AlwaysOn]
PUSHV 6; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 5
PUSHV 52080
PUSHV 52100
PUSHV 52120
PUSHV 52004
PUSHV 52006
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0552; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 6; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 5
PUSHV 52020
PUSHV 52040
PUSHV 52060
PUSHV 52000
PUSHV 52002
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0552; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0009; if() #865 Test AND unless(false) #864 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 527 ==; Test 'if'
PUSHR D4; if() #865 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 -6
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 14
PUSHV 12
PUSHV 8
PUSHV 0
LOAD D2 0.0009
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0782; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4; if() #865 Body End
LOAD D2 0.0004; if() #867 Test AND if(true) #866 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 550 ==; Test 'if'
PUSHR D4; if() #867 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params Start
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
ADDV D2 -6
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 14
PUSHV 12
PUSHV 8
LOAD D2 0.0005
PUSHR D2; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0879; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Call
POP D4; if() #867 Body End
POPARGS D5 0.0010
RETURNFUNC; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0008; Func[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
LOAD D2 0.0008
DIVV D2 14
STORE D2 0.0004
PUSHR D4
LOAD D2 0.0009; InlineFunc[int Floor(int)] Params Start AND UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
PUSHV 0
PUSHV 14; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0280; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0004
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
MULTV D2 17
PUSHR D2
PUSHV 0
PUSHV 16; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0280; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #872 Test
COMPAREV D2 16
GOTOCMP 611 !=
LOAD D2 0.0009
COMPAREV D2 0
GOTOCMP 611 <=
LOAD D2 0.0003
COMPAREV D2 0
GOTOCMP 611 !=
SETV D2 1
GOTO 612
SETV D2 0
COMPAREV D2 0
GOTOCMP 616 ==; Test 'if'
SETV D2 15; if() #872 Body Start
STORE D2 0.0001; if() #872 Body End
STOREV 0 0; for() #227 setup
LOAD D2 0; for() #227 LoopTest
COMPAREV D2 14
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 707 ==; for() #227 TestFail?
LOAD D2 0.0017; for() #227 Body Start
STORE D2 0.0007
LOAD D2 0.0016
STORE D2 0.0006
LOAD D2 0.0007; if(false) #451 [Opt:AlwaysOff]
PUSHR D2
LOAD D2 0
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0013
STORE D2 0.0005
LOAD D2 0; if() #452 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 662 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #452 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 703; if() #452 Body End
LOAD D2 0; if() #453 Test AND if() #452 Else Start
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 688 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #453 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 703; if() #453 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #453 Else Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 17
SUBV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #453 Else End
LOAD D2 0; if() #452 Else End AND for() #227 Body End AND for() #227 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 617; for() #227 End
LOAD D2 0.0009; if() #455 Test AND if(false) #454 [Opt:AlwaysOff] AND if(true) #874 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 727 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #455 Body Start
PUSHR D2
LOAD D2 0.0017
SUBV D2 16
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 742; if() #455 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #455 Else Start
PUSHR D2
LOAD D2 0.0017
SUBV D2 16
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0011
ADDV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #455 Else End
LOAD D2 0.0009; if() #456 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 766 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #456 Body Start
PUSHR D2
LOAD D2 0.0017
ADDV D2 224
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0010
ADDV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 780; if() #456 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #456 Else Start
PUSHR D2
LOAD D2 0.0017
ADDV D2 224
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #456 Else End
POPARGS D5 0.0019
RETURNFUNC; Func[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body Start
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 8 0
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0002; if() #868 Test
COMPAREV D2 10000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 905 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #868 Body Start
DIVV D2 10000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #868 Body End
LOAD D2 0.0002; if() #869 Test
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 926 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #869 Body Start
DIVV D2 1000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #869 Body End
LOAD D2 0.0002; if() #870 Test
COMPAREV D2 100
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 947 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #870 Body Start
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #870 Body End
LOAD D2 0.0002; if() #871 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 968 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #871 Body Start
DIVV D2 10; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #871 Body End
LOAD D2 0.0002
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0782; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0009
RETURNFUNC; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0002
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND for() #228 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #228 LoopTest
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1176 ==; for() #228 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #228 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0
LOAD D2 0; if() #875 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1052 ==; Test 'if'
LOAD D2 0.0002; if() #875 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0406; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #875 Body End
LOAD D2 0; if() #876 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1076 ==; Test 'if'
LOAD D2 0.0002; if() #876 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0406; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #876 Body End
LOAD D2 0; if() #877 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1100 ==; Test 'if'
LOAD D2 0.0002; if() #877 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0406; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #877 Body End
LOAD D2 0; if() #878 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1124 ==; Test 'if'
LOAD D2 0.0002; if() #878 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0406; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #878 Body End
LOAD D2 0; if() #879 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1148 ==; Test 'if'
LOAD D2 0.0002; if() #879 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0406; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #879 Body End
LOAD D2 0; if() #880 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1172 ==; Test 'if'
LOAD D2 0.0002; if() #880 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0406; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #880 Body End
LOAD D2 0.0001; for() #228 Body End AND for() #228 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 1018; for() #228 End
LOAD D2 0.0002; return Start
POPARGS D5 0.0009; return End
RETURNFUNC; Func[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Body End


PUSHR D0; void run(int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR REFFFC; void run(int, int, int, int) Body Start
PUSHARGSV 0 0.0011
SETR D4 SP2
SETV D2 4; InlineFunc[void Waitframes(int)] Params
WAITFRAMESR D2; InlineFunc[void Waitframes(int)] Body
PUSHR D4
LOAD D2 0.0015; UsrFunc[npc HealthBar_GetNPC(int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2; UsrFunc[npc HealthBar_GetNPC(int, int)] Params End
CALLFUNC 0.1142; UsrFunc[npc HealthBar_GetNPC(int, int)] Call
POP D4
STORE D2 0.0010
LOAD D2 0.0010; InlineFunc[bool npc::isValid()] Params AND unless() #907 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23 !=; Test 'unless'
QUIT; InlineFunc[void Quit()] Body AND unless() #907 Body
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0490; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0009
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0490; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0008
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0490; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0007
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0490; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0490; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 1 0.0001; for() #234 setup
LOAD D2 0.0001; for() #234 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 96 ==; for() #234 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #234 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #908 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 92 ==; Test 'if'
LOAD D2 0; if() #466 Test AND if() #908 Body Start
PUSHR D2
LOAD D2 0.0011
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 89 ==; Test 'if'
GOTO 96; break 1; AND if() #466 Body Start
GOTO 92; if() #466 Body End
LOAD D2 0.0002; if() #466 Else Start
ADDV D2 1
STORE D2 0.0002; if() #466 Else End
LOAD D2 0.0001; if() #908 Body End AND for() #234 Body End AND for() #234 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 57; for() #234 End
ALLOCATEMEMV D2 256 0
STORE D2 0.0001
LOAD D2 0.0014; if() #467 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 109 ==; Test 'if'
LOAD D2 0.0014; InlineFunc[void Game::GetMessage(int, char32[])] Params Start AND if() #467 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void Game::GetMessage(int, char32[])] Params End
POP D3; InlineFunc[void Game::GetMessage(int, char32[])] Body Start
GETMESSAGE D3 D2; InlineFunc[void Game::GetMessage(int, char32[])] Body End
GOTO 114; if() #467 Body End
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start AND if() #467 Else Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End AND if() #467 Else End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_CapString(int)] Params Start
PUSHR D2; UsrFunc[void HealthBar_CapString(int)] Params End
CALLFUNC 0.0499; UsrFunc[void HealthBar_CapString(int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
LOAD D2 0.0006; while() #15 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 267 ==; Test 'while'
LOAD D2 0.0010; InlineFunc[bool npc::isValid()] Params AND if() #468 Test AND while() #15 Body Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 150 ==; Test 'if'
PUSHR D4; InlineFunc[int Max(int, int)] Params Start AND if() #468 Body Start
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0490; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0009
GOTO 152; if() #468 Body End
SETV D2 0; if() #468 Else Start
STORE D2 0.0009; if() #468 Else End
LOAD D2 0.0003; if() #909 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 160 ==; Test 'if'
LOAD D2 0.0003; if() #909 Body Start
SUBV D2 1
STORE D2 0.0003; if() #909 Body End
LOAD D2 0.0009; if() #910 Test
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 206 ==; Test 'if'
LOAD D2 0.0009; if() #911 Test AND if() #910 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 202 ==; Test 'if'
LOAD D2 0.0003; if() #469 Test AND if() #911 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 193 ==; Test 'if'
LOAD D2 0.0004; if() #469 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0004
GOTO 200; if() #469 Body End
LOAD D2 0.0007; if() #469 Else Start
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004; if() #469 Else End
SETV D2 96
STORE D2 0.0003; if() #911 Body End
LOAD D2 0.0007
STORE D2 0.0005
LOAD D2 0.0009
STORE D2 0.0007; if() #910 Body End
LOAD D2 0.0006; if() #912 Test
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 242 ==; Test 'if'
LOAD D2 0.0006; if() #470 Test AND if() #912 Body Start
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 240 ==; Test 'if'
LOAD D2 0.0006; InlineFunc[int Max(int, int)] Params Start AND if() #470 Body Start
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
DIVV D2 16
POP D3
SUBR D3 D2
PUSHVARGR D3
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0006
GOTO 242; if() #470 Body End
LOAD D2 0.0009; if() #470 Else Start
STORE D2 0.0006; if() #470 Else End
PUSHR D4; if() #912 Body End
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0581; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #15 Body End
GOTO 131; while() #15 End
SETV D2 1
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
LOAD D2 0.0003; if() #913 Test AND while(true) #16 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 287 ==; Test 'if'
LOAD D2 0.0003; if() #913 Body Start
SUBV D2 1
STORE D2 0.0003; if() #913 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0581; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0012; if() #914 Test
COMPAREV D2 0
GOTOCMP 318 ==; Test 'if'
PUSHR D4; if() #915 Test AND if() #914 Body Start
LOAD D2 0.0011; UsrFunc[bool HealthBar_CheckDone(ffc)] Params Start
PUSHR D2; UsrFunc[bool HealthBar_CheckDone(ffc)] Params End
CALLFUNC 0.0536; UsrFunc[bool HealthBar_CheckDone(ffc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 320 !=; Test 'if' AND break 1; AND if() #915 Body
WAITFRAME; if() #914 Body End AND InlineFunc[void Waitframe()] Body AND while(true) #16 Body [Opt:AlwaysOn] End
GOTO 279; while() #16 End
STOREV 0 0; for() #235 setup
LOAD D2 0; for() #235 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 360 ==; for() #235 TestFail?
LOAD D2 0.0003; if() #916 Test AND for() #235 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 334 ==; Test 'if'
LOAD D2 0.0003; if() #916 Body Start
SUBV D2 1
STORE D2 0.0003; if() #916 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0581; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #235 Body End
LOAD D2 0; for() #235 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 321; for() #235 End
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0016
QUIT; void run(int, int, int, int) Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #17 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 376 ==; Test 'if'
LOAD D2 0.0001; if() #17 Body Start
STORE D2 0.0002
GOTO 386; if() #17 Body End
LOAD D2 0.0002; if() #65 Test AND if() #17 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 386 ==; Test 'if'
LOAD D2 0; if() #65 Body Start
STORE D2 0.0002; if() #65 Body End
LOAD D2 0.0002; if() #17 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
PUSHV 0; Func[int GetEnemyProperty(npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0.0002; if() #70 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 415 ==
LOAD D2 0
COMPAREV D2 0
GOTOCMP 415 ==
SETV D2 1
GOTO 416
SETV D2 0
COMPAREV D2 0
GOTOCMP 424 ==; Test 'if'
LOAD D2 0; return Start AND if() #70 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
GOTO 488; return End AND if() #70 Body End
LOAD D2 0.0001; if() #71 Test AND if() #70 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 434 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #71 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
GOTO 488; return End AND if() #71 Body End
LOAD D2 0.0001; if() #72 Test AND if() #71 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 444 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #72 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
GOTO 488; return End AND if() #72 Body End
LOAD D2 0.0001; if() #73 Test AND if() #72 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 454 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #73 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
GOTO 488; return End AND if() #73 Body End
LOAD D2 0.0001; if() #74 Test AND if() #73 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 464 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #74 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_JUMP
GOTO 488; return End AND if() #74 Body End
LOAD D2 0.0001; if() #75 Test AND if() #74 Else Start
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 474 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #75 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
GOTO 488; return End AND if() #75 Body End
LOAD D2 0.0001; if() #76 Test AND if() #75 Else Start
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 484 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #76 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
GOTO 488; return End AND if() #76 Body End
LOAD D2 0.0002; return Start AND if() #76 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
POPARGS D5 0.0003; return End AND if() #76 Else End AND if() #75 Else End AND if() #74 Else End AND if() #73 Else End AND if() #72 Else End AND if() #71 Else End AND if() #70 Else End
RETURNFUNC; Func[int GetEnemyProperty(npc, int)] Body End
SETR D4 SP2; Func[int HealthBar_GetHP(npc)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[int GetEnemyProperty(npc, int)] Params Start
PUSHR D2
PUSHV 20; UsrFunc[int GetEnemyProperty(npc, int)] Params End
CALLFUNC 0.0389; UsrFunc[int GetEnemyProperty(npc, int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[int HealthBar_GetHP(npc)] Body End
PUSHV 0; Func[void HealthBar_CapString(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int SizeOfArray(int[])] Params AND for() #230 setup
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #230 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 534 ==; for() #230 TestFail?
LOAD D2 0.0001; if() #891 Test AND for() #230 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 32
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 530 ==; Test 'if'
SETV D2 0; if() #891 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 534; return (Void) AND if() #891 Body End
LOAD D2 0; for() #230 Body End AND for() #230 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 505; for() #230 End
POPARGS D5 0.0002
RETURNFUNC; Func[void HealthBar_CapString(int)] Body End
PUSHARGSV 0 0.0002; Func[bool HealthBar_CheckDone(ffc)] Body Start
SETR D4 SP2
STOREV 1 0.0001; for() #231 setup
LOAD D2 0.0001; for() #231 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 578 ==; for() #231 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #231 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #892 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 574 ==; Test 'if'
LOAD D2 0; if() #893 Test AND if() #892 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 574 ==; Test 'if'
SETV D2 0; return Start AND if() #893 Body Start
GOTO 579; return End AND if() #893 Body End
LOAD D2 0.0001; if() #892 Body End AND for() #231 Body End AND for() #231 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 539; for() #231 End
SETV D2 1; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool HealthBar_CheckDone(ffc)] Body End
PUSHARGSV 0 0.0003; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 16 0.0002
STOREV 16 0.0001
LOAD D2 0.0002
ADDV D2 224
SUBV D2 1
STORE D2 0
PUSHR D4; if(true) #894 [Opt:AlwaysOn]
PUSHV 6; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 5
PUSHV 52080
PUSHV 52100
PUSHV 52120
PUSHV 52004
PUSHV 52006
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0681; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 6; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 5
PUSHV 52020
PUSHV 52040
PUSHV 52060
PUSHV 52000
PUSHV 52002
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0681; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0009; if() #896 Test AND unless(false) #895 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 656 ==; Test 'if'
PUSHR D4; if() #896 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 -6
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 14
PUSHV 12
PUSHV 8
PUSHV 0
LOAD D2 0.0009
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0911; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4; if() #896 Body End
LOAD D2 0.0004; if() #898 Test AND if(true) #897 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 679 ==; Test 'if'
PUSHR D4; if() #898 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params Start
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
ADDV D2 -6
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 14
PUSHV 12
PUSHV 8
LOAD D2 0.0005
PUSHR D2; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1008; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Call
POP D4; if() #898 Body End
POPARGS D5 0.0010
RETURNFUNC; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0008; Func[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
LOAD D2 0.0008
DIVV D2 14
STORE D2 0.0004
PUSHR D4
LOAD D2 0.0009; InlineFunc[int Floor(int)] Params Start AND UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
PUSHV 0
PUSHV 14; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0364; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0004
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
MULTV D2 17
PUSHR D2
PUSHV 0
PUSHV 16; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0364; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #903 Test
COMPAREV D2 16
GOTOCMP 740 !=
LOAD D2 0.0009
COMPAREV D2 0
GOTOCMP 740 <=
LOAD D2 0.0003
COMPAREV D2 0
GOTOCMP 740 !=
SETV D2 1
GOTO 741
SETV D2 0
COMPAREV D2 0
GOTOCMP 745 ==; Test 'if'
SETV D2 15; if() #903 Body Start
STORE D2 0.0001; if() #903 Body End
STOREV 0 0; for() #232 setup
LOAD D2 0; for() #232 LoopTest
COMPAREV D2 14
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 836 ==; for() #232 TestFail?
LOAD D2 0.0017; for() #232 Body Start
STORE D2 0.0007
LOAD D2 0.0016
STORE D2 0.0006
LOAD D2 0.0007; if(false) #459 [Opt:AlwaysOff]
PUSHR D2
LOAD D2 0
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0013
STORE D2 0.0005
LOAD D2 0; if() #460 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 791 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #460 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 832; if() #460 Body End
LOAD D2 0; if() #461 Test AND if() #460 Else Start
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 817 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #461 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 832; if() #461 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #461 Else Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 17
SUBV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #461 Else End
LOAD D2 0; if() #460 Else End AND for() #232 Body End AND for() #232 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 746; for() #232 End
LOAD D2 0.0009; if() #463 Test AND if(false) #462 [Opt:AlwaysOff] AND if(true) #905 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 856 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #463 Body Start
PUSHR D2
LOAD D2 0.0017
SUBV D2 16
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 871; if() #463 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #463 Else Start
PUSHR D2
LOAD D2 0.0017
SUBV D2 16
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0011
ADDV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #463 Else End
LOAD D2 0.0009; if() #464 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 895 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #464 Body Start
PUSHR D2
LOAD D2 0.0017
ADDV D2 224
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0010
ADDV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 909; if() #464 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #464 Else Start
PUSHR D2
LOAD D2 0.0017
ADDV D2 224
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #464 Else End
POPARGS D5 0.0019
RETURNFUNC; Func[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body Start
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 8 0
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0002; if() #899 Test
COMPAREV D2 10000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1034 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #899 Body Start
DIVV D2 10000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #899 Body End
LOAD D2 0.0002; if() #900 Test
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1055 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #900 Body Start
DIVV D2 1000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #900 Body End
LOAD D2 0.0002; if() #901 Test
COMPAREV D2 100
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1076 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #901 Body Start
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #901 Body End
LOAD D2 0.0002; if() #902 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1097 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #902 Body Start
DIVV D2 10; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #902 Body End
LOAD D2 0.0002
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0911; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0009
RETURNFUNC; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[npc HealthBar_GetNPC(int, int)] Body Start
SETR D4 SP2
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND for() #233 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #233 LoopTest
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1182 ==; for() #233 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #233 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0
LOAD D2 0; if() #906 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1178 ==; Test 'if'
LOAD D2 0.0002; if() #465 Test AND if() #906 Body Start
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1175 ==; Test 'if'
LOAD D2 0; return Start AND if() #465 Body Start
GOTO 1182; return End
GOTO 1178; if() #465 Body End
LOAD D2 0.0002; if() #465 Else Start
SUBV D2 1
STORE D2 0.0002; if() #465 Else End
LOAD D2 0.0001; if() #906 Body End AND for() #233 Body End AND for() #233 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 1146; for() #233 End
POPARGS D5 0.0004
RETURNFUNC; Func[npc HealthBar_GetNPC(int, int)] Body End


SETV GD8 0; void run() Body Start
SETV GD9 0
SETV GD11 0
SETV GD10 0
SETV GD4 0
SETV GD14 0
SETV GD5 0
SETV GD13 0
SETV GD12 0
SETV GD6 0
SETV GD7 0
SETV GD1 0
SETV GD2 0
SETV GD3 0
ALLOCATEGMEMV D2 25 0
SETR GD25 D2
SETV GD15 0
SETV GD16 0
SETV GD20 0
SETV GD17 0
SETV GD21 0
SETV GD18 0
SETV GD19 0
ALLOCATEGMEMV D2 32 0
SETR GD24 D2
SETV GD22 0
SETV GD23 0
ALLOCATEGMEMV D2 8 0
SETR GD26 D2
ALLOCATEGMEMV D2 1000 0
SETR GD27 D2
QUIT; void run() Body End
