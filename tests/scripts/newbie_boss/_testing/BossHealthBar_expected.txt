Compiling 'BossHealthBar.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
ZQ_BUFFER Line 233 @ Columns 7-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
ZQ_BUFFER Line 234 @ Columns 5-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
ZQ_BUFFER Line 405 @ Columns 7-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
ZQ_BUFFER Line 406 @ Columns 5-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
ZQ_BUFFER Line 699 @ Columns 7-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
ZQ_BUFFER Line 700 @ Columns 5-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
ZQ_BUFFER Line 928 @ Columns 7-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
ZQ_BUFFER Line 929 @ Columns 5-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`
Pass 5: Checking code paths
ZQ_BUFFER Line 155 @ Columns 6-22 - Warning S101: Function 'HealthBar_GetNPC' is not void, and should return a value!
ZQ_BUFFER Line 565 @ Columns 6-22 - Warning S101: Function 'HealthBar_GetNPC' is not void, and should return a value!
ZQ_BUFFER Line 155 @ Columns 6-22 - Warning S101: Function 'HealthBar_GetNPC' is not void, and should return a value!
ZQ_BUFFER Line 565 @ Columns 6-22 - Warning S101: Function 'HealthBar_GetNPC' is not void, and should return a value!
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)
=== METADATA (elided)
{
  "currentFileSymbols": 181,
  "symbols": 356,
  "identifiers": 1523
}
PUSHV 0; void run() Body Start
SETR D4 SP2
PUSHR D4
CALLFUNC 0.2380; UsrFunc[void StartGhostZH()] Call
POP D4
PUSHR D4; while(true) #8 Body [Opt:AlwaysOn] Start
CALLFUNC 0.8755; UsrFunc[void UpdateGhostZH1()] Call
POP D4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR D4
CALLFUNC 0.8817; UsrFunc[void UpdateGhostZH2()] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 6; while() #8 End AND [Opt:NeverRet] AND void run() Body End
SETR D4 SP2; Func[int RadianAngle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR D4 SP2; Func[int Randf(int)] Body Start
SETV D2 0; InlineFunc[long randgen::LRand(long)] Params Start AND return Start
PUSHR D2
LOAD D2 0; InlineFunc[long randgen::LRand(long)] Params End
POP REFRNG; InlineFunc[long randgen::LRand(long)] Body Start
RNGLRAND2 D2; InlineFunc[long randgen::LRand(long)] Body End
POP D5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void AutoGhost()] Body Start
SETR D4 SP2
SETR D2 GD27; if() #29 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
GOTOCMP 411 !=; Test 'if' AND return (Void) AND if() #29 Body
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
SETR D2 NPCCOUNT; for() #2 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #2 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 411 ==; for() #2 TestFail?
LOAD D2 0.0003; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #2 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
LOAD D2 0.0006; if() #30 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 407 !=; Test 'if' AND continue 1; AND if() #30 Body
LOAD D2 0.0006; if() #31 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 407 !=; Test 'if' AND continue 1; AND if() #31 Body
LOAD D2 0.0006; if() #32 Test AND if(false) #16 [Opt:AlwaysOff]
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 407 !=; Test 'if' AND continue 1; AND if() #32 Body
LOAD D2 0.0006; unless() #33 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 407 ==; Test 'unless' AND continue 1; AND unless() #33 Body
LOAD D2 0.0006; unless() #34 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 407 ==; Test 'unless' AND continue 1; AND unless() #34 Body
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0006; if(false) #17 [Opt:AlwaysOff]
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0002
LOAD D2 0.0002; if() #35 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 166 ==; Test 'if'
ALLOCATEMEMV D2 2 0; if() #35 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0006; UsrFunc[int __AutoGhostParseName(npc, int[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int __AutoGhostParseName(npc, int[])] Params End
CALLFUNC 0.0413; UsrFunc[int __AutoGhostParseName(npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0002
LOAD D3 0
DEALLOCATEMEMR D3; if() #35 Body End
LOAD D2 0.0002; if() #36 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 177 ==; Test 'if'
PUSHR D4; if() #36 Body Start
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0713; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 407; continue 1; AND if() #36 Body End
LOAD D2 0.0002; if() #37 Test
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 188 ==; Test 'if'
PUSHR D4; if() #37 Body Start
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0713; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 407; continue 1; AND if() #37 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR D2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.0764; UsrFunc[int FindUnusedFFC(int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0005; unless() #38 Test
COMPAREV D2 0
GOTOCMP 203 !=; Test 'unless'
PUSHR D4; unless() #38 Body Start
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0713; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 407; continue 1; AND unless() #38 Body End
LOAD D2 0.0005; InlineFunc[ffc screendata::LoadFFC(int)] Params
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0004
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCCSET
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR CSET D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTWIDTH D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFTHEIGHT D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCX
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR X D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCY
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCZ
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
SETV D2 1; if(true) #39 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0001; if() #40 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
LOAD D2 0.0001; if() #41 Test AND if() #40 Body Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
SETV D2 3; if() #41 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCEXTEND D2
SETV D2 1024
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCXOFS D2; if() #41 Body End
LOAD D2 0.0001; if() #40 Body End AND if() #18 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 395 ==; Test 'if'
SETV D2 1; if() #18 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2
GOTO 407; if() #18 Body End
LOAD D2 0.0001; if() #18 Else Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2; if() #18 Else End
LOAD D2 0.0003; for() #2 Body End AND for() #2 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 73; for() #2 End
POPARGS D5 0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0 0.0009; Func[int __AutoGhostParseName(npc, int[])] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 64 0
STORE D2 0.0008
ALLOCATEMEMV D2 64 0
STORE D2 0.0007
SETV D2 1
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End
STOREV 0 0.0006; for() #151 setup
LOAD D2 0.0006; for() #151 LoopTest
COMPAREV D2 63
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 651 ==; for() #151 TestFail?
LOAD D2 0.0008; if() #584 Test AND for() #151 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 64
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 647 ==; Test 'if'
LOAD D2 0.0008; if() #584 Body Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0005
PUSHR D4; if() #349 Test
LOAD D2 0.0005; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8939; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 554 ==; Test 'if'
STOREV 0 0.0004; if() #349 Body Start
LOAD D2 0.0006; for() #152 setup
ADDV D2 1
STORE D2 0.0006
PUSHR D4; for() #152 LoopTest
LOAD D2 0.0008; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8939; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 496 ==; for() #152 TestFail?
LOAD D2 0.0008; for() #152 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #152 Body End
LOAD D2 0.0006; for() #152 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 464; for() #152 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006
LOAD D2 0.0009; if() #585 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 647 ==; Test 'if'
ALLOCATEMEMV D2 59 0; if() #585 Body Start
STORE D2 0.0002
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script does not exist.\n"
ALLOCATEMEMV D2 80 0
STORE D2 0
WRITEPODSTRING D2 "  Script name: %s\n"
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 711; return End
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3; if() #585 Body End
GOTO 647; if() #349 Body End
LOAD D2 0.0005; if() #586 Test AND if() #349 Else Start
COMPAREV D2 48
GOTOCMP 560 <
LOAD D2 0.0005
COMPAREV D2 57
GOTOCMP 565 <=
LOAD D2 0.0005
COMPAREV D2 45
GOTOCMP 565 ==
SETV D2 0
GOTO 566
SETV D2 1
COMPAREV D2 0
GOTOCMP 647 ==; Test 'if'
STOREV 0 0.0004; if() #586 Body Start
LOAD D2 0.0005; if() #587 Test
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 585 ==; Test 'if'
SETV D2 45; if() #587 Body Start
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 1
STORE D2 0.0004
LOAD D2 0.0006
ADDV D2 1
STORE D2 0.0006; if() #587 Body End
LOAD D2 0.0006; for() #153 setup
ADDV D2 1
STORE D2 0.0006
LOAD D2 0.0008; for() #153 LoopTest
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 48
GOTOCMP 604 <
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 57
GOTOCMP 604 >
SETV D2 1
GOTO 605
SETV D2 0
COMPAREV D2 0
GOTOCMP 627 ==; for() #153 TestFail?
LOAD D2 0.0008; for() #153 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #153 Body End
LOAD D2 0.0006; for() #153 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 588; for() #153 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int atoi(char32[])] Params Start
SETR D3 D2; InlineFunc[int atoi(char32[])] Params End
ATOI D2 D3; InlineFunc[int atoi(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006; if() #586 Body End
LOAD D2 0.0006; if() #349 Else End AND if() #584 Body End AND for() #151 Body End AND for() #151 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 431; for() #151 End
LOAD D2 0.0009; if() #589 Test AND unless(false) #588 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 701 ==; Test 'if'
ALLOCATEMEMV D2 54 0; if() #589 Body Start
STORE D2 0.0005
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script not found.\n"
ALLOCATEMEMV D2 80 0
STORE D2 0.0003
WRITEPODSTRING D2 "  Enemy name: %s\n"
ALLOCATEMEMV D2 55 0
STORE D2 0.0001
WRITEPODSTRING D2 "  Script name should start after this character: %c\n"
LOAD D2 0.0005; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGV 64; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 711; return End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3; if() #589 Body End
SETV D2 1; return Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 711; return End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0011
RETURNFUNC; Func[int __AutoGhostParseName(npc, int[])] Body End
SETR D4 SP2; Func[void __AutoGhostKill(npc)] Body Start
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCMISCD D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
POP D5
RETURNFUNC; Func[void __AutoGhostKill(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
LOAD D2 0.0002; InlineFunc[int Max(int, int)] Params Start AND for() #43 setup
ADDV D2 1
PUSHVARGR D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0
LOAD D2 0; for() #43 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 819 ==; for() #43 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #43 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #175 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 795 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 795 ==
SETV D2 0
GOTO 796
SETV D2 1
COMPAREV D2 0
GOTOCMP 815 ==; Test 'if'
LOAD D2 0.0001; unless() #176 Test AND if() #175 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 815 !=; Test 'unless'
LOAD D2 0.0001; unless() #177 Test AND unless() #176 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 815 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #177 Body Start
GOTO 820; return End AND unless() #177 Body End
LOAD D2 0; unless() #176 Body End AND if() #175 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 773; for() #43 End
SETV D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR D4 SP2; Func[int CenterX(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(eweapon)] Body End
SETR D4 SP2; Func[int CenterY(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR D4 SP2
SETR D2 LINKHP; if() #86 Test
COMPAREV D2 0
GOTOCMP 876 >
GOTO 876
SETV D2 1
GOTO 877
SETV D2 0
COMPAREV D2 0
GOTOCMP 926 ==; Test 'if'
STOREV 0 0.0001; if() #86 Body Start
STOREV 1 0; for() #3 setup
LOAD D2 0; for() #3 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 926 ==; for() #3 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #3 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
SETR D2 GD25; if() #87 Test
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
RSHIFTV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
ANDV D2 15
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 922 ==; Test 'if'
SETV D2 0; if() #87 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #87 Body End
LOAD D2 0; for() #3 Body End AND for() #3 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 881; for() #3 End
POPARGS D5 0.0002; if() #86 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSV 0 0.0002; Func[void DrawEWeaponShadow(eweapon)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNXOFS
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
SUBV D2 1
MULTV D2 16
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNYOFS
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNZOFS
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHV 1; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #35 [Opt:AlwaysOn]
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD27
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
PUSHR D2
PUSHARGSV 1 0.0002
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(eweapon)] Body End
PUSHARGSV 0 0.0009; Func[void DrawGhostFFCs()] Body Start
SETR D4 SP2
SETV D2 1; if() #125 Test
PUSHR D2
POP D0
SETR D2 SCREENEFLAGSD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1010 ==; Test 'if'
PUSHR D4; unless() #126 Test AND if() #125 Body Start
CALLFUNC 0.1196; UsrFunc[bool __HaveAmulet()] Call
POP D4
COMPAREV D2 0
GOTOCMP 1194 ==; Test 'unless' AND return (Void) AND unless() #126 Body
STOREV 0 0.0008; if() #125 Body End
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
SETV D2 1; if() #37 Test AND if(true) #36 [Opt:AlwaysOn]
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1029 ==; Test 'if'
SETV D2 1; if() #37 Body Start
STORE D2 0.0003
GOTO 1031; if() #37 Body End
SETV D2 2; if() #37 Else Start
STORE D2 0.0003; if() #37 Else End
SETV D2 4
STORE D2 0.0002
STOREV 1 0.0001; for() #20 setup
LOAD D2 0.0001; for() #20 LoopTest
PUSHR D2
SETR D2 NPCCOUNT
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1194 ==; for() #20 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #20 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0006; UsrFunc[int[] __GetDrawingArray(npc)] Params Start
PUSHR D2; UsrFunc[int[] __GetDrawingArray(npc)] Params End
CALLFUNC 0.1215; UsrFunc[int[] __GetDrawingArray(npc)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008; unless() #127 Test
COMPAREV D2 0
GOTOCMP 1190 ==; Test 'unless' AND continue 1; AND unless() #127 Body
SETR D2 GD27; if() #128 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1074 ==; Test 'if'
LOAD D2 0.0008; if() #129 Test AND if() #128 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1190 !=; Test 'if' AND continue 1; AND if() #129 Body
LOAD D2 0.0008; if() #128 Body End AND if() #38 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1086 ==; Test 'if'
SETV D2 64; if() #38 Body Start
STORE D2 0.0005
GOTO 1088; if() #38 Body End
SETV D2 128; if() #38 Else Start
STORE D2 0.0005; if() #38 Else End
LOAD D2 0.0008; if() #39 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1100 ==; Test 'if'
LOAD D2 0.0002; if() #39 Body Start
STORE D2 0.0004
GOTO 1102; if() #39 Body End
LOAD D2 0.0003; if() #39 Else Start
STORE D2 0.0004; if() #39 Else End
SETV D2 3
STORE D2 0.0007
STOREV 0 0; for() #21 setup
LOAD D2 0; for() #21 LoopTest
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1190 ==; for() #21 TestFail?
LOAD D2 0.0008; if() #130 Test AND for() #21 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
GOTOCMP 1132 ==
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 1132 ==
SETV D2 1
GOTO 1133
SETV D2 0
COMPAREV D2 0
GOTOCMP 1183 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #130 Body Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
LOAD D2 0.0005
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #130 Body End
LOAD D2 0.0007
ADDV D2 6
STORE D2 0.0007; for() #21 Body End
LOAD D2 0; for() #21 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1105; for() #21 End
LOAD D2 0.0001; for() #20 Body End AND for() #20 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 1034; for() #20 End
POPARGS D5 0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR D4 SP2; Func[bool __HaveAmulet()] Body Start
SETV D2 50; if() #691 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1205 ==; Test 'if'
SETV D2 1; return Start AND if() #691 Body Start
GOTO 1214; return End AND if() #691 Body End
SETV D2 63; if() #692 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1213 ==; Test 'if'
SETV D2 1; return Start AND if() #692 Body Start
GOTO 1214; return End AND if() #692 Body End
SETV D2 0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int[] __GetDrawingArray(npc)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #602 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1231 ==; Test 'if'
SETV D2 0; return Start AND if() #602 Body Start
GOTO 1251; return End AND if() #602 Body End
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0; unless() #603 Test
COMPAREV D2 0
GOTOCMP 1245 !=; Test 'unless'
SETV D2 0; return Start AND unless() #603 Body Start
GOTO 1251; return End AND unless() #603 Body End
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 23
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int[] __GetDrawingArray(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC()] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 1 0; for() #42 setup
LOAD D2 0; for() #42 LoopTest
COMPAREV D2 33
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1303 ==; for() #42 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #42 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #172 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 1279 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 1279 ==
SETV D2 0
GOTO 1280
SETV D2 1
COMPAREV D2 0
GOTOCMP 1299 ==; Test 'if'
LOAD D2 0.0001; unless() #173 Test AND if() #172 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 1299 !=; Test 'unless'
LOAD D2 0.0001; unless() #174 Test AND unless() #173 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 1299 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #174 Body Start
GOTO 1304; return End AND unless() #174 Body End
LOAD D2 0; unless() #173 Body End AND if() #172 Body End AND for() #42 Body End AND for() #42 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1257; for() #42 End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #198 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1319 ==; Test 'if'
PUSHR D4; if() #198 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.1465; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #198 Body End
LOAD D2 0.0002; if() #199 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1330 ==; Test 'if'
PUSHR D4; if() #199 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.1625; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #199 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001; if() #51 Test
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1400 ==; Test 'if'
PUSHR D4; if() #51 Body Start
LOAD D2 0.0006; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1953; UsrFunc[int __UnblockableDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDIR D2
GOTO 1409; if() #51 Body End
LOAD D2 0.0006; if() #51 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDIR D2; if() #51 Else End
LOAD D2 0.0003; if() #200 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1420 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #200 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #200 Body End
LOAD D2 0.0001; if() #201 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1436 ==; Test 'if'
SETV D2 0; if() #201 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #201 Body End
LOAD D2 0.0001; if() #202 Test
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1447 ==; Test 'if'
PUSHR D4; if() #202 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #202 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #58 Test
COMPAREV D2 129
GOTOCMP 1475 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 1475 ==
SETV D2 0
GOTO 1476
SETV D2 1
COMPAREV D2 0
GOTOCMP 1480 ==; Test 'if'
SETV D2 17; return Start AND if() #58 Body Start
GOTO 1623; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1487 ==; Test 'if'
SETV D2 18; return Start AND if() #59 Body Start
GOTO 1623; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1494 ==; Test 'if'
SETV D2 19; return Start AND if() #60 Body Start
GOTO 1623; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1501 ==; Test 'if'
SETV D2 35; return Start AND if() #61 Body Start
GOTO 1623; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1508 ==; Test 'if'
SETV D2 81; return Start AND if() #62 Body Start
GOTO 1623; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1515 ==; Test 'if'
SETV D2 80; return Start AND if() #63 Body Start
GOTO 1623; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1522 ==; Test 'if'
SETV D2 21; return Start AND if() #64 Body Start
GOTO 1623; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1529 ==; Test 'if'
SETV D2 20; return Start AND if() #65 Body Start
GOTO 1623; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1536 ==; Test 'if'
SETV D2 36; return Start AND if() #66 Body Start
GOTO 1623; return End AND if() #66 Body End
LOAD D2 0.0003; if() #67 Test AND if() #66 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1543 ==; Test 'if'
SETV D2 76; return Start AND if() #67 Body Start
GOTO 1623; return End AND if() #67 Body End
LOAD D2 0.0003; if() #68 Test AND if() #67 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1550 ==; Test 'if'
SETV D2 77; return Start AND if() #68 Body Start
GOTO 1623; return End AND if() #68 Body End
LOAD D2 0.0003; if() #69 Test AND if() #68 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1622 ==; Test 'if'
STOREV 0 0.0002; if() #69 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #48 setup
LOAD D2 0; for() #48 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1606 ==; for() #48 TestFail?
LOAD D2 0; unless() #211 Test AND for() #48 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1602 ==; Test 'unless' AND continue 1; AND unless() #211 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #212 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1602 !=; Test 'if' AND continue 1; AND if() #212 Body
LOAD D2 0.0001; if() #213 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1602 ==; Test 'if'
LOAD D2 0.0001; if() #213 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #214 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1606 !=; Test 'if' AND break 1; AND if() #214 Body
LOAD D2 0; if() #213 Body End AND for() #48 Body End AND for() #48 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1558; for() #48 End
LOAD D2 0.0002; if() #70 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1613 ==; Test 'if'
SETV D2 4; return Start AND if() #70 Body Start
GOTO 1623; return End AND if() #70 Body End
LOAD D2 0.0002; if() #71 Test AND if() #70 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1620 ==; Test 'if'
SETV D2 5; return Start AND if() #71 Body Start
GOTO 1623; return End AND if() #71 Body End
SETV D2 6; return Start AND if() #71 Else Start
GOTO 1623; return End AND if() #71 Else End AND if() #70 Else End AND if() #69 Body End
SETV D2 0; return Start AND if() #69 Else Start
POPARGS D5 0.0004; return End AND if() #69 Else End AND if() #68 Else End AND if() #67 Else End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #54 Test
COMPAREV D2 129
GOTOCMP 1634 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 1634 ==
SETV D2 0
GOTO 1635
SETV D2 1
COMPAREV D2 0
GOTOCMP 1639 ==; Test 'if'
SETV D2 40; return Start AND if() #54 Body Start
GOTO 1676; return End AND if() #54 Body End
LOAD D2 0; if() #55 Test AND if() #54 Else Start
COMPAREV D2 134
GOTOCMP 1647 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 1647 ==
SETV D2 0
GOTO 1648
SETV D2 1
COMPAREV D2 0
GOTOCMP 1652 ==; Test 'if'
SETV D2 32; return Start AND if() #55 Body Start
GOTO 1676; return End AND if() #55 Body End
LOAD D2 0; if() #56 Test AND if() #55 Else Start
COMPAREV D2 140
GOTOCMP 1663 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 1663 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 1663 ==
SETV D2 0
GOTO 1664
SETV D2 1
COMPAREV D2 0
GOTOCMP 1668 ==; Test 'if'
SETV D2 13; return Start AND if() #56 Body Start
GOTO 1676; return End AND if() #56 Body End
LOAD D2 0; if() #57 Test AND if() #56 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1675 ==; Test 'if'
SETV D2 51; return Start AND if() #57 Body Start
GOTO 1676; return End AND if() #57 Body End
SETV D2 0; return Start AND if() #57 Else Start
POP D5; return End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End AND if() #54 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #518 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1695 ==; Test 'if'
LOAD D2 0.0001; if() #518 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #518 Body End
LOAD D2 0.0001; if() #247 Test
COMPAREV D2 0.3927
GOTOCMP 1703 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 1703 >
SETV D2 0
GOTO 1704
SETV D2 1
COMPAREV D2 0
GOTOCMP 1709 ==; Test 'if'
SETV D2 3; if() #247 Body Start
STORE D2 0
GOTO 1759; if() #247 Body End
LOAD D2 0.0001; if() #248 Test AND if() #247 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1717 ==; Test 'if'
SETV D2 7; if() #248 Body Start
STORE D2 0
GOTO 1759; if() #248 Body End
LOAD D2 0.0001; if() #249 Test AND if() #248 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1725 ==; Test 'if'
SETV D2 1; if() #249 Body Start
STORE D2 0
GOTO 1759; if() #249 Body End
LOAD D2 0.0001; if() #250 Test AND if() #249 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1733 ==; Test 'if'
SETV D2 6; if() #250 Body Start
STORE D2 0
GOTO 1759; if() #250 Body End
LOAD D2 0.0001; if() #251 Test AND if() #250 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1741 ==; Test 'if'
SETV D2 2; if() #251 Body Start
STORE D2 0
GOTO 1759; if() #251 Body End
LOAD D2 0.0001; if() #252 Test AND if() #251 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1749 ==; Test 'if'
SETV D2 4; if() #252 Body Start
STORE D2 0
GOTO 1759; if() #252 Body End
LOAD D2 0.0001; if() #253 Test AND if() #252 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1757 ==; Test 'if'
SETV D2 0; if() #253 Body Start
STORE D2 0
GOTO 1759; if() #253 Body End
SETV D2 5; if() #253 Else Start
STORE D2 0; if() #253 Else End
LOAD D2 0.0002; if() #252 Else End AND if() #251 Else End AND if() #250 Else End AND if() #249 Else End AND if() #248 Else End AND if() #247 Else End AND if() #519 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1777 ==; Test 'if'
PUSHR D4; if() #519 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1953; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #519 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #271 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 1871 ==; Test 'if'
LOAD D2 0.0001; if() #271 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #524 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1810 ==; Test 'if'
LOAD D2 0; if() #524 Body Start
ADDV D2 6.2832
STORE D2 0; if() #524 Body End
LOAD D2 0; if() #272 Test
COMPAREV D2 0.7854
GOTOCMP 1818 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 1818 >
SETV D2 0
GOTO 1819
SETV D2 1
COMPAREV D2 0
GOTOCMP 1831 ==; Test 'if'
SETV D2 4; if() #272 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #272 Body End
LOAD D2 0; if() #273 Test AND if() #272 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1846 ==; Test 'if'
SETV D2 3; if() #273 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #273 Body End
LOAD D2 0; if() #274 Test AND if() #273 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1861 ==; Test 'if'
SETV D2 7; if() #274 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #274 Body End
SETV D2 0; if() #274 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2; if() #274 Else End
GOTO 1951; if() #273 Else End AND if() #272 Else End AND if() #271 Body End
PUSHR D4; if() #271 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2013; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #275 Test
COMPAREV D2 0
GOTOCMP 1890 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 1890 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 1890 ==
SETV D2 0
GOTO 1891
SETV D2 1
COMPAREV D2 0
GOTOCMP 1903 ==; Test 'if'
SETV D2 0; if() #275 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #275 Body End
LOAD D2 0; if() #276 Test AND if() #275 Else Start
COMPAREV D2 1
GOTOCMP 1914 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 1914 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 1914 ==
SETV D2 0
GOTO 1915
SETV D2 1
COMPAREV D2 0
GOTOCMP 1927 ==; Test 'if'
SETV D2 3; if() #276 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #276 Body End
LOAD D2 0; if() #277 Test AND if() #276 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1942 ==; Test 'if'
SETV D2 7; if() #277 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 1951; if() #277 Body End
SETV D2 4; if() #277 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2; if() #277 Else End
POPARGS D5 0.0002; if() #276 Else End AND if() #275 Else End AND if() #271 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #715 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1961 ==; Test 'if'
SETV D2 8; return Start AND if() #715 Body Start
GOTO 2011; return End AND if() #715 Body End
LOAD D2 0; if() #716 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1968 ==; Test 'if'
SETV D2 12; return Start AND if() #716 Body Start
GOTO 2011; return End AND if() #716 Body End
LOAD D2 0; if() #717 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1975 ==; Test 'if'
SETV D2 14; return Start AND if() #717 Body Start
GOTO 2011; return End AND if() #717 Body End
LOAD D2 0; if() #718 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1982 ==; Test 'if'
SETV D2 10; return Start AND if() #718 Body Start
GOTO 2011; return End AND if() #718 Body End
LOAD D2 0; if() #719 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1989 ==; Test 'if'
SETV D2 15; return Start AND if() #719 Body Start
GOTO 2011; return End AND if() #719 Body End
LOAD D2 0; if() #720 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1996 ==; Test 'if'
SETV D2 9; return Start AND if() #720 Body Start
GOTO 2011; return End AND if() #720 Body End
LOAD D2 0; if() #721 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2003 ==; Test 'if'
SETV D2 13; return Start AND if() #721 Body Start
GOTO 2011; return End AND if() #721 Body End
LOAD D2 0; if() #722 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2010 ==; Test 'if'
SETV D2 11; return Start AND if() #722 Body Start
GOTO 2011; return End AND if() #722 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #701 Test
COMPAREV D2 0
GOTOCMP 2022 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2022 >
SETV D2 1
GOTO 2023
SETV D2 0
COMPAREV D2 0
GOTOCMP 2027 ==; Test 'if'
LOAD D2 0; return Start AND if() #701 Body Start
GOTO 2084; return End AND if() #701 Body End
LOAD D2 0; if() #702 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2034 ==; Test 'if'
SETV D2 0; return Start AND if() #702 Body Start
GOTO 2084; return End AND if() #702 Body End
LOAD D2 0; if() #703 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2041 ==; Test 'if'
SETV D2 5; return Start AND if() #703 Body Start
GOTO 2084; return End AND if() #703 Body End
LOAD D2 0; if() #704 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2048 ==; Test 'if'
SETV D2 3; return Start AND if() #704 Body Start
GOTO 2084; return End AND if() #704 Body End
LOAD D2 0; if() #705 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2055 ==; Test 'if'
SETV D2 7; return Start AND if() #705 Body Start
GOTO 2084; return End AND if() #705 Body End
LOAD D2 0; if() #706 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2062 ==; Test 'if'
SETV D2 1; return Start AND if() #706 Body Start
GOTO 2084; return End AND if() #706 Body End
LOAD D2 0; if() #707 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2069 ==; Test 'if'
SETV D2 6; return Start AND if() #707 Body Start
GOTO 2084; return End AND if() #707 Body End
LOAD D2 0; if() #708 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2076 ==; Test 'if'
SETV D2 2; return Start AND if() #708 Body Start
GOTO 2084; return End AND if() #708 Body End
LOAD D2 0; if() #709 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2083 ==; Test 'if'
SETV D2 4; return Start AND if() #709 Body Start
GOTO 2084; return End AND if() #709 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR D4 SP2; Func[bool IsSideview()] Body Start
SETV D2 0; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
PUSHR D2
SETR D2 CURDMAP; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATASIDEVIEW
POP D3
COMPARER D3 D2
SETCMP D2 BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR D4 SP2; Func[void InitializeGhostZHData()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETV D2 0
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
SETV D2 0
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETV D2 0
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
SETR D4 SP2; Func[void KillEWeapon(eweapon)] Body Start
LOAD D2 0
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ORV D2 128
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
POP D5
RETURNFUNC; Func[void KillEWeapon(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[int __GetEWeaponThrowHeight(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
STORE D2 0.0004
LOAD D2 0.0004; if() #604 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2184 ==; Test 'if'
SETV D2 1; return Start AND if() #604 Body Start
GOTO 2279; return End AND if() #604 Body End
LOAD D2 0.0005; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNHXSZ
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNHYSZ
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 LINKX
ADDV D2 8
PUSHR D2
SETR D2 LINKY
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0003
LOAD D2 0.0003; if() #605 Test
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2227 ==; Test 'if'
SETV D2 1; return Start AND if() #605 Body Start
GOTO 2279; return End AND if() #605 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0001; while() #5 Test
COMPAREV D2 3.2000
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2254 ==; Test 'while'
LOAD D2 0.0001; while() #5 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002
LOAD D2 0.0002; if() #606 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2235 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #606 Body Start
GOTO 2279; return End AND if() #606 Body End
GOTO 2235; while() #5 Body End AND while() #5 End
STOREV 0 0
LOAD D2 0.0002; while() #6 Test
PUSHR D2
LOAD D2 0
DIVV D2 3.2000
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2278 ==; Test 'while'
LOAD D2 0.0001; while() #6 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SUBV D2 3.2000
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002; while() #6 Body End
GOTO 2255; while() #6 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(eweapon)] Body End
SETR D4 SP2; Func[void SetEWeaponRotation(eweapon, int)] Body Start
PUSHR D4
LOAD D2 0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2013; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #278 Test
COMPAREV D2 0
GOTOCMP 2299 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 2299 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 2299 ==
SETV D2 0
GOTO 2300
SETV D2 1
COMPAREV D2 0
GOTOCMP 2312 ==; Test 'if'
SETV D2 0; if() #278 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 2360; if() #278 Body End
LOAD D2 0; if() #279 Test AND if() #278 Else Start
COMPAREV D2 1
GOTOCMP 2323 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2323 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 2323 ==
SETV D2 0
GOTO 2324
SETV D2 1
COMPAREV D2 0
GOTOCMP 2336 ==; Test 'if'
SETV D2 3; if() #279 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 2360; if() #279 Body End
LOAD D2 0; if() #280 Test AND if() #279 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2351 ==; Test 'if'
SETV D2 7; if() #280 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2
GOTO 2360; if() #280 Body End
SETV D2 4; if() #280 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNFLIP D2; if() #280 Else End
POPARGS D5 0.0002; if() #279 Else End AND if() #278 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon, int)] Body End
SETR D4 SP2; Func[int Sign(int)] Body Start
LOAD D2 0; if() #296 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2370 ==; Test 'if'
SETV D2 1; return Start AND if() #296 Body Start
GOTO 2378; return End AND if() #296 Body End
LOAD D2 0; if() #297 Test AND if() #296 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2377 ==; Test 'if'
SETV D2 -1; return Start AND if() #297 Body Start
GOTO 2378; return End AND if() #297 Body End
SETV D2 0; return Start AND if() #297 Else Start
POP D5; return End AND if() #297 Else End AND if() #296 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR D4 SP2; Func[void StartGhostZH()] Body Start
PUSHR D4
CALLFUNC 0.2103; UsrFunc[void InitializeGhostZHData()] Call
POP D4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0 0.0007; Func[void UpdateEWeapon(eweapon)] Body Start
SETR D4 SP2
SETR D2 GD27; if() #555 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3523 !=; Test 'if' AND return (Void) AND if() #555 Body
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
STORE D2 0.0005
STOREV 1 0.0004
LOAD D2 0.0007; if() #306 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2794 ==; Test 'if'
LOAD D2 0.0007; if() #556 Test AND if() #306 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2642 ==; Test 'if'
LOAD D2 0.0007; if() #307 Test AND if() #556 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 6
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2515 ==; Test 'if'
LOAD D2 0.0007; if() #308 Test AND if() #307 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2458 ==; Test 'if'
PUSHR D4; if() #308 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params End
CALLFUNC 0.3525; UsrFunc[void __UpdateEWMSineWave(eweapon)] Call
POP D4
GOTO 2642; if() #308 Body End
LOAD D2 0.0007; if() #309 Test AND if() #308 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2475 ==; Test 'if'
PUSHR D4; if() #309 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHoming(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHoming(eweapon)] Params End
CALLFUNC 0.3707; UsrFunc[void __UpdateEWMHoming(eweapon)] Call
POP D4
GOTO 2642; if() #309 Body End
LOAD D2 0.0007; if() #310 Test AND if() #309 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2492 ==; Test 'if'
PUSHR D4; if() #310 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params End
CALLFUNC 0.3913; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Call
POP D4
GOTO 2642; if() #310 Body End
LOAD D2 0.0007; if() #311 Test AND if() #310 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2509 ==; Test 'if'
PUSHR D4; if() #311 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandom(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandom(eweapon)] Params End
CALLFUNC 0.4248; UsrFunc[void __UpdateEWMRandom(eweapon)] Call
POP D4
GOTO 2642; if() #311 Body End
PUSHR D4; if() #311 Else Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params End
CALLFUNC 0.4368; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Call
POP D4; if() #311 Else End
GOTO 2642; if() #310 Else End AND if() #309 Else End AND if() #308 Else End AND if() #307 Body End
LOAD D2 0.0007; if() #312 Test AND if() #307 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2550 ==; Test 'if'
LOAD D2 0.0007; if() #312 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMVeer(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMVeer(eweapon)] Params End
CALLFUNC 0.4680; UsrFunc[void __UpdateEWMVeer(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 2642; if() #312 Body End
LOAD D2 0.0007; if() #313 Test AND if() #312 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2567 ==; Test 'if'
PUSHR D4; if() #313 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMThrow(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMThrow(eweapon)] Params End
CALLFUNC 0.5212; UsrFunc[void __UpdateEWMThrow(eweapon)] Call
POP D4
GOTO 2642; if() #313 Body End
LOAD D2 0.0007; if() #314 Test AND if() #313 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2584 ==; Test 'if'
PUSHR D4; if() #314 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMFall(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMFall(eweapon)] Params End
CALLFUNC 0.5518; UsrFunc[void __UpdateEWMFall(eweapon)] Call
POP D4
GOTO 2642; if() #314 Body End
LOAD D2 0.0007; if() #315 Test AND if() #314 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2619 ==; Test 'if'
LOAD D2 0.0007; if() #315 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDrift(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDrift(eweapon)] Params End
CALLFUNC 0.5784; UsrFunc[void __UpdateEWMDrift(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 2642; if() #315 Body End
LOAD D2 0.0007; if() #315 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params End
CALLFUNC 0.6288; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004; if() #315 Else End
LOAD D2 0.0007; if() #314 Else End AND if() #313 Else End AND if() #312 Else End AND if() #307 Else End AND if() #556 Body End AND if() #557 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
LOAD D2 0.0007; if() #316 Test AND if() #557 Body Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2700 ==; Test 'if'
LOAD D2 0.0007; if() #316 Body Start
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0007; if() #558 Test
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #558 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #558 Body End
GOTO 3104; if() #316 Body End
LOAD D2 0.0007; if() #317 Test AND if() #316 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2744 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #559 Test AND if() #317 Body Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
SETR D2 LINKY; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #559 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #559 Body End
GOTO 3104; if() #317 Body End
LOAD D2 0.0007; if() #560 Test AND if() #317 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params Start AND if() #560 Body Start
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
PUSHVARGR D3; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0007; if() #561 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #561 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #561 Body End
GOTO 3104; if() #560 Body End AND if() #317 Else End AND if() #316 Else End AND if() #557 Body End AND if() #306 Body End
LOAD D2 0.0007; if() #562 Test AND if() #306 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
GOTOCMP 2815 ==
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 2815 !=
SETV D2 1
GOTO 2816
SETV D2 0
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
LOAD D2 0.0007; if() #318 Test AND if() #562 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2835 ==; Test 'if'
PUSHR D4; if() #318 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params End
CALLFUNC 0.6823; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Call
POP D4
GOTO 3104; if() #318 Body End
LOAD D2 0.0007; if() #319 Test AND if() #318 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2969 ==; Test 'if'
LOAD D2 0.0007; if() #320 Test AND if() #319 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2867 ==; Test 'if'
SETV D2 0; if() #320 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 3104; if() #320 Body End
LOAD D2 0.0007; if() #321 Test AND if() #320 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2884 ==; Test 'if'
PUSHR D4; if() #321 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params End
CALLFUNC 0.7222; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Call
POP D4
GOTO 3104; if() #321 Body End
LOAD D2 0.0007; if() #322 Test AND if() #321 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2901 ==; Test 'if'
PUSHR D4; if() #322 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params End
CALLFUNC 0.7389; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Call
POP D4
GOTO 3104; if() #322 Body End
LOAD D2 0.0007; if() #323 Test AND if() #322 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2918 ==; Test 'if'
PUSHR D4; if() #323 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params End
CALLFUNC 0.7433; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Call
POP D4
GOTO 3104; if() #323 Body End
LOAD D2 0.0007; if() #324 Test AND if() #323 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2935 ==; Test 'if'
PUSHR D4; if() #324 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params End
CALLFUNC 0.7477; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Call
POP D4
GOTO 3104; if() #324 Body End
LOAD D2 0.0007; if() #325 Test AND if() #324 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2952 ==; Test 'if'
PUSHR D4; if() #325 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params End
CALLFUNC 0.7535; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Call
POP D4
GOTO 3104; if() #325 Body End
LOAD D2 0.0007; if() #563 Test AND if() #325 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #563 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params End
CALLFUNC 0.7593; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Call
POP D4; if() #563 Body End
GOTO 3104; if() #325 Else End AND if() #324 Else End AND if() #323 Else End AND if() #322 Else End AND if() #321 Else End AND if() #320 Else End AND if() #319 Body End
LOAD D2 0.0007; if() #326 Test AND if() #319 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2986 ==; Test 'if'
PUSHR D4; if() #326 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params End
CALLFUNC 0.7703; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Call
POP D4
GOTO 3104; if() #326 Body End
LOAD D2 0.0007; if() #327 Test AND if() #326 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3003 ==; Test 'if'
PUSHR D4; if() #327 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params End
CALLFUNC 0.7761; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Call
POP D4
GOTO 3104; if() #327 Body End
LOAD D2 0.0007; if() #328 Test AND if() #327 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3020 ==; Test 'if'
PUSHR D4; if() #328 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params End
CALLFUNC 0.7821; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Call
POP D4
GOTO 3104; if() #328 Body End
LOAD D2 0.0007; if() #329 Test AND if() #328 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3037 ==; Test 'if'
PUSHR D4; if() #329 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params End
CALLFUNC 0.7881; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Call
POP D4
GOTO 3104; if() #329 Body End
LOAD D2 0.0007; if() #330 Test AND if() #329 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3054 ==; Test 'if'
PUSHR D4; if() #330 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params End
CALLFUNC 0.7993; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Call
POP D4
GOTO 3104; if() #330 Body End
LOAD D2 0.0007; if() #331 Test AND if() #330 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3071 ==; Test 'if'
PUSHR D4; if() #331 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params End
CALLFUNC 0.8098; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Call
POP D4
GOTO 3104; if() #331 Body End
LOAD D2 0.0007; if() #332 Test AND if() #331 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3088 ==; Test 'if'
PUSHR D4; if() #332 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params End
CALLFUNC 0.8145; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Call
POP D4
GOTO 3104; if() #332 Body End
LOAD D2 0.0007; if() #564 Test AND if() #332 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3104 ==; Test 'if'
PUSHR D4; if() #564 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params End
CALLFUNC 0.8196; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Call
POP D4; if() #564 Body End
LOAD D2 0.0007; if() #332 Else End AND if() #331 Else End AND if() #330 Else End AND if() #329 Else End AND if() #328 Else End AND if() #327 Else End AND if() #326 Else End AND if() #319 Else End AND if() #318 Else End AND if() #562 Body End AND if() #306 Else End AND if() #565 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3129 ==; Test 'if'
LOAD D2 0.0007; if() #566 Test AND if() #565 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3129 ==; Test 'if'
PUSHR D4; if() #566 Body Start
LOAD D2 0.0007; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.0928; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #566 Body End
LOAD D2 0.0007; if() #565 Body End AND if() #333 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3412 ==; Test 'if'
SETV D2 1000; if() #333 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2
SETR D2 LINKHP; if() #567 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3523 !=; Test 'if' AND return (Void) AND if() #567 Body
LOAD D2 0.0007; if() #568 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 3174 ==
SETR D2 GD27
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 3174 ==
SETV D2 1
GOTO 3175
SETV D2 0
COMPAREV D2 0
GOTOCMP 3523 !=; Test 'if' AND return (Void) AND if() #568 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0007; if() #334 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 3193 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int RadtoDeg(int)] Params Start AND if() #334 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 3259; if() #334 Body End
PUSHR D4; if() #334 Else Start
LOAD D2 0.0007; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2013; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #335 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3209 ==; Test 'if'
SETV D2 -90; if() #335 Body Start
STORE D2 0.0001
GOTO 3259; if() #335 Body End
LOAD D2 0; if() #336 Test AND if() #335 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3217 ==; Test 'if'
SETV D2 -45; if() #336 Body Start
STORE D2 0.0001
GOTO 3259; if() #336 Body End
LOAD D2 0; if() #337 Test AND if() #336 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3225 ==; Test 'if'
SETV D2 0; if() #337 Body Start
STORE D2 0.0001
GOTO 3259; if() #337 Body End
LOAD D2 0; if() #338 Test AND if() #337 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3233 ==; Test 'if'
SETV D2 45; if() #338 Body Start
STORE D2 0.0001
GOTO 3259; if() #338 Body End
LOAD D2 0; if() #339 Test AND if() #338 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3241 ==; Test 'if'
SETV D2 90; if() #339 Body Start
STORE D2 0.0001
GOTO 3259; if() #339 Body End
LOAD D2 0; if() #340 Test AND if() #339 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3249 ==; Test 'if'
SETV D2 135; if() #340 Body Start
STORE D2 0.0001
GOTO 3259; if() #340 Body End
LOAD D2 0; if() #341 Test AND if() #340 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3257 ==; Test 'if'
SETV D2 180; if() #341 Body Start
STORE D2 0.0001
GOTO 3259; if() #341 Body End
SETV D2 -135; if() #341 Else Start
STORE D2 0.0001; if() #341 Else End
LOAD D2 0.0004; if() #340 Else End AND if() #339 Else End AND if() #338 Else End AND if() #337 Else End AND if() #336 Else End AND if() #335 Else End AND if() #334 Else End AND if() #342 Test
COMPAREV D2 0
GOTOCMP 3301 ==; Test 'if'
LOAD D2 0.0007; if() #342 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Cos(int)] Params Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
GOTO 3317; if() #342 Body End
LOAD D2 0.0007; if() #342 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0.0002; if() #342 Else End
LOAD D2 0.0006; unless() #569 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 3331 !=
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 3331 !=
SETV D2 1
GOTO 3332
SETV D2 0
COMPAREV D2 0
GOTOCMP 3346 !=; Test 'unless'
PUSHR D4; unless() #569 Body Start
LOAD D2 0.0006; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0040; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0001; unless() #569 Body End
STOREV 0 0
LOAD D2 0.0001; if() #343 Test
COMPAREV D2 0
GOTOCMP 3355 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 3355 >=
SETV D2 1
GOTO 3356
SETV D2 0
COMPAREV D2 0
GOTOCMP 3361 ==; Test 'if'
SETV D2 0; if() #343 Body Start
STORE D2 0
GOTO 3363; if() #343 Body End
SETV D2 2; if() #343 Else Start
STORE D2 0; if() #343 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNTILE
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNTXSZ
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNTYSZ
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 3469; if() #333 Body End
LOAD D2 0.0007; if() #570 Test AND if() #333 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3452 ==; Test 'if'
SETR D2 GD27; if() #344 Test AND if() #570 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3443 ==; Test 'if'
SETV D2 1000; if() #344 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2
GOTO 3452; if() #344 Body End
SETV D2 0; if() #344 Else Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2; if() #344 Else End
LOAD D2 0.0007; if() #570 Body End AND if() #571 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3469 ==; Test 'if'
PUSHR D4; if() #571 Body Start
LOAD D2 0.0007; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #571 Body End
LOAD D2 0.0007; if() #333 Else End AND if() #572 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3481 !=
SETV D2 0
GOTO 3482
SETV D2 1
COMPAREV D2 0
GOTOCMP 3523 ==; Test 'if'
LOAD D2 0.0007; if() #572 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZOFS D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHYOFS D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNYOFS D2; if() #572 Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void UpdateEWeapon(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D3 EWPNMISCD; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(eweapon)] Body End
PUSHARGSV 0 0.0003; Func[void __UpdateEWMHoming(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0003
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0002
LOAD D2 0.0002; if() #726 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3723 ==; Test 'if'
LOAD D2 0.0002; if() #726 Body Start
ADDV D2 6.2832
STORE D2 0.0002; if() #726 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0003
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #727 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3745 ==; Test 'if'
LOAD D2 0.0001; if() #727 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #727 Body End
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
STORE D2 0
LOAD D2 0; if() #433 Test
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
COMPARER D3 D2
GOTOCMP 3780 <
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV2 6.2832 D2
POP D3
COMPARER D3 D2
GOTOCMP 3780 >
SETV D2 0
GOTO 3781
SETV D2 1
COMPAREV D2 0
GOTOCMP 3793 ==; Test 'if'
LOAD D2 0.0001; if() #433 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 3860; if() #433 Body End
PUSHR D4; if() #434 Test AND if() #433 Else Start
LOAD D2 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2362; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Sign(int)] Params Start
SUBV D2 3.1416
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2362; UsrFunc[int Sign(int)] Call
POP D4
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3837 ==; Test 'if'
LOAD D2 0.0003; if() #434 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 3860; if() #434 Body End
LOAD D2 0.0003; if() #434 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2; if() #434 Else End
PUSHR D4; if() #433 Else End
LOAD D2 0.0003; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0003; if() #728 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3911 ==; Test 'if'
LOAD D2 0.0003; if() #728 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0003; if() #729 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3911 ==; Test 'if'
PUSHR D4; if() #729 Body Start
LOAD D2 0.0003; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #729 Body End
POPARGS D5 0.0004; if() #728 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #730 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3944 ==; Test 'if'
LOAD D2 0.0001; if() #730 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #730 Body End
LOAD D2 0.0001; if() #435 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4043 ==; Test 'if'
LOAD D2 0.0001; if() #435 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #731 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4246 ==; Test 'if'
LOAD D2 0.0001; if() #436 Test AND if() #731 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4002 ==; Test 'if'
PUSHR D4; if() #436 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 4246; if() #436 Body End
LOAD D2 0.0001; if() #436 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #436 Else End
GOTO 4246; if() #731 Body End AND if() #435 Body End
LOAD D2 0.0001; if() #435 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #732 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4143 ==; Test 'if'
SETV D2 45; if() #732 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #733 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4143 ==; Test 'if'
PUSHR D4; if() #733 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #733 Body End
LOAD D2 0.0001; if() #732 Body End AND if() #437 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4169 ==; Test 'if'
LOAD D2 0.0001; if() #437 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 4246; if() #437 Body End
LOAD D2 0.0001; if() #734 Test AND if() #437 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4246 ==; Test 'if'
LOAD D2 0.0001; if() #734 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.2000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #438 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4216 ==; Test 'if'
PUSHR D4; if() #438 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4246; if() #438 Body End
LOAD D2 0; if() #439 Test AND if() #438 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4228 ==; Test 'if'
PUSHR D4; if() #439 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4246; if() #439 Body End
LOAD D2 0; if() #440 Test AND if() #439 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4240 ==; Test 'if'
PUSHR D4; if() #440 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4246; if() #440 Body End
PUSHR D4; if() #440 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #440 Else End
POPARGS D5 0.0002; if() #439 Else End AND if() #438 Else End AND if() #734 Body End AND if() #437 Else End AND if() #435 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(eweapon)] Body End
SETR D4 SP2; Func[void __UpdateEWMRandom(eweapon)] Body Start
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Randf(int)] Params Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.0032; UsrFunc[int Randf(int)] Call
POP D4
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0; if() #735 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4320 ==; Test 'if'
PUSHR D4; if() #735 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #735 Body End
LOAD D2 0; if() #736 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4366 ==; Test 'if'
LOAD D2 0; if() #736 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0; if() #737 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4366 ==; Test 'if'
PUSHR D4; if() #737 Body Start
LOAD D2 0; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #737 Body End
POP D5; if() #736 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #738 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4399 ==; Test 'if'
LOAD D2 0.0001; if() #738 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #738 Body End
LOAD D2 0.0001; if() #441 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4498 ==; Test 'if'
LOAD D2 0.0001; if() #441 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #739 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4678 ==; Test 'if'
LOAD D2 0.0001; if() #442 Test AND if() #739 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4457 ==; Test 'if'
PUSHR D4; if() #442 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 4678; if() #442 Body End
LOAD D2 0.0001; if() #442 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #442 Else End
GOTO 4678; if() #739 Body End AND if() #441 Body End
LOAD D2 0.0001; if() #441 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #740 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4588 ==; Test 'if'
SETV D2 45; if() #740 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D3 62832; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
MULTV D2 0.0001
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #741 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4588 ==; Test 'if'
PUSHR D4; if() #741 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #741 Body End
LOAD D2 0.0001; if() #740 Body End AND if() #443 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4614 ==; Test 'if'
LOAD D2 0.0001; if() #443 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 4678; if() #443 Body End
LOAD D2 0.0001; if() #742 Test AND if() #443 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4678 ==; Test 'if'
LOAD D2 0.0001; if() #742 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #444 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4648 ==; Test 'if'
PUSHR D4; if() #444 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4678; if() #444 Body End
LOAD D2 0; if() #445 Test AND if() #444 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4660 ==; Test 'if'
PUSHR D4; if() #445 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4678; if() #445 Body End
LOAD D2 0; if() #446 Test AND if() #445 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4672 ==; Test 'if'
PUSHR D4; if() #446 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4678; if() #446 Body End
PUSHR D4; if() #446 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #446 Else End
POPARGS D5 0.0002; if() #445 Else End AND if() #444 Else End AND if() #742 Body End AND if() #443 Else End AND if() #441 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0; if() #454 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4795 ==; Test 'if'
LOAD D2 0.0001; if() #454 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #454 Body End
LOAD D2 0; if() #455 Test AND if() #454 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4829 ==; Test 'if'
LOAD D2 0.0001; if() #455 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #455 Body End
LOAD D2 0; if() #456 Test AND if() #455 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4864 ==; Test 'if'
LOAD D2 0.0001; if() #456 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #456 Body End
LOAD D2 0; if() #457 Test AND if() #456 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4898 ==; Test 'if'
LOAD D2 0.0001; if() #457 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #457 Body End
LOAD D2 0; if() #458 Test AND if() #457 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4964 ==; Test 'if'
LOAD D2 0.0001; if() #458 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #458 Body End
LOAD D2 0; if() #459 Test AND if() #458 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5029 ==; Test 'if'
LOAD D2 0.0001; if() #459 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #459 Body End
LOAD D2 0; if() #460 Test AND if() #459 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5094 ==; Test 'if'
LOAD D2 0.0001; if() #460 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 5152; if() #460 Body End
LOAD D2 0.0001; if() #460 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #460 Else End
LOAD D2 0.0001; if() #459 Else End AND if() #458 Else End AND if() #457 Else End AND if() #456 Else End AND if() #455 Else End AND if() #454 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNJUMP D2
LOAD D2 0.0001; if() #743 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
GOTOCMP 5243 !=
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
GOTOCMP 5243 ==
SETV D2 1
GOTO 5244
SETV D2 0
COMPAREV D2 0
GOTOCMP 5276 ==; Test 'if'
LOAD D2 0.0001; if() #743 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #743 Body End
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
PUSHR D4; unless() #448 Test AND if(true) #447 [Opt:AlwaysOn]
CALLFUNC 0.2086; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 5328 !=; Test 'unless'
LOAD D2 0.0001; unless() #448 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZ D2
GOTO 5344; unless() #448 Body End
LOAD D2 0.0001; unless() #448 Else Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV2 176 D2
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2; unless() #448 Else End
LOAD D2 0.0001; if() #449 Test
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5407 ==; Test 'if'
PUSHR D4; unless() #744 Test AND if(true) #450 [Opt:AlwaysOn] AND if() #449 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNY
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHXOFS
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHYOFS
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHYSZ
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9484; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5516 !=; Test 'unless'
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start AND unless() #744 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; unless() #744 Body End
GOTO 5516; if() #449 Body End
STOREV 0 0; if() #449 Else Start
LOAD D2 0.0001; if() #451 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
GOTOCMP 5465 ==; Test 'if'
LOAD D2 0.0001; if() #452 Test AND if() #451 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5462 ==; Test 'if'
LOAD D2 0.0001; if() #452 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 5467; if() #452 Body End
SETV D2 1; if() #452 Else Start
STORE D2 0; if() #452 Else End
GOTO 5467; if() #451 Body End
SETV D2 1; if() #451 Else Start
STORE D2 0; if() #451 Else End
LOAD D2 0; if() #745 Test
COMPAREV D2 0
GOTOCMP 5516 ==; Test 'if'
LOAD D2 0.0001; if() #453 Test AND if() #745 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 5495 ==; Test 'if'
SETV D2 0; if() #453 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZ D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 5516; if() #453 Body End
SETV D2 0; if() #453 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #453 Else End
POPARGS D5 0.0002; if() #745 Body End AND if() #449 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNJUMP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
PUSHR D4; unless() #428 Test AND if(true) #427 [Opt:AlwaysOn]
CALLFUNC 0.2086; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 5579 !=; Test 'unless'
LOAD D2 0.0001; unless() #428 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZ D2
GOTO 5609; unless() #428 Body End
LOAD D2 0.0001; unless() #428 Else Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHYOFS D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNYOFS D2; unless() #428 Else End
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ADDV D2 0.1600
PUSHVARGR D2
PUSHVARGV 3.2000; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #723 Test AND if(true) #429 [Opt:AlwaysOn]
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5782 ==; Test 'if'
PUSHR D4; unless() #724 Test AND if() #723 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNY
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHXOFS
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHYOFS
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHYSZ
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9484; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5782 !=; Test 'unless'
STOREV 0 0; unless() #724 Body Start
LOAD D2 0.0001; if() #430 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5731 ==; Test 'if'
LOAD D2 0.0001; if() #431 Test AND if() #430 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5728 ==; Test 'if'
LOAD D2 0.0001; if() #431 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 5733; if() #431 Body End
SETV D2 1; if() #431 Else Start
STORE D2 0; if() #431 Else End
GOTO 5733; if() #430 Body End
SETV D2 1; if() #430 Else Start
STORE D2 0; if() #430 Else End
LOAD D2 0; if() #725 Test
COMPAREV D2 0
GOTOCMP 5782 ==; Test 'if'
LOAD D2 0.0001; if() #432 Test AND if() #725 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 5761 ==; Test 'if'
SETV D2 0; if() #432 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNZ D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2147; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 5782; if() #432 Body End
SETV D2 0; if() #432 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #432 Else End
POPARGS D5 0.0002; if() #725 Body End AND unless() #724 Body End AND if() #723 Body End
RETURNFUNC; Func[void __UpdateEWMFall(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0; if() #412 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5899 ==; Test 'if'
LOAD D2 0.0001; if() #412 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #412 Body End
LOAD D2 0; if() #413 Test AND if() #412 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5933 ==; Test 'if'
LOAD D2 0.0001; if() #413 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #413 Body End
LOAD D2 0; if() #414 Test AND if() #413 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5968 ==; Test 'if'
LOAD D2 0.0001; if() #414 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #414 Body End
LOAD D2 0; if() #415 Test AND if() #414 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6002 ==; Test 'if'
LOAD D2 0.0001; if() #415 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #415 Body End
LOAD D2 0; if() #416 Test AND if() #415 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6068 ==; Test 'if'
LOAD D2 0.0001; if() #416 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #416 Body End
LOAD D2 0; if() #417 Test AND if() #416 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6133 ==; Test 'if'
LOAD D2 0.0001; if() #417 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #417 Body End
LOAD D2 0; if() #418 Test AND if() #417 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6198 ==; Test 'if'
LOAD D2 0.0001; if() #418 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6256; if() #418 Body End
LOAD D2 0.0001; if() #418 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #418 Else End
LOAD D2 0.0001; if() #417 Else End AND if() #416 Else End AND if() #415 Else End AND if() #414 Else End AND if() #413 Else End AND if() #412 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
STORE D2 0
LOAD D2 0.0001; if() #419 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 16
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 6380 ==; Test 'if'
LOAD D2 0.0001; if() #419 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6399; if() #419 Body End
LOAD D2 0.0001; if() #419 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #419 Else End
LOAD D2 0; if() #420 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6434 ==; Test 'if'
LOAD D2 0.0001; if() #420 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #420 Body End
LOAD D2 0; if() #421 Test AND if() #420 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6468 ==; Test 'if'
LOAD D2 0.0001; if() #421 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #421 Body End
LOAD D2 0; if() #422 Test AND if() #421 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6503 ==; Test 'if'
LOAD D2 0.0001; if() #422 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #422 Body End
LOAD D2 0; if() #423 Test AND if() #422 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6537 ==; Test 'if'
LOAD D2 0.0001; if() #423 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #423 Body End
LOAD D2 0; if() #424 Test AND if() #423 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6603 ==; Test 'if'
LOAD D2 0.0001; if() #424 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #424 Body End
LOAD D2 0; if() #425 Test AND if() #424 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6668 ==; Test 'if'
LOAD D2 0.0001; if() #425 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #425 Body End
LOAD D2 0; if() #426 Test AND if() #425 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6733 ==; Test 'if'
LOAD D2 0.0001; if() #426 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 6791; if() #426 Body End
LOAD D2 0.0001; if() #426 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #426 Else End
LOAD D2 0.0001; if() #425 Else End AND if() #424 Else End AND if() #423 Else End AND if() #422 Else End AND if() #421 Else End AND if() #420 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(eweapon)] Body End
PUSHARGSV 0 0.0011; Func[void __DoEWeaponDeathPrototype(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0010
STOREV 0 0.0009
STOREV 0 0.0008
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0011; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR D2; InlineFunc[untyped Floor(untyped)] Body
STORE D2 0.0010
SETR D2 EWPNCOUNT; for() #165 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #165 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6884 ==; for() #165 TestFail?
LOAD D2 0.0003; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #165 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0009
LOAD D2 0.0009; if() #594 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 768
COMPAREV D2 768
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6880 !=; Test 'if' AND continue 1; AND if() #594 Body
LOAD D2 0.0009; if() #595 Test
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6884 !=; Test 'if' AND break 1; AND if() #595 Body
LOAD D2 0.0003; for() #165 Body End AND for() #165 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 6844; for() #165 End
LOAD D2 0.0003; if() #596 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6910 ==; Test 'if'
ALLOCATEMEMV D2 43 0; if() #596 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: Failed to find prototype eweapon"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 7220; return (Void)
LOAD D3 0
DEALLOCATEMEMR D3; if() #596 Body End
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
MODV D2 10
SUBV D2 6.2832
STORE D2 0.0005
LOAD D2 0.0011
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0010
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 10000
STORE D2 0.0004
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 100
RSHIFTV D2 0
STORE D2 0.0008
LOAD D2 0.0011; if() #359 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNEXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7000 ==; Test 'if'
LOAD D2 0.0011; if() #359 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
GOTO 7012; if() #359 Body End
LOAD D2 0.0011; if() #359 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
ADDV D2 8
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
ADDV D2 8
STORE D2 0.0006; if() #359 Else End
LOAD D2 0.0008; if() #360 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7065 ==; Test 'if'
STOREV 0 0.0001; for() #166 setup AND if() #360 Body Start
LOAD D2 0.0001; for() #166 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7056 ==; for() #166 TestFail?
PUSHR D4; for() #166 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
MULTV D2 6.2832
SETV D2 6.2832
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.8989; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #166 Body End
LOAD D2 0.0001; for() #166 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 7018; for() #166 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 7211; if() #360 Body End
LOAD D2 0.0008; if() #361 Test AND if() #360 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7105 ==; Test 'if'
STOREV 0 0.0001; for() #167 setup AND if() #361 Body Start
LOAD D2 0.0001; for() #167 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7096 ==; for() #167 TestFail?
PUSHR D4; for() #167 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D3 31416; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
DIVV D2 5000
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.8989; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #167 Body End
LOAD D2 0.0001; for() #167 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 7071; for() #167 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 7211; if() #361 Body End
LOAD D2 0.0004; if() #362 Test AND if() #361 Else Start
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 7172 ==; Test 'if'
SETR D2 LINKX; InlineFunc[int ArcTan(int, int)] Params Start AND if() #362 Body Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETR D2 LINKY
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2
LOAD D2 0.0005
DIVV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
STOREV 0 0; for() #168 setup
LOAD D2 0; for() #168 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7203 ==; for() #168 TestFail?
PUSHR D4; for() #168 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.8989; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #168 Body End
LOAD D2 0; for() #168 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7134; for() #168 End
GOTO 7203; if() #362 Body End
LOAD D2 0.0004; if() #597 Test AND if() #362 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7203 ==; Test 'if'
PUSHR D4; if() #597 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETR D2 LINKX; InlineFunc[int ArcTan(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETR D2 LINKY
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.8989; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; if() #597 Body End
LOAD D2 0.0009; if() #362 Else End AND InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body AND if() #361 Else End
SETV D2 0; if() #360 Else End
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0001; if() #354 Test
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7311 ==; Test 'if'
PUSHR D4; if() #354 Body Start
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
SETV D2 300
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 7387; if() #354 Body End
LOAD D2 0.0001; if() #355 Test AND if() #354 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 7336 ==; Test 'if'
LOAD D2 0.0001; if() #355 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
GOTO 7387; if() #355 Body End
LOAD D2 0.0001; if() #355 Else Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #356 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7357 ==; Test 'if'
PUSHR D4; if() #356 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7387; if() #356 Body End
LOAD D2 0; if() #357 Test AND if() #356 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7369 ==; Test 'if'
PUSHR D4; if() #357 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7387; if() #357 Body End
LOAD D2 0; if() #358 Test AND if() #357 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7381 ==; Test 'if'
PUSHR D4; if() #358 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7387; if() #358 Body End
PUSHR D4; if() #358 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2281; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #358 Else End
POPARGS D5 0.0002; if() #357 Else End AND if() #356 Else End AND if() #355 Else End AND if() #354 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathExplode(eweapon)] Body Start
PUSHR D4
PUSHV 135; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body Start
PUSHR D4
PUSHV 136; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #155 setup
LOAD D2 0; for() #155 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7524 ==; for() #155 TestFail?
PUSHR D4; for() #155 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #155 Body End
LOAD D2 0; for() #155 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7480; for() #155 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #154 setup
LOAD D2 0; for() #154 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7582 ==; for() #154 TestFail?
PUSHR D4; for() #154 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #154 Body End
LOAD D2 0; for() #154 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7538; for() #154 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #352 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7647 ==; Test 'if'
STOREV 0 0; for() #156 setup AND if() #352 Body Start
LOAD D2 0; for() #156 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7692 ==; for() #156 TestFail?
PUSHR D4; for() #156 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #156 Body End
LOAD D2 0; for() #156 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7602; for() #156 End
GOTO 7692; if() #352 Body End
STOREV 4 0; for() #157 setup AND if() #352 Else Start
LOAD D2 0; for() #157 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7692 ==; for() #157 TestFail?
PUSHR D4; for() #157 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #157 Body End
LOAD D2 0; for() #157 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7648; for() #157 End
SETV D2 0; if() #352 Else End
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #162 setup
LOAD D2 0; for() #162 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7750 ==; for() #162 TestFail?
PUSHR D4; for() #162 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #162 Body End
LOAD D2 0; for() #162 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7706; for() #162 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #159 setup
LOAD D2 0; for() #159 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7808 ==; for() #159 TestFail?
PUSHR D4; for() #159 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #159 Body End
LOAD D2 0; for() #159 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7764; for() #159 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #158 setup
LOAD D2 0; for() #158 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7868 ==; for() #158 TestFail?
PUSHR D4; for() #158 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #158 Body End
LOAD D2 0; for() #158 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7824; for() #158 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #353 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7935 ==; Test 'if'
STOREV 0 0; for() #160 setup AND if() #353 Body Start
LOAD D2 0; for() #160 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7980 ==; for() #160 TestFail?
PUSHR D4; for() #160 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #160 Body End
LOAD D2 0; for() #160 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7890; for() #160 End
GOTO 7980; if() #353 Body End
STOREV 4 0; for() #161 setup AND if() #353 Else Start
LOAD D2 0; for() #161 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7980 ==; for() #161 TestFail?
PUSHR D4; for() #161 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #161 Body End
LOAD D2 0; for() #161 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7936; for() #161 End
SETV D2 13; if() #353 Else End AND InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #163 setup
LOAD D2 0; for() #163 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8040 ==; for() #163 TestFail?
PUSHR D4; for() #163 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #163 Body End
LOAD D2 0; for() #163 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7996; for() #163 End
STOREV 4 0; for() #164 setup
LOAD D2 0; for() #164 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8085 ==; for() #164 TestFail?
PUSHR D4; for() #164 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #164 Body End
LOAD D2 0; for() #164 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 8041; for() #164 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[npc screendata::CreateNPC(int)] Params Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[npc screendata::CreateNPC(int)] Params End
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCX D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCY D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body Start
PUSHR D4
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1306; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[void __DoEWeaponDeathRunScript(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
PUSHR D4
CALLFUNC 0.1253; UsrFunc[int FindUnusedFFC()] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #598 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8221 ==; Test 'if'
SETV D2 0; if() #598 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 8360; return (Void) AND if() #598 Body End
LOAD D2 0.0004; InlineFunc[ffc screendata::LoadFFC(int)] Params
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0003
SETR D2 EWPNCOUNT; for() #169 setup
STORE D2 0
LOAD D2 0; for() #169 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8263 ==; for() #169 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #169 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0002
LOAD D2 0.0002; if() #599 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 768
COMPAREV D2 512
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8259 !=; Test 'if' AND continue 1; AND if() #599 Body
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0002
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFEWPN
PUSHVARGR EWPNMISCD; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001; for() #169 Body End
LOAD D2 0; for() #169 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8226; for() #169 End
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 3
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0005
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ORV D2 1024
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0822; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR X D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0845; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR Y D2
LOAD D2 0.0005
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
POPARGS D5 0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void UpdateEWeapons()] Body Start
SETR D4 SP2
STOREV 0 0.0001
SETR D2 LINKACTION; unless() #345 Test
COMPAREV D2 4
GOTOCMP 8379 ==
SETR D2 LINKACTION
COMPAREV D2 5
GOTOCMP 8379 ==
SETR D2 LINKACTION
COMPAREV D2 14
GOTOCMP 8379 ==
SETR D2 LINKACTION
COMPAREV D2 15
GOTOCMP 8379 ==
SETV D2 0
GOTO 8380
SETV D2 1
COMPAREV D2 0
GOTOCMP 8429 !=; Test 'unless'
SETR D2 EWPNCOUNT; for() #149 setup AND unless() #345 Body Start
STORE D2 0
LOAD D2 0; for() #149 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8475 ==; for() #149 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #149 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #573 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 8416 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 8416 !=
SETV D2 0
GOTO 8417
SETV D2 1
COMPAREV D2 0
GOTOCMP 8424 !=; Test 'if' AND continue 1; AND if() #573 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void UpdateEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void UpdateEWeapon(eweapon)] Params End
CALLFUNC 0.2385; UsrFunc[void UpdateEWeapon(eweapon)] Call
POP D4; for() #149 Body End
LOAD D2 0; for() #149 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8384; for() #149 End
GOTO 8475; unless() #345 Body End
SETR D2 EWPNCOUNT; for() #150 setup AND unless() #345 Else Start
STORE D2 0
LOAD D2 0; for() #150 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8475 ==; for() #150 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #150 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #574 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 8463 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 8463 !=
SETV D2 0
GOTO 8464
SETV D2 1
COMPAREV D2 0
GOTOCMP 8471 !=; Test 'if' AND continue 1; AND if() #574 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params End
CALLFUNC 0.8477; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Call
POP D4; for() #150 Body End
LOAD D2 0; for() #150 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8431; for() #150 End
POPARGS D5 0.0002; unless() #345 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0 0.0002; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002; if() #746 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8504 ==; Test 'if'
LOAD D2 0.0002; if() #747 Test AND if() #746 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8504 ==; Test 'if'
PUSHR D4; if() #747 Body Start
LOAD D2 0.0002; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.0928; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #747 Body End
LOAD D2 0.0002; if() #746 Body End AND if() #461 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8696 ==; Test 'if'
SETV D2 1000; if() #461 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2
LOAD D2 0.0002; if() #748 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 8544 ==
SETR D2 GD27
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 8544 ==
SETV D2 1
GOTO 8545
SETV D2 0
COMPAREV D2 0
GOTOCMP 8753 !=; Test 'if' AND return (Void) AND if() #748 Body
STOREV 0 0.0001
LOAD D2 0.0002; if() #462 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 8561 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int RadtoDeg(int)] Params Start AND if() #462 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 8627; if() #462 Body End
PUSHR D4; if() #462 Else Start
LOAD D2 0.0002; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2013; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #463 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8577 ==; Test 'if'
SETV D2 -90; if() #463 Body Start
STORE D2 0.0001
GOTO 8627; if() #463 Body End
LOAD D2 0; if() #464 Test AND if() #463 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8585 ==; Test 'if'
SETV D2 -45; if() #464 Body Start
STORE D2 0.0001
GOTO 8627; if() #464 Body End
LOAD D2 0; if() #465 Test AND if() #464 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8593 ==; Test 'if'
SETV D2 0; if() #465 Body Start
STORE D2 0.0001
GOTO 8627; if() #465 Body End
LOAD D2 0; if() #466 Test AND if() #465 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8601 ==; Test 'if'
SETV D2 45; if() #466 Body Start
STORE D2 0.0001
GOTO 8627; if() #466 Body End
LOAD D2 0; if() #467 Test AND if() #466 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8609 ==; Test 'if'
SETV D2 90; if() #467 Body Start
STORE D2 0.0001
GOTO 8627; if() #467 Body End
LOAD D2 0; if() #468 Test AND if() #467 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8617 ==; Test 'if'
SETV D2 135; if() #468 Body Start
STORE D2 0.0001
GOTO 8627; if() #468 Body End
LOAD D2 0; if() #469 Test AND if() #468 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8625 ==; Test 'if'
SETV D2 180; if() #469 Body Start
STORE D2 0.0001
GOTO 8627; if() #469 Body End
SETV D2 -135; if() #469 Else Start
STORE D2 0.0001; if() #469 Else End
STOREV 0 0; if() #468 Else End AND if() #467 Else End AND if() #466 Else End AND if() #465 Else End AND if() #464 Else End AND if() #463 Else End AND if() #462 Else End
LOAD D2 0.0001; if() #470 Test
COMPAREV D2 0
GOTOCMP 8636 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 8636 >=
SETV D2 1
GOTO 8637
SETV D2 0
COMPAREV D2 0
GOTOCMP 8642 ==; Test 'if'
SETV D2 0; if() #470 Body Start
STORE D2 0
GOTO 8644; if() #470 Body End
SETV D2 2; if() #470 Else Start
STORE D2 0; if() #470 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
PUSHR EWPNTILE
PUSHARGSV 1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
PUSHR EWPNX
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNZ
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 8753; if() #461 Body End
LOAD D2 0.0002; if() #749 Test AND if() #461 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8736 ==; Test 'if'
SETR D2 GD27; if() #471 Test AND if() #749 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8727 ==; Test 'if'
SETV D2 1000; if() #471 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2
GOTO 8736; if() #471 Body End
SETV D2 0; if() #471 Else Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNXOFS D2; if() #471 Else End
LOAD D2 0.0002; if() #749 Body End AND if() #750 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8753 ==; Test 'if'
PUSHR D4; if() #750 Body Start
LOAD D2 0.0002; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #750 Body End
POPARGS D5 0.0003; if() #461 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body End
SETR D4 SP2; Func[void UpdateGhostZH1()] Body Start
PUSHR D4
CALLFUNC 0.8362; UsrFunc[void UpdateEWeapons()] Call
PEEK D4
CALLFUNC 0.0868; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK D4
CALLFUNC 0.8764; UsrFunc[void UpdateGhostZHData1()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR D4 SP2
SETR D2 CURDMAP
LSHIFTV D2 8
PUSHR D2
SETR D2 CURDSCR
POP D3
ADDR D2 D3
STORE D2 0
SETR D2 GD27; if() #346 Test
PUSHR D2
POP D0
READPODARRAYV D2 7
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8797 ==; Test 'if'
SETV D2 0; if() #346 Body Start
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
GOTO 8815; if() #346 Body End
SETR D2 GD27; if() #575 Test AND if() #346 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8815 ==; Test 'if'
SETR D2 GD27; if() #575 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 6
SUBV D2 1
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #575 Body End
POP D5; if() #346 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR D4 SP2; Func[void UpdateGhostZH2()] Body Start
PUSHR D4
CALLFUNC 0.0994; UsrFunc[void DrawGhostFFCs()] Call
PEEK D4
CALLFUNC 0.0059; UsrFunc[void AutoGhost()] Call
PEEK D4
CALLFUNC 0.8826; UsrFunc[void UpdateGhostZHData2()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR D4 SP2; Func[void UpdateGhostZHData2()] Body Start
SETR D2 GD27
PUSHR D2
POP D0
READPODARRAYV D2 1
ADDV D2 1
MODV D2 8
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETR D2 GD27; if() #347 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8858 ==; Test 'if'
SETR D2 GD27; if() #347 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ORV D2 1
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 8868; if() #347 Body End
SETR D2 GD27; if() #347 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 -2
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #347 Else End
SETR D2 GD27; if(true) #576 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 3
ADDV D2 1
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD27; if() #577 Test
PUSHR D2
POP D0
READPODARRAYV D2 3
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8903 ==; Test 'if'
SETV D2 0; if() #577 Body Start
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD27
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #577 Body End
SETR D2 GD27; if(true) #578 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 5
ADDV D2 1
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD27; if() #579 Test
PUSHR D2
POP D0
READPODARRAYV D2 5
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8938 ==; Test 'if'
SETV D2 0; if() #579 Body Start
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD27
PUSHR D2
POP D0
READPODARRAYV D2 4
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2; if() #579 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR D4 SP2; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOAD D2 0.0001; if() #693 Test
COMPAREV D2 97
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8952 ==; Test 'if'
LOAD D2 0.0001; if() #694 Test AND if() #693 Body Start
COMPAREV D2 122
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 8952 ==; Test 'if'
SETV D2 1; return Start AND if() #694 Body Start
GOTO 8987; return End AND if() #694 Body End
LOAD D2 0.0001; if() #693 Body End AND if() #695 Test
COMPAREV D2 65
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8964 ==; Test 'if'
LOAD D2 0.0001; if() #696 Test AND if() #695 Body Start
COMPAREV D2 90
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 8964 ==; Test 'if'
SETV D2 1; return Start AND if() #696 Body Start
GOTO 8987; return End AND if() #696 Body End
LOAD D2 0.0001; if() #695 Body End AND if() #697 Test
COMPAREV D2 95
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8971 ==; Test 'if'
SETV D2 1; return Start AND if() #697 Body Start
GOTO 8987; return End AND if() #697 Body End
LOAD D2 0; unless() #698 Test
COMPAREV D2 0
GOTOCMP 8986 !=; Test 'unless'
LOAD D2 0.0001; if() #699 Test AND unless() #698 Body Start
COMPAREV D2 48
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8986 ==; Test 'if'
LOAD D2 0.0001; if() #700 Test AND if() #699 Body Start
COMPAREV D2 57
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 8986 ==; Test 'if'
SETV D2 1; return Start AND if() #700 Body Start
GOTO 8987; return End AND if() #700 Body End
SETV D2 0; if() #699 Body End AND unless() #698 Body End AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(eweapon, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params End
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0004; if() #590 Test
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9021 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #590 Body Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #590 Body End
LOAD D2 0.0004; if() #350 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNEXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9157 ==; Test 'if'
SETV D2 3; if() #350 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNEXTEND D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNTXSZ D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNTYSZ D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHXSZ D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNTYSZ
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNHYSZ D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNTXSZ
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2
GOTO 9177; if() #350 Body End
LOAD D2 0.0003; if() #350 Else Start
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNX D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNY D2; if() #350 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1678; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNX
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNY
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004; if() #351 Test
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 15
GOTOCMP 9314 !=
LOAD D2 0.0004
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
COMPAREV D2 -1
GOTOCMP 9314 !=
SETV D2 1
GOTO 9315
SETV D2 0
COMPAREV D2 0
GOTOCMP 9334 ==; Test 'if'
PUSHR D4; if() #351 Body Start
LOAD D2 0; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params Start
PUSHR D2; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params End
CALLFUNC 0.2169; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
GOTO 9352; if() #351 Body End
LOAD D2 0.0004; if() #351 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2; if() #351 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 -257
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFEWPN
SETR EWPNMISCD D2
LOAD D2 0; if() #591 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9465 ==; Test 'if'
SETV D2 0; if() #591 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #591 Body End
LOAD D2 0; if() #592 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFEWPN
SETR D2 EWPNMISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9482 ==; Test 'if'
PUSHR D4; if() #592 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1788; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #592 Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __CopyEWeapon(eweapon, int, int, int)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #189 setup
LOAD D2 0; for() #189 LoopTest
PUSHR D2
LOAD D2 0.0001
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9533 ==; for() #189 TestFail?
LOAD D2 0.0006; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #761 Test AND for() #189 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 9529 ==; Test 'if'
SETV D2 0; if() #762 Test AND if() #761 Body Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
COMPAREV D2 0
GOTOCMP 9529 ==; Test 'if'
SETV D2 1; return Start AND if() #762 Body Start
GOTO 9534; return End AND if() #762 Body End
LOAD D2 0; if() #761 Body End AND for() #189 Body End AND for() #189 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9487; for() #189 End
SETV D2 0; return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End


PUSHR D0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #498 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 16 ==; Test 'if'
SETV D2 -1; if() #498 Body Start
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
GOTO 22; if() #498 Body End
LOAD D2 0.0001; if() #498 Else Start
PUSHR D2
SETR D2 GD27
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #498 Else End
POPARGS D5 0.0002
QUIT; void run(int) Body End


PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
PUSHARGSV 0 0.0009
SETR D4 SP2
SETV D2 4; InlineFunc[void Waitframes(int)] Params
WAITFRAMESR D2; InlineFunc[void Waitframes(int)] Body
PUSHR D4; if() #859 Test
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 0.0887; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #859 Body
PUSHR D4
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 0.0887; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008
STORE D2 0.0007
LOAD D2 0.0008
STORE D2 0.0006
LOAD D2 0.0008
STORE D2 0.0005
LOAD D2 0.0008
STORE D2 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
ALLOCATEMEMV D2 256 0
STORE D2 0.0001
LOAD D2 0.0011; if() #860 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 73 ==; Test 'if'
LOAD D2 0.0011; InlineFunc[void Game::GetMessage(int, char32[])] Params Start AND if() #860 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void Game::GetMessage(int, char32[])] Params End
POP D3; InlineFunc[void Game::GetMessage(int, char32[])] Body Start
POP D6
GETMESSAGE D3 D2; InlineFunc[void Game::GetMessage(int, char32[])] Body End AND if() #860 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_CapString(int)] Params Start
PUSHR D2; UsrFunc[void HealthBar_CapString(int)] Params End
CALLFUNC 0.0416; UsrFunc[void HealthBar_CapString(int)] Call
POP D4
LOAD D2 0.0005; while() #9 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 217 ==; Test 'while'
PUSHR D4; while() #9 Body Start
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 0.0887; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0007; if() #861 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 109 ==; Test 'if'
LOAD D2 0.0008; if() #861 Body Start
STORE D2 0.0007; if() #861 Body End
LOAD D2 0.0002; if() #862 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 117 ==; Test 'if'
LOAD D2 0.0002; if() #862 Body Start
SUBV D2 1
STORE D2 0.0002; if() #862 Body End
LOAD D2 0.0008; if() #863 Test
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 163 ==; Test 'if'
LOAD D2 0.0008; if() #864 Test AND if() #863 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 159 ==; Test 'if'
LOAD D2 0.0002; if() #499 Test AND if() #864 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 150 ==; Test 'if'
LOAD D2 0.0003; if() #499 Body Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 157; if() #499 Body End
LOAD D2 0.0006; if() #499 Else Start
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003; if() #499 Else End
SETV D2 96
STORE D2 0.0002; if() #864 Body End
LOAD D2 0.0006
STORE D2 0.0004
LOAD D2 0.0008
STORE D2 0.0006; if() #863 Body End
LOAD D2 0.0005; if() #865 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 199 ==; Test 'if'
LOAD D2 0.0005; if() #500 Test AND if() #865 Body Start
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 197 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Max(int, int)] Params Start AND if() #500 Body Start
PUSHR D2
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
DIVV D2 16
POP D3
SUBR D3 D2
PUSHVARGR D3
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0005
GOTO 199; if() #500 Body End
LOAD D2 0.0008; if() #500 Else Start
STORE D2 0.0005; if() #500 Else End
PUSHR D4; if() #865 Body End
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0453; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #9 Body End
GOTO 78; while() #9 End
LOAD D2 0.0010; unless() #866 Test
COMPAREV D2 0
GOTOCMP 244 !=; Test 'unless'
LOAD D2 0.0002; unless() #866 Body Start AND if() #867 Test AND while(true) #10 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 228 ==; Test 'if'
LOAD D2 0.0002; if() #867 Body Start
SUBV D2 1
STORE D2 0.0002; if() #867 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0453; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #10 Body [Opt:AlwaysOn] End
GOTO 220; while() #10 End AND unless() #866 Body End
STOREV 0 0; for() #232 setup
LOAD D2 0; for() #232 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 277 ==; for() #232 TestFail?
LOAD D2 0.0002; if() #868 Test AND for() #232 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 258 ==; Test 'if'
LOAD D2 0.0002; if() #868 Body Start
SUBV D2 1
STORE D2 0.0002; if() #868 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0453; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #232 Body End
LOAD D2 0; for() #232 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 245; for() #232 End
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0018
QUIT; void run(int, int, int, int, int, int, int, int) Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #20 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 293 ==; Test 'if'
LOAD D2 0.0001; if() #20 Body Start
STORE D2 0.0002
GOTO 303; if() #20 Body End
LOAD D2 0.0002; if() #85 Test AND if() #20 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 303 ==; Test 'if'
LOAD D2 0; if() #85 Body Start
STORE D2 0.0002; if() #85 Body End
LOAD D2 0.0002; if() #20 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
PUSHV 0; Func[int GetEnemyProperty(npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0.0002; if() #72 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 332 ==
LOAD D2 0
COMPAREV D2 0
GOTOCMP 332 ==
SETV D2 1
GOTO 333
SETV D2 0
COMPAREV D2 0
GOTOCMP 341 ==; Test 'if'
LOAD D2 0; return Start AND if() #72 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
GOTO 405; return End AND if() #72 Body End
LOAD D2 0.0001; if() #73 Test AND if() #72 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 351 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #73 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCX
GOTO 405; return End AND if() #73 Body End
LOAD D2 0.0001; if() #74 Test AND if() #73 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 361 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #74 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCY
GOTO 405; return End AND if() #74 Body End
LOAD D2 0.0001; if() #75 Test AND if() #74 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 371 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #75 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCZ
GOTO 405; return End AND if() #75 Body End
LOAD D2 0.0001; if() #76 Test AND if() #75 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 381 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #76 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCJUMP
GOTO 405; return End AND if() #76 Body End
LOAD D2 0.0001; if() #77 Test AND if() #76 Else Start
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 391 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #77 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCDIR
GOTO 405; return End AND if() #77 Body End
LOAD D2 0.0001; if() #78 Test AND if() #77 Else Start
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 401 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #78 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
GOTO 405; return End AND if() #78 Body End
LOAD D2 0.0002; return Start AND if() #78 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCCSET
POPARGS D5 0.0003; return End AND if() #78 Else End AND if() #77 Else End AND if() #76 Else End AND if() #75 Else End AND if() #74 Else End AND if() #73 Else End AND if() #72 Else End
RETURNFUNC; Func[int GetEnemyProperty(npc, int)] Body End
SETR D4 SP2; Func[int HealthBar_GetHP(npc)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[int GetEnemyProperty(npc, int)] Params Start
PUSHR D2
PUSHV 20; UsrFunc[int GetEnemyProperty(npc, int)] Params End
CALLFUNC 0.0306; UsrFunc[int GetEnemyProperty(npc, int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[int HealthBar_GetHP(npc)] Body End
PUSHV 0; Func[void HealthBar_CapString(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int SizeOfArray(int[])] Params AND for() #230 setup
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #230 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 451 ==; for() #230 TestFail?
LOAD D2 0.0001; if() #843 Test AND for() #230 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 32
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 447 ==; Test 'if'
SETV D2 0; if() #843 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 451; return (Void) AND if() #843 Body End
LOAD D2 0; for() #230 Body End AND for() #230 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 422; for() #230 End
POPARGS D5 0.0002
RETURNFUNC; Func[void HealthBar_CapString(int)] Body End
PUSHARGSV 0 0.0006; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 8 0.0005
LOAD D2 0.0006
ADDV D2 16
STORE D2 0.0004
STOREV 247 0.0003
LOAD D2 0.0006
ADDV D2 19
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 8
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0009; if() #844 Test
COMPAREV D2 0
GOTOCMP 518 <=
SETV D2 1
GOTO 519
SETV D2 0
COMPAREV D2 0
GOTOCMP 558 ==; Test 'if'
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #844 Body Start
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0281; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
PUSHR D2
PUSHV 135
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #844 Body End
LOAD D2 0.0011; if() #845 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 600 ==; Test 'if'
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #845 Body Start
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0281; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
PUSHR D2
PUSHV 134
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #845 Body End
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 8
PUSHV 1
PUSHARGSV 0 0.0004
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0012; if() #846 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 635 ==; Test 'if'
PUSHR D4; if() #846 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
ADDV D2 -6
PUSHR D2
PUSHV 2
PUSHV 12
PUSHV 8
PUSHV 0
LOAD D2 0.0012
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0656; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4; if() #846 Body End
LOAD D2 0.0007; if() #848 Test AND if(true) #847 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 654 ==; Test 'if'
PUSHR D4; if() #848 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
ADDV D2 -6
PUSHR D2
PUSHV 2
PUSHV 12
PUSHV 8
LOAD D2 0.0008
PUSHR D2; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0753; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Call
POP D4; if() #848 Body End
POPARGS D5 0.0013
RETURNFUNC; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body Start
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 8 0
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0002; if() #849 Test
COMPAREV D2 10000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 779 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #849 Body Start
DIVV D2 10000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #849 Body End
LOAD D2 0.0002; if() #850 Test
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 800 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #850 Body Start
DIVV D2 1000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #850 Body End
LOAD D2 0.0002; if() #851 Test
COMPAREV D2 100
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 821 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #851 Body Start
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #851 Body End
LOAD D2 0.0002; if() #852 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 842 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #852 Body Start
DIVV D2 10; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #852 Body End
LOAD D2 0.0002
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0656; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0009
RETURNFUNC; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0002
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND for() #231 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #231 LoopTest
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1050 ==; for() #231 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #231 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0
LOAD D2 0; if() #853 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 926 ==; Test 'if'
LOAD D2 0.0002; if() #853 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0407; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #853 Body End
LOAD D2 0; if() #854 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 950 ==; Test 'if'
LOAD D2 0.0002; if() #854 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0407; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #854 Body End
LOAD D2 0; if() #855 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 974 ==; Test 'if'
LOAD D2 0.0002; if() #855 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0407; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #855 Body End
LOAD D2 0; if() #856 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 998 ==; Test 'if'
LOAD D2 0.0002; if() #856 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0407; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #856 Body End
LOAD D2 0; if() #857 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1022 ==; Test 'if'
LOAD D2 0.0002; if() #857 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0407; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #857 Body End
LOAD D2 0; if() #858 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1046 ==; Test 'if'
LOAD D2 0.0002; if() #858 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0407; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #858 Body End
LOAD D2 0.0001; for() #231 Body End AND for() #231 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 892; for() #231 End
LOAD D2 0.0002; return Start
POPARGS D5 0.0009; return End
RETURNFUNC; Func[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Body End


PUSHR D0; void run(int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR REFFFC; void run(int, int, int, int) Body Start
PUSHARGSV 0 0.0011
SETR D4 SP2
SETV D2 4; InlineFunc[void Waitframes(int)] Params
WAITFRAMESR D2; InlineFunc[void Waitframes(int)] Body
PUSHR D4
LOAD D2 0.0015; UsrFunc[npc HealthBar_GetNPC(int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2; UsrFunc[npc HealthBar_GetNPC(int, int)] Params End
CALLFUNC 0.1016; UsrFunc[npc HealthBar_GetNPC(int, int)] Call
POP D4
STORE D2 0.0010
LOAD D2 0.0010; InlineFunc[bool npc::isValid()] Params AND unless() #882 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23 !=; Test 'unless'
QUIT; InlineFunc[void Quit()] Body AND unless() #882 Body
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0491; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0009
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0491; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0008
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0491; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0007
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0491; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0491; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 1 0.0001; for() #236 setup
LOAD D2 0.0001; for() #236 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 96 ==; for() #236 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #236 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #883 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 92 ==; Test 'if'
LOAD D2 0; if() #502 Test AND if() #883 Body Start
PUSHR D2
LOAD D2 0.0011
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 89 ==; Test 'if'
GOTO 96; break 1; AND if() #502 Body Start
GOTO 92; if() #502 Body End
LOAD D2 0.0002; if() #502 Else Start
ADDV D2 1
STORE D2 0.0002; if() #502 Else End
LOAD D2 0.0001; if() #883 Body End AND for() #236 Body End AND for() #236 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 57; for() #236 End
ALLOCATEMEMV D2 256 0
STORE D2 0.0001
LOAD D2 0.0014; if() #503 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 110 ==; Test 'if'
LOAD D2 0.0014; InlineFunc[void Game::GetMessage(int, char32[])] Params Start AND if() #503 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void Game::GetMessage(int, char32[])] Params End
POP D3; InlineFunc[void Game::GetMessage(int, char32[])] Body Start
POP D6
GETMESSAGE D3 D2; InlineFunc[void Game::GetMessage(int, char32[])] Body End
GOTO 115; if() #503 Body End
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start AND if() #503 Else Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End AND if() #503 Else End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_CapString(int)] Params Start
PUSHR D2; UsrFunc[void HealthBar_CapString(int)] Params End
CALLFUNC 0.0500; UsrFunc[void HealthBar_CapString(int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
LOAD D2 0.0006; while() #11 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 268 ==; Test 'while'
LOAD D2 0.0010; InlineFunc[bool npc::isValid()] Params AND if() #504 Test AND while() #11 Body Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 151 ==; Test 'if'
PUSHR D4; InlineFunc[int Max(int, int)] Params Start AND if() #504 Body Start
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0491; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0009
GOTO 153; if() #504 Body End
SETV D2 0; if() #504 Else Start
STORE D2 0.0009; if() #504 Else End
LOAD D2 0.0003; if() #884 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 161 ==; Test 'if'
LOAD D2 0.0003; if() #884 Body Start
SUBV D2 1
STORE D2 0.0003; if() #884 Body End
LOAD D2 0.0009; if() #885 Test
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 207 ==; Test 'if'
LOAD D2 0.0009; if() #886 Test AND if() #885 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 203 ==; Test 'if'
LOAD D2 0.0003; if() #505 Test AND if() #886 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 194 ==; Test 'if'
LOAD D2 0.0004; if() #505 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0004
GOTO 201; if() #505 Body End
LOAD D2 0.0007; if() #505 Else Start
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004; if() #505 Else End
SETV D2 96
STORE D2 0.0003; if() #886 Body End
LOAD D2 0.0007
STORE D2 0.0005
LOAD D2 0.0009
STORE D2 0.0007; if() #885 Body End
LOAD D2 0.0006; if() #887 Test
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 243 ==; Test 'if'
LOAD D2 0.0006; if() #506 Test AND if() #887 Body Start
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 241 ==; Test 'if'
LOAD D2 0.0006; InlineFunc[int Max(int, int)] Params Start AND if() #506 Body Start
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
DIVV D2 16
POP D3
SUBR D3 D2
PUSHVARGR D3
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0006
GOTO 243; if() #506 Body End
LOAD D2 0.0009; if() #506 Else Start
STORE D2 0.0006; if() #506 Else End
PUSHR D4; if() #887 Body End
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 12
SETV D2 12
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0582; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #11 Body End
GOTO 132; while() #11 End
SETV D2 1
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
LOAD D2 0.0003; if() #888 Test AND while(true) #12 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 288 ==; Test 'if'
LOAD D2 0.0003; if() #888 Body Start
SUBV D2 1
STORE D2 0.0003; if() #888 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 12
SETV D2 12
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0582; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0012; if() #889 Test
COMPAREV D2 0
GOTOCMP 319 ==; Test 'if'
PUSHR D4; if() #890 Test AND if() #889 Body Start
LOAD D2 0.0011; UsrFunc[bool HealthBar_CheckDone(ffc)] Params Start
PUSHR D2; UsrFunc[bool HealthBar_CheckDone(ffc)] Params End
CALLFUNC 0.0537; UsrFunc[bool HealthBar_CheckDone(ffc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 321 !=; Test 'if' AND break 1; AND if() #890 Body
WAITFRAME; if() #889 Body End AND InlineFunc[void Waitframe()] Body AND while(true) #12 Body [Opt:AlwaysOn] End
GOTO 280; while() #12 End
STOREV 0 0; for() #237 setup
LOAD D2 0; for() #237 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 361 ==; for() #237 TestFail?
LOAD D2 0.0003; if() #891 Test AND for() #237 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 335 ==; Test 'if'
LOAD D2 0.0003; if() #891 Body Start
SUBV D2 1
STORE D2 0.0003; if() #891 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 12
SETV D2 12
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0582; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #237 Body End
LOAD D2 0; for() #237 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 322; for() #237 End
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0016
QUIT; void run(int, int, int, int) Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #20 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
LOAD D2 0.0001; if() #20 Body Start
STORE D2 0.0002
GOTO 387; if() #20 Body End
LOAD D2 0.0002; if() #85 Test AND if() #20 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 387 ==; Test 'if'
LOAD D2 0; if() #85 Body Start
STORE D2 0.0002; if() #85 Body End
LOAD D2 0.0002; if() #20 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
PUSHV 0; Func[int GetEnemyProperty(npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0.0002; if() #72 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 416 ==
LOAD D2 0
COMPAREV D2 0
GOTOCMP 416 ==
SETV D2 1
GOTO 417
SETV D2 0
COMPAREV D2 0
GOTOCMP 425 ==; Test 'if'
LOAD D2 0; return Start AND if() #72 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
GOTO 489; return End AND if() #72 Body End
LOAD D2 0.0001; if() #73 Test AND if() #72 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 435 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #73 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCX
GOTO 489; return End AND if() #73 Body End
LOAD D2 0.0001; if() #74 Test AND if() #73 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 445 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #74 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCY
GOTO 489; return End AND if() #74 Body End
LOAD D2 0.0001; if() #75 Test AND if() #74 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 455 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #75 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCZ
GOTO 489; return End AND if() #75 Body End
LOAD D2 0.0001; if() #76 Test AND if() #75 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 465 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #76 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCJUMP
GOTO 489; return End AND if() #76 Body End
LOAD D2 0.0001; if() #77 Test AND if() #76 Else Start
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 475 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #77 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCDIR
GOTO 489; return End AND if() #77 Body End
LOAD D2 0.0001; if() #78 Test AND if() #77 Else Start
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 485 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #78 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
GOTO 489; return End AND if() #78 Body End
LOAD D2 0.0002; return Start AND if() #78 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCCSET
POPARGS D5 0.0003; return End AND if() #78 Else End AND if() #77 Else End AND if() #76 Else End AND if() #75 Else End AND if() #74 Else End AND if() #73 Else End AND if() #72 Else End
RETURNFUNC; Func[int GetEnemyProperty(npc, int)] Body End
SETR D4 SP2; Func[int HealthBar_GetHP(npc)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[int GetEnemyProperty(npc, int)] Params Start
PUSHR D2
PUSHV 20; UsrFunc[int GetEnemyProperty(npc, int)] Params End
CALLFUNC 0.0390; UsrFunc[int GetEnemyProperty(npc, int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[int HealthBar_GetHP(npc)] Body End
PUSHV 0; Func[void HealthBar_CapString(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int SizeOfArray(int[])] Params AND for() #233 setup
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #233 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 535 ==; for() #233 TestFail?
LOAD D2 0.0001; if() #869 Test AND for() #233 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 32
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 531 ==; Test 'if'
SETV D2 0; if() #869 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 535; return (Void) AND if() #869 Body End
LOAD D2 0; for() #233 Body End AND for() #233 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 506; for() #233 End
POPARGS D5 0.0002
RETURNFUNC; Func[void HealthBar_CapString(int)] Body End
PUSHARGSV 0 0.0002; Func[bool HealthBar_CheckDone(ffc)] Body Start
SETR D4 SP2
STOREV 1 0.0001; for() #234 setup
LOAD D2 0.0001; for() #234 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 579 ==; for() #234 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #234 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #870 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 575 ==; Test 'if'
LOAD D2 0; if() #871 Test AND if() #870 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 575 ==; Test 'if'
SETV D2 0; return Start AND if() #871 Body Start
GOTO 580; return End AND if() #871 Body End
LOAD D2 0.0001; if() #870 Body End AND for() #234 Body End AND for() #234 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 540; for() #234 End
SETV D2 1; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool HealthBar_CheckDone(ffc)] Body End
PUSHARGSV 0 0.0006; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 8 0.0005
LOAD D2 0.0006
ADDV D2 16
STORE D2 0.0004
STOREV 247 0.0003
LOAD D2 0.0006
ADDV D2 19
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 8
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0009; if() #872 Test
COMPAREV D2 0
GOTOCMP 647 <=
SETV D2 1
GOTO 648
SETV D2 0
COMPAREV D2 0
GOTOCMP 687 ==; Test 'if'
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #872 Body Start
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0365; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
PUSHR D2
PUSHV 135
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #872 Body End
LOAD D2 0.0011; if() #873 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 729 ==; Test 'if'
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #873 Body Start
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 2
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0365; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
PUSHR D2
PUSHV 134
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #873 Body End
PUSHV 6; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 8
PUSHV 1
PUSHARGSV 0 0.0004
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0012; if() #874 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 764 ==; Test 'if'
PUSHR D4; if() #874 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
ADDV D2 -6
PUSHR D2
PUSHV 2
PUSHV 12
PUSHV 8
PUSHV 0
LOAD D2 0.0012
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0785; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4; if() #874 Body End
LOAD D2 0.0007; if() #876 Test AND if(true) #875 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 783 ==; Test 'if'
PUSHR D4; if() #876 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
ADDV D2 -6
PUSHR D2
PUSHV 2
PUSHV 12
PUSHV 8
LOAD D2 0.0008
PUSHR D2; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0882; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Call
POP D4; if() #876 Body End
POPARGS D5 0.0013
RETURNFUNC; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body Start
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 8 0
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0002; if() #877 Test
COMPAREV D2 10000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 908 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #877 Body Start
DIVV D2 10000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #877 Body End
LOAD D2 0.0002; if() #878 Test
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 929 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #878 Body Start
DIVV D2 1000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #878 Body End
LOAD D2 0.0002; if() #879 Test
COMPAREV D2 100
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 950 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #879 Body Start
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #879 Body End
LOAD D2 0.0002; if() #880 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 971 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #880 Body Start
DIVV D2 10; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #880 Body End
LOAD D2 0.0002
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0785; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0009
RETURNFUNC; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[npc HealthBar_GetNPC(int, int)] Body Start
SETR D4 SP2
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND for() #235 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #235 LoopTest
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1056 ==; for() #235 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #235 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0
LOAD D2 0; if() #881 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1052 ==; Test 'if'
LOAD D2 0.0002; if() #501 Test AND if() #881 Body Start
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1049 ==; Test 'if'
LOAD D2 0; return Start AND if() #501 Body Start
GOTO 1056; return End
GOTO 1052; if() #501 Body End
LOAD D2 0.0002; if() #501 Else Start
SUBV D2 1
STORE D2 0.0002; if() #501 Else End
LOAD D2 0.0001; if() #881 Body End AND for() #235 Body End AND for() #235 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 1020; for() #235 End
POPARGS D5 0.0004
RETURNFUNC; Func[npc HealthBar_GetNPC(int, int)] Body End


PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
PUSHARGSV 0 0.0009
SETR D4 SP2
SETV D2 4; InlineFunc[void Waitframes(int)] Params
WAITFRAMESR D2; InlineFunc[void Waitframes(int)] Body
PUSHR D4; if() #911 Test
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 0.1014; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #911 Body
PUSHR D4
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 0.1014; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008
STORE D2 0.0007
LOAD D2 0.0008
STORE D2 0.0006
LOAD D2 0.0008
STORE D2 0.0005
LOAD D2 0.0008
STORE D2 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
ALLOCATEMEMV D2 256 0
STORE D2 0.0001
LOAD D2 0.0011; if() #912 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 73 ==; Test 'if'
LOAD D2 0.0011; InlineFunc[void Game::GetMessage(int, char32[])] Params Start AND if() #912 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void Game::GetMessage(int, char32[])] Params End
POP D3; InlineFunc[void Game::GetMessage(int, char32[])] Body Start
POP D6
GETMESSAGE D3 D2; InlineFunc[void Game::GetMessage(int, char32[])] Body End AND if() #912 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_CapString(int)] Params Start
PUSHR D2; UsrFunc[void HealthBar_CapString(int)] Params End
CALLFUNC 0.0416; UsrFunc[void HealthBar_CapString(int)] Call
POP D4
LOAD D2 0.0005; while() #13 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 217 ==; Test 'while'
PUSHR D4; while() #13 Body Start
LOAD D2 0.0017; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Params End
CALLFUNC 0.1014; UsrFunc[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0007; if() #913 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 109 ==; Test 'if'
LOAD D2 0.0008; if() #913 Body Start
STORE D2 0.0007; if() #913 Body End
LOAD D2 0.0002; if() #914 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 117 ==; Test 'if'
LOAD D2 0.0002; if() #914 Body Start
SUBV D2 1
STORE D2 0.0002; if() #914 Body End
LOAD D2 0.0008; if() #915 Test
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 163 ==; Test 'if'
LOAD D2 0.0008; if() #916 Test AND if() #915 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 159 ==; Test 'if'
LOAD D2 0.0002; if() #513 Test AND if() #916 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 150 ==; Test 'if'
LOAD D2 0.0003; if() #513 Body Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 157; if() #513 Body End
LOAD D2 0.0006; if() #513 Else Start
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003; if() #513 Else End
SETV D2 96
STORE D2 0.0002; if() #916 Body End
LOAD D2 0.0006
STORE D2 0.0004
LOAD D2 0.0008
STORE D2 0.0006; if() #915 Body End
LOAD D2 0.0005; if() #917 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 199 ==; Test 'if'
LOAD D2 0.0005; if() #514 Test AND if() #917 Body Start
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 197 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Max(int, int)] Params Start AND if() #514 Body Start
PUSHR D2
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
DIVV D2 16
POP D3
SUBR D3 D2
PUSHVARGR D3
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0005
GOTO 199; if() #514 Body End
LOAD D2 0.0008; if() #514 Else Start
STORE D2 0.0005; if() #514 Else End
PUSHR D4; if() #917 Body End
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0453; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #13 Body End
GOTO 78; while() #13 End
LOAD D2 0.0010; unless() #918 Test
COMPAREV D2 0
GOTOCMP 244 !=; Test 'unless'
LOAD D2 0.0002; unless() #918 Body Start AND if() #919 Test AND while(true) #14 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 228 ==; Test 'if'
LOAD D2 0.0002; if() #919 Body Start
SUBV D2 1
STORE D2 0.0002; if() #919 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0453; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #14 Body [Opt:AlwaysOn] End
GOTO 220; while() #14 End AND unless() #918 Body End
STOREV 0 0; for() #241 setup
LOAD D2 0; for() #241 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 277 ==; for() #241 TestFail?
LOAD D2 0.0002; if() #920 Test AND for() #241 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 258 ==; Test 'if'
LOAD D2 0.0002; if() #920 Body Start
SUBV D2 1
STORE D2 0.0002; if() #920 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 0; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0453; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #241 Body End
LOAD D2 0; for() #241 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 245; for() #241 End
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0018
QUIT; void run(int, int, int, int, int, int, int, int) Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #20 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 293 ==; Test 'if'
LOAD D2 0.0001; if() #20 Body Start
STORE D2 0.0002
GOTO 303; if() #20 Body End
LOAD D2 0.0002; if() #85 Test AND if() #20 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 303 ==; Test 'if'
LOAD D2 0; if() #85 Body Start
STORE D2 0.0002; if() #85 Body End
LOAD D2 0.0002; if() #20 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
PUSHV 0; Func[int GetEnemyProperty(npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0.0002; if() #72 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 332 ==
LOAD D2 0
COMPAREV D2 0
GOTOCMP 332 ==
SETV D2 1
GOTO 333
SETV D2 0
COMPAREV D2 0
GOTOCMP 341 ==; Test 'if'
LOAD D2 0; return Start AND if() #72 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
GOTO 405; return End AND if() #72 Body End
LOAD D2 0.0001; if() #73 Test AND if() #72 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 351 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #73 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCX
GOTO 405; return End AND if() #73 Body End
LOAD D2 0.0001; if() #74 Test AND if() #73 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 361 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #74 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCY
GOTO 405; return End AND if() #74 Body End
LOAD D2 0.0001; if() #75 Test AND if() #74 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 371 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #75 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCZ
GOTO 405; return End AND if() #75 Body End
LOAD D2 0.0001; if() #76 Test AND if() #75 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 381 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #76 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCJUMP
GOTO 405; return End AND if() #76 Body End
LOAD D2 0.0001; if() #77 Test AND if() #76 Else Start
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 391 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #77 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCDIR
GOTO 405; return End AND if() #77 Body End
LOAD D2 0.0001; if() #78 Test AND if() #77 Else Start
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 401 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #78 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
GOTO 405; return End AND if() #78 Body End
LOAD D2 0.0002; return Start AND if() #78 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCCSET
POPARGS D5 0.0003; return End AND if() #78 Else End AND if() #77 Else End AND if() #76 Else End AND if() #75 Else End AND if() #74 Else End AND if() #73 Else End AND if() #72 Else End
RETURNFUNC; Func[int GetEnemyProperty(npc, int)] Body End
SETR D4 SP2; Func[int HealthBar_GetHP(npc)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[int GetEnemyProperty(npc, int)] Params Start
PUSHR D2
PUSHV 20; UsrFunc[int GetEnemyProperty(npc, int)] Params End
CALLFUNC 0.0306; UsrFunc[int GetEnemyProperty(npc, int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[int HealthBar_GetHP(npc)] Body End
PUSHV 0; Func[void HealthBar_CapString(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int SizeOfArray(int[])] Params AND for() #238 setup
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #238 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 451 ==; for() #238 TestFail?
LOAD D2 0.0001; if() #892 Test AND for() #238 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 32
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 447 ==; Test 'if'
SETV D2 0; if() #892 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 451; return (Void) AND if() #892 Body End
LOAD D2 0; for() #238 Body End AND for() #238 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 422; for() #238 End
POPARGS D5 0.0002
RETURNFUNC; Func[void HealthBar_CapString(int)] Body End
PUSHARGSV 0 0.0003; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 16 0.0002
STOREV 16 0.0001
LOAD D2 0.0002
ADDV D2 224
SUBV D2 1
STORE D2 0
PUSHR D4; if(true) #893 [Opt:AlwaysOn]
PUSHV 6; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 5
PUSHV 52080
PUSHV 52100
PUSHV 52120
PUSHV 52004
PUSHV 52006
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0553; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 6; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 5
PUSHV 52020
PUSHV 52040
PUSHV 52060
PUSHV 52000
PUSHV 52002
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0553; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0009; if() #895 Test AND unless(false) #894 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 528 ==; Test 'if'
PUSHR D4; if() #895 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 -6
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 14
PUSHV 12
PUSHV 8
PUSHV 0
LOAD D2 0.0009
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0783; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4; if() #895 Body End
LOAD D2 0.0004; if() #897 Test AND if(true) #896 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 551 ==; Test 'if'
PUSHR D4; if() #897 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params Start
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
ADDV D2 -6
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 14
PUSHV 12
PUSHV 8
LOAD D2 0.0005
PUSHR D2; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0880; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Call
POP D4; if() #897 Body End
POPARGS D5 0.0010
RETURNFUNC; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0008; Func[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
LOAD D2 0.0008
DIVV D2 14
STORE D2 0.0004
PUSHR D4
LOAD D2 0.0009; InlineFunc[int Floor(int)] Params Start AND UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
PUSHV 0
PUSHV 14; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0281; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0004
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
MULTV D2 17
PUSHR D2
PUSHV 0
PUSHV 16; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0281; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #902 Test
COMPAREV D2 16
GOTOCMP 612 !=
LOAD D2 0.0009
COMPAREV D2 0
GOTOCMP 612 <=
LOAD D2 0.0003
COMPAREV D2 0
GOTOCMP 612 !=
SETV D2 1
GOTO 613
SETV D2 0
COMPAREV D2 0
GOTOCMP 617 ==; Test 'if'
SETV D2 15; if() #902 Body Start
STORE D2 0.0001; if() #902 Body End
STOREV 0 0; for() #239 setup
LOAD D2 0; for() #239 LoopTest
COMPAREV D2 14
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 708 ==; for() #239 TestFail?
LOAD D2 0.0017; for() #239 Body Start
STORE D2 0.0007
LOAD D2 0.0016
STORE D2 0.0006
LOAD D2 0.0007; if(false) #507 [Opt:AlwaysOff]
PUSHR D2
LOAD D2 0
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0013
STORE D2 0.0005
LOAD D2 0; if() #508 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 663 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #508 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 704; if() #508 Body End
LOAD D2 0; if() #509 Test AND if() #508 Else Start
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 689 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #509 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 704; if() #509 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #509 Else Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 17
SUBV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #509 Else End
LOAD D2 0; if() #508 Else End AND for() #239 Body End AND for() #239 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 618; for() #239 End
LOAD D2 0.0009; if() #511 Test AND if(false) #510 [Opt:AlwaysOff] AND if(true) #904 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 728 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #511 Body Start
PUSHR D2
LOAD D2 0.0017
SUBV D2 16
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 743; if() #511 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #511 Else Start
PUSHR D2
LOAD D2 0.0017
SUBV D2 16
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0011
ADDV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #511 Else End
LOAD D2 0.0009; if() #512 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 767 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #512 Body Start
PUSHR D2
LOAD D2 0.0017
ADDV D2 224
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0010
ADDV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 781; if() #512 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #512 Else Start
PUSHR D2
LOAD D2 0.0017
ADDV D2 224
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #512 Else End
POPARGS D5 0.0019
RETURNFUNC; Func[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body Start
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 8 0
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0002; if() #898 Test
COMPAREV D2 10000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 906 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #898 Body Start
DIVV D2 10000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #898 Body End
LOAD D2 0.0002; if() #899 Test
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 927 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #899 Body Start
DIVV D2 1000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #899 Body End
LOAD D2 0.0002; if() #900 Test
COMPAREV D2 100
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 948 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #900 Body Start
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #900 Body End
LOAD D2 0.0002; if() #901 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 969 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #901 Body Start
DIVV D2 10; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #901 Body End
LOAD D2 0.0002
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0783; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0009
RETURNFUNC; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0002
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND for() #240 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #240 LoopTest
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1177 ==; for() #240 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #240 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0
LOAD D2 0; if() #905 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1053 ==; Test 'if'
LOAD D2 0.0002; if() #905 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0407; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #905 Body End
LOAD D2 0; if() #906 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1077 ==; Test 'if'
LOAD D2 0.0002; if() #906 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0407; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #906 Body End
LOAD D2 0; if() #907 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1101 ==; Test 'if'
LOAD D2 0.0002; if() #907 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0407; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #907 Body End
LOAD D2 0; if() #908 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1125 ==; Test 'if'
LOAD D2 0.0002; if() #908 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0407; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #908 Body End
LOAD D2 0; if() #909 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1149 ==; Test 'if'
LOAD D2 0.0002; if() #909 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0407; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #909 Body End
LOAD D2 0; if() #910 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1173 ==; Test 'if'
LOAD D2 0.0002; if() #910 Body Start
PUSHR D2
PUSHR D4; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0407; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0002; if() #910 Body End
LOAD D2 0.0001; for() #240 Body End AND for() #240 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 1019; for() #240 End
LOAD D2 0.0002; return Start
POPARGS D5 0.0009; return End
RETURNFUNC; Func[int HealthBar_GetHPTotal(int, int, int, int, int, int)] Body End


PUSHR D0; void run(int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR REFFFC; void run(int, int, int, int) Body Start
PUSHARGSV 0 0.0011
SETR D4 SP2
SETV D2 4; InlineFunc[void Waitframes(int)] Params
WAITFRAMESR D2; InlineFunc[void Waitframes(int)] Body
PUSHR D4
LOAD D2 0.0015; UsrFunc[npc HealthBar_GetNPC(int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2; UsrFunc[npc HealthBar_GetNPC(int, int)] Params End
CALLFUNC 0.1143; UsrFunc[npc HealthBar_GetNPC(int, int)] Call
POP D4
STORE D2 0.0010
LOAD D2 0.0010; InlineFunc[bool npc::isValid()] Params AND unless() #937 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23 !=; Test 'unless'
QUIT; InlineFunc[void Quit()] Body AND unless() #937 Body
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0491; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0009
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0491; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0008
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0491; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0007
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0491; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0491; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
STORE D2 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 1 0.0001; for() #246 setup
LOAD D2 0.0001; for() #246 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 96 ==; for() #246 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #246 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #938 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 92 ==; Test 'if'
LOAD D2 0; if() #522 Test AND if() #938 Body Start
PUSHR D2
LOAD D2 0.0011
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 89 ==; Test 'if'
GOTO 96; break 1; AND if() #522 Body Start
GOTO 92; if() #522 Body End
LOAD D2 0.0002; if() #522 Else Start
ADDV D2 1
STORE D2 0.0002; if() #522 Else End
LOAD D2 0.0001; if() #938 Body End AND for() #246 Body End AND for() #246 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 57; for() #246 End
ALLOCATEMEMV D2 256 0
STORE D2 0.0001
LOAD D2 0.0014; if() #523 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 110 ==; Test 'if'
LOAD D2 0.0014; InlineFunc[void Game::GetMessage(int, char32[])] Params Start AND if() #523 Body Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void Game::GetMessage(int, char32[])] Params End
POP D3; InlineFunc[void Game::GetMessage(int, char32[])] Body Start
POP D6
GETMESSAGE D3 D2; InlineFunc[void Game::GetMessage(int, char32[])] Body End
GOTO 115; if() #523 Body End
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start AND if() #523 Else Start
PUSHR D2
LOAD D2 0.0001; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End AND if() #523 Else End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_CapString(int)] Params Start
PUSHR D2; UsrFunc[void HealthBar_CapString(int)] Params End
CALLFUNC 0.0500; UsrFunc[void HealthBar_CapString(int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
LOAD D2 0.0006; while() #15 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 268 ==; Test 'while'
LOAD D2 0.0010; InlineFunc[bool npc::isValid()] Params AND if() #524 Test AND while() #15 Body Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 151 ==; Test 'if'
PUSHR D4; InlineFunc[int Max(int, int)] Params Start AND if() #524 Body Start
LOAD D2 0.0010; UsrFunc[int HealthBar_GetHP(npc)] Params Start
PUSHR D2; UsrFunc[int HealthBar_GetHP(npc)] Params End
CALLFUNC 0.0491; UsrFunc[int HealthBar_GetHP(npc)] Call
POP D4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0009
GOTO 153; if() #524 Body End
SETV D2 0; if() #524 Else Start
STORE D2 0.0009; if() #524 Else End
LOAD D2 0.0003; if() #939 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 161 ==; Test 'if'
LOAD D2 0.0003; if() #939 Body Start
SUBV D2 1
STORE D2 0.0003; if() #939 Body End
LOAD D2 0.0009; if() #940 Test
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 207 ==; Test 'if'
LOAD D2 0.0009; if() #941 Test AND if() #940 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 203 ==; Test 'if'
LOAD D2 0.0003; if() #525 Test AND if() #941 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 194 ==; Test 'if'
LOAD D2 0.0004; if() #525 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0004
GOTO 201; if() #525 Body End
LOAD D2 0.0007; if() #525 Else Start
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004; if() #525 Else End
SETV D2 96
STORE D2 0.0003; if() #941 Body End
LOAD D2 0.0007
STORE D2 0.0005
LOAD D2 0.0009
STORE D2 0.0007; if() #940 Body End
LOAD D2 0.0006; if() #942 Test
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 243 ==; Test 'if'
LOAD D2 0.0006; if() #526 Test AND if() #942 Body Start
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 241 ==; Test 'if'
LOAD D2 0.0006; InlineFunc[int Max(int, int)] Params Start AND if() #526 Body Start
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
DIVV D2 16
POP D3
SUBR D3 D2
PUSHVARGR D3
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0006
GOTO 243; if() #526 Body End
LOAD D2 0.0009; if() #526 Else Start
STORE D2 0.0006; if() #526 Else End
PUSHR D4; if() #942 Body End
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0582; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #15 Body End
GOTO 132; while() #15 End
SETV D2 1
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
LOAD D2 0.0003; if() #943 Test AND while(true) #16 Body [Opt:AlwaysOn] Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 288 ==; Test 'if'
LOAD D2 0.0003; if() #943 Body Start
SUBV D2 1
STORE D2 0.0003; if() #943 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0582; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0012; if() #944 Test
COMPAREV D2 0
GOTOCMP 319 ==; Test 'if'
PUSHR D4; if() #945 Test AND if() #944 Body Start
LOAD D2 0.0011; UsrFunc[bool HealthBar_CheckDone(ffc)] Params Start
PUSHR D2; UsrFunc[bool HealthBar_CheckDone(ffc)] Params End
CALLFUNC 0.0537; UsrFunc[bool HealthBar_CheckDone(ffc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 321 !=; Test 'if' AND break 1; AND if() #945 Body
WAITFRAME; if() #944 Body End AND InlineFunc[void Waitframe()] Body AND while(true) #16 Body [Opt:AlwaysOn] End
GOTO 280; while() #16 End
STOREV 0 0; for() #247 setup
LOAD D2 0; for() #247 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 361 ==; for() #247 TestFail?
LOAD D2 0.0003; if() #946 Test AND for() #247 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 335 ==; Test 'if'
LOAD D2 0.0003; if() #946 Body Start
SUBV D2 1
STORE D2 0.0003; if() #946 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 0
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0582; UsrFunc[void HealthBar_Draw(int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #247 Body End
LOAD D2 0; for() #247 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 322; for() #247 End
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0016
QUIT; void run(int, int, int, int) Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #20 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
LOAD D2 0.0001; if() #20 Body Start
STORE D2 0.0002
GOTO 387; if() #20 Body End
LOAD D2 0.0002; if() #85 Test AND if() #20 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 387 ==; Test 'if'
LOAD D2 0; if() #85 Body Start
STORE D2 0.0002; if() #85 Body End
LOAD D2 0.0002; if() #20 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
PUSHV 0; Func[int GetEnemyProperty(npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0.0002; if() #72 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCMISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 416 ==
LOAD D2 0
COMPAREV D2 0
GOTOCMP 416 ==
SETV D2 1
GOTO 417
SETV D2 0
COMPAREV D2 0
GOTOCMP 425 ==; Test 'if'
LOAD D2 0; return Start AND if() #72 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
GOTO 489; return End AND if() #72 Body End
LOAD D2 0.0001; if() #73 Test AND if() #72 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 435 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #73 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCX
GOTO 489; return End AND if() #73 Body End
LOAD D2 0.0001; if() #74 Test AND if() #73 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 445 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #74 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCY
GOTO 489; return End AND if() #74 Body End
LOAD D2 0.0001; if() #75 Test AND if() #74 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 455 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #75 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCZ
GOTO 489; return End AND if() #75 Body End
LOAD D2 0.0001; if() #76 Test AND if() #75 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 465 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #76 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCJUMP
GOTO 489; return End AND if() #76 Body End
LOAD D2 0.0001; if() #77 Test AND if() #76 Else Start
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 475 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #77 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCDIR
GOTO 489; return End AND if() #77 Body End
LOAD D2 0.0001; if() #78 Test AND if() #77 Else Start
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 485 ==; Test 'if'
LOAD D2 0.0002; return Start AND if() #78 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
GOTO 489; return End AND if() #78 Body End
LOAD D2 0.0002; return Start AND if() #78 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCCSET
POPARGS D5 0.0003; return End AND if() #78 Else End AND if() #77 Else End AND if() #76 Else End AND if() #75 Else End AND if() #74 Else End AND if() #73 Else End AND if() #72 Else End
RETURNFUNC; Func[int GetEnemyProperty(npc, int)] Body End
SETR D4 SP2; Func[int HealthBar_GetHP(npc)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[int GetEnemyProperty(npc, int)] Params Start
PUSHR D2
PUSHV 20; UsrFunc[int GetEnemyProperty(npc, int)] Params End
CALLFUNC 0.0390; UsrFunc[int GetEnemyProperty(npc, int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[int HealthBar_GetHP(npc)] Body End
PUSHV 0; Func[void HealthBar_CapString(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[int SizeOfArray(int[])] Params AND for() #242 setup
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #242 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 535 ==; for() #242 TestFail?
LOAD D2 0.0001; if() #921 Test AND for() #242 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 32
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 531 ==; Test 'if'
SETV D2 0; if() #921 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 535; return (Void) AND if() #921 Body End
LOAD D2 0; for() #242 Body End AND for() #242 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 506; for() #242 End
POPARGS D5 0.0002
RETURNFUNC; Func[void HealthBar_CapString(int)] Body End
PUSHARGSV 0 0.0002; Func[bool HealthBar_CheckDone(ffc)] Body Start
SETR D4 SP2
STOREV 1 0.0001; for() #243 setup
LOAD D2 0.0001; for() #243 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 579 ==; for() #243 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #243 Body Start
SUBV D2 1; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #922 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 575 ==; Test 'if'
LOAD D2 0; if() #923 Test AND if() #922 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 575 ==; Test 'if'
SETV D2 0; return Start AND if() #923 Body Start
GOTO 580; return End AND if() #923 Body End
LOAD D2 0.0001; if() #922 Body End AND for() #243 Body End AND for() #243 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 540; for() #243 End
SETV D2 1; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool HealthBar_CheckDone(ffc)] Body End
PUSHARGSV 0 0.0003; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 16 0.0002
STOREV 16 0.0001
LOAD D2 0.0002
ADDV D2 224
SUBV D2 1
STORE D2 0
PUSHR D4; if(true) #924 [Opt:AlwaysOn]
PUSHV 6; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 5
PUSHV 52080
PUSHV 52100
PUSHV 52120
PUSHV 52004
PUSHV 52006
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0682; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 6; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 5
PUSHV 52020
PUSHV 52040
PUSHV 52060
PUSHV 52000
PUSHV 52002
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0682; UsrFunc[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0009; if() #926 Test AND unless(false) #925 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 657 ==; Test 'if'
PUSHR D4; if() #926 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 -6
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 14
PUSHV 12
PUSHV 8
PUSHV 0
LOAD D2 0.0009
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0912; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4; if() #926 Body End
LOAD D2 0.0004; if() #928 Test AND if(true) #927 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 680 ==; Test 'if'
PUSHR D4; if() #928 Body Start
PUSHV 6; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params Start
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
ADDV D2 -6
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 14
PUSHV 12
PUSHV 8
LOAD D2 0.0005
PUSHR D2; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1009; UsrFunc[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Call
POP D4; if() #928 Body End
POPARGS D5 0.0010
RETURNFUNC; Func[void HealthBar_Draw(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0008; Func[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
LOAD D2 0.0008
DIVV D2 14
STORE D2 0.0004
PUSHR D4
LOAD D2 0.0009; InlineFunc[int Floor(int)] Params Start AND UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
PUSHV 0
PUSHV 14; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0365; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0004
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
MULTV D2 17
PUSHR D2
PUSHV 0
PUSHV 16; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0365; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #933 Test
COMPAREV D2 16
GOTOCMP 741 !=
LOAD D2 0.0009
COMPAREV D2 0
GOTOCMP 741 <=
LOAD D2 0.0003
COMPAREV D2 0
GOTOCMP 741 !=
SETV D2 1
GOTO 742
SETV D2 0
COMPAREV D2 0
GOTOCMP 746 ==; Test 'if'
SETV D2 15; if() #933 Body Start
STORE D2 0.0001; if() #933 Body End
STOREV 0 0; for() #244 setup
LOAD D2 0; for() #244 LoopTest
COMPAREV D2 14
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 837 ==; for() #244 TestFail?
LOAD D2 0.0017; for() #244 Body Start
STORE D2 0.0007
LOAD D2 0.0016
STORE D2 0.0006
LOAD D2 0.0007; if(false) #515 [Opt:AlwaysOff]
PUSHR D2
LOAD D2 0
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0013
STORE D2 0.0005
LOAD D2 0; if() #516 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 792 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #516 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 833; if() #516 Body End
LOAD D2 0; if() #517 Test AND if() #516 Else Start
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 818 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #517 Body Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 833; if() #517 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #517 Else Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 17
SUBV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #517 Else End
LOAD D2 0; if() #516 Else End AND for() #244 Body End AND for() #244 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 747; for() #244 End
LOAD D2 0.0009; if() #519 Test AND if(false) #518 [Opt:AlwaysOff] AND if(true) #935 [Opt:AlwaysOn]
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 857 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #519 Body Start
PUSHR D2
LOAD D2 0.0017
SUBV D2 16
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 872; if() #519 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #519 Else Start
PUSHR D2
LOAD D2 0.0017
SUBV D2 16
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0011
ADDV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #519 Else End
LOAD D2 0.0009; if() #520 Test
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 896 ==; Test 'if'
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #520 Body Start
PUSHR D2
LOAD D2 0.0017
ADDV D2 224
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0010
ADDV D2 1
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End
GOTO 910; if() #520 Body End
LOAD D2 0.0018; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params Start AND if() #520 Else Start
PUSHR D2
LOAD D2 0.0017
ADDV D2 224
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 128; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Params End
FASTTILER; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body Start
POPARGS D5 0.0006; InlineFunc[void screendata::FastTile(int, int, int, int, int, int)] Body End AND if() #520 Else End
POPARGS D5 0.0019
RETURNFUNC; Func[void HealthBar_DrawTiledHealthBar(int, int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body Start
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
ADDV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D2 0.0007; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV -1
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 8 0
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0002; if() #929 Test
COMPAREV D2 10000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1035 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #929 Body Start
DIVV D2 10000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #929 Body End
LOAD D2 0.0002; if() #930 Test
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1056 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #930 Body Start
DIVV D2 1000; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #930 Body End
LOAD D2 0.0002; if() #931 Test
COMPAREV D2 100
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1077 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #931 Body Start
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #931 Body End
LOAD D2 0.0002; if() #932 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1098 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int Floor(int)] Params Start AND if() #932 Body Start
DIVV D2 10; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0; if() #932 Body End
LOAD D2 0.0002
MODV D2 10
ADDV D2 48
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
ADDV D2 1
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0912; UsrFunc[void HealthBar_DrawString(int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D3 0.0001
DEALLOCATEMEMR D3
POPARGS D5 0.0009
RETURNFUNC; Func[void HealthBar_DrawDamage(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[npc HealthBar_GetNPC(int, int)] Body Start
SETR D4 SP2
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND for() #245 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #245 LoopTest
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1183 ==; for() #245 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #245 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0
LOAD D2 0; if() #936 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1179 ==; Test 'if'
LOAD D2 0.0002; if() #521 Test AND if() #936 Body Start
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1176 ==; Test 'if'
LOAD D2 0; return Start AND if() #521 Body Start
GOTO 1183; return End
GOTO 1179; if() #521 Body End
LOAD D2 0.0002; if() #521 Else Start
SUBV D2 1
STORE D2 0.0002; if() #521 Else End
LOAD D2 0.0001; if() #936 Body End AND for() #245 Body End AND for() #245 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 1147; for() #245 End
POPARGS D5 0.0004
RETURNFUNC; Func[npc HealthBar_GetNPC(int, int)] Body End


SETV GD9 0; void run() Body Start
SETV GD10 0
SETV GD12 0
SETV GD11 0
SETV GD5 0
SETV GD15 0
SETV GD6 0
SETV GD14 0
SETV GD13 0
SETV GD7 0
SETV GD8 0
SETV GD2 0
SETV GD3 0
SETV GD4 0
ALLOCATEGMEMV D2 25 0
SETR GD26 D2
SETV GD16 0
SETV GD17 0
SETV GD21 0
SETV GD18 0
SETV GD22 0
SETV GD19 0
SETV GD20 0
ALLOCATEGMEMV D2 32 0
SETR GD25 D2
SETV GD23 0
SETV GD24 0
ALLOCATEGMEMV D2 8 0
SETR GD27 D2
ALLOCATEGMEMV D2 1000 0
SETR GD28 D2
ALLOCATEGMEMV D2 4096 0
SETR GD1 D2
QUIT; void run() Body End