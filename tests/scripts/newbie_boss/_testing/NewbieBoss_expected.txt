stderr:

Compiling 'NewbieBoss.z'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
NewbieBoss.z Line 3463 @ Columns 4-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3461    
3462    if(attack>=91&&attack<=93){
3463        vars[EZBI_SPEEDUPCOUNTER] = 0;
            ^~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3464 @ Columns 4-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3462    if(attack>=91&&attack<=93){
3463        vars[EZBI_SPEEDUPCOUNTER] = 0;
3464        vars[EZBI_INITSPEED] = ghost->Step;
            ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3466 @ Columns 5-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3464    vars[EZBI_INITSPEED] = ghost->Step;
3465    if(attack==91){
3466        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3467 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3465    if(attack==91){
3466        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP;
3467        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*2;
            ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3467 @ Columns 27-47 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3465    if(attack==91){
3466        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP;
3467        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*2;
                                  ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3470 @ Columns 5-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3468    }
3469    else if(attack==92){
3470        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*2;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3471 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3469    else if(attack==92){
3470        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*2;
3471        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*3;
            ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3471 @ Columns 27-47 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3469    else if(attack==92){
3470        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*2;
3471        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*3;
                                  ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3474 @ Columns 5-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3472    }
3473    else if(attack==93){
3474        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*3;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3475 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3473    else if(attack==93){
3474        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*3;
3475        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*4;
            ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3475 @ Columns 27-47 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3473    else if(attack==93){
3474        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*3;
3475        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*4;
                                  ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3480 @ Columns 3-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3478    }
3479    
3480    attackPool[1+attackPool[0]] = attack;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3480 @ Columns 16-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3478    }
3479    
3480    attackPool[1+attackPool[0]] = attack;
                     ^~~~~~~~~~~~~


NewbieBoss.z Line 3481 @ Columns 5-18 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3479    
3480    attackPool[1+attackPool[0]] = attack;
3481    ++attackPool[0];
          ^~~~~~~~~~~~~


NewbieBoss.z Line 3500 @ Columns 8-18 - Warning S108: Arrays should be explicitly typed - change `npc` to `npc[]`

3498    void EZB_AddSummon(npc n, npc summons){
3499        for(int i=0; i<256; ++i){
3500            if(!summons[i]->isValid()){
                    ^~~~~~~~~~


NewbieBoss.z Line 3501 @ Columns 5-15 - Warning S108: Arrays should be explicitly typed - change `npc` to `npc[]`

3499    for(int i=0; i<256; ++i){
3500        if(!summons[i]->isValid()){
3501            summons[i] = n;
                ^~~~~~~~~~


NewbieBoss.z Line 3486 @ Columns 3-34 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3484    if(form==0)
3485        return;
3486    attackPool[101+attackPool[100]] = form;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3486 @ Columns 18-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3484    if(form==0)
3485        return;
3486    attackPool[101+attackPool[100]] = form;
                       ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3487 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3485        return;
3486    attackPool[101+attackPool[100]] = form;
3487    ++attackPool[100];
          ^~~~~~~~~~~~~~~


NewbieBoss.z Line 2855 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2853    }
2854    int EZB_AngleDir(ffc this, npc ghost, int vars, int angle){
2855        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3348 @ Columns 6-25 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3346    int i;
3347    int startIndex = 0;
3348    if(vars[EZBI_BSBUFFER]==0)
           ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3351 @ Columns 14-36 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3349        startIndex = 100;
3350    
3351    int size = vars[startIndex+011+6];
                   ^~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3310 @ Columns 6-25 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3308    int i;
3309    int startIndex = 0;
3310    if(vars[EZBI_BSBUFFER]==0)
           ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3313 @ Columns 16-36 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3311        startIndex = 100;
3312    
3313    Ghost_CSet = vars[startIndex+000];
                     ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3315 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3313    Ghost_CSet = vars[startIndex+000];
3314    if(!onlyDefenses){
3315        ghost->Damage = vars[startIndex+001];
                            ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3316 @ Columns 26-46 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3314    if(!onlyDefenses){
3315        ghost->Damage = vars[startIndex+001];
3316        ghost->WeaponDamage = vars[startIndex+002];
                                  ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3317 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3315    ghost->Damage = vars[startIndex+001];
3316    ghost->WeaponDamage = vars[startIndex+002];
3317    ghost->Hunger = vars[startIndex+003];
                        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3318 @ Columns 18-38 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3316    ghost->WeaponDamage = vars[startIndex+002];
3317    ghost->Hunger = vars[startIndex+003];
3318    ghost->Rate = vars[startIndex+004];
                      ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3319 @ Columns 22-42 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3317    ghost->Hunger = vars[startIndex+003];
3318    ghost->Rate = vars[startIndex+004];
3319    ghost->Haltrate = vars[startIndex+005];
                          ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3320 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3318    ghost->Rate = vars[startIndex+004];
3319    ghost->Haltrate = vars[startIndex+005];
3320    ghost->Homing = vars[startIndex+006];
                        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3321 @ Columns 18-38 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3319    ghost->Haltrate = vars[startIndex+005];
3320    ghost->Homing = vars[startIndex+006];
3321    ghost->Step = vars[startIndex+007];
                      ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3322 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3320    ghost->Homing = vars[startIndex+006];
3321    ghost->Step = vars[startIndex+007];
3322    ghost->Weapon = vars[startIndex+008];
                        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3323 @ Columns 21-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3321    ghost->Step = vars[startIndex+007];
3322    ghost->Weapon = vars[startIndex+008];
3323    ghost->ItemSet = vars[startIndex+009];
                         ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3324 @ Columns 17-37 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3322    ghost->Weapon = vars[startIndex+008];
3323    ghost->ItemSet = vars[startIndex+009];
3324    ghost->SFX = vars[startIndex+010];
                     ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3327 @ Columns 5-16 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3325    
3326    for(i=0; i<11; ++i){
3327        vars[300+i] = vars[startIndex+011+i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3327 @ Columns 19-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3325    
3326    for(i=0; i<11; ++i){
3327        vars[300+i] = vars[startIndex+011+i];
                          ^~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3332 @ Columns 24-46 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3330    
3331    for(i=0; i<18; ++i){
3332        ghost->Defense[i] = vars[startIndex+022+i];
                                ^~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3335 @ Columns 16-36 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3333    }
3334    if(includeHP){
3335        ghost->HP = vars[startIndex+040];
                        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3338 @ Columns 3-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3336        Ghost_HP = ghost->HP;
3337    }
3338    vars[EZBI_CURFORMID] = vars[startIndex+041];
        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3338 @ Columns 26-46 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3336        Ghost_HP = ghost->HP;
3337    }
3338    vars[EZBI_CURFORMID] = vars[startIndex+041];
                               ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3340 @ Columns 6-25 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3338        vars[EZBI_CURFORMID] = vars[startIndex+041];
3339    
3340        if(vars[EZBI_BSBUFFER]==0)
               ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3341 @ Columns 4-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3339    
3340        if(vars[EZBI_BSBUFFER]==0)
3341            vars[EZBI_BSBUFFER] = 1;
                ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3343 @ Columns 4-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3341        vars[EZBI_BSBUFFER] = 1;
3342    else
3343        vars[EZBI_BSBUFFER] = 0;
            ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3256 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3254    npc n = CreateNPCAt(newForm, 128, -1000);
3255    
3256    vars[000] = Ghost_CSet;
        ^~~~~~~~~


NewbieBoss.z Line 3257 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3255    
3256    vars[000] = Ghost_CSet;
3257    vars[001] = ghost->Damage;
        ^~~~~~~~~


NewbieBoss.z Line 3258 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3256    vars[000] = Ghost_CSet;
3257    vars[001] = ghost->Damage;
3258    vars[002] = ghost->WeaponDamage;
        ^~~~~~~~~


NewbieBoss.z Line 3259 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3257    vars[001] = ghost->Damage;
3258    vars[002] = ghost->WeaponDamage;
3259    vars[003] = ghost->Hunger;
        ^~~~~~~~~


NewbieBoss.z Line 3260 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3258    vars[002] = ghost->WeaponDamage;
3259    vars[003] = ghost->Hunger;
3260    vars[004] = ghost->Rate;
        ^~~~~~~~~


NewbieBoss.z Line 3261 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3259    vars[003] = ghost->Hunger;
3260    vars[004] = ghost->Rate;
3261    vars[005] = ghost->Haltrate;
        ^~~~~~~~~


NewbieBoss.z Line 3262 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3260    vars[004] = ghost->Rate;
3261    vars[005] = ghost->Haltrate;
3262    vars[006] = ghost->Homing;
        ^~~~~~~~~


NewbieBoss.z Line 3263 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3261    vars[005] = ghost->Haltrate;
3262    vars[006] = ghost->Homing;
3263    vars[007] = ghost->Step;
        ^~~~~~~~~


NewbieBoss.z Line 3264 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3262    vars[006] = ghost->Homing;
3263    vars[007] = ghost->Step;
3264    vars[008] = ghost->Weapon;
        ^~~~~~~~~


NewbieBoss.z Line 3265 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3263    vars[007] = ghost->Step;
3264    vars[008] = ghost->Weapon;
3265    vars[009] = ghost->ItemSet;
        ^~~~~~~~~


NewbieBoss.z Line 3266 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3264    vars[008] = ghost->Weapon;
3265    vars[009] = ghost->ItemSet;
3266    vars[010] = ghost->SFX;
        ^~~~~~~~~


NewbieBoss.z Line 3268 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3266    vars[010] = ghost->SFX;
3267    for(i=0; i<11; ++i){
3268        vars[011+i] = ghost->Attributes[i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3271 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3269    }
3270    for(i=0; i<18; ++i){
3271        vars[022+i] = ghost->Defense[i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3273 @ Columns 3-11 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3271        vars[022+i] = ghost->Defense[i];
3272    }
3273    vars[40] = ghost->HP;
        ^~~~~~~~


NewbieBoss.z Line 3274 @ Columns 3-11 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3272    }
3273    vars[40] = ghost->HP;
3274    vars[41] = ghost->ID;
        ^~~~~~~~


NewbieBoss.z Line 3276 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3274    vars[41] = ghost->ID;
3275    
3276    vars[100] = n->CSet;
        ^~~~~~~~~


NewbieBoss.z Line 3277 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3275    
3276    vars[100] = n->CSet;
3277    vars[101] = n->Damage;
        ^~~~~~~~~


NewbieBoss.z Line 3278 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3276    vars[100] = n->CSet;
3277    vars[101] = n->Damage;
3278    vars[102] = n->WeaponDamage;
        ^~~~~~~~~


NewbieBoss.z Line 3279 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3277    vars[101] = n->Damage;
3278    vars[102] = n->WeaponDamage;
3279    vars[103] = n->Hunger;
        ^~~~~~~~~


NewbieBoss.z Line 3280 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3278    vars[102] = n->WeaponDamage;
3279    vars[103] = n->Hunger;
3280    vars[104] = n->Rate;
        ^~~~~~~~~


NewbieBoss.z Line 3281 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3279    vars[103] = n->Hunger;
3280    vars[104] = n->Rate;
3281    vars[105] = n->Haltrate;
        ^~~~~~~~~


NewbieBoss.z Line 3282 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3280    vars[104] = n->Rate;
3281    vars[105] = n->Haltrate;
3282    vars[106] = n->Homing;
        ^~~~~~~~~


NewbieBoss.z Line 3283 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3281    vars[105] = n->Haltrate;
3282    vars[106] = n->Homing;
3283    vars[107] = n->Step;
        ^~~~~~~~~


NewbieBoss.z Line 3284 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3282    vars[106] = n->Homing;
3283    vars[107] = n->Step;
3284    vars[108] = n->Weapon;
        ^~~~~~~~~


NewbieBoss.z Line 3285 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3283    vars[107] = n->Step;
3284    vars[108] = n->Weapon;
3285    vars[109] = n->ItemSet;
        ^~~~~~~~~


NewbieBoss.z Line 3286 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3284    vars[108] = n->Weapon;
3285    vars[109] = n->ItemSet;
3286    vars[110] = n->SFX;
        ^~~~~~~~~


NewbieBoss.z Line 3288 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3286    vars[110] = n->SFX;
3287    for(i=0; i<11; ++i){
3288        vars[111+i] = n->Attributes[i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3291 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3289    }
3290    for(i=0; i<18; ++i){
3291        vars[122+i] = n->Defense[i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3293 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3291        vars[122+i] = n->Defense[i];
3292    }
3293    vars[140] = n->HP;
        ^~~~~~~~~


NewbieBoss.z Line 3294 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3292    }
3293    vars[140] = n->HP;
3294    vars[141] = n->ID;
        ^~~~~~~~~


NewbieBoss.z Line 3296 @ Columns 3-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3294    vars[141] = n->ID;
3295    
3296    vars[EZBI_BSBUFFER] = 0;
        ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3237 @ Columns 3-18 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3235    }
3236    void EZB_CreateDeathExplosion(int x, int y){
3237        Game->PlaySound(SFX_BOMB);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3080 @ Columns 47-61 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3078    if(state==0){
3079        if(frame%4<2)
3080            EZB_DrawLaser(layer, x, y, width, angle, laserColors[2]);
                                                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3083 @ Columns 52-66 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3081    }
3082    else{
3083        EZB_DrawLaser3Color(layer, x, y, width, angle, laserColors[0], laserColors[1], laserColors[2]);
                                                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3083 @ Columns 68-82 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3081    }
3082    else{
3083        EZB_DrawLaser3Color(layer, x, y, width, angle, laserColors[0], laserColors[1], laserColors[2]);
                                                                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3083 @ Columns 84-98 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3081    }
3082    else{
3083        EZB_DrawLaser3Color(layer, x, y, width, angle, laserColors[0], laserColors[1], laserColors[2]);
                                                                                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3093 @ Columns 18-32 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3091    int w; int wRand;
3092    if(state==0){
3093        clr = Choose(laserColors[1], laserColors[2]);
                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3093 @ Columns 34-48 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3091    int w; int wRand;
3092    if(state==0){
3093        clr = Choose(laserColors[1], laserColors[2]);
                                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3116 @ Columns 18-32 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3114    }
3115    else{
3116        clr = Choose(laserColors[0], laserColors[1], laserColors[2]);
                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3116 @ Columns 34-48 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3114    }
3115    else{
3116        clr = Choose(laserColors[0], laserColors[1], laserColors[2]);
                                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3116 @ Columns 50-64 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3114    }
3115    else{
3116        clr = Choose(laserColors[0], laserColors[1], laserColors[2]);
                                                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 2758 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2756    int h = Ghost_TileHeight;
2757    
2758    int flags = vars[EZBI_FLAGS];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2924 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2922    }
2923    void EZB_FaceAngle(ffc this, npc ghost, int vars, int angle){
2924        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2931 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2929    }
2930    void EZB_FaceDir(ffc this, npc ghost, int vars, int dir){
2931        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2917 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2915    }
2916    void EZB_FaceLink(ffc this, npc ghost, int vars){
2917        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2686 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2684    }
2685    eweapon EZB_Fire(ffc this, npc ghost, int vars, int x, int y, int angle, int step, int wflags){
2686        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2690 @ Columns 17-34 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2688    if(flags&EZBF_UNBLOCKABLE)
2689        wflags |= EWF_UNBLOCKABLE;
2690    int fireSFX = vars[EZBI_WPNSFX];
                      ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 2691 @ Columns 17-34 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2689        wflags |= EWF_UNBLOCKABLE;
2690    int fireSFX = vars[EZBI_WPNSFX];
2691    int fireSPR = vars[EZBI_WPNSPR];
                      ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 2596 @ Columns 23-42 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2594    void EZB_FiringAnim(ffc this, npc ghost, int vars, int delayType){
2595        int i;
2596        int movementStyle = vars[EZBI_WALKTYPE];
                                ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 2597 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2595    int i;
2596    int movementStyle = vars[EZBI_WALKTYPE];
2597    int flags = vars[EZBI_FLAGS];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2598 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2596    int movementStyle = vars[EZBI_WALKTYPE];
2597    int flags = vars[EZBI_FLAGS];
2598    int combo = vars[EZBI_COMBO];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3613 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3611    void EZB_FishWizardUpdate(ffc this, npc ghost, int vars, int movementMisc){
3612        int i;
3613        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3627 @ Columns 3-18 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3625    //11 - Phase Cooldown
3626    //12 - Knockback
3627    movementMisc[2] = 0;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3628 @ Columns 3-18 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3626    //12 - Knockback
3627    movementMisc[2] = 0;
3628    movementMisc[3] = 0;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3629 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3627    movementMisc[2] = 0;
3628    movementMisc[3] = 0;
3629    if(movementMisc[7]==0){ //Walking
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3630 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3628    movementMisc[3] = 0;
3629    if(movementMisc[7]==0){ //Walking
3630        if(movementMisc[1])
               ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3631 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3629    if(movementMisc[7]==0){ //Walking
3630        if(movementMisc[1])
3631            --movementMisc[1];
                  ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3632 @ Columns 7-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3630    if(movementMisc[1])
3631        --movementMisc[1];
3632    if(movementMisc[11])
           ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3633 @ Columns 7-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3631        --movementMisc[1];
3632    if(movementMisc[11])
3633        --movementMisc[11];
              ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3634 @ Columns 4-19 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3632    if(movementMisc[11])
3633        --movementMisc[11];
3634    movementMisc[0] = Ghost_ConstantWalk4(movementMisc[0], ghost->Step, ghost->Rate, ghost->Homing, ghost->Hunger);
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3634 @ Columns 42-57 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3632    if(movementMisc[11])
3633        --movementMisc[11];
3634    movementMisc[0] = Ghost_ConstantWalk4(movementMisc[0], ghost->Step, ghost->Rate, ghost->Homing, ghost->Hunger);
                                              ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3636 @ Columns 27-42 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3634    movementMisc[0] = Ghost_ConstantWalk4(movementMisc[0], ghost->Step, ghost->Rate, ghost->Homing, ghost->Hunger);
3635    //Ice Wave Attack
3636    if(EZB_InSight(ghost)&&movementMisc[1]==0){
                               ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3637 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3635    //Ice Wave Attack
3636    if(EZB_InSight(ghost)&&movementMisc[1]==0){
3637        movementMisc[1] = ghost->Haltrate*10;
            ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3638 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3636    if(EZB_InSight(ghost)&&movementMisc[1]==0){
3637        movementMisc[1] = ghost->Haltrate*10;
3638        movementMisc[2] = 1; //Regular Attack
            ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3641 @ Columns 28-43 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3639    }
3640    //Diagonal Dash Attack
3641    else if(Rand(1, 90)==1&&movementMisc[1]==0){
                                ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3670 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3668    if(step==0)
3669        step = 0.5;
3670    movementMisc[3] = 1; //Constant Attack
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3671 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3669        step = 0.5;
3670    movementMisc[3] = 1; //Constant Attack
3671    movementMisc[4] = vX;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3672 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3670    movementMisc[3] = 1; //Constant Attack
3671    movementMisc[4] = vX;
3672    movementMisc[5] = vY;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3673 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3671    movementMisc[4] = vX;
3672    movementMisc[5] = vY;
3673    movementMisc[6] = dist/step;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3674 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3672    movementMisc[5] = vY;
3673    movementMisc[6] = dist/step;
3674    movementMisc[7] = 1; //Dash State
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3675 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3673    movementMisc[6] = dist/step;
3674    movementMisc[7] = 1; //Dash State
3675    movementMisc[8] = vars[EZBI_FLAGS];
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3675 @ Columns 24-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3673    movementMisc[6] = dist/step;
3674    movementMisc[7] = 1; //Dash State
3675    movementMisc[8] = vars[EZBI_FLAGS];
                          ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3677 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3675    movementMisc[8] = vars[EZBI_FLAGS];
3676    if(!Ghost_FlagIsSet(GHF_IGNORE_ALL_TERRAIN))
3677        movementMisc[8] = GHF_IGNORE_ALL_TERRAIN;
            ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3679 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3677        movementMisc[8] = GHF_IGNORE_ALL_TERRAIN;
3678    if(!Ghost_FlagIsSet(GHF_IGNORE_NO_ENEMY))
3679        movementMisc[9] = GHF_FLYING_ENEMY;
            ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3681 @ Columns 7-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3679        movementMisc[9] = GHF_FLYING_ENEMY;
3680    if(Ghost_FlagIsSet(GHF_KNOCKBACK))
3681        movementMisc[12] = GHF_KNOCKBACK;
            ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3685 @ Columns 6-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3683    Ghost_SetFlag(GHF_IGNORE_NO_ENEMY);
3684    Ghost_UnsetFlag(GHF_KNOCKBACK);
3685    movementMisc[10] = step;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3686 @ Columns 6-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3684    Ghost_UnsetFlag(GHF_KNOCKBACK);
3685    movementMisc[10] = step;
3686    movementMisc[11] = ghost->Haltrate*10;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3690 @ Columns 11-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3688        }
3689    }
3690    else if(movementMisc[7]==1){
                ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3691 @ Columns 17-32 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3689    }
3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
                         ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3691 @ Columns 33-49 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3689    }
3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
                                         ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3691 @ Columns 51-66 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3689    }
3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
                                                           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3691 @ Columns 67-83 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3689    }
3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
                                                                           ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3692 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
3692        if(movementMisc[6]%4<2)
               ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3696 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3694    else
3695        ghost->DrawYOffset = -2;
3696    --movementMisc[6];
          ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3697 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3695        ghost->DrawYOffset = -2;
3696    --movementMisc[6];
3697    if(movementMisc[6]<=0){
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3699 @ Columns 8-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3697    if(movementMisc[6]<=0){
3698        ghost->DrawYOffset = -2;
3699        if(movementMisc[4]<0)
               ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3703 @ Columns 8-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3701    else
3702        Ghost_Dir = DIR_RIGHT;
3703    if(movementMisc[8])
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3705 @ Columns 8-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3703    if(movementMisc[8])
3704        Ghost_UnsetFlag(GHF_IGNORE_ALL_TERRAIN);
3705    if(movementMisc[9])
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3707 @ Columns 8-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3705    if(movementMisc[9])
3706        Ghost_UnsetFlag(GHF_IGNORE_NO_ENEMY);
3707    if(movementMisc[12])
           ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3709 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3707    if(movementMisc[12])
3708        Ghost_SetFlag(GHF_KNOCKBACK);
3709    movementMisc[7] = 0;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3710 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3708        Ghost_SetFlag(GHF_KNOCKBACK);
3709    movementMisc[7] = 0;
3710    movementMisc[0] = 0;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3369 @ Columns 17-35 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3367    void EZB_GetExtraProperties(ffc this, npc ghost, int id, int vars, int attack1, int attack2, int attack3, int attackPool, int laserColors){
3368        int i; int j;
3369        int special = vars[EZBI_SPECIAL];
                          ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3370 @ Columns 3-16 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3368    int i; int j;
3369    int special = vars[EZBI_SPECIAL];
3370    attackPool[0] = 0;
        ^~~~~~~~~~~~~


NewbieBoss.z Line 3380 @ Columns 3-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3378    
3379    //If attack 1 is a transformation, set which one
3380    vars[EZBI_BSTYPE] = 0;
        ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3383 @ Columns 4-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3381    if(attack1==50||attack1==51||attack1==71){
3382        EZB_AddTransformation(this, ghost, vars, special, attackPool);
3383        vars[EZBI_BSTYPE] = 1;
            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3385 @ Columns 5-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3383    vars[EZBI_BSTYPE] = 1;
3384    if(attack1==51)
3385        vars[EZBI_BSTYPE] = 2;
            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3387 @ Columns 5-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3385        vars[EZBI_BSTYPE] = 2;
3386    else if(attack1==71)
3387        vars[EZBI_BSTYPE] = 3;
            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3421 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3419    if(f->InitD[0]==id){
3420        if(f->InitD[1]||f->InitD[2]||f->InitD[3]){
3421            laserColors[0] = f->InitD[1];
                ^~~~~~~~~~~~~~


NewbieBoss.z Line 3422 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3420    if(f->InitD[1]||f->InitD[2]||f->InitD[3]){
3421        laserColors[0] = f->InitD[1];
3422        laserColors[1] = f->InitD[2];
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3423 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3421    laserColors[0] = f->InitD[1];
3422    laserColors[1] = f->InitD[2];
3423    laserColors[2] = f->InitD[3];
        ^~~~~~~~~~~~~~


NewbieBoss.z Line 3426 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3424    }
3425    if(f->InitD[4]||f->InitD[5]||f->InitD[6]){
3426        laserColors[3] = f->InitD[4];
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3427 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3425    if(f->InitD[4]||f->InitD[5]||f->InitD[6]){
3426        laserColors[3] = f->InitD[4];
3427        laserColors[4] = f->InitD[5];
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3428 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3426    laserColors[3] = f->InitD[4];
3427    laserColors[4] = f->InitD[5];
3428    laserColors[5] = f->InitD[6];
        ^~~~~~~~~~~~~~


NewbieBoss.z Line 3436 @ Columns 7-35 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3434    if(f->InitD[0]==id){
3435        if(f->InitD[1]>0)
3436            vars[EZBI_TRANSFORMCOOLDOWN] = f->InitD[1]-1;
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3438 @ Columns 7-35 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3436        vars[EZBI_TRANSFORMCOOLDOWN] = f->InitD[1]-1;
3437    if(f->InitD[2]>1)
3438        vars[EZBI_TRANSFORMVARIANCE] = f->InitD[2];
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3449 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3447    
3448    //If the enemy has transformations in the pool but no transforming attack, assume 51, a complete transformation
3449    if(attackPool[100]&&vars[EZBI_BSTYPE]==0){
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3449 @ Columns 23-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3447    
3448    //If the enemy has transformations in the pool but no transforming attack, assume 51, a complete transformation
3449    if(attackPool[100]&&vars[EZBI_BSTYPE]==0){
                            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3450 @ Columns 4-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3448    //If the enemy has transformations in the pool but no transforming attack, assume 51, a complete transformation
3449    if(attackPool[100]&&vars[EZBI_BSTYPE]==0){
3450        vars[EZBI_BSTYPE] = 2;
            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3454 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3452    
3453    //If the enemy has transformations in the pool, select one at random to load for the next transformation
3454    if(attackPool[100]){
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3455 @ Columns 34-71 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3453    //If the enemy has transformations in the pool, select one at random to load for the next transformation
3454    if(attackPool[100]){
3455        EZB_Barriershift_Store(ghost, attackPool[101+Rand(attackPool[100])], vars);
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3455 @ Columns 54-69 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3453    //If the enemy has transformations in the pool, select one at random to load for the next transformation
3454    if(attackPool[100]){
3455        EZB_Barriershift_Store(ghost, attackPool[101+Rand(attackPool[100])], vars);
                                                              ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3128 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3126    }
3127    int EZB_GetSpecialCombo(ffc this, npc ghost, int vars, int graphic){
3128        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3129 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3127    int EZB_GetSpecialCombo(ffc this, npc ghost, int vars, int graphic){
3128        int flags = vars[EZBI_FLAGS];
3129        int combo = vars[EZBI_COMBO];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3362 @ Columns 3-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3360    }
3361    void EZB_InitVars(int vars){
3362        vars[EZBI_TRANSFORMCOOLDOWN] = 0;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3363 @ Columns 3-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3361    void EZB_InitVars(int vars){
3362        vars[EZBI_TRANSFORMCOOLDOWN] = 0;
3363        vars[EZBI_TRANSFORMVARIANCE] = 0;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3365 @ Columns 3-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3363    vars[EZBI_TRANSFORMVARIANCE] = 0;
3364    
3365    vars[EZBI_MAXSPEEDCOUNTER] = 0;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3492 @ Columns 7-17 - Warning S108: Arrays should be explicitly typed - change `npc` to `npc[]`

3490    int count;
3491    for(int i=0; i<256; ++i){
3492        if(summons[i]->isValid()){
               ^~~~~~~~~~


NewbieBoss.z Line 3530 @ Columns 3-18 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3528    }
3529    void EZB_SetLaserArray(int arr, int count, int index, int x, int y, int scale, int angle, int chargeTime, int upTime, int damage){
3530        Game->PlaySound(SFX_EZB_LASERCHARGE);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3531 @ Columns 3-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3529    void EZB_SetLaserArray(int arr, int count, int index, int x, int y, int scale, int angle, int chargeTime, int upTime, int damage){
3530        Game->PlaySound(SFX_EZB_LASERCHARGE);
3531        arr[index] = x;
            ^~~~~~~~~~


NewbieBoss.z Line 3532 @ Columns 3-19 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3530    Game->PlaySound(SFX_EZB_LASERCHARGE);
3531    arr[index] = x;
3532    arr[count+index] = y;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3533 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3531    arr[index] = x;
3532    arr[count+index] = y;
3533    arr[count*2+index] = scale;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3534 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3532    arr[count+index] = y;
3533    arr[count*2+index] = scale;
3534    arr[count*3+index] = angle;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3535 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3533    arr[count*2+index] = scale;
3534    arr[count*3+index] = angle;
3535    arr[count*4+index] = chargeTime;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3536 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3534    arr[count*3+index] = angle;
3535    arr[count*4+index] = chargeTime;
3536    arr[count*5+index] = upTime;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3537 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3535    arr[count*4+index] = chargeTime;
3536    arr[count*5+index] = upTime;
3537    arr[count*6+index] = 1;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3538 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3536    arr[count*5+index] = upTime;
3537    arr[count*6+index] = 1;
3538    arr[count*7+index] = 0;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3539 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3537    arr[count*6+index] = 1;
3538    arr[count*7+index] = 0;
3539    arr[count*8+index] = damage;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 2774 @ Columns 14-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2772    }
2773    void EZB_Teleport(ffc this, npc ghost, int vars, int x, int y, int teleFrames){
2774        int size = vars[EZBI_SIZE];
                       ^~~~~~~~~~~~~~~


NewbieBoss.z Line 2775 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2773    void EZB_Teleport(ffc this, npc ghost, int vars, int x, int y, int teleFrames){
2774        int size = vars[EZBI_SIZE];
2775        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2776 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2774    int size = vars[EZBI_SIZE];
2775    int flags = vars[EZBI_FLAGS];
2776    int combo = vars[EZBI_COMBO];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2784 @ Columns 3-18 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2782    h = Clamp(h, 1, 4);
2783    
2784    Game->PlaySound(SFX_EZB_TELEPORT);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2648 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2646        return;
2647    
2648    int flags = vars[EZBI_FLAGS];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3508 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3506    void EZB_UpdateLaserArray(int arr, int laserColors, int count){
3507        for(int i=0; i<count; ++i){
3508            if(arr[count*6+i]){
                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3509 @ Columns 8-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3507    for(int i=0; i<count; ++i){
3508        if(arr[count*6+i]){
3509            if(arr[count*6+i]==1){
                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 35-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                             ^~~~~~


NewbieBoss.z Line 3510 @ Columns 43-55 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                     ^~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 57-71 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 73-87 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                                                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 112-126 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                                                                                          ^~~~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 128-142 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                                                                                                          ^~~~~~~~~~~~~~


NewbieBoss.z Line 3511 @ Columns 8-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3509    if(arr[count*6+i]==1){
3510        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
3511        ++arr[count*7+i];
              ^~~~~~~~~~~~~~


NewbieBoss.z Line 3512 @ Columns 9-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3510    EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
3511    ++arr[count*7+i];
3512    if(arr[count*7+i]>=arr[count*4+i]){
           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3512 @ Columns 25-39 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3510    EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
3511    ++arr[count*7+i];
3512    if(arr[count*7+i]>=arr[count*4+i]){
                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3513 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3511    ++arr[count*7+i];
3512    if(arr[count*7+i]>=arr[count*4+i]){
3513        Game->PlaySound(SFX_EZB_LASER);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3514 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3512    if(arr[count*7+i]>=arr[count*4+i]){
3513        Game->PlaySound(SFX_EZB_LASER);
3514        arr[count*7+i] = 0;
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3515 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3513    Game->PlaySound(SFX_EZB_LASER);
3514    arr[count*7+i] = 0;
3515    arr[count*6+i] = 2;
        ^~~~~~~~~~~~~~


NewbieBoss.z Line 3518 @ Columns 13-27 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3516        }
3517    }
3518    else if(arr[count*6+i]==2){
                ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 35-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                         ^~~~~~


NewbieBoss.z Line 3519 @ Columns 43-55 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                 ^~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 57-71 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                               ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 73-87 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                                               ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 89-103 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                                                               ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 125-139 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                                                                                                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 141-155 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                                                                                                                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3520 @ Columns 8-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
3520        ++arr[count*7+i];
              ^~~~~~~~~~~~~~


NewbieBoss.z Line 3521 @ Columns 9-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3519    EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
3520    ++arr[count*7+i];
3521    if(arr[count*7+i]>=arr[count*5+i]){
           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3521 @ Columns 25-39 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3519    EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
3520    ++arr[count*7+i];
3521    if(arr[count*7+i]>=arr[count*5+i]){
                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3522 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3520    ++arr[count*7+i];
3521    if(arr[count*7+i]>=arr[count*5+i]){
3522        arr[count*7+i] = 0;
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3523 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3521    if(arr[count*7+i]>=arr[count*5+i]){
3522        arr[count*7+i] = 0;
3523        arr[count*6+i] = 0;
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3721 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3719    }
3720    void EZB_Waitframe(ffc this, npc ghost, int vars){
3721        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3729 @ Columns 7-28 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3727    }
3728    
3729    if(!vars[EZBI_ATTACKFLAG]){
            ^~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3730 @ Columns 7-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3728    
3729    if(!vars[EZBI_ATTACKFLAG]){
3730        if(vars[EZBI_MAXSPEEDCOUNTER]){
               ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3731 @ Columns 8-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3729    if(!vars[EZBI_ATTACKFLAG]){
3730        if(vars[EZBI_MAXSPEEDCOUNTER]){
3731            if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
                   ^~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3731 @ Columns 34-60 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3729    if(!vars[EZBI_ATTACKFLAG]){
3730        if(vars[EZBI_MAXSPEEDCOUNTER]){
3731            if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3732 @ Columns 8-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3730    if(vars[EZBI_MAXSPEEDCOUNTER]){
3731        if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732            ++vars[EZBI_SPEEDUPCOUNTER];
                  ^~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                          ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 42-61 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                                                ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 62-82 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                                                                    ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 85-110 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                                                                                           ^~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 111-137 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                                                                                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3738 @ Columns 6-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3736    }
3737    
3738    if(vars[EZBI_BSTYPE]==3){
           ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3742 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3740    ghost->HP = 1;
3741    Ghost_HP = 1;
3742    vars[EZBI_BSISDEAD] = 1;
        ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 356 @ Columns 5-20 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

354    else
355        stepAngle = WrapDegrees(Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())+Rand(-ghost->Homing, ghost->Homing));
356    Game->PlaySound(SFX_JUMP);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 388 @ Columns 5-20 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

386    else if(movementStyle==9){ //Rapid hop
387        stepAngle = WrapDegrees(Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())+Rand(-ghost->Haltrate, ghost->Haltrate));
388        Game->PlaySound(SFX_JUMP);
           ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 688 @ Columns 11-26 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

686    }
687    else if(constantAttack==46){ //Summon
688        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
                ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 689 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

687    else if(constantAttack==46){ //Summon
688        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
689            Game->PlaySound(SFX_EZB_SUMMON);
               ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 737 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

735    k = 2;
736    Ghost_Data = combo;
737    Game->PlaySound(SFX_EZB_DASH);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 880 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

878    EZB_FiringAnim(this, ghost, vars, 0);
879    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
880    Game->PlaySound(SFX_EZB_LASERCHARGE);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 885 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

883        EZB_Waitframe(this, ghost, vars);
884    }
885    Game->PlaySound(SFX_EZB_LASER);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 895 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

893    EZB_FaceLink(this, ghost, vars);
894    EZB_FiringAnim(this, ghost, vars, 2);
895    Game->PlaySound(SFX_EZB_LASERCHARGE);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 900 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

898        EZB_Waitframe(this, ghost, vars);
899    }
900    Game->PlaySound(SFX_EZB_LASER);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 911 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

909    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
910    k = (w*8+h*8)/2;
911    Game->PlaySound(SFX_EZB_LASERCHARGE);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 921 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

919        EZB_Waitframe(this, ghost, vars);
920    }
921    Game->PlaySound(SFX_EZB_LASER);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 937 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

935    k = Choose(-1, 1);
936    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())+45;
937    Game->PlaySound(SFX_EZB_LASERCHARGE);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 948 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

946        EZB_Waitframe(this, ghost, vars);
947    }
948    Game->PlaySound(SFX_EZB_LASER);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 982 @ Columns 11-26 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

980    }
981    if(attack==19){ //Summon 1 Enemy
982        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
                ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 984 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

982    if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
983        EZB_FiringAnim(this, ghost, vars, 0);
984        Game->PlaySound(SFX_EZB_SUMMON);
           ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 991 @ Columns 11-26 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

989    }
990    if(attack==20){ //Summon 2 Enemies
991        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
                ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 993 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

991    if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
992        EZB_FiringAnim(this, ghost, vars, 0);
993        Game->PlaySound(SFX_EZB_SUMMON);
           ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1002 @ Columns 11-26 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

1000    }
1001    if(attack==21){ //Summon 3 Enemies
1002        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
                 ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 1004 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1002    if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
1003        EZB_FiringAnim(this, ghost, vars, 0);
1004        Game->PlaySound(SFX_EZB_SUMMON);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1083 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1081    EZB_FiringAnim(this, ghost, vars, 2);
1082    k = Rand(8, 152);
1083    Game->PlaySound(SFX_EZB_LASERCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1089 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1087    }
1088    for(j=0; j<8; ++j){
1089        Game->PlaySound(SFX_EZB_LASER);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1101 @ Columns 10-25 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1099    if(j<7){ //dont show the last laser
1100        if(i==0)
1101            Game->PlaySound(SFX_EZB_LASERCHARGE);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1112 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1110    k = 0;
1111    while(true){
1112        Game->PlaySound(SFX_EZB_LASERCHARGE);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1119 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1117        EZB_Waitframe(this, ghost, vars);
1118    }
1119    Game->PlaySound(SFX_EZB_LASER);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1149 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1147    k = 1;
1148    Ghost_Data = combo;
1149    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1163 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1161    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1162    k = 2;
1163    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1188 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1186    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1187    k = 2;
1188    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1202 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1200    EZB_FaceLink(this, ghost, vars);
1201    k = 2;
1202    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1222 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1220    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1221    EZB_FaceAngle(this, ghost, vars, angle);
1222    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1246 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1244    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1245    EZB_FaceAngle(this, ghost, vars, angle);
1246    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1269 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1267    EZB_FaceAngle(this, ghost, vars, angle);
1268    
1269    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1282 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1280    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1281    
1282    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1302 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1300        EZB_Waitframe(this, ghost, vars);
1301    }
1302    Game->PlaySound(SFX_EZB_SHOCKWAVE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1315 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1313    
1314    Ghost_Data = combo;
1315    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1335 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1333        EZB_Waitframe(this, ghost, vars);
1334    }
1335    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1345 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1343        EZB_Waitframe(this, ghost, vars);
1344    }
1345    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1347 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1345    Game->PlaySound(SFX_EZB_SHAKE);
1346    Screen->Quake = 20;
1347    Game->PlaySound(SFX_EZB_SHOCKWAVE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1359 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1357    
1358    Ghost_Data = combo;
1359    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1379 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1377        EZB_Waitframe(this, ghost, vars);
1378    }
1379    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1389 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1387        EZB_Waitframe(this, ghost, vars);
1388    }
1389    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1404 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1402    
1403    Ghost_Data = combo;
1404    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1424 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1422        EZB_Waitframe(this, ghost, vars);
1423    }
1424    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1434 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1432        EZB_Waitframe(this, ghost, vars);
1433    }
1434    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1437 @ Columns 21-36 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

1435    Screen->Quake = 20;
1436    k = Rand(4, 7);
1437    for(i=0; i<k&&(Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP); ++i){
                       ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 1445 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1443            j = m-176;
1444    }
1445    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1473 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1471    k = 3;
1472    Ghost_Data = combo;
1473    Game->PlaySound(SFX_EZB_BACKSTEP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1490 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1488    k = 2;
1489    Ghost_Data = combo;
1490    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1508 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1506    EZB_FaceLink(this, ghost, vars);
1507    EZB_FiringAnim(this, ghost, vars, 2);
1508    Game->PlaySound(SFX_EZB_LASERCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1513 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1511        EZB_Waitframe(this, ghost, vars);
1512    }
1513    Game->PlaySound(SFX_EZB_LASER);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1535 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1533    Ghost_Jump = 4;
1534    Ghost_Data = combo;
1535    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1557 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1555        EZB_Waitframe(this, ghost, vars);
1556    }
1557    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1568 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1566        EZB_Waitframe(this, ghost, vars);
1567    }
1568    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1570 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1568    Game->PlaySound(SFX_EZB_SHAKE);
1569    Screen->Quake = 4;
1570    Game->PlaySound(SFX_EZB_SHOCKWAVE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1583 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1581    Ghost_Jump = 4;
1582    Ghost_Data = combo;
1583    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1605 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1603        EZB_Waitframe(this, ghost, vars);
1604    }
1605    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1616 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1614        EZB_Waitframe(this, ghost, vars);
1615    }
1616    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1632 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1630    Ghost_Jump = 4;
1631    Ghost_Data = combo;
1632    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1654 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1652        EZB_Waitframe(this, ghost, vars);
1653    }
1654    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1665 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1663        EZB_Waitframe(this, ghost, vars);
1664    }
1665    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1668 @ Columns 21-36 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

1666    Screen->Quake = 4;
1667    k = Rand(2, 3);
1668    for(i=0; i<k&&(Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP); ++i){
                       ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 1676 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1674            j = m-176;
1675    }
1676    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1889 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1887    x = -32+Rand(-32, 32);
1888    y = -32+Rand(-32, 32);
1889    Game->PlaySound(SFX_EZB_LASERCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1904 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1902        EZB_Waitframe(this, ghost, vars);
1903    }
1904    Game->PlaySound(SFX_EZB_LASER);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1961 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1959        y = Link->Y;
1960    }
1961    Game->PlaySound(SFX_EZB_LASERCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1982 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1980        y = Link->Y;
1981    }
1982    Game->PlaySound(SFX_EZB_LASER);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2043 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2041    Ghost_X = x-ghost->TileWidth*8;
2042    Ghost_Y = y-ghost->TileHeight*8;
2043    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2058 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2056    if(CenterX(ghost)<0||CenterX(ghost)>255||CenterY(ghost)<0||CenterY(ghost)>175)
2057        break;
2058    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2069 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2067    angle = Angle(CenterX(ghost), CenterY(ghost), Link->X+8, Link->Y+8);
2068    if(fireSFX)
2069        Game->PlaySound(fireSFX);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2078 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2076    angle = Angle(CenterX(ghost), CenterY(ghost), Link->X+8, Link->Y+8);
2077    if(fireSFX)
2078        Game->PlaySound(fireSFX);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2089 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2087    angle = Angle(CenterX(ghost), CenterY(ghost), Link->X+8, Link->Y+8);
2088    if(fireSFX)
2089        Game->PlaySound(fireSFX);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2109 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2107    }
2108    EZB_FiringAnim(this, ghost, vars, 1);
2109    Game->PlaySound(SFX_EZB_LIGHTNING);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2122 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2120    angle = EZB_DirAngle(Ghost_Dir);
2121    EZB_FiringAnim(this, ghost, vars, 1);
2122    Game->PlaySound(SFX_EZB_LIGHTNING);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2140 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2138    
2139    if(i%10==0){
2140        Game->PlaySound(SFX_EZB_LIGHTNING);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2152 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2150    angle = EZB_DirAngle(Ghost_Dir);
2151    
2152    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2170 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2168    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
2169    
2170    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2194 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2192    m = -1;
2193    for(j=0; j<3; ++j){
2194        Game->PlaySound(SFX_EZB_SWORD);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2221 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2219    
2220    for(j=0; j<5; ++j){
2221        Game->PlaySound(SFX_EZB_SWORD);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2239 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2237    angle = EZB_DirAngle(Ghost_Dir);
2238    
2239    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2252 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2250        EZB_Waitframe(this, ghost, vars);
2251    }
2252    Game->PlaySound(SFX_EZB_SWORDCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2259 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2257    for(i=0; i<18*8; ++i){
2258        if(i%18==0)
2259            Game->PlaySound(SFX_EZB_SWORDSPIN);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2278 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2276    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
2277    
2278    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2283 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2281    arr1[2] = arr1[0]-arr1[1]; //Additional reach of sword
2282    
2283    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2297 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2295        EZB_Waitframe(this, ghost, vars);
2296    }
2297    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2316 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2314    
2315    for(j=0; j<10; ++j){
2316        Game->PlaySound(SFX_EZB_SWORD);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2332 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2330    angle = EZB_DirAngle(Ghost_Dir);
2331    
2332    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2345 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2343        EZB_Waitframe(this, ghost, vars);
2344    }
2345    Game->PlaySound(SFX_EZB_SWORDCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2352 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2350    for(i=0; i<18*6; ++i){
2351        if(i%18==0)
2352            Game->PlaySound(SFX_EZB_SWORDSPIN);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2367 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2365        EZB_Waitframe(this, ghost, vars);
2366    }
2367    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2380 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2378    for(i=0; i<36; ++i){
2379        if(i==0)
2380            Game->PlaySound(SFX_EZB_SWORDSPIN);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2405 @ Columns 9-24 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2403        EZB_Waitframes(this, ghost, vars, 16);
2404    }
2405    Game->PlaySound(SFX_EZB_BARRIERSHIFT_ONDEATH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2409 @ Columns 9-24 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2407    }
2408    else{
2409        Game->PlaySound(SFX_EZB_BARRIERSHIFT_ONDEATH);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2425 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2423        --vars[EZBI_TRANSFORMCOOLDOWN];
2424    else if(j){
2425        Game->PlaySound(SFX_EZB_BARRIERSHIFT);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2439 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2437        --vars[EZBI_TRANSFORMCOOLDOWN];
2438    else if(j){
2439        Game->PlaySound(SFX_EZB_BARRIERSHIFT);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3863 @ Columns 4-19 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3861    
3862    if(fireSFX)
3863        Game->PlaySound(fireSFX);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3880 @ Columns 10-25 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3878    for(j=0; j<3; ++j){
3879        if(fireSFX)
3880            Game->PlaySound(fireSFX);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3891 @ Columns 10-25 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3889    for(j=0; j<4; ++j){
3890        if(fireSFX)
3891            Game->PlaySound(fireSFX);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3999 @ Columns 4-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3997    tmpX = x+VectorX(dist, angle)+VectorX(dist2, angle+90)+VectorX(randOff, angle+90+angleSkew);
3998    tmpY = y+VectorY(dist, angle)+VectorY(dist2, angle+90)+VectorY(randOff, angle+90+angleSkew);
3999    lightning[2*i+0] = tmpX;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4000 @ Columns 4-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3998    tmpY = y+VectorY(dist, angle)+VectorY(dist2, angle+90)+VectorY(randOff, angle+90+angleSkew);
3999    lightning[2*i+0] = tmpX;
4000    lightning[2*i+1] = tmpY;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4013 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4011    for(int i=0; i<count-1; ++i){
4012        if(endDist>distPerSegment*i&&endDist<distPerSegment*(i+1)){
4013            x1 = lightning[i*2+0];
                     ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4014 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4012    if(endDist>distPerSegment*i&&endDist<distPerSegment*(i+1)){
4013        x1 = lightning[i*2+0];
4014        y1 = lightning[i*2+1];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4015 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4013    x1 = lightning[i*2+0];
4014    y1 = lightning[i*2+1];
4015    x2 = lightning[(i+1)*2+0];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4016 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4014    y1 = lightning[i*2+1];
4015    x2 = lightning[(i+1)*2+0];
4016    y2 = lightning[(i+1)*2+1];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4029 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4027    }
4028    else if(startDist>distPerSegment*i&&startDist<distPerSegment*(i+1)){
4029        x1 = lightning[i*2+0];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4030 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4028    else if(startDist>distPerSegment*i&&startDist<distPerSegment*(i+1)){
4029        x1 = lightning[i*2+0];
4030        y1 = lightning[i*2+1];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4031 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4029    x1 = lightning[i*2+0];
4030    y1 = lightning[i*2+1];
4031    x2 = lightning[(i+1)*2+0];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4032 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4030    y1 = lightning[i*2+1];
4031    x2 = lightning[(i+1)*2+0];
4032    y2 = lightning[(i+1)*2+1];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4045 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4043    }
4044    else if(startDist<=distPerSegment*i&&endDist>=distPerSegment*(i+1)){
4045        x1 = lightning[i*2+0];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4046 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4044    else if(startDist<=distPerSegment*i&&endDist>=distPerSegment*(i+1)){
4045        x1 = lightning[i*2+0];
4046        y1 = lightning[i*2+1];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4047 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4045    x1 = lightning[i*2+0];
4046    y1 = lightning[i*2+1];
4047    x2 = lightning[(i+1)*2+0];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4048 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4046    y1 = lightning[i*2+1];
4047    x2 = lightning[(i+1)*2+0];
4048    y2 = lightning[(i+1)*2+1];
             ^~~~~~~~~~~~~~~~~~~~


Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Debug: could not resolve symbol "fcc"
Debug: could not resolve symbol "fcc"
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [
    {
      "range": {
        "start": {
          "line": 3462,
          "character": 3
        },
        "end": {
          "line": 3462,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3463,
          "character": 3
        },
        "end": {
          "line": 3463,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3465,
          "character": 4
        },
        "end": {
          "line": 3465,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3466,
          "character": 4
        },
        "end": {
          "line": 3466,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3466,
          "character": 26
        },
        "end": {
          "line": 3466,
          "character": 46
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3469,
          "character": 4
        },
        "end": {
          "line": 3469,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3470,
          "character": 4
        },
        "end": {
          "line": 3470,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3470,
          "character": 26
        },
        "end": {
          "line": 3470,
          "character": 46
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3473,
          "character": 4
        },
        "end": {
          "line": 3473,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3474,
          "character": 4
        },
        "end": {
          "line": 3474,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3474,
          "character": 26
        },
        "end": {
          "line": 3474,
          "character": 46
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3479,
          "character": 2
        },
        "end": {
          "line": 3479,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3479,
          "character": 15
        },
        "end": {
          "line": 3479,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3480,
          "character": 4
        },
        "end": {
          "line": 3480,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3499,
          "character": 7
        },
        "end": {
          "line": 3499,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `npc` to `npc[]`"
    },
    {
      "range": {
        "start": {
          "line": 3500,
          "character": 4
        },
        "end": {
          "line": 3500,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `npc` to `npc[]`"
    },
    {
      "range": {
        "start": {
          "line": 3485,
          "character": 2
        },
        "end": {
          "line": 3485,
          "character": 33
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3485,
          "character": 17
        },
        "end": {
          "line": 3485,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3486,
          "character": 4
        },
        "end": {
          "line": 3486,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2854,
          "character": 14
        },
        "end": {
          "line": 2854,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3347,
          "character": 5
        },
        "end": {
          "line": 3347,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3350,
          "character": 13
        },
        "end": {
          "line": 3350,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3309,
          "character": 5
        },
        "end": {
          "line": 3309,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3312,
          "character": 15
        },
        "end": {
          "line": 3312,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3314,
          "character": 19
        },
        "end": {
          "line": 3314,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3315,
          "character": 25
        },
        "end": {
          "line": 3315,
          "character": 45
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3316,
          "character": 19
        },
        "end": {
          "line": 3316,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3317,
          "character": 17
        },
        "end": {
          "line": 3317,
          "character": 37
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3318,
          "character": 21
        },
        "end": {
          "line": 3318,
          "character": 41
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3319,
          "character": 19
        },
        "end": {
          "line": 3319,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3320,
          "character": 17
        },
        "end": {
          "line": 3320,
          "character": 37
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3321,
          "character": 19
        },
        "end": {
          "line": 3321,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3322,
          "character": 20
        },
        "end": {
          "line": 3322,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3323,
          "character": 16
        },
        "end": {
          "line": 3323,
          "character": 36
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3326,
          "character": 4
        },
        "end": {
          "line": 3326,
          "character": 15
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3326,
          "character": 18
        },
        "end": {
          "line": 3326,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3331,
          "character": 23
        },
        "end": {
          "line": 3331,
          "character": 45
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3334,
          "character": 15
        },
        "end": {
          "line": 3334,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3337,
          "character": 2
        },
        "end": {
          "line": 3337,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3337,
          "character": 25
        },
        "end": {
          "line": 3337,
          "character": 45
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3339,
          "character": 5
        },
        "end": {
          "line": 3339,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3340,
          "character": 3
        },
        "end": {
          "line": 3340,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3342,
          "character": 3
        },
        "end": {
          "line": 3342,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3255,
          "character": 2
        },
        "end": {
          "line": 3255,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3256,
          "character": 2
        },
        "end": {
          "line": 3256,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3257,
          "character": 2
        },
        "end": {
          "line": 3257,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3258,
          "character": 2
        },
        "end": {
          "line": 3258,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3259,
          "character": 2
        },
        "end": {
          "line": 3259,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3260,
          "character": 2
        },
        "end": {
          "line": 3260,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3261,
          "character": 2
        },
        "end": {
          "line": 3261,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3262,
          "character": 2
        },
        "end": {
          "line": 3262,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3263,
          "character": 2
        },
        "end": {
          "line": 3263,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3264,
          "character": 2
        },
        "end": {
          "line": 3264,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3265,
          "character": 2
        },
        "end": {
          "line": 3265,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3267,
          "character": 3
        },
        "end": {
          "line": 3267,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3270,
          "character": 3
        },
        "end": {
          "line": 3270,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3272,
          "character": 2
        },
        "end": {
          "line": 3272,
          "character": 10
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3273,
          "character": 2
        },
        "end": {
          "line": 3273,
          "character": 10
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3275,
          "character": 2
        },
        "end": {
          "line": 3275,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3276,
          "character": 2
        },
        "end": {
          "line": 3276,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3277,
          "character": 2
        },
        "end": {
          "line": 3277,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3278,
          "character": 2
        },
        "end": {
          "line": 3278,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3279,
          "character": 2
        },
        "end": {
          "line": 3279,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3280,
          "character": 2
        },
        "end": {
          "line": 3280,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3281,
          "character": 2
        },
        "end": {
          "line": 3281,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3282,
          "character": 2
        },
        "end": {
          "line": 3282,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3283,
          "character": 2
        },
        "end": {
          "line": 3283,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3284,
          "character": 2
        },
        "end": {
          "line": 3284,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3285,
          "character": 2
        },
        "end": {
          "line": 3285,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3287,
          "character": 3
        },
        "end": {
          "line": 3287,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3290,
          "character": 3
        },
        "end": {
          "line": 3290,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3292,
          "character": 2
        },
        "end": {
          "line": 3292,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3293,
          "character": 2
        },
        "end": {
          "line": 3293,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3295,
          "character": 2
        },
        "end": {
          "line": 3295,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3236,
          "character": 2
        },
        "end": {
          "line": 3236,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3079,
          "character": 46
        },
        "end": {
          "line": 3079,
          "character": 60
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3082,
          "character": 51
        },
        "end": {
          "line": 3082,
          "character": 65
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3082,
          "character": 67
        },
        "end": {
          "line": 3082,
          "character": 81
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3082,
          "character": 83
        },
        "end": {
          "line": 3082,
          "character": 97
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3092,
          "character": 17
        },
        "end": {
          "line": 3092,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3092,
          "character": 33
        },
        "end": {
          "line": 3092,
          "character": 47
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3115,
          "character": 17
        },
        "end": {
          "line": 3115,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3115,
          "character": 33
        },
        "end": {
          "line": 3115,
          "character": 47
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3115,
          "character": 49
        },
        "end": {
          "line": 3115,
          "character": 63
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2757,
          "character": 14
        },
        "end": {
          "line": 2757,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2923,
          "character": 14
        },
        "end": {
          "line": 2923,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2930,
          "character": 14
        },
        "end": {
          "line": 2930,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2916,
          "character": 14
        },
        "end": {
          "line": 2916,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2685,
          "character": 14
        },
        "end": {
          "line": 2685,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2689,
          "character": 16
        },
        "end": {
          "line": 2689,
          "character": 33
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2690,
          "character": 16
        },
        "end": {
          "line": 2690,
          "character": 33
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2595,
          "character": 22
        },
        "end": {
          "line": 2595,
          "character": 41
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2596,
          "character": 14
        },
        "end": {
          "line": 2596,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2597,
          "character": 14
        },
        "end": {
          "line": 2597,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3612,
          "character": 14
        },
        "end": {
          "line": 3612,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3626,
          "character": 2
        },
        "end": {
          "line": 3626,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3627,
          "character": 2
        },
        "end": {
          "line": 3627,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3628,
          "character": 5
        },
        "end": {
          "line": 3628,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3629,
          "character": 6
        },
        "end": {
          "line": 3629,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3630,
          "character": 6
        },
        "end": {
          "line": 3630,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3631,
          "character": 6
        },
        "end": {
          "line": 3631,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3632,
          "character": 6
        },
        "end": {
          "line": 3632,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3633,
          "character": 3
        },
        "end": {
          "line": 3633,
          "character": 18
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3633,
          "character": 41
        },
        "end": {
          "line": 3633,
          "character": 56
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3635,
          "character": 26
        },
        "end": {
          "line": 3635,
          "character": 41
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3636,
          "character": 4
        },
        "end": {
          "line": 3636,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3637,
          "character": 4
        },
        "end": {
          "line": 3637,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3640,
          "character": 27
        },
        "end": {
          "line": 3640,
          "character": 42
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3669,
          "character": 5
        },
        "end": {
          "line": 3669,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3670,
          "character": 5
        },
        "end": {
          "line": 3670,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3671,
          "character": 5
        },
        "end": {
          "line": 3671,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3672,
          "character": 5
        },
        "end": {
          "line": 3672,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3673,
          "character": 5
        },
        "end": {
          "line": 3673,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3674,
          "character": 5
        },
        "end": {
          "line": 3674,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3674,
          "character": 23
        },
        "end": {
          "line": 3674,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3676,
          "character": 6
        },
        "end": {
          "line": 3676,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3678,
          "character": 6
        },
        "end": {
          "line": 3678,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3680,
          "character": 6
        },
        "end": {
          "line": 3680,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3684,
          "character": 5
        },
        "end": {
          "line": 3684,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3685,
          "character": 5
        },
        "end": {
          "line": 3685,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3689,
          "character": 10
        },
        "end": {
          "line": 3689,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 16
        },
        "end": {
          "line": 3690,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 32
        },
        "end": {
          "line": 3690,
          "character": 48
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 50
        },
        "end": {
          "line": 3690,
          "character": 65
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 66
        },
        "end": {
          "line": 3690,
          "character": 82
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3691,
          "character": 6
        },
        "end": {
          "line": 3691,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3695,
          "character": 5
        },
        "end": {
          "line": 3695,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3696,
          "character": 6
        },
        "end": {
          "line": 3696,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3698,
          "character": 7
        },
        "end": {
          "line": 3698,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3702,
          "character": 7
        },
        "end": {
          "line": 3702,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3704,
          "character": 7
        },
        "end": {
          "line": 3704,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3706,
          "character": 7
        },
        "end": {
          "line": 3706,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3708,
          "character": 4
        },
        "end": {
          "line": 3708,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3709,
          "character": 4
        },
        "end": {
          "line": 3709,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3368,
          "character": 16
        },
        "end": {
          "line": 3368,
          "character": 34
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3369,
          "character": 2
        },
        "end": {
          "line": 3369,
          "character": 15
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3379,
          "character": 2
        },
        "end": {
          "line": 3379,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3382,
          "character": 3
        },
        "end": {
          "line": 3382,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3384,
          "character": 4
        },
        "end": {
          "line": 3384,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3386,
          "character": 4
        },
        "end": {
          "line": 3386,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3420,
          "character": 6
        },
        "end": {
          "line": 3420,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3421,
          "character": 6
        },
        "end": {
          "line": 3421,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3422,
          "character": 6
        },
        "end": {
          "line": 3422,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3425,
          "character": 6
        },
        "end": {
          "line": 3425,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3426,
          "character": 6
        },
        "end": {
          "line": 3426,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3427,
          "character": 6
        },
        "end": {
          "line": 3427,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3435,
          "character": 6
        },
        "end": {
          "line": 3435,
          "character": 34
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3437,
          "character": 6
        },
        "end": {
          "line": 3437,
          "character": 34
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3448,
          "character": 5
        },
        "end": {
          "line": 3448,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3448,
          "character": 22
        },
        "end": {
          "line": 3448,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3449,
          "character": 3
        },
        "end": {
          "line": 3449,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3453,
          "character": 5
        },
        "end": {
          "line": 3453,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3454,
          "character": 33
        },
        "end": {
          "line": 3454,
          "character": 70
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3454,
          "character": 53
        },
        "end": {
          "line": 3454,
          "character": 68
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3127,
          "character": 14
        },
        "end": {
          "line": 3127,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3128,
          "character": 14
        },
        "end": {
          "line": 3128,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3361,
          "character": 2
        },
        "end": {
          "line": 3361,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3362,
          "character": 2
        },
        "end": {
          "line": 3362,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3364,
          "character": 2
        },
        "end": {
          "line": 3364,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3491,
          "character": 6
        },
        "end": {
          "line": 3491,
          "character": 16
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `npc` to `npc[]`"
    },
    {
      "range": {
        "start": {
          "line": 3529,
          "character": 2
        },
        "end": {
          "line": 3529,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3530,
          "character": 2
        },
        "end": {
          "line": 3530,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3531,
          "character": 2
        },
        "end": {
          "line": 3531,
          "character": 18
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3532,
          "character": 2
        },
        "end": {
          "line": 3532,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3533,
          "character": 2
        },
        "end": {
          "line": 3533,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3534,
          "character": 2
        },
        "end": {
          "line": 3534,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3535,
          "character": 2
        },
        "end": {
          "line": 3535,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3536,
          "character": 2
        },
        "end": {
          "line": 3536,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3537,
          "character": 2
        },
        "end": {
          "line": 3537,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3538,
          "character": 2
        },
        "end": {
          "line": 3538,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2773,
          "character": 13
        },
        "end": {
          "line": 2773,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2774,
          "character": 14
        },
        "end": {
          "line": 2774,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2775,
          "character": 14
        },
        "end": {
          "line": 2775,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2783,
          "character": 2
        },
        "end": {
          "line": 2783,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2647,
          "character": 14
        },
        "end": {
          "line": 2647,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3507,
          "character": 6
        },
        "end": {
          "line": 3507,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3508,
          "character": 7
        },
        "end": {
          "line": 3508,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 34
        },
        "end": {
          "line": 3509,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 42
        },
        "end": {
          "line": 3509,
          "character": 54
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 56
        },
        "end": {
          "line": 3509,
          "character": 70
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 72
        },
        "end": {
          "line": 3509,
          "character": 86
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 111
        },
        "end": {
          "line": 3509,
          "character": 125
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 127
        },
        "end": {
          "line": 3509,
          "character": 141
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3510,
          "character": 7
        },
        "end": {
          "line": 3510,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3511,
          "character": 8
        },
        "end": {
          "line": 3511,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3511,
          "character": 24
        },
        "end": {
          "line": 3511,
          "character": 38
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3512,
          "character": 6
        },
        "end": {
          "line": 3512,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3513,
          "character": 6
        },
        "end": {
          "line": 3513,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3514,
          "character": 6
        },
        "end": {
          "line": 3514,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3517,
          "character": 12
        },
        "end": {
          "line": 3517,
          "character": 26
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 34
        },
        "end": {
          "line": 3518,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 42
        },
        "end": {
          "line": 3518,
          "character": 54
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 56
        },
        "end": {
          "line": 3518,
          "character": 70
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 72
        },
        "end": {
          "line": 3518,
          "character": 86
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 88
        },
        "end": {
          "line": 3518,
          "character": 102
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 124
        },
        "end": {
          "line": 3518,
          "character": 138
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 140
        },
        "end": {
          "line": 3518,
          "character": 154
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3519,
          "character": 7
        },
        "end": {
          "line": 3519,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3520,
          "character": 8
        },
        "end": {
          "line": 3520,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3520,
          "character": 24
        },
        "end": {
          "line": 3520,
          "character": 38
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3521,
          "character": 6
        },
        "end": {
          "line": 3521,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3522,
          "character": 6
        },
        "end": {
          "line": 3522,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3720,
          "character": 14
        },
        "end": {
          "line": 3720,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3728,
          "character": 6
        },
        "end": {
          "line": 3728,
          "character": 27
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3729,
          "character": 6
        },
        "end": {
          "line": 3729,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3730,
          "character": 7
        },
        "end": {
          "line": 3730,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3730,
          "character": 33
        },
        "end": {
          "line": 3730,
          "character": 59
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3731,
          "character": 7
        },
        "end": {
          "line": 3731,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 19
        },
        "end": {
          "line": 3732,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 41
        },
        "end": {
          "line": 3732,
          "character": 60
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 61
        },
        "end": {
          "line": 3732,
          "character": 81
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 84
        },
        "end": {
          "line": 3732,
          "character": 109
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 110
        },
        "end": {
          "line": 3732,
          "character": 136
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3737,
          "character": 5
        },
        "end": {
          "line": 3737,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3741,
          "character": 4
        },
        "end": {
          "line": 3741,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 355,
          "character": 4
        },
        "end": {
          "line": 355,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 387,
          "character": 4
        },
        "end": {
          "line": 387,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 687,
          "character": 10
        },
        "end": {
          "line": 687,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 688,
          "character": 6
        },
        "end": {
          "line": 688,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 736,
          "character": 5
        },
        "end": {
          "line": 736,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 879,
          "character": 5
        },
        "end": {
          "line": 879,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 884,
          "character": 5
        },
        "end": {
          "line": 884,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 894,
          "character": 5
        },
        "end": {
          "line": 894,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 899,
          "character": 5
        },
        "end": {
          "line": 899,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 910,
          "character": 5
        },
        "end": {
          "line": 910,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 920,
          "character": 5
        },
        "end": {
          "line": 920,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 936,
          "character": 5
        },
        "end": {
          "line": 936,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 947,
          "character": 5
        },
        "end": {
          "line": 947,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 981,
          "character": 10
        },
        "end": {
          "line": 981,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 983,
          "character": 6
        },
        "end": {
          "line": 983,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 990,
          "character": 10
        },
        "end": {
          "line": 990,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 992,
          "character": 6
        },
        "end": {
          "line": 992,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1001,
          "character": 10
        },
        "end": {
          "line": 1001,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1003,
          "character": 6
        },
        "end": {
          "line": 1003,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1082,
          "character": 5
        },
        "end": {
          "line": 1082,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1088,
          "character": 6
        },
        "end": {
          "line": 1088,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1100,
          "character": 9
        },
        "end": {
          "line": 1100,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1111,
          "character": 6
        },
        "end": {
          "line": 1111,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1118,
          "character": 6
        },
        "end": {
          "line": 1118,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1148,
          "character": 5
        },
        "end": {
          "line": 1148,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1162,
          "character": 5
        },
        "end": {
          "line": 1162,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1187,
          "character": 5
        },
        "end": {
          "line": 1187,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1201,
          "character": 5
        },
        "end": {
          "line": 1201,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1221,
          "character": 5
        },
        "end": {
          "line": 1221,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1245,
          "character": 5
        },
        "end": {
          "line": 1245,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1268,
          "character": 5
        },
        "end": {
          "line": 1268,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1281,
          "character": 5
        },
        "end": {
          "line": 1281,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1301,
          "character": 5
        },
        "end": {
          "line": 1301,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1314,
          "character": 5
        },
        "end": {
          "line": 1314,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1334,
          "character": 5
        },
        "end": {
          "line": 1334,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1344,
          "character": 5
        },
        "end": {
          "line": 1344,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1346,
          "character": 5
        },
        "end": {
          "line": 1346,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1358,
          "character": 5
        },
        "end": {
          "line": 1358,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1378,
          "character": 5
        },
        "end": {
          "line": 1378,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1388,
          "character": 5
        },
        "end": {
          "line": 1388,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1403,
          "character": 5
        },
        "end": {
          "line": 1403,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1423,
          "character": 5
        },
        "end": {
          "line": 1423,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1433,
          "character": 5
        },
        "end": {
          "line": 1433,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1436,
          "character": 20
        },
        "end": {
          "line": 1436,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1444,
          "character": 6
        },
        "end": {
          "line": 1444,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1472,
          "character": 6
        },
        "end": {
          "line": 1472,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1489,
          "character": 6
        },
        "end": {
          "line": 1489,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1507,
          "character": 5
        },
        "end": {
          "line": 1507,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1512,
          "character": 5
        },
        "end": {
          "line": 1512,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1534,
          "character": 5
        },
        "end": {
          "line": 1534,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1556,
          "character": 5
        },
        "end": {
          "line": 1556,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1567,
          "character": 5
        },
        "end": {
          "line": 1567,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1569,
          "character": 5
        },
        "end": {
          "line": 1569,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1582,
          "character": 5
        },
        "end": {
          "line": 1582,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1604,
          "character": 5
        },
        "end": {
          "line": 1604,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1615,
          "character": 5
        },
        "end": {
          "line": 1615,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1631,
          "character": 5
        },
        "end": {
          "line": 1631,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1653,
          "character": 5
        },
        "end": {
          "line": 1653,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1664,
          "character": 5
        },
        "end": {
          "line": 1664,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1667,
          "character": 20
        },
        "end": {
          "line": 1667,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1675,
          "character": 6
        },
        "end": {
          "line": 1675,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1888,
          "character": 5
        },
        "end": {
          "line": 1888,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1903,
          "character": 5
        },
        "end": {
          "line": 1903,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1960,
          "character": 5
        },
        "end": {
          "line": 1960,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1981,
          "character": 5
        },
        "end": {
          "line": 1981,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2042,
          "character": 6
        },
        "end": {
          "line": 2042,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2057,
          "character": 6
        },
        "end": {
          "line": 2057,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2068,
          "character": 6
        },
        "end": {
          "line": 2068,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2077,
          "character": 6
        },
        "end": {
          "line": 2077,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2088,
          "character": 6
        },
        "end": {
          "line": 2088,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2108,
          "character": 5
        },
        "end": {
          "line": 2108,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2121,
          "character": 5
        },
        "end": {
          "line": 2121,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2139,
          "character": 7
        },
        "end": {
          "line": 2139,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2151,
          "character": 5
        },
        "end": {
          "line": 2151,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2169,
          "character": 5
        },
        "end": {
          "line": 2169,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2193,
          "character": 6
        },
        "end": {
          "line": 2193,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2220,
          "character": 6
        },
        "end": {
          "line": 2220,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2238,
          "character": 5
        },
        "end": {
          "line": 2238,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2251,
          "character": 5
        },
        "end": {
          "line": 2251,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2258,
          "character": 7
        },
        "end": {
          "line": 2258,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2277,
          "character": 5
        },
        "end": {
          "line": 2277,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2282,
          "character": 5
        },
        "end": {
          "line": 2282,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2296,
          "character": 5
        },
        "end": {
          "line": 2296,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2315,
          "character": 6
        },
        "end": {
          "line": 2315,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2331,
          "character": 5
        },
        "end": {
          "line": 2331,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2344,
          "character": 5
        },
        "end": {
          "line": 2344,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2351,
          "character": 7
        },
        "end": {
          "line": 2351,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2366,
          "character": 5
        },
        "end": {
          "line": 2366,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2379,
          "character": 7
        },
        "end": {
          "line": 2379,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2404,
          "character": 8
        },
        "end": {
          "line": 2404,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2408,
          "character": 8
        },
        "end": {
          "line": 2408,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2424,
          "character": 7
        },
        "end": {
          "line": 2424,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2438,
          "character": 7
        },
        "end": {
          "line": 2438,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3862,
          "character": 3
        },
        "end": {
          "line": 3862,
          "character": 18
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3879,
          "character": 9
        },
        "end": {
          "line": 3879,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3890,
          "character": 9
        },
        "end": {
          "line": 3890,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3998,
          "character": 3
        },
        "end": {
          "line": 3998,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3999,
          "character": 3
        },
        "end": {
          "line": 3999,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4012,
          "character": 9
        },
        "end": {
          "line": 4012,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4013,
          "character": 9
        },
        "end": {
          "line": 4013,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4014,
          "character": 9
        },
        "end": {
          "line": 4014,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4015,
          "character": 9
        },
        "end": {
          "line": 4015,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4028,
          "character": 9
        },
        "end": {
          "line": 4028,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4029,
          "character": 9
        },
        "end": {
          "line": 4029,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4030,
          "character": 9
        },
        "end": {
          "line": 4030,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4031,
          "character": 9
        },
        "end": {
          "line": 4031,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4044,
          "character": 9
        },
        "end": {
          "line": 4044,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4045,
          "character": 9
        },
        "end": {
          "line": 4045,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4046,
          "character": 9
        },
        "end": {
          "line": 4046,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4047,
          "character": 9
        },
        "end": {
          "line": 4047,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    }
  ],
  "metadata": {
    "currentFileSymbols": 392,
    "symbols": 814,
    "identifiers": 10363,
    "elided": true
  }
}

zasm:

SETV GD8 0; void run() Body Start
SETV GD9 0
SETV GD11 0
SETV GD10 0
SETV GD4 0
SETV GD14 0
SETV GD5 0
SETV GD13 0
SETV GD12 0
SETV GD6 0
SETV GD7 0
SETV GD1 0
SETV GD2 0
SETV GD3 0
ALLOCATEGMEMV D2 25 0
SETR GD25 D2
SETV GD15 0
SETV GD16 0
SETV GD20 0
SETV GD17 0
SETV GD21 0
SETV GD18 0
SETV GD19 0
ALLOCATEGMEMV D2 32 0
SETR GD24 D2
SETV GD22 0
SETV GD23 0
ALLOCATEGMEMV D2 8 0
SETR GD26 D2
ALLOCATEGMEMV D2 1000 0
SETR GD27 D2
QUIT; void run() Body End
PUSHV 0; void run() Body Start
SETR D4 SP2
PUSHR D4
CALLFUNC 3.1938; UsrFunc[void StartGhostZH()] Call
POP D4
PUSHR D4; while(true) #8 Body [Opt:AlwaysOn] Start
CALLFUNC 3.8353; UsrFunc[void UpdateGhostZH1()] Call
POP D4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR D4
CALLFUNC 3.8415; UsrFunc[void UpdateGhostZH2()] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 38; while() #8 End AND [Opt:NeverRet] AND void run() Body End
PUSHR D0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #434 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 62 ==; Test 'if'
SETV D2 -1; if() #434 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
GOTO 68; if() #434 Body End
LOAD D2 0.0001; if() #434 Else Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #434 Else End
POPARGS D5 0.0002
QUIT; void run(int) Body End
PUSHR D0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0 0.0048
SETR D4 SP2
STOREV 0 0.0047
STOREV 0 0.0046
STOREV 0 0.0045
STOREV 0 0.0044
STOREV 0 0.0043
STOREV 0 0.0042
STOREV 0 0.0041
STOREV 0 0.0040
STOREV 0 0.0039
STOREV 0 0.0038
ALLOCATEMEMV D2 2 0
STORE D2 0.0037
ALLOCATEMEMV D2 256 0
STORE D2 0.0036
PUSHR D4
LOAD D2 0.0048; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Params Start
PUSHR D2
LOAD D2 0.0049
PUSHR D2; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Params End
CALLFUNC 2.9089; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Call
POP D4
STORE D2 0.0035
ALLOCATEMEMV D2 256 0
STORE D2 0.0034
STOREV 0 0.0033
STOREV 0 0.0032
ALLOCATEMEMV D2 200 0
STORE D2 0.0031
ALLOCATEMEMV D2 6 0
PUSHR D2
WRITEPODARRAY D2 {119,118,124,119,118,124}
POP D2
STORE D2 0.0029
ALLOCATEMEMV D2 400 0
STORE D2 0.0028
SETV D2 0; for() #254 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #254 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 136 ==; for() #254 TestFail?
LOAD D2 0.0035; for() #254 Body Start
PUSHR D2
LOAD D2 0.0047
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0047
ADDV D2 300
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #254 Body End
LOAD D2 0.0047; for() #254 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 111; for() #254 End
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0028
SETR D0 D2
POP D2
WRITEPODARRAYVR 312 D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 300
STORE D2 0.0027
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 301
STORE D2 0.0026
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 302
STORE D2 0.0025
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 303
STORE D2 0.0024
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 304
STORE D2 0.0023
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 305
STORE D2 0.0022
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 306
STORE D2 0.0021
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 307
STORE D2 0.0020
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 308
STORE D2 0.0019
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0018
STOREV 0 0.0017
STOREV 0 0.0016
LOAD D2 0.0026; if() #518 Test
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 205 ==; Test 'if'
SETV D2 44; if() #518 Body Start
STORE D2 0.0017
GOTO 236; if() #518 Body End
LOAD D2 0.0026; if() #519 Test AND if() #518 Else Start
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 213 ==; Test 'if'
SETV D2 45; if() #519 Body Start
STORE D2 0.0017
GOTO 236; if() #519 Body End
LOAD D2 0.0026; if() #520 Test AND if() #519 Else Start
COMPAREV D2 46
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 221 ==; Test 'if'
SETV D2 46; if() #520 Body Start
STORE D2 0.0017
GOTO 236; if() #520 Body End
LOAD D2 0.0026; if() #521 Test AND if() #520 Else Start
COMPAREV D2 47
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 229 ==; Test 'if'
SETV D2 47; if() #521 Body Start
STORE D2 0.0017
GOTO 236; if() #521 Body End
LOAD D2 0.0026; if() #932 Test AND if() #521 Else Start
COMPAREV D2 48
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 236 ==; Test 'if'
SETV D2 48; if() #932 Body Start
STORE D2 0.0017; if() #932 Body End
LOAD D2 0.0017; if() #521 Else End AND if() #520 Else End AND if() #519 Else End AND if() #518 Else End AND if() #933 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 247 ==; Test 'if'
LOAD D2 0.0025; if() #933 Body Start
STORE D2 0.0026
LOAD D2 0.0024
STORE D2 0.0025
SETV D2 0
STORE D2 0.0024; if() #933 Body End
LOAD D2 0.0023
ANDV D2 15
STORE D2 0.0015
LOAD D2 0.0023; InlineFunc[int Floor(int)] Params Start
RSHIFTV D2 4; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
ANDV D2 15
STORE D2 0.0014
LOAD D2 0.0018; if() #934 Test
ANDV D2 512
COMPAREV D2 0
GOTOCMP 265 !=
LOAD D2 0.0018
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 265 !=
SETV D2 1
GOTO 266
SETV D2 0
COMPAREV D2 0
GOTOCMP 275 ==; Test 'if'
PUSHR D4; if() #934 Body Start
PUSHV 8; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 16; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #934 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCID
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0024
PUSHR D2
LOAD D2 0.0031
PUSHR D2
LOAD D2 0.0029
PUSHR D2; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.3952; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0021
ANDV D2 15
STORE D2 0.0013
LOAD D2 0.0021
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0012
LOAD D2 0.0012; if() #935 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 312 ==; Test 'if'
LOAD D2 0.0013; if() #935 Body Start
STORE D2 0.0012; if() #935 Body End
PUSHR D4
LOAD D2 0.0013; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0013
PUSHR D4
LOAD D2 0.0012; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0012
LOAD D2 0.0035
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0028
SETR D0 D2
POP D2
WRITEPODARRAYVR 310 D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0011
PUSHR D4
LOAD D2 0.0048; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
PUSHARGSV -1 0.0002
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params End
CALLFUNC 2.9532; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0035; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0015
PUSHR D2; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params End
CALLFUNC 2.9296; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Call
POP D4
LOAD D2 0.0018; if() #522 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 378 ==; Test 'if'
PUSHR D4; if() #522 Body Start
PUSHV 512; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
GOTO 386; if() #522 Body End
LOAD D2 0.0018; if() #936 Test AND if() #522 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 386 ==; Test 'if'
PUSHR D4; if() #936 Body Start
PUSHV 256; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #936 Body End
LOAD D2 0.0018; if() #522 Else End AND if() #937 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 394 ==; Test 'if'
PUSHR D4; if() #937 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #937 Body End
LOAD D2 0.0018; if() #523 Test
ANDV D2 4
COMPAREV D2 0
GOTOCMP 438 ==; Test 'if'
PUSHR D4; if() #523 Body Start
PUSHV 7168; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 65536; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0048
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0018; if() #938 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 428 ==
PUSHR D4
CALLFUNC 2.9280; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 428 !=
SETV D2 1
GOTO 429
SETV D2 0
COMPAREV D2 0
GOTOCMP 446 ==; Test 'if'
PUSHR D4; if() #938 Body Start
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 8
SETR GD3 D2; if() #938 Body End
GOTO 446; if() #523 Body End
LOAD D2 0.0018; if() #939 Test AND if() #523 Else Start
ANDV D2 8
COMPAREV D2 0
GOTOCMP 446 ==; Test 'if'
PUSHR D4; if() #939 Body Start
PUSHV 65538; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #939 Body End
LOAD D2 0.0018; if() #523 Else End AND if() #940 Test
ANDV D2 256
COMPAREV D2 0
GOTOCMP 454 ==; Test 'if'
PUSHR D4; if() #940 Body Start
PUSHV 1; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #940 Body End
STOREV -1 0.0010
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
STORE D2 0.0009
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0007
ALLOCATEMEMV D2 16 0
STORE D2 0.0006
STOREV -1 0.0005
STOREV 0 0.0004
LOAD D2 0.0027; if() #942 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 525 ==; Test 'if'
SETV D3 360; InlineFunc[int Rand(int)] Params AND if() #942 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0035; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0035; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0038; if() #942 Body End
LOAD D2 0.0027; if() #943 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 533 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #943 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0008; if() #943 Body End
LOAD D2 0.0027; if() #944 Test
COMPAREV D2 12
GOTOCMP 541 ==
LOAD D2 0.0027
COMPAREV D2 13
GOTOCMP 541 ==
SETV D2 0
GOTO 542
SETV D2 1
COMPAREV D2 0
GOTOCMP 549 ==; Test 'if'
LOAD D2 0.0035; if() #944 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0007; if() #944 Body End
STOREV 0 0.0003; while(true) #9 Body [Opt:AlwaysOn] Start
LOAD D2 0.0027; if() #524 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 590 ==; Test 'if'
PUSHR D4; if() #524 Body Start
LOAD D2 0.0010; UsrFunc[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCHALTRATE
PUSHV 48; UsrFunc[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Params End
CALLFUNC 2.8359; UsrFunc[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0010
LOAD D2 0.0010; if() #945 Test
COMPAREV D2 16
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
SETV D2 1; if() #945 Body Start
STORE D2 0.0003; if() #945 Body End
GOTO 3568; if() #524 Body End
LOAD D2 0.0027; if() #525 Test AND if() #524 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 635 ==; Test 'if'
PUSHR D4; if() #525 Body Start
LOAD D2 0.0010; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params End
CALLFUNC 2.6051; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Call
POP D4
STORE D2 0.0010
LOAD D2 0.0009; if() #526 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 626 ==; Test 'if'
LOAD D2 0.0009; if() #526 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 3568; if() #526 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #946 Test AND if() #526 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
SETV D2 1; if() #946 Body Start
STORE D2 0.0003; if() #946 Body End
GOTO 3568; if() #526 Else End AND if() #525 Body End
LOAD D2 0.0027; if() #527 Test AND if() #525 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 680 ==; Test 'if'
PUSHR D4; if() #527 Body Start
LOAD D2 0.0010; UsrFunc[int Ghost_ConstantWalk8(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER; UsrFunc[int Ghost_ConstantWalk8(int, int, int, int, int)] Params End
CALLFUNC 2.7271; UsrFunc[int Ghost_ConstantWalk8(int, int, int, int, int)] Call
POP D4
STORE D2 0.0010
LOAD D2 0.0009; if() #528 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 671 ==; Test 'if'
LOAD D2 0.0009; if() #528 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 3568; if() #528 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #947 Test AND if() #528 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
SETV D2 1; if() #947 Body Start
STORE D2 0.0003; if() #947 Body End
GOTO 3568; if() #528 Else End AND if() #527 Body End
LOAD D2 0.0027; if() #529 Test AND if() #527 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 830 ==; Test 'if'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #948 Test AND if() #529 Body Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 753 ==; Test 'if'
PUSHR D4; if() #948 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #948 Body End
LOAD D2 0.0035; if() #949 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
GOTOCMP 795 <=
SETR D2 LINKACTION
COMPAREV D2 2
GOTOCMP 795 !=
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
POP D3
COMPARER D3 D2
GOTOCMP 795 >=
SETV D2 1
GOTO 796
SETV D2 0
COMPAREV D2 0
GOTOCMP 812 ==; Test 'if'
LOAD D2 0.0009; if() #950 Test AND if() #949 Body Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 5
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 812 ==; Test 'if'
SETV D2 1; if() #950 Body Start
STORE D2 0.0003; if() #950 Body End
LOAD D2 0.0009; if() #949 Body End AND if() #530 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 821 ==; Test 'if'
LOAD D2 0.0009; if() #530 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 3568; if() #530 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #951 Test AND if() #530 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
SETV D2 1; if() #951 Body Start
STORE D2 0.0003; if() #951 Body End
GOTO 3568; if() #530 Else End AND if() #529 Body End
LOAD D2 0.0027; if() #531 Test AND if() #529 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 963 ==; Test 'if'
PUSHR D4; if() #531 Body Start
LOAD D2 0.0039; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0038
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0039; if() #952 Test
COMPAREV D2 0
GOTOCMP 854 >=
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 867 ==
LOAD D2 0.0039
COMPAREV D2 0
GOTOCMP 865 <=
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 867 ==
SETV D2 0
GOTO 868
SETV D2 1
COMPAREV D2 0
GOTOCMP 875 ==; Test 'if'
LOAD D2 0.0039; if() #952 Body Start
SUBV2 0 D2
STORE D2 0.0039
SETV D2 1
STORE D2 0.0016; if() #952 Body End
LOAD D2 0.0038; if() #953 Test
COMPAREV D2 0
GOTOCMP 886 >=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 898 ==
LOAD D2 0.0038
COMPAREV D2 0
GOTOCMP 896 <=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 898 ==
SETV D2 0
GOTO 899
SETV D2 1
COMPAREV D2 0
GOTOCMP 911 ==; Test 'if'
LOAD D2 0.0038; if() #953 Body Start
SUBV2 0 D2
STORE D2 0.0038
LOAD D2 0.0016; if() #954 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 911 ==; Test 'if'
SETV D2 1; if() #954 Body Start
STORE D2 0.0016; if() #954 Body End
PUSHR D4; if() #953 Body End
LOAD D2 0.0048; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0039
MULTV D2 10
PUSHR D2
LOAD D2 0.0038
MULTV D2 10
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.9715; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
LOAD D2 0.0018; if() #955 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 945 ==; Test 'if'
PUSHR D4; if() #955 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #955 Body End
LOAD D2 0.0009; if() #532 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 954 ==; Test 'if'
LOAD D2 0.0009; if() #532 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 3568; if() #532 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #956 Test AND if() #532 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
SETV D2 1; if() #956 Body Start
STORE D2 0.0003; if() #956 Body End
GOTO 3568; if() #532 Else End AND if() #531 Body End
LOAD D2 0.0027; if() #533 Test AND if() #531 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1069 ==; Test 'if'
PUSHR D4; if() #533 Body Start
LOAD D2 0.0008; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0008
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.9715; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
LOAD D2 0.0018; if() #957 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1004 ==; Test 'if'
PUSHR D4; if() #957 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #957 Body End
LOAD D2 0.0009; if() #534 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1013 ==; Test 'if'
LOAD D2 0.0009; if() #534 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 1021; if() #534 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #958 Test AND if() #534 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1021 ==; Test 'if'
SETV D2 1; if() #958 Body Start
STORE D2 0.0003; if() #958 Body End
LOAD D2 0.0010; if() #534 Else End
ADDV D2 1
STORE D2 0.0010
LOAD D2 0.0010; if() #959 Test
COMPAREV D2 80
GOTOCMP 1033 <=
SETV D3 10; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 1033 !=
SETV D2 1
GOTO 1034
SETV D2 0
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #959 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0008
SETV D2 0
STORE D2 0.0010
LOAD D2 0.0016; if() #960 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
SETV D2 1; if() #960 Body Start
STORE D2 0.0016; if() #960 Body End
GOTO 3568; if() #959 Body End AND if() #533 Body End
LOAD D2 0.0027; if() #535 Test AND if() #533 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1283 ==; Test 'if'
LOAD D2 0.0035; if() #535 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
MULTV D2 0.0010
STORE D2 0.0001
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
MULTV D2 0.0100
STORE D2 0
PUSHR D4
LOAD D2 0.0039; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0038; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
LOAD D2 0.0039; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0038
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0039; if() #961 Test
COMPAREV D2 0
GOTOCMP 1169 >=
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1182 ==
LOAD D2 0.0039
COMPAREV D2 0
GOTOCMP 1180 <=
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1182 ==
SETV D2 0
GOTO 1183
SETV D2 1
COMPAREV D2 0
GOTOCMP 1195 ==; Test 'if'
LOAD D2 0.0039; if() #961 Body Start
SUBV2 0 D2
STORE D2 0.0039
LOAD D2 0.0016; if() #962 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1195 ==; Test 'if'
SETV D2 1; if() #962 Body Start
STORE D2 0.0016; if() #962 Body End
LOAD D2 0.0038; if() #961 Body End AND if() #963 Test
COMPAREV D2 0
GOTOCMP 1206 >=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1218 ==
LOAD D2 0.0038
COMPAREV D2 0
GOTOCMP 1216 <=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1218 ==
SETV D2 0
GOTO 1219
SETV D2 1
COMPAREV D2 0
GOTOCMP 1231 ==; Test 'if'
LOAD D2 0.0038; if() #963 Body Start
SUBV2 0 D2
STORE D2 0.0038
LOAD D2 0.0016; if() #964 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1231 ==; Test 'if'
SETV D2 1; if() #964 Body Start
STORE D2 0.0016; if() #964 Body End
PUSHR D4; if() #963 Body End
LOAD D2 0.0048; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0039
MULTV D2 10
PUSHR D2
LOAD D2 0.0038
MULTV D2 10
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.9715; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
LOAD D2 0.0018; if() #965 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1265 ==; Test 'if'
PUSHR D4; if() #965 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #965 Body End
LOAD D2 0.0009; if() #536 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1274 ==; Test 'if'
LOAD D2 0.0009; if() #536 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 3568; if() #536 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #966 Test AND if() #536 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
SETV D2 1; if() #966 Body Start
STORE D2 0.0003; if() #966 Body End
GOTO 3568; if() #536 Else End AND if() #535 Body End
LOAD D2 0.0027; if() #537 Test AND if() #535 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1495 ==; Test 'if'
PUSHR D4; if() #537 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 8
PUSHR D2
PUSHVARGV 0; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 8
PUSHVARGV 16; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0035; if() #538 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1351 ==; Test 'if'
PUSHARGSR D4 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND if() #538 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV -30; UsrFunc[int Rand(int, int)] Params Start
PUSHV 30; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0008
GOTO 1391; if() #538 Body End
PUSHARGSR D4 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND if() #538 Else Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int Rand(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCHOMING; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0008; if() #538 Else End
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
SETR D2 GD5; while() #10 Test
COMPAREV D2 0
GOTOCMP 1403 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 1403 >
SETV D2 0
GOTO 1404
SETV D2 1
COMPAREV D2 0
GOTOCMP 1453 ==; Test 'while'
PUSHR D4; while() #10 Body Start
LOAD D2 0.0048; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0008
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.9715; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0018; if() #967 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1443 ==; Test 'if'
PUSHR D4; if() #967 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #967 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #10 Body End
GOTO 1395; while() #10 End
LOAD D2 0.0007; if() #968 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1461 ==; Test 'if'
LOAD D2 0.0007; if() #968 Body Start
SUBV D2 1
STORE D2 0.0007; if() #968 Body End
LOAD D2 0.0007; if() #969 Test
COMPAREV D2 0
GOTOCMP 1479 <=
LOAD D2 0.0035; InlineFunc[int Ceiling(int)] Params Start AND InlineFunc[int Max(int, int)] Params Start AND InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.5000; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
PUSHVARGR D2
PUSHVARGV 2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 1479 ==
SETV D2 0
GOTO 1480
SETV D2 1
COMPAREV D2 0
GOTOCMP 1489 ==; Test 'if'
SETV D2 1; if() #969 Body Start
STORE D2 0.0003
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0007; if() #969 Body End
LOAD D2 0.0003; unless() #970 Test
COMPAREV D2 0
GOTOCMP 3568 !=; Test 'unless'
SETV D2 1; unless() #970 Body Start
STORE D2 0.0016; unless() #970 Body End
GOTO 3568; if() #537 Body End
LOAD D2 0.0027; if() #539 Test AND if() #537 Else Start
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1572 ==; Test 'if'
PUSHR D4; if() #539 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 8
PUSHR D2
PUSHVARGV 0; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 8
PUSHVARGV 16; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 4.5789; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
POP D4
LOAD D2 0.0007; if() #971 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1538 ==; Test 'if'
LOAD D2 0.0007; if() #971 Body Start
SUBV D2 1
STORE D2 0.0007; if() #971 Body End
LOAD D2 0.0007; if() #972 Test
COMPAREV D2 0
GOTOCMP 1556 <=
LOAD D2 0.0035; InlineFunc[int Ceiling(int)] Params Start AND InlineFunc[int Max(int, int)] Params Start AND InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.5000; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
PUSHVARGR D2
PUSHVARGV 2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 1556 ==
SETV D2 0
GOTO 1557
SETV D2 1
COMPAREV D2 0
GOTOCMP 1566 ==; Test 'if'
SETV D2 1; if() #972 Body Start
STORE D2 0.0003
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0007; if() #972 Body End
LOAD D2 0.0003; unless() #973 Test
COMPAREV D2 0
GOTOCMP 3568 !=; Test 'unless'
SETV D2 1; unless() #973 Body Start
STORE D2 0.0016; unless() #973 Body End
GOTO 3568; if() #539 Body End
LOAD D2 0.0027; if() #540 Test AND if() #539 Else Start
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1827 ==; Test 'if'
PUSHARGSR D4 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND if() #540 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int Rand(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCHALTRATE; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0008
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0035; if() #541 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1630 ==; Test 'if'
SETV D2 2.6000; if() #541 Body Start
SETR GD5 D2
GOTO 1644; if() #541 Body End
LOAD D2 0.0035; if() #541 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
MULTV D2 0.0100
SETV D2 0.0100
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
POP D3
MULTR D2 D3
SETR GD5 D2; if() #541 Else End
LOAD D2 0.0035; if() #974 Test
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1691 ==; Test 'if'
SETR D2 GD5; if() #974 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.0100
SETV D2 0.0100
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 0
PUSHV 80; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
MULTR D2 D3
STORE D2 0.0045
SETR D2 GD5
PUSHR D2
PUSHR D4
PUSHV -100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 100; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
MULTV D2 0.0100
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD5 D2; if() #974 Body End
SETR D2 GD5; while() #11 Test
COMPAREV D2 0
GOTOCMP 1699 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 1699 >
SETV D2 0
GOTO 1700
SETV D2 1
COMPAREV D2 0
GOTOCMP 1821 ==; Test 'while'
PUSHR D4; while() #11 Body Start
LOAD D2 0.0048; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0008
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.9715; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0018; if() #975 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1739 ==; Test 'if'
PUSHR D4; if() #975 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #975 Body End
LOAD D2 0.0009; if() #542 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1748 ==; Test 'if'
LOAD D2 0.0009; if() #542 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 1756; if() #542 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #976 Test AND if() #542 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1756 ==; Test 'if'
SETV D2 1; if() #976 Body Start
STORE D2 0.0003; if() #976 Body End
PUSHR D4; if() #542 Else End
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4
LOAD D2 0.0003; if() #977 Test
COMPAREV D2 0
GOTOCMP 1691 ==; Test 'if'
SETR D2 GD3; while() #12 Test AND if() #977 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1691 ==; Test 'while'
PUSHR D4; while() #12 Body Start
LOAD D2 0.0048; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0008
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.9715; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0018; if() #978 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1810 ==; Test 'if'
PUSHR D4; if() #978 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #978 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #12 Body End
GOTO 1768; while() #12 End
GOTO 1691; if() #977 Body End AND while() #11 Body End AND while() #11 End
LOAD D2 0.0003; unless() #979 Test
COMPAREV D2 0
GOTOCMP 3568 !=; Test 'unless'
SETV D2 1; unless() #979 Body Start
STORE D2 0.0016; unless() #979 Body End
GOTO 3568; if() #540 Body End
LOAD D2 0.0027; if() #543 Test AND if() #540 Else Start
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2143 ==; Test 'if'
LOAD D2 0.0035; if() #544 Test AND if() #543 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
GOTOCMP 1871 ==
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
POP D3
COMPARER D3 D2
GOTOCMP 1871 <
SETV D2 0
GOTO 1872
SETV D2 1
COMPAREV D2 0
GOTOCMP 2037 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #544 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETR D2 GD1
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0041
SETR D2 GD2
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
LOAD D2 0.0010; if() #545 Test
COMPAREV D2 0
GOTOCMP 1927 <=
LOAD D2 0.0008
COMPAREV D2 -1000
GOTOCMP 1927 ==
SETV D2 1
GOTO 1928
SETV D2 0
COMPAREV D2 0
GOTOCMP 1956 ==; Test 'if'
LOAD D2 0.0010; if() #545 Body Start
SUBV D2 1
STORE D2 0.0010
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0008
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 4.2408; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0008; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
GOTO 2112; if() #545 Body End
PUSHR D4; if() #546 Test AND if() #545 Else Start
LOAD D2 0.0048; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0040
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 4.0785; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2002 ==; Test 'if'
LOAD D2 0.0010; if() #980 Test AND if() #546 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1977 ==; Test 'if'
LOAD D2 0.0010; if() #980 Body Start
SUBV D2 1
STORE D2 0.0010; if() #980 Body End
SETV D2 -1000
STORE D2 0.0008
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 4.2408; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
GOTO 2112; if() #546 Body End
LOAD D2 0.0043; InlineFunc[int WrapDegrees(int)] Params Start AND if() #546 Else Start
PUSHR D2
PUSHVARGV -140; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 140; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0008
LOAD D2 0.0035; InlineFunc[int Floor(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
MULTV D2 0.0100
DIVV2 32 D2
SETV D2 32
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
MULTV D2 0.0100
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0010
LOAD D2 0.0016; if() #981 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2112 ==; Test 'if'
SETV D2 1; if() #981 Body Start
STORE D2 0.0016; if() #981 Body End
GOTO 2112; if() #546 Else End AND if() #545 Else End AND if() #544 Body End
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #982 Test AND if() #544 Else Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
ADDV D2 32
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2112 ==; Test 'if'
PUSHR D4; if() #982 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #982 Body End
LOAD D2 0.0018; if() #544 Else End AND if() #983 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2125 ==; Test 'if'
PUSHR D4; if() #983 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #983 Body End
LOAD D2 0.0009; if() #547 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2134 ==; Test 'if'
LOAD D2 0.0009; if() #547 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 3568; if() #547 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #984 Test AND if() #547 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
SETV D2 1; if() #984 Body Start
STORE D2 0.0003; if() #984 Body End
GOTO 3568; if() #547 Else End AND if() #543 Body End
LOAD D2 0.0027; if() #548 Test AND if() #543 Else Start
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2519 ==; Test 'if'
LOAD D2 0.0006; if() #985 Test AND if() #548 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2178 ==; Test 'if'
PUSHR D4; if() #985 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 4.2434; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETR D2 GD4
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2; if() #985 Body End
PUSHR D4; unless() #986 Test
LOAD D2 0.0006; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2468 !=; Test 'unless'
LOAD D2 0.0035; if() #549 Test AND unless() #986 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2258 ==; Test 'if'
LOAD D2 0.0006; if() #550 Test AND if() #549 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2213 ==; Test 'if'
SETV D2 3; if() #550 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2461; if() #550 Body End
LOAD D2 0.0006; if() #551 Test AND if() #550 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2228 ==; Test 'if'
SETV D2 2; if() #551 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2461; if() #551 Body End
LOAD D2 0.0006; if() #552 Test AND if() #551 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2243 ==; Test 'if'
SETV D2 0; if() #552 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2461; if() #552 Body End
LOAD D2 0.0006; if() #987 Test AND if() #552 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2461 ==; Test 'if'
SETV D2 1; if() #987 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #987 Body End
GOTO 2461; if() #552 Else End AND if() #551 Else End AND if() #550 Else End AND if() #549 Body End
LOAD D2 0.0035; if() #553 Test AND if() #549 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2326 ==; Test 'if'
LOAD D2 0.0006; if() #554 Test AND if() #553 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2281 ==; Test 'if'
SETV D2 2; if() #554 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2461; if() #554 Body End
LOAD D2 0.0006; if() #555 Test AND if() #554 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2296 ==; Test 'if'
SETV D2 3; if() #555 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2461; if() #555 Body End
LOAD D2 0.0006; if() #556 Test AND if() #555 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2311 ==; Test 'if'
SETV D2 1; if() #556 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2461; if() #556 Body End
LOAD D2 0.0006; if() #988 Test AND if() #556 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2461 ==; Test 'if'
SETV D2 0; if() #988 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #988 Body End
GOTO 2461; if() #556 Else End AND if() #555 Else End AND if() #554 Else End AND if() #553 Body End
LOAD D2 0.0035; if() #557 Test AND if() #553 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2394 ==; Test 'if'
LOAD D2 0.0006; if() #558 Test AND if() #557 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2349 ==; Test 'if'
SETV D2 1; if() #558 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2461; if() #558 Body End
LOAD D2 0.0006; if() #559 Test AND if() #558 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2364 ==; Test 'if'
SETV D2 0; if() #559 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2461; if() #559 Body End
LOAD D2 0.0006; if() #560 Test AND if() #559 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2379 ==; Test 'if'
SETV D2 3; if() #560 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2461; if() #560 Body End
LOAD D2 0.0006; if() #989 Test AND if() #560 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2461 ==; Test 'if'
SETV D2 2; if() #989 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #989 Body End
GOTO 2461; if() #560 Else End AND if() #559 Else End AND if() #558 Else End AND if() #557 Body End
LOAD D2 0.0006; if() #561 Test AND if() #557 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2411 ==; Test 'if'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND if() #561 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2461; if() #561 Body End
LOAD D2 0.0006; if() #562 Test AND if() #561 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2428 ==; Test 'if'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND if() #562 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2461; if() #562 Body End
LOAD D2 0.0006; if() #563 Test AND if() #562 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2445 ==; Test 'if'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND if() #563 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2461; if() #563 Body End
LOAD D2 0.0006; if() #990 Test AND if() #563 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2461 ==; Test 'if'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND if() #990 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #990 Body End
LOAD D2 0.0016; if() #563 Else End AND if() #562 Else End AND if() #561 Else End AND if() #557 Else End AND if() #553 Else End AND if() #549 Else End AND if() #991 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2468 ==; Test 'if'
SETV D2 1; if() #991 Body Start
STORE D2 0.0016; if() #991 Body End
LOAD D2 0.0006; unless() #986 Body End
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR GD4 D2
LOAD D2 0.0018; if() #992 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2486 ==; Test 'if'
PUSHR D4; if() #992 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #992 Body End
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.8699; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
LOAD D2 0.0009; if() #564 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2510 ==; Test 'if'
LOAD D2 0.0009; if() #564 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 3568; if() #564 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #993 Test AND if() #564 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
SETV D2 1; if() #993 Body Start
STORE D2 0.0003; if() #993 Body End
GOTO 3568; if() #564 Else End AND if() #548 Body End
LOAD D2 0.0027; if() #565 Test AND if() #548 Else Start
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2781 ==; Test 'if'
LOAD D2 0.0006; if() #994 Test AND if() #565 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2559 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #994 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 4.2434; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2; if() #994 Body End
LOAD D2 0.0010; if() #566 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2568 ==; Test 'if'
LOAD D2 0.0010; if() #566 Body Start
SUBV D2 1
STORE D2 0.0010
GOTO 2753; if() #566 Body End
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #566 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHVARGR NPCRATE; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0047
LOAD D2 0.0047; InlineFunc[int Rand(int)] Params Start AND if() #995 Test
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2619 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #995 Body Start AND UsrFunc[int AngleDir4(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0761; UsrFunc[int AngleDir4(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #995 Body End
PUSHARGSR D4 0.0002; unless() #996 Test AND UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
LOAD D2 0.0006; UsrFunc[int EZB_DirAngle(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int EZB_DirAngle(int)] Params End
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 4.0494; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2645 !=; Test 'unless'
PUSHR D4; unless() #996 Body Start
LOAD D2 0.0006; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 3.1136; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; unless() #996 Body End
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0046
SETV D2 0; for() #255 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #255 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2708 ==; for() #255 TestFail?
PUSHR D4; for() #255 Body Start
LOAD D2 0.0046; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.8699; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 4.2434; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0018; if() #997 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2695 ==; Test 'if'
PUSHR D4; if() #997 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #997 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #255 Body End
LOAD D2 0.0047; for() #255 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 2652; for() #255 End
LOAD D2 0.0007; if() #998 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2716 ==; Test 'if'
LOAD D2 0.0007; if() #998 Body Start
SUBV D2 1
STORE D2 0.0007; if() #998 Body End
LOAD D2 0.0007; if() #999 Test
COMPAREV D2 0
GOTOCMP 2725 >
SETV D3 2; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 2725 !=
SETV D2 1
GOTO 2726
SETV D2 0
COMPAREV D2 0
GOTOCMP 2735 ==; Test 'if'
SETV D2 1; if() #999 Body Start
STORE D2 0.0003
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0007; if() #999 Body End
LOAD D2 0.0003; unless() #1000 Test
COMPAREV D2 0
GOTOCMP 2740 !=; Test 'unless'
SETV D2 1; unless() #1000 Body Start
STORE D2 0.0016; unless() #1000 Body End
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0035; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D3 NPCHOMING; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0010; if() #566 Else End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 4.2434; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0018; if() #1001 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
PUSHR D4; if() #1001 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1001 Body End
GOTO 3568; if() #565 Body End
LOAD D2 0.0027; if() #567 Test AND if() #565 Else Start
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3043 ==; Test 'if'
LOAD D2 0.0006; if() #1002 Test AND if() #567 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2821 ==; Test 'if'
SETV D3 8; InlineFunc[int Rand(int)] Params AND if() #1002 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 4.2434; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2; if() #1002 Body End
LOAD D2 0.0010; if() #568 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2830 ==; Test 'if'
LOAD D2 0.0010; if() #568 Body Start
SUBV D2 1
STORE D2 0.0010
GOTO 3015; if() #568 Body End
SETV D3 8; InlineFunc[int Rand(int)] Params AND if() #568 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHVARGR NPCRATE; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0047
LOAD D2 0.0047; InlineFunc[int Rand(int)] Params Start AND if() #1003 Test
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2881 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #1003 Body Start AND UsrFunc[int AngleDir8(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0807; UsrFunc[int AngleDir8(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1003 Body End
PUSHARGSR D4 0.0002; unless() #1004 Test AND UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
LOAD D2 0.0006; UsrFunc[int EZB_DirAngle(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int EZB_DirAngle(int)] Params End
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 4.0494; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2907 !=; Test 'unless'
PUSHR D4; unless() #1004 Body Start
LOAD D2 0.0006; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 3.1136; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; unless() #1004 Body End
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0046
SETV D2 0; for() #256 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #256 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2970 ==; for() #256 TestFail?
PUSHR D4; for() #256 Body Start
LOAD D2 0.0046; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.8699; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 4.2434; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0018; if() #1005 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2957 ==; Test 'if'
PUSHR D4; if() #1005 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1005 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #256 Body End
LOAD D2 0.0047; for() #256 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 2914; for() #256 End
LOAD D2 0.0007; if() #1006 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2978 ==; Test 'if'
LOAD D2 0.0007; if() #1006 Body Start
SUBV D2 1
STORE D2 0.0007; if() #1006 Body End
LOAD D2 0.0007; if() #1007 Test
COMPAREV D2 0
GOTOCMP 2987 >
SETV D3 2; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 2987 !=
SETV D2 1
GOTO 2988
SETV D2 0
COMPAREV D2 0
GOTOCMP 2997 ==; Test 'if'
SETV D2 1; if() #1007 Body Start
STORE D2 0.0003
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0007; if() #1007 Body End
LOAD D2 0.0003; unless() #1008 Test
COMPAREV D2 0
GOTOCMP 3002 !=; Test 'unless'
SETV D2 1; unless() #1008 Body Start
STORE D2 0.0016; unless() #1008 Body End
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0035; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D3 NPCHOMING; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0010; if() #568 Else End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 4.2434; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0018; if() #1009 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
PUSHR D4; if() #1009 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1009 Body End
GOTO 3568; if() #567 Body End
LOAD D2 0.0027; if() #569 Test AND if() #567 Else Start
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3122 ==; Test 'if'
PUSHR D4; if() #569 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 8
PUSHR D2
PUSHVARGV 0; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 4
PUSHVARGV 8; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHARGSV -1000 0.0002
PUSHV 4; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 4.5803; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4
LOAD D2 0.0007; if() #1010 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3088 ==; Test 'if'
LOAD D2 0.0007; if() #1010 Body Start
SUBV D2 1
STORE D2 0.0007; if() #1010 Body End
LOAD D2 0.0007; if() #1011 Test
COMPAREV D2 0
GOTOCMP 3106 <=
LOAD D2 0.0035; InlineFunc[int Ceiling(int)] Params Start AND InlineFunc[int Max(int, int)] Params Start AND InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.5000; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
PUSHVARGR D2
PUSHVARGV 2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 3106 ==
SETV D2 0
GOTO 3107
SETV D2 1
COMPAREV D2 0
GOTOCMP 3116 ==; Test 'if'
SETV D2 1; if() #1011 Body Start
STORE D2 0.0003
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0007; if() #1011 Body End
LOAD D2 0.0003; unless() #1012 Test
COMPAREV D2 0
GOTOCMP 3568 !=; Test 'unless'
SETV D2 1; unless() #1012 Body Start
STORE D2 0.0016; unless() #1012 Body End
GOTO 3568; if() #569 Body End
LOAD D2 0.0027; if() #570 Test AND if() #569 Else Start
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3535 ==; Test 'if'
LOAD D2 0.0006; if() #1013 Test AND if() #570 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3197 ==; Test 'if'
SETV D2 1; if() #1013 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2
LOAD D2 0.0035; if() #571 Test
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3156 ==; Test 'if'
SETV D2 1; if() #571 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
GOTO 3181; if() #571 Body End
LOAD D2 0.0035; if() #572 Test AND if() #571 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3171 ==; Test 'if'
SETV D2 2; if() #572 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
GOTO 3181; if() #572 Body End
PUSHR D4; if() #572 Else Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2; if() #572 Else End
PUSHR D4; if() #571 Else End
LOAD D2 0.0048; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 4.2434; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETR D2 GD4
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #1013 Body End
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0006; if() #1014 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 3481 ==; Test 'if'
SETV D2 0; for() #257 setup AND if() #1014 Body Start
STORE D2 0.0047
LOAD D2 0.0047; for() #257 LoopTest
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3481 ==; for() #257 TestFail?
LOAD D2 0.0006; if() #573 Test AND for() #257 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3331 ==; Test 'if'
PUSHR D4; if() #573 Body Start
LOAD D2 0.0006; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 4.6272; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
STORE D2 0.0046
PUSHR D4; if() #1015 Test
LOAD D2 0.0046; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3418 ==; Test 'if'
SETR D2 GD1; if() #1015 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int EZB_DirX(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirX(int, int)] Params End
CALLFUNC 4.1145; UsrFunc[int EZB_DirX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0041
SETR D2 GD2
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int EZB_DirY(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirY(int, int)] Params End
CALLFUNC 4.1182; UsrFunc[int EZB_DirY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
PUSHR D4; unless() #1016 Test
LOAD D2 0.0041; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
PUSHR D4
LOAD D2 0.0006; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 3.1136; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params End
CALLFUNC 4.0570; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3418 !=; Test 'unless'
LOAD D2 0.0046; unless() #1016 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; unless() #1016 Body End
GOTO 3418; if() #1015 Body End AND if() #573 Body End
PUSHR D4; if() #573 Else Start
LOAD D2 0.0006; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 0; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 4.6272; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
STORE D2 0.0046
PUSHR D4; if() #1017 Test
LOAD D2 0.0046; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3418 ==; Test 'if'
SETR D2 GD1; if() #1017 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int EZB_DirX(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirX(int, int)] Params End
CALLFUNC 4.1145; UsrFunc[int EZB_DirX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0041
SETR D2 GD2
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int EZB_DirY(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirY(int, int)] Params End
CALLFUNC 4.1182; UsrFunc[int EZB_DirY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
PUSHR D4; unless() #1018 Test
LOAD D2 0.0041; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
PUSHR D4
LOAD D2 0.0006; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 3.1136; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params End
CALLFUNC 4.0570; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3418 !=; Test 'unless'
LOAD D2 0.0046; unless() #1018 Body Start
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; unless() #1018 Body End
PUSHR D4; if() #1017 Body End AND if() #573 Else End AND unless() #1019 Test
LOAD D2 0.0006; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3467 !=; Test 'unless'
LOAD D2 0.0006; if() #574 Test AND unless() #1019 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3453 ==; Test 'if'
PUSHR D4; if() #574 Body Start
LOAD D2 0.0006; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 0; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 4.6272; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
GOTO 3467; if() #574 Body End
PUSHR D4; if() #574 Else Start
LOAD D2 0.0006; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 4.6272; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #574 Else End
PUSHR D4; unless() #1019 Body End
LOAD D2 0.0006; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.8699; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4; for() #257 Body End
LOAD D2 0.0047; for() #257 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 3224; for() #257 End
LOAD D2 0.0006; if() #1014 Body End
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0006; InlineFunc[int Floor(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 2
SETR GD4 D2
LOAD D2 0.0018; if() #1020 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3517 ==; Test 'if'
PUSHR D4; if() #1020 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1020 Body End
LOAD D2 0.0009; if() #575 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3526 ==; Test 'if'
LOAD D2 0.0009; if() #575 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 3568; if() #575 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #1021 Test AND if() #575 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
SETV D2 1; if() #1021 Body Start
STORE D2 0.0003; if() #1021 Body End
GOTO 3568; if() #575 Else End AND if() #570 Body End
LOAD D2 0.0027; if() #1022 Test AND if() #570 Else Start
COMPAREV D2 16
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
PUSHR D4; if() #1022 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FishWizardUpdate(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void EZB_FishWizardUpdate(ffc, npc, int, int)] Params End
CALLFUNC 4.3248; UsrFunc[void EZB_FishWizardUpdate(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0006; if() #576 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
COMPAREV D2 0
GOTOCMP 3560 ==; Test 'if'
SETV D2 1; if() #576 Body Start
STORE D2 0.0003
GOTO 3568; if() #576 Body End
LOAD D2 0.0006; if() #1023 Test AND if() #576 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 3
COMPAREV D2 0
GOTOCMP 3568 ==; Test 'if'
SETV D2 1; if() #1023 Body Start
STORE D2 0.0016; if() #1023 Body End
LOAD D2 0.0016; if() #576 Else End AND if() #1022 Body End AND if() #570 Else End AND if() #569 Else End AND if() #567 Else End AND if() #565 Else End AND if() #548 Else End AND if() #543 Else End AND if() #540 Else End AND if() #539 Else End AND if() #537 Else End AND if() #535 Else End AND if() #533 Else End AND if() #531 Else End AND if() #529 Else End AND if() #527 Else End AND if() #525 Else End AND if() #524 Else End AND if() #1024 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3811 ==; Test 'if'
LOAD D2 0.0017; if() #577 Test AND if() #1024 Body Start
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3608 ==; Test 'if'
PUSHR D4; if() #577 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 3809; if() #577 Body End
LOAD D2 0.0017; if() #578 Test AND if() #577 Else Start
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3661 ==; Test 'if'
PUSHR D4; if() #578 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 3809; if() #578 Body End
LOAD D2 0.0017; if() #579 Test AND if() #578 Else Start
COMPAREV D2 46
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3711 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1025 Test AND if() #579 Body Start
COMPAREV D2 40
GOTOCMP 3678 >=
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 4.5304; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 3678 >=
SETV D2 1
GOTO 3679
SETV D2 0
COMPAREV D2 0
GOTOCMP 3809 ==; Test 'if'
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params AND if() #1025 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0022; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.1983; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0033
PUSHR D4
LOAD D2 0.0033; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.9623; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4; if() #1025 Body End
GOTO 3809; if() #579 Body End
LOAD D2 0.0017; if() #580 Test AND if() #579 Else Start
COMPAREV D2 47
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3760 ==; Test 'if'
SETV D2 0; for() #258 setup AND if() #580 Body Start
STORE D2 0.0047
LOAD D2 0.0047; for() #258 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3809 ==; for() #258 TestFail?
PUSHR D4; for() #258 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0047
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #258 Body End
LOAD D2 0.0047; for() #258 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 3718; for() #258 End
GOTO 3809; if() #580 Body End
LOAD D2 0.0017; if() #1026 Test AND if() #580 Else Start
COMPAREV D2 48
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3809 ==; Test 'if'
SETV D2 0; for() #259 setup AND if() #1026 Body Start
STORE D2 0.0047
LOAD D2 0.0047; for() #259 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3809 ==; for() #259 TestFail?
PUSHR D4; for() #259 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0047
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
ADDV D2 45
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #259 Body End
LOAD D2 0.0047; for() #259 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 3767; for() #259 End
SETV D2 -8; if() #1026 Body End AND if() #580 Else End AND if() #579 Else End AND if() #578 Else End AND if() #577 Else End
STORE D2 0.0016; if() #1024 Body End
LOAD D2 0.0016; if() #1027 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3819 ==; Test 'if'
LOAD D2 0.0016; if() #1027 Body Start
ADDV D2 1
STORE D2 0.0016; if() #1027 Body End
LOAD D2 0.0003; if() #1028 Test
COMPAREV D2 0
GOTOCMP 3836 ==
LOAD D2 0.0031
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
GOTOCMP 3834 !=
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 0
GOTOCMP 3836 ==
SETV D2 1
GOTO 3837
SETV D2 0
COMPAREV D2 0
GOTOCMP 20418 ==; Test 'if'
SETV D2 1; if() #1028 Body Start
PUSHR D2
LOAD D2 0.0028
SETR D0 D2
POP D2
WRITEPODARRAYVR 319 D2
STOREV 0 0.0001
LOAD D2 0.0031; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0047
LOAD D2 0.0031
PUSHR D2
LOAD D2 0.0047
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0018; if() #581 Test
ANDV D2 2048
COMPAREV D2 0
GOTOCMP 3885 ==; Test 'if'
LOAD D2 0.0031; if() #581 Body Start
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0031
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0004
GOTO 3922; if() #581 Body End
LOAD D2 0.0005; if() #1030 Test AND if(true) #1029 [Opt:AlwaysOn] AND if() #581 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
GOTOCMP 3899 !=
LOAD D2 0.0031
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
GOTOCMP 3899 <=
SETV D2 1
GOTO 3900
SETV D2 0
COMPAREV D2 0
GOTOCMP 3922 ==; Test 'if'
LOAD D2 0.0047; if() #1030 Body Start
ADDV D2 1
STORE D2 0.0047
LOAD D2 0.0047
PUSHR D2
LOAD D2 0.0031
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0047
LOAD D2 0.0031
PUSHR D2
LOAD D2 0.0047
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001; if() #1030 Body End
LOAD D2 0.0001; if() #581 Else End
STORE D2 0.0005
LOAD D2 0.0001; if() #1031 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4022 ==; Test 'if'
PUSHR D4; if() #1031 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 2
STORE D2 0.0045
LOAD D2 0.0011
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4; while() #13 Test
LOAD D2 0.0043; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 4.0494; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 4022 ==; Test 'while'
LOAD D2 0.0045; InlineFunc[int Min(int, int)] Params Start AND while() #13 Body Start
ADDV D2 0.2000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0045
PUSHR D4
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 4.6120; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #13 Body End
GOTO 3984; while() #13 End
LOAD D2 0.0001; if() #1031 Body End AND if() #1032 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4074 ==; Test 'if'
PUSHR D4; if() #1032 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1032 Body End
LOAD D2 0.0001; if() #1033 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4152 ==; Test 'if'
PUSHR D4; if() #1033 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1033 Body End
LOAD D2 0.0001; if() #1034 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4227 ==; Test 'if'
PUSHR D4; if() #1034 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #260 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #260 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4217 ==; for() #260 TestFail?
PUSHR D4; for() #260 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0047
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #260 Body End
LOAD D2 0.0047; for() #260 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 4169; for() #260 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1034 Body End
LOAD D2 0.0001; if() #1035 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4328 ==; Test 'if'
PUSHR D4; if() #1035 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #261 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #261 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4318 ==; for() #261 TestFail?
PUSHR D4; for() #261 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0047
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #261 Body End
LOAD D2 0.0047; for() #261 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 4252; for() #261 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1035 Body End
LOAD D2 0.0001; if() #1036 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4413 ==; Test 'if'
PUSHR D4; if() #1036 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #262 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #262 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4403 ==; for() #262 TestFail?
PUSHR D4; for() #262 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 350; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #262 Body End
LOAD D2 0.0047; for() #262 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 4359; for() #262 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1036 Body End
LOAD D2 0.0001; if() #1037 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4525 ==; Test 'if'
PUSHR D4; if() #1037 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #263 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #263 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4515 ==; for() #263 TestFail?
PUSHR D4; for() #263 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 350; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #263 Body End
LOAD D2 0.0047; for() #263 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 4471; for() #263 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1037 Body End
LOAD D2 0.0001; if() #1038 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4612 ==; Test 'if'
PUSHR D4; if() #1038 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #264 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #264 LoopTest
COMPAREV D2 24
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4612 ==; for() #264 TestFail?
PUSHR D4; for() #264 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[int Rand(int, int)] Params Start
SUBV2 -10 D2
PUSHR D2
LOAD D2 0.0047
ADDV D2 10
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #264 Body End
LOAD D2 0.0047; for() #264 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 4556; for() #264 End
LOAD D2 0.0001; if() #1038 Body End AND if() #1039 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4726 ==; Test 'if'
PUSHR D4; if() #1039 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #265 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #265 LoopTest
COMPAREV D2 24
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4726 ==; for() #265 TestFail?
PUSHR D4; for() #265 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[int Rand(int, int)] Params Start
SUBV2 -10 D2
PUSHR D2
LOAD D2 0.0047
ADDV D2 10
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #265 Body End
LOAD D2 0.0047; for() #265 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 4670; for() #265 End
LOAD D2 0.0001; if() #1039 Body End AND if() #1040 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4825 ==; Test 'if'
PUSHR D4; if() #1040 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0045
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0045
MULTV D2 75
SETV D2 75
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0043
SETV D2 0; for() #266 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #266 LoopTest
COMPAREV D2 7
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4815 ==; for() #266 TestFail?
PUSHR D4; for() #266 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0045
MULTV D2 25
POP D3
ADDR D2 D3
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #266 Body End
LOAD D2 0.0047; for() #266 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 4763; for() #266 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 48; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1040 Body End
LOAD D2 0.0001; if() #1041 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4950 ==; Test 'if'
PUSHR D4; if() #1041 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0045
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0045
MULTV D2 75
SETV D2 75
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0043
SETV D2 0; for() #267 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #267 LoopTest
COMPAREV D2 7
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4940 ==; for() #267 TestFail?
PUSHR D4; for() #267 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0045
MULTV D2 25
POP D3
ADDR D2 D3
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #267 Body End
LOAD D2 0.0047; for() #267 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 4888; for() #267 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 48; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1041 Body End
LOAD D2 0.0001; if() #1042 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5132 ==; Test 'if'
PUSHR D4; if() #1042 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
SUBV D2 45
STORE D2 0.0043
SETV D2 0; for() #268 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #268 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5122 ==; for() #268 TestFail?
SETV D2 -4; for() #269 setup AND for() #268 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #269 LoopTest
COMPAREV D2 4
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5051 ==; for() #269 TestFail?
PUSHR D4; for() #269 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #269 Body End
LOAD D2 0.0046; for() #269 LoopIncrement
ADDV D2 2
STORE D2 0.0046
GOTO 5006; for() #269 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 16; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -5; for() #270 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #270 LoopTest
COMPAREV D2 5
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5108 ==; for() #270 TestFail?
PUSHR D4; for() #270 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #270 Body End
LOAD D2 0.0046; for() #270 LoopIncrement
ADDV D2 2
STORE D2 0.0046
GOTO 5063; for() #270 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #268 Body End
LOAD D2 0.0047; for() #268 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 4999; for() #268 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1042 Body End
LOAD D2 0.0001; if() #1043 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5252 ==; Test 'if'
PUSHR D4; if() #1043 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0045
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0043
SETV D2 0; for() #271 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #271 LoopTest
COMPAREV D2 15
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5242 ==; for() #271 TestFail?
SETV D2 0; for() #272 setup AND for() #271 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #272 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5216 ==; for() #272 TestFail?
PUSHR D4; for() #272 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 72
SETV D2 72
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #272 Body End
LOAD D2 0.0046; for() #272 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5171; for() #272 End
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0045
MULTV D2 4
SETV D2 4
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #271 Body End
LOAD D2 0.0047; for() #271 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 5164; for() #271 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1043 Body End
LOAD D2 0.0001; if() #1044 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5356 ==; Test 'if'
PUSHR D4; if() #1044 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #273 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #273 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5346 ==; for() #273 TestFail?
SETV D3 360; InlineFunc[int Rand(int)] Params AND for() #273 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0043
SETV D2 0; for() #274 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #274 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5332 ==; for() #274 TestFail?
PUSHR D4; for() #274 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 36
SETV D2 36
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 180; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #274 Body End
LOAD D2 0.0046; for() #274 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5287; for() #274 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 45; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #273 Body End
LOAD D2 0.0047; for() #273 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 5277; for() #273 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1044 Body End
LOAD D2 0.0001; if() #1045 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5501 ==; Test 'if'
PUSHR D4; if() #1045 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #275 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #275 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5450 ==; for() #275 TestFail?
PUSHR D4; for() #275 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 8
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0029
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #275 Body End
LOAD D2 0.0047; for() #275 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 5406; for() #275 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #276 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #276 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5501 ==; for() #276 TestFail?
PUSHR D4; for() #276 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 8
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 20; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #276 Body End
LOAD D2 0.0047; for() #276 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 5454; for() #276 End
LOAD D2 0.0001; if() #1045 Body End AND if() #1046 Test
COMPAREV D2 16
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5648 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1046 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #277 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #277 LoopTest
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5595 ==; for() #277 TestFail?
PUSHR D4; for() #277 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 40
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0029
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #277 Body End
LOAD D2 0.0047; for() #277 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 5551; for() #277 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #278 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #278 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5648 ==; for() #278 TestFail?
PUSHR D4; for() #278 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 40
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2
LOAD D2 0.0029
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #278 Body End
LOAD D2 0.0047; for() #278 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 5599; for() #278 End
LOAD D2 0.0001; if() #1046 Body End AND if() #1047 Test
COMPAREV D2 17
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5965 ==; Test 'if'
PUSHR D4; if() #1047 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
LOAD D2 0.0013
MULTV D2 8
PUSHR D2
LOAD D2 0.0012
MULTV D2 8
POP D3
ADDR D2 D3
DIVV D2 2
STORE D2 0.0045
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #279 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #279 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5830 ==; for() #279 TestFail?
LOAD D2 0.0029; InlineFunc[int Choose(int)] Params Start AND for() #279 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
SETV D2 -2; for() #280 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #280 LoopTest
COMPAREV D2 2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5817 ==; for() #280 TestFail?
PUSHR D4; for() #280 Body Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0041
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 6
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 0
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #280 Body End
LOAD D2 0.0046; for() #280 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5726; for() #280 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #279 Body End
LOAD D2 0.0047; for() #279 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 5707; for() #279 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #281 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #281 LoopTest
COMPAREV D2 25
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5965 ==; for() #281 TestFail?
LOAD D2 0.0029; InlineFunc[int Choose(int)] Params Start AND for() #281 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
SETV D2 -2; for() #282 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #282 LoopTest
COMPAREV D2 2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5952 ==; for() #282 TestFail?
PUSHR D4; for() #282 Body Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0041
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 6
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 25; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #282 Body End
LOAD D2 0.0046; for() #282 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5858; for() #282 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #281 Body End
LOAD D2 0.0047; for() #281 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 5834; for() #281 End
LOAD D2 0.0001; if() #1047 Body End AND if() #1048 Test
COMPAREV D2 18
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6519 ==; Test 'if'
PUSHR D4; if() #1048 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0045
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
ADDV D2 45
STORE D2 0.0043
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #283 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #283 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6142 ==; for() #283 TestFail?
LOAD D2 0.0029; InlineFunc[int Choose(int)] Params Start AND for() #283 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1049 Test
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
SETV D2 88; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6080 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #1049 Body Start AND UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
PUSHV 88; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.8000
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #1049 Body End
SETV D2 0; for() #284 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #284 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6129 ==; for() #284 TestFail?
PUSHR D4; for() #284 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 0
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #284 Body End
LOAD D2 0.0046; for() #284 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6082; for() #284 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #283 Body End
LOAD D2 0.0047; for() #283 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 6020; for() #283 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #285 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #285 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6233 ==; for() #285 TestFail?
LOAD D2 0.0029; InlineFunc[int Choose(int)] Params Start AND for() #285 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
SETV D2 0; for() #286 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #286 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6220 ==; for() #286 TestFail?
PUSHR D4; for() #286 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #286 Body End
LOAD D2 0.0046; for() #286 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6170; for() #286 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #285 Body End
LOAD D2 0.0047; for() #285 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 6146; for() #285 End
SETV D2 0; for() #287 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #287 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6328 ==; for() #287 TestFail?
LOAD D2 0.0029; InlineFunc[int Choose(int)] Params Start AND for() #287 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
SETV D2 0; for() #288 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #288 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6309 ==; for() #288 TestFail?
PUSHR D4; for() #288 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #288 Body End
LOAD D2 0.0046; for() #288 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6259; for() #288 End
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0045
POP D3
ADDR D2 D3
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #287 Body End
LOAD D2 0.0047; for() #287 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 6235; for() #287 End
SETV D2 0; for() #289 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #289 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6424 ==; for() #289 TestFail?
LOAD D2 0.0029; InlineFunc[int Choose(int)] Params Start AND for() #289 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
SETV D2 0; for() #290 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #290 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6404 ==; for() #290 TestFail?
PUSHR D4; for() #290 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 120; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #290 Body End
LOAD D2 0.0046; for() #290 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6354; for() #290 End
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0045
MULTV D2 1.2500
POP D3
ADDR D2 D3
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #289 Body End
LOAD D2 0.0047; for() #289 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 6330; for() #289 End
SETV D2 0; for() #291 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #291 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6519 ==; for() #291 TestFail?
LOAD D2 0.0029; InlineFunc[int Choose(int)] Params Start AND for() #291 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
SETV D2 0; for() #292 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #292 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6500 ==; for() #292 TestFail?
PUSHR D4; for() #292 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #292 Body End
LOAD D2 0.0046; for() #292 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6450; for() #292 End
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0045
POP D3
ADDR D2 D3
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #291 Body End
LOAD D2 0.0047; for() #291 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 6426; for() #291 End
LOAD D2 0.0001; if() #1048 Body End AND if() #1050 Test
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6587 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1051 Test AND if() #1050 Body Start
COMPAREV D2 40
GOTOCMP 6536 >=
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 4.5304; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 6536 >=
SETV D2 1
GOTO 6537
SETV D2 0
COMPAREV D2 0
GOTOCMP 6587 ==; Test 'if'
PUSHR D4; if() #1051 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0022; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.1983; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0033
PUSHR D4
LOAD D2 0.0033; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.9623; UsrFunc[void EZB_AddSummon(npc, npc)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1051 Body End
LOAD D2 0.0001; if() #1050 Body End AND if() #1052 Test
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6683 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1053 Test AND if() #1052 Body Start
COMPAREV D2 40
GOTOCMP 6604 >=
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 4.5304; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 6604 >=
SETV D2 1
GOTO 6605
SETV D2 0
COMPAREV D2 0
GOTOCMP 6683 ==; Test 'if'
PUSHR D4; if() #1053 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #293 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #293 LoopTest
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6673 ==; for() #293 TestFail?
PUSHR D4; for() #293 Body Start
LOAD D2 0.0022; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.1983; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0033
PUSHR D4
LOAD D2 0.0033; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.9623; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4; for() #293 Body End
LOAD D2 0.0047; for() #293 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 6621; for() #293 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1053 Body End
LOAD D2 0.0001; if() #1052 Body End AND if() #1054 Test
COMPAREV D2 21
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6779 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1055 Test AND if() #1054 Body Start
COMPAREV D2 40
GOTOCMP 6700 >=
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 4.5304; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 6700 >=
SETV D2 1
GOTO 6701
SETV D2 0
COMPAREV D2 0
GOTOCMP 6779 ==; Test 'if'
PUSHR D4; if() #1055 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #294 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #294 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6769 ==; for() #294 TestFail?
PUSHR D4; for() #294 Body Start
LOAD D2 0.0022; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.1983; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0033
PUSHR D4
LOAD D2 0.0033; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.9623; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4; for() #294 Body End
LOAD D2 0.0047; for() #294 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 6717; for() #294 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1055 Body End
LOAD D2 0.0001; if() #1054 Body End AND if() #1056 Test
COMPAREV D2 22
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6866 ==; Test 'if'
PUSHR D4; if() #1056 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 100; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 3
PUSHV 0.0349
PUSHV 120; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1056 Body End
LOAD D2 0.0001; if() #1057 Test
COMPAREV D2 23
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6964 ==; Test 'if'
PUSHR D4; if() #1057 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #295 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #295 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6964 ==; for() #295 TestFail?
PUSHR D4; for() #295 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 200; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 25; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #295 Body End
LOAD D2 0.0047; for() #295 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 6891; for() #295 End
LOAD D2 0.0001; if() #1057 Body End AND if() #1058 Test
COMPAREV D2 24
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7054 ==; Test 'if'
PUSHR D4; if() #1058 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #296 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #296 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7054 ==; for() #296 TestFail?
PUSHR D4; for() #296 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 200; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 6; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #296 Body End
LOAD D2 0.0047; for() #296 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 6989; for() #296 End
LOAD D2 0.0001; if() #1058 Body End AND if() #1059 Test
COMPAREV D2 25
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7139 ==; Test 'if'
PUSHR D4; if() #1059 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #297 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #297 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7129 ==; for() #297 TestFail?
PUSHR D4; for() #297 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0047
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 200; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 4
PUSHV 1
PUSHV 30; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
POP D4; for() #297 Body End
LOAD D2 0.0047; for() #297 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 7079; for() #297 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1059 Body End
LOAD D2 0.0001; if() #1060 Test
COMPAREV D2 26
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7207 ==; Test 'if'
PUSHR D4; if() #1060 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #298 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #298 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7197 ==; for() #298 TestFail?
PUSHR D4; for() #298 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0047
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #298 Body End
LOAD D2 0.0047; for() #298 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 7156; for() #298 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1060 Body End
LOAD D2 0.0001; if() #1061 Test
COMPAREV D2 27
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7276 ==; Test 'if'
PUSHR D4; if() #1061 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #299 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #299 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7266 ==; for() #299 TestFail?
PUSHR D4; for() #299 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0047
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
ADDV D2 45
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #299 Body End
LOAD D2 0.0047; for() #299 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 7224; for() #299 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1061 Body End
LOAD D2 0.0001; if() #1062 Test
COMPAREV D2 28
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7344 ==; Test 'if'
PUSHR D4; if() #1062 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #300 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #300 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7334 ==; for() #300 TestFail?
PUSHR D4; for() #300 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0047
MULTV D2 45
SETV D2 45
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #300 Body End
LOAD D2 0.0047; for() #300 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 7293; for() #300 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1062 Body End
LOAD D2 0.0001; if() #1063 Test
COMPAREV D2 29
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7445 ==; Test 'if'
PUSHR D4; if() #1063 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0
STORE D2 0.0043
PUSHR D4; if() #1064 Test
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7370 ==; Test 'if'
SETV D2 180; if() #1064 Body Start
STORE D2 0.0043; if() #1064 Body End
SETV D2 0; for() #301 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #301 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7435 ==; for() #301 TestFail?
LOAD D2 0.0043; if() #582 Test AND for() #301 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7402 ==; Test 'if'
PUSHR D4; if() #582 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0
PUSHR D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 7421; if() #582 Body End
PUSHR D4; if() #582 Else Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 240
PUSHR D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; if() #582 Else End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #301 Body End
LOAD D2 0.0047; for() #301 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 7372; for() #301 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1063 Body End
LOAD D2 0.0001; if() #1065 Test
COMPAREV D2 30
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7624 ==; Test 'if'
PUSHR D4; if() #1065 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0045
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #302 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #302 LoopTest
COMPAREV D2 35
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7502 ==; for() #302 TestFail?
PUSHR D4; for() #302 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV -32
LOAD D2 0.0045
PUSHR D2
PUSHV 8
PUSHARGSV 0 0.0002
LOAD D2 0.0029
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 35; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #302 Body End
LOAD D2 0.0047; for() #302 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 7469; for() #302 End
SETV D2 0; for() #303 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #303 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7624 ==; for() #303 TestFail?
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params AND for() #303 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0045
STORE D2 0.0040
PUSHR D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0045
LOAD D2 0.0045; while() #14 Test
PUSHR D2
LOAD D2 0.0040
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 -40
GOTOCMP 7537 <=
LOAD D2 0.0045
PUSHR D2
LOAD D2 0.0040
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 40
GOTOCMP 7537 >=
SETV D2 1
GOTO 7538
SETV D2 0
COMPAREV D2 0
GOTOCMP 7547 ==; Test 'while'
PUSHR D4; while() #14 Body Start
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0045; while() #14 Body End
GOTO 7519; while() #14 End
SETV D2 0; for() #304 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #304 LoopTest
COMPAREV D2 35
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7620 ==; for() #304 TestFail?
LOAD D2 0.0047; if() #1066 Test AND for() #304 Body Start
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7579 ==; Test 'if'
PUSHR D4; if() #1066 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV -32
LOAD D2 0.0040
PUSHR D2
PUSHV 8
PUSHV 0
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 20; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; if() #1066 Body End
LOAD D2 0.0046; if() #1067 Test
COMPAREV D2 7
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7607 ==; Test 'if'
LOAD D2 0.0047; if() #1068 Test AND if() #1067 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7591 ==; Test 'if'
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params AND if() #1068 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1068 Body End
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV -32
LOAD D2 0.0045
PUSHR D2
PUSHV 8
PUSHARGSV 0 0.0002
LOAD D2 0.0029
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 7; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; if() #1067 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #304 Body End
LOAD D2 0.0047; for() #304 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 7549; for() #304 End
LOAD D2 0.0046; for() #303 Body End AND for() #303 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7504; for() #303 End
LOAD D2 0.0001; if() #1065 Body End AND if() #1069 Test
COMPAREV D2 31
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7887 ==; Test 'if'
PUSHR D4; if() #1069 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0
STORE D2 0.0045
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params AND while(true) #15 Body [Opt:AlwaysOn] Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #305 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #305 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7709 ==; for() #305 TestFail?
SETV D2 -1; for() #306 setup AND for() #305 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #306 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7696 ==; for() #306 TestFail?
PUSHR D4; for() #306 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0045
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -32
PUSHV 12
PUSHV 90
PUSHV 0
LOAD D2 0.0029
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #306 Body End
LOAD D2 0.0046; for() #306 LoopIncrement
ADDV D2 2
STORE D2 0.0046
GOTO 7652; for() #306 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #305 Body End
LOAD D2 0.0047; for() #305 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 7645; for() #305 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #307 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #307 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7780 ==; for() #307 TestFail?
SETV D2 -1; for() #308 setup AND for() #307 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #308 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7767 ==; for() #308 TestFail?
PUSHR D4; for() #308 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0045
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -32
PUSHV 12
PUSHV 90
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 20; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #308 Body End
LOAD D2 0.0046; for() #308 LoopIncrement
ADDV D2 2
STORE D2 0.0046
GOTO 7720; for() #308 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #307 Body End
LOAD D2 0.0047; for() #307 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 7713; for() #307 End
LOAD D2 0.0045
ADDV D2 1
STORE D2 0.0045
PUSHR D4; if() #1070 Test
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0045
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
MULTV D2 -1
POP D3
ADDR D2 D3
COMPAREV D2 16
GOTOCMP 7818 >=
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0045
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
COMPAREV D2 224
GOTOCMP 7823 >
LOAD D2 0.0045
COMPAREV D2 10
GOTOCMP 7823 >
SETV D2 0
GOTO 7824
SETV D2 1
COMPAREV D2 0
GOTOCMP 7887 !=; Test 'if' AND break 1; AND if() #1070 Body
LOAD D2 0.0045; if() #1071 Test
COMPAREV D2 2
GOTOCMP 7882 <=
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
SUBV D2 16
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0045
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
MULTV D2 -1
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 7882 <=
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
ADDV D2 16
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0045
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 7882 >=
SETV D2 1
GOTO 7883
SETV D2 0
COMPAREV D2 0
GOTOCMP 7641 ==; Test 'if'
GOTO 7887; break 1; AND if() #1071 Body
GOTO 7641; while(true) #15 Body [Opt:AlwaysOn] End AND while() #15 End
LOAD D2 0.0001; if() #1069 Body End AND if() #1072 Test
COMPAREV D2 32
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7989 ==; Test 'if'
PUSHR D4; if() #1072 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #309 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #309 LoopTest
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7979 ==; for() #309 TestFail?
PUSHR D4; for() #309 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
SUBV D2 20
PUSHR D2
LOAD D2 0.0047
MULTV D2 40
SETV D2 40
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #309 Body End
LOAD D2 0.0047; for() #309 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 7912; for() #309 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1072 Body End
LOAD D2 0.0001; if() #1073 Test
COMPAREV D2 33
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8090 ==; Test 'if'
PUSHR D4; if() #1073 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 1
STORE D2 0.0045
LOAD D2 0.0011
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #310 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #310 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8090 ==; for() #310 TestFail?
LOAD D2 0.0045; InlineFunc[int Min(int, int)] Params Start AND for() #310 Body Start
ADDV D2 0.5000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0045
PUSHR D4
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 4.6120; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #310 Body End
LOAD D2 0.0047; for() #310 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 8051; for() #310 End
LOAD D2 0.0001; if() #1073 Body End AND if() #1074 Test
COMPAREV D2 34
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8312 ==; Test 'if'
PUSHR D4; if() #1074 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 2
STORE D2 0.0045
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
STORE D2 0.0047
LOAD D2 0.0011
SETR GD10 D2
PUSHR D4; while() #16 Test
LOAD D2 0.0043; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 4.0494; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 8312 ==; Test 'while'
LOAD D2 0.0047; while() #16 Body Start
ADDV D2 1
STORE D2 0.0047
LOAD D2 0.0045; InlineFunc[int Min(int, int)] Params Start
ADDV D2 0.2000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0045
PUSHR D4
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0047; if() #1075 Test
MODV D2 4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8294 ==; Test 'if'
LOAD D2 0.0035; if() #583 Test AND if() #1075 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 140
GOTOCMP 8196 ==
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 139
GOTOCMP 8196 ==
SETV D2 0
GOTO 8197
SETV D2 1
COMPAREV D2 0
GOTOCMP 8247 ==; Test 'if'
PUSHR D4; if() #583 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 8294; if() #583 Body End
PUSHR D4; if() #583 Else Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; if() #583 Else End
PUSHR D4; if() #1075 Body End
LOAD D2 0.0048; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 4.6120; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #16 Body End
GOTO 8152; while() #16 End
LOAD D2 0.0001; if() #1074 Body End AND if() #1076 Test
COMPAREV D2 35
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8570 ==; Test 'if'
PUSHR D4; if() #1076 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 2
STORE D2 0.0045
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
STORE D2 0.0047
LOAD D2 0.0011
SETR GD10 D2
SETV D2 0; for() #311 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #311 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8415 ==; for() #311 TestFail?
LOAD D2 0.0045; InlineFunc[int Min(int, int)] Params Start AND for() #311 Body Start
ADDV D2 0.1000
PUSHVARGR D2
PUSHVARGV 4; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0045
PUSHR D4
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 4.6120; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #311 Body End
LOAD D2 0.0047; for() #311 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 8376; for() #311 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 2
STORE D2 0.0045
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
STORE D2 0.0047
LOAD D2 0.0011
SETR GD10 D2
SETV D2 0; for() #312 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #312 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8570 ==; for() #312 TestFail?
PUSHARGSR D4 0.0002; for() #312 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0046
LOAD D2 0.0047; if() #1077 Test
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8536 ==; Test 'if'
PUSHR D4; InlineFunc[int Abs(int)] Params Start AND if() #1078 Test AND if() #1077 Body Start
LOAD D2 0.0043; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.9686; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8536 ==; Test 'if'
LOAD D2 0.0043; InlineFunc[int WrapDegrees(int)] Params Start AND if() #1078 Body Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
LOAD D2 0.0043; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.9686; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0043; if() #1078 Body End
LOAD D2 0.0045; if() #1077 Body End AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 0.1000
PUSHVARGR D2
PUSHVARGV 4; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0045
PUSHR D4
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 4.6120; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #312 Body End
LOAD D2 0.0047; for() #312 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 8475; for() #312 End
LOAD D2 0.0001; if() #1076 Body End AND if() #1079 Test
COMPAREV D2 36
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8719 ==; Test 'if'
PUSHR D4; if() #1079 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 4.2408; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0042
SETV D2 2
STORE D2 0.0045
LOAD D2 0.0042; if() #584 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8665 ==; Test 'if'
SETV D2 0.5000; if() #584 Body Start
STORE D2 0.0045
GOTO 8691; if() #584 Body End
LOAD D2 0.0042; if() #585 Test AND if() #584 Else Start
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8673 ==; Test 'if'
SETV D2 1; if() #585 Body Start
STORE D2 0.0045
GOTO 8691; if() #585 Body End
LOAD D2 0.0042; if() #586 Test AND if() #585 Else Start
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8681 ==; Test 'if'
SETV D2 2; if() #586 Body Start
STORE D2 0.0045
GOTO 8691; if() #586 Body End
LOAD D2 0.0042; if() #587 Test AND if() #586 Else Start
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8689 ==; Test 'if'
SETV D2 3; if() #587 Body Start
STORE D2 0.0045
GOTO 8691; if() #587 Body End
SETV D2 4; if() #587 Else Start
STORE D2 0.0045; if() #587 Else End
SETR D2 GD5; if() #586 Else End AND if() #585 Else End AND if() #584 Else End AND while() #17 Test
COMPAREV D2 0
GOTOCMP 8699 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8699 >
SETV D2 0
GOTO 8700
SETV D2 1
COMPAREV D2 0
GOTOCMP 8719 ==; Test 'while'
PUSHR D4; while() #17 Body Start
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #17 Body End
GOTO 8691; while() #17 End
LOAD D2 0.0001; if() #1079 Body End AND if() #1080 Test
COMPAREV D2 37
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8937 ==; Test 'if'
PUSHR D4; if() #1080 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 4.2408; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0042
SETV D2 2
STORE D2 0.0045
LOAD D2 0.0042; if() #588 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8814 ==; Test 'if'
SETV D2 0.5000; if() #588 Body Start
STORE D2 0.0045
GOTO 8840; if() #588 Body End
LOAD D2 0.0042; if() #589 Test AND if() #588 Else Start
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8822 ==; Test 'if'
SETV D2 1; if() #589 Body Start
STORE D2 0.0045
GOTO 8840; if() #589 Body End
LOAD D2 0.0042; if() #590 Test AND if() #589 Else Start
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8830 ==; Test 'if'
SETV D2 2; if() #590 Body Start
STORE D2 0.0045
GOTO 8840; if() #590 Body End
LOAD D2 0.0042; if() #591 Test AND if() #590 Else Start
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8838 ==; Test 'if'
SETV D2 3; if() #591 Body Start
STORE D2 0.0045
GOTO 8840; if() #591 Body End
SETV D2 4; if() #591 Else Start
STORE D2 0.0045; if() #591 Else End
LOAD D2 0.0011; if() #590 Else End AND if() #589 Else End AND if() #588 Else End
SETR GD10 D2
SETR D2 GD5; while() #18 Test
COMPAREV D2 0
GOTOCMP 8850 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8850 >
SETV D2 0
GOTO 8851
SETV D2 1
COMPAREV D2 0
GOTOCMP 8870 ==; Test 'while'
PUSHR D4; while() #18 Body Start
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #18 Body End
GOTO 8842; while() #18 End
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 4.2408; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
SETR D2 GD5; while() #19 Test
COMPAREV D2 0
GOTOCMP 8916 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8916 >
SETV D2 0
GOTO 8917
SETV D2 1
COMPAREV D2 0
GOTOCMP 8937 ==; Test 'while'
PUSHR D4; while() #19 Body Start
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
DIVV D2 2
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #19 Body End
GOTO 8908; while() #19 End
LOAD D2 0.0001; if() #1080 Body End AND if() #1081 Test
COMPAREV D2 38
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9145 ==; Test 'if'
PUSHR D4; if() #1081 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 3.2000
SETR GD5 D2
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0042
SETV D2 2
STORE D2 0.0045
LOAD D2 0.0042; if() #592 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9029 ==; Test 'if'
SETV D2 0.5000; if() #592 Body Start
STORE D2 0.0045
GOTO 9055; if() #592 Body End
LOAD D2 0.0042; if() #593 Test AND if() #592 Else Start
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9037 ==; Test 'if'
SETV D2 1; if() #593 Body Start
STORE D2 0.0045
GOTO 9055; if() #593 Body End
LOAD D2 0.0042; if() #594 Test AND if() #593 Else Start
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9045 ==; Test 'if'
SETV D2 2; if() #594 Body Start
STORE D2 0.0045
GOTO 9055; if() #594 Body End
LOAD D2 0.0042; if() #595 Test AND if() #594 Else Start
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9053 ==; Test 'if'
SETV D2 3; if() #595 Body Start
STORE D2 0.0045
GOTO 9055; if() #595 Body End
SETV D2 4; if() #595 Else Start
STORE D2 0.0045; if() #595 Else End
LOAD D2 0.0011; if() #594 Else End AND if() #593 Else End AND if() #592 Else End
SETR GD10 D2
SETR D2 GD5; while() #20 Test
COMPAREV D2 0
GOTOCMP 9065 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 9065 >
SETV D2 0
GOTO 9066
SETV D2 1
COMPAREV D2 0
GOTOCMP 9085 ==; Test 'while'
PUSHR D4; while() #20 Body Start
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #20 Body End
GOTO 9057; while() #20 End
SETV D2 2; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #313 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #313 LoopTest
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9145 ==; for() #313 TestFail?
PUSHR D4; for() #313 Body Start
PUSHV 2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0047
PUSHR D2
PUSHV 64
PUSHV 12
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 3
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.5650; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #313 Body End
LOAD D2 0.0047; for() #313 LoopIncrement
ADDV D2 3
STORE D2 0.0047
GOTO 9089; for() #313 End
LOAD D2 0.0001; if() #1081 Body End AND if() #1082 Test
COMPAREV D2 39
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9515 ==; Test 'if'
PUSHR D4; if() #1082 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
LOAD D2 0.0011
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #314 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #314 LoopTest
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9270 ==; for() #314 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1083 Test AND for() #314 Body Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9252 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1083 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1083 Body End
SETR D2 GD3
ADDV D2 4
SETR GD3 D2
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #314 Body End
LOAD D2 0.0047; for() #314 LoopIncrement
ADDV D2 4
STORE D2 0.0047
GOTO 9182; for() #314 End
SETV D2 0; for() #315 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #315 LoopTest
COMPAREV D2 180
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9359 ==; for() #315 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1084 Test AND for() #315 Body Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9344 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1084 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1084 Body End
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #315 Body End
LOAD D2 0.0047; for() #315 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 9272; for() #315 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #21 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9449 ==; Test 'while'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1085 Test AND while() #21 Body Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9433 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1085 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1085 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #21 Body End
GOTO 9361; while() #21 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 20
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 2; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #316 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #316 LoopTest
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9515 ==; for() #316 TestFail?
PUSHR D4; for() #316 Body Start
PUSHV 2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0047
PUSHR D2
PUSHV 80
PUSHV 16
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 3
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.5650; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #316 Body End
LOAD D2 0.0047; for() #316 LoopIncrement
ADDV D2 6
STORE D2 0.0047
GOTO 9459; for() #316 End
LOAD D2 0.0001; if() #1082 Body End AND if() #1086 Test
COMPAREV D2 40
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9896 ==; Test 'if'
PUSHR D4; if() #1086 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
LOAD D2 0.0011
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #317 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #317 LoopTest
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9640 ==; for() #317 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1087 Test AND for() #317 Body Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9622 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1087 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1087 Body End
SETR D2 GD3
ADDV D2 4
SETR GD3 D2
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #317 Body End
LOAD D2 0.0047; for() #317 LoopIncrement
ADDV D2 4
STORE D2 0.0047
GOTO 9552; for() #317 End
SETV D2 0; for() #318 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #318 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9729 ==; for() #318 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1088 Test AND for() #318 Body Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9714 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1088 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1088 Body End
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #318 Body End
LOAD D2 0.0047; for() #318 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 9642; for() #318 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #22 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9819 ==; Test 'while'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1089 Test AND while() #22 Body Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9803 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1089 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1089 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #22 Body End
GOTO 9731; while() #22 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 20
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 0; for() #319 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #319 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9896 ==; for() #319 TestFail?
PUSHR D4; for() #319 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 224; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 144; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
SETV D3 50; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHV 8; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 4.2591; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 19
PUSHV 176
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 3
LOAD D2 0.0032
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 6; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #319 Body End
LOAD D2 0.0047; for() #319 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 9827; for() #319 End
LOAD D2 0.0001; if() #1086 Body End AND if() #1090 Test
COMPAREV D2 41
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10341 ==; Test 'if'
PUSHR D4; if() #1090 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
LOAD D2 0.0011
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #320 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #320 LoopTest
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10021 ==; for() #320 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1091 Test AND for() #320 Body Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10003 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1091 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1091 Body End
SETR D2 GD3
ADDV D2 4
SETR GD3 D2
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #320 Body End
LOAD D2 0.0047; for() #320 LoopIncrement
ADDV D2 4
STORE D2 0.0047
GOTO 9933; for() #320 End
SETV D2 0; for() #321 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #321 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10110 ==; for() #321 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1092 Test AND for() #321 Body Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10095 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1092 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1092 Body End
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #321 Body End
LOAD D2 0.0047; for() #321 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 10023; for() #321 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #23 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10200 ==; Test 'while'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1093 Test AND while() #23 Body Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10184 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1093 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1093 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #23 Body End
GOTO 10112; while() #23 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 20
PUSHR D2
POP D2
SETR QUAKE D2
PUSHR D4
PUSHV 4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 7; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0045
SETV D2 0; for() #322 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #322 LoopTest
PUSHR D2
LOAD D2 0.0045
POP D3
COMPARER D3 D2
GOTOCMP 10232 >=
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body
COMPAREV D2 40
GOTOCMP 10232 >=
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 4.5304; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 10232 >=
SETV D2 1
GOTO 10233
SETV D2 0
COMPAREV D2 0
GOTOCMP 10341 ==; for() #322 TestFail?
SETV D3 176; InlineFunc[int Rand(int)] Params AND for() #322 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0046
SETV D2 0; for() #323 setup
STORE D2 0.0044
LOAD D2 0.0044; for() #323 LoopTest
COMPAREV D2 352
GOTOCMP 10267 >=
PUSHR D4
LOAD D2 0.0048; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0639; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0682; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2
PUSHARGSV 16 0.0002; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params End
CALLFUNC 4.0933; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10267 !=
SETV D2 1
GOTO 10268
SETV D2 0
COMPAREV D2 0
GOTOCMP 10286 ==; for() #323 TestFail?
LOAD D2 0.0045; if() #596 Test AND for() #323 Body Start
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10279 ==; Test 'if'
SETV D3 176; InlineFunc[int Rand(int)] Params AND if() #596 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0046
GOTO 10282; if() #596 Body End
LOAD D2 0.0044; if() #596 Else Start
SUBV D2 176
STORE D2 0.0046; if() #596 Else End
LOAD D2 0.0044; for() #323 Body End AND for() #323 LoopIncrement
ADDV D2 1
STORE D2 0.0044
GOTO 10240; for() #323 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0022; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0639; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0682; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.1983; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0033
PUSHR D4
LOAD D2 0.0033; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.9623; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4
SETV D2 176
PUSHR D2
LOAD D2 0.0033
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int Rand(int, int)] Params Start
PUSHV 17; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #322 Body End
LOAD D2 0.0047; for() #322 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 10214; for() #322 End
LOAD D2 0.0001; if() #1090 Body End AND if() #1094 Test
COMPAREV D2 42
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10454 ==; Test 'if'
PUSHR D4; if() #1094 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
LOAD D2 0.0011
SETR GD10 D2
SETV D2 0; for() #324 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #324 LoopTest
COMPAREV D2 300
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10454 ==; for() #324 TestFail?
PUSHARGSR D4 0.0002; for() #324 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #324 Body End
LOAD D2 0.0047; for() #324 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 10399; for() #324 End
LOAD D2 0.0001; if() #1094 Body End AND if() #1095 Test
COMPAREV D2 43
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10708 ==; Test 'if'
PUSHR D4; if() #1095 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETR D2 GD1
PUSHR D2
PUSHR D4
PUSHV 32; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0041
SETR D2 GD2
PUSHR D2
PUSHR D4
PUSHV 32; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
PUSHR D4; if() #597 Test
LOAD D2 0.0048; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0040
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 4.0785; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10615 ==; Test 'if'
SETV D2 3; if() #597 Body Start
STORE D2 0.0045
LOAD D2 0.0011
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #325 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #325 LoopTest
COMPAREV D2 10
GOTOCMP 10546 >=
PUSHR D4
LOAD D2 0.0043; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 4.0494; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10546 ==
SETV D2 1
GOTO 10547
SETV D2 0
COMPAREV D2 0
GOTOCMP 10708 ==; for() #325 TestFail?
PUSHARGSR D4 0.0002; for() #325 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
LOAD D2 0.0045; InlineFunc[int Min(int, int)] Params Start
ADDV D2 0.5000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0045
PUSHR D4
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 4.6120; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #325 Body End
LOAD D2 0.0047; for() #325 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 10534; for() #325 End
GOTO 10708; if() #597 Body End
PUSHR D4; if() #597 Else Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 2
STORE D2 0.0045
LOAD D2 0.0011
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4; while() #24 Test
LOAD D2 0.0043; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 4.0494; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10708 ==; Test 'while'
LOAD D2 0.0045; InlineFunc[int Min(int, int)] Params Start AND while() #24 Body Start
ADDV D2 0.2000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0045
PUSHR D4
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 4.6120; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #24 Body End
GOTO 10670; while() #24 End
LOAD D2 0.0001; if() #597 Else End AND if() #1095 Body End AND if() #1096 Test
COMPAREV D2 49
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10917 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1096 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #326 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #326 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10802 ==; for() #326 TestFail?
PUSHR D4; for() #326 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 64
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0029
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 90; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #326 Body End
LOAD D2 0.0047; for() #326 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 10758; for() #326 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #327 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #327 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10917 ==; for() #327 TestFail?
SETV D2 0; for() #328 setup AND for() #327 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #328 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10873 ==; for() #328 TestFail?
SETR D2 GD1; for() #328 Body Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHV 1; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0043
ADDV D2 180
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0041
SETR D2 GD2
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHV 1; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0043
ADDV D2 180
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
PUSHR D4; if() #1097 Test
LOAD D2 0.0048; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0040
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 4.0785; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10869 ==; Test 'if'
PUSHR D4; if() #1097 Body Start
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
ADDV D2 180
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #1097 Body End
LOAD D2 0.0046; for() #328 Body End AND for() #328 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10813; for() #328 End
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 64
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2
LOAD D2 0.0029
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #327 Body End
LOAD D2 0.0047; for() #327 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 10806; for() #327 End
LOAD D2 0.0001; if() #1096 Body End AND if() #1098 Test
COMPAREV D2 52
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11335 ==; Test 'if'
PUSHR D4; if() #1098 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 4
SETR GD5 D2
LOAD D2 0.0011
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD5; while() #25 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11044 ==; Test 'while'
PUSHR D4; while() #25 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11034 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1099 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1099 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #25 Body End
GOTO 10954; while() #25 End
SETR D2 GD3
STORE D2 0.0045
SETV D2 0; for() #329 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #329 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11171 ==; for() #329 TestFail?
PUSHR D4; for() #329 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11128 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1100 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1100 Body End
SETV D2 0
SETR GD5 D2
LOAD D2 0.0045
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD3 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #329 Body End
LOAD D2 0.0047; for() #329 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 11048; for() #329 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #26 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11269 ==; Test 'while'
PUSHR D4; while() #26 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11253 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1101 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1101 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #26 Body End
GOTO 11173; while() #26 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 4
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 2; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #330 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #330 LoopTest
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11335 ==; for() #330 TestFail?
PUSHR D4; for() #330 Body Start
PUSHV 2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0047
PUSHR D2
PUSHV 48
PUSHV 16
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 3
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.5650; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #330 Body End
LOAD D2 0.0047; for() #330 LoopIncrement
ADDV D2 6
STORE D2 0.0047
GOTO 11279; for() #330 End
LOAD D2 0.0001; if() #1098 Body End AND if() #1102 Test
COMPAREV D2 53
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11764 ==; Test 'if'
PUSHR D4; if() #1102 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 4
SETR GD5 D2
LOAD D2 0.0011
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD5; while() #27 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11462 ==; Test 'while'
PUSHR D4; while() #27 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11452 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1103 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1103 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #27 Body End
GOTO 11372; while() #27 End
SETR D2 GD3
STORE D2 0.0045
SETV D2 0; for() #331 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #331 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11589 ==; for() #331 TestFail?
PUSHR D4; for() #331 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11546 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1104 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1104 Body End
SETV D2 0
SETR GD5 D2
LOAD D2 0.0045
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD3 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #331 Body End
LOAD D2 0.0047; for() #331 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 11466; for() #331 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #28 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11687 ==; Test 'while'
PUSHR D4; while() #28 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11671 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1105 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1105 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #28 Body End
GOTO 11591; while() #28 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 4
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 0; for() #332 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #332 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11764 ==; for() #332 TestFail?
PUSHR D4; for() #332 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 224; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 144; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
SETV D3 50; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHV 8; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 4.2591; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 19
PUSHV 176
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 3
LOAD D2 0.0032
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
PUSHV 4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 12; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #332 Body End
LOAD D2 0.0047; for() #332 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 11695; for() #332 End
LOAD D2 0.0001; if() #1102 Body End AND if() #1106 Test
COMPAREV D2 54
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12257 ==; Test 'if'
PUSHR D4; if() #1106 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 4
SETR GD5 D2
LOAD D2 0.0011
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD5; while() #29 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11891 ==; Test 'while'
PUSHR D4; while() #29 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11881 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1107 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1107 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #29 Body End
GOTO 11801; while() #29 End
SETR D2 GD3
STORE D2 0.0045
SETV D2 0; for() #333 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #333 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12018 ==; for() #333 TestFail?
PUSHR D4; for() #333 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11975 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1108 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1108 Body End
SETV D2 0
SETR GD5 D2
LOAD D2 0.0045
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD3 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #333 Body End
LOAD D2 0.0047; for() #333 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 11895; for() #333 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #30 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12116 ==; Test 'while'
PUSHR D4; while() #30 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12100 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1109 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0041; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1109 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #30 Body End
GOTO 12020; while() #30 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 4
PUSHR D2
POP D2
SETR QUAKE D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 3; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0045
SETV D2 0; for() #334 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #334 LoopTest
PUSHR D2
LOAD D2 0.0045
POP D3
COMPARER D3 D2
GOTOCMP 12148 >=
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body
COMPAREV D2 40
GOTOCMP 12148 >=
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 4.5304; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 12148 >=
SETV D2 1
GOTO 12149
SETV D2 0
COMPAREV D2 0
GOTOCMP 12257 ==; for() #334 TestFail?
SETV D3 176; InlineFunc[int Rand(int)] Params AND for() #334 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0046
SETV D2 0; for() #335 setup
STORE D2 0.0044
LOAD D2 0.0044; for() #335 LoopTest
COMPAREV D2 352
GOTOCMP 12183 >=
PUSHR D4
LOAD D2 0.0048; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0639; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0682; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2
PUSHARGSV 16 0.0002; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params End
CALLFUNC 4.0933; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 12183 !=
SETV D2 1
GOTO 12184
SETV D2 0
COMPAREV D2 0
GOTOCMP 12202 ==; for() #335 TestFail?
LOAD D2 0.0045; if() #598 Test AND for() #335 Body Start
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12195 ==; Test 'if'
SETV D3 176; InlineFunc[int Rand(int)] Params AND if() #598 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0046
GOTO 12198; if() #598 Body End
LOAD D2 0.0044; if() #598 Else Start
SUBV D2 176
STORE D2 0.0046; if() #598 Else End
LOAD D2 0.0044; for() #335 Body End AND for() #335 LoopIncrement
ADDV D2 1
STORE D2 0.0044
GOTO 12156; for() #335 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0022; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0639; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0682; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.1983; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0033
PUSHR D4
LOAD D2 0.0033; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.9623; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4
SETV D2 176
PUSHR D2
LOAD D2 0.0033
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int Rand(int, int)] Params Start
PUSHV 17; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #334 Body End
LOAD D2 0.0047; for() #334 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 12130; for() #334 End
LOAD D2 0.0001; if() #1106 Body End AND if() #1110 Test
COMPAREV D2 55
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12350 ==; Test 'if'
PUSHR D4; if() #1110 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #336 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #336 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12340 ==; for() #336 TestFail?
PUSHR D4; for() #336 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 350; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHARGSV 16 0.0002; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #336 Body End
LOAD D2 0.0047; for() #336 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 12288; for() #336 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1110 Body End
LOAD D2 0.0001; if() #1111 Test
COMPAREV D2 56
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12470 ==; Test 'if'
PUSHR D4; if() #1111 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #337 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #337 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12460 ==; for() #337 TestFail?
PUSHR D4; for() #337 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHARGSV 16 0.0002; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #337 Body End
LOAD D2 0.0047; for() #337 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 12408; for() #337 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1111 Body End
LOAD D2 0.0001; if() #1112 Test
COMPAREV D2 57
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12590 ==; Test 'if'
PUSHR D4; if() #1112 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -40; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 40; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0046
SETV D2 0; for() #338 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #338 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12580 ==; for() #338 TestFail?
SETV D2 0; for() #339 setup AND for() #338 Body Start
STORE D2 0.0047
LOAD D2 0.0047; for() #339 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12566 ==; for() #339 TestFail?
PUSHR D4; for() #339 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 72
SETV D2 72
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 4; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
POP D4; for() #339 Body End
LOAD D2 0.0047; for() #339 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 12511; for() #339 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #338 Body End
LOAD D2 0.0045; for() #338 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 12504; for() #338 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 32; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1112 Body End
LOAD D2 0.0001; if() #1113 Test
COMPAREV D2 58
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12704 ==; Test 'if'
PUSHR D4; if() #1113 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #340 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #340 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 12694 ==; for() #340 TestFail?
PUSHR D4; for() #340 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 25
SETV D2 25
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 300; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
SETV D2 0
STORE D2 0.0046
LOAD D2 0.0035; if() #1114 Test
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 129
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12675 ==; Test 'if'
SETV D2 16; if() #1114 Body Start
STORE D2 0.0046; if() #1114 Body End
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
LOAD D2 0.0046
ADDV D2 24
PUSHR D2; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 3.1400; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 16; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4; for() #340 Body End
LOAD D2 0.0047; for() #340 LoopIncrement
ADDV D2 2
STORE D2 0.0047
GOTO 12621; for() #340 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1113 Body End
LOAD D2 0.0001; if() #1115 Test
COMPAREV D2 59
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12845 ==; Test 'if'
PUSHR D4; if() #1115 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #341 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #341 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 12835 ==; for() #341 TestFail?
PUSHR D4; for() #341 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 45
SETV D2 45
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 300; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
SETV D2 0
STORE D2 0.0046
LOAD D2 0.0035; if() #1116 Test
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 129
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12816 ==; Test 'if'
SETV D2 16; if() #1116 Body Start
STORE D2 0.0046; if() #1116 Body End
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
LOAD D2 0.0046
ADDV D2 24
PUSHR D2; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 3.1400; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 16; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4; for() #341 Body End
LOAD D2 0.0047; for() #341 LoopIncrement
ADDV D2 2
STORE D2 0.0047
GOTO 12762; for() #341 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1115 Body End
LOAD D2 0.0001; if() #1117 Test
COMPAREV D2 60
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12973 ==; Test 'if'
PUSHR D4; if() #1117 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 150
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 4.2591; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV 3.6000
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0032; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 4.5404; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1117 Body End
LOAD D2 0.0001; if() #1118 Test
COMPAREV D2 61
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13101 ==; Test 'if'
PUSHR D4; if() #1118 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 200
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 4.2591; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV -1
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0032; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 4.5404; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1118 Body End
LOAD D2 0.0001; if() #1119 Test
COMPAREV D2 62
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13250 ==; Test 'if'
PUSHR D4; if() #1119 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #342 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #342 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13240 ==; for() #342 TestFail?
PUSHARGSR D4 0.0002; for() #342 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 200
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 4.2591; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV -1
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0032; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 4.5404; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 6; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #342 Body End
LOAD D2 0.0047; for() #342 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 13159; for() #342 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1119 Body End
LOAD D2 0.0001; if() #1120 Test
COMPAREV D2 63
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13400 ==; Test 'if'
PUSHR D4; if() #1120 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 -2; for() #343 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #343 LoopTest
COMPAREV D2 2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13390 ==; for() #343 TestFail?
PUSHR D4; for() #343 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 200
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 4.2591; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV 3.6000
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0032; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 4.5404; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #343 Body End
LOAD D2 0.0047; for() #343 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 13331; for() #343 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1120 Body End
LOAD D2 0.0001; if() #1121 Test
COMPAREV D2 64
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13559 ==; Test 'if'
PUSHR D4; if() #1121 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 0; for() #344 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #344 LoopTest
COMPAREV D2 6
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13549 ==; for() #344 TestFail?
PUSHR D4; for() #344 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHR D4
PUSHV -30; UsrFunc[int Rand(int, int)] Params Start
PUSHV 30; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
PUSHV 100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 300; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 4.2591; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHR D4
PUSHV 24; UsrFunc[int Rand(int, int)] Params Start
PUSHV 36; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
DIVV D2 10
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0032; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 4.5404; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #344 Body End
LOAD D2 0.0047; for() #344 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 13481; for() #344 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1121 Body End
LOAD D2 0.0001; if() #1122 Test
COMPAREV D2 65
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13669 ==; Test 'if'
PUSHR D4; if() #1122 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 0; for() #345 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #345 LoopTest
COMPAREV D2 18
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13669 ==; for() #345 TestFail?
PUSHR D4; for() #345 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHR D4
PUSHV 100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 400; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 4.2591; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHR D4
PUSHV 24; UsrFunc[int Rand(int, int)] Params Start
PUSHV 36; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
DIVV D2 10
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0032; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 4.5404; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #345 Body End
LOAD D2 0.0047; for() #345 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 13608; for() #345 End
LOAD D2 0.0001; if() #1122 Body End AND if() #1123 Test
COMPAREV D2 66
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13744 ==; Test 'if'
PUSHR D4; if() #1123 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #346 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #346 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13734 ==; for() #346 TestFail?
PUSHR D4; for() #346 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0047
DIVV D2 7
MULTV D2 400
SETV D2 400
PUSHR D2
LOAD D2 0.0047
DIVV D2 7
POP D3
MULTR D2 D3
ADDV D2 200
PUSHR D2; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #346 Body End
LOAD D2 0.0047; for() #346 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 13686; for() #346 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1123 Body End
LOAD D2 0.0001; if() #1124 Test
COMPAREV D2 67
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13848 ==; Test 'if'
PUSHR D4; if() #1124 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 0; for() #347 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #347 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13838 ==; for() #347 TestFail?
PUSHR D4; for() #347 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
DIVV D2 7
MULTV D2 400
SETV D2 400
PUSHR D2
LOAD D2 0.0047
DIVV D2 7
POP D3
MULTR D2 D3
ADDV D2 200
PUSHR D2; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #347 Body End
LOAD D2 0.0047; for() #347 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 13793; for() #347 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1124 Body End
LOAD D2 0.0001; if() #1125 Test
COMPAREV D2 68
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13947 ==; Test 'if'
PUSHR D4; if() #1125 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 4.5789; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1125 Body End
LOAD D2 0.0001; if() #1126 Test
COMPAREV D2 69
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14069 ==; Test 'if'
PUSHR D4; if() #1126 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 4.5789; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #348 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #348 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 14059 ==; for() #348 TestFail?
PUSHR D4; for() #348 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #348 Body End
LOAD D2 0.0047; for() #348 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 14014; for() #348 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1126 Body End
LOAD D2 0.0001; if() #1127 Test
COMPAREV D2 70
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14202 ==; Test 'if'
SETV D2 0; for() #349 setup AND if() #1127 Body Start
STORE D2 0.0047
LOAD D2 0.0047; for() #349 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14103 ==; for() #349 TestFail?
PUSHR D4; for() #349 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 4.5789; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
POP D4; for() #349 Body End
LOAD D2 0.0047; for() #349 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 14076; for() #349 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 0; for() #350 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #350 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14192 ==; for() #350 TestFail?
PUSHR D4; for() #350 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
DIVV D2 7
MULTV D2 400
SETV D2 400
PUSHR D2
LOAD D2 0.0047
DIVV D2 7
POP D3
MULTR D2 D3
ADDV D2 200
PUSHR D2; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2567; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #350 Body End
LOAD D2 0.0047; for() #350 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 14147; for() #350 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1127 Body End
LOAD D2 0.0001; if() #1128 Test
COMPAREV D2 72
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14628 ==; Test 'if'
PUSHR D4; if() #1128 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHV -32; UsrFunc[int Rand(int, int)] Params Start
PUSHV 32; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
ADDV D2 -32
STORE D2 0.0041
PUSHR D4
PUSHV -32; UsrFunc[int Rand(int, int)] Params Start
PUSHV 32; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
ADDV D2 -32
STORE D2 0.0040
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #351 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #351 LoopTest
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14419 ==; for() #351 TestFail?
LOAD D2 0.0029; InlineFunc[int Choose(int)] Params Start AND for() #351 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 2
PUSHV 45
PUSHV 0
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 1; for() #352 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #352 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14338 ==; for() #352 TestFail?
PUSHR D4; for() #352 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0046
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 2
PUSHV 45
PUSHV 0
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0046
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 2
PUSHV 135
PUSHV 0
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #352 Body End
LOAD D2 0.0046; for() #352 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14272; for() #352 End
SETV D2 1; for() #353 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #353 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14406 ==; for() #353 TestFail?
PUSHR D4; for() #353 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0046
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV 45
PUSHV 0
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0046
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV -45
PUSHV 0
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #353 Body End
LOAD D2 0.0046; for() #353 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14340; for() #353 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #351 Body End
LOAD D2 0.0047; for() #351 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 14234; for() #351 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #354 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #354 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14628 ==; for() #354 TestFail?
LOAD D2 0.0029; InlineFunc[int Choose(int)] Params Start AND for() #354 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 2
PUSHV 45
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 1; for() #355 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #355 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14541 ==; for() #355 TestFail?
PUSHR D4; for() #355 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0046
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 2
PUSHV 45
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0046
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0040
PUSHR D2
PUSHV 2
PUSHV 135
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #355 Body End
LOAD D2 0.0046; for() #355 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14469; for() #355 End
SETV D2 1; for() #356 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #356 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14615 ==; for() #356 TestFail?
PUSHR D4; for() #356 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0046
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV 45
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0046
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV -45
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #356 Body End
LOAD D2 0.0046; for() #356 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14543; for() #356 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #354 Body End
LOAD D2 0.0047; for() #354 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 14423; for() #354 End
LOAD D2 0.0001; if() #1128 Body End AND if() #1129 Test
COMPAREV D2 73
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14908 ==; Test 'if'
PUSHR D4; if() #1129 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHVARGV -60; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 60; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
PUSHV -15; UsrFunc[int Rand(int, int)] Params Start
PUSHV 15; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0043
SETV D2 0; for() #357 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #357 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14704 ==; for() #357 TestFail?
SETV D2 0; for() #357 Body Start
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0047
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #357 Body End
LOAD D2 0.0047; for() #357 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 14686; for() #357 End
SETV D2 0; for() #358 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #358 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14738 ==; for() #358 TestFail?
PUSHR D4; for() #358 Body Start
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #358 Body End
LOAD D2 0.0047; for() #358 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 14706; for() #358 End
SETV D2 0; for() #359 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #359 LoopTest
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14873 ==; for() #359 TestFail?
LOAD D2 0.0047; if() #1130 Test AND for() #359 Body Start
MODV D2 4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14839 ==; Test 'if'
LOAD D2 0.0047; if() #1130 Body Start
DIVV D2 4
STORE D2 0.0046
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0045
LOAD D2 0.0013
MULTV D2 8
PUSHR D2
LOAD D2 0.0012
MULTV D2 8
POP D3
ADDR D2 D3
DIVV D2 2
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0036; UsrFunc[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 16
LOAD D2 0.0046
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 4
LOAD D2 0.0045
PUSHR D2
PUSHV 32
PUSHV 16
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.5525; UsrFunc[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Call
POP D4; if() #1130 Body End
PUSHR D4
LOAD D2 0.0036; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0029
PUSHR D2
PUSHV 16; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params End
CALLFUNC 4.6382; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Call
PEEK D4
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #359 Body End
LOAD D2 0.0047; for() #359 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 14740; for() #359 End
SETV D2 0; for() #360 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #360 LoopTest
COMPAREV D2 48
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14908 ==; for() #360 TestFail?
PUSHR D4; for() #360 Body Start
LOAD D2 0.0036; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0029
PUSHR D2
PUSHV 16; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params End
CALLFUNC 4.6382; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #360 Body End
LOAD D2 0.0047; for() #360 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 14875; for() #360 End
LOAD D2 0.0001; if() #1129 Body End AND if() #1131 Test
COMPAREV D2 74
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 15494 ==; Test 'if'
SETV D2 0.0001; if() #1131 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0041
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #1132 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 14947 ==; Test 'if'
SETV D2 0.0001; if() #1132 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0041
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0040; if() #1132 Body End
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #361 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #361 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15219 ==; for() #361 TestFail?
LOAD D2 0.0029; InlineFunc[int Choose(int)] Params Start AND for() #361 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
SETV D2 88; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0042
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
PUSHV 88; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0042; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0047
DIVV D2 40
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0037
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0042; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0047
DIVV D2 40
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0037
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0; for() #362 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #362 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15134 ==; for() #362 TestFail?
LOAD D2 0.0037; for() #362 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[int VectorX(int, int)] Params Start
MULTV D2 4
PUSHR D2
LOAD D2 0.0047
MULTV D2 5
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0037
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[int VectorY(int, int)] Params Start
MULTV D2 4
PUSHR D2
LOAD D2 0.0047
MULTV D2 5
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
ADDV D2 5
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #362 Body End
LOAD D2 0.0046; for() #362 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15056; for() #362 End
SETV D2 0; for() #363 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #363 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15206 ==; for() #363 TestFail?
PUSHR D4; for() #363 Body Start
LOAD D2 0.0036; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
ADDV D2 5
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 6
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0
LOAD D2 0.0047
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #363 Body End
LOAD D2 0.0046; for() #363 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15136; for() #363 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #361 Body End
LOAD D2 0.0047; for() #361 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 14951; for() #361 End
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #1133 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 15233 ==; Test 'if'
SETV D2 0.0001; if() #1133 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0041
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0040; if() #1133 Body End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #364 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #364 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15494 ==; for() #364 TestFail?
LOAD D2 0.0029; InlineFunc[int Choose(int)] Params Start AND for() #364 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHV 128; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHV 88
LOAD D2 0.0041
ADDV D2 8
PUSHR D2
LOAD D2 0.0040
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0042
PUSHR D4
PUSHV 128; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHV 88
LOAD D2 0.0041
ADDV D2 8
PUSHR D2
LOAD D2 0.0040
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0042; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0047
DIVV D2 80
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
ADDV D2 128
PUSHR D2
LOAD D2 0.0037
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0042; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0047
DIVV D2 80
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
ADDV D2 88
PUSHR D2
LOAD D2 0.0037
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0; for() #365 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #365 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15406 ==; for() #365 TestFail?
LOAD D2 0.0047; InlineFunc[int Max(int, int)] Params Start AND for() #365 Body Start
MULTV D2 2
SUBV2 160 D2
PUSHVARGR D2
PUSHVARGV 40; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0045
LOAD D2 0.0037
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0047
MULTV D2 5
ADDV D2 200
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0037
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0047
MULTV D2 5
ADDV D2 200
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
ADDV D2 5
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #365 Body End
LOAD D2 0.0046; for() #365 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15321; for() #365 End
SETV D2 0; for() #366 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #366 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15481 ==; for() #366 TestFail?
PUSHR D4; for() #366 Body Start
LOAD D2 0.0036; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
ADDV D2 5
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 6
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0029
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 1
LOAD D2 0.0047
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #366 Body End
LOAD D2 0.0046; for() #366 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15408; for() #366 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #364 Body End
LOAD D2 0.0047; for() #364 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 15237; for() #364 End
LOAD D2 0.0001; if() #1131 Body End AND if() #1134 Test
COMPAREV D2 75
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16109 ==; Test 'if'
PUSHR D4; if() #1134 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #367 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #367 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15813 ==; for() #367 TestFail?
LOAD D2 0.0029; InlineFunc[int Choose(int)] Params Start AND for() #367 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0041
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 4.2408; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0038
SETV D2 0; for() #368 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #368 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15800 ==; for() #368 TestFail?
SETV D2 0; for() #369 setup AND for() #368 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #369 LoopTest
COMPAREV D2 256
GOTOCMP 15631 >=
LOAD D2 0.0041; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15631 !=
SETV D2 1
GOTO 15632
SETV D2 0
COMPAREV D2 0
GOTOCMP 15650 ==; for() #369 TestFail?
LOAD D2 0.0041; for() #369 Body Start
PUSHR D2
LOAD D2 0.0039
POP D3
ADDR D2 D3
STORE D2 0.0041
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0038
POP D3
ADDR D2 D3
STORE D2 0.0040; for() #369 Body End
LOAD D2 0.0045; for() #369 LoopIncrement
ADDV D2 8
STORE D2 0.0045
GOTO 15618; for() #369 End
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0047; if() #1135 Test
MODV D2 4
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15706 ==; Test 'if'
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start AND if() #1135 Body Start
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
MULTV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0046
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End AND if() #1135 Body End
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0039
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0041
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0038
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0040
LOAD D2 0.0039; if() #1136 Test
COMPAREV D2 0
GOTOCMP 15732 >=
LOAD D2 0.0041; InlineFunc[bool screendata::isSolid(int, int)] Params Start
SUBV D2 8
PUSHR D2
LOAD D2 0.0040
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15746 !=
LOAD D2 0.0039
COMPAREV D2 0
GOTOCMP 15744 <=
LOAD D2 0.0041; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0040
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15746 !=
SETV D2 0
GOTO 15747
SETV D2 1
COMPAREV D2 0
GOTOCMP 15758 ==; Test 'if'
LOAD D2 0.0039; if() #1136 Body Start
SUBV2 0 D2
STORE D2 0.0039
LOAD D2 0.0041; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
ADDV D2 4
STORE D2 0.0041; if() #1136 Body End
LOAD D2 0.0038; if() #1137 Test
COMPAREV D2 0
GOTOCMP 15770 >=
LOAD D2 0.0041; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
SUBV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15784 !=
LOAD D2 0.0038
COMPAREV D2 0
GOTOCMP 15782 <=
LOAD D2 0.0041; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15784 !=
SETV D2 0
GOTO 15785
SETV D2 1
COMPAREV D2 0
GOTOCMP 15796 ==; Test 'if'
LOAD D2 0.0038; if() #1137 Body Start
SUBV2 0 D2
STORE D2 0.0038
LOAD D2 0.0040; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
ADDV D2 4
STORE D2 0.0040; if() #1137 Body End
LOAD D2 0.0046; for() #368 Body End AND for() #368 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15611; for() #368 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #367 Body End
LOAD D2 0.0047; for() #367 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 15511; for() #367 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 48; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #370 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #370 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16073 ==; for() #370 TestFail?
LOAD D2 0.0036; for() #370 Body Start
PUSHR D2
LOAD D2 0.0047
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0041
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0047
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0040
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #371 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #371 LoopTest
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16030 ==; for() #371 TestFail?
PUSHR D4; for() #371 Body Start
LOAD D2 0.0041; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0047
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0047
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 4.2408; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0041
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0041
LOAD D2 0.0040
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
LOAD D2 0.0041
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0.0041; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0047
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0036
PUSHR D2
LOAD D2 0.0047
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0042
LOAD D2 0.0042; if() #1138 Test
COMPAREV D2 8
GOTOCMP 16014 <
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 16014 <
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 255
GOTOCMP 16014 >
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 16014 <
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 175
GOTOCMP 16014 >
SETV D2 0
GOTO 16015
SETV D2 1
COMPAREV D2 0
GOTOCMP 16030 !=; Test 'if' AND break 1; AND if() #1138 Body
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #371 Body End
LOAD D2 0.0046; for() #371 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15871; for() #371 End
PUSHR D4; if() #1139 Test
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 16060 <
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 255
GOTOCMP 16060 >
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 16060 <
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 175
GOTOCMP 16060 >
SETV D2 0
GOTO 16061
SETV D2 1
COMPAREV D2 0
GOTOCMP 16073 !=; Test 'if' AND break 1; AND if() #1139 Body
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 10
PUSHR D2
POP D2
SETR QUAKE D2; for() #370 Body End
LOAD D2 0.0047; for() #370 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 15825; for() #370 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
POP D3
SUBR D3 D2
PUSHR D3
PUSHV 16; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 4.5803; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4; if() #1134 Body End
LOAD D2 0.0001; if() #1140 Test
COMPAREV D2 76
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16199 ==; Test 'if'
PUSHR D4; if() #1140 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
LOAD D2 0.0020; if() #1141 Test
COMPAREV D2 0
GOTOCMP 16164 ==; Test 'if'
LOAD D2 0.0020; InlineFunc[void Game::PlaySound(int)] Params AND if() #1141 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1141 Body End
PUSHR D4
PUSHV 1; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 4.2719; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 200
LOAD D2 0.0019
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.5331; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1140 Body End
LOAD D2 0.0001; if() #1142 Test
COMPAREV D2 77
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16310 ==; Test 'if'
PUSHR D4; if() #1142 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
LOAD D2 0.0020; if() #1143 Test
COMPAREV D2 0
GOTOCMP 16254 ==; Test 'if'
LOAD D2 0.0020; InlineFunc[void Game::PlaySound(int)] Params AND if() #1143 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1143 Body End
SETV D2 -1; for() #372 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #372 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 16310 ==; for() #372 TestFail?
PUSHR D4; for() #372 Body Start
PUSHV 1; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 4.2719; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 45
SETV D2 45
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 200
LOAD D2 0.0019
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.5331; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; for() #372 Body End
LOAD D2 0.0047; for() #372 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 16256; for() #372 End
LOAD D2 0.0001; if() #1142 Body End AND if() #1144 Test
COMPAREV D2 78
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16400 ==; Test 'if'
PUSHR D4; if() #1144 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
LOAD D2 0.0020; if() #1145 Test
COMPAREV D2 0
GOTOCMP 16365 ==; Test 'if'
LOAD D2 0.0020; InlineFunc[void Game::PlaySound(int)] Params AND if() #1145 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1145 Body End
PUSHR D4
PUSHV 1; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 4.2719; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 400
LOAD D2 0.0019
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.5331; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1144 Body End
LOAD D2 0.0001; if() #1146 Test
COMPAREV D2 79
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16486 ==; Test 'if'
PUSHR D4; if() #1146 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
PUSHV 2; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 4.2719; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0019
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.5331; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1146 Body End
LOAD D2 0.0001; if() #1147 Test
COMPAREV D2 80
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16667 ==; Test 'if'
PUSHR D4; if() #1147 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV -1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 1
SETR GD4 D2
SETV D2 0; for() #373 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #373 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16571 ==; for() #373 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1148 Test AND for() #373 Body Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
SETV D2 40; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16571 !=; Test 'if' AND break 1; AND if() #1148 Body
PUSHARGSR D4 0.0003; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHV 40; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #373 Body End
LOAD D2 0.0047; for() #373 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 16505; for() #373 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV 3; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHV 90; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.9686; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV 0; UsrFunc[int Rand(int, int)] Params Start
PUSHV 35; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
MULTR D2 D3
ADDV D2 90
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.5331; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 40; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1147 Body End
LOAD D2 0.0001; if() #1149 Test
COMPAREV D2 81
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16796 ==; Test 'if'
PUSHR D4; if() #1149 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 4.5789; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 4.2408; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV 3; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.5331; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 40; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1149 Body End
LOAD D2 0.0001; if() #1150 Test
COMPAREV D2 82
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16969 ==; Test 'if'
SETV D2 0; for() #374 setup AND if() #1150 Body Start
STORE D2 0.0047
LOAD D2 0.0047; for() #374 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16832 ==; for() #374 TestFail?
PUSHR D4; for() #374 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHARGSV -1000 0.0002
PUSHV 4; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 4.5803; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4; for() #374 Body End
LOAD D2 0.0047; for() #374 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 16803; for() #374 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #375 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #375 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16969 ==; for() #375 TestFail?
PUSHR D4; for() #375 Body Start
LOAD D2 0.0043; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params End
CALLFUNC 4.6343; UsrFunc[int EZB_TurnToAngle(int, int, int)] Call
POP D4
STORE D2 0.0043
LOAD D2 0.0047; if() #1151 Test
MODV D2 10
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16956 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1151 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV 4; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0029
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.5331; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1151 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #375 Body End
LOAD D2 0.0047; for() #375 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 16876; for() #375 End
LOAD D2 0.0001; if() #1150 Body End AND if() #1152 Test
COMPAREV D2 83
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17124 ==; Test 'if'
PUSHR D4; if() #1152 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0043
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #376 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #376 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17124 ==; for() #376 TestFail?
PUSHR D4; for() #376 Body Start
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 3
ADDV D2 0.7500
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
SUBV D2 80
PUSHR D2
LOAD D2 0.0047
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0043
SUBV D2 60
PUSHR D2
LOAD D2 0.0047
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.2203; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #376 Body End
LOAD D2 0.0047; for() #376 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 17033; for() #376 End
LOAD D2 0.0001; if() #1152 Body End AND if() #1153 Test
COMPAREV D2 84
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17306 ==; Test 'if'
PUSHR D4; if() #1153 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #377 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #377 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17306 ==; for() #377 TestFail?
PUSHR D4; for() #377 Body Start
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 3
ADDV D2 0.7500
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
SUBV D2 80
PUSHR D2
LOAD D2 0.0047
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0043
SUBV D2 60
PUSHR D2
LOAD D2 0.0047
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.2203; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #377 Body End
LOAD D2 0.0047; for() #377 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 17215; for() #377 End
LOAD D2 0.0001; if() #1153 Body End AND if() #1154 Test
COMPAREV D2 85
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17579 ==; Test 'if'
PUSHR D4; if() #1154 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 -1
STORE D2 0.0044
SETV D2 0; for() #378 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #378 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17579 ==; for() #378 TestFail?
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params AND for() #378 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #379 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #379 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17525 ==; for() #379 TestFail?
PUSHR D4; for() #379 Body Start
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
ADDV D2 0.5000
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0044
MULTV D2 80
SETV D2 80
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0047
MULTV D2 8
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0044
MULTV D2 60
SETV D2 60
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0047
MULTV D2 6
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.2203; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #379 Body End
LOAD D2 0.0047; for() #379 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 17406; for() #379 End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0044
SUBV2 0 D2
STORE D2 0.0044
LOAD D2 0.0046; if() #1155 Test
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17575 ==; Test 'if'
PUSHR D4; if() #1155 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043; if() #1155 Body End
LOAD D2 0.0046; for() #378 Body End AND for() #378 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17397; for() #378 End
LOAD D2 0.0001; if() #1154 Body End AND if() #1156 Test
COMPAREV D2 86
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17831 ==; Test 'if'
PUSHR D4; if() #1156 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 4
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #380 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #380 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17831 ==; for() #380 TestFail?
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params AND for() #380 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV -20; UsrFunc[int Rand(int, int)] Params Start
PUSHV 20; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
SETV D2 0; for() #381 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #381 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17827 ==; for() #381 TestFail?
PUSHR D4; for() #381 Body Start
LOAD D2 0.0043; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params End
CALLFUNC 4.6343; UsrFunc[int EZB_TurnToAngle(int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 4.2408; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
ADDV D2 1.5000
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0044
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 5
SETV D2 5
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0044
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.2203; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #381 Body End
LOAD D2 0.0047; for() #381 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 17684; for() #381 End
LOAD D2 0.0046; for() #380 Body End AND for() #380 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17669; for() #380 End
LOAD D2 0.0001; if() #1156 Body End AND if() #1157 Test
COMPAREV D2 87
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18284 ==; Test 'if'
PUSHR D4; if() #1157 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0043
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #382 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #382 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17974 ==; for() #382 TestFail?
PUSHR D4; for() #382 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
SUBV D2 80
PUSHR D2
LOAD D2 0.0047
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0043
SUBV D2 60
PUSHR D2
LOAD D2 0.0047
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.2203; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #382 Body End
LOAD D2 0.0047; for() #382 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 17895; for() #382 End
SETV D2 0; for() #383 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #383 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18029 ==; for() #383 TestFail?
PUSHR D4; for() #383 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.2203; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #383 Body End
LOAD D2 0.0047; for() #383 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 17976; for() #383 End
SETV D2 35; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #384 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #384 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18086 ==; for() #384 TestFail?
PUSHR D4; for() #384 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.2203; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #384 Body End
LOAD D2 0.0047; for() #384 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 18033; for() #384 End
SETV D2 0; for() #385 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #385 LoopTest
COMPAREV D2 144
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18202 ==; for() #385 TestFail?
LOAD D2 0.0047; if() #1158 Test AND for() #385 Body Start
MODV D2 18
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18101 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1158 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1158 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043; InlineFunc[int WrapDegrees(int)] Params Start
PUSHR D2
LOAD D2 0.0047
MULTV D2 20
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 4.2408; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.7500
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.2203; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #385 Body End
LOAD D2 0.0047; for() #385 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 18088; for() #385 End
SETV D2 0; for() #386 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #386 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18284 ==; for() #386 TestFail?
PUSHR D4; for() #386 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
ADDV D2 90
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.2203; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #386 Body End
LOAD D2 0.0047; for() #386 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 18204; for() #386 End
LOAD D2 0.0001; if() #1157 Body End AND if() #1159 Test
COMPAREV D2 88
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18640 ==; Test 'if'
PUSHR D4; if() #1159 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #387 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #387 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18448 ==; for() #387 TestFail?
PUSHR D4; for() #387 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
SUBV D2 120
PUSHR D2
LOAD D2 0.0043
SUBV D2 130
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1918; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #387 Body End
LOAD D2 0.0047; for() #387 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 18377; for() #387 End
SETV D2 0; for() #388 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #388 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18543 ==; for() #388 TestFail?
PUSHR D4; for() #388 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 0.5000
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
SUBV D2 120
PUSHR D2
LOAD D2 0.0043
SUBV D2 130
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1918; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #388 Body End
LOAD D2 0.0047; for() #388 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 18450; for() #388 End
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #389 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #389 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18640 ==; for() #389 TestFail?
PUSHR D4; for() #389 Body Start
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 3
ADDV D2 0.7500
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
SUBV D2 120
PUSHR D2
LOAD D2 0.0047
MULTV D2 10
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0043
SUBV D2 130
PUSHR D2
LOAD D2 0.0047
MULTV D2 10
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1918; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #389 Body End
LOAD D2 0.0047; for() #389 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 18547; for() #389 End
LOAD D2 0.0001; if() #1159 Body End AND if() #1160 Test
COMPAREV D2 89
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18861 ==; Test 'if'
PUSHR D4; if() #1160 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
ADDV D2 8
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 4
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #390 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #390 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18861 ==; for() #390 TestFail?
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params AND for() #390 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV -20; UsrFunc[int Rand(int, int)] Params Start
PUSHV 20; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
SETV D2 0; for() #391 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #391 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18857 ==; for() #391 TestFail?
LOAD D2 0.0046; if() #1161 Test AND for() #391 Body Start
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18769 ==; Test 'if'
PUSHR D4; if() #1161 Body Start
LOAD D2 0.0043; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 4
ADDV D2 4
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #1161 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0044
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 5
SETV D2 5
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0044
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1918; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #391 Body End
LOAD D2 0.0047; for() #391 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 18746; for() #391 End
LOAD D2 0.0046; for() #390 Body End AND for() #390 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18731; for() #390 End
LOAD D2 0.0001; if() #1160 Body End AND if() #1162 Test
COMPAREV D2 90
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19641 ==; Test 'if'
PUSHR D4; if() #1162 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 4.2842; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 4.1092; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0043
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0013; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0012
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #392 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #392 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19004 ==; for() #392 TestFail?
PUSHR D4; for() #392 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
SUBV D2 80
PUSHR D2
LOAD D2 0.0047
MULTV D2 4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0043
SUBV D2 60
PUSHR D2
LOAD D2 0.0047
MULTV D2 3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 4.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1918; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #392 Body End
LOAD D2 0.0047; for() #392 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 18925; for() #392 End
SETV D2 0; for() #393 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #393 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19059 ==; for() #393 TestFail?
PUSHR D4; for() #393 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1918; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #393 Body End
LOAD D2 0.0047; for() #393 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 19006; for() #393 End
SETV D2 35; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #394 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #394 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19116 ==; for() #394 TestFail?
PUSHR D4; for() #394 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1918; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #394 Body End
LOAD D2 0.0047; for() #394 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 19063; for() #394 End
SETV D2 0; for() #395 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #395 LoopTest
COMPAREV D2 108
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19232 ==; for() #395 TestFail?
LOAD D2 0.0047; if() #1163 Test AND for() #395 Body Start
MODV D2 18
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19131 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1163 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1163 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043; InlineFunc[int WrapDegrees(int)] Params Start
PUSHR D2
LOAD D2 0.0047
MULTV D2 20
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 4.2408; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.7500
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1918; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #395 Body End
LOAD D2 0.0047; for() #395 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 19118; for() #395 End
SETV D2 0; for() #396 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #396 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19340 ==; for() #396 TestFail?
PUSHR D4; for() #396 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043; InlineFunc[int WrapDegrees(int)] Params Start
PUSHR D2
LOAD D2 0.0047
MULTV D2 20
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 4.2408; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.5000
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.9237; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0043
PUSHR D2
LOAD D2 0.0047
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1918; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #396 Body End
LOAD D2 0.0047; for() #396 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 19234; for() #396 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 40
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 0; for() #397 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #397 LoopTest
COMPAREV D2 24
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 19439 ==; for() #397 TestFail?
PUSHR D4; for() #397 Body Start
LOAD D2 0.0048; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0036; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 16
PUSHR D2
LOAD D2 0.0043
ADDV D2 60
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0036; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 16
PUSHR D2
LOAD D2 0.0043
ADDV D2 60
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHR D4
PUSHV 100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 400; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 4.2591; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHR D4
PUSHV 24; UsrFunc[int Rand(int, int)] Params Start
PUSHV 36; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
DIVV D2 10
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 3.1446; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0032; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 4.5404; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #397 Body End
LOAD D2 0.0047; for() #397 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 19348; for() #397 End
SETV D2 0; for() #398 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #398 LoopTest
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19496 ==; for() #398 TestFail?
PUSHR D4; for() #398 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
ADDV D2 60
PUSHR D2
LOAD D2 0.0043
ADDV D2 60
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1918; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #398 Body End
LOAD D2 0.0047; for() #398 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 19441; for() #398 End
SETV D2 0; for() #399 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #399 LoopTest
COMPAREV D2 36
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19570 ==; for() #399 TestFail?
LOAD D2 0.0047; if() #1164 Test AND for() #399 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19510 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1164 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1164 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
ADDV D2 60
PUSHR D2
LOAD D2 0.0043
ADDV D2 60
PUSHR D2
LOAD D2 0.0047
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0047
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1918; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #399 Body End
LOAD D2 0.0047; for() #399 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 19498; for() #399 End
SETV D2 0; for() #400 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #400 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19641 ==; for() #400 TestFail?
PUSHR D4; for() #400 Body Start
LOAD D2 0.0048; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0043
ADDV D2 60
PUSHR D2
LOAD D2 0.0043
ADDV D2 60
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0047; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0035
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1918; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #400 Body End
LOAD D2 0.0047; for() #400 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 19572; for() #400 End
SETV D2 0; if() #1162 Body End
STORE D2 0.0047
LOAD D2 0.0028; if() #1165 Test
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 0
GOTOCMP 19858 ==; Test 'if'
LOAD D2 0.0028; if() #599 Test AND if() #1165 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19736 ==; Test 'if'
LOAD D2 0.0028; if() #1166 Test AND if() #599 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 202
COMPAREV D2 0
GOTOCMP 19858 ==; Test 'if'
PUSHR D4; if(true) #600 [Opt:AlwaysOn] AND if() #1166 Body Start
LOAD D2 0.0035; UsrFunc[int EZB_BarrierShift_TransformAnimSize(npc, int)] Params Start
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[int EZB_BarrierShift_TransformAnimSize(npc, int)] Params End
CALLFUNC 3.9739; UsrFunc[int EZB_BarrierShift_TransformAnimSize(npc, int)] Call
POP D4
STORE D2 0.0046
LOAD D2 0.0046; InlineFunc[int Max(int, int)] Params Start AND if(true) #1167 [Opt:AlwaysOn]
PUSHVARGR D2
LOAD D2 0.0035; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_TILE_W
LOAD D2 0.0035
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_TILE_H; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
ADDV D2 8
STORE D2 0.0045
PUSHR D4
PUSHV 0; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0048; UsrFunc[int CenterX(ffc)] Params Start
PUSHR D2; UsrFunc[int CenterX(ffc)] Params End
CALLFUNC 2.1732; UsrFunc[int CenterX(ffc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0048; UsrFunc[int CenterY(ffc)] Params Start
PUSHR D2; UsrFunc[int CenterY(ffc)] Params End
CALLFUNC 2.1801; UsrFunc[int CenterY(ffc)] Call
POP D4
PUSHR D2
LOAD D2 0.0045
PUSHR D2
PUSHV 12
PUSHARGSV 0 0.0003; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.5331; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 16; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 4.6746; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0035; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 0
PUSHV 1; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params End
CALLFUNC 3.9797; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0028
SETR D0 D2
POP D2
WRITEPODARRAYVR 202 D2
SETV D2 1
STORE D2 0.0047; if() #1166 Body End
GOTO 19858; if() #599 Body End
LOAD D2 0.0028; if() #601 Test AND if() #599 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19802 ==; Test 'if'
SETV D2 0; if() #601 Body Start
STORE D2 0.0046
LOAD D2 0.0028; if() #602 Test
PUSHR D2
POP D0
READPODARRAYV D2 314
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19757 ==; Test 'if'
SETV D2 1; if() #602 Body Start
STORE D2 0.0046
GOTO 19769; if() #602 Body End
LOAD D2 0.0028; InlineFunc[int Rand(int)] Params Start AND if() #1168 Test AND if() #602 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 314
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19769 ==; Test 'if'
SETV D2 1; if() #1168 Body Start
STORE D2 0.0046; if() #1168 Body End
LOAD D2 0.0028; if() #602 Else End AND if() #603 Test
PUSHR D2
POP D0
READPODARRAYV D2 313
COMPAREV D2 0
GOTOCMP 19786 ==; Test 'if'
LOAD D2 0.0028; if() #603 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 313
SUBV D2 1
PUSHR D2
LOAD D2 0.0028
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2
GOTO 19858; if() #603 Body End
LOAD D2 0.0046; if() #1169 Test AND if() #603 Else Start
COMPAREV D2 0
GOTOCMP 19858 ==; Test 'if'
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params AND if() #1169 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0035; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHARGSV 0 0.0002; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params End
CALLFUNC 3.9797; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Call
POP D4
SETV D2 1
STORE D2 0.0047; if() #1169 Body End
GOTO 19858; if() #603 Else End AND if() #601 Body End
SETV D2 0; if() #601 Else Start
STORE D2 0.0046
LOAD D2 0.0028; if() #604 Test
PUSHR D2
POP D0
READPODARRAYV D2 314
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19815 ==; Test 'if'
SETV D2 1; if() #604 Body Start
STORE D2 0.0046
GOTO 19827; if() #604 Body End
LOAD D2 0.0028; InlineFunc[int Rand(int)] Params Start AND if() #1170 Test AND if() #604 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 314
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19827 ==; Test 'if'
SETV D2 1; if() #1170 Body Start
STORE D2 0.0046; if() #1170 Body End
LOAD D2 0.0028; if() #604 Else End AND if() #605 Test
PUSHR D2
POP D0
READPODARRAYV D2 313
COMPAREV D2 0
GOTOCMP 19844 ==; Test 'if'
LOAD D2 0.0028; if() #605 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 313
SUBV D2 1
PUSHR D2
LOAD D2 0.0028
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2
GOTO 19858; if() #605 Body End
LOAD D2 0.0046; if() #1171 Test AND if() #605 Else Start
COMPAREV D2 0
GOTOCMP 19858 ==; Test 'if'
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params AND if() #1171 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0035; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params End
CALLFUNC 3.9797; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Call
POP D4; if() #1171 Body End
LOAD D2 0.0047; if() #605 Else End AND if() #601 Else End AND if() #599 Else End AND if() #1165 Body End AND if() #1172 Test
COMPAREV D2 0
GOTOCMP 20362 ==; Test 'if'
PUSHR D4; if() #1172 Body Start
PUSHV 512; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 256; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 7168; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 65536; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 16384; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 65538; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 1; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 16384; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 16; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 8; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 300
STORE D2 0.0027
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 301
STORE D2 0.0026
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 302
STORE D2 0.0025
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 303
STORE D2 0.0024
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 304
STORE D2 0.0023
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 305
STORE D2 0.0022
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 306
STORE D2 0.0021
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 307
STORE D2 0.0020
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 308
STORE D2 0.0019
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0018
SETV D2 0
PUSHR D2
LOAD D2 0.0031
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0031
SETR D0 D2
POP D2
WRITEPODARRAYVR 100 D2
PUSHR D4
LOAD D2 0.0028; UsrFunc[void EZB_InitVars(int)] Params Start
PUSHR D2; UsrFunc[void EZB_InitVars(int)] Params End
CALLFUNC 4.4507; UsrFunc[void EZB_InitVars(int)] Call
POP D4
SETV D2 0
STORE D2 0.0017
SETV D2 0
STORE D2 0.0016
LOAD D2 0.0026; if() #606 Test
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19974 ==; Test 'if'
SETV D2 44; if() #606 Body Start
STORE D2 0.0017
GOTO 20005; if() #606 Body End
LOAD D2 0.0026; if() #607 Test AND if() #606 Else Start
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19982 ==; Test 'if'
SETV D2 45; if() #607 Body Start
STORE D2 0.0017
GOTO 20005; if() #607 Body End
LOAD D2 0.0026; if() #608 Test AND if() #607 Else Start
COMPAREV D2 46
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19990 ==; Test 'if'
SETV D2 46; if() #608 Body Start
STORE D2 0.0017
GOTO 20005; if() #608 Body End
LOAD D2 0.0026; if() #609 Test AND if() #608 Else Start
COMPAREV D2 47
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19998 ==; Test 'if'
SETV D2 47; if() #609 Body Start
STORE D2 0.0017
GOTO 20005; if() #609 Body End
LOAD D2 0.0026; if() #1173 Test AND if() #609 Else Start
COMPAREV D2 48
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20005 ==; Test 'if'
SETV D2 48; if() #1173 Body Start
STORE D2 0.0017; if() #1173 Body End
LOAD D2 0.0017; if() #609 Else End AND if() #608 Else End AND if() #607 Else End AND if() #606 Else End AND if() #1174 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 20016 ==; Test 'if'
LOAD D2 0.0025; if() #1174 Body Start
STORE D2 0.0026
LOAD D2 0.0024
STORE D2 0.0025
SETV D2 0
STORE D2 0.0024; if() #1174 Body End
LOAD D2 0.0023
ANDV D2 15
STORE D2 0.0015
LOAD D2 0.0023; InlineFunc[int Floor(int)] Params Start
RSHIFTV D2 4; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
ANDV D2 15
STORE D2 0.0014
LOAD D2 0.0018; if() #1175 Test
ANDV D2 512
COMPAREV D2 0
GOTOCMP 20034 !=
LOAD D2 0.0018
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 20034 !=
SETV D2 1
GOTO 20035
SETV D2 0
COMPAREV D2 0
GOTOCMP 20044 ==; Test 'if'
PUSHR D4; if() #1175 Body Start
PUSHV 8; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 16; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1175 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 312
PUSHR D2
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0024
PUSHR D2
LOAD D2 0.0031
PUSHR D2
LOAD D2 0.0029
PUSHR D2; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.3952; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0021
ANDV D2 15
STORE D2 0.0013
LOAD D2 0.0021
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0012
LOAD D2 0.0012; if() #1176 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20082 ==; Test 'if'
LOAD D2 0.0013; if() #1176 Body Start
STORE D2 0.0012; if() #1176 Body End
PUSHR D4
LOAD D2 0.0013; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0013
PUSHR D4
LOAD D2 0.0012; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0012
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0011
SETR D2 GD12; if() #1177 Test
PUSHR D2
LOAD D2 0.0013
POP D3
COMPARER D3 D2
GOTOCMP 20117 !=
SETR D2 GD13
PUSHR D2
LOAD D2 0.0012
POP D3
COMPARER D3 D2
GOTOCMP 20117 !=
SETV D2 0
GOTO 20118
SETV D2 1
COMPAREV D2 0
GOTOCMP 20132 ==; Test 'if'
PUSHR D4; if() #1177 Body Start
LOAD D2 0.0048; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
PUSHARGSV -1 0.0002
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params End
CALLFUNC 2.9532; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Call
POP D4; if() #1177 Body End
PUSHR D4
LOAD D2 0.0035; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0015
PUSHR D2; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params End
CALLFUNC 2.9296; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Call
POP D4
LOAD D2 0.0018; if() #610 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 20154 ==; Test 'if'
PUSHR D4; if() #610 Body Start
PUSHV 512; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
GOTO 20162; if() #610 Body End
LOAD D2 0.0018; if() #1178 Test AND if() #610 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 20162 ==; Test 'if'
PUSHR D4; if() #1178 Body Start
PUSHV 256; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1178 Body End
LOAD D2 0.0018; if() #610 Else End AND if() #1179 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 20170 ==; Test 'if'
PUSHR D4; if() #1179 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1179 Body End
LOAD D2 0.0018; if() #611 Test
ANDV D2 4
COMPAREV D2 0
GOTOCMP 20214 ==; Test 'if'
PUSHR D4; if() #611 Body Start
PUSHV 7168; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 65536; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0048
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0018; if() #1180 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 20204 ==
PUSHR D4
CALLFUNC 2.9280; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 20204 !=
SETV D2 1
GOTO 20205
SETV D2 0
COMPAREV D2 0
GOTOCMP 20222 ==; Test 'if'
PUSHR D4; if() #1180 Body Start
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 8
SETR GD3 D2; if() #1180 Body End
GOTO 20222; if() #611 Body End
LOAD D2 0.0018; if() #1181 Test AND if() #611 Else Start
ANDV D2 8
COMPAREV D2 0
GOTOCMP 20222 ==; Test 'if'
PUSHR D4; if() #1181 Body Start
PUSHV 65538; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1181 Body End
LOAD D2 0.0018; if() #611 Else End AND if() #1182 Test
ANDV D2 256
COMPAREV D2 0
GOTOCMP 20230 ==; Test 'if'
PUSHR D4; if() #1182 Body Start
PUSHV 1; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1182 Body End
SETV D2 -1
STORE D2 0.0010
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
STORE D2 0.0009
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0035; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0007
SETV D2 0
STORE D2 0.0039
SETV D2 0
STORE D2 0.0038
SETV D2 -1
STORE D2 0.0005
LOAD D2 0.0027; if() #1184 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20304 ==; Test 'if'
SETV D3 360; InlineFunc[int Rand(int)] Params AND if() #1184 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0035; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0035; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0038; if() #1184 Body End
LOAD D2 0.0027; if() #1185 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20312 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #1185 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0008; if() #1185 Body End
LOAD D2 0.0027; if() #1186 Test
COMPAREV D2 12
GOTOCMP 20320 ==
LOAD D2 0.0027
COMPAREV D2 13
GOTOCMP 20320 ==
SETV D2 0
GOTO 20321
SETV D2 1
COMPAREV D2 0
GOTOCMP 20328 ==; Test 'if'
LOAD D2 0.0035; if() #1186 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0007; if() #1186 Body End
LOAD D2 0.0028; if() #1187 Test
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20342 ==; Test 'if'
SETV D2 0; if() #1187 Body Start
PUSHR D2
LOAD D2 0.0028
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2; if() #1187 Body End
SETV D2 0; for() #401 setup
STORE D2 0.0047
LOAD D2 0.0047; for() #401 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20362 ==; for() #401 TestFail?
SETV D2 0; for() #401 Body Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0047
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #401 Body End
LOAD D2 0.0047; for() #401 LoopIncrement
ADDV D2 1
STORE D2 0.0047
GOTO 20344; for() #401 End
LOAD D2 0.0011; if() #1172 Body End
SETR GD10 D2
LOAD D2 0.0035
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
STORE D2 0.0009
LOAD D2 0.0027; if() #1188 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20402 ==; Test 'if'
SETV D3 360; InlineFunc[int Rand(int)] Params AND if() #1188 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0035; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0035; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0043
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0038; if() #1188 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 4.2434; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0028
SETR D0 D2
POP D2
WRITEPODARRAYVR 319 D2; if() #1028 Body End
PUSHR D4
LOAD D2 0.0048; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while(true) #9 Body [Opt:AlwaysOn] End
GOTO 549; while() #9 End
LOAD D3 0.0006
DEALLOCATEMEMR D3
LOAD D3 0.0028
DEALLOCATEMEMR D3
LOAD D3 0.0029
DEALLOCATEMEMR D3
LOAD D3 0.0031
DEALLOCATEMEMR D3
LOAD D3 0.0034
DEALLOCATEMEMR D3
LOAD D3 0.0036
DEALLOCATEMEMR D3
LOAD D3 0.0037
DEALLOCATEMEMR D3; [Opt:NeverRet] AND void run(int) Body End
PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
SETR D4 SP2
LOAD D2 0.0008; if() #1225 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20468 ==; Test 'if'
PUSHR D4; if() #1225 Body Start
LOAD D2 0.0007; UsrFunc[void EZBE_ExpandingCircle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void EZBE_ExpandingCircle(int, int, int, int)] Params End
CALLFUNC 4.7208; UsrFunc[void EZBE_ExpandingCircle(int, int, int, int)] Call
POP D4; if() #1225 Body End
LOAD D2 0.0008; if() #1226 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20490 ==; Test 'if'
PUSHR D4; if() #1226 Body Start
LOAD D2 0.0007; UsrFunc[void EZBE_WallBounce(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void EZBE_WallBounce(int, int, int, int, int, int, int)] Params End
CALLFUNC 4.9277; UsrFunc[void EZBE_WallBounce(int, int, int, int, int, int, int)] Call
POP D4; if() #1226 Body End
LOAD D2 0.0008; if() #1227 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20510 ==; Test 'if'
LOAD D2 0.0007; UsrFunc[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Params Start AND if() #1227 Body Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Params End
CALLFUNC 4.7338; UsrFunc[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Call AND [Opt:NeverRet] AND if() #1227 Body End
LOAD D2 0.0008; if() #1228 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20532 ==; Test 'if'
PUSHR D4; if() #1228 Body Start
LOAD D2 0.0007; UsrFunc[bool EZBE_Lightning(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool EZBE_Lightning(int, int, int, int, int, int, int)] Params End
CALLFUNC 4.7758; UsrFunc[bool EZBE_Lightning(int, int, int, int, int, int, int)] Call
POP D4; if() #1228 Body End
LOAD D2 0.0008; if() #1229 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20554 ==; Test 'if'
PUSHR D4; if() #1229 Body Start
LOAD D2 0.0007; UsrFunc[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8847; UsrFunc[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Call
POP D4; if() #1229 Body End
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
POPARGS D5 0.0009
QUIT; void run(int, int, int, int, int, int, int, int) Body End
PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
SETR D4 SP2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #34 Body [Opt:AlwaysOn]
GOTO 20575; while() #34 End AND [Opt:NeverRet] AND void run(int, int, int, int, int, int, int, int) Body End
PUSHR D0; void run(int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR REFFFC; void run(int, int, int, int, int, int, int) Body Start
SETR D4 SP2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #31 Body [Opt:AlwaysOn]
GOTO 20586; while() #31 End AND [Opt:NeverRet] AND void run(int, int, int, int, int, int, int) Body End
PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
SETR D4 SP2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #35 Body [Opt:AlwaysOn]
GOTO 20598; while() #35 End AND [Opt:NeverRet] AND void run(int, int, int, int, int, int, int, int) Body End
SETR D4 SP2; Func[int DirNormal(int)] Body Start
LOAD D2 0; switch() #9 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 8
GOTOCMP 20620 ==; case '80000'
COMPAREV SWITCHKEY 9
GOTOCMP 20622 ==; case '90000'
COMPAREV SWITCHKEY 10
GOTOCMP 20624 ==; case '100000'
COMPAREV SWITCHKEY 11
GOTOCMP 20626 ==; case '110000'
COMPAREV SWITCHKEY 12
GOTOCMP 20628 ==; case '120000'
COMPAREV SWITCHKEY 13
GOTOCMP 20630 ==; case '130000'
COMPAREV SWITCHKEY 14
GOTOCMP 20632 ==; case '140000'
COMPAREV SWITCHKEY 15
GOTOCMP 20634 ==; case '150000'
GOTO 20636; switch() #9 NoMatch
SETV D2 0; Case block AND return Start
GOTO 20637; return End
SETV D2 5; Case block AND return Start
GOTO 20637; return End
SETV D2 3; Case block AND return Start
GOTO 20637; return End
SETV D2 7; Case block AND return Start
GOTO 20637; return End
SETV D2 1; Case block AND return Start
GOTO 20637; return End
SETV D2 6; Case block AND return Start
GOTO 20637; return End
SETV D2 2; Case block AND return Start
GOTO 20637; return End
SETV D2 4; Case block AND return Start
GOTO 20637; return End
LOAD D2 0; Case block AND return Start
POP D5; return End
RETURNFUNC; Func[int DirNormal(int)] Body End
PUSHARGSV 0 0.0004; Func[int ComboX(int)] Body Start
SETR D4 SP2
SETR D2 REGION_ID; if() #26 Test
COMPAREV D2 0
GOTOCMP 20677 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Floor(int)] Params Start AND if() #26 Body Start
DIVV D2 176; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0003
SETR D2 REGION_SCREEN_WIDTH
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0002
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
LOAD D2 0.0004
MODV D2 176
STORE D2 0
LOAD D2 0.0001; return Start
MULTV D2 16
MULTV D2 16
PUSHR D2
LOAD D2 0
MODV D2 16
MULTV D2 16
POP D3
ADDR D2 D3
GOTO 20680; return End AND if() #26 Body End
LOAD D2 0.0004; return Start AND if() #26 Else Start
MODV D2 16
MULTV D2 16
POPARGS D5 0.0005; return End AND if() #26 Else End
RETURNFUNC; Func[int ComboX(int)] Body End
PUSHARGSV 0 0.0004; Func[int ComboY(int)] Body Start
SETR D4 SP2
SETR D2 REGION_ID; if() #27 Test
COMPAREV D2 0
GOTOCMP 20713 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Floor(int)] Params Start AND if() #27 Body Start
DIVV D2 176; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0003
SETR D2 REGION_SCREEN_WIDTH
STORE D2 0.0002
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0002
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0004
MODV D2 176
STORE D2 0
LOAD D2 0.0001; return Start
MULTV D2 11
MULTV D2 16
PUSHR D2
LOAD D2 0
ANDV D2 240
POP D3
ADDR D2 D3
GOTO 20715; return End AND if() #27 Body End
LOAD D2 0.0004; return Start AND if() #27 Else Start
ANDV D2 240
POPARGS D5 0.0005; return End AND if() #27 Else End
RETURNFUNC; Func[int ComboY(int)] Body End
SETR D4 SP2; Func[int RadianAngle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR D4 SP2; Func[int Randf(int)] Body Start
SETV D2 0; InlineFunc[long randgen::LRand(long)] Params Start AND return Start
PUSHR D2
LOAD D2 0; InlineFunc[long randgen::LRand(long)] Params End
POP REFRNG; InlineFunc[long randgen::LRand(long)] Body Start
RNGLRAND2 D2; InlineFunc[long randgen::LRand(long)] Body End
POP D5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR D4 SP2; Func[int AngleDir4(int)] Body Start
LOAD D2 0; InlineFunc[int WrapDegrees(int)] Params
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0
LOAD D2 0; if() #1 Test
COMPAREV D2 135
GOTOCMP 20773 >
LOAD D2 0
COMPAREV D2 45
GOTOCMP 20773 <=
SETV D2 1
GOTO 20774
SETV D2 0
COMPAREV D2 0
GOTOCMP 20778 ==; Test 'if'
SETV D2 1; return Start AND if() #1 Body Start
GOTO 20805; return End AND if() #1 Body End
LOAD D2 0; if() #2 Test AND if() #1 Else Start
COMPAREV D2 45
GOTOCMP 20786 >
LOAD D2 0
COMPAREV D2 -45
GOTOCMP 20786 <=
SETV D2 1
GOTO 20787
SETV D2 0
COMPAREV D2 0
GOTOCMP 20791 ==; Test 'if'
SETV D2 3; return Start AND if() #2 Body Start
GOTO 20805; return End AND if() #2 Body End
LOAD D2 0; if() #3 Test AND if() #2 Else Start
COMPAREV D2 -45
GOTOCMP 20799 >
LOAD D2 0
COMPAREV D2 -135
GOTOCMP 20799 <=
SETV D2 1
GOTO 20800
SETV D2 0
COMPAREV D2 0
GOTOCMP 20804 ==; Test 'if'
SETV D2 0; return Start AND if() #3 Body Start
GOTO 20805; return End AND if() #3 Body End
SETV D2 2; return Start AND if() #3 Else Start
POP D5; return End AND if() #3 Else End AND if() #2 Else End AND if() #1 Else End
RETURNFUNC; Func[int AngleDir4(int)] Body End
SETR D4 SP2; Func[int AngleDir8(int)] Body Start
LOAD D2 0; InlineFunc[int WrapDegrees(int)] Params
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0
LOAD D2 0; if() #4 Test
COMPAREV D2 157.5000
GOTOCMP 20819 >
LOAD D2 0
COMPAREV D2 112.5000
GOTOCMP 20819 <=
SETV D2 1
GOTO 20820
SETV D2 0
COMPAREV D2 0
GOTOCMP 20824 ==; Test 'if'
SETV D2 6; return Start AND if() #4 Body Start
GOTO 20903; return End AND if() #4 Body End
LOAD D2 0; if() #5 Test AND if() #4 Else Start
COMPAREV D2 112.5000
GOTOCMP 20832 >
LOAD D2 0
COMPAREV D2 67.5000
GOTOCMP 20832 <=
SETV D2 1
GOTO 20833
SETV D2 0
COMPAREV D2 0
GOTOCMP 20837 ==; Test 'if'
SETV D2 1; return Start AND if() #5 Body Start
GOTO 20903; return End AND if() #5 Body End
LOAD D2 0; if() #6 Test AND if() #5 Else Start
COMPAREV D2 67.5000
GOTOCMP 20845 >
LOAD D2 0
COMPAREV D2 22.5000
GOTOCMP 20845 <=
SETV D2 1
GOTO 20846
SETV D2 0
COMPAREV D2 0
GOTOCMP 20850 ==; Test 'if'
SETV D2 7; return Start AND if() #6 Body Start
GOTO 20903; return End AND if() #6 Body End
LOAD D2 0; if() #7 Test AND if() #6 Else Start
COMPAREV D2 22.5000
GOTOCMP 20858 >
LOAD D2 0
COMPAREV D2 -22.5000
GOTOCMP 20858 <=
SETV D2 1
GOTO 20859
SETV D2 0
COMPAREV D2 0
GOTOCMP 20863 ==; Test 'if'
SETV D2 3; return Start AND if() #7 Body Start
GOTO 20903; return End AND if() #7 Body End
LOAD D2 0; if() #8 Test AND if() #7 Else Start
COMPAREV D2 -22.5000
GOTOCMP 20871 >
LOAD D2 0
COMPAREV D2 -67.5000
GOTOCMP 20871 <=
SETV D2 1
GOTO 20872
SETV D2 0
COMPAREV D2 0
GOTOCMP 20876 ==; Test 'if'
SETV D2 5; return Start AND if() #8 Body Start
GOTO 20903; return End AND if() #8 Body End
LOAD D2 0; if() #9 Test AND if() #8 Else Start
COMPAREV D2 -67.5000
GOTOCMP 20884 >
LOAD D2 0
COMPAREV D2 -112.5000
GOTOCMP 20884 <=
SETV D2 1
GOTO 20885
SETV D2 0
COMPAREV D2 0
GOTOCMP 20889 ==; Test 'if'
SETV D2 0; return Start AND if() #9 Body Start
GOTO 20903; return End AND if() #9 Body End
LOAD D2 0; if() #10 Test AND if() #9 Else Start
COMPAREV D2 -112.5000
GOTOCMP 20897 >
LOAD D2 0
COMPAREV D2 -157.5000
GOTOCMP 20897 <=
SETV D2 1
GOTO 20898
SETV D2 0
COMPAREV D2 0
GOTOCMP 20902 ==; Test 'if'
SETV D2 4; return Start AND if() #10 Body Start
GOTO 20903; return End AND if() #10 Body End
SETV D2 2; return Start AND if() #10 Else Start
POP D5; return End AND if() #10 Else End AND if() #9 Else End AND if() #8 Else End AND if() #7 Else End AND if() #6 Else End AND if() #5 Else End AND if() #4 Else End
RETURNFUNC; Func[int AngleDir8(int)] Body End
PUSHARGSV 0 0.0007; Func[void AutoGhost()] Body Start
SETR D4 SP2
SETR D2 GD26; if() #11 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
GOTOCMP 21281 !=; Test 'if' AND return (Void) AND if() #11 Body
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
SETR D2 NPCCOUNT; for() #2 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #2 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 21281 ==; for() #2 TestFail?
LOAD D2 0.0003; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #2 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
LOAD D2 0.0006; if() #12 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21277 !=; Test 'if' AND continue 1; AND if() #12 Body
LOAD D2 0.0006; if() #13 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 21277 !=; Test 'if' AND continue 1; AND if() #13 Body
LOAD D2 0.0006; if() #14 Test AND if(false) #13 [Opt:AlwaysOff]
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 21277 !=; Test 'if' AND continue 1; AND if() #14 Body
LOAD D2 0.0006; unless() #15 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 21277 ==; Test 'unless' AND continue 1; AND unless() #15 Body
LOAD D2 0.0006; unless() #16 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 21277 ==; Test 'unless' AND continue 1; AND unless() #16 Body
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0006; if(false) #14 [Opt:AlwaysOff]
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0002
LOAD D2 0.0002; if() #17 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21012 ==; Test 'if'
ALLOCATEMEMV D2 2 0; if() #17 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0006; UsrFunc[int __AutoGhostParseName(npc, int[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int __AutoGhostParseName(npc, int[])] Params End
CALLFUNC 2.1283; UsrFunc[int __AutoGhostParseName(npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0002
LOAD D3 0
DEALLOCATEMEMR D3; if() #17 Body End
LOAD D2 0.0002; if() #18 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21031 ==; Test 'if'
ALLOCATEMEMV D2 47 0; if() #18 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, script <= 0\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 2.1583; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 21277; continue 1; AND if() #18 Body End
LOAD D2 0.0002; if() #19 Test
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 21050 ==; Test 'if'
ALLOCATEMEMV D2 48 0; if() #19 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, script > 511\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 2.1583; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 21277; continue 1; AND if() #19 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR D2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 2.1634; UsrFunc[int FindUnusedFFC(int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0005; unless() #20 Test
COMPAREV D2 0
GOTOCMP 21073 !=; Test 'unless'
ALLOCATEMEMV D2 52 0; unless() #20 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, no ffc available\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 2.1583; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 21277; continue 1; AND unless() #20 Body End
LOAD D2 0.0005; InlineFunc[ffc screendata::LoadFFC(int)] Params
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0004
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
SETV D2 1; if(true) #21 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0001; if() #22 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 21247 ==; Test 'if'
LOAD D2 0.0001; if() #23 Test AND if() #22 Body Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 21247 ==; Test 'if'
SETV D2 3; if() #23 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
SETV D2 1024
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #23 Body End
LOAD D2 0.0001; if() #22 Body End AND if() #15 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21265 ==; Test 'if'
SETV D2 1; if() #15 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 21277; if() #15 Body End
LOAD D2 0.0001; if() #15 Else Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #15 Else End
LOAD D2 0.0003; for() #2 Body End AND for() #2 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 20919; for() #2 End
POPARGS D5 0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0 0.0009; Func[int __AutoGhostParseName(npc, int[])] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 64 0
STORE D2 0.0008
ALLOCATEMEMV D2 64 0
STORE D2 0.0007
SETV D2 1
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End
STOREV 0 0.0006; for() #145 setup
LOAD D2 0.0006; for() #145 LoopTest
COMPAREV D2 63
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21521 ==; for() #145 TestFail?
LOAD D2 0.0008; if() #550 Test AND for() #145 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 64
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21517 ==; Test 'if'
LOAD D2 0.0008; if() #550 Body Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0005
PUSHR D4; if() #285 Test
LOAD D2 0.0005; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 3.8537; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21424 ==; Test 'if'
STOREV 0 0.0004; if() #285 Body Start
LOAD D2 0.0006; for() #146 setup
ADDV D2 1
STORE D2 0.0006
PUSHR D4; for() #146 LoopTest
LOAD D2 0.0008; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 3.8537; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21366 ==; for() #146 TestFail?
LOAD D2 0.0008; for() #146 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #146 Body End
LOAD D2 0.0006; for() #146 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 21334; for() #146 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006
LOAD D2 0.0009; if() #551 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21517 ==; Test 'if'
ALLOCATEMEMV D2 59 0; if() #551 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script does not exist.\n"
STORE D2 0.0002
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Script name: %s\n"
STORE D2 0
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 21581; return End
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3; if() #551 Body End
GOTO 21517; if() #285 Body End
LOAD D2 0.0005; if() #552 Test AND if() #285 Else Start
COMPAREV D2 48
GOTOCMP 21430 <
LOAD D2 0.0005
COMPAREV D2 57
GOTOCMP 21435 <=
LOAD D2 0.0005
COMPAREV D2 45
GOTOCMP 21435 ==
SETV D2 0
GOTO 21436
SETV D2 1
COMPAREV D2 0
GOTOCMP 21517 ==; Test 'if'
STOREV 0 0.0004; if() #552 Body Start
LOAD D2 0.0005; if() #553 Test
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21455 ==; Test 'if'
SETV D2 45; if() #553 Body Start
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 1
STORE D2 0.0004
LOAD D2 0.0006
ADDV D2 1
STORE D2 0.0006; if() #553 Body End
LOAD D2 0.0006; for() #147 setup
ADDV D2 1
STORE D2 0.0006
LOAD D2 0.0008; for() #147 LoopTest
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 48
GOTOCMP 21474 <
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 57
GOTOCMP 21474 >
SETV D2 1
GOTO 21475
SETV D2 0
COMPAREV D2 0
GOTOCMP 21497 ==; for() #147 TestFail?
LOAD D2 0.0008; for() #147 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #147 Body End
LOAD D2 0.0006; for() #147 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 21458; for() #147 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int atoi(char32[])] Params Start
SETR D3 D2; InlineFunc[int atoi(char32[])] Params End
ATOI D2 D3; InlineFunc[int atoi(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006; if() #552 Body End
LOAD D2 0.0006; if() #285 Else End AND if() #550 Body End AND for() #145 Body End AND for() #145 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 21301; for() #145 End
LOAD D2 0.0009; if() #555 Test AND unless(false) #554 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21571 ==; Test 'if'
ALLOCATEMEMV D2 54 0; if() #555 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script not found.\n"
STORE D2 0.0005
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Enemy name: %s\n"
STORE D2 0.0003
ALLOCATEMEMV D2 55 0
WRITEPODSTRING D2 "  Script name should start after this character: %c\n"
STORE D2 0.0001
LOAD D2 0.0005; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGV 64; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 21581; return End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3; if() #555 Body End
SETV D2 1; return Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 21581; return End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0011
RETURNFUNC; Func[int __AutoGhostParseName(npc, int[])] Body End
SETR D4 SP2; Func[void __AutoGhostKill(npc)] Body Start
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
POP D5
RETURNFUNC; Func[void __AutoGhostKill(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
LOAD D2 0.0002; InlineFunc[int Max(int, int)] Params Start AND for() #38 setup
ADDV D2 1
PUSHVARGR D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0
LOAD D2 0; for() #38 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21692 ==; for() #38 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #38 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #151 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 21668 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 21668 ==
SETV D2 0
GOTO 21669
SETV D2 1
COMPAREV D2 0
GOTOCMP 21688 ==; Test 'if'
LOAD D2 0.0001; unless() #152 Test AND if() #151 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 21688 !=; Test 'unless'
LOAD D2 0.0001; unless() #153 Test AND unless() #152 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 21688 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #153 Body Start
GOTO 21693; return End AND unless() #153 Body End
LOAD D2 0; unless() #152 Body End AND if() #151 Body End AND for() #38 Body End AND for() #38 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 21643; for() #38 End
SETV D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR D4 SP2; Func[int CenterLinkX()] Body Start
SETV D2 0.0001; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
RETURNFUNC; return End AND Func[int CenterLinkX()] Body End
SETR D4 SP2; Func[int CenterLinkY()] Body Start
SETV D2 0.0001; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
RETURNFUNC; return End AND Func[int CenterLinkY()] Body End
SETR D4 SP2; Func[int CenterX(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(eweapon)] Body End
SETR D4 SP2; Func[int CenterX(ffc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(ffc)] Body End
SETR D4 SP2; Func[int CenterX(npc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(npc)] Body End
SETR D4 SP2; Func[int CenterY(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(eweapon)] Body End
SETR D4 SP2; Func[int CenterY(ffc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(ffc)] Body End
SETR D4 SP2; Func[int CenterY(npc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(npc)] Body End
SETR D4 SP2; Func[int Rand(int, int)] Body Start
SETV D2 0; InlineFunc[int randgen::Rand(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SETR D3 D2; InlineFunc[int randgen::Rand(int, int)] Params End
POP D2; InlineFunc[int randgen::Rand(int, int)] Body Start
POP REFRNG
RNGRAND3 D2 D3; InlineFunc[int randgen::Rand(int, int)] Body End
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int Rand(int, int)] Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #17 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21871 ==; Test 'if'
LOAD D2 0.0001; if() #17 Body Start
STORE D2 0.0002
GOTO 21881; if() #17 Body End
LOAD D2 0.0002; if() #65 Test AND if() #17 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 21881 ==; Test 'if'
LOAD D2 0; if() #65 Body Start
STORE D2 0.0002; if() #65 Body End
LOAD D2 0.0002; if() #17 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR D4 SP2
SETR D2 LINKHP; if() #66 Test
COMPAREV D2 0
GOTOCMP 21892 >
GOTO 21892
SETV D2 1
GOTO 21893
SETV D2 0
COMPAREV D2 0
GOTOCMP 21942 ==; Test 'if'
STOREV 0 0.0001; if() #66 Body Start
STOREV 1 0; for() #3 setup
LOAD D2 0; for() #3 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21942 ==; for() #3 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #3 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
SETR D2 GD24; if() #67 Test
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
RSHIFTV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
ANDV D2 15
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 21938 ==; Test 'if'
SETV D2 0; if() #67 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #67 Body End
LOAD D2 0; for() #3 Body End AND for() #3 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 21897; for() #3 End
POPARGS D5 0.0002; if() #66 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
SETR D4 SP2; Func[bool ClockIsActive()] Body Start
SETR D2 GD26; return Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I!=
RETURNFUNC; return End AND Func[bool ClockIsActive()] Body End
PUSHV 0; Func[lweapon CreateLWeaponAt(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[lweapon screendata::CreateLWeapon(int)] Params
CREATELWEAPONR D2; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body Start
SETR D2 REFLWPN; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body End
STORE D2 0
LOAD D2 0; InlineFunc[bool lweapon::isValid()] Params AND if() #91 Test
ISVALIDLWPN D2; InlineFunc[bool lweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 21980 ==; Test 'if'
LOAD D2 0.0002; if() #91 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #91 Body End
LOAD D2 0; return Start
POPARGS D5 0.0004; return End
RETURNFUNC; Func[lweapon CreateLWeaponAt(int, int, int)] Body End
PUSHV 0; Func[npc CreateNPCAt(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[npc screendata::CreateNPC(int)] Params
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND if() #92 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 22011 ==; Test 'if'
LOAD D2 0.0002; if() #92 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #92 Body End
LOAD D2 0; return Start
POPARGS D5 0.0004; return End
RETURNFUNC; Func[npc CreateNPCAt(int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void DrawEWeaponShadow(eweapon)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
SUBV D2 1
MULTV D2 16
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHV 1; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #34 [Opt:AlwaysOn]
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
PUSHR D2
PUSHARGSV 1 0.0002
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(eweapon)] Body End
PUSHARGSV 0 0.0009; Func[void DrawGhostFFCs()] Body Start
SETR D4 SP2
SETV D2 18; if() #101 Test
PUSHR D2
POP D0
SETR D2 SCREEN_FLAG
COMPAREV D2 0
GOTOCMP 22093 ==; Test 'if'
PUSHR D4; unless() #102 Test AND if() #101 Body Start
CALLFUNC 2.2276; UsrFunc[bool __HaveAmulet()] Call
POP D4
COMPAREV D2 0
GOTOCMP 22274 ==; Test 'unless' AND return (Void) AND unless() #102 Body
STOREV 0 0.0008; if() #101 Body End
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
SETV D2 49; if() #36 Test AND if(true) #35 [Opt:AlwaysOn]
PUSHR D2
POP D0
SETR D2 SCREEN_FLAG
COMPAREV D2 0
GOTOCMP 22109 ==; Test 'if'
SETV D2 1; if() #36 Body Start
STORE D2 0.0003
GOTO 22111; if() #36 Body End
SETV D2 2; if() #36 Else Start
STORE D2 0.0003; if() #36 Else End
SETV D2 4
STORE D2 0.0002
STOREV 1 0.0001; for() #16 setup
LOAD D2 0.0001; for() #16 LoopTest
PUSHR D2
SETR D2 NPCCOUNT
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 22274 ==; for() #16 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #16 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0006; UsrFunc[int[] __GetDrawingArray(npc)] Params Start
PUSHR D2; UsrFunc[int[] __GetDrawingArray(npc)] Params End
CALLFUNC 2.2295; UsrFunc[int[] __GetDrawingArray(npc)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008; unless() #103 Test
COMPAREV D2 0
GOTOCMP 22270 ==; Test 'unless' AND continue 1; AND unless() #103 Body
SETR D2 GD26; if() #104 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 22154 ==; Test 'if'
LOAD D2 0.0008; if() #105 Test AND if() #104 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 22270 !=; Test 'if' AND continue 1; AND if() #105 Body
LOAD D2 0.0008; if() #104 Body End AND if() #37 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 22166 ==; Test 'if'
SETV D2 64; if() #37 Body Start
STORE D2 0.0005
GOTO 22168; if() #37 Body End
SETV D2 128; if() #37 Else Start
STORE D2 0.0005; if() #37 Else End
LOAD D2 0.0008; if() #38 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 22180 ==; Test 'if'
LOAD D2 0.0002; if() #38 Body Start
STORE D2 0.0004
GOTO 22182; if() #38 Body End
LOAD D2 0.0003; if() #38 Else Start
STORE D2 0.0004; if() #38 Else End
SETV D2 3
STORE D2 0.0007
STOREV 0 0; for() #17 setup
LOAD D2 0; for() #17 LoopTest
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 22270 ==; for() #17 TestFail?
LOAD D2 0.0008; if() #106 Test AND for() #17 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
GOTOCMP 22212 ==
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 22212 ==
SETV D2 1
GOTO 22213
SETV D2 0
COMPAREV D2 0
GOTOCMP 22263 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #106 Body Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
LOAD D2 0.0005
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #106 Body End
LOAD D2 0.0007
ADDV D2 6
STORE D2 0.0007; for() #17 Body End
LOAD D2 0; for() #17 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 22185; for() #17 End
LOAD D2 0.0001; for() #16 Body End AND for() #16 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 22114; for() #16 End
POPARGS D5 0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR D4 SP2; Func[bool __HaveAmulet()] Body Start
SETV D2 50; if() #657 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 22285 ==; Test 'if'
SETV D2 1; return Start AND if() #657 Body Start
GOTO 22294; return End AND if() #657 Body End
SETV D2 63; if() #658 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 22293 ==; Test 'if'
SETV D2 1; return Start AND if() #658 Body Start
GOTO 22294; return End AND if() #658 Body End
SETV D2 0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int[] __GetDrawingArray(npc)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #568 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22311 ==; Test 'if'
SETV D2 0; return Start AND if() #568 Body Start
GOTO 22331; return End AND if() #568 Body End
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0; unless() #569 Test
COMPAREV D2 0
GOTOCMP 22325 !=; Test 'unless'
SETV D2 0; return Start AND unless() #569 Body Start
GOTO 22331; return End AND unless() #569 Body End
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 23
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int[] __GetDrawingArray(npc)] Body End
PUSHV 0; Func[bool IsWater(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #344 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22347 ==; Test 'if'
SETV D2 1; return Start AND if() #344 Body Start
GOTO 22375; return End AND if() #344 Body End
LOAD D2 0; if() #345 Test
COMPAREV D2 18
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22354 ==; Test 'if'
SETV D2 1; return Start AND if() #345 Body Start
GOTO 22375; return End AND if() #345 Body End
LOAD D2 0; if() #346 Test
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22361 ==; Test 'if'
SETV D2 1; return Start AND if() #346 Body Start
GOTO 22375; return End AND if() #346 Body End
LOAD D2 0; if() #347 Test
COMPAREV D2 86
GOTOCMP 22369 <
LOAD D2 0
COMPAREV D2 91
GOTOCMP 22369 >
SETV D2 1
GOTO 22370
SETV D2 0
COMPAREV D2 0
GOTOCMP 22374 ==; Test 'if'
SETV D2 1; return Start AND if() #347 Body Start
GOTO 22375; return End AND if() #347 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool IsWater(int)] Body End
SETR D4 SP2; Func[bool __IsPit(int)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[bool IsPit(int)] Params Start
PUSHR D2; UsrFunc[bool IsPit(int)] Params End
CALLFUNC 3.1041; UsrFunc[bool IsPit(int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[bool __IsPit(int)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC()] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 1 0; for() #37 setup
LOAD D2 0; for() #37 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 22438 ==; for() #37 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #37 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #148 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 22414 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 22414 ==
SETV D2 0
GOTO 22415
SETV D2 1
COMPAREV D2 0
GOTOCMP 22434 ==; Test 'if'
LOAD D2 0.0001; unless() #149 Test AND if() #148 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 22434 !=; Test 'unless'
LOAD D2 0.0001; unless() #150 Test AND unless() #149 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 22434 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #150 Body Start
GOTO 22439; return End AND unless() #150 Body End
LOAD D2 0; unless() #149 Body End AND if() #148 Body End AND for() #37 Body End AND for() #37 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 22389; for() #37 End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #154 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 22454 ==; Test 'if'
PUSHR D4; if() #154 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 2.2750; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #154 Body End
LOAD D2 0.0002; if() #155 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 22465 ==; Test 'if'
PUSHR D4; if() #155 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 2.2910; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #155 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0003; if() #156 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 22535 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #156 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #156 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 2.2963; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #157 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 22569 ==; Test 'if'
SETV D2 0; if() #157 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #157 Body End
LOAD D2 0; if() #158 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 22586 ==; Test 'if'
PUSHR D4; if() #158 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 2.3073; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #158 Body End
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHV 0; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #174 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 22604 ==; Test 'if'
PUSHR D4; if() #174 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 2.2750; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #174 Body End
LOAD D2 0.0002; if() #175 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 22615 ==; Test 'if'
PUSHR D4; if() #175 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 2.2910; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #175 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001; if() #50 Test
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 22685 ==; Test 'if'
PUSHR D4; if() #50 Body Start
LOAD D2 0.0006; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 2.3238; UsrFunc[int __UnblockableDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
GOTO 22694; if() #50 Body End
LOAD D2 0.0006; if() #50 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2; if() #50 Else End
LOAD D2 0.0003; if() #176 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 22705 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #176 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #176 Body End
LOAD D2 0.0001; if() #177 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 22721 ==; Test 'if'
SETV D2 0; if() #177 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #177 Body End
LOAD D2 0.0001; if() #178 Test
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 22732 ==; Test 'if'
PUSHR D4; if() #178 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 2.3073; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #178 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #55 Test
COMPAREV D2 129
GOTOCMP 22760 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 22760 ==
SETV D2 0
GOTO 22761
SETV D2 1
COMPAREV D2 0
GOTOCMP 22765 ==; Test 'if'
SETV D2 17; return Start AND if() #55 Body Start
GOTO 22908; return End AND if() #55 Body End
LOAD D2 0.0003; if() #56 Test AND if() #55 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22772 ==; Test 'if'
SETV D2 18; return Start AND if() #56 Body Start
GOTO 22908; return End AND if() #56 Body End
LOAD D2 0.0003; if() #57 Test AND if() #56 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22779 ==; Test 'if'
SETV D2 19; return Start AND if() #57 Body Start
GOTO 22908; return End AND if() #57 Body End
LOAD D2 0.0003; if() #58 Test AND if() #57 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22786 ==; Test 'if'
SETV D2 35; return Start AND if() #58 Body Start
GOTO 22908; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22793 ==; Test 'if'
SETV D2 81; return Start AND if() #59 Body Start
GOTO 22908; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22800 ==; Test 'if'
SETV D2 80; return Start AND if() #60 Body Start
GOTO 22908; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22807 ==; Test 'if'
SETV D2 21; return Start AND if() #61 Body Start
GOTO 22908; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22814 ==; Test 'if'
SETV D2 20; return Start AND if() #62 Body Start
GOTO 22908; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22821 ==; Test 'if'
SETV D2 36; return Start AND if() #63 Body Start
GOTO 22908; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22828 ==; Test 'if'
SETV D2 76; return Start AND if() #64 Body Start
GOTO 22908; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22835 ==; Test 'if'
SETV D2 77; return Start AND if() #65 Body Start
GOTO 22908; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22907 ==; Test 'if'
STOREV 0 0.0002; if() #66 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #43 setup
LOAD D2 0; for() #43 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 22891 ==; for() #43 TestFail?
LOAD D2 0; unless() #187 Test AND for() #43 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 22887 ==; Test 'unless' AND continue 1; AND unless() #187 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #188 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 22887 !=; Test 'if' AND continue 1; AND if() #188 Body
LOAD D2 0.0001; if() #189 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 22887 ==; Test 'if'
LOAD D2 0.0001; if() #189 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #190 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 22891 !=; Test 'if' AND break 1; AND if() #190 Body
LOAD D2 0; if() #189 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 22843; for() #43 End
LOAD D2 0.0002; if() #67 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 22898 ==; Test 'if'
SETV D2 4; return Start AND if() #67 Body Start
GOTO 22908; return End AND if() #67 Body End
LOAD D2 0.0002; if() #68 Test AND if() #67 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22905 ==; Test 'if'
SETV D2 5; return Start AND if() #68 Body Start
GOTO 22908; return End AND if() #68 Body End
SETV D2 6; return Start AND if() #68 Else Start
GOTO 22908; return End AND if() #68 Else End AND if() #67 Else End AND if() #66 Body End
SETV D2 0; return Start AND if() #66 Else Start
POPARGS D5 0.0004; return End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #51 Test
COMPAREV D2 129
GOTOCMP 22919 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 22919 ==
SETV D2 0
GOTO 22920
SETV D2 1
COMPAREV D2 0
GOTOCMP 22924 ==; Test 'if'
SETV D2 40; return Start AND if() #51 Body Start
GOTO 22961; return End AND if() #51 Body End
LOAD D2 0; if() #52 Test AND if() #51 Else Start
COMPAREV D2 134
GOTOCMP 22932 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 22932 ==
SETV D2 0
GOTO 22933
SETV D2 1
COMPAREV D2 0
GOTOCMP 22937 ==; Test 'if'
SETV D2 32; return Start AND if() #52 Body Start
GOTO 22961; return End AND if() #52 Body End
LOAD D2 0; if() #53 Test AND if() #52 Else Start
COMPAREV D2 140
GOTOCMP 22948 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 22948 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 22948 ==
SETV D2 0
GOTO 22949
SETV D2 1
COMPAREV D2 0
GOTOCMP 22953 ==; Test 'if'
SETV D2 13; return Start AND if() #53 Body Start
GOTO 22961; return End AND if() #53 Body End
LOAD D2 0; if() #54 Test AND if() #53 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22960 ==; Test 'if'
SETV D2 51; return Start AND if() #54 Body Start
GOTO 22961; return End AND if() #54 Body End
SETV D2 0; return Start AND if() #54 Else Start
POP D5; return End AND if() #54 Else End AND if() #53 Else End AND if() #52 Else End AND if() #51 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #486 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 22980 ==; Test 'if'
LOAD D2 0.0001; if() #486 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #486 Body End
LOAD D2 0.0001; if() #185 Test
COMPAREV D2 0.3927
GOTOCMP 22988 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 22988 >
SETV D2 0
GOTO 22989
SETV D2 1
COMPAREV D2 0
GOTOCMP 22994 ==; Test 'if'
SETV D2 3; if() #185 Body Start
STORE D2 0
GOTO 23044; if() #185 Body End
LOAD D2 0.0001; if() #186 Test AND if() #185 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23002 ==; Test 'if'
SETV D2 7; if() #186 Body Start
STORE D2 0
GOTO 23044; if() #186 Body End
LOAD D2 0.0001; if() #187 Test AND if() #186 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23010 ==; Test 'if'
SETV D2 1; if() #187 Body Start
STORE D2 0
GOTO 23044; if() #187 Body End
LOAD D2 0.0001; if() #188 Test AND if() #187 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23018 ==; Test 'if'
SETV D2 6; if() #188 Body Start
STORE D2 0
GOTO 23044; if() #188 Body End
LOAD D2 0.0001; if() #189 Test AND if() #188 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23026 ==; Test 'if'
SETV D2 2; if() #189 Body Start
STORE D2 0
GOTO 23044; if() #189 Body End
LOAD D2 0.0001; if() #190 Test AND if() #189 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23034 ==; Test 'if'
SETV D2 4; if() #190 Body Start
STORE D2 0
GOTO 23044; if() #190 Body End
LOAD D2 0.0001; if() #191 Test AND if() #190 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23042 ==; Test 'if'
SETV D2 0; if() #191 Body Start
STORE D2 0
GOTO 23044; if() #191 Body End
SETV D2 5; if() #191 Else Start
STORE D2 0; if() #191 Else End
LOAD D2 0.0002; if() #190 Else End AND if() #189 Else End AND if() #188 Else End AND if() #187 Else End AND if() #186 Else End AND if() #185 Else End AND if() #487 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 23062 ==; Test 'if'
PUSHR D4; if() #487 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 2.3238; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #487 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #209 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 23156 ==; Test 'if'
LOAD D2 0.0001; if() #209 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #492 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23095 ==; Test 'if'
LOAD D2 0; if() #492 Body Start
ADDV D2 6.2832
STORE D2 0; if() #492 Body End
LOAD D2 0; if() #210 Test
COMPAREV D2 0.7854
GOTOCMP 23103 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 23103 >
SETV D2 0
GOTO 23104
SETV D2 1
COMPAREV D2 0
GOTOCMP 23116 ==; Test 'if'
SETV D2 4; if() #210 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 23236; if() #210 Body End
LOAD D2 0; if() #211 Test AND if() #210 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 23131 ==; Test 'if'
SETV D2 3; if() #211 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 23236; if() #211 Body End
LOAD D2 0; if() #212 Test AND if() #211 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23146 ==; Test 'if'
SETV D2 7; if() #212 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 23236; if() #212 Body End
SETV D2 0; if() #212 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #212 Else End
GOTO 23236; if() #211 Else End AND if() #210 Else End AND if() #209 Body End
PUSHR D4; if() #209 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 2.3374; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #213 Test
COMPAREV D2 0
GOTOCMP 23175 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 23175 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 23175 ==
SETV D2 0
GOTO 23176
SETV D2 1
COMPAREV D2 0
GOTOCMP 23188 ==; Test 'if'
SETV D2 0; if() #213 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 23236; if() #213 Body End
LOAD D2 0; if() #214 Test AND if() #213 Else Start
COMPAREV D2 1
GOTOCMP 23199 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 23199 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 23199 ==
SETV D2 0
GOTO 23200
SETV D2 1
COMPAREV D2 0
GOTOCMP 23212 ==; Test 'if'
SETV D2 3; if() #214 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 23236; if() #214 Body End
LOAD D2 0; if() #215 Test AND if() #214 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23227 ==; Test 'if'
SETV D2 7; if() #215 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 23236; if() #215 Body End
SETV D2 4; if() #215 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #215 Else End
POPARGS D5 0.0002; if() #214 Else End AND if() #213 Else End AND if() #209 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #681 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23246 ==; Test 'if'
SETV D2 8; return Start AND if() #681 Body Start
GOTO 23296; return End AND if() #681 Body End
LOAD D2 0; if() #682 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23253 ==; Test 'if'
SETV D2 12; return Start AND if() #682 Body Start
GOTO 23296; return End AND if() #682 Body End
LOAD D2 0; if() #683 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23260 ==; Test 'if'
SETV D2 14; return Start AND if() #683 Body Start
GOTO 23296; return End AND if() #683 Body End
LOAD D2 0; if() #684 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23267 ==; Test 'if'
SETV D2 10; return Start AND if() #684 Body Start
GOTO 23296; return End AND if() #684 Body End
LOAD D2 0; if() #685 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23274 ==; Test 'if'
SETV D2 15; return Start AND if() #685 Body Start
GOTO 23296; return End AND if() #685 Body End
LOAD D2 0; if() #686 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23281 ==; Test 'if'
SETV D2 9; return Start AND if() #686 Body Start
GOTO 23296; return End AND if() #686 Body End
LOAD D2 0; if() #687 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23288 ==; Test 'if'
SETV D2 13; return Start AND if() #687 Body Start
GOTO 23296; return End AND if() #687 Body End
LOAD D2 0; if() #688 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23295 ==; Test 'if'
SETV D2 11; return Start AND if() #688 Body Start
GOTO 23296; return End AND if() #688 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[bool Ghost_CanMove(int, int, int)] Body Start
PUSHR D4; return Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.3314; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int)] Body End
SETR D4 SP2; Func[bool Ghost_CanMove(int, int, int, bool)] Body Start
LOAD D2 0.0002; if() #215 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23322 ==; Test 'if'
SETV D2 1; return Start AND if() #215 Body Start
GOTO 23372; return End AND if() #215 Body End
LOAD D2 0.0003; if() #216 Test
COMPAREV D2 4
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 23330 ==; Test 'if'
LOAD D2 0.0002; if() #216 Body Start
MULTV D2 0.7071
STORE D2 0.0002; if() #216 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 2.3374; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0002; while() #1 Test
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 23361 ==; Test 'while'
PUSHR D4; unless() #217 Test AND while() #1 Body Start
LOAD D2 0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.3447; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23357 !=; Test 'unless'
SETV D2 0; return Start AND unless() #217 Body Start
GOTO 23372; return End AND unless() #217 Body End
LOAD D2 0.0002
SUBV D2 8
STORE D2 0.0002; while() #1 Body End
GOTO 23336; while() #1 End
PUSHR D4; return Start
LOAD D2 0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.3447; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0004; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int, bool)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #667 Test
COMPAREV D2 0
GOTOCMP 23383 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 23383 >
SETV D2 1
GOTO 23384
SETV D2 0
COMPAREV D2 0
GOTOCMP 23388 ==; Test 'if'
LOAD D2 0; return Start AND if() #667 Body Start
GOTO 23445; return End AND if() #667 Body End
LOAD D2 0; if() #668 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23395 ==; Test 'if'
SETV D2 0; return Start AND if() #668 Body Start
GOTO 23445; return End AND if() #668 Body End
LOAD D2 0; if() #669 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23402 ==; Test 'if'
SETV D2 5; return Start AND if() #669 Body Start
GOTO 23445; return End AND if() #669 Body End
LOAD D2 0; if() #670 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23409 ==; Test 'if'
SETV D2 3; return Start AND if() #670 Body Start
GOTO 23445; return End AND if() #670 Body End
LOAD D2 0; if() #671 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23416 ==; Test 'if'
SETV D2 7; return Start AND if() #671 Body Start
GOTO 23445; return End AND if() #671 Body End
LOAD D2 0; if() #672 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23423 ==; Test 'if'
SETV D2 1; return Start AND if() #672 Body Start
GOTO 23445; return End AND if() #672 Body End
LOAD D2 0; if() #673 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23430 ==; Test 'if'
SETV D2 6; return Start AND if() #673 Body Start
GOTO 23445; return End AND if() #673 Body End
LOAD D2 0; if() #674 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23437 ==; Test 'if'
SETV D2 2; return Start AND if() #674 Body Start
GOTO 23445; return End AND if() #674 Body End
LOAD D2 0; if() #675 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23444 ==; Test 'if'
SETV D2 4; return Start AND if() #675 Body Start
GOTO 23445; return End AND if() #675 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
PUSHARGSV 0 0.0006; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0009; if() #299 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23576 ==; Test 'if'
SETR D2 GD13; if() #299 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #165 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #165 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 23534 ==; for() #165 TestFail?
PUSHR D4; unless() #576 Test AND for() #165 Body Start
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.4243; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23530 !=; Test 'unless'
SETV D2 0; return Start AND unless() #576 Body Start
GOTO 24227; return End AND unless() #576 Body End
LOAD D2 0.0005; for() #165 Body End AND for() #165 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 23504; for() #165 End
PUSHR D4; unless() #577 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.4243; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23551 !=; Test 'unless'
SETV D2 0; return Start AND unless() #577 Body Start
GOTO 24227; return End AND unless() #577 Body End
PUSHR D4; unless() #578 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.4243; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23574 !=; Test 'unless'
SETV D2 0; return Start AND unless() #578 Body Start
GOTO 24227; return End AND unless() #578 Body End
SETV D2 1; return Start
GOTO 24227; return End AND if() #299 Body End
LOAD D2 0.0009; if() #300 Test AND if() #299 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23709 ==; Test 'if'
SETR D2 GD13; if() #300 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD1
PUSHR D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #166 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #166 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 23667 ==; for() #166 TestFail?
PUSHR D4; unless() #579 Test AND for() #166 Body Start
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.4243; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23663 !=; Test 'unless'
SETV D2 0; return Start AND unless() #579 Body Start
GOTO 24227; return End AND unless() #579 Body End
LOAD D2 0.0005; for() #166 Body End AND for() #166 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 23637; for() #166 End
PUSHR D4; unless() #580 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.4243; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23684 !=; Test 'unless'
SETV D2 0; return Start AND unless() #580 Body Start
GOTO 24227; return End AND unless() #580 Body End
PUSHR D4; unless() #581 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.4243; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23707 !=; Test 'unless'
SETV D2 0; return Start AND unless() #581 Body Start
GOTO 24227; return End AND unless() #581 Body End
SETV D2 1; return Start
GOTO 24227; return End AND if() #300 Body End
LOAD D2 0.0009; if() #301 Test AND if() #300 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23849 ==; Test 'if'
PUSHR D4; if() #582 Test AND if() #301 Body Start
CALLFUNC 2.9280; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 23727 ==
PUSHR D4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23727 !=
SETV D2 1
GOTO 23728
SETV D2 0
COMPAREV D2 0
GOTOCMP 23732 ==; Test 'if'
SETV D2 0; return Start AND if() #582 Body Start
GOTO 24227; return End AND if() #582 Body End
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #167 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #167 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 23807 ==; for() #167 TestFail?
PUSHR D4; unless() #583 Test AND for() #167 Body Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.4243; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23803 !=; Test 'unless'
SETV D2 0; return Start AND unless() #583 Body Start
GOTO 24227; return End AND unless() #583 Body End
LOAD D2 0.0005; for() #167 Body End AND for() #167 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 23777; for() #167 End
PUSHR D4; unless() #584 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.4243; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23824 !=; Test 'unless'
SETV D2 0; return Start AND unless() #584 Body Start
GOTO 24227; return End AND unless() #584 Body End
PUSHR D4; unless() #585 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.4243; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23847 !=; Test 'unless'
SETV D2 0; return Start AND unless() #585 Body Start
GOTO 24227; return End AND unless() #585 Body End
SETV D2 1; return Start
GOTO 24227; return End AND if() #301 Body End
LOAD D2 0.0009; if() #302 Test AND if() #301 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23982 ==; Test 'if'
SETR D2 GD12; if() #302 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #168 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #168 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 23940 ==; for() #168 TestFail?
PUSHR D4; unless() #586 Test AND for() #168 Body Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.4243; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23936 !=; Test 'unless'
SETV D2 0; return Start AND unless() #586 Body Start
GOTO 24227; return End AND unless() #586 Body End
LOAD D2 0.0005; for() #168 Body End AND for() #168 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 23910; for() #168 End
PUSHR D4; unless() #587 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.4243; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23957 !=; Test 'unless'
SETV D2 0; return Start AND unless() #587 Body Start
GOTO 24227; return End AND unless() #587 Body End
PUSHR D4; unless() #588 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.4243; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23980 !=; Test 'unless'
SETV D2 0; return Start AND unless() #588 Body Start
GOTO 24227; return End AND unless() #588 Body End
SETV D2 1; return Start
GOTO 24227; return End AND if() #302 Body End
LOAD D2 0.0009; if() #303 Test AND if() #302 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24043 ==; Test 'if'
STOREV 0 0; if() #303 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.3314; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #589 Test
COMPAREV D2 0
GOTOCMP 24017 !=; Test 'unless'
SETV D2 0; return Start AND unless() #589 Body Start
GOTO 24227; return End AND unless() #589 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.3314; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 24227; return End AND if() #303 Body End
LOAD D2 0.0009; if() #304 Test AND if() #303 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24104 ==; Test 'if'
STOREV 0 0; if() #304 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.3314; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #590 Test
COMPAREV D2 0
GOTOCMP 24078 !=; Test 'unless'
SETV D2 0; return Start AND unless() #590 Body Start
GOTO 24227; return End AND unless() #590 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.3314; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 24227; return End AND if() #304 Body End
LOAD D2 0.0009; if() #305 Test AND if() #304 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24165 ==; Test 'if'
STOREV 0 0; if() #305 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.3314; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #591 Test
COMPAREV D2 0
GOTOCMP 24139 !=; Test 'unless'
SETV D2 0; return Start AND unless() #591 Body Start
GOTO 24227; return End AND unless() #591 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.3314; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 24227; return End AND if() #305 Body End
LOAD D2 0.0009; if() #306 Test AND if() #305 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24226 ==; Test 'if'
STOREV 0 0; if() #306 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.3314; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #592 Test
COMPAREV D2 0
GOTOCMP 24200 !=; Test 'unless'
SETV D2 0; return Start AND unless() #592 Body Start
GOTO 24227; return End AND unless() #592 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.3314; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 24227; return End AND if() #306 Body End
SETV D2 0; return Start AND if() #306 Else Start
POPARGS D5 0.0010; return End AND if() #306 Else End AND if() #305 Else End AND if() #304 Else End AND if() #303 Else End AND if() #302 Else End AND if() #301 Else End AND if() #300 Else End AND if() #299 Else End
RETURNFUNC; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body End
SETR D4 SP2; Func[bool Ghost_CanMovePixel(int, int)] Body Start
PUSHR D4; return Start
LOAD D2 0.0001; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.4243; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int)] Body End
PUSHV 0; Func[bool Ghost_CanMovePixel(int, int, bool)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #218 Test
COMPAREV D2 0
GOTOCMP 24265 <
LOAD D2 0.0003
PUSHR D2
SETR D2 REGION_WIDTH
POP D3
COMPARER D3 D2
GOTOCMP 24265 >=
LOAD D2 0.0002
COMPAREV D2 0
GOTOCMP 24265 <
LOAD D2 0.0002
PUSHR D2
SETR D2 REGION_HEIGHT
POP D3
COMPARER D3 D2
GOTOCMP 24265 >=
SETV D2 0
GOTO 24266
SETV D2 1
COMPAREV D2 0
GOTOCMP 24273 ==; Test 'if'
PUSHR D4; return Start AND if() #218 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 24466; return End AND if() #218 Body End
LOAD D2 0.0003; InlineFunc[int ComboAt(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
SETR D3 D2; InlineFunc[int ComboAt(int, int)] Params End
POP D2; InlineFunc[int ComboAt(int, int)] Body Start
COMBO_AT D2 D3; InlineFunc[int ComboAt(int, int)] Body End
STORE D2 0
PUSHR D4; unless() #219 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24377 !=; Test 'unless'
LOAD D2 0; if() #220 Test AND unless() #219 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 110
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24296 ==; Test 'if'
SETV D2 0; return Start AND if() #220 Body Start
GOTO 24466; return End AND if() #220 Body End
LOAD D2 0; if() #221 Test
PUSHR D2
POP D0
SETR D2 COMBOFD
COMPAREV D2 96
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24306 ==; Test 'if'
SETV D2 0; return Start AND if() #221 Body Start
GOTO 24466; return End AND if() #221 Body End
LOAD D2 0; if() #222 Test
PUSHR D2
POP D0
SETR D2 COMBOID
COMPAREV D2 96
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24316 ==; Test 'if'
SETV D2 0; return Start AND if() #222 Body Start
GOTO 24466; return End AND if() #222 Body End
PUSHR D4; if() #77 Test
PUSHV 65536; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24333 ==; Test 'if'
LOAD D2 0; if() #223 Test AND if() #77 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24377 ==; Test 'if'
SETV D2 0; return Start AND if() #223 Body Start
GOTO 24466; return End AND if() #223 Body End
GOTO 24377; if() #77 Body End
LOAD D2 0.0001; if() #78 Test AND if() #77 Else Start
COMPAREV D2 0
GOTOCMP 24347 ==; Test 'if'
LOAD D2 0; if() #224 Test AND if() #78 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 54
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24377 ==; Test 'if'
SETV D2 0; return Start AND if() #224 Body Start
GOTO 24466; return End AND if() #224 Body End
GOTO 24377; if() #78 Body End
LOAD D2 0; if() #225 Test AND if() #78 Else Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 128
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24357 ==; Test 'if'
SETV D2 0; return Start AND if() #225 Body Start
GOTO 24466; return End AND if() #225 Body End
LOAD D2 0; if() #226 Test
PUSHR D2
POP D0
SETR D2 COMBOFD
COMPAREV D2 97
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24367 ==; Test 'if'
SETV D2 0; return Start AND if() #226 Body Start
GOTO 24466; return End AND if() #226 Body End
LOAD D2 0; if() #227 Test
PUSHR D2
POP D0
SETR D2 COMBOID
COMPAREV D2 97
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24377 ==; Test 'if'
SETV D2 0; return Start AND if() #227 Body Start
GOTO 24466; return End AND if() #227 Body End
PUSHR D4; if() #78 Else End AND if() #77 Else End AND unless() #219 Body End AND if() #228 Test
PUSHV 65539; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24389 ==; Test 'if'
PUSHR D4; return Start AND if() #228 Body Start
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 2.2333; UsrFunc[bool IsWater(int)] Call
POP D4
GOTO 24466; return End AND if() #228 Body End
PUSHR D4; if() #229 Test
PUSHV 65538; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24412 ==; Test 'if'
PUSHR D4; return Start AND if() #229 Body Start
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 2.2333; UsrFunc[bool IsWater(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24410 !=
LOAD D2 0
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 58
GOTOCMP 24410 ==
SETV D2 0
GOTO 24466
SETV D2 1
GOTO 24466; return End AND if() #229 Body End
PUSHR D4; if() #230 Test
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 2.2333; UsrFunc[bool IsWater(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24424 ==; Test 'if'
PUSHR D4; return Start AND if() #230 Body Start
PUSHV 2048; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 24466; return End AND if() #230 Body End
PUSHR D4; if() #231 Test
LOAD D2 0; UsrFunc[bool __IsPit(int)] Params Start
PUSHR D2; UsrFunc[bool __IsPit(int)] Params End
CALLFUNC 2.2377; UsrFunc[bool __IsPit(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24436 ==; Test 'if'
PUSHR D4; return Start AND if() #231 Body Start
PUSHV 4096; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 24466; return End AND if() #231 Body End
PUSHR D4; if() #79 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24444 ==; Test 'if'
SETV D2 1; return Start AND if() #79 Body Start
GOTO 24466; return End AND if() #79 Body End
PUSHR D4; if() #80 Test AND if() #79 Else Start
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24458 ==; Test 'if'
PUSHR D4; return Start AND if() #80 Body Start
LOAD D2 0.0003; UsrFunc[bool __FullTileWalkable(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[bool __FullTileWalkable(int, int)] Params End
CALLFUNC 2.4499; UsrFunc[bool __FullTileWalkable(int, int)] Call
POP D4
GOTO 24466; return End AND if() #80 Body End
LOAD D2 0.0003; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND return Start AND if() #80 Else Start
PUSHR D2
LOAD D2 0.0002
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
SETCMP D2 I==
POPARGS D5 0.0004; return End AND if() #80 Else End AND if() #79 Else End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int, bool)] Body End
SETR D4 SP2; Func[bool Ghost_FlagIsSet(int)] Body Start
LOAD D2 0; if() #113 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24487 ==; Test 'if'
SETR D2 GD16; return Start AND if() #113 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
GOTO 24497; return End AND if() #113 Body End
SETR D2 GD15; return Start AND if() #113 Else Start
PUSHR D2
LOAD D2 0
POP D3
ANDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
POP D5; return End AND if() #113 Else End
RETURNFUNC; Func[bool Ghost_FlagIsSet(int)] Body End
SETR D4 SP2; Func[bool __FullTileWalkable(int, int)] Body Start
LOAD D2 0.0001; if() #566 Test
COMPAREV D2 0
GOTOCMP 24520 <
LOAD D2 0
COMPAREV D2 0
GOTOCMP 24520 <
LOAD D2 0.0001
PUSHR D2
SETR D2 REGION_WIDTH
POP D3
COMPARER D3 D2
GOTOCMP 24520 >=
LOAD D2 0
PUSHR D2
SETR D2 REGION_HEIGHT
POP D3
COMPARER D3 D2
GOTOCMP 24520 >=
SETV D2 0
GOTO 24521
SETV D2 1
COMPAREV D2 0
GOTOCMP 24528 ==; Test 'if'
PUSHR D4; return Start AND if() #566 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 24588; return End AND if() #566 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0001
MODV D2 16
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0
MODV D2 16
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #567 Test
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 24582 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 24582 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 24582 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 24582 !=
SETV D2 0
GOTO 24583
SETV D2 1
COMPAREV D2 0
GOTOCMP 24587 ==; Test 'if'
SETV D2 0; return Start AND if() #567 Body Start
GOTO 24588; return End AND if() #567 Body End
SETV D2 1; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __FullTileWalkable(int, int)] Body End
PUSHARGSV 0 0.0004; Func[bool Ghost_CheckFreeze(ffc, npc)] Body Start
SETR D4 SP2
PUSHR D4; if() #232 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24603 ==
PUSHR D4
CALLFUNC 2.1944; UsrFunc[bool ClockIsActive()] Call
POP D4
COMPAREV D2 0
GOTOCMP 24617 !=
PUSHR D4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24615 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTUN
COMPAREV D2 0
GOTOCMP 24617 >
SETV D2 0
GOTO 24618
SETV D2 1
COMPAREV D2 0
GOTOCMP 24846 ==; Test 'if'
LOAD D2 0.0005; if() #232 Body Start
PUSHR D2
POP REFFFC
SETR D2 XD
STORE D2 0.0003
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 YD
STORE D2 0.0002
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 XD2
STORE D2 0.0001
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 YD2
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETR D2 GD17
ORV D2 2
SETR GD17 D2
PUSHR D4; while() #2 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24690 ==
PUSHR D4
CALLFUNC 2.1944; UsrFunc[bool ClockIsActive()] Call
POP D4
COMPAREV D2 0
GOTOCMP 24704 !=
PUSHR D4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24702 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTUN
COMPAREV D2 0
GOTOCMP 24704 >
SETV D2 0
GOTO 24705
SETV D2 1
COMPAREV D2 0
GOTOCMP 24810 ==; Test 'while'
PUSHR D4; while() #2 Body Start
LOAD D2 0.0005; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 2.4849; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_DrawShadow(npc)] Params Start
PUSHR D2; UsrFunc[void __Ghost_DrawShadow(npc)] Params End
CALLFUNC 2.4934; UsrFunc[void __Ghost_DrawShadow(npc)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.5099; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND unless() #81 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 24731 !=; Test 'unless'
SETV D2 0; return Start AND unless() #81 Body Start
GOTO 24847; return End
GOTO 24741; unless() #81 Body End
LOAD D2 0.0004; if() #233 Test AND unless() #81 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 24741 ==; Test 'if'
SETV D2 0; return Start AND if() #233 Body Start
GOTO 24847; return End AND if() #233 Body End
PUSHR D4; unless() #81 Else End
LOAD D2 0.0005; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.5499; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24770 ==; Test 'if'
SETR D2 GD10; if() #82 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.3374; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
GOTO 24802; if() #82 Body End
PUSHR D4; if() #83 Test AND if() #82 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24793 ==; Test 'if'
SETR D2 GD10; if() #83 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.3374; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
GOTO 24802; if() #83 Body End
SETR D2 GD10; if() #83 Else Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #83 Else End
PUSHR D4; if() #82 Else End
LOAD D2 0.0005; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params End
CALLFUNC 2.5633; UsrFunc[void Ghost_CheckHit(ffc, npc)] Call
POP D4; while() #2 Body End
GOTO 24679; while() #2 End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2; if() #232 Body End
SETV D2 1; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool Ghost_CheckFreeze(ffc, npc)] Body End
PUSHV 0; Func[void __Ghost_UpdateFlashing(ffc, npc)] Body Start
SETR D4 SP2
STOREV 0 0
SETR D2 GD20; if() #633 Test
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 24867 ==; Test 'if'
SETR D2 GD20; if() #633 Body Start
SUBV D2 1
SETR GD20 D2
SETR D2 GD20; if() #634 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24867 ==; Test 'if'
SETV D2 1; if() #634 Body Start
STORE D2 0; if() #634 Body End
SETR D2 GD17; if() #633 Body End AND if() #635 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24932 ==; Test 'if'
SETR D2 GD20; if() #335 Test AND if() #635 Body Start
COMPAREV D2 0
GOTOCMP 24878 <=
SETV D2 1
GOTO 24879
SETV D2 0
COMPAREV D2 0
GOTOCMP 24896 ==; Test 'if'
SETR D2 GD26; if() #335 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
RSHIFTV D2 1
SUBV2 9 D2
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
GOTO 24932; if() #335 Body End
LOAD D2 0.0001; if() #336 Test AND if() #335 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 64
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24920 ==; Test 'if'
SETR D2 GD26; if() #336 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
ANDV D2 3
ADDV D2 6
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
GOTO 24932; if() #336 Body End
LOAD D2 0; if() #636 Test AND if() #336 Else Start
COMPAREV D2 0
GOTOCMP 24932 ==; Test 'if'
SETR D2 GD11; if() #636 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2; if() #636 Body End
POPARGS D5 0.0003; if() #336 Else End AND if() #335 Else End AND if() #635 Body End
RETURNFUNC; Func[void __Ghost_UpdateFlashing(ffc, npc)] Body End
PUSHARGSV 0 0.0004; Func[void __Ghost_DrawShadow(npc)] Body Start
SETR D4 SP2
SETR D2 GD3; if() #593 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25097 !=; Test 'if' AND return (Void) AND if() #593 Body
PUSHR D4; unless() #594 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24961 !=
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 4
GOTOCMP 24961 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCTYPE
COMPAREV D2 40
GOTOCMP 24961 ==
SETV D2 0
GOTO 24962
SETV D2 1
COMPAREV D2 0
GOTOCMP 25097 ==; Test 'unless' AND return (Void) AND unless() #594 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETR D2 GD12; if() #307 Test
COMPAREV D2 3
GOTOCMP 24976 <
SETR D2 GD13
COMPAREV D2 3
GOTOCMP 24976 <
SETV D2 0
GOTO 24977
SETV D2 1
COMPAREV D2 0
GOTOCMP 25025 ==; Test 'if'
SETR D2 GD1; if() #307 Body Start
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
SETV D2 1
STORE D2 0
PUSHR D4; if() #308 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25018 ==; Test 'if'
SETV D2 27400; if() #308 Body Start
STORE D2 0.0001
GOTO 25079; if() #308 Body End
SETR D2 GD26; if() #308 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
STORE D2 0.0001; if() #308 Else End
GOTO 25079; if() #307 Body End
SETR D2 GD1; if() #307 Else Start
PUSHR D2
SETR D2 GD12
SUBV D2 2
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 2
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
SUBV D2 2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
SETV D2 2
STORE D2 0
PUSHR D4; if() #309 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25064 ==; Test 'if'
SETV D2 27392; if() #309 Body Start
STORE D2 0.0001
GOTO 25079; if() #309 Body End
SETR D2 GD26; if() #309 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 4
MULTV D2 2
SETV D2 2
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
POP D3
MULTR D2 D3
ADDV D2 27392
STORE D2 0.0001; if() #309 Else End
PUSHV 1; if() #307 Else End AND InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #310 [Opt:AlwaysOn]
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_DrawShadow(npc)] Body End
PUSHARGSV 0 0.0004; Func[void Ghost_WaitframeLight(ffc, npc)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 24 0
PUSHR D2
SETR D0 D2
PUSHR D0
SETR D2 GD1
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
SETR D2 GD2
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
SETR D2 GD3
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D0
SETR D2 GD5
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
SETR D2 GD6
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
SETR D2 GD7
POP D0
WRITEPODARRAYVR 5 D2
PUSHR D0
SETR D2 GD8
POP D0
WRITEPODARRAYVR 6 D2
PUSHR D0
SETR D2 GD9
POP D0
WRITEPODARRAYVR 7 D2
PUSHR D0
SETR D2 GD18
POP D0
WRITEPODARRAYVR 8 D2
PUSHR D0
SETR D2 GD19
POP D0
WRITEPODARRAYVR 9 D2
PUSHR D0
SETR D2 GD11
POP D0
WRITEPODARRAYVR 10 D2
PUSHR D0
SETR D2 GD4
POP D0
WRITEPODARRAYVR 11 D2
PUSHR D0
SETR D2 GD10
POP D0
WRITEPODARRAYVR 12 D2
PUSHR D0
SETR D2 GD12
POP D0
WRITEPODARRAYVR 13 D2
PUSHR D0
SETR D2 GD13
POP D0
WRITEPODARRAYVR 14 D2
PUSHR D0
SETR D2 GD15
POP D0
WRITEPODARRAYVR 15 D2
PUSHR D0
SETR D2 GD16
POP D0
WRITEPODARRAYVR 16 D2
PUSHR D0
SETR D2 GD17
POP D0
WRITEPODARRAYVR 17 D2
PUSHR D0
SETR D2 GD20
POP D0
WRITEPODARRAYVR 18 D2
PUSHR D0
SETR D2 GD21
POP D0
WRITEPODARRAYVR 19 D2
PUSHR D0
SETR D2 GD14
POP D0
WRITEPODARRAYVR 20 D2
PUSHR D0
SETR D2 GD22
POP D0
WRITEPODARRAYVR 21 D2
PUSHR D0
SETR D2 GD23
POP D0
WRITEPODARRAYVR 22 D2
POP D2
STORE D2 0.0002
ALLOCATEMEMV D2 21 0
STORE D2 0.0001
SETR D2 GD25; if() #329 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25231 ==; Test 'if'
STOREV 0 0; for() #62 setup AND if() #329 Body Start
LOAD D2 0; for() #62 LoopTest
COMPAREV D2 21
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25231 ==; for() #62 TestFail?
SETR D2 GD25; for() #62 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #62 Body End
LOAD D2 0; for() #62 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 25209; for() #62 End
LOAD D2 0.0004; if() #329 Body End AND InlineFunc[bool npc::isValid()] Params AND if() #330 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 25248 ==; Test 'if'
LOAD D2 0.0002; if() #330 Body Start
ORV D2 65536
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #330 Body End
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND if() #162 Test AND do-while() #2 Body Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 25310 ==; Test 'if'
SETR D2 GD25; if() #164 Test AND if(true) #163 [Opt:AlwaysOn] AND if() #162 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25285 ==; Test 'if'
ALLOCATEMEMV D2 34 0; if() #164 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params End
CALLFUNC 3.0652; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 23 D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 3.0927; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 25315; if() #164 Body End
ALLOCATEMEMV D2 10 0; if() #164 Else Start
STORE D2 0
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params End
CALLFUNC 3.0652; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 23 D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 3.0927; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3; if() #164 Else End
GOTO 25315; if() #162 Body End
PUSHR D4; if() #162 Else Start
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 3.0927; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4; if() #162 Else End
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR GD1 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 1
SETR GD2 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 2
SETR GD3 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 3
SETR GD5 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 4
SETR GD6 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 5
SETR GD7 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 6
SETR GD8 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 7
SETR GD9 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 8
SETR GD18 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 9
SETR GD19 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 10
SETR GD11 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 11
SETR GD4 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 12
SETR GD10 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 13
SETR GD12 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 14
SETR GD13 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 15
SETR GD15 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 16
SETR GD16 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 17
SETR GD17 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 18
SETR GD20 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 19
SETR GD21 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 20
SETR GD14 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 21
SETR GD22 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 22
SETR GD23 D2
LOAD D2 0.0001; if() #165 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25462 ==; Test 'if'
STOREV 0 0; for() #63 setup AND if() #165 Body Start
LOAD D2 0; for() #63 LoopTest
COMPAREV D2 21
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25468 ==; for() #63 TestFail?
LOAD D2 0.0001; for() #63 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #63 Body End
LOAD D2 0; for() #63 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 25439; for() #63 End
GOTO 25468; if() #165 Body End
SETV D2 0; if() #165 Else Start
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #165 Else End
SETR D2 GD26; do-while() #2 Body End AND do-while() #2 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 25248 !=; Test 'while'
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND if() #331 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 25493 ==; Test 'if'
SETV D2 65536; if() #331 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #331 Body End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
POPARGS D5 0.0006
RETURNFUNC; Func[void Ghost_WaitframeLight(ffc, npc)] Body End
SETR D4 SP2; Func[void Ghost_SetPosition(ffc, npc)] Body Start
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND unless() #298 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 25631 ==; Test 'unless' AND return (Void) AND unless() #298 Body
PUSHR D4; if() #156 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25512 !=
SETV D2 1
GOTO 25513
SETV D2 0
COMPAREV D2 0
GOTOCMP 25543 ==; Test 'if'
SETR D2 GD1; if() #156 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 25575; if() #156 Body End
SETR D2 GD1; if() #156 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
SETR D2 GD3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2; if() #156 Else End
PUSHR D4
SETR D2 GD1; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -64
PUSHR REGION_WIDTH; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
PUSHR D4
SETR D2 GD2; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
SETR D2 GD3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
SUBR D3 D2
PUSHR D3
PUSHV -64
PUSHR REGION_HEIGHT; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void Ghost_SetPosition(ffc, npc)] Body End
PUSHARGSV 0 0.0005; Func[void Ghost_CheckHit(ffc, npc)] Body Start
SETR D4 SP2
LOAD D2 0.0005; if() #234 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
SETR D2 GD14
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25814 ==; Test 'if'
SETR D2 GD17; if() #234 Body Start
ORV D2 1
SETR GD17 D2
LOAD D2 0.0005
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
SETR D2 GD20; if() #235 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25661 ==; Test 'if'
SETV D2 32; if() #235 Body Start
SETR GD20 D2; if() #235 Body End
PUSHR D4; if() #236 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25814 ==; Test 'if'
SETV D2 0.0001; if() #236 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params AND if() #84 Test
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETR D2 GD12
ADDV D2 1
MULTV D2 16
POP D3
COMPARER D3 D2
GOTOCMP 25707 >=
LOAD D2 0.0003; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETR D2 GD13
ADDV D2 1
MULTV D2 16
POP D3
COMPARER D3 D2
GOTOCMP 25707 >=
SETV D2 1
GOTO 25708
SETV D2 0
COMPAREV D2 0
GOTOCMP 25743 ==; Test 'if'
SETV D2 0.0001; if() #237 Test AND if() #84 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
ANDV D2 2
PUSHR D2
SETR D2 GD4
ANDV D2 2
POP D3
COMPARER D3 D2
GOTOCMP 25732 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 25732 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25732 !=
SETV D2 0
GOTO 25733
SETV D2 1
COMPAREV D2 0
GOTOCMP 25814 ==; Test 'if'
SETV D2 0.0001; if() #237 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
LSHIFTV D2 12
ORV D2 16
SETR GD21 D2; if() #237 Body End
GOTO 25814; if() #84 Body End
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params AND if() #85 Test AND if() #84 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0003; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25784 ==; Test 'if'
SETR D2 GD4; if() #238 Test AND if() #85 Body Start
COMPAREV D2 0
GOTOCMP 25770 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 25770 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 25770 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25770 !=
SETV D2 0
GOTO 25771
SETV D2 1
COMPAREV D2 0
GOTOCMP 25814 ==; Test 'if'
LOAD D2 0.0003; if() #86 Test AND if() #238 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25781 ==; Test 'if'
SETV D2 16; if() #86 Body Start
SETR GD21 D2
GOTO 25814; if() #86 Body End
SETV D2 4112; if() #86 Else Start
SETR GD21 D2; if() #86 Else End
GOTO 25814; if() #238 Body End AND if() #85 Body End
SETR D2 GD4; if() #239 Test AND if() #85 Else Start
COMPAREV D2 2
GOTOCMP 25801 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 25801 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 25801 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25801 !=
SETV D2 0
GOTO 25802
SETV D2 1
COMPAREV D2 0
GOTOCMP 25814 ==; Test 'if'
LOAD D2 0.0004; if() #87 Test AND if() #239 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25812 ==; Test 'if'
SETV D2 8208; if() #87 Body Start
SETR GD21 D2
GOTO 25814; if() #87 Body End
SETV D2 12304; if() #87 Else Start
SETR GD21 D2; if() #87 Else End
SETR D2 GD21; if() #239 Body End AND if() #85 Else End AND if() #84 Else End AND if() #236 Body End AND if() #234 Body End AND if() #240 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26041 ==; Test 'if'
SETR D2 GD21; if() #240 Body Start
RSHIFTV D2 12
STORE D2 0.0004
SETR D2 GD21
ANDV D2 4095
STORE D2 0.0003
STOREV 4 0.0002
PUSHR D4; if() #241 Test
PUSHV 5; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25835 ==; Test 'if'
LOAD D2 0.0002; if() #241 Body Start
DIVV D2 2
STORE D2 0.0002; if() #241 Body End
PUSHR D4; if() #88 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25943 ==; Test 'if'
STOREV 0 0.0001; if() #88 Body Start
STOREV 0 0
LOAD D2 0.0003
SUBV D2 1
STORE D2 0.0003
LOAD D2 0.0003; if() #89 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25863 ==; Test 'if'
LOAD D2 0.0004; if() #89 Body Start
LSHIFTV D2 12
PUSHR D2
LOAD D2 0.0003
POP D3
ORR D2 D3
SETR GD21 D2
GOTO 25865; if() #89 Body End
SETV D2 0; if() #89 Else Start
SETR GD21 D2; if() #89 Else End
LOAD D2 0.0004; if() #90 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25874 ==; Test 'if'
LOAD D2 0.0002; if() #90 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 25893; if() #90 Body End
LOAD D2 0.0004; if() #91 Test AND if() #90 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25882 ==; Test 'if'
LOAD D2 0.0002; if() #91 Body Start
STORE D2 0
GOTO 25893; if() #91 Body End
LOAD D2 0.0004; if() #92 Test AND if() #91 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25891 ==; Test 'if'
LOAD D2 0.0002; if() #92 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 25893; if() #92 Body End
LOAD D2 0.0002; if() #92 Else Start
STORE D2 0.0001; if() #92 Else End
LOAD D2 0.0001; if() #91 Else End AND if() #90 Else End AND if() #93 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 25918 ==; Test 'if'
SETR D2 GD1; if() #93 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
SETR GD1 D2
SETR D2 GD18
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
SETR GD18 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.5499; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
GOTO 26041; if() #93 Body End
LOAD D2 0; if() #242 Test AND if() #93 Else Start
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26041 ==; Test 'if'
SETR D2 GD2; if() #242 Body Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD2 D2
SETR D2 GD19
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD19 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.5499; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4; if() #242 Body End
GOTO 26041; if() #93 Else End AND if() #88 Body End
STOREV -1 0.0001; if() #88 Else Start
STOREV -1 0
SETV D2 0
SETR GD21 D2
SETR D2 GD17
ORV D2 16
SETR GD17 D2
LOAD D2 0.0004; if() #94 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25961 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Floor(int)] Params Start AND if() #94 Body Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
STORE D2 0
GOTO 25990; if() #94 Body End
LOAD D2 0.0004; if() #95 Test AND if() #94 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25973 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Ceiling(int)] Params Start AND if() #95 Body Start
LSHIFTV D2 0
DIVV D2 8; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
MULTV D2 8
STORE D2 0
GOTO 25990; if() #95 Body End
LOAD D2 0.0004; if() #96 Test AND if() #95 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25984 ==; Test 'if'
SETR D2 GD1; InlineFunc[int Floor(int)] Params Start AND if() #96 Body Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
STORE D2 0.0001
GOTO 25990; if() #96 Body End
SETR D2 GD1; InlineFunc[int Ceiling(int)] Params Start AND if() #96 Else Start
LSHIFTV D2 0
DIVV D2 8; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
MULTV D2 8
STORE D2 0.0001; if() #96 Else End
LOAD D2 0.0001; if() #95 Else End AND if() #94 Else End AND if() #97 Test
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26016 ==; Test 'if'
SETR D2 GD18; if() #97 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
SETR GD18 D2
LOAD D2 0.0001
SETR GD1 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.5499; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
GOTO 26041; if() #97 Body End
LOAD D2 0; if() #243 Test AND if() #97 Else Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26041 ==; Test 'if'
SETR D2 GD19; if() #243 Body Start
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
SETR GD19 D2
LOAD D2 0
SETR GD2 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.5499; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4; if() #243 Body End
POPARGS D5 0.0007; if() #97 Else End AND if() #88 Else End AND if() #240 Body End
RETURNFUNC; Func[void Ghost_CheckHit(ffc, npc)] Body End
SETR D4 SP2; Func[void Ghost_ClearCombos()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
RETURNFUNC; Func[void Ghost_ClearCombos()] Body End
PUSHARGSV 0 0.0005; Func[int Ghost_ConstantWalk4(int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD21; if() #244 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 26060 ==; Test 'if'
LOAD D2 0.0009; return Start AND if() #244 Body Start
GOTO 26400; return End AND if() #244 Body End
STOREV 0 0.0004
STOREV 0 0.0003
PUSHR D4
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0.0002
PUSHR D4; unless() #245 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 26077 !=; Test 'unless'
PUSHR D4; unless() #245 Body Start
PUSHV 32768; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; unless() #245 Body End
LOAD D2 0.0008
DIVV D2 100
STORE D2 0.0008
SETR D2 GD17; if() #246 Test
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26221 ==; Test 'if'
SETR D2 GD1; if() #98 Test AND if() #246 Body Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26149 ==; Test 'if'
PUSHR D4; if() #98 Body Start
PUSHV 2; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV 3; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #99 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 26130 ==; Test 'if'
SETR D2 GD4; unless() #247 Test AND if() #99 Body Start
COMPAREV D2 2
GOTOCMP 26122 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 26122 ==
SETV D2 0
GOTO 26123
SETV D2 1
COMPAREV D2 0
GOTOCMP 26138 !=; Test 'unless'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #247 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #247 Body End
GOTO 26138; if() #99 Body End
LOAD D2 0.0001; if() #100 Test AND if() #99 Else Start
COMPAREV D2 0
GOTOCMP 26136 ==; Test 'if'
SETV D2 2; if() #100 Body Start
SETR GD4 D2
GOTO 26138; if() #100 Body End
SETV D2 3; if() #100 Else Start
SETR GD4 D2; if() #100 Else End
LOAD D2 0.0008; if() #99 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009
GOTO 26221; if() #98 Body End
SETR D2 GD2; if() #101 Test AND if() #98 Else Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26211 ==; Test 'if'
PUSHR D4; if() #101 Body Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #102 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 26192 ==; Test 'if'
SETR D2 GD4; unless() #248 Test AND if() #102 Body Start
COMPAREV D2 0
GOTOCMP 26184 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 26184 ==
SETV D2 0
GOTO 26185
SETV D2 1
COMPAREV D2 0
GOTOCMP 26200 !=; Test 'unless'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #248 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #248 Body End
GOTO 26200; if() #102 Body End
LOAD D2 0.0001; if() #103 Test AND if() #102 Else Start
COMPAREV D2 0
GOTOCMP 26198 ==; Test 'if'
SETV D2 0; if() #103 Body Start
SETR GD4 D2
GOTO 26200; if() #103 Body End
SETV D2 1; if() #103 Else Start
SETR GD4 D2; if() #103 Else End
LOAD D2 0.0008; if() #102 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009
GOTO 26221; if() #101 Body End
LOAD D2 0.0008; InlineFunc[int Floor(int)] Params Start AND if() #101 Else Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009; if() #101 Else End
LOAD D2 0.0009; if() #98 Else End AND if() #246 Body End AND if() #249 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 26255 ==; Test 'if'
PUSHR D4; if() #249 Body Start
CALLFUNC 2.6478; UsrFunc[void __Ghost_FixCoords()] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params End
CALLFUNC 2.6531; UsrFunc[void __Ghost_NewDir4(int, int, int)] Call
POP D4
LOAD D2 0.0008; if() #104 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26245 ==; Test 'if'
SETV D2 0; if() #104 Body Start
STORE D2 0.0009
GOTO 26255; if() #104 Body End
LOAD D2 0.0008; InlineFunc[int Floor(int)] Params Start AND if() #104 Else Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009; if() #104 Else End
SETR D2 GD1; if() #249 Body End AND InlineFunc[int Abs(int)] Params Start AND if() #105 Test
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 26281 >=
SETR D2 GD2; InlineFunc[int Abs(int)] Params Start
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 26281 >=
SETV D2 1
GOTO 26282
SETV D2 0
COMPAREV D2 0
GOTOCMP 26318 ==; Test 'if'
SETR D2 LINKACTION; if() #250 Test AND if() #105 Body Start
COMPAREV D2 7
GOTOCMP 26293 !=
SETR D2 GD17
ANDV D2 32
COMPAREV D2 0
GOTOCMP 26293 !=
SETV D2 1
GOTO 26294
SETV D2 0
COMPAREV D2 0
GOTOCMP 26321 ==; Test 'if'
SETR D2 GD4; if() #250 Body Start
XORV D2 1
SETR GD4 D2
LOAD D2 0.0008; InlineFunc[int Floor(int)] Params Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0009
SETR D2 GD17
ORV D2 32
SETR GD17 D2; if() #250 Body End
GOTO 26321; if() #105 Body End
SETR D2 GD17; if() #105 Else Start
ANDV D2 -33
SETR GD17 D2; if() #105 Else End
SETR D2 GD4; if() #251 Test
COMPAREV D2 0
GOTOCMP 26329 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 26329 ==
SETV D2 1
GOTO 26330
SETV D2 0
COMPAREV D2 0
GOTOCMP 26352 ==; Test 'if'
SETR D2 GD4; if() #106 Test AND if() #251 Body Start
COMPAREV D2 2
GOTOCMP 26343 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 26343 ==
SETR D2 GD4
COMPAREV D2 6
GOTOCMP 26343 ==
SETV D2 0
GOTO 26344
SETV D2 1
COMPAREV D2 0
GOTOCMP 26350 ==; Test 'if'
LOAD D2 0.0008; if() #106 Body Start
SUBV2 0 D2
STORE D2 0.0004
GOTO 26352; if() #106 Body End
LOAD D2 0.0008; if() #106 Else Start
STORE D2 0.0004; if() #106 Else End
SETR D2 GD4; if() #251 Body End AND if() #252 Test
COMPAREV D2 2
GOTOCMP 26360 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 26360 ==
SETV D2 1
GOTO 26361
SETV D2 0
COMPAREV D2 0
GOTOCMP 26383 ==; Test 'if'
SETR D2 GD4; if() #107 Test AND if() #252 Body Start
COMPAREV D2 0
GOTOCMP 26374 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 26374 ==
SETR D2 GD4
COMPAREV D2 5
GOTOCMP 26374 ==
SETV D2 0
GOTO 26375
SETV D2 1
COMPAREV D2 0
GOTOCMP 26381 ==; Test 'if'
LOAD D2 0.0008; if() #107 Body Start
SUBV2 0 D2
STORE D2 0.0003
GOTO 26383; if() #107 Body End
LOAD D2 0.0008; if() #107 Else Start
STORE D2 0.0003; if() #107 Else End
LOAD D2 0.0002; if() #252 Body End AND unless() #253 Test
COMPAREV D2 0
GOTOCMP 26390 !=; Test 'unless'
PUSHR D4; unless() #253 Body Start
PUSHV 32768; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; unless() #253 Body End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0009; return Start
SUBV D2 1
POPARGS D5 0.0010; return End
RETURNFUNC; Func[int Ghost_ConstantWalk4(int, int, int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_SetFlag(int)] Body Start
LOAD D2 0; if() #155 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26420 ==; Test 'if'
SETR D2 GD16; if() #155 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ORR D2 D3
SETR GD16 D2
GOTO 26426; if() #155 Body End
SETR D2 GD15; if() #155 Else Start
PUSHR D2
LOAD D2 0
POP D3
ORR D2 D3
SETR GD15 D2; if() #155 Else End
POP D5
RETURNFUNC; Func[void Ghost_SetFlag(int)] Body End
SETR D4 SP2; Func[bool __Ghost_CanMoveNES(int, int, int)] Body Start
LOAD D2 0.0001; if() #574 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26436 ==; Test 'if'
SETV D2 1; return Start AND if() #574 Body Start
GOTO 26476; return End AND if() #574 Body End
LOAD D2 0.0001; while() #7 Test
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 26463 ==; Test 'while'
PUSHR D4; unless() #575 Test AND while() #7 Body Start
LOAD D2 0.0002; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.3447; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 26459 !=; Test 'unless'
SETV D2 0; return Start AND unless() #575 Body Start
GOTO 26476; return End AND unless() #575 Body End
LOAD D2 0.0001
SUBV D2 8
STORE D2 0.0001; while() #7 Body End
GOTO 26436; while() #7 End
PUSHR D4; return Start
LOAD D2 0.0002; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.3447; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool __Ghost_CanMoveNES(int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void __Ghost_FixCoords()] Body Start
SETR D4 SP2
SETR D2 GD1
ANDV D2 240
STORE D2 0.0001
SETR D2 GD1; if() #597 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26492 ==; Test 'if'
LOAD D2 0.0001; if() #597 Body Start
ADDV D2 16
STORE D2 0.0001; if() #597 Body End
LOAD D2 0.0001
SETR GD1 D2
SETV D2 51; if() #312 Test
PUSHR D2
POP D0
SETR D2 SCREEN_FLAG
COMPAREV D2 0
GOTOCMP 26515 ==; Test 'if'
SETR D2 GD2; if() #312 Body Start
ANDV D2 248
STORE D2 0
SETR D2 GD2; if() #598 Test
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26512 ==; Test 'if'
LOAD D2 0; if() #598 Body Start
ADDV D2 8
STORE D2 0; if() #598 Body End
LOAD D2 0
SETR GD2 D2
GOTO 26529; if() #312 Body End
SETR D2 GD2; if() #312 Else Start
ANDV D2 240
STORE D2 0
SETR D2 GD2; if() #599 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26527 ==; Test 'if'
LOAD D2 0; if() #599 Body Start
ADDV D2 16
STORE D2 0; if() #599 Body End
LOAD D2 0
SETR GD2 D2; if() #312 Else End
POPARGS D5 0.0002
RETURNFUNC; Func[void __Ghost_FixCoords()] Body End
PUSHARGSV 0 0.0005; Func[void __Ghost_NewDir4(int, int, int)] Body Start
SETR D4 SP2
STOREV -1 0.0004
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #609 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26622 ==; Test 'if'
PUSHR D4; if() #609 Body Start
PUSHV 11; UsrFunc[lweapon LoadLWeaponOf(int)] Params
CALLFUNC 3.1100; UsrFunc[lweapon LoadLWeaponOf(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[bool lweapon::isValid()] Params AND if() #610 Test
ISVALIDLWPN D2; InlineFunc[bool lweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 26622 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Abs(int)] Params Start AND if() #611 Test AND if() #610 Body Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 14
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 26594 ==; Test 'if'
LOAD D2 0.0003; if() #322 Test AND if() #611 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26580 ==; Test 'if'
SETV D2 0; if() #322 Body Start
STORE D2 0.0004
GOTO 26582; if() #322 Body End
SETV D2 1; if() #322 Else Start
STORE D2 0.0004; if() #322 Else End
PUSHR D4; if() #612 Test
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 26594 ==; Test 'if'
LOAD D2 0.0004; if() #612 Body Start
SETR GD4 D2
GOTO 26758; return (Void) AND if() #612 Body End
LOAD D2 0.0003; if() #611 Body End AND if() #323 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26608 ==; Test 'if'
SETV D2 2; if() #323 Body Start
STORE D2 0.0004
GOTO 26610; if() #323 Body End
SETV D2 3; if() #323 Else Start
STORE D2 0.0004; if() #323 Else End
PUSHR D4; if() #613 Test
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 26622 ==; Test 'if'
LOAD D2 0.0004; if() #613 Body Start
SETR GD4 D2
GOTO 26758; return (Void) AND if() #613 Body End
SETV D3 256; if() #610 Body End AND if() #609 Body End AND InlineFunc[int Rand(int)] Params AND if() #614 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26657 ==; Test 'if'
PUSHR D4; if() #614 Body Start
PUSHV 8; UsrFunc[int __Ghost_LinedUp(int, bool)] Params Start
PUSHV 0; UsrFunc[int __Ghost_LinedUp(int, bool)] Params End
CALLFUNC 3.9300; UsrFunc[int __Ghost_LinedUp(int, bool)] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #615 Test
COMPAREV D2 0
GOTOCMP 26651 <
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 26651 ==
SETV D2 1
GOTO 26652
SETV D2 0
COMPAREV D2 0
GOTOCMP 26657 ==; Test 'if'
LOAD D2 0.0004; if() #615 Body Start
SETR GD4 D2
GOTO 26758; return (Void) AND if() #615 Body End
ALLOCATEMEMV D2 4 0; if() #614 Body End
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0; for() #171 setup
LOAD D2 0; for() #171 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26692 ==; for() #171 TestFail?
PUSHR D4; if() #616 Test AND for() #171 Body Start
LOAD D2 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 26688 ==; Test 'if'
SETV D2 1; if() #616 Body Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
ADDV D2 1
STORE D2 0.0002; if() #616 Body End
LOAD D2 0; for() #171 Body End AND for() #171 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 26662; for() #171 End
LOAD D2 0.0002; if() #617 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26702 ==; Test 'if'
SETV D2 -1; if() #617 Body Start
SETR GD4 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 26758; return (Void) AND if() #617 Body End
SETV D3 16; InlineFunc[int Rand(int)] Params AND if() #618 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 26721 ==; Test 'if'
LOAD D2 0.0003; if() #619 Test AND if() #618 Body Start
PUSHR D2
SETR D2 GD4
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 26721 ==; Test 'if'
LOAD D3 0.0003; if() #619 Body Start
DEALLOCATEMEMR D3
GOTO 26758; return (Void) AND if() #619 Body End
LOAD D2 0.0002; if() #618 Body End AND InlineFunc[int Rand(int)] Params Start
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0001
STOREV 0 0; for() #172 setup
LOAD D2 0; for() #172 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26756 ==; for() #172 TestFail?
LOAD D2 0.0003; unless() #620 Test AND for() #172 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 26752 ==; Test 'unless' AND continue 1; AND unless() #620 Body
LOAD D2 0.0001; if() #324 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26749 ==; Test 'if'
LOAD D2 0; if() #324 Body Start
SETR GD4 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 26758; return (Void)
GOTO 26752; if() #324 Body End
LOAD D2 0.0001; if() #324 Else Start
SUBV D2 1
STORE D2 0.0001; if() #324 Else End
LOAD D2 0; for() #172 Body End AND for() #172 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 26726; for() #172 End
LOAD D3 0.0003
DEALLOCATEMEMR D3
POPARGS D5 0.0008
RETURNFUNC; Func[void __Ghost_NewDir4(int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_UnsetFlag(int)] Body Start
LOAD D2 0; if() #157 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26778 ==; Test 'if'
SETR D2 GD16; if() #157 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 -2
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
SETR GD16 D2
GOTO 26785; if() #157 Body End
SETR D2 GD15; if() #157 Else Start
PUSHR D2
LOAD D2 0
BITNOT D2
POP D3
ANDR D2 D3
SETR GD15 D2; if() #157 Else End
POP D5
RETURNFUNC; Func[void Ghost_UnsetFlag(int)] Body End
PUSHARGSV 0 0.0004; Func[void Ghost_MoveXY(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0005; if() #290 Test
COMPAREV D2 0
GOTOCMP 26805 >=
PUSHR D4
CALLFUNC 2.9280; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 26805 ==
PUSHR D4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 26805 !=
SETV D2 1
GOTO 26806
SETV D2 0
COMPAREV D2 0
GOTOCMP 26810 ==; Test 'if'
SETV D2 0; if() #290 Body Start
STORE D2 0.0005; if() #290 Body End
LOAD D2 0.0006; while() #3 Test AND InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 8
GOTOCMP 26820 >
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 8
GOTOCMP 26820 >
SETV D2 0
GOTO 26821
SETV D2 1
COMPAREV D2 0
GOTOCMP 26887 ==; Test 'while'
LOAD D2 0.0006; InlineFunc[int Abs(int)] Params AND if() #138 Test AND while() #3 Body Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 26860 ==; Test 'if'
LOAD D2 0.0006; if() #139 Test AND if() #138 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 26849 ==; Test 'if'
PUSHR D4; if() #139 Body Start
PUSHV 8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006
SUBV D2 8
STORE D2 0.0006
GOTO 26810; if() #139 Body End
PUSHR D4; if() #139 Else Start
PUSHV -8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006
ADDV D2 8
STORE D2 0.0006; if() #139 Else End
GOTO 26810; if() #138 Body End
LOAD D2 0.0005; if() #140 Test AND if() #138 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 26876 ==; Test 'if'
PUSHR D4; if() #140 Body Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 8
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0005
SUBV D2 8
STORE D2 0.0005
GOTO 26810; if() #140 Body End
PUSHR D4; if() #140 Else Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV -8
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0005
ADDV D2 8
STORE D2 0.0005; if() #140 Else End
GOTO 26810; if() #138 Else End AND while() #3 Body End AND while() #3 End
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0006; if() #141 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26962 ==; Test 'if'
SETR D2 GD22; if() #141 Body Start
RSHIFTV D2 8
STORE D2 0.0002
SETR D2 GD1
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #142 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26932 ==; Test 'if'
LOAD D2 0.0003; if() #142 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 26954; if() #142 Body End
PUSHR D4; if() #143 Test AND if() #142 Else Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0006
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 26950 ==; Test 'if'
LOAD D2 0.0003; if() #143 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 26954; if() #143 Body End
LOAD D2 0.0003; if() #143 Else Start
RSHIFTV D2 3
LSHIFTV D2 3
STORE D2 0.0003; if() #143 Else End
LOAD D2 0.0003; if() #142 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
GOTO 27045; if() #141 Body End
LOAD D2 0.0006; if() #291 Test AND if() #141 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27045 ==; Test 'if'
SETR D2 GD12; if() #291 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
STORE D2 0.0002
SETR D2 GD1
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #144 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27015 ==; Test 'if'
LOAD D2 0.0003; if() #144 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 27038; if() #144 Body End
PUSHR D4; if() #145 Test AND if() #144 Else Start
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 27032 ==; Test 'if'
LOAD D2 0.0003; if() #145 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 27038; if() #145 Body End
LOAD D2 0.0003; if() #145 Else Start
ADDV D2 7
RSHIFTV D2 3
LSHIFTV D2 3
SUBV D2 1
STORE D2 0.0003; if() #145 Else End
LOAD D2 0.0003; if() #144 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2; if() #291 Body End
LOAD D2 0.0005; if() #141 Else End AND if() #146 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27116 ==; Test 'if'
SETR D2 GD23; if() #146 Body Start
RSHIFTV D2 8
STORE D2 0.0002
SETR D2 GD2
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #147 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27086 ==; Test 'if'
LOAD D2 0.0003; if() #147 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 27108; if() #147 Body End
PUSHR D4; if() #148 Test AND if() #147 Else Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0005
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 27104 ==; Test 'if'
LOAD D2 0.0003; if() #148 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 27108; if() #148 Body End
LOAD D2 0.0003; if() #148 Else Start
RSHIFTV D2 3
LSHIFTV D2 3
STORE D2 0.0003; if() #148 Else End
LOAD D2 0.0003; if() #147 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
GOTO 27199; if() #146 Body End
LOAD D2 0.0005; if() #292 Test AND if() #146 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27199 ==; Test 'if'
SETR D2 GD13; if() #292 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
STORE D2 0.0002
SETR D2 GD2
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #149 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27169 ==; Test 'if'
LOAD D2 0.0003; if() #149 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 27192; if() #149 Body End
PUSHR D4; if() #150 Test AND if() #149 Else Start
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 27186 ==; Test 'if'
LOAD D2 0.0003; if() #150 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 27192; if() #150 Body End
LOAD D2 0.0003; if() #150 Else Start
ADDV D2 7
RSHIFTV D2 3
LSHIFTV D2 3
SUBV D2 1
STORE D2 0.0003; if() #150 Else End
LOAD D2 0.0003; if() #149 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2; if() #292 Body End
PUSHR D4; if() #146 Else End AND if() #293 Test
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 27211 ==
SETR D2 GD17
ANDV D2 4
COMPAREV D2 0
GOTOCMP 27211 !=
SETV D2 1
GOTO 27212
SETV D2 0
COMPAREV D2 0
GOTOCMP 27269 ==; Test 'if'
PUSHR D4; if() #151 Test AND if() #293 Body Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 27234 ==; Test 'if'
PUSHR D4; if() #151 Body Start
LOAD D2 0.0006; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapRadians(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2
LOAD D2 0.0005
SETR D1 D2; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapRadians(int)] Params End
WRAPRADIANS D2; InlineFunc[int WrapRadians(int)] Body
MULTV D2 57.2958
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0807; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 27265; if() #151 Body End
LOAD D2 0.0006; InlineFunc[int Abs(int)] Params AND if() #152 Test AND if() #151 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27255 ==; Test 'if'
LOAD D2 0.0005; if() #153 Test AND if() #152 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27252 ==; Test 'if'
SETV D2 0; if() #153 Body Start
SETR GD4 D2
GOTO 27265; if() #153 Body End
SETV D2 1; if() #153 Else Start
SETR GD4 D2; if() #153 Else End
GOTO 27265; if() #152 Body End
LOAD D2 0.0006; if() #154 Test AND if() #152 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27263 ==; Test 'if'
SETV D2 2; if() #154 Body Start
SETR GD4 D2
GOTO 27265; if() #154 Body End
SETV D2 3; if() #154 Else Start
SETR GD4 D2; if() #154 Else End
SETR D2 GD1; if() #152 Else End AND if() #151 Else End
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2; if() #293 Body End
POPARGS D5 0.0007
RETURNFUNC; Func[void Ghost_MoveXY(int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[int Ghost_ConstantWalk8(int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD21; if() #254 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27280 ==; Test 'if'
LOAD D2 0.0006; return Start AND if() #254 Body Start
GOTO 27381; return End AND if() #254 Body End
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0005
DIVV D2 100
STORE D2 0.0005
LOAD D2 0.0006; if() #255 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 27309 ==; Test 'if'
PUSHR D4; if() #255 Body Start
LOAD D2 0.0004; UsrFunc[void __Ghost_NewDir8(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void __Ghost_NewDir8(int, int, int)] Params End
CALLFUNC 2.7383; UsrFunc[void __Ghost_NewDir8(int, int, int)] Call
POP D4
LOAD D2 0.0005; InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0005
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0006; if() #255 Body End
SETR D2 GD4; if() #256 Test
COMPAREV D2 0
GOTOCMP 27317 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 27317 ==
SETV D2 1
GOTO 27318
SETV D2 0
COMPAREV D2 0
GOTOCMP 27340 ==; Test 'if'
SETR D2 GD4; if() #108 Test AND if() #256 Body Start
COMPAREV D2 2
GOTOCMP 27331 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 27331 ==
SETR D2 GD4
COMPAREV D2 6
GOTOCMP 27331 ==
SETV D2 0
GOTO 27332
SETV D2 1
COMPAREV D2 0
GOTOCMP 27338 ==; Test 'if'
LOAD D2 0.0005; if() #108 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 27340; if() #108 Body End
LOAD D2 0.0005; if() #108 Else Start
STORE D2 0.0001; if() #108 Else End
SETR D2 GD4; if() #256 Body End AND if() #257 Test
COMPAREV D2 2
GOTOCMP 27348 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 27348 ==
SETV D2 1
GOTO 27349
SETV D2 0
COMPAREV D2 0
GOTOCMP 27371 ==; Test 'if'
SETR D2 GD4; if() #109 Test AND if() #257 Body Start
COMPAREV D2 0
GOTOCMP 27362 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 27362 ==
SETR D2 GD4
COMPAREV D2 5
GOTOCMP 27362 ==
SETV D2 0
GOTO 27363
SETV D2 1
COMPAREV D2 0
GOTOCMP 27369 ==; Test 'if'
LOAD D2 0.0005; if() #109 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 27371; if() #109 Body End
LOAD D2 0.0005; if() #109 Else Start
STORE D2 0; if() #109 Else End
PUSHR D4; if() #257 Body End
LOAD D2 0.0001; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006; return Start
SUBV D2 1
POPARGS D5 0.0007; return End
RETURNFUNC; Func[int Ghost_ConstantWalk8(int, int, int, int, int)] Body End
PUSHARGSV 0 0.0005; Func[void __Ghost_NewDir8(int, int, int)] Body Start
SETR D4 SP2
STOREV -1 0.0004
PUSHR D4; if() #621 Test
PUSHR GD4; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 27564 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #622 Test AND if() #621 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27514 ==; Test 'if'
PUSHR D4; if() #622 Body Start
PUSHV 11; UsrFunc[lweapon LoadLWeaponOf(int)] Params
CALLFUNC 3.1100; UsrFunc[lweapon LoadLWeaponOf(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[bool lweapon::isValid()] Params AND if() #623 Test
ISVALIDLWPN D2; InlineFunc[bool lweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 27514 ==; Test 'if'
LOAD D2 0.0003; if() #325 Test AND if() #623 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27426 ==; Test 'if'
SETV D2 2; if() #325 Body Start
STORE D2 0.0004
GOTO 27442; if() #325 Body End
LOAD D2 0.0003; if() #326 Test AND if() #325 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27440 ==; Test 'if'
SETV D2 3; if() #326 Body Start
STORE D2 0.0004
GOTO 27442; if() #326 Body End
SETV D2 0; if() #326 Else Start
STORE D2 0.0004; if() #326 Else End
SETR D2 GD2; if() #325 Else End AND InlineFunc[int Abs(int)] Params Start AND if() #624 Test
PUSHR D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 14
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27496 ==; Test 'if'
LOAD D2 0.0004; if() #327 Test AND if() #624 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27480 ==; Test 'if'
LOAD D2 0.0003; if() #328 Test AND if() #327 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27476 ==; Test 'if'
LOAD D2 0.0004; if() #328 Body Start
ADDV D2 2
STORE D2 0.0004
GOTO 27496; if() #328 Body End
LOAD D2 0.0004; if() #328 Else Start
ADDV D2 4
STORE D2 0.0004; if() #328 Else End
GOTO 27496; if() #327 Body End
LOAD D2 0.0003; if() #329 Test AND if() #327 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27494 ==; Test 'if'
SETV D2 0; if() #329 Body Start
STORE D2 0.0004
GOTO 27496; if() #329 Body End
SETV D2 1; if() #329 Else Start
STORE D2 0.0004; if() #329 Else End
PUSHR D4; if() #327 Else End AND if() #624 Body End AND if() #625 Test
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 27514 ==; Test 'if'
LOAD D2 0.0004; if() #625 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
GOTO 27658; return (Void) AND if() #625 Body End
SETV D3 256; if() #623 Body End AND if() #622 Body End AND InlineFunc[int Rand(int)] Params AND if() #626 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27555 ==; Test 'if'
PUSHR D4; if() #626 Body Start
PUSHV 8; UsrFunc[int __Ghost_LinedUp(int, bool)] Params Start
PUSHV 1; UsrFunc[int __Ghost_LinedUp(int, bool)] Params End
CALLFUNC 3.9300; UsrFunc[int __Ghost_LinedUp(int, bool)] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #627 Test
COMPAREV D2 0
GOTOCMP 27543 <
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 27543 ==
SETV D2 1
GOTO 27544
SETV D2 0
COMPAREV D2 0
GOTOCMP 27555 ==; Test 'if'
LOAD D2 0.0004; if() #627 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
GOTO 27658; return (Void) AND if() #627 Body End
SETV D3 16; if() #626 Body End AND InlineFunc[int Rand(int)] Params AND if() #628 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 27658 !=; Test 'if' AND return (Void) AND if() #628 Body
ALLOCATEMEMV D2 8 0; if() #621 Body End
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0; for() #173 setup
LOAD D2 0; for() #173 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27599 ==; for() #173 TestFail?
PUSHR D4; if() #629 Test AND for() #173 Body Start
LOAD D2 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 27595 ==; Test 'if'
LOAD D2 0.0002; if() #629 Body Start
ADDV D2 1
STORE D2 0.0002
SETV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; if() #629 Body End
LOAD D2 0; for() #173 Body End AND for() #173 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 27569; for() #173 End
LOAD D2 0.0002; if() #630 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27615 ==; Test 'if'
SETV D2 -1; if() #630 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 27658; return (Void) AND if() #630 Body End
LOAD D2 0.0002; InlineFunc[int Rand(int)] Params Start
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0001
STOREV 0 0; for() #174 setup
LOAD D2 0; for() #174 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27656 ==; for() #174 TestFail?
LOAD D2 0.0003; unless() #631 Test AND for() #174 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 27652 ==; Test 'unless' AND continue 1; AND unless() #631 Body
LOAD D2 0.0001; if() #330 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27649 ==; Test 'if'
LOAD D2 0; if() #330 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 27658; return (Void)
GOTO 27652; if() #330 Body End
LOAD D2 0.0001; if() #330 Else Start
SUBV D2 1
STORE D2 0.0001; if() #330 Else End
LOAD D2 0; for() #174 Body End AND for() #174 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 27620; for() #174 End
LOAD D3 0.0003
DEALLOCATEMEMR D3
POPARGS D5 0.0008
RETURNFUNC; Func[void __Ghost_NewDir8(int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_DeathAnimation(ffc, npc, int)] Body Start
LOAD D2 0; if() #110 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27675 ==; Test 'if'
PUSHR D4; if() #110 Body Start
LOAD D2 0.0002; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 0; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params End
CALLFUNC 2.7784; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Call
POP D4
GOTO 27782; if() #110 Body End
LOAD D2 0; if() #111 Test AND if() #110 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27689 ==; Test 'if'
PUSHR D4; if() #111 Body Start
LOAD D2 0.0002; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params End
CALLFUNC 2.7784; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Call
POP D4
GOTO 27782; if() #111 Body End
LOAD D2 0; if() #112 Test AND if() #111 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27702 ==; Test 'if'
PUSHR D4; if() #112 Body Start
LOAD D2 0.0002; UsrFunc[void __Ghost_ShrinkAway(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void __Ghost_ShrinkAway(ffc, npc)] Params End
CALLFUNC 2.7953; UsrFunc[void __Ghost_ShrinkAway(ffc, npc)] Call
POP D4
GOTO 27782; if() #112 Body End
LOAD D2 0.0001; InlineFunc[bool npc::isValid()] Params AND if() #258 Test AND if() #112 Else Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 27775 ==; Test 'if'
SETV D2 1; if() #258 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD1
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2; if() #258 Body End
PUSHR D4
LOAD D2 0.0002; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.8217; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2; if() #112 Else End
POPARGS D5 0.0003; if() #111 Else End AND if() #110 Else End
RETURNFUNC; Func[void Ghost_DeathAnimation(ffc, npc, int)] Body End
PUSHARGSV 0 0.0005; Func[void __Ghost_Explode(ffc, npc, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0004
SETR D2 GD1
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __DeathAnimStart(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void __DeathAnimStart(ffc, npc)] Params End
CALLFUNC 3.9209; UsrFunc[void __DeathAnimStart(ffc, npc)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void __DeathAnimSFX(int, int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCID
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X; UsrFunc[void __DeathAnimSFX(int, int)] Params End
CALLFUNC 3.9153; UsrFunc[void __DeathAnimSFX(int, int)] Call
POP D4
LOAD D2 0.0005; if() #311 Test
COMPAREV D2 0
GOTOCMP 27840 ==; Test 'if'
SETV D2 10000; if() #311 Body Start
SETR GD20 D2
GOTO 27842; if() #311 Body End
SETV D2 0; if() #311 Else Start
SETR GD20 D2; if() #311 Else End
STOREV 0 0.0001; for() #169 setup
LOAD D2 0.0001; for() #169 LoopTest
COMPAREV D2 15
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27944 ==; for() #169 TestFail?
SETV D2 4; InlineFunc[lweapon screendata::CreateLWeapon(int)] Params AND for() #169 Body Start
CREATELWEAPONR D2; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body Start
SETR D2 REFLWPN; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body End
STORE D2 0.0004
LOAD D2 0.0003
PUSHR D2
SETR D2 GD12; InlineFunc[int Rand(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
SUBV D2 8
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
PUSHR D2
SETR D2 GD13; InlineFunc[int Rand(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
SUBV D2 8
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFLWPN
SETR LWPNCOLLDET D2
STOREV 0 0; for() #170 setup
LOAD D2 0; for() #170 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27940 ==; for() #170 TestFail?
PUSHR D4; for() #170 Body Start
LOAD D2 0.0007; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.5499; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
LOAD D2 0.0005; if() #596 Test
COMPAREV D2 0
GOTOCMP 27929 ==; Test 'if'
PUSHR D4; if() #596 Body Start
LOAD D2 0.0007; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 2.4849; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
POP D4; if() #596 Body End
PUSHR D4
LOAD D2 0.0007; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.5099; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4; for() #170 Body End
LOAD D2 0; for() #170 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 27907; for() #170 End
LOAD D2 0.0001; for() #169 Body End AND for() #169 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 27843; for() #169 End
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params End
CALLFUNC 3.9082; UsrFunc[void __DeathAnimEnd(ffc, npc)] Call
POP D4
POPARGS D5 0.0008
RETURNFUNC; Func[void __Ghost_Explode(ffc, npc, bool)] Body End
PUSHARGSV 0 0.0012; Func[void __Ghost_ShrinkAway(ffc, npc)] Body Start
SETR D4 SP2
SETR D2 GD1
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0011
SETR D2 GD2
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0010
SETR D2 GD12
MULTV D2 16
STORE D2 0.0009
SETR D2 GD13
MULTV D2 16
STORE D2 0.0008
LOAD D2 0.0012
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE
STORE D2 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
LOAD D2 0.0013; if() #331 Test
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28010 ==; Test 'if'
SETV D2 4; if() #331 Body Start
STORE D2 0.0006
GOTO 28021; if() #331 Body End
SETV D2 49; if() #332 Test AND if() #331 Else Start
PUSHR D2
POP D0
SETR D2 SCREEN_FLAG
COMPAREV D2 0
GOTOCMP 28019 ==; Test 'if'
SETV D2 1; if() #332 Body Start
STORE D2 0.0006
GOTO 28021; if() #332 Body End
SETV D2 2; if() #332 Else Start
STORE D2 0.0006; if() #332 Else End
LOAD D2 0.0012; if() #331 Else End AND if() #333 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 256
COMPAREV D2 0
GOTOCMP 28039 !=
LOAD D2 0.0013
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28039 !=
SETV D2 0
GOTO 28040
SETV D2 1
COMPAREV D2 0
GOTOCMP 28045 ==; Test 'if'
SETV D2 64; if() #333 Body Start
STORE D2 0.0005
GOTO 28047; if() #333 Body End
SETV D2 128; if() #333 Else Start
STORE D2 0.0005; if() #333 Else End
PUSHR D4
LOAD D2 0.0013; UsrFunc[void __DeathAnimStart(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[void __DeathAnimStart(ffc, npc)] Params End
CALLFUNC 3.9209; UsrFunc[void __DeathAnimStart(ffc, npc)] Call
POP D4
SETV D2 1024
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
SETV D2 0
SETR GD20 D2
STOREV 0 0.0004; for() #175 setup
LOAD D2 0.0004; for() #175 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 28208 ==; for() #175 TestFail?
LOAD D2 0.0004; InlineFunc[int Cos(int)] Params Start AND for() #175 Body Start
SUBV D2 30
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
SETV D3 30; InlineFunc[int Cos(int)] Params
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0003
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0003
POP D3
MULTR D2 D3
STORE D2 0.0002
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0003
POP D3
MULTR D2 D3
STORE D2 0.0001
LOAD D2 0.0004; if() #632 Test
COMPAREV D2 30
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28110 ==; Test 'if'
PUSHR D4; if() #632 Body Start
LOAD D2 0.0012; UsrFunc[void __DeathAnimSFX(int, int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCID
LOAD D2 0.0012
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X; UsrFunc[void __DeathAnimSFX(int, int)] Params End
CALLFUNC 3.9153; UsrFunc[void __DeathAnimSFX(int, int)] Call
POP D4; if() #632 Body End
SETR D2 GD10; if() #334 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28157 ==; Test 'if'
LOAD D2 0.0006; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #334 Body Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
PUSHR GD12
PUSHR GD13
PUSHR GD11
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHARGSV 0 0.0004
PUSHV 1
LOAD D2 0.0005
PUSHR D2; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 28197; if() #334 Body End
LOAD D2 0.0006; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #334 Else Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
PUSHR GD10
PUSHR GD12
PUSHR GD13
PUSHR GD11
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHARGSV 0 0.0005
PUSHV 1
LOAD D2 0.0005
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #334 Else End
PUSHR D4
LOAD D2 0.0013; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.5099; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4; for() #175 Body End
LOAD D2 0.0004; for() #175 LoopIncrement
ADDV D2 1
STORE D2 0.0004
GOTO 28066; for() #175 End
PUSHR D4
LOAD D2 0.0013; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params End
CALLFUNC 3.9082; UsrFunc[void __DeathAnimEnd(ffc, npc)] Call
POP D4
POPARGS D5 0.0014
RETURNFUNC; Func[void __Ghost_ShrinkAway(ffc, npc)] Body End
PUSHV 0; Func[void __GhCleanUp(ffc)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFCWIDTH D2
SETV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFCHEIGHT D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DELAY D2
STOREV 0 0; for() #164 setup
LOAD D2 0; for() #164 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 28349 ==; for() #164 TestFail?
SETV D2 0; for() #164 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; for() #164 Body End
LOAD D2 0; for() #164 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 28328; for() #164 End
POPARGS D5 0.0002
RETURNFUNC; Func[void __GhCleanUp(ffc)] Body End
SETR D4 SP2; Func[void Ghost_ForceDir(int)] Body Start
LOAD D2 0
SETR GD4 D2
SETR D2 GD17
ORV D2 4
SETR GD17 D2
POP D5
RETURNFUNC; Func[void Ghost_ForceDir(int)] Body End
PUSHARGSV 0 0.0005; Func[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD21; if() #270 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 28368 ==; Test 'if'
LOAD D2 0.0011; return Start AND if() #270 Body Start
GOTO 28697; return End AND if() #270 Body End
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0011; if() #119 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28380 ==; Test 'if'
SETV D2 0; if() #119 Body Start
STORE D2 0.0004
SETV D2 0
STORE D2 0.0003
GOTO 28386; if() #119 Body End
LOAD D2 0.0011; if() #119 Else Start
MULTV D2 10000
STORE D2 0.0004
LOAD D2 0.0011
RSHIFTV D2 0
STORE D2 0.0003; if() #119 Else End
LOAD D2 0.0003; if() #271 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 28394 ==; Test 'if'
LOAD D2 0.0003; return Start AND if() #271 Body Start
SUBV D2 1
GOTO 28697; return End AND if() #271 Body End
PUSHR D4
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0.0002
PUSHR D4; unless() #272 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28409 !=; Test 'unless'
PUSHR D4; unless() #272 Body Start
PUSHV 32768; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; unless() #272 Body End
LOAD D2 0.0010
DIVV D2 100
STORE D2 0.0010
SETR D2 GD17; if() #273 Test
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28553 ==; Test 'if'
SETR D2 GD1; if() #120 Test AND if() #273 Body Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28481 ==; Test 'if'
PUSHR D4; if() #120 Body Start
PUSHV 2; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV 3; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #121 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 28462 ==; Test 'if'
SETR D2 GD4; unless() #274 Test AND if() #121 Body Start
COMPAREV D2 2
GOTOCMP 28454 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 28454 ==
SETV D2 0
GOTO 28455
SETV D2 1
COMPAREV D2 0
GOTOCMP 28470 !=; Test 'unless'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #274 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #274 Body End
GOTO 28470; if() #121 Body End
LOAD D2 0.0001; if() #122 Test AND if() #121 Else Start
COMPAREV D2 0
GOTOCMP 28468 ==; Test 'if'
SETV D2 2; if() #122 Body Start
SETR GD4 D2
GOTO 28470; if() #122 Body End
SETV D2 3; if() #122 Else Start
SETR GD4 D2; if() #122 Else End
LOAD D2 0.0010; if() #121 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004
GOTO 28553; if() #120 Body End
SETR D2 GD2; if() #123 Test AND if() #120 Else Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28543 ==; Test 'if'
PUSHR D4; if() #123 Body Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.6428; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #124 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 28524 ==; Test 'if'
SETR D2 GD4; unless() #275 Test AND if() #124 Body Start
COMPAREV D2 0
GOTOCMP 28516 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 28516 ==
SETV D2 0
GOTO 28517
SETV D2 1
COMPAREV D2 0
GOTOCMP 28532 !=; Test 'unless'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #275 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #275 Body End
GOTO 28532; if() #124 Body End
LOAD D2 0.0001; if() #125 Test AND if() #124 Else Start
COMPAREV D2 0
GOTOCMP 28530 ==; Test 'if'
SETV D2 0; if() #125 Body Start
SETR GD4 D2
GOTO 28532; if() #125 Body End
SETV D2 1; if() #125 Else Start
SETR GD4 D2; if() #125 Else End
LOAD D2 0.0010; if() #124 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004
GOTO 28553; if() #123 Body End
LOAD D2 0.0010; InlineFunc[int Floor(int)] Params Start AND if() #123 Else Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004; if() #123 Else End
LOAD D2 0.0004; if() #120 Else End AND if() #273 Body End AND if() #276 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28605 ==; Test 'if'
PUSHR D4; if() #276 Body Start
CALLFUNC 2.6478; UsrFunc[void __Ghost_FixCoords()] Call
POP D4
LOAD D2 0.0010; InlineFunc[int Floor(int)] Params Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004
LOAD D2 0.0011; if() #277 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28605 ==; Test 'if'
PUSHR D4; if() #277 Body Start
LOAD D2 0.0009; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params End
CALLFUNC 2.6531; UsrFunc[void __Ghost_NewDir4(int, int, int)] Call
POP D4
SETV D3 16; InlineFunc[int Rand(int)] Params AND if() #278 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 28605 ==; Test 'if'
LOAD D2 0.0002; unless() #279 Test AND if() #278 Body Start
COMPAREV D2 0
GOTOCMP 28601 !=; Test 'unless'
PUSHR D4; unless() #279 Body Start
PUSHV 32768; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; unless() #279 Body End
LOAD D2 0.0005
STORE D2 0.0003
LOAD D2 0.0003; return Start
GOTO 28697; return End AND if() #278 Body End
SETR D2 GD1; if() #277 Body End AND if() #276 Body End AND InlineFunc[int Abs(int)] Params Start AND if() #126 Test
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 28631 >=
SETR D2 GD2; InlineFunc[int Abs(int)] Params Start
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 28631 >=
SETV D2 1
GOTO 28632
SETV D2 0
COMPAREV D2 0
GOTOCMP 28668 ==; Test 'if'
SETR D2 LINKACTION; if() #280 Test AND if() #126 Body Start
COMPAREV D2 7
GOTOCMP 28643 !=
SETR D2 GD17
ANDV D2 32
COMPAREV D2 0
GOTOCMP 28643 !=
SETV D2 1
GOTO 28644
SETV D2 0
COMPAREV D2 0
GOTOCMP 28671 ==; Test 'if'
SETR D2 GD4; if() #280 Body Start
XORV D2 1
SETR GD4 D2
LOAD D2 0.0010; InlineFunc[int Floor(int)] Params Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD17
ORV D2 32
SETR GD17 D2; if() #280 Body End
GOTO 28671; if() #126 Body End
SETR D2 GD17; if() #126 Else Start
ANDV D2 -33
SETR GD17 D2; if() #126 Else End
LOAD D2 0.0004
SUBV D2 1
STORE D2 0.0004
PUSHR D4
PUSHR GD4; UsrFunc[void Ghost_Move(int, int, int)] Params Start
LOAD D2 0.0010
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.8699; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
LOAD D2 0.0002; unless() #281 Test
COMPAREV D2 0
GOTOCMP 28688 !=; Test 'unless'
PUSHR D4; unless() #281 Body Start
PUSHV 32768; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; unless() #281 Body End
LOAD D2 0.0004; if() #127 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 28696 ==; Test 'if'
LOAD D2 0.0004; return Start AND if() #127 Body Start
DIVV D2 10000
GOTO 28697; return End AND if() #127 Body End
SETV D2 -1; return Start AND if() #127 Else Start
POPARGS D5 0.0012; return End AND if() #127 Else End
RETURNFUNC; Func[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void Ghost_Move(int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0004; if() #130 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28712 ==; Test 'if'
LOAD D2 0.0003; if() #130 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 28790; if() #130 Body End
LOAD D2 0.0004; if() #131 Test AND if() #130 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28720 ==; Test 'if'
LOAD D2 0.0003; if() #131 Body Start
STORE D2 0
GOTO 28790; if() #131 Body End
LOAD D2 0.0004; if() #132 Test AND if() #131 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28729 ==; Test 'if'
LOAD D2 0.0003; if() #132 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 28790; if() #132 Body End
LOAD D2 0.0004; if() #133 Test AND if() #132 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28737 ==; Test 'if'
LOAD D2 0.0003; if() #133 Body Start
STORE D2 0.0001
GOTO 28790; if() #133 Body End
LOAD D2 0.0004; if() #134 Test AND if() #133 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28751 ==; Test 'if'
LOAD D2 0.0003; if() #134 Body Start
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0
GOTO 28790; if() #134 Body End
LOAD D2 0.0004; if() #135 Test AND if() #134 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28764 ==; Test 'if'
LOAD D2 0.0003; if() #135 Body Start
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0
GOTO 28790; if() #135 Body End
LOAD D2 0.0004; if() #136 Test AND if() #135 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28777 ==; Test 'if'
LOAD D2 0.0003; if() #136 Body Start
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
MULTV D2 0.7071
STORE D2 0
GOTO 28790; if() #136 Body End
LOAD D2 0.0004; if() #137 Test AND if() #136 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 28799 ==; Test 'if'
LOAD D2 0.0003; if() #137 Body Start
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
MULTV D2 0.7071
STORE D2 0
GOTO 28790; if() #137 Body End
GOTO 28799; return (Void) AND if() #137 Else
PUSHR D4; if() #136 Else End AND if() #135 Else End AND if() #134 Else End AND if() #133 Else End AND if() #132 Else End AND if() #131 Else End AND if() #130 Else End
LOAD D2 0.0001; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
POPARGS D5 0.0005
RETURNFUNC; Func[void Ghost_Move(int, int, int)] Body End
SETR D4 SP2; Func[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Body Start
LOAD D2 0.0001; if() #600 Test
COMPAREV D2 -1
GOTOCMP 28810 ==
LOAD D2 0.0001
COMPAREV D2 -2
GOTOCMP 28810 ==
SETV D2 0
GOTO 28811
SETV D2 1
COMPAREV D2 0
GOTOCMP 28815 ==; Test 'if'
SETV D2 1; if() #600 Body Start
STORE D2 0.0001; if() #600 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0001
SETR GD10 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
LOAD D2 0
SETR GD11 D2
LOAD D2 0.0002; if() #313 Test
COMPAREV D2 0
GOTOCMP 28861 ==; Test 'if'
LOAD D2 0.0003; if() #313 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
SETR GD1 D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SETR GD2 D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SETR GD3 D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_JUMP
SETR GD5 D2
GOTO 28893; if() #313 Body End
LOAD D2 0.0004; if() #313 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
SETR GD1 D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SETR GD2 D2
SETV D2 0
SETR GD3 D2
SETV D2 0
SETR GD5 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2; if() #313 Else End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.5499; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
SETR GD4 D2
SETV D2 0
SETR GD6 D2
SETV D2 0
SETR GD7 D2
SETV D2 0
SETR GD8 D2
SETV D2 0
SETR GD9 D2
SETR D2 GD1
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
SETR GD12 D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
SETR GD13 D2
SETV D2 0
SETR GD22 D2
SETV D2 0
SETR GD23 D2
LOAD D2 0.0001; if() #601 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29011 ==; Test 'if'
SETV D2 3; if(true) #314 [Opt:AlwaysOn] AND if() #601 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
SETV D2 65456
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCOTILE D2
SETV D2 65456; if(true) #602 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2; if() #601 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003; if() #315 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29042 ==; Test 'if'
SETV D2 1; if() #315 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
GOTO 29054; if() #315 Body End
SETV D2 0; if() #315 Else Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #315 Else End
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
SETV D2 0
SETR GD15 D2
SETV D2 0
SETR GD16 D2
SETV D2 0
SETR GD20 D2
SETV D2 0
SETR GD21 D2
SETV D2 0
SETR GD17 D2
SETV D2 0
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 65536
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Body End
PUSHARGSV 0 0.0008; Func[npc Ghost_InitAutoGhost(ffc, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
SETR D2 NPCCOUNT; for() #50 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #50 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 29190 ==; for() #50 TestFail?
LOAD D2 0.0005; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #50 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0007
LOAD D2 0.0007; if() #128 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29120 ==; Test 'if'
SETV D2 0; if() #128 Body Start
STORE D2 0.0006
GOTO 29186; continue 1;
GOTO 29122; if() #128 Body End
SETV D2 1; if() #128 Else Start
STORE D2 0.0006; if() #128 Else End
LOAD D2 0.0007; if() #282 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29137 ==; Test 'if'
SETV D2 0; if() #282 Body Start
STORE D2 0.0006
GOTO 29186; continue 1; AND if() #282 Body End
LOAD D2 0.0006; if() #129 Test
COMPAREV D2 0
GOTOCMP 29190 ==; Test 'if'
PUSHR D4; if() #129 Body Start
LOAD D2 0.0009; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
PUSHV 1
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Params End
CALLFUNC 2.8801; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Call
POP D4
LOAD D2 0.0007; if() #283 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29182 ==; Test 'if'
SETV D2 1; if() #283 Body Start
PUSHR D2
LOAD D2 0.0009
POP D3
PUSHR D2
PUSHR D3
SETV D2 1
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #283 Body End
LOAD D2 0.0007; return Start
GOTO 29235; return End
GOTO 29186; if() #129 Body End
GOTO 29190; break 1; AND if() #129 Else
LOAD D2 0.0005; for() #50 Body End AND for() #50 LoopIncrement
SUBV D2 1
STORE D2 0.0005
GOTO 29095; for() #50 End
ALLOCATEMEMV D2 60 0
WRITEPODSTRING D2 "ghost.zh: AutoGhost initialization failed - enemy missing.\n"
STORE D2 0.0004
ALLOCATEMEMV D2 30 0
WRITEPODSTRING D2 "  DMap %d, screen %X\n"
STORE D2 0.0002
ALLOCATEMEMV D2 30 0
WRITEPODSTRING D2 "  Script %d, enemy ID %d\n"
STORE D2 0
LOAD D2 0.0004; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGR CURDMAP
PUSHVARGR CURDSCR; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP REFFFC
PUSHVARGR FFSCRIPT
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0009
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
QUIT; InlineFunc[void Quit()] Body
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0004
DEALLOCATEMEMR D3
POPARGS D5 0.0010
RETURNFUNC; Func[npc Ghost_InitAutoGhost(ffc, int)] Body End
SETR D4 SP2; Func[void Ghost_MoveAtAngle(int, int, int)] Body Start
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
LOAD D2 0.0001; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
POPARGS D5 0.0003
RETURNFUNC; Func[void Ghost_MoveAtAngle(int, int, int)] Body End
SETR D4 SP2; Func[int VectorX(int, int)] Body Start
LOAD D2 0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR D4 SP2; Func[int VectorY(int, int)] Body Start
LOAD D2 0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
SETR D4 SP2; Func[bool IsSideview()] Body Start
SETV D2 51; return Start
PUSHR D2
POP D0
SETR D2 SCREEN_FLAG
PUSHR D2
SETR D2 CURDMAP; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATASIDEVIEW
POP D3
COMPARER D3 D2
SETCMP D2 BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR D4 SP2; Func[void Ghost_SetHitOffsets(npc, int, int, int, int)] Body Start
SETR D2 GD13
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
LOAD D2 0.0003; if() #294 Test
COMPAREV D2 0
GOTOCMP 29323 <=
LOAD D2 0.0003
COMPAREV D2 1
GOTOCMP 29323 >=
SETV D2 1
GOTO 29324
SETV D2 0
COMPAREV D2 0
GOTOCMP 29337 ==; Test 'if'
PUSHR D4; if() #294 Body Start
LOAD D2 0.0003; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.9517; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0.0003; if() #294 Body End
LOAD D2 0.0002; if() #295 Test
COMPAREV D2 0
GOTOCMP 29345 <=
LOAD D2 0.0002
COMPAREV D2 1
GOTOCMP 29345 >=
SETV D2 1
GOTO 29346
SETV D2 0
COMPAREV D2 0
GOTOCMP 29359 ==; Test 'if'
PUSHR D4; if() #295 Body Start
LOAD D2 0.0002; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.9517; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0.0002; if() #295 Body End
LOAD D2 0.0001; if() #296 Test
COMPAREV D2 0
GOTOCMP 29367 <=
LOAD D2 0.0001
COMPAREV D2 1
GOTOCMP 29367 >=
SETV D2 1
GOTO 29368
SETV D2 0
COMPAREV D2 0
GOTOCMP 29381 ==; Test 'if'
PUSHR D4; if() #296 Body Start
LOAD D2 0.0001; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.9517; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0.0001; if() #296 Body End
LOAD D2 0; if() #297 Test
COMPAREV D2 0
GOTOCMP 29389 <=
LOAD D2 0
COMPAREV D2 1
GOTOCMP 29389 >=
SETV D2 1
GOTO 29390
SETV D2 0
COMPAREV D2 0
GOTOCMP 29403 ==; Test 'if'
PUSHR D4; if() #297 Body Start
LOAD D2 0; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.9517; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0; if() #297 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0003
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
LOAD D2 0; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_X D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
LOAD D2 0.0001
LSHIFTV D2 8
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD22 D2
LOAD D2 0.0003
LSHIFTV D2 8
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SETR GD23 D2
POPARGS D5 0.0005
RETURNFUNC; Func[void Ghost_SetHitOffsets(npc, int, int, int, int)] Body End
SETR D4 SP2; Func[int Round(int)] Body Start
LOAD D2 0; return Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 29527 ==
LOAD D2 0
SUBV D2 0.5000
LSHIFTV D2 0
GOTO 29530
LOAD D2 0
ADDV D2 0.5000
LSHIFTV D2 0
POP D5; return End
RETURNFUNC; Func[int Round(int)] Body End
PUSHV 0; Func[void Ghost_Transform(ffc, npc, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0004; if() #311 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 29551 ==; Test 'if'
LOAD D2 0.0004; if() #311 Body Start
SETR GD10 D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #311 Body End
LOAD D2 0.0003; if() #312 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 29576 ==; Test 'if'
LOAD D2 0.0003; if() #312 Body Start
SETR GD11 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2; if() #312 Body End
LOAD D2 0.0002; if() #313 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 29643 ==; Test 'if'
SETR D2 GD12; if() #313 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0002
SETR GD12 D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD1
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD1 D2
SETR D2 GD1
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD1
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2; if() #313 Body End
LOAD D2 0.0001; if() #314 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 29710 ==; Test 'if'
SETR D2 GD13; if() #314 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0001
SETR GD13 D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD2
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD2 D2
SETR D2 GD2
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #314 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params Start
PUSHR D2
PUSHARGSV 0 0.0004; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params End
CALLFUNC 2.9296; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Call
POP D4
POPARGS D5 0.0007
RETURNFUNC; Func[void Ghost_Transform(ffc, npc, int, int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_Waitframe(ffc, npc)] Body Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 2.9729; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void Ghost_Waitframe(ffc, npc)] Body End
PUSHV 0; Func[bool Ghost_Waitframe(ffc, npc, bool, bool)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
PUSHR D4; unless() #320 Test
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 29886 !=; Test 'unless'
PUSHR D4; if() #158 Test AND unless() #320 Body Start
CALLFUNC 2.9280; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 29849 ==; Test 'if'
SETR D2 GD5; if() #321 Test AND if() #158 Body Start
COMPAREV D2 0
GOTOCMP 29763 !=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 29763 !=
SETV D2 0
GOTO 29764
SETV D2 1
COMPAREV D2 0
GOTOCMP 29886 ==; Test 'if'
PUSHR D4; if() #321 Body Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0
PUSHR D4
PUSHV 64; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
SETR D2 GD5; if() #159 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 29818 ==; Test 'if'
PUSHR D4; if() #159 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR GD5
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.8699; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2
SETR D2 GD5; if() #322 Test
COMPAREV D2 0
GOTOCMP 29808 <=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 29808 !=
SETV D2 1
GOTO 29809
SETV D2 0
COMPAREV D2 0
GOTOCMP 29813 ==; Test 'if'
SETV D2 0; if() #322 Body Start
SETR GD5 D2; if() #322 Body End
PUSHR D4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
GOTO 29841; if() #159 Body End
PUSHR D4; if() #159 Else Start
PUSHV 1; UsrFunc[void Ghost_Move(int, int, int)] Params Start
SETR D2 GD5
SUBV2 0 D2
PUSHR D2
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.8699; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 29839 ==; Test 'if'
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start AND if() #160 Body Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2
GOTO 29841; if() #160 Body End
SETV D2 0; if() #160 Else Start
SETR GD5 D2; if() #160 Else End
LOAD D2 0; if() #159 Else End AND if() #323 Test
COMPAREV D2 0
GOTOCMP 29886 ==; Test 'if'
PUSHR D4; if() #323 Body Start
PUSHV 64; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #323 Body End
GOTO 29886; if() #321 Body End AND if() #158 Body End
SETR D2 GD5; if() #324 Test AND if() #158 Else Start
COMPAREV D2 0
GOTOCMP 29857 !=
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 29857 >
SETV D2 0
GOTO 29858
SETV D2 1
COMPAREV D2 0
GOTOCMP 29886 ==; Test 'if'
SETR D2 GD3; if() #161 Test AND if() #324 Body Start
PUSHR D2
SETR D2 GD5
POP D3
ADDR D2 D3
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29874 ==; Test 'if'
SETV D2 0; if() #161 Body Start
SETR GD3 D2
SETV D2 0
SETR GD5 D2
GOTO 29886; if() #161 Body End
SETR D2 GD3; if() #161 Else Start
PUSHR D2
SETR D2 GD5
POP D3
ADDR D2 D3
SETR GD3 D2
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2; if() #161 Else End
SETR D2 GD6; if() #324 Body End AND if() #158 Else End AND unless() #320 Body End AND if() #325 Test
COMPAREV D2 0
GOTOCMP 29900 !=
SETR D2 GD7
COMPAREV D2 0
GOTOCMP 29900 !=
SETR D2 GD8
COMPAREV D2 0
GOTOCMP 29900 !=
SETR D2 GD9
COMPAREV D2 0
GOTOCMP 29900 !=
SETV D2 0
GOTO 29901
SETV D2 1
COMPAREV D2 0
GOTOCMP 29924 ==; Test 'if'
SETR D2 GD6; if() #325 Body Start
PUSHR D2
SETR D2 GD8
POP D3
ADDR D2 D3
SETR GD6 D2
SETR D2 GD7
PUSHR D2
SETR D2 GD9
POP D3
ADDR D2 D3
SETR GD7 D2
PUSHR D4
PUSHR GD6; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR GD7
PUSHV 2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[void Ghost_ForceDir(int)] Params
CALLFUNC 2.8351; UsrFunc[void Ghost_ForceDir(int)] Call
POP D4; if() #325 Body End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.5499; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 0; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Params End
CALLFUNC 2.9995; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 2.4849; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.5099; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
SETR D2 GD17
ANDV D2 32
SETR GD17 D2
PUSHR D4; return Start
LOAD D2 0.0004; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Params End
CALLFUNC 3.0499; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Call
POP D4
POPARGS D5 0.0005; return End
RETURNFUNC; Func[bool Ghost_Waitframe(ffc, npc, bool, bool)] Body End
SETR D4 SP2; Func[bool Ghost_Waitframe(ffc, npc, int, bool)] Body Start
PUSHR D4; unless() #318 Test
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 0 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 2.9729; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 29992 !=; Test 'unless'
PUSHR D4; unless() #318 Body Start
LOAD D2 0.0003; UsrFunc[void Ghost_DeathAnimation(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void Ghost_DeathAnimation(ffc, npc, int)] Params End
CALLFUNC 2.7660; UsrFunc[void Ghost_DeathAnimation(ffc, npc, int)] Call
POP D4
LOAD D2 0; if() #319 Test
COMPAREV D2 0
GOTOCMP 29990 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #319 Body
SETV D2 0; return Start
GOTO 29993; return End AND unless() #318 Body End
SETV D2 1; return Start
POPARGS D5 0.0004; return End
RETURNFUNC; Func[bool Ghost_Waitframe(ffc, npc, int, bool)] Body End
PUSHARGSV 0 0.0002; Func[void __Ghost_WaitframePart1(ffc, npc, bool)] Body Start
SETR D4 SP2
SETR D2 GD17; if() #337 Test
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 30013 ==; Test 'if'
SETR D2 GD4; if() #337 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
GOTO 30110; if() #337 Body End
LOAD D2 0.0002; if() #338 Test AND if() #337 Else Start
COMPAREV D2 0
GOTOCMP 30022 ==; Test 'if'
LOAD D2 0.0003; if() #338 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
SETR GD4 D2
GOTO 30110; if() #338 Body End
PUSHR D4; if() #637 Test AND if() #338 Else Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 30042 ==
SETR D2 GD18
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
GOTOCMP 30040 !=
SETR D2 GD19
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
GOTOCMP 30042 ==
SETV D2 1
GOTO 30043
SETV D2 0
COMPAREV D2 0
GOTOCMP 30110 ==; Test 'if'
SETR D2 GD1; if() #637 Body Start
PUSHR D2
SETR D2 GD18
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
SETR D2 GD2
PUSHR D2
SETR D2 GD19
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHR D4; if() #339 Test
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 30079 ==; Test 'if'
PUSHR D4; if() #339 Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapRadians(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapRadians(int)] Params End
WRAPRADIANS D2; InlineFunc[int WrapRadians(int)] Body
MULTV D2 57.2958
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0807; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 30110; if() #339 Body End
LOAD D2 0.0001; InlineFunc[int Abs(int)] Params AND if() #340 Test AND if() #339 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 30100 ==; Test 'if'
LOAD D2 0.0001; if() #341 Test AND if() #340 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30097 ==; Test 'if'
SETV D2 2; if() #341 Body Start
SETR GD4 D2
GOTO 30110; if() #341 Body End
SETV D2 3; if() #341 Else Start
SETR GD4 D2; if() #341 Else End
GOTO 30110; if() #340 Body End
LOAD D2 0; if() #342 Test AND if() #340 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30108 ==; Test 'if'
SETV D2 0; if() #342 Body Start
SETR GD4 D2
GOTO 30110; if() #342 Body End
SETV D2 1; if() #342 Else Start
SETR GD4 D2; if() #342 Else End
SETR D2 GD4; if() #340 Else End AND if() #339 Else End AND if() #637 Body End AND if() #338 Else End AND if() #337 Else End
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
SETR D2 GD1
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2
SETR D2 GD10; if() #343 Test
COMPAREV D2 0
GOTOCMP 30131 ==
SETR D2 GD10
COMPAREV D2 1
GOTOCMP 30131 ==
SETV D2 0
GOTO 30132
SETV D2 1
COMPAREV D2 0
GOTOCMP 30155 ==; Test 'if'
LOAD D2 0.0004; if() #638 Test AND if() #343 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 30251 ==; Test 'if'
SETR D2 GD10; if() #638 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #638 Body End
GOTO 30251; if() #343 Body End
PUSHR D4; if() #344 Test AND if() #343 Else Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 30193 ==; Test 'if'
LOAD D2 0.0004; if() #639 Test AND if() #344 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 30251 ==; Test 'if'
SETR D2 GD10; if() #639 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.3374; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #639 Body End
GOTO 30251; if() #344 Body End
PUSHR D4; if() #345 Test AND if() #344 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 30231 ==; Test 'if'
LOAD D2 0.0004; if() #640 Test AND if() #345 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 30251 ==; Test 'if'
SETR D2 GD10; if() #640 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.3374; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #640 Body End
GOTO 30251; if() #345 Body End
LOAD D2 0.0004; if() #641 Test AND if() #345 Else Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 30251 ==; Test 'if'
SETR D2 GD10; if() #641 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #641 Body End
LOAD D2 0.0004; if() #345 Else End AND if() #344 Else End AND if() #343 Else End AND if() #642 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
SETR D2 GD12
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 30271 ==; Test 'if'
SETR D2 GD12; if() #642 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2; if() #642 Body End
LOAD D2 0.0003; if() #643 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
SETR D2 GD12
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 30315 ==; Test 'if'
SETR D2 GD12; if() #643 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_X D2; if() #643 Body End
LOAD D2 0.0004; if() #644 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
SETR D2 GD13
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 30335 ==; Test 'if'
SETR D2 GD13; if() #644 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2; if() #644 Body End
LOAD D2 0.0003; if() #645 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
SETR D2 GD13
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 30379 ==; Test 'if'
SETR D2 GD13; if() #645 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2; if() #645 Body End
PUSHR D4; if() #646 Test
PUSHV 128; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 30444 ==; Test 'if'
SETR D2 GD3; if() #346 Test AND if() #646 Body Start
COMPAREV D2 32
GOTOCMP 30399 <
LOAD D2 0.0004
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 30399 !=
SETV D2 1
GOTO 30400
SETV D2 0
COMPAREV D2 0
GOTOCMP 30415 ==; Test 'if'
SETV D2 1; if() #346 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
GOTO 30444; if() #346 Body End
SETR D2 GD3; if() #647 Test AND if() #346 Else Start
COMPAREV D2 32
GOTOCMP 30429 >=
LOAD D2 0.0004
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 30429 ==
SETV D2 1
GOTO 30430
SETV D2 0
COMPAREV D2 0
GOTOCMP 30444 ==; Test 'if'
SETV D2 0; if() #647 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #647 Body End
SETR D2 GD14; if() #346 Else End AND if() #646 Body End
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETR D2 GD11
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETR D2 GD17; if() #347 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 30478 ==; Test 'if'
SETR D2 GD11; if() #347 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
GOTO 30492; if() #347 Body End
SETR D2 GD20; if() #648 Test AND if() #347 Else Start
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30492 ==; Test 'if'
SETR D2 GD11; if() #648 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2; if() #648 Body End
PUSHR D4; if() #347 Else End
LOAD D2 0.0003; UsrFunc[void __Ghost_DrawShadow(npc)] Params Start
PUSHR D2; UsrFunc[void __Ghost_DrawShadow(npc)] Params End
CALLFUNC 2.4934; UsrFunc[void __Ghost_DrawShadow(npc)] Call
POP D4
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_WaitframePart1(ffc, npc, bool)] Body End
PUSHV 0; Func[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[bool npc::isValid()] Params AND unless() #649 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 30526 !=; Test 'unless'
LOAD D2 0.0002; if() #650 Test AND unless() #649 Body Start
COMPAREV D2 0
GOTOCMP 30518 ==; Test 'if'
PUSHR D4; if() #650 Body Start
LOAD D2 0.0004; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.8217; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2
PUSHR D4
CALLFUNC 2.6043; UsrFunc[void Ghost_ClearCombos()] Call
POP D4; if() #650 Body End
LOAD D2 0.0001; if() #651 Test
COMPAREV D2 0
GOTOCMP 30522 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #651 Body
SETV D2 0
SETR GD14 D2
SETV D2 0; return Start
GOTO 30650; return End AND unless() #649 Body End
STOREV 0 0
LOAD D2 0.0003; if() #652 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30537 ==; Test 'if'
SETV D2 1; if() #652 Body Start
STORE D2 0; if() #652 Body End
LOAD D2 0; unless() #653 Test
COMPAREV D2 0
GOTOCMP 30556 !=; Test 'unless'
PUSHR D4; unless() #653 Body Start
LOAD D2 0.0004; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params End
CALLFUNC 2.5633; UsrFunc[void Ghost_CheckHit(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Params End
CALLFUNC 2.4590; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Call
POP D4
COMPAREV D2 0
SETCMP D2 I==
STORE D2 0; unless() #653 Body End
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
LOAD D2 0; if() #654 Test
COMPAREV D2 0
GOTOCMP 30649 ==; Test 'if'
LOAD D2 0.0002; if() #655 Test AND if() #654 Body Start
COMPAREV D2 0
GOTOCMP 30643 ==; Test 'if'
SETV D2 1; if() #655 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD1
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.8217; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2; if() #655 Body End
LOAD D2 0.0001; if() #656 Test
COMPAREV D2 0
GOTOCMP 30647 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #656 Body
SETV D2 0; return Start
GOTO 30650; return End AND if() #654 Body End
SETV D2 1; return Start
POPARGS D5 0.0005; return End
RETURNFUNC; Func[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Body End
PUSHARGSV 0 0.0006; Func[void __SetUpDrawingArray(ffc, npc, int[])] Body Start
SETR D4 SP2
STOREV 0 0.0005
LOAD D2 0.0008; if() #676 Test
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 30667 ==; Test 'if'
LOAD D2 0.0005; if() #676 Body Start
ORV D2 4
STORE D2 0.0005; if() #676 Body End
LOAD D2 0.0008; if() #677 Test
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 30679 ==; Test 'if'
LOAD D2 0.0005; if() #677 Body Start
ORV D2 1
STORE D2 0.0005; if() #677 Body End
PUSHR D4; if() #678 Test
LOAD D2 0.0007; UsrFunc[bool __Ghost_IsFlickering(npc)] Params Start
PUSHR D2; UsrFunc[bool __Ghost_IsFlickering(npc)] Params End
CALLFUNC 3.9285; UsrFunc[bool __Ghost_IsFlickering(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 30689 ==; Test 'if'
LOAD D2 0.0005; if() #678 Body Start
ORV D2 2
STORE D2 0.0005; if() #678 Body End
LOAD D2 0.0008
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
STOREV 3 0.0004
SETR D2 GD1
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0002
SETR D2 GD25; if() #679 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 30857 ==; Test 'if'
STOREV 1 0.0001; if() #679 Body Start
STOREV 0 0; for() #176 setup
LOAD D2 0; for() #176 LoopTest
PUSHR D2
SETR D2 GD25
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30857 ==; for() #176 TestFail?
SETR D2 GD25; for() #176 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 1
POP D0
READPODARRAYR D2 D2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 2
POP D0
READPODARRAYR D2 D2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 4
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 6
STORE D2 0.0004
LOAD D2 0.0001
ADDV D2 6
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; for() #176 Body End
LOAD D2 0; for() #176 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 30745; for() #176 End
LOAD D2 0.0008; if() #679 Body End AND if(true) #680 [Opt:AlwaysOn]
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0008
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0008
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 4
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
POPARGS D5 0.0009
RETURNFUNC; Func[void __SetUpDrawingArray(ffc, npc, int[])] Body End
PUSHV 0; Func[void __HideFFCAndWait(ffc)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
WAITFRAME; InlineFunc[void Waitframe()] Body
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __HideFFCAndWait(ffc)] Body End
SETR D4 SP2; Func[int InFrontX(int, int)] Body Start
PUSHR D4; switch() #19 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 2.0600; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 2
GOTOCMP 30967 ==; case '20000'
COMPAREV SWITCHKEY 3
GOTOCMP 30970 ==; case '30000'
GOTO 30973; switch() #19 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 30974; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 30974; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontX(int, int)] Body End
SETR D4 SP2; Func[int InFrontY(int, int)] Body Start
PUSHR D4; switch() #20 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 2.0600; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 0
GOTOCMP 30988 ==; case '0'
COMPAREV SWITCHKEY 1
GOTOCMP 30991 ==; case '10000'
GOTO 30994; switch() #20 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 30995; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 30995; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontY(int, int)] Body End
SETR D4 SP2; Func[void InitializeGhostZHData()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
PUSHV 0; Func[bool IsPit(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #341 Test
COMPAREV D2 41
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31055 ==; Test 'if'
SETV D2 1; return Start AND if() #341 Body Start
GOTO 31076; return End AND if() #341 Body End
LOAD D2 0; if() #342 Test
COMPAREV D2 93
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31062 ==; Test 'if'
SETV D2 1; return Start AND if() #342 Body Start
GOTO 31076; return End AND if() #342 Body End
LOAD D2 0; if() #343 Test
COMPAREV D2 80
GOTOCMP 31070 <
LOAD D2 0
COMPAREV D2 82
GOTOCMP 31070 >
SETV D2 1
GOTO 31071
SETV D2 0
COMPAREV D2 0
GOTOCMP 31075 ==; Test 'if'
SETV D2 1; return Start AND if() #343 Body Start
GOTO 31076; return End AND if() #343 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool IsPit(int)] Body End
SETR D4 SP2; Func[void KillEWeapon(eweapon)] Body Start
LOAD D2 0
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 128
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POP D5
RETURNFUNC; Func[void KillEWeapon(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[lweapon LoadLWeaponOf(int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
SETR D2 LWPNCOUNT; for() #78 setup
STORE D2 0
LOAD D2 0; for() #78 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 31132 ==; for() #78 TestFail?
LOAD D2 0; InlineFunc[lweapon screendata::LoadLWeapon(int)] Params AND for() #78 Body Start
SUBV D2 1; InlineFunc[lweapon screendata::LoadLWeapon(int)] Body Start
LOADLWEAPONR D2
SETR D2 REFLWPN; InlineFunc[lweapon screendata::LoadLWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #383 Test
PUSHR D2
POP REFLWPN
SETR D2 LWPNID
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31128 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #383 Body Start
GOTO 31134; return End AND if() #383 Body End
LOAD D2 0; for() #78 Body End AND for() #78 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 31105; for() #78 End
STOREV 0 0
LOAD D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[lweapon LoadLWeaponOf(int)] Body End
SETR D4 SP2; Func[int OppositeDir(int)] Body Start
LOAD D2 0; if() #436 Test
COMPAREV D2 7
GOTOCMP 31145 <=
LOAD D2 0
COMPAREV D2 16
GOTOCMP 31145 >=
SETV D2 1
GOTO 31146
SETV D2 0
COMPAREV D2 0
GOTOCMP 31153 ==; Test 'if'
LOAD D2 0; return Start AND if() #436 Body Start
ADDV D2 4
MODV D2 8
ADDV D2 8
GOTO 31163; return End AND if() #436 Body End
LOAD D2 0; return Start
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31161 ==
LOAD D2 0
XORV D2 1
GOTO 31163
LOAD D2 0
XORV D2 3
POP D5; return End
RETURNFUNC; Func[int OppositeDir(int)] Body End
PUSHARGSV 0 0.0003; Func[int RunFFCScript(int, untyped[])] Body Start
SETR D4 SP2
LOAD D2 0.0004; if() #452 Test
COMPAREV D2 0
GOTOCMP 31175 <
LOAD D2 0.0004
COMPAREV D2 511
GOTOCMP 31175 >
SETV D2 0
GOTO 31176
SETV D2 1
COMPAREV D2 0
GOTOCMP 31180 ==; Test 'if'
SETV D2 0; return Start AND if() #452 Body Start
GOTO 31287; return End AND if() #452 Body End
STOREV 0 0.0002
STOREV 1 0.0001; for() #121 setup
LOAD D2 0.0001; for() #121 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31286 ==; for() #121 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #121 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0002
LOAD D2 0.0002; if() #453 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 31222 !=
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 31211 ==
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 31222 !=
LOAD D2 0.0002
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 31222 !=
SETV D2 0
GOTO 31223
SETV D2 1
COMPAREV D2 0
GOTOCMP 31282 !=; Test 'if' AND continue 1; AND if() #453 Body
SETV D2 1
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0003; if() #454 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 31280 ==; Test 'if'
LOAD D2 0.0003; InlineFunc[int SizeOfArray(untyped[])] Params AND InlineFunc[int Min(int, int)] Params Start AND for() #122 setup AND if() #454 Body Start
ARRAYSIZE D2; InlineFunc[int SizeOfArray(untyped[])] Body
PUSHVARGR D2
PUSHVARGV 8; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #122 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 31280 ==; for() #122 TestFail?
LOAD D2 0.0003; for() #122 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2; for() #122 Body End
LOAD D2 0; for() #122 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 31255; for() #122 End
LOAD D2 0.0001; if() #454 Body End AND return Start
GOTO 31287; return End AND for() #121 Body End
LOAD D2 0.0001; for() #121 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 31182; for() #121 End
SETV D2 0; return Start
POPARGS D5 0.0005; return End
RETURNFUNC; Func[int RunFFCScript(int, untyped[])] Body End
PUSHARGSV 0 0.0002; Func[int ScreenFlag(int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 10 0
PUSHR D2
WRITEPODARRAY D2 {3,9,4,8,7,4,4,2,3,7}
POP D2
STORE D2 0
LOAD D2 0.0002; if() #473 Test
COMPAREV D2 0
GOTOCMP 31311 <
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
POP D0
READPODARRAYR D2 D2
POP D3
COMPARER D3 D2
GOTOCMP 31311 >=
SETV D2 0
GOTO 31312
SETV D2 1
COMPAREV D2 0
GOTOCMP 31318 ==; Test 'if'
SETV D2 -1; return Start AND if() #473 Body Start
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 31334; return End AND if() #473 Body End
LOAD D2 0.0003; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
PUSHR D2
LOAD D2 0.0002
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 31334; return End
LOAD D3 0
DEALLOCATEMEMR D3
POPARGS D5 0.0004
RETURNFUNC; Func[int ScreenFlag(int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body Start
LOAD D2 0.0001; if() #484 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31355 ==; Test 'if'
LOAD D2 0; if() #485 Test AND if() #484 Body Start
COMPAREV D2 1
GOTOCMP 31350 <
LOAD D2 0
COMPAREV D2 511
GOTOCMP 31350 >
SETV D2 0
GOTO 31351
SETV D2 1
COMPAREV D2 0
GOTOCMP 31355 ==; Test 'if'
SETV D2 1; if() #485 Body Start
STORE D2 0.0001; if() #485 Body End
LOAD D2 0.0001; if() #484 Body End
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponLifespan(eweapon, int, int)] Body Start
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponLifespan(eweapon, int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponMovement(eweapon, int, int, int)] Body Start
LOAD D2 0.0003; if() #489 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31489 ==; Test 'if'
LOAD D2 0.0003; if() #489 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #489 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0003
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002; if() #205 Test
COMPAREV D2 4
GOTOCMP 31564 ==
LOAD D2 0.0002
COMPAREV D2 6
GOTOCMP 31564 ==
SETV D2 0
GOTO 31565
SETV D2 1
COMPAREV D2 0
GOTOCMP 31614 ==; Test 'if'
LOAD D2 0.0003; if() #206 Test AND if() #205 Body Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 31598 ==; Test 'if'
LOAD D2 0.0003; if() #206 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 31719; if() #206 Body End
LOAD D2 0.0003; if() #206 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #206 Else End
GOTO 31719; if() #205 Body End
LOAD D2 0.0002; if() #207 Test AND if() #205 Else Start
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31681 ==; Test 'if'
LOAD D2 0.0003; if() #207 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #490 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31719 ==; Test 'if'
LOAD D2 0.0003; if() #208 Test AND if() #490 Body Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 31664 ==; Test 'if'
SETV D2 -1; if() #208 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 31719; if() #208 Body End
PUSHR D4; if() #208 Else Start
LOAD D2 0.0003; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params Start
PUSHR D2; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params End
CALLFUNC 3.1721; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Call
POP D4
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #208 Else End
GOTO 31719; if() #490 Body End AND if() #207 Body End
LOAD D2 0.0002; if() #491 Test AND if() #207 Else Start
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31719 ==; Test 'if'
LOAD D2 0.0001; if() #491 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0.1600
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #491 Body End
POPARGS D5 0.0004; if() #207 Else End AND if() #205 Else End
RETURNFUNC; Func[void SetEWeaponMovement(eweapon, int, int, int)] Body End
PUSHARGSV 0 0.0005; Func[int __GetEWeaponThrowHeight(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
STORE D2 0.0004
LOAD D2 0.0004; if() #570 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31736 ==; Test 'if'
SETV D2 1; return Start AND if() #570 Body Start
GOTO 31837; return End AND if() #570 Body End
LOAD D2 0.0005; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0003
LOAD D2 0.0003; if() #571 Test
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31785 ==; Test 'if'
SETV D2 1; return Start AND if() #571 Body Start
GOTO 31837; return End AND if() #571 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0001; while() #5 Test
COMPAREV D2 3.2000
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31812 ==; Test 'while'
LOAD D2 0.0001; while() #5 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002
LOAD D2 0.0002; if() #572 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31793 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #572 Body Start
GOTO 31837; return End AND if() #572 Body End
GOTO 31793; while() #5 Body End AND while() #5 End
STOREV 0 0
LOAD D2 0.0002; while() #6 Test
PUSHR D2
LOAD D2 0
DIVV D2 3.2000
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 31836 ==; Test 'while'
LOAD D2 0.0001; while() #6 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SUBV D2 3.2000
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002; while() #6 Body End
GOTO 31813; while() #6 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(eweapon)] Body End
SETR D4 SP2; Func[void SetEWeaponRotation(eweapon, int)] Body Start
PUSHR D4
LOAD D2 0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 2.3374; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #216 Test
COMPAREV D2 0
GOTOCMP 31857 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 31857 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 31857 ==
SETV D2 0
GOTO 31858
SETV D2 1
COMPAREV D2 0
GOTOCMP 31870 ==; Test 'if'
SETV D2 0; if() #216 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 31918; if() #216 Body End
LOAD D2 0; if() #217 Test AND if() #216 Else Start
COMPAREV D2 1
GOTOCMP 31881 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 31881 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 31881 ==
SETV D2 0
GOTO 31882
SETV D2 1
COMPAREV D2 0
GOTOCMP 31894 ==; Test 'if'
SETV D2 3; if() #217 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 31918; if() #217 Body End
LOAD D2 0; if() #218 Test AND if() #217 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31909 ==; Test 'if'
SETV D2 7; if() #218 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 31918; if() #218 Body End
SETV D2 4; if() #218 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #218 Else End
POPARGS D5 0.0002; if() #217 Else End AND if() #216 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon, int)] Body End
SETR D4 SP2; Func[int Sign(int)] Body Start
LOAD D2 0; if() #232 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 31928 ==; Test 'if'
SETV D2 1; return Start AND if() #232 Body Start
GOTO 31936; return End AND if() #232 Body End
LOAD D2 0; if() #233 Test AND if() #232 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31935 ==; Test 'if'
SETV D2 -1; return Start AND if() #233 Body Start
GOTO 31936; return End AND if() #233 Body End
SETV D2 0; return Start AND if() #233 Else Start
POP D5; return End AND if() #233 Else End AND if() #232 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR D4 SP2; Func[void StartGhostZH()] Body Start
PUSHR D4
CALLFUNC 3.0997; UsrFunc[void InitializeGhostZHData()] Call
POP D4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0 0.0007; Func[void UpdateEWeapon(eweapon)] Body Start
SETR D4 SP2
SETR D2 GD26; if() #523 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 33087 !=; Test 'if' AND return (Void) AND if() #523 Body
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0005
STOREV 1 0.0004
LOAD D2 0.0007; if() #242 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32358 ==; Test 'if'
LOAD D2 0.0007; if() #524 Test AND if() #242 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 32200 ==; Test 'if'
LOAD D2 0.0007; if() #243 Test AND if() #524 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 6
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 32073 ==; Test 'if'
LOAD D2 0.0007; if() #244 Test AND if() #243 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32016 ==; Test 'if'
PUSHR D4; if() #244 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params End
CALLFUNC 3.3089; UsrFunc[void __UpdateEWMSineWave(eweapon)] Call
POP D4
GOTO 32200; if() #244 Body End
LOAD D2 0.0007; if() #245 Test AND if() #244 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32033 ==; Test 'if'
PUSHR D4; if() #245 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHoming(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHoming(eweapon)] Params End
CALLFUNC 3.3271; UsrFunc[void __UpdateEWMHoming(eweapon)] Call
POP D4
GOTO 32200; if() #245 Body End
LOAD D2 0.0007; if() #246 Test AND if() #245 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32050 ==; Test 'if'
PUSHR D4; if() #246 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params End
CALLFUNC 3.3483; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Call
POP D4
GOTO 32200; if() #246 Body End
LOAD D2 0.0007; if() #247 Test AND if() #246 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32067 ==; Test 'if'
PUSHR D4; if() #247 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandom(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandom(eweapon)] Params End
CALLFUNC 3.3824; UsrFunc[void __UpdateEWMRandom(eweapon)] Call
POP D4
GOTO 32200; if() #247 Body End
PUSHR D4; if() #247 Else Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params End
CALLFUNC 3.3944; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Call
POP D4; if() #247 Else End
GOTO 32200; if() #246 Else End AND if() #245 Else End AND if() #244 Else End AND if() #243 Body End
LOAD D2 0.0007; if() #248 Test AND if() #243 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32108 ==; Test 'if'
LOAD D2 0.0007; if() #248 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMVeer(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMVeer(eweapon)] Params End
CALLFUNC 3.4256; UsrFunc[void __UpdateEWMVeer(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 32200; if() #248 Body End
LOAD D2 0.0007; if() #249 Test AND if() #248 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32125 ==; Test 'if'
PUSHR D4; if() #249 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMThrow(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMThrow(eweapon)] Params End
CALLFUNC 3.4788; UsrFunc[void __UpdateEWMThrow(eweapon)] Call
POP D4
GOTO 32200; if() #249 Body End
LOAD D2 0.0007; if() #250 Test AND if() #249 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32142 ==; Test 'if'
PUSHR D4; if() #250 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMFall(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMFall(eweapon)] Params End
CALLFUNC 3.5098; UsrFunc[void __UpdateEWMFall(eweapon)] Call
POP D4
GOTO 32200; if() #250 Body End
LOAD D2 0.0007; if() #251 Test AND if() #250 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32177 ==; Test 'if'
LOAD D2 0.0007; if() #251 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDrift(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDrift(eweapon)] Params End
CALLFUNC 3.5364; UsrFunc[void __UpdateEWMDrift(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 32200; if() #251 Body End
LOAD D2 0.0007; if() #251 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params End
CALLFUNC 3.5868; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004; if() #251 Else End
LOAD D2 0.0007; if() #250 Else End AND if() #249 Else End AND if() #248 Else End AND if() #243 Else End AND if() #524 Body End AND if() #525 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 32668 ==; Test 'if'
LOAD D2 0.0007; if() #252 Test AND if() #525 Body Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32258 ==; Test 'if'
LOAD D2 0.0007; if() #252 Body Start
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0007; if() #526 Test
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 32668 ==; Test 'if'
PUSHR D4; if() #526 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 3.1078; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #526 Body End
GOTO 32668; if() #252 Body End
LOAD D2 0.0007; if() #253 Test AND if() #252 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32308 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #527 Test AND if() #253 Body Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 32668 ==; Test 'if'
PUSHR D4; if() #527 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 3.1078; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #527 Body End
GOTO 32668; if() #253 Body End
LOAD D2 0.0007; if() #528 Test AND if() #253 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32668 ==; Test 'if'
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params Start AND if() #528 Body Start
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
PUSHVARGR D3; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0007; if() #529 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 32668 ==; Test 'if'
PUSHR D4; if() #529 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 3.1078; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #529 Body End
GOTO 32668; if() #528 Body End AND if() #253 Else End AND if() #252 Else End AND if() #525 Body End AND if() #242 Body End
LOAD D2 0.0007; if() #530 Test AND if() #242 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 32379 ==
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 32379 !=
SETV D2 1
GOTO 32380
SETV D2 0
COMPAREV D2 0
GOTOCMP 32668 ==; Test 'if'
LOAD D2 0.0007; if() #254 Test AND if() #530 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 32399 ==; Test 'if'
PUSHR D4; if() #254 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params End
CALLFUNC 3.6403; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Call
POP D4
GOTO 32668; if() #254 Body End
LOAD D2 0.0007; if() #255 Test AND if() #254 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 32533 ==; Test 'if'
LOAD D2 0.0007; if() #256 Test AND if() #255 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32431 ==; Test 'if'
SETV D2 0; if() #256 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 32668; if() #256 Body End
LOAD D2 0.0007; if() #257 Test AND if() #256 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32448 ==; Test 'if'
PUSHR D4; if() #257 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params End
CALLFUNC 3.6814; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Call
POP D4
GOTO 32668; if() #257 Body End
LOAD D2 0.0007; if() #258 Test AND if() #257 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32465 ==; Test 'if'
PUSHR D4; if() #258 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params End
CALLFUNC 3.6987; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Call
POP D4
GOTO 32668; if() #258 Body End
LOAD D2 0.0007; if() #259 Test AND if() #258 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32482 ==; Test 'if'
PUSHR D4; if() #259 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params End
CALLFUNC 3.7031; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Call
POP D4
GOTO 32668; if() #259 Body End
LOAD D2 0.0007; if() #260 Test AND if() #259 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32499 ==; Test 'if'
PUSHR D4; if() #260 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params End
CALLFUNC 3.7075; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Call
POP D4
GOTO 32668; if() #260 Body End
LOAD D2 0.0007; if() #261 Test AND if() #260 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32516 ==; Test 'if'
PUSHR D4; if() #261 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params End
CALLFUNC 3.7133; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Call
POP D4
GOTO 32668; if() #261 Body End
LOAD D2 0.0007; if() #531 Test AND if() #261 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32668 ==; Test 'if'
PUSHR D4; if() #531 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params End
CALLFUNC 3.7191; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Call
POP D4; if() #531 Body End
GOTO 32668; if() #261 Else End AND if() #260 Else End AND if() #259 Else End AND if() #258 Else End AND if() #257 Else End AND if() #256 Else End AND if() #255 Body End
LOAD D2 0.0007; if() #262 Test AND if() #255 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32550 ==; Test 'if'
PUSHR D4; if() #262 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params End
CALLFUNC 3.7301; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Call
POP D4
GOTO 32668; if() #262 Body End
LOAD D2 0.0007; if() #263 Test AND if() #262 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32567 ==; Test 'if'
PUSHR D4; if() #263 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params End
CALLFUNC 3.7359; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Call
POP D4
GOTO 32668; if() #263 Body End
LOAD D2 0.0007; if() #264 Test AND if() #263 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32584 ==; Test 'if'
PUSHR D4; if() #264 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params End
CALLFUNC 3.7419; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Call
POP D4
GOTO 32668; if() #264 Body End
LOAD D2 0.0007; if() #265 Test AND if() #264 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32601 ==; Test 'if'
PUSHR D4; if() #265 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params End
CALLFUNC 3.7479; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Call
POP D4
GOTO 32668; if() #265 Body End
LOAD D2 0.0007; if() #266 Test AND if() #265 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32618 ==; Test 'if'
PUSHR D4; if() #266 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params End
CALLFUNC 3.7591; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Call
POP D4
GOTO 32668; if() #266 Body End
LOAD D2 0.0007; if() #267 Test AND if() #266 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32635 ==; Test 'if'
PUSHR D4; if() #267 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params End
CALLFUNC 3.7696; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Call
POP D4
GOTO 32668; if() #267 Body End
LOAD D2 0.0007; if() #268 Test AND if() #267 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32652 ==; Test 'if'
PUSHR D4; if() #268 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params End
CALLFUNC 3.7743; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Call
POP D4
GOTO 32668; if() #268 Body End
LOAD D2 0.0007; if() #532 Test AND if() #268 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32668 ==; Test 'if'
PUSHR D4; if() #532 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params End
CALLFUNC 3.7794; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Call
POP D4; if() #532 Body End
LOAD D2 0.0007; if() #268 Else End AND if() #267 Else End AND if() #266 Else End AND if() #265 Else End AND if() #264 Else End AND if() #263 Else End AND if() #262 Else End AND if() #255 Else End AND if() #254 Else End AND if() #530 Body End AND if() #242 Else End AND if() #533 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 32693 ==; Test 'if'
LOAD D2 0.0007; if() #534 Test AND if() #533 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 32693 ==; Test 'if'
PUSHR D4; if() #534 Body Start
LOAD D2 0.0007; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 2.2014; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #534 Body End
LOAD D2 0.0007; if() #533 Body End AND if() #269 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 32976 ==; Test 'if'
SETV D2 1000; if() #269 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
SETR D2 LINKHP; if() #535 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33087 !=; Test 'if' AND return (Void) AND if() #535 Body
LOAD D2 0.0007; if() #536 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 32738 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 32738 ==
SETV D2 1
GOTO 32739
SETV D2 0
COMPAREV D2 0
GOTOCMP 33087 !=; Test 'if' AND return (Void) AND if() #536 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0007; if() #270 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 32757 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int RadtoDeg(int)] Params Start AND if() #270 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 32823; if() #270 Body End
PUSHR D4; if() #270 Else Start
LOAD D2 0.0007; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 2.3374; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #271 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32773 ==; Test 'if'
SETV D2 -90; if() #271 Body Start
STORE D2 0.0001
GOTO 32823; if() #271 Body End
LOAD D2 0; if() #272 Test AND if() #271 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32781 ==; Test 'if'
SETV D2 -45; if() #272 Body Start
STORE D2 0.0001
GOTO 32823; if() #272 Body End
LOAD D2 0; if() #273 Test AND if() #272 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32789 ==; Test 'if'
SETV D2 0; if() #273 Body Start
STORE D2 0.0001
GOTO 32823; if() #273 Body End
LOAD D2 0; if() #274 Test AND if() #273 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32797 ==; Test 'if'
SETV D2 45; if() #274 Body Start
STORE D2 0.0001
GOTO 32823; if() #274 Body End
LOAD D2 0; if() #275 Test AND if() #274 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32805 ==; Test 'if'
SETV D2 90; if() #275 Body Start
STORE D2 0.0001
GOTO 32823; if() #275 Body End
LOAD D2 0; if() #276 Test AND if() #275 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32813 ==; Test 'if'
SETV D2 135; if() #276 Body Start
STORE D2 0.0001
GOTO 32823; if() #276 Body End
LOAD D2 0; if() #277 Test AND if() #276 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32821 ==; Test 'if'
SETV D2 180; if() #277 Body Start
STORE D2 0.0001
GOTO 32823; if() #277 Body End
SETV D2 -135; if() #277 Else Start
STORE D2 0.0001; if() #277 Else End
LOAD D2 0.0004; if() #276 Else End AND if() #275 Else End AND if() #274 Else End AND if() #273 Else End AND if() #272 Else End AND if() #271 Else End AND if() #270 Else End AND if() #278 Test
COMPAREV D2 0
GOTOCMP 32865 ==; Test 'if'
LOAD D2 0.0007; if() #278 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Cos(int)] Params Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
GOTO 32881; if() #278 Body End
LOAD D2 0.0007; if() #278 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0002; if() #278 Else End
LOAD D2 0.0006; unless() #537 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 32895 !=
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 32895 !=
SETV D2 1
GOTO 32896
SETV D2 0
COMPAREV D2 0
GOTOCMP 32910 !=; Test 'unless'
PUSHR D4; unless() #537 Body Start
LOAD D2 0.0006; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0001; unless() #537 Body End
STOREV 0 0
LOAD D2 0.0001; if() #279 Test
COMPAREV D2 0
GOTOCMP 32919 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 32919 >=
SETV D2 1
GOTO 32920
SETV D2 0
COMPAREV D2 0
GOTOCMP 32925 ==; Test 'if'
SETV D2 0; if() #279 Body Start
STORE D2 0
GOTO 32927; if() #279 Body End
SETV D2 2; if() #279 Else Start
STORE D2 0; if() #279 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE_W
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE_H
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 33033; if() #269 Body End
LOAD D2 0.0007; if() #538 Test AND if() #269 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 33016 ==; Test 'if'
SETR D2 GD26; if() #280 Test AND if() #538 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 33007 ==; Test 'if'
SETV D2 1000; if() #280 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
GOTO 33016; if() #280 Body End
SETV D2 0; if() #280 Else Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #280 Else End
LOAD D2 0.0007; if() #538 Body End AND if() #539 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 33033 ==; Test 'if'
PUSHR D4; if() #539 Body Start
LOAD D2 0.0007; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 2.3073; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #539 Body End
LOAD D2 0.0007; if() #269 Else End AND if() #540 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 64
COMPAREV D2 0
GOTOCMP 33045 !=
SETV D2 0
GOTO 33046
SETV D2 1
COMPAREV D2 0
GOTOCMP 33087 ==; Test 'if'
LOAD D2 0.0007; if() #540 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z_OFFSET D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; if() #540 Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void UpdateEWeapon(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D3 SPRITE_MISCD; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(eweapon)] Body End
PUSHARGSV 0 0.0003; Func[void __UpdateEWMHoming(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0003
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0002
LOAD D2 0.0002; if() #692 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33287 ==; Test 'if'
LOAD D2 0.0002; if() #692 Body Start
ADDV D2 6.2832
STORE D2 0.0002; if() #692 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 2.0717; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #693 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33315 ==; Test 'if'
LOAD D2 0.0001; if() #693 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #693 Body End
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
STORE D2 0
LOAD D2 0; if() #369 Test
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
COMPARER D3 D2
GOTOCMP 33350 <
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 6.2832 D2
POP D3
COMPARER D3 D2
GOTOCMP 33350 >
SETV D2 0
GOTO 33351
SETV D2 1
COMPAREV D2 0
GOTOCMP 33363 ==; Test 'if'
LOAD D2 0.0001; if() #369 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 33430; if() #369 Body End
PUSHR D4; if() #370 Test AND if() #369 Else Start
LOAD D2 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Sign(int)] Params Start
SUBV D2 3.1416
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33407 ==; Test 'if'
LOAD D2 0.0003; if() #370 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 33430; if() #370 Body End
LOAD D2 0.0003; if() #370 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2; if() #370 Else End
PUSHR D4; if() #369 Else End
LOAD D2 0.0003; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 2.2963; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0003; if() #694 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 33481 ==; Test 'if'
LOAD D2 0.0003; if() #694 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0003; if() #695 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33481 ==; Test 'if'
PUSHR D4; if() #695 Body Start
LOAD D2 0.0003; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 3.1078; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #695 Body End
POPARGS D5 0.0004; if() #694 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #696 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33514 ==; Test 'if'
LOAD D2 0.0001; if() #696 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #696 Body End
LOAD D2 0.0001; if() #371 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 33613 ==; Test 'if'
LOAD D2 0.0001; if() #371 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #697 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33822 ==; Test 'if'
LOAD D2 0.0001; if() #372 Test AND if() #697 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33572 ==; Test 'if'
PUSHR D4; if() #372 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 3.1078; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 33822; if() #372 Body End
LOAD D2 0.0001; if() #372 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #372 Else End
GOTO 33822; if() #697 Body End AND if() #371 Body End
LOAD D2 0.0001; if() #371 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #698 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33719 ==; Test 'if'
SETV D2 45; if() #698 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 2.0717; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 2.2963; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #699 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 33719 ==; Test 'if'
PUSHR D4; if() #699 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 2.3073; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #699 Body End
LOAD D2 0.0001; if() #698 Body End AND if() #373 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 33745 ==; Test 'if'
LOAD D2 0.0001; if() #373 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 33822; if() #373 Body End
LOAD D2 0.0001; if() #700 Test AND if() #373 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 33822 ==; Test 'if'
LOAD D2 0.0001; if() #700 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.2000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #374 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33792 ==; Test 'if'
PUSHR D4; if() #374 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 3.1839; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 33822; if() #374 Body End
LOAD D2 0; if() #375 Test AND if() #374 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33804 ==; Test 'if'
PUSHR D4; if() #375 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 3.1839; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 33822; if() #375 Body End
LOAD D2 0; if() #376 Test AND if() #375 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33816 ==; Test 'if'
PUSHR D4; if() #376 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 3.1839; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 33822; if() #376 Body End
PUSHR D4; if() #376 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 3.1839; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #376 Else End
POPARGS D5 0.0002; if() #375 Else End AND if() #374 Else End AND if() #700 Body End AND if() #373 Else End AND if() #371 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(eweapon)] Body End
SETR D4 SP2; Func[void __UpdateEWMRandom(eweapon)] Body Start
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Randf(int)] Params Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[int Randf(int)] Params End
CALLFUNC 2.0734; UsrFunc[int Randf(int)] Call
POP D4
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 2.2963; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0; if() #701 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 33896 ==; Test 'if'
PUSHR D4; if() #701 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 2.3073; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #701 Body End
LOAD D2 0; if() #702 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 33942 ==; Test 'if'
LOAD D2 0; if() #702 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #703 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33942 ==; Test 'if'
PUSHR D4; if() #703 Body Start
LOAD D2 0; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 3.1078; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #703 Body End
POP D5; if() #702 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #704 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33975 ==; Test 'if'
LOAD D2 0.0001; if() #704 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #704 Body End
LOAD D2 0.0001; if() #377 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 34074 ==; Test 'if'
LOAD D2 0.0001; if() #377 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #705 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34254 ==; Test 'if'
LOAD D2 0.0001; if() #378 Test AND if() #705 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 34033 ==; Test 'if'
PUSHR D4; if() #378 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 3.1078; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 34254; if() #378 Body End
LOAD D2 0.0001; if() #378 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #378 Else End
GOTO 34254; if() #705 Body End AND if() #377 Body End
LOAD D2 0.0001; if() #377 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #706 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34164 ==; Test 'if'
SETV D2 45; if() #706 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D3 62832; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
MULTV D2 0.0001
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 2.2963; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #707 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 34164 ==; Test 'if'
PUSHR D4; if() #707 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 2.3073; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #707 Body End
LOAD D2 0.0001; if() #706 Body End AND if() #379 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 34190 ==; Test 'if'
LOAD D2 0.0001; if() #379 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 34254; if() #379 Body End
LOAD D2 0.0001; if() #708 Test AND if() #379 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 34254 ==; Test 'if'
LOAD D2 0.0001; if() #708 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #380 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34224 ==; Test 'if'
PUSHR D4; if() #380 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 3.1839; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 34254; if() #380 Body End
LOAD D2 0; if() #381 Test AND if() #380 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34236 ==; Test 'if'
PUSHR D4; if() #381 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 3.1839; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 34254; if() #381 Body End
LOAD D2 0; if() #382 Test AND if() #381 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34248 ==; Test 'if'
PUSHR D4; if() #382 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 3.1839; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 34254; if() #382 Body End
PUSHR D4; if() #382 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 3.1839; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #382 Else End
POPARGS D5 0.0002; if() #381 Else End AND if() #380 Else End AND if() #708 Body End AND if() #379 Else End AND if() #377 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #390 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34371 ==; Test 'if'
LOAD D2 0.0001; if() #390 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 34728; if() #390 Body End
LOAD D2 0; if() #391 Test AND if() #390 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34405 ==; Test 'if'
LOAD D2 0.0001; if() #391 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 34728; if() #391 Body End
LOAD D2 0; if() #392 Test AND if() #391 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34440 ==; Test 'if'
LOAD D2 0.0001; if() #392 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 34728; if() #392 Body End
LOAD D2 0; if() #393 Test AND if() #392 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34474 ==; Test 'if'
LOAD D2 0.0001; if() #393 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 34728; if() #393 Body End
LOAD D2 0; if() #394 Test AND if() #393 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34540 ==; Test 'if'
LOAD D2 0.0001; if() #394 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 34728; if() #394 Body End
LOAD D2 0; if() #395 Test AND if() #394 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34605 ==; Test 'if'
LOAD D2 0.0001; if() #395 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 34728; if() #395 Body End
LOAD D2 0; if() #396 Test AND if() #395 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34670 ==; Test 'if'
LOAD D2 0.0001; if() #396 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 34728; if() #396 Body End
LOAD D2 0.0001; if() #396 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #396 Else End
LOAD D2 0.0001; if() #395 Else End AND if() #394 Else End AND if() #393 Else End AND if() #392 Else End AND if() #391 Else End AND if() #390 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
LOAD D2 0.0001; if() #709 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 34819 !=
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 34819 ==
SETV D2 1
GOTO 34820
SETV D2 0
COMPAREV D2 0
GOTOCMP 34852 ==; Test 'if'
LOAD D2 0.0001; if() #709 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #709 Body End
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4; unless() #384 Test AND if(true) #383 [Opt:AlwaysOn]
CALLFUNC 2.9280; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 34904 !=; Test 'unless'
LOAD D2 0.0001; unless() #384 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 34924; unless() #384 Body End
SETR D2 REGION_HEIGHT; unless() #384 Else Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; unless() #384 Else End
LOAD D2 0.0001; if() #385 Test
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 34987 ==; Test 'if'
PUSHR D4; unless() #710 Test AND if(true) #386 [Opt:AlwaysOn] AND if() #385 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 3.9449; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 35096 !=; Test 'unless'
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start AND unless() #710 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; unless() #710 Body End
GOTO 35096; if() #385 Body End
STOREV 0 0; if() #385 Else Start
LOAD D2 0.0001; if() #387 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
GOTOCMP 35045 ==; Test 'if'
LOAD D2 0.0001; if() #388 Test AND if() #387 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 35042 ==; Test 'if'
LOAD D2 0.0001; if() #388 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 35047; if() #388 Body End
SETV D2 1; if() #388 Else Start
STORE D2 0; if() #388 Else End
GOTO 35047; if() #387 Body End
SETV D2 1; if() #387 Else Start
STORE D2 0; if() #387 Else End
LOAD D2 0; if() #711 Test
COMPAREV D2 0
GOTOCMP 35096 ==; Test 'if'
LOAD D2 0.0001; if() #389 Test AND if() #711 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 35075 ==; Test 'if'
SETV D2 0; if() #389 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 3.1078; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 35096; if() #389 Body End
SETV D2 0; if() #389 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #389 Else End
POPARGS D5 0.0002; if() #711 Body End AND if() #385 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4; unless() #364 Test AND if(true) #363 [Opt:AlwaysOn]
CALLFUNC 2.9280; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 35159 !=; Test 'unless'
LOAD D2 0.0001; unless() #364 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 35189; unless() #364 Body End
LOAD D2 0.0001; unless() #364 Else Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; unless() #364 Else End
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 0.1600
PUSHVARGR D2
PUSHVARGV 3.2000; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #689 Test AND if(true) #365 [Opt:AlwaysOn]
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 35362 ==; Test 'if'
PUSHR D4; unless() #690 Test AND if() #689 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 3.9449; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 35362 !=; Test 'unless'
STOREV 0 0; unless() #690 Body Start
LOAD D2 0.0001; if() #366 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 35311 ==; Test 'if'
LOAD D2 0.0001; if() #367 Test AND if() #366 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 35308 ==; Test 'if'
LOAD D2 0.0001; if() #367 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 35313; if() #367 Body End
SETV D2 1; if() #367 Else Start
STORE D2 0; if() #367 Else End
GOTO 35313; if() #366 Body End
SETV D2 1; if() #366 Else Start
STORE D2 0; if() #366 Else End
LOAD D2 0; if() #691 Test
COMPAREV D2 0
GOTOCMP 35362 ==; Test 'if'
LOAD D2 0.0001; if() #368 Test AND if() #691 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 35341 ==; Test 'if'
SETV D2 0; if() #368 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 3.1078; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 35362; if() #368 Body End
SETV D2 0; if() #368 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #368 Else End
POPARGS D5 0.0002; if() #691 Body End AND unless() #690 Body End AND if() #689 Body End
RETURNFUNC; Func[void __UpdateEWMFall(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #348 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35479 ==; Test 'if'
LOAD D2 0.0001; if() #348 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 35836; if() #348 Body End
LOAD D2 0; if() #349 Test AND if() #348 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35513 ==; Test 'if'
LOAD D2 0.0001; if() #349 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 35836; if() #349 Body End
LOAD D2 0; if() #350 Test AND if() #349 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35548 ==; Test 'if'
LOAD D2 0.0001; if() #350 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 35836; if() #350 Body End
LOAD D2 0; if() #351 Test AND if() #350 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35582 ==; Test 'if'
LOAD D2 0.0001; if() #351 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 35836; if() #351 Body End
LOAD D2 0; if() #352 Test AND if() #351 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35648 ==; Test 'if'
LOAD D2 0.0001; if() #352 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 35836; if() #352 Body End
LOAD D2 0; if() #353 Test AND if() #352 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35713 ==; Test 'if'
LOAD D2 0.0001; if() #353 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 35836; if() #353 Body End
LOAD D2 0; if() #354 Test AND if() #353 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35778 ==; Test 'if'
LOAD D2 0.0001; if() #354 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 35836; if() #354 Body End
LOAD D2 0.0001; if() #354 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #354 Else End
LOAD D2 0.0001; if() #353 Else End AND if() #352 Else End AND if() #351 Else End AND if() #350 Else End AND if() #349 Else End AND if() #348 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001; if() #355 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 16
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 35960 ==; Test 'if'
LOAD D2 0.0001; if() #355 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 35979; if() #355 Body End
LOAD D2 0.0001; if() #355 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #355 Else End
LOAD D2 0; if() #356 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36014 ==; Test 'if'
LOAD D2 0.0001; if() #356 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 36371; if() #356 Body End
LOAD D2 0; if() #357 Test AND if() #356 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36048 ==; Test 'if'
LOAD D2 0.0001; if() #357 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 36371; if() #357 Body End
LOAD D2 0; if() #358 Test AND if() #357 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36083 ==; Test 'if'
LOAD D2 0.0001; if() #358 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 36371; if() #358 Body End
LOAD D2 0; if() #359 Test AND if() #358 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36117 ==; Test 'if'
LOAD D2 0.0001; if() #359 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 36371; if() #359 Body End
LOAD D2 0; if() #360 Test AND if() #359 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36183 ==; Test 'if'
LOAD D2 0.0001; if() #360 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 36371; if() #360 Body End
LOAD D2 0; if() #361 Test AND if() #360 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36248 ==; Test 'if'
LOAD D2 0.0001; if() #361 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 36371; if() #361 Body End
LOAD D2 0; if() #362 Test AND if() #361 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36313 ==; Test 'if'
LOAD D2 0.0001; if() #362 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 36371; if() #362 Body End
LOAD D2 0.0001; if() #362 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #362 Else End
LOAD D2 0.0001; if() #361 Else End AND if() #360 Else End AND if() #359 Else End AND if() #358 Else End AND if() #357 Else End AND if() #356 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(eweapon)] Body End
PUSHARGSV 0 0.0011; Func[void __DoEWeaponDeathPrototype(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0010
STOREV 0 0.0009
STOREV 0 0.0008
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0011; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR D2; InlineFunc[untyped Floor(untyped)] Body
STORE D2 0.0010
SETR D2 EWPNCOUNT; for() #159 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #159 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 36464 ==; for() #159 TestFail?
LOAD D2 0.0003; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #159 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0009
LOAD D2 0.0009; if() #560 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 768
COMPAREV D2 768
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 36460 !=; Test 'if' AND continue 1; AND if() #560 Body
LOAD D2 0.0009; if() #561 Test
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36464 !=; Test 'if' AND break 1; AND if() #561 Body
LOAD D2 0.0003; for() #159 Body End AND for() #159 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 36424; for() #159 End
LOAD D2 0.0003; if() #562 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36490 ==; Test 'if'
ALLOCATEMEMV D2 43 0; if() #562 Body Start
WRITEPODSTRING D2 "ghost.zh: Failed to find prototype eweapon"
STORE D2 0
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 36812; return (Void)
LOAD D3 0
DEALLOCATEMEMR D3; if() #562 Body End
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MODV D2 10
SUBV D2 6.2832
STORE D2 0.0005
LOAD D2 0.0011
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0010
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 10000
STORE D2 0.0004
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 100
RSHIFTV D2 0
STORE D2 0.0008
LOAD D2 0.0011; if() #295 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36580 ==; Test 'if'
LOAD D2 0.0011; if() #295 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
GOTO 36592; if() #295 Body End
LOAD D2 0.0011; if() #295 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
STORE D2 0.0006; if() #295 Else End
LOAD D2 0.0008; if() #296 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36645 ==; Test 'if'
STOREV 0 0.0001; for() #160 setup AND if() #296 Body Start
LOAD D2 0.0001; for() #160 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36636 ==; for() #160 TestFail?
PUSHR D4; for() #160 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
MULTV D2 6.2832
SETV D2 6.2832
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 3.8587; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #160 Body End
LOAD D2 0.0001; for() #160 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 36598; for() #160 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 36803; if() #296 Body End
LOAD D2 0.0008; if() #297 Test AND if() #296 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36685 ==; Test 'if'
STOREV 0 0.0001; for() #161 setup AND if() #297 Body Start
LOAD D2 0.0001; for() #161 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36676 ==; for() #161 TestFail?
PUSHR D4; for() #161 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D3 31416; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
DIVV D2 5000
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 3.8587; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #161 Body End
LOAD D2 0.0001; for() #161 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 36651; for() #161 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 36803; if() #297 Body End
LOAD D2 0.0004; if() #298 Test AND if() #297 Else Start
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 36758 ==; Test 'if'
SETV D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND if() #298 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2
LOAD D2 0.0005
DIVV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
STOREV 0 0; for() #162 setup
LOAD D2 0; for() #162 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36795 ==; for() #162 TestFail?
PUSHR D4; for() #162 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 3.8587; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #162 Body End
LOAD D2 0; for() #162 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 36720; for() #162 End
GOTO 36795; if() #298 Body End
LOAD D2 0.0004; if() #563 Test AND if() #298 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36795 ==; Test 'if'
PUSHR D4; if() #563 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 3.8587; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; if() #563 Body End
LOAD D2 0.0009; if() #298 Else End AND InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body AND if() #297 Else End
SETV D2 0; if() #296 Else End
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #290 Test
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 36909 ==; Test 'if'
PUSHR D4; if() #290 Body Start
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 2.0717; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 2.2963; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
SETV D2 300
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 36985; if() #290 Body End
LOAD D2 0.0001; if() #291 Test AND if() #290 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 36934 ==; Test 'if'
LOAD D2 0.0001; if() #291 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 2.2963; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
GOTO 36985; if() #291 Body End
LOAD D2 0.0001; if() #291 Else Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #292 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36955 ==; Test 'if'
PUSHR D4; if() #292 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 3.1839; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 36985; if() #292 Body End
LOAD D2 0; if() #293 Test AND if() #292 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36967 ==; Test 'if'
PUSHR D4; if() #293 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 3.1839; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 36985; if() #293 Body End
LOAD D2 0; if() #294 Test AND if() #293 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36979 ==; Test 'if'
PUSHR D4; if() #294 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 3.1839; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 36985; if() #294 Body End
PUSHR D4; if() #294 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 3.1839; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #294 Else End
POPARGS D5 0.0002; if() #293 Else End AND if() #292 Else End AND if() #291 Else End AND if() #290 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathExplode(eweapon)] Body Start
PUSHR D4
PUSHV 135; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body Start
PUSHR D4
PUSHV 136; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #149 setup
LOAD D2 0; for() #149 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37122 ==; for() #149 TestFail?
PUSHR D4; for() #149 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #149 Body End
LOAD D2 0; for() #149 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37078; for() #149 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #148 setup
LOAD D2 0; for() #148 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37180 ==; for() #148 TestFail?
PUSHR D4; for() #148 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #148 Body End
LOAD D2 0; for() #148 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37136; for() #148 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #288 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37245 ==; Test 'if'
STOREV 0 0; for() #150 setup AND if() #288 Body Start
LOAD D2 0; for() #150 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37290 ==; for() #150 TestFail?
PUSHR D4; for() #150 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #150 Body End
LOAD D2 0; for() #150 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37200; for() #150 End
GOTO 37290; if() #288 Body End
STOREV 4 0; for() #151 setup AND if() #288 Else Start
LOAD D2 0; for() #151 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37290 ==; for() #151 TestFail?
PUSHR D4; for() #151 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #151 Body End
LOAD D2 0; for() #151 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37246; for() #151 End
SETV D2 0; if() #288 Else End
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #156 setup
LOAD D2 0; for() #156 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37348 ==; for() #156 TestFail?
PUSHR D4; for() #156 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #156 Body End
LOAD D2 0; for() #156 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37304; for() #156 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #153 setup
LOAD D2 0; for() #153 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37406 ==; for() #153 TestFail?
PUSHR D4; for() #153 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #153 Body End
LOAD D2 0; for() #153 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37362; for() #153 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #152 setup
LOAD D2 0; for() #152 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37466 ==; for() #152 TestFail?
PUSHR D4; for() #152 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #152 Body End
LOAD D2 0; for() #152 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37422; for() #152 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #289 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37533 ==; Test 'if'
STOREV 0 0; for() #154 setup AND if() #289 Body Start
LOAD D2 0; for() #154 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37578 ==; for() #154 TestFail?
PUSHR D4; for() #154 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #154 Body End
LOAD D2 0; for() #154 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37488; for() #154 End
GOTO 37578; if() #289 Body End
STOREV 4 0; for() #155 setup AND if() #289 Else Start
LOAD D2 0; for() #155 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37578 ==; for() #155 TestFail?
PUSHR D4; for() #155 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #155 Body End
LOAD D2 0; for() #155 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37534; for() #155 End
SETV D2 13; if() #289 Else End AND InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #157 setup
LOAD D2 0; for() #157 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37638 ==; for() #157 TestFail?
PUSHR D4; for() #157 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #157 Body End
LOAD D2 0; for() #157 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37594; for() #157 End
STOREV 4 0; for() #158 setup
LOAD D2 0; for() #158 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37683 ==; for() #158 TestFail?
PUSHR D4; for() #158 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #158 Body End
LOAD D2 0; for() #158 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37639; for() #158 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[npc screendata::CreateNPC(int)] Params Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[npc screendata::CreateNPC(int)] Params End
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body Start
PUSHR D4
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2591; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[void __DoEWeaponDeathRunScript(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
PUSHR D4
CALLFUNC 2.2385; UsrFunc[int FindUnusedFFC()] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #564 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37819 ==; Test 'if'
SETV D2 0; if() #564 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 37958; return (Void) AND if() #564 Body End
LOAD D2 0.0004; InlineFunc[ffc screendata::LoadFFC(int)] Params
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0003
SETR D2 EWPNCOUNT; for() #163 setup
STORE D2 0
LOAD D2 0; for() #163 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 37861 ==; for() #163 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #163 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0002
LOAD D2 0.0002; if() #565 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 768
COMPAREV D2 512
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 37857 !=; Test 'if' AND continue 1; AND if() #565 Body
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0002
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFSPRITE
PUSHVARGR SPRITE_MISCD; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001; for() #163 Body End
LOAD D2 0; for() #163 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 37824; for() #163 End
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 3
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0005
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 1024
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 2.1709; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 2.1778; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
POPARGS D5 0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void UpdateEWeapons()] Body Start
SETR D4 SP2
STOREV 0 0.0001
SETR D2 LINKACTION; unless() #281 Test
COMPAREV D2 4
GOTOCMP 37977 ==
SETR D2 LINKACTION
COMPAREV D2 5
GOTOCMP 37977 ==
SETR D2 LINKACTION
COMPAREV D2 14
GOTOCMP 37977 ==
SETR D2 LINKACTION
COMPAREV D2 15
GOTOCMP 37977 ==
SETV D2 0
GOTO 37978
SETV D2 1
COMPAREV D2 0
GOTOCMP 38027 !=; Test 'unless'
SETR D2 EWPNCOUNT; for() #143 setup AND unless() #281 Body Start
STORE D2 0
LOAD D2 0; for() #143 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 38073 ==; for() #143 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #143 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #541 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 38014 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 38014 !=
SETV D2 0
GOTO 38015
SETV D2 1
COMPAREV D2 0
GOTOCMP 38022 !=; Test 'if' AND continue 1; AND if() #541 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void UpdateEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void UpdateEWeapon(eweapon)] Params End
CALLFUNC 3.1943; UsrFunc[void UpdateEWeapon(eweapon)] Call
POP D4; for() #143 Body End
LOAD D2 0; for() #143 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 37982; for() #143 End
GOTO 38073; unless() #281 Body End
SETR D2 EWPNCOUNT; for() #144 setup AND unless() #281 Else Start
STORE D2 0
LOAD D2 0; for() #144 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 38073 ==; for() #144 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #144 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #542 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 38061 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 38061 !=
SETV D2 0
GOTO 38062
SETV D2 1
COMPAREV D2 0
GOTOCMP 38069 !=; Test 'if' AND continue 1; AND if() #542 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params End
CALLFUNC 3.8075; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Call
POP D4; for() #144 Body End
LOAD D2 0; for() #144 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 38029; for() #144 End
POPARGS D5 0.0002; unless() #281 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0 0.0002; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002; if() #712 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 38102 ==; Test 'if'
LOAD D2 0.0002; if() #713 Test AND if() #712 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 38102 ==; Test 'if'
PUSHR D4; if() #713 Body Start
LOAD D2 0.0002; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 2.2014; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #713 Body End
LOAD D2 0.0002; if() #712 Body End AND if() #397 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 38294 ==; Test 'if'
SETV D2 1000; if() #397 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0002; if() #714 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 38142 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 38142 ==
SETV D2 1
GOTO 38143
SETV D2 0
COMPAREV D2 0
GOTOCMP 38351 !=; Test 'if' AND return (Void) AND if() #714 Body
STOREV 0 0.0001
LOAD D2 0.0002; if() #398 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 38159 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int RadtoDeg(int)] Params Start AND if() #398 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 38225; if() #398 Body End
PUSHR D4; if() #398 Else Start
LOAD D2 0.0002; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 2.3374; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #399 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 38175 ==; Test 'if'
SETV D2 -90; if() #399 Body Start
STORE D2 0.0001
GOTO 38225; if() #399 Body End
LOAD D2 0; if() #400 Test AND if() #399 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 38183 ==; Test 'if'
SETV D2 -45; if() #400 Body Start
STORE D2 0.0001
GOTO 38225; if() #400 Body End
LOAD D2 0; if() #401 Test AND if() #400 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 38191 ==; Test 'if'
SETV D2 0; if() #401 Body Start
STORE D2 0.0001
GOTO 38225; if() #401 Body End
LOAD D2 0; if() #402 Test AND if() #401 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 38199 ==; Test 'if'
SETV D2 45; if() #402 Body Start
STORE D2 0.0001
GOTO 38225; if() #402 Body End
LOAD D2 0; if() #403 Test AND if() #402 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 38207 ==; Test 'if'
SETV D2 90; if() #403 Body Start
STORE D2 0.0001
GOTO 38225; if() #403 Body End
LOAD D2 0; if() #404 Test AND if() #403 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 38215 ==; Test 'if'
SETV D2 135; if() #404 Body Start
STORE D2 0.0001
GOTO 38225; if() #404 Body End
LOAD D2 0; if() #405 Test AND if() #404 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 38223 ==; Test 'if'
SETV D2 180; if() #405 Body Start
STORE D2 0.0001
GOTO 38225; if() #405 Body End
SETV D2 -135; if() #405 Else Start
STORE D2 0.0001; if() #405 Else End
STOREV 0 0; if() #404 Else End AND if() #403 Else End AND if() #402 Else End AND if() #401 Else End AND if() #400 Else End AND if() #399 Else End AND if() #398 Else End
LOAD D2 0.0001; if() #406 Test
COMPAREV D2 0
GOTOCMP 38234 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 38234 >=
SETV D2 1
GOTO 38235
SETV D2 0
COMPAREV D2 0
GOTOCMP 38240 ==; Test 'if'
SETV D2 0; if() #406 Body Start
STORE D2 0
GOTO 38242; if() #406 Body End
SETV D2 2; if() #406 Else Start
STORE D2 0; if() #406 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
PUSHARGSV 1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 38351; if() #397 Body End
LOAD D2 0.0002; if() #715 Test AND if() #397 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 38334 ==; Test 'if'
SETR D2 GD26; if() #407 Test AND if() #715 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 38325 ==; Test 'if'
SETV D2 1000; if() #407 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
GOTO 38334; if() #407 Body End
SETV D2 0; if() #407 Else Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #407 Else End
LOAD D2 0.0002; if() #715 Body End AND if() #716 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 38351 ==; Test 'if'
PUSHR D4; if() #716 Body Start
LOAD D2 0.0002; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 2.3073; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #716 Body End
POPARGS D5 0.0003; if() #397 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body End
SETR D4 SP2; Func[void UpdateGhostZH1()] Body Start
PUSHR D4
CALLFUNC 3.7960; UsrFunc[void UpdateEWeapons()] Call
PEEK D4
CALLFUNC 2.1884; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK D4
CALLFUNC 3.8362; UsrFunc[void UpdateGhostZHData1()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR D4 SP2
SETR D2 CURDMAP
LSHIFTV D2 8
PUSHR D2
SETR D2 CURDSCR
POP D3
ADDR D2 D3
STORE D2 0
SETR D2 GD26; if() #282 Test
PUSHR D2
POP D0
READPODARRAYV D2 7
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 38395 ==; Test 'if'
SETV D2 0; if() #282 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
GOTO 38413; if() #282 Body End
SETR D2 GD26; if() #543 Test AND if() #282 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 38413 ==; Test 'if'
SETR D2 GD26; if() #543 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 6
SUBV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #543 Body End
POP D5; if() #282 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR D4 SP2; Func[void UpdateGhostZH2()] Body Start
PUSHR D4
CALLFUNC 2.2080; UsrFunc[void DrawGhostFFCs()] Call
PEEK D4
CALLFUNC 2.0905; UsrFunc[void AutoGhost()] Call
PEEK D4
CALLFUNC 3.8424; UsrFunc[void UpdateGhostZHData2()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR D4 SP2; Func[void UpdateGhostZHData2()] Body Start
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 1
ADDV D2 1
MODV D2 8
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETR D2 GD26; if() #283 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 38456 ==; Test 'if'
SETR D2 GD26; if() #283 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ORV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 38466; if() #283 Body End
SETR D2 GD26; if() #283 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 -2
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #283 Else End
SETR D2 GD26; if(true) #544 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 3
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26; if() #545 Test
PUSHR D2
POP D0
READPODARRAYV D2 3
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 38501 ==; Test 'if'
SETV D2 0; if() #545 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #545 Body End
SETR D2 GD26; if(true) #546 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 5
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26; if() #547 Test
PUSHR D2
POP D0
READPODARRAYV D2 5
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 38536 ==; Test 'if'
SETV D2 0; if() #547 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2; if() #547 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR D4 SP2; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOAD D2 0.0001; if() #659 Test
COMPAREV D2 97
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 38550 ==; Test 'if'
LOAD D2 0.0001; if() #660 Test AND if() #659 Body Start
COMPAREV D2 122
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 38550 ==; Test 'if'
SETV D2 1; return Start AND if() #660 Body Start
GOTO 38585; return End AND if() #660 Body End
LOAD D2 0.0001; if() #659 Body End AND if() #661 Test
COMPAREV D2 65
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 38562 ==; Test 'if'
LOAD D2 0.0001; if() #662 Test AND if() #661 Body Start
COMPAREV D2 90
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 38562 ==; Test 'if'
SETV D2 1; return Start AND if() #662 Body Start
GOTO 38585; return End AND if() #662 Body End
LOAD D2 0.0001; if() #661 Body End AND if() #663 Test
COMPAREV D2 95
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 38569 ==; Test 'if'
SETV D2 1; return Start AND if() #663 Body Start
GOTO 38585; return End AND if() #663 Body End
LOAD D2 0; unless() #664 Test
COMPAREV D2 0
GOTOCMP 38584 !=; Test 'unless'
LOAD D2 0.0001; if() #665 Test AND unless() #664 Body Start
COMPAREV D2 48
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 38584 ==; Test 'if'
LOAD D2 0.0001; if() #666 Test AND if() #665 Body Start
COMPAREV D2 57
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 38584 ==; Test 'if'
SETV D2 1; return Start AND if() #666 Body Start
GOTO 38585; return End AND if() #666 Body End
SETV D2 0; if() #665 Body End AND unless() #664 Body End AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(eweapon, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params End
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0004; if() #556 Test
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 38619 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #556 Body Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #556 Body End
LOAD D2 0.0004; if() #286 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 38755 ==; Test 'if'
SETV D2 3; if() #286 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
GOTO 38775; if() #286 Body End
LOAD D2 0.0003; if() #286 Else Start
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #286 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 2.2963; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004; if() #287 Test
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
GOTOCMP 38912 !=
LOAD D2 0.0004
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -1
GOTOCMP 38912 !=
SETV D2 1
GOTO 38913
SETV D2 0
COMPAREV D2 0
GOTOCMP 38932 ==; Test 'if'
PUSHR D4; if() #287 Body Start
LOAD D2 0; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params Start
PUSHR D2; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params End
CALLFUNC 3.1721; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 38950; if() #287 Body End
LOAD D2 0.0004; if() #287 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #287 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 -257
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #557 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 39063 ==; Test 'if'
SETV D2 0; if() #557 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #557 Body End
LOAD D2 0; if() #558 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 39080 ==; Test 'if'
PUSHR D4; if() #558 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 2.3073; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #558 Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __CopyEWeapon(eweapon, int, int, int)] Body End
SETR D4 SP2; Func[void __DeathAnimEnd(ffc, npc)] Body Start
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND if() #559 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 39141 ==; Test 'if'
SETV D2 -1000; if() #559 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #559 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.8217; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2
PUSHR D4
CALLFUNC 2.6043; UsrFunc[void Ghost_ClearCombos()] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void __DeathAnimEnd(ffc, npc)] Body End
PUSHV 0; Func[void __DeathAnimSFX(int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002; InlineFunc[npc screendata::CreateNPC(int)] Params
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 REGION_HEIGHT
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void __DeathAnimSFX(int, int)] Body End
SETR D4 SP2; Func[void __DeathAnimStart(ffc, npc)] Body Start
SETR D2 GD11
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCBGSFX D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DeathAnimStart(ffc, npc)] Body End
SETR D4 SP2; Func[bool __Ghost_IsFlickering(npc)] Body Start
LOAD D2 0; if() #604 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 39297 ==; Test 'if'
SETV D2 1; return Start AND if() #604 Body Start
GOTO 39298; return End AND if() #604 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[bool __Ghost_IsFlickering(npc)] Body End
SETR D4 SP2; Func[int __Ghost_LinedUp(int, bool)] Body Start
SETV D2 0.0001; InlineFunc[int Abs(int)] Params Start AND if() #316 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 39335 ==; Test 'if'
SETV D2 0.0001; if() #317 Test AND if() #316 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 39332 ==; Test 'if'
SETV D2 0; return Start AND if() #317 Body Start
GOTO 39447; return End
GOTO 39368; if() #317 Body End
SETV D2 1; return Start AND if() #317 Else Start
GOTO 39447; return End AND if() #317 Else End
GOTO 39368; if() #316 Body End
SETV D2 0.0001; InlineFunc[int Abs(int)] Params Start AND if() #606 Test AND if() #316 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 39368 ==; Test 'if'
SETV D2 0.0001; if() #318 Test AND if() #606 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 39366 ==; Test 'if'
SETV D2 2; return Start AND if() #318 Body Start
GOTO 39447; return End
GOTO 39368; if() #318 Body End
SETV D2 3; return Start AND if() #318 Else Start
GOTO 39447; return End AND if() #318 Else End
LOAD D2 0; if() #606 Body End AND if() #316 Else End AND if() #607 Test
COMPAREV D2 0
GOTOCMP 39446 ==; Test 'if'
SETV D2 0.0001; InlineFunc[int Abs(int)] Params Start AND if() #608 Test AND if() #607 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETV D2 0.0001; InlineFunc[int Abs(int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 39446 ==; Test 'if'
SETV D2 0.0001; if() #319 Test AND if() #608 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 39430 ==; Test 'if'
SETV D2 0.0001; if() #320 Test AND if() #319 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 39427 ==; Test 'if'
SETV D2 4; return Start AND if() #320 Body Start
GOTO 39447; return End
GOTO 39446; if() #320 Body End
SETV D2 5; return Start AND if() #320 Else Start
GOTO 39447; return End AND if() #320 Else End
GOTO 39446; if() #319 Body End
SETV D2 0.0001; if() #321 Test AND if() #319 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 39444 ==; Test 'if'
SETV D2 6; return Start AND if() #321 Body Start
GOTO 39447; return End
GOTO 39446; if() #321 Body End
SETV D2 7; return Start AND if() #321 Else Start
GOTO 39447; return End AND if() #321 Else End
SETV D2 -1; if() #319 Else End AND if() #608 Body End AND if() #607 Body End AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int __Ghost_LinedUp(int, bool)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #183 setup
LOAD D2 0; for() #183 LoopTest
PUSHR D2
LOAD D2 0.0001
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 39497 ==; for() #183 TestFail?
LOAD D2 0.0006; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #727 Test AND for() #183 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 39493 ==; Test 'if'
SETV D2 51; if() #728 Test AND if() #727 Body Start
PUSHR D2
POP D0
SETR D2 SCREEN_FLAG
COMPAREV D2 0
GOTOCMP 39493 ==; Test 'if'
SETV D2 1; return Start AND if() #728 Body Start
GOTO 39498; return End AND if() #728 Body End
LOAD D2 0; if() #727 Body End AND for() #183 Body End AND for() #183 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 39452; for() #183 End
SETV D2 0; return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_AddAttack(ffc, npc, int, int, int)] Body Start
LOAD D2 0.0001; if() #815 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 39621 !=; Test 'if' AND return (Void) AND if() #815 Body
LOAD D2 0.0001; if() #816 Test
COMPAREV D2 91
GOTOCMP 39514 <
LOAD D2 0.0001
COMPAREV D2 93
GOTOCMP 39514 >
SETV D2 1
GOTO 39515
SETV D2 0
COMPAREV D2 0
GOTOCMP 39598 ==; Test 'if'
SETV D2 0; if() #816 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 315 D2
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 317 D2
LOAD D2 0.0001; if() #435 Test
COMPAREV D2 91
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 39554 ==; Test 'if'
SETV D2 300; if() #435 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 317
MULTV D2 2
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 318 D2
GOTO 39621; if() #435 Body End
LOAD D2 0.0001; if() #436 Test AND if() #435 Else Start
COMPAREV D2 92
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 39576 ==; Test 'if'
SETV D2 600; if() #436 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 317
MULTV D2 3
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 318 D2
GOTO 39621; if() #436 Body End
LOAD D2 0.0001; if() #817 Test AND if() #436 Else Start
COMPAREV D2 93
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 39621 ==; Test 'if'
SETV D2 900; if() #817 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 317
MULTV D2 4
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 318 D2; if() #817 Body End
GOTO 39621; if() #436 Else End AND if() #435 Else End AND return (Void) AND if() #816 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_AddAttack(ffc, npc, int, int, int)] Body End
PUSHV 0; Func[void EZB_AddSummon(npc, npc)] Body Start
SETR D4 SP2
STOREV 0 0; for() #220 setup
LOAD D2 0; for() #220 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 39653 ==; for() #220 TestFail?
LOAD D2 0.0001; InlineFunc[bool npc::isValid()] Params Start AND unless() #818 Test AND for() #220 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2; InlineFunc[bool npc::isValid()] Params End
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 39649 !=; Test 'unless'
LOAD D2 0.0002; unless() #818 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 39653; return (Void) AND unless() #818 Body End
LOAD D2 0; for() #220 Body End AND for() #220 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 39626; for() #220 End
POPARGS D5 0.0003
RETURNFUNC; Func[void EZB_AddSummon(npc, npc)] Body End
SETR D4 SP2; Func[void EZB_AddTransformation(ffc, npc, int, int, int)] Body Start
LOAD D2 0.0001; if() #819 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 39684 !=; Test 'if' AND return (Void) AND if() #819 Body
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 100
ADDV D2 101
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 100
ADDV D2 1
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 100 D2
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_AddTransformation(ffc, npc, int, int, int)] Body End
PUSHV 0; Func[int EZB_AngDiff(int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
LOAD D2 0; if() #437 Test
COMPAREV D2 180
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 39704 ==; Test 'if'
LOAD D2 0; if() #437 Body Start
SUBV D2 360
STORE D2 0
GOTO 39712; if() #437 Body End
LOAD D2 0; if() #820 Test AND if() #437 Else Start
COMPAREV D2 -180
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 39712 ==; Test 'if'
LOAD D2 0; if() #820 Body Start
ADDV D2 360
STORE D2 0; if() #820 Body End
LOAD D2 0; if() #437 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int EZB_AngDiff(int, int)] Body End
PUSHV 0; Func[int EZB_AngleDir(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #438 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 39732 ==; Test 'if'
PUSHR D4; return Start AND if() #438 Body Start
LOAD D2 0.0001; UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0807; UsrFunc[int AngleDir8(int)] Call
POP D4
GOTO 39737; return End AND if() #438 Body End
PUSHR D4; return Start AND if() #438 Else Start
LOAD D2 0.0001; UsrFunc[int AngleDir4(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0761; UsrFunc[int AngleDir4(int)] Call
POP D4
POPARGS D5 0.0005; return End AND if() #438 Else End
RETURNFUNC; Func[int EZB_AngleDir(ffc, npc, int, int)] Body End
PUSHARGSV 0 0.0005; Func[int EZB_BarrierShift_TransformAnimSize(npc, int)] Body Start
SETR D4 SP2
STOREV 0 0.0004
LOAD D2 0.0005; if() #821 Test
PUSHR D2
POP D0
READPODARRAYV D2 201
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 39752 ==; Test 'if'
SETV D2 100; if() #821 Body Start
STORE D2 0.0004; if() #821 Body End
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
ADDV D2 11
ADDV D2 6
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0003
ANDV D2 15
STORE D2 0.0002
LOAD D2 0.0003
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0001
LOAD D2 0.0001; if() #822 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 39774 ==; Test 'if'
LOAD D2 0.0002; if() #822 Body Start
STORE D2 0.0001; if() #822 Body End
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0002; InlineFunc[int Max(int, int)] Params Start AND return Start
PUSHVARGR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POPARGS D5 0.0007; return End
RETURNFUNC; Func[int EZB_BarrierShift_TransformAnimSize(npc, int)] Body End
PUSHARGSV 0 0.0002; Func[void EZB_Barriershift_Load(npc, int, bool, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0004; if() #823 Test
PUSHR D2
POP D0
READPODARRAYV D2 201
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 39811 ==; Test 'if'
SETV D2 100; if() #823 Body Start
STORE D2 0; if() #823 Body End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
SETR GD11 D2
LOAD D2 0.0003; unless() #824 Test
COMPAREV D2 0
GOTOCMP 39990 !=; Test 'unless'
LOAD D2 0.0004; unless() #824 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCDP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCWDP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHUNGER D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCRATE D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHALTRATE D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 6
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHOMING D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 7
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 8
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCWEAPON D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 9
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 10
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCBGSFX D2
SETV D2 0; for() #221 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #221 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 39990 ==; for() #221 TestFail?
LOAD D2 0.0004; for() #221 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 11
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
ADDV D2 300
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #221 Body End
LOAD D2 0.0001; for() #221 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 39962; for() #221 End
SETV D2 0; unless() #824 Body End AND for() #222 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #222 LoopTest
COMPAREV D2 18
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 40022 ==; for() #222 TestFail?
LOAD D2 0.0004; for() #222 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 22
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCDEFENSED D2; for() #222 Body End
LOAD D2 0.0001; for() #222 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 39992; for() #222 End
LOAD D2 0.0002; if() #825 Test
COMPAREV D2 0
GOTOCMP 40044 ==; Test 'if'
LOAD D2 0.0004; if() #825 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 40
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
LOAD D2 0.0005
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2; if() #825 Body End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 41
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0004
SETR D0 D2
POP D2
WRITEPODARRAYVR 312 D2
LOAD D2 0.0004; if() #439 Test
PUSHR D2
POP D0
READPODARRAYV D2 201
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 40070 ==; Test 'if'
SETV D2 1; if() #439 Body Start
PUSHR D2
LOAD D2 0.0004
SETR D0 D2
POP D2
WRITEPODARRAYVR 201 D2
GOTO 40076; if() #439 Body End
SETV D2 0; if() #439 Else Start
PUSHR D2
LOAD D2 0.0004
SETR D0 D2
POP D2
WRITEPODARRAYVR 201 D2; if() #439 Else End
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_Barriershift_Load(npc, int, bool, bool)] Body End
PUSHARGSV 0 0.0002; Func[void EZB_Barriershift_Store(npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
PUSHR D4
LOAD D2 0.0003; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHV 128
PUSHV -1000; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.1983; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0
SETR D2 GD11
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHUNGER
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 8 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCITEMSET
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 9 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCBGSFX
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 10 D2
SETV D2 0; for() #223 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #223 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 40212 ==; for() #223 TestFail?
LOAD D2 0.0004; for() #223 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 11
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #223 Body End
LOAD D2 0.0001; for() #223 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 40187; for() #223 End
SETV D2 0; for() #224 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #224 LoopTest
COMPAREV D2 18
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 40239 ==; for() #224 TestFail?
LOAD D2 0.0004; for() #224 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDEFENSED
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 22
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #224 Body End
LOAD D2 0.0001; for() #224 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 40214; for() #224 End
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 40 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 41 D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 100 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 101 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 102 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHUNGER
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 103 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 104 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 105 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 106 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 107 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 108 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCITEMSET
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 109 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCBGSFX
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 110 D2
SETV D2 0; for() #225 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #225 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 40383 ==; for() #225 TestFail?
LOAD D2 0; for() #225 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 111
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #225 Body End
LOAD D2 0.0001; for() #225 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 40358; for() #225 End
SETV D2 0; for() #226 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #226 LoopTest
COMPAREV D2 18
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 40410 ==; for() #226 TestFail?
LOAD D2 0; for() #226 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDEFENSED
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 122
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #226 Body End
LOAD D2 0.0001; for() #226 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 40385; for() #226 End
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 140 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 141 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 201 D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_Barriershift_Store(npc, int, int)] Body End
PUSHARGSV 0 0.0002; Func[bool EZB_CanMoveAngle(int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 10; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV 10; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #826 Test
COMPAREV D2 0
GOTOCMP 40521 >=
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 40534 ==
LOAD D2 0.0001
COMPAREV D2 0
GOTOCMP 40532 <=
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 40534 ==
SETV D2 0
GOTO 40535
SETV D2 1
COMPAREV D2 0
GOTOCMP 40539 ==; Test 'if'
SETV D2 0; return Start AND if() #826 Body Start
GOTO 40568; return End AND if() #826 Body End
LOAD D2 0; if() #827 Test
COMPAREV D2 0
GOTOCMP 40550 >=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 40562 ==
LOAD D2 0
COMPAREV D2 0
GOTOCMP 40560 <=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.3298; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 40562 ==
SETV D2 0
GOTO 40563
SETV D2 1
COMPAREV D2 0
GOTOCMP 40567 ==; Test 'if'
SETV D2 0; return Start AND if() #827 Body Start
GOTO 40568; return End AND if() #827 Body End
SETV D2 1; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool EZB_CanMoveAngle(int)] Body End
PUSHV 0; Func[bool EZB_CanMoveAtPos(int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0001; if() #440 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 40624 ==; Test 'if'
SETV D2 0; for() #227 setup AND if() #440 Body Start
STORE D2 0
LOAD D2 0; for() #227 LoopTest
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 40782 ==; for() #227 TestFail?
PUSHR D4; unless() #828 Test AND for() #227 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
SUBV D2 1
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.4229; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 40605 !=; Test 'unless'
SETV D2 0; return Start AND unless() #828 Body Start
GOTO 40783; return End AND unless() #828 Body End
LOAD D2 0; if() #829 Test
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 40782 !=; Test 'if' AND break 1; AND if() #829 Body
LOAD D2 0; for() #227 Body End AND for() #227 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0003
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 40580; for() #227 End
GOTO 40782; if() #440 Body End
LOAD D2 0.0001; if() #441 Test AND if() #440 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 40678 ==; Test 'if'
SETV D2 0; for() #228 setup AND if() #441 Body Start
STORE D2 0
LOAD D2 0; for() #228 LoopTest
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 40782 ==; for() #228 TestFail?
PUSHR D4; unless() #830 Test AND for() #228 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.4229; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 40659 !=; Test 'unless'
SETV D2 0; return Start AND unless() #830 Body Start
GOTO 40783; return End AND unless() #830 Body End
LOAD D2 0; if() #831 Test
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 40782 !=; Test 'if' AND break 1; AND if() #831 Body
LOAD D2 0; for() #228 Body End AND for() #228 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0003
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 40631; for() #228 End
GOTO 40782; if() #441 Body End
LOAD D2 0.0001; if() #442 Test AND if() #441 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 40729 ==; Test 'if'
SETV D2 0; for() #229 setup AND if() #442 Body Start
STORE D2 0
LOAD D2 0; for() #229 LoopTest
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 40782 ==; for() #229 TestFail?
PUSHR D4; unless() #832 Test AND for() #229 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.4229; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 40710 !=; Test 'unless'
SETV D2 0; return Start AND unless() #832 Body Start
GOTO 40783; return End AND unless() #832 Body End
LOAD D2 0; if() #833 Test
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 40782 !=; Test 'if' AND break 1; AND if() #833 Body
LOAD D2 0; for() #229 Body End AND for() #229 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0002
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 40685; for() #229 End
GOTO 40782; if() #442 Body End
LOAD D2 0.0001; if() #834 Test AND if() #442 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 40782 ==; Test 'if'
SETV D2 0; for() #230 setup AND if() #834 Body Start
STORE D2 0
LOAD D2 0; for() #230 LoopTest
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 40782 ==; for() #230 TestFail?
PUSHR D4; unless() #835 Test AND for() #230 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.4229; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 40764 !=; Test 'unless'
SETV D2 0; return Start AND unless() #835 Body Start
GOTO 40783; return End AND unless() #835 Body End
LOAD D2 0; if() #836 Test
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 40782 !=; Test 'if' AND break 1; AND if() #836 Body
LOAD D2 0; for() #230 Body End AND for() #230 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0002
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 40736; for() #230 End
SETV D2 1; if() #834 Body End AND if() #442 Else End AND if() #441 Else End AND if() #440 Else End AND return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool EZB_CanMoveAtPos(int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[bool EZB_CanPlace(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004; for() #231 setup
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
STORE D2 0.0001
LOAD D2 0.0001; for() #231 LoopTest
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 40930 ==; for() #231 TestFail?
LOAD D2 0.0004; for() #232 setup AND for() #231 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
STORE D2 0
LOAD D2 0; for() #232 LoopTest
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 40892 ==; for() #232 TestFail?
PUSHR D4; unless() #837 Test AND for() #232 Body Start
LOAD D2 0.0003; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.4229; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 40854 !=; Test 'unless'
SETV D2 0; return Start AND unless() #837 Body Start
GOTO 40931; return End AND unless() #837 Body End
LOAD D2 0; if() #838 Test
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 40892 !=; Test 'if' AND break 1; AND if() #838 Body
LOAD D2 0; for() #232 Body End AND for() #232 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
POP D3
ADDR D2 D3
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 40816; for() #232 End
LOAD D2 0.0001; if() #839 Test
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 40930 !=; Test 'if' AND break 1; AND if() #839 Body
LOAD D2 0.0001; for() #231 Body End AND for() #231 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
POP D3
ADDR D2 D3
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001
GOTO 40792; for() #231 End
SETV D2 1; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool EZB_CanPlace(ffc, npc, int, int)] Body End
PUSHARGSV 0 0.0002; Func[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001; for() #233 setup
LOAD D2 0.0001; for() #233 LoopTest
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 41010 ==; for() #233 TestFail?
STOREV 0 0; for() #234 setup AND for() #233 Body Start
LOAD D2 0; for() #234 LoopTest
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 40992 ==; for() #234 TestFail?
PUSHR D4; unless() #840 Test AND for() #234 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.4229; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 40974 !=; Test 'unless'
SETV D2 0; return Start AND unless() #840 Body Start
GOTO 41011; return End AND unless() #840 Body End
LOAD D2 0; if() #841 Test
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 40992 !=; Test 'if' AND break 1; AND if() #841 Body
LOAD D2 0; for() #234 Body End AND for() #234 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0002
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 40946; for() #234 End
LOAD D2 0.0001; if() #842 Test
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 41010 !=; Test 'if' AND break 1; AND if() #842 Body
LOAD D2 0.0001; for() #233 Body End AND for() #233 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0003
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001
GOTO 40936; for() #233 End
SETV D2 1; return Start
POPARGS D5 0.0008; return End
RETURNFUNC; Func[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Body End
PUSHV 0; Func[void EZB_DamageLink(int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 40; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
PUSHR D4
SETV D2 0.0001; UsrFunc[int InFrontX(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 12; UsrFunc[int InFrontX(int, int)] Params End
CALLFUNC 3.0955; UsrFunc[int InFrontX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
PUSHR D4
SETV D2 0.0001; UsrFunc[int InFrontY(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 12; UsrFunc[int InFrontY(int, int)] Params End
CALLFUNC 3.0976; UsrFunc[int InFrontY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 0 0.0002
LOAD D2 0.0001
PUSHR D2
PUSHARGSV -1 0.0002
PUSHV 1; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2441; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 3.1400; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void EZB_DamageLink(int)] Body End
SETR D4 SP2; Func[int EZB_DirAngle(int)] Body Start
LOAD D2 0; if() #443 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 41100 ==; Test 'if'
SETV D2 -90; return Start AND if() #443 Body Start
GOTO 41143; return End AND if() #443 Body End
LOAD D2 0; if() #444 Test AND if() #443 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 41107 ==; Test 'if'
SETV D2 90; return Start AND if() #444 Body Start
GOTO 41143; return End AND if() #444 Body End
LOAD D2 0; if() #445 Test AND if() #444 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 41114 ==; Test 'if'
SETV D2 180; return Start AND if() #445 Body Start
GOTO 41143; return End AND if() #445 Body End
LOAD D2 0; if() #446 Test AND if() #445 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 41121 ==; Test 'if'
SETV D2 -135; return Start AND if() #446 Body Start
GOTO 41143; return End AND if() #446 Body End
LOAD D2 0; if() #447 Test AND if() #446 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 41128 ==; Test 'if'
SETV D2 -45; return Start AND if() #447 Body Start
GOTO 41143; return End AND if() #447 Body End
LOAD D2 0; if() #448 Test AND if() #447 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 41135 ==; Test 'if'
SETV D2 135; return Start AND if() #448 Body Start
GOTO 41143; return End AND if() #448 Body End
LOAD D2 0; if() #449 Test AND if() #448 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 41142 ==; Test 'if'
SETV D2 45; return Start AND if() #449 Body Start
GOTO 41143; return End AND if() #449 Body End
SETV D2 0; return Start AND if() #449 Else Start
POP D5; return End AND if() #449 Else End AND if() #448 Else End AND if() #447 Else End AND if() #446 Else End AND if() #445 Else End AND if() #444 Else End AND if() #443 Else End
RETURNFUNC; Func[int EZB_DirAngle(int)] Body End
SETR D4 SP2; Func[int EZB_DirX(int, int)] Body Start
LOAD D2 0.0001; if() #843 Test
COMPAREV D2 2
GOTOCMP 41157 ==
LOAD D2 0.0001
COMPAREV D2 4
GOTOCMP 41157 ==
LOAD D2 0.0001
COMPAREV D2 6
GOTOCMP 41157 ==
SETV D2 0
GOTO 41158
SETV D2 1
COMPAREV D2 0
GOTOCMP 41163 ==; Test 'if'
LOAD D2 0; return Start AND if() #843 Body Start
SUBV2 0 D2
GOTO 41180; return End AND if() #843 Body End
LOAD D2 0.0001; if() #844 Test
COMPAREV D2 3
GOTOCMP 41174 ==
LOAD D2 0.0001
COMPAREV D2 5
GOTOCMP 41174 ==
LOAD D2 0.0001
COMPAREV D2 7
GOTOCMP 41174 ==
SETV D2 0
GOTO 41175
SETV D2 1
COMPAREV D2 0
GOTOCMP 41179 ==; Test 'if'
LOAD D2 0; return Start AND if() #844 Body Start
GOTO 41180; return End AND if() #844 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int EZB_DirX(int, int)] Body End
SETR D4 SP2; Func[int EZB_DirY(int, int)] Body Start
LOAD D2 0.0001; if() #845 Test
COMPAREV D2 0
GOTOCMP 41194 ==
LOAD D2 0.0001
COMPAREV D2 4
GOTOCMP 41194 ==
LOAD D2 0.0001
COMPAREV D2 5
GOTOCMP 41194 ==
SETV D2 0
GOTO 41195
SETV D2 1
COMPAREV D2 0
GOTOCMP 41200 ==; Test 'if'
LOAD D2 0; return Start AND if() #845 Body Start
SUBV2 0 D2
GOTO 41217; return End AND if() #845 Body End
LOAD D2 0.0001; if() #846 Test
COMPAREV D2 1
GOTOCMP 41211 ==
LOAD D2 0.0001
COMPAREV D2 6
GOTOCMP 41211 ==
LOAD D2 0.0001
COMPAREV D2 7
GOTOCMP 41211 ==
SETV D2 0
GOTO 41212
SETV D2 1
COMPAREV D2 0
GOTOCMP 41216 ==; Test 'if'
LOAD D2 0; return Start AND if() #846 Body Start
GOTO 41217; return End AND if() #846 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int EZB_DirY(int, int)] Body End
PUSHARGSV 0 0.0004; Func[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4; if() #450 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 3.1289; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 41233 ==
LOAD D2 0.0014
COMPAREV D2 2
GOTOCMP 41233 !=
SETV D2 1
GOTO 41234
SETV D2 0
COMPAREV D2 0
GOTOCMP 41239 ==; Test 'if'
SETV D2 1; if() #450 Body Start
STORE D2 0.0014
GOTO 41256; if() #450 Body End
PUSHR D4; if() #847 Test AND if() #450 Else Start
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 5; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 3.1289; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 41251 ==
LOAD D2 0.0014
COMPAREV D2 3
GOTOCMP 41251 !=
SETV D2 1
GOTO 41252
SETV D2 0
COMPAREV D2 0
GOTOCMP 41256 ==; Test 'if'
SETV D2 4; if() #847 Body Start
STORE D2 0.0014; if() #847 Body End
STOREV 0 0.0003; if() #450 Else End AND if(false) #451 [Opt:AlwaysOff]
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0006; if() #452 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 41563 ==; Test 'if'
LOAD D2 0.0008; InlineFunc[int Choose(int)] Params Start AND if() #452 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0003
LOAD D2 0.0007; if() #848 Test
COMPAREV D2 -1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 41283 ==; Test 'if'
LOAD D2 0.0007; if() #848 Body Start
STORE D2 0.0003; if() #848 Body End
LOAD D2 0.0005; if() #849 Test
MODV D2 4
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 41651 ==; Test 'if'
LOAD D2 0.0011; if() #849 Body Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
MULTV D2 0.8000
STORE D2 0.0002
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorX(int, int)] Params Start
DIVV D2 2
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0013
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorY(int, int)] Params Start
DIVV D2 2
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0012
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Round(int)] Params Start
DIVV D2 4
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.9517; UsrFunc[int Round(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0001
LOAD D2 0.0014; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
ALLOCATEMEMV D2 2 0
STORE D2 0
LOAD D2 0.0013
PUSHR D2
PUSHR D4
PUSHV 320; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
PUSHV 320; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0011; if() #453 Test
DIVV D2 16
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 41493 ==; Test 'if'
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start AND if() #453 Body Start
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Round(int)] Params Start
DIVV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.9517; UsrFunc[int Round(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0014; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 4.1653; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
GOTO 41560; if() #453 Body End
LOAD D2 0.0014; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start AND if() #453 Else Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End AND if() #453 Else End
LOAD D3 0
DEALLOCATEMEMR D3; if() #849 Body End
GOTO 41651; if() #452 Body End
LOAD D2 0.0008; InlineFunc[int Choose(int)] Params Start AND if() #452 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0003
LOAD D2 0.0007; if() #850 Test
COMPAREV D2 -1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 41587 ==; Test 'if'
LOAD D2 0.0007; if() #850 Body Start
STORE D2 0.0003; if() #850 Body End
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Round(int)] Params Start
DIVV D2 8
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.9517; UsrFunc[int Round(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0014; UsrFunc[void EZB_DrawLaser(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void EZB_DrawLaser(int, int, int, int, int, int)] Params End
CALLFUNC 4.1713; UsrFunc[void EZB_DrawLaser(int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0013; UsrFunc[bool EZB_LaserCollision(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[bool EZB_LaserCollision(int, int, int, int)] Params End
CALLFUNC 4.1816; UsrFunc[bool EZB_LaserCollision(int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 41651 ==; Test 'if'
PUSHR D4; if() #851 Body Start
LOAD D2 0.0009; UsrFunc[void EZB_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZB_DamageLink(int)] Params End
CALLFUNC 4.1013; UsrFunc[void EZB_DamageLink(int)] Call
POP D4; if() #851 Body End
POPARGS D5 0.0015; if() #452 Else End
RETURNFUNC; Func[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body Start
LOAD D2 0.0008; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body End
SETR D4 SP2; Func[void EZB_DrawLaser(int, int, int, int, int, int)] Body Start
PUSHR D4; if() #454 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 3.1289; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 41726 ==
LOAD D2 0.0005
COMPAREV D2 2
GOTOCMP 41726 !=
SETV D2 1
GOTO 41727
SETV D2 0
COMPAREV D2 0
GOTOCMP 41732 ==; Test 'if'
SETV D2 1; if() #454 Body Start
STORE D2 0.0005
GOTO 41749; if() #454 Body End
PUSHR D4; if() #854 Test AND if() #454 Else Start
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 5; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 3.1289; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 41744 ==
LOAD D2 0.0005
COMPAREV D2 3
GOTOCMP 41744 !=
SETV D2 1
GOTO 41745
SETV D2 0
COMPAREV D2 0
GOTOCMP 41749 ==; Test 'if'
SETV D2 4; if() #854 Body Start
STORE D2 0.0005; if() #854 Body End
LOAD D2 0.0005; if() #454 Else End AND InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0005; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
ADDV D2 512
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_DrawLaser(int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[bool EZB_LaserCollision(int, int, int, int)] Body Start
SETR D4 SP2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0.0004
SUBV D2 3
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0002
LOAD D2 0.0006
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #904 Test
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 41872 ==; Test 'if'
SETV D2 1; return Start AND if() #904 Body Start
GOTO 41916; return End AND if() #904 Body End
PUSHR D4; return Start
LOAD D2 0.0006; UsrFunc[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorX(int, int)] Params Start
ADDV D2 128
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorY(int, int)] Params Start
ADDV D2 128
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 128
LOAD D2 0.0003
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHARGSV 4 0.0002
PUSHV 0; UsrFunc[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.4528; UsrFunc[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Call
POP D4
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool EZB_LaserCollision(int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Body Start
SETR D2 LINKHP; if() #852 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 42063 !=; Test 'if' AND return (Void) AND if() #852 Body
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
ADDV D2 -8
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
LOAD D2 0.0005
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
PUSHV 6; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHV 1; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params End
CALLFUNC 4.2065; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Call
POP D4
PUSHR D2
PUSHV 2
PUSHV 1
PUSHR GD11
PUSHARGSV -1 0.0002
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 0
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0; if() #853 Test
COMPAREV D2 0
GOTOCMP 42063 ==; Test 'if'
PUSHR D4; if() #853 Body Start
LOAD D2 0.0005; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params Start
ADDV D2 8
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 16 0.0002
LOAD D2 0
PUSHR D2; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params End
CALLFUNC 4.2114; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params Start
ADDV D2 8
PUSHR D2
PUSHR D4
PUSHV -8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
PUSHV -8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 16 0.0002
LOAD D2 0
PUSHR D2; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params End
CALLFUNC 4.2114; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Call
POP D4; if() #853 Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int EZB_GetSpecialCombo(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0002
LOAD D2 0.0004
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0001
LOAD D2 0.0001
ADDV D2 2
STORE D2 0
LOAD D2 0.0002; if() #477 Test
ANDV D2 1
COMPAREV D2 0
GOTOCMP 42088 ==; Test 'if'
LOAD D2 0.0001; if() #477 Body Start
ADDV D2 8
STORE D2 0
GOTO 42095; if() #477 Body End
LOAD D2 0.0002; if() #901 Test AND if() #477 Else Start
ANDV D2 2
COMPAREV D2 0
GOTOCMP 42095 ==; Test 'if'
LOAD D2 0.0001; if() #901 Body Start
ADDV D2 16
STORE D2 0; if() #901 Body End
LOAD D2 0.0003; if() #477 Else End AND if() #478 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42103 ==; Test 'if'
LOAD D2 0; return Start AND if() #478 Body Start
GOTO 42112; return End
GOTO 42111; if() #478 Body End
LOAD D2 0.0003; if() #902 Test AND if() #478 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42111 ==; Test 'if'
LOAD D2 0; return Start AND if() #902 Body Start
ADDV D2 1
GOTO 42112; return End AND if() #902 Body End
SETV D2 0; if() #478 Else End AND return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[int EZB_GetSpecialCombo(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_MakeHitbox(int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 40; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 120
PUSHV 80
PUSHARGSV 0 0.0002
LOAD D2 0.0001
PUSHR D2
PUSHARGSV -1 0.0002
PUSHV 1; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2441; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_X D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 3.1400; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_MakeHitbox(int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Body Start
SETR D2 LINKHP; if() #855 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 42277 !=; Test 'if' AND return (Void) AND if() #855 Body
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
PUSHV 6; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHV 0; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params End
CALLFUNC 4.2065; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Call
POP D4
PUSHR D2
PUSHARGSV 1 0.0002
PUSHR GD11
PUSHARGSV -1 0.0002
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 0
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0; if() #856 Test
COMPAREV D2 0
GOTOCMP 42277 ==; Test 'if'
PUSHR D4; if() #856 Body Start
LOAD D2 0.0005; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHARGSV 16 0.0002
LOAD D2 0
PUSHR D2; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params End
CALLFUNC 4.2114; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Call
POP D4; if() #856 Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD12
STORE D2 0.0006
SETR D2 GD13
STORE D2 0.0005
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0004
SETR D2 GD10
STORE D2 0.0003
LOAD D2 0.0004; if() #857 Test
ANDV D2 1
COMPAREV D2 0
GOTOCMP 42302 !=
LOAD D2 0.0004
ANDV D2 2
COMPAREV D2 0
GOTOCMP 42302 !=
SETV D2 0
GOTO 42303
SETV D2 1
COMPAREV D2 0
GOTOCMP 42311 ==; Test 'if'
LOAD D2 0.0003; if() #857 Body Start
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
STORE D2 0.0003; if() #857 Body End
STOREV 2 0.0002
PUSHR D4; if() #858 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 3.1289; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 42321 ==; Test 'if'
SETV D2 1; if() #858 Body Start
STORE D2 0.0002; if() #858 Body End
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0001
STOREV 128 0
LOAD D2 0.0008; if() #859 Test
PUSHR D2
LOAD D2 0.0007
SUBV D2 8
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 42340 ==; Test 'if'
SETV D2 64; if() #859 Body Start
STORE D2 0; if() #859 Body End
LOAD D2 0.0002; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0006
MULTV D2 8
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0005
MULTV D2 24
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0013
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
LOAD D2 0.0006
MULTV D2 16
PUSHR D2
LOAD D2 0.0006
MULTV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0005
MULTV D2 16
PUSHR D2
LOAD D2 0.0005
MULTV D2 24
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 0 0.0003
PUSHV -1
PUSHV 0
PUSHV 1
LOAD D2 0
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0014
RETURNFUNC; Func[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Body End
PUSHV 0; Func[void EZB_FaceAngle(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #456 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 42426 ==; Test 'if'
PUSHR D4; if() #456 Body Start
LOAD D2 0.0001; UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0807; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 42432; if() #456 Body End
PUSHR D4; if() #456 Else Start
LOAD D2 0.0001; UsrFunc[int AngleDir4(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0761; UsrFunc[int AngleDir4(int)] Call
POP D4
SETR GD4 D2; if() #456 Else End
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_FaceAngle(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_FaceDir(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #457 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 42448 ==; Test 'if'
LOAD D2 0.0001; if() #457 Body Start
SETR GD4 D2
GOTO 42472; if() #457 Body End
LOAD D2 0.0001; if() #458 Test AND if() #457 Else Start
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 42456 ==; Test 'if'
LOAD D2 0.0001; if() #458 Body Start
SETR GD4 D2
GOTO 42472; if() #458 Body End
LOAD D2 0.0001; if() #459 Test AND if() #458 Else Start
COMPAREV D2 4
GOTOCMP 42464 ==
LOAD D2 0.0001
COMPAREV D2 6
GOTOCMP 42464 ==
SETV D2 0
GOTO 42465
SETV D2 1
COMPAREV D2 0
GOTOCMP 42470 ==; Test 'if'
SETV D2 2; if() #459 Body Start
SETR GD4 D2
GOTO 42472; if() #459 Body End
SETV D2 3; if() #459 Else Start
SETR GD4 D2; if() #459 Else End
POPARGS D5 0.0005; if() #458 Else End AND if() #457 Else End
RETURNFUNC; Func[void EZB_FaceDir(ffc, npc, int, int)] Body End
SETR D4 SP2; Func[void EZB_FaceDir4(ffc, npc, int, int)] Body Start
LOAD D2 0; if() #460 Test
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 42483 ==; Test 'if'
LOAD D2 0; if() #460 Body Start
SETR GD4 D2
GOTO 42499; if() #460 Body End
LOAD D2 0; if() #461 Test AND if() #460 Else Start
COMPAREV D2 4
GOTOCMP 42491 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 42491 ==
SETV D2 0
GOTO 42492
SETV D2 1
COMPAREV D2 0
GOTOCMP 42497 ==; Test 'if'
SETV D2 2; if() #461 Body Start
SETR GD4 D2
GOTO 42499; if() #461 Body End
SETV D2 3; if() #461 Else Start
SETR GD4 D2; if() #461 Else End
POPARGS D5 0.0004; if() #460 Else End
RETURNFUNC; Func[void EZB_FaceDir4(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_FaceLink(ffc, npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #462 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 42539 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #462 Body Start AND UsrFunc[int AngleDir8(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0002; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0807; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 42565; if() #462 Body End
PUSHARGSR D4 0.0003; if() #462 Else Start AND UsrFunc[int AngleDir4(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0002; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0761; UsrFunc[int AngleDir4(int)] Call
POP D4
SETR GD4 D2; if() #462 Else End
POPARGS D5 0.0004
RETURNFUNC; Func[void EZB_FaceLink(ffc, npc, int)] Body End
PUSHV 0; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0007; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 0; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 4.2591; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0008; return End
RETURNFUNC; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0013; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 4.2719; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0006; if() #861 Test
ANDV D2 128
COMPAREV D2 0
GOTOCMP 42613 ==; Test 'if'
LOAD D2 0.0007; if() #861 Body Start
ORV D2 1
STORE D2 0.0007; if() #861 Body End
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 307
STORE D2 0.0004
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 308
STORE D2 0.0003
LOAD D2 0.0003; if() #862 Test
COMPAREV D2 0
GOTOCMP 42643 !=
LOAD D2 0.0005
COMPAREV D2 132
GOTOCMP 42641 ==
LOAD D2 0.0005
COMPAREV D2 130
GOTOCMP 42641 ==
LOAD D2 0.0005
COMPAREV D2 134
GOTOCMP 42641 ==
LOAD D2 0.0005
COMPAREV D2 137
GOTOCMP 42641 ==
LOAD D2 0.0005
COMPAREV D2 138
GOTOCMP 42643 !=
SETV D2 1
GOTO 42644
SETV D2 0
COMPAREV D2 0
GOTOCMP 42649 ==; Test 'if'
LOAD D2 0.0007; if() #862 Body Start
ORV D2 2
STORE D2 0.0007; if() #862 Body End
LOAD D2 0.0003; if() #463 Test
COMPAREV D2 2000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 42661 ==; Test 'if'
LOAD D2 0.0007; if() #463 Body Start
ORV D2 4
STORE D2 0.0007
LOAD D2 0.0003
SUBV D2 2000
STORE D2 0.0003
GOTO 42672; if() #463 Body End
LOAD D2 0.0003; if() #863 Test AND if() #463 Else Start
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 42672 ==; Test 'if'
LOAD D2 0.0007; if() #863 Body Start
ORV D2 2
STORE D2 0.0007
LOAD D2 0.0003
SUBV D2 1000
STORE D2 0.0003; if() #863 Body End
LOAD D2 0.0004; if() #463 Else End
STORE D2 0.0002
LOAD D2 0.0004; if() #864 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 42681 ==; Test 'if'
SETV D2 -1; if() #864 Body Start
STORE D2 0.0002; if() #864 Body End
LOAD D2 0.0003
STORE D2 0.0001
LOAD D2 0.0003; if() #865 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 42690 ==; Test 'if'
SETV D2 -1; if() #865 Body Start
STORE D2 0.0001; if() #865 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0013
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2441; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0015; return End
RETURNFUNC; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[int EZB_WeaponTypeToID(int)] Body Start
LOAD D2 0; if() #504 Test
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42728 ==; Test 'if'
SETV D2 140; return Start AND if() #504 Body Start
GOTO 42840; return End
GOTO 42839; if() #504 Body End
LOAD D2 0; if() #505 Test AND if() #504 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42736 ==; Test 'if'
SETV D2 141; return Start AND if() #505 Body Start
GOTO 42840; return End
GOTO 42839; if() #505 Body End
LOAD D2 0; if() #506 Test AND if() #505 Else Start
COMPAREV D2 129
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42744 ==; Test 'if'
SETV D2 129; return Start AND if() #506 Body Start
GOTO 42840; return End
GOTO 42839; if() #506 Body End
LOAD D2 0; if() #507 Test AND if() #506 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42752 ==; Test 'if'
SETV D2 130; return Start AND if() #507 Body Start
GOTO 42840; return End
GOTO 42839; if() #507 Body End
LOAD D2 0; if() #508 Test AND if() #507 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42760 ==; Test 'if'
SETV D2 131; return Start AND if() #508 Body Start
GOTO 42840; return End
GOTO 42839; if() #508 Body End
LOAD D2 0; if() #509 Test AND if() #508 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42768 ==; Test 'if'
SETV D2 132; return Start AND if() #509 Body Start
GOTO 42840; return End
GOTO 42839; if() #509 Body End
LOAD D2 0; if() #510 Test AND if() #509 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42776 ==; Test 'if'
SETV D2 133; return Start AND if() #510 Body Start
GOTO 42840; return End
GOTO 42839; if() #510 Body End
LOAD D2 0; if() #511 Test AND if() #510 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42784 ==; Test 'if'
SETV D2 134; return Start AND if() #511 Body Start
GOTO 42840; return End
GOTO 42839; if() #511 Body End
LOAD D2 0; if() #512 Test AND if() #511 Else Start
COMPAREV D2 135
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42792 ==; Test 'if'
SETV D2 135; return Start AND if() #512 Body Start
GOTO 42840; return End
GOTO 42839; if() #512 Body End
LOAD D2 0; if() #513 Test AND if() #512 Else Start
COMPAREV D2 136
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42800 ==; Test 'if'
SETV D2 136; return Start AND if() #513 Body Start
GOTO 42840; return End
GOTO 42839; if() #513 Body End
LOAD D2 0; if() #514 Test AND if() #513 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42808 ==; Test 'if'
SETV D2 137; return Start AND if() #514 Body Start
GOTO 42840; return End
GOTO 42839; if() #514 Body End
LOAD D2 0; if() #515 Test AND if() #514 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42816 ==; Test 'if'
SETV D2 138; return Start AND if() #515 Body Start
GOTO 42840; return End
GOTO 42839; if() #515 Body End
LOAD D2 0; if() #516 Test AND if() #515 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42824 ==; Test 'if'
SETV D2 139; return Start AND if() #516 Body Start
GOTO 42840; return End
GOTO 42839; if() #516 Body End
LOAD D2 0; if() #517 Test AND if() #516 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42832 ==; Test 'if'
SETV D2 142; return Start AND if() #517 Body Start
GOTO 42840; return End
GOTO 42839; if() #517 Body End
LOAD D2 0; if() #931 Test AND if() #517 Else Start
COMPAREV D2 145
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42839 ==; Test 'if'
SETV D2 145; return Start AND if() #931 Body Start
GOTO 42840; return End AND if() #931 Body End
SETV D2 134; if() #517 Else End AND if() #516 Else End AND if() #515 Else End AND if() #514 Else End AND if() #513 Else End AND if() #512 Else End AND if() #511 Else End AND if() #510 Else End AND if() #509 Else End AND if() #508 Else End AND if() #507 Else End AND if() #506 Else End AND if() #505 Else End AND if() #504 Else End AND return Start
POP D5; return End
RETURNFUNC; Func[int EZB_WeaponTypeToID(int)] Body End
PUSHARGSV 0 0.0008; Func[void EZB_FiringAnim(ffc, npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0006
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0005
LOAD D2 0.0006; if() #464 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 42863 ==; Test 'if'
LOAD D2 0.0005; if() #464 Body Start
ADDV D2 8
SETR GD10 D2
GOTO 42874; if() #464 Body End
LOAD D2 0.0006; if() #465 Test AND if() #464 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 42871 ==; Test 'if'
LOAD D2 0.0005; if() #465 Body Start
ADDV D2 4
SETR GD10 D2
GOTO 42874; if() #465 Body End
LOAD D2 0.0005; if() #465 Else Start
ADDV D2 1
SETR GD10 D2; if() #465 Else End
LOAD D2 0.0010; if() #464 Else End
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
STORE D2 0.0004
LOAD D2 0.0010
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
STORE D2 0.0003
LOAD D2 0.0008; if() #466 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42910 ==; Test 'if'
SETV D2 0; for() #237 setup AND if() #466 Body Start
STORE D2 0.0007
LOAD D2 0.0007; for() #237 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 43077 ==; for() #237 TestFail?
PUSHR D4; for() #237 Body Start
LOAD D2 0.0011; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #237 Body End
LOAD D2 0.0007; for() #237 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 42891; for() #237 End
GOTO 43077; if() #466 Body End
LOAD D2 0.0008; if() #467 Test AND if() #466 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 42994 ==; Test 'if'
STOREV 0 0.0001; if() #467 Body Start
STOREV 0 0
SETV D2 0; for() #238 setup
STORE D2 0.0007
LOAD D2 0.0007; for() #238 LoopTest
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 42975 ==; for() #238 TestFail?
PUSHR D4; if(true) #866 [Opt:AlwaysOn] AND for() #238 Body Start
PUSHV -1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV -1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
PUSHR D4
LOAD D2 0.0011; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #238 Body End
LOAD D2 0.0007; for() #238 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 42919; for() #238 End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
GOTO 43077; if() #467 Body End
LOAD D2 0.0008; if() #867 Test AND if() #467 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 43077 ==; Test 'if'
STOREV 0 0.0001; if() #867 Body Start
STOREV 0 0
SETV D2 0; for() #239 setup
STORE D2 0.0007
LOAD D2 0.0007; for() #239 LoopTest
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 43059 ==; for() #239 TestFail?
PUSHR D4; if(true) #868 [Opt:AlwaysOn] AND for() #239 Body Start
PUSHV -2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV -2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
PUSHR D4
LOAD D2 0.0011; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #239 Body End
LOAD D2 0.0007; for() #239 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 43003; for() #239 End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; if() #867 Body End
POPARGS D5 0.0012; if() #467 Else End AND if() #466 Else End
RETURNFUNC; Func[void EZB_FiringAnim(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_Waitframe(ffc, npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #925 Test
ANDV D2 512
COMPAREV D2 0
GOTOCMP 43099 ==; Test 'if'
SETV D2 60; if() #925 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTUN D2; if() #925 Body End
LOAD D2 0; if() #926 Test
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 43112 ==; Test 'if'
SETV D2 0; if() #926 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTUN D2; if() #926 Body End
LOAD D2 0.0001; unless() #927 Test
PUSHR D2
POP D0
READPODARRAYV D2 319
COMPAREV D2 0
GOTOCMP 43190 !=; Test 'unless'
LOAD D2 0.0001; if() #928 Test AND unless() #927 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 316
COMPAREV D2 0
GOTOCMP 43190 ==; Test 'if'
LOAD D2 0.0001; if() #929 Test AND if() #928 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 315
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 316
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 43190 ==; Test 'if'
LOAD D2 0.0001; if() #929 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 315
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
SETR D0 D2
POP D2
WRITEPODARRAYVR 315 D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 317
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 318
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 317
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 315
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 316
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTEP D2; if() #929 Body End
LOAD D2 0.0001; if() #928 Body End AND unless() #927 Body End AND if() #501 Test
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 43226 ==; Test 'if'
PUSHR D4; unless() #930 Test AND if() #501 Body Start
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 0 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 2.9729; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 43246 !=; Test 'unless'
SETV D2 1; unless() #930 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 1
SETR GD14 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
SETR D0 D2
POP D2
WRITEPODARRAYVR 202 D2; unless() #930 Body End
GOTO 43246; if() #501 Body End
LOAD D2 0; if() #502 Test AND if() #501 Else Start
ANDV D2 32
COMPAREV D2 0
GOTOCMP 43239 ==; Test 'if'
PUSHR D4; if(false) #503 [Opt:AlwaysOff] AND if() #502 Body Start
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, int, bool)] Params End
CALLFUNC 2.9966; UsrFunc[bool Ghost_Waitframe(ffc, npc, int, bool)] Call
POP D4
GOTO 43246; if() #502 Body End
PUSHR D4; if() #502 Else Start
LOAD D2 0.0003; UsrFunc[void Ghost_Waitframe(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void Ghost_Waitframe(ffc, npc)] Params End
CALLFUNC 2.9718; UsrFunc[void Ghost_Waitframe(ffc, npc)] Call
POP D4; if() #502 Else End
POPARGS D5 0.0004; if() #501 Else End
RETURNFUNC; Func[void EZB_Waitframe(ffc, npc, int)] Body End
PUSHARGSV 0 0.0010; Func[void EZB_FishWizardUpdate(ffc, npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0009
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0008
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0010; if() #468 Test
PUSHR D2
POP D0
READPODARRAYV D2 7
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 43644 ==; Test 'if'
LOAD D2 0.0010; if() #869 Test AND if() #468 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 0
GOTOCMP 43292 ==; Test 'if'
LOAD D2 0.0010; if() #869 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
SUBV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2; if() #869 Body End
LOAD D2 0.0010; if() #870 Test
PUSHR D2
POP D0
READPODARRAYV D2 11
COMPAREV D2 0
GOTOCMP 43308 ==; Test 'if'
LOAD D2 0.0010; if() #870 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 11
SUBV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 11 D2; if() #870 Body End
PUSHR D4
LOAD D2 0.0010; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params End
CALLFUNC 2.6051; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4; if() #469 Test
LOAD D2 0.0012; UsrFunc[bool EZB_InSight(npc)] Params Start
PUSHR D2; UsrFunc[bool EZB_InSight(npc)] Params End
CALLFUNC 4.3802; UsrFunc[bool EZB_InSight(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 43352 ==
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 0
GOTOCMP 43352 !=
SETV D2 1
GOTO 43353
SETV D2 0
COMPAREV D2 0
GOTOCMP 43372 ==; Test 'if'
LOAD D2 0.0012; if() #469 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
GOTO 43800; if() #469 Body End
PUSHR D4; if() #871 Test AND if() #469 Else Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 90; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
COMPAREV D2 1
GOTOCMP 43387 !=
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 0
GOTOCMP 43387 !=
SETV D2 1
GOTO 43388
SETV D2 0
COMPAREV D2 0
GOTOCMP 43800 ==; Test 'if'
STOREV 0 0.0007; if() #871 Body Start
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_TILE_W
LOAD D2 0.0012
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_TILE_H; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
STORE D2 0.0002
STOREV 0 0.0001
SETV D2 0; for() #240 setup
STORE D2 0.0009
LOAD D2 0.0009; for() #240 LoopTest
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 43483 ==; for() #240 TestFail?
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start AND for() #240 Body Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0007
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0006
LOAD D2 0.0002
MULTV D2 16
PUSHR D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
MULTV D2 16
SETV D2 16
PUSHR D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0005
SETR D2 GD1
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
PUSHR D4; if() #872 Test
LOAD D2 0.0013; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 4.0785; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 43479 ==; Test 'if'
SETV D2 1; if() #872 Body Start
STORE D2 0.0001
GOTO 43483; break 1; AND if() #872 Body End
LOAD D2 0.0009; for() #240 Body End AND for() #240 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 43409; for() #240 End
LOAD D2 0.0001; if() #873 Test
COMPAREV D2 0
GOTOCMP 43800 ==; Test 'if'
LOAD D2 0.0008; if() #470 Test AND if() #873 Body Start
ANDV D2 2
COMPAREV D2 0
GOTOCMP 43503 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #470 Body Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0807; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 43517; if() #470 Body End
LOAD D2 0.0008; if() #874 Test AND if() #470 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 43517 ==; Test 'if'
LOAD D2 0.0007; if() #471 Test AND if() #874 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 43515 ==; Test 'if'
SETV D2 2; if() #471 Body Start
SETR GD4 D2
GOTO 43517; if() #471 Body End
SETV D2 3; if() #471 Else Start
SETR GD4 D2; if() #471 Else End
PUSHR D4; if() #874 Body End AND if() #470 Else End
PUSHV 0; UsrFunc[int Clamp(int, int, int)] Params Start
LOAD D2 0.0012; InlineFunc[int Floor(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #875 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 43537 ==; Test 'if'
SETV D2 0.5000; if() #875 Body Start
STORE D2 0; if() #875 Body End
SETV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
DIVR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 309
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 8 D2
PUSHR D4; unless() #876 Test
PUSHV 7168; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 43593 !=; Test 'unless'
SETV D2 7168; unless() #876 Body Start
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 8 D2; unless() #876 Body End
PUSHR D4; unless() #877 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 43605 !=; Test 'unless'
SETV D2 65536; unless() #877 Body Start
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 9 D2; unless() #877 Body End
PUSHR D4; if() #878 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.4468; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 43617 ==; Test 'if'
SETV D2 1; if() #878 Body Start
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 12 D2; if() #878 Body End
PUSHR D4
PUSHV 7168; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 65537; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 1; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 10 D2
LOAD D2 0.0012
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 11 D2; if() #873 Body End
GOTO 43800; if() #871 Body End AND if() #469 Else End AND if() #468 Body End
LOAD D2 0.0010; if() #879 Test AND if() #468 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 7
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 43800 ==; Test 'if'
PUSHR D4; if() #879 Body Start
LOAD D2 0.0010; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 10
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 10
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.6787; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0010; if() #472 Test
PUSHR D2
POP D0
READPODARRAYV D2 6
MODV D2 4
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 43699 ==; Test 'if'
SETV D2 -1000; if() #472 Body Start
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
GOTO 43708; if() #472 Body End
SETV D2 -2; if() #472 Else Start
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; if() #472 Else End
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 6
SUBV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0.0010; if() #880 Test
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 43800 ==; Test 'if'
SETV D2 -2; if() #880 Body Start
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
LOAD D2 0.0010; if() #473 Test
PUSHR D2
POP D0
READPODARRAYV D2 4
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 43746 ==; Test 'if'
SETV D2 2; if() #473 Body Start
SETR GD4 D2
GOTO 43748; if() #473 Body End
SETV D2 3; if() #473 Else Start
SETR GD4 D2; if() #473 Else End
LOAD D2 0.0010; if() #881 Test
PUSHR D2
POP D0
READPODARRAYV D2 8
COMPAREV D2 0
GOTOCMP 43758 ==; Test 'if'
PUSHR D4; if() #881 Body Start
PUSHV 7168; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; if() #881 Body End
LOAD D2 0.0010; if() #882 Test
PUSHR D2
POP D0
READPODARRAYV D2 9
COMPAREV D2 0
GOTOCMP 43768 ==; Test 'if'
PUSHR D4; if() #882 Body Start
PUSHV 65537; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.6760; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; if() #882 Body End
LOAD D2 0.0010; if() #883 Test
PUSHR D2
POP D0
READPODARRAYV D2 12
COMPAREV D2 0
GOTOCMP 43778 ==; Test 'if'
PUSHR D4; if() #883 Body Start
PUSHV 1; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.6402; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #883 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0013; UsrFunc[void EZB_FaceDir4(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir4(ffc, npc, int, int)] Params End
CALLFUNC 4.2474; UsrFunc[void EZB_FaceDir4(ffc, npc, int, int)] Call
POP D4; if() #880 Body End
POPARGS D5 0.0014; if() #879 Body End AND if() #468 Else End
RETURNFUNC; Func[void EZB_FishWizardUpdate(ffc, npc, int, int)] Body End
PUSHARGSV 0 0.0006; Func[bool EZB_InSight(npc)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.1755; UsrFunc[int CenterX(npc)] Call
POP D4
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0006; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.1824; UsrFunc[int CenterY(npc)] Call
POP D4
STORE D2 0.0004
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
STORE D2 0.0003
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
STORE D2 0.0002
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
ADDV D2 8
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
ADDV D2 8
STORE D2 0
SETR D2 GD4; if() #479 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 43866 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #479 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
GOTOCMP 43863 >=
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
GOTOCMP 43863 >=
SETV D2 1
GOTO 43950
SETV D2 0
GOTO 43950; return End
GOTO 43949; if() #479 Body End
SETR D2 GD4; if() #480 Test AND if() #479 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 43894 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #480 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
GOTOCMP 43891 >=
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
GOTOCMP 43891 <=
SETV D2 1
GOTO 43950
SETV D2 0
GOTO 43950; return End
GOTO 43949; if() #480 Body End
SETR D2 GD4; if() #481 Test AND if() #480 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 43922 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #481 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
GOTOCMP 43919 >=
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
GOTOCMP 43919 >=
SETV D2 1
GOTO 43950
SETV D2 0
GOTO 43950; return End
GOTO 43949; if() #481 Body End
SETR D2 GD4; if() #903 Test AND if() #481 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 43949 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #903 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
GOTOCMP 43947 >=
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
GOTOCMP 43947 <=
SETV D2 1
GOTO 43950
SETV D2 0
GOTO 43950; return End AND if() #903 Body End
SETV D2 0; if() #481 Else End AND if() #480 Else End AND if() #479 Else End AND return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool EZB_InSight(npc)] Body End
PUSHARGSV 0 0.0013; Func[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0012
STOREV 0 0.0011
LOAD D2 0.0018
PUSHR D2
POP D0
READPODARRAYV D2 305
STORE D2 0.0010
SETV D2 0
PUSHR D2
LOAD D2 0.0014
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
ALLOCATEMEMV D2 20 0
WRITEPODSTRING D2 "EZBoss_ExtraAttacks"
STORE D2 0.0008
LOAD D2 0.0008; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0007
ALLOCATEMEMV D2 24 0
WRITEPODSTRING D2 "EZBoss_ChangeLaserColor"
STORE D2 0.0005
LOAD D2 0.0005; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0004
ALLOCATEMEMV D2 28 0
WRITEPODSTRING D2 "EZBoss_ExtraTransformations"
STORE D2 0.0002
LOAD D2 0.0002; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2
LOAD D2 0.0017; if() #884 Test
COMPAREV D2 50
GOTOCMP 44002 ==
LOAD D2 0.0017
COMPAREV D2 51
GOTOCMP 44002 ==
LOAD D2 0.0017
COMPAREV D2 71
GOTOCMP 44002 ==
SETV D2 0
GOTO 44003
SETV D2 1
COMPAREV D2 0
GOTOCMP 44053 ==; Test 'if'
PUSHR D4; if() #884 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params End
CALLFUNC 3.9655; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2
LOAD D2 0.0017; if() #474 Test
COMPAREV D2 51
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 44036 ==; Test 'if'
SETV D2 2; if() #474 Body Start
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2
GOTO 44047; if() #474 Body End
LOAD D2 0.0017; if() #885 Test AND if() #474 Else Start
COMPAREV D2 71
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 44047 ==; Test 'if'
SETV D2 3; if() #885 Body Start
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2; if() #885 Body End
LOAD D2 0.0016; if() #474 Else End
STORE D2 0.0017
LOAD D2 0.0015
STORE D2 0.0016
SETV D2 0
STORE D2 0.0015; if() #884 Body End
LOAD D2 0.0017; if() #886 Test
COMPAREV D2 0
GOTOCMP 44069 ==; Test 'if'
PUSHR D4; if() #886 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0017
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.9500; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #886 Body End
LOAD D2 0.0016; if() #887 Test
COMPAREV D2 0
GOTOCMP 44085 ==; Test 'if'
PUSHR D4; if() #887 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.9500; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #887 Body End
LOAD D2 0.0015; if() #888 Test
COMPAREV D2 0
GOTOCMP 44101 ==; Test 'if'
PUSHR D4; if() #888 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.9500; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #888 Body End
SETV D2 1; for() #241 setup
STORE D2 0.0012
LOAD D2 0.0012; for() #241 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 44451 ==; for() #241 TestFail?
LOAD D2 0.0012; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #241 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #475 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 44175 ==; Test 'if'
LOAD D2 0; if() #889 Test AND if() #475 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0019
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 44447 ==; Test 'if'
SETV D2 1; for() #242 setup AND if() #889 Body Start
STORE D2 0.0011
LOAD D2 0.0011; for() #242 LoopTest
COMPAREV D2 7
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 44447 ==; for() #242 TestFail?
LOAD D2 0; if() #890 Test AND for() #242 Body Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 44170 ==; Test 'if'
PUSHR D4; if() #890 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
PUSHR FFINITDD
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.9500; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #890 Body End
LOAD D2 0.0011; for() #242 Body End AND for() #242 LoopIncrement
ADDV D2 1
STORE D2 0.0011
GOTO 44138; for() #242 End
GOTO 44447; if() #889 Body End AND if() #475 Body End
LOAD D2 0; if() #476 Test AND if() #475 Else Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 44337 ==; Test 'if'
LOAD D2 0; if() #891 Test AND if() #476 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0019
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 44447 ==; Test 'if'
LOAD D2 0; if() #892 Test AND if() #891 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 44229 !=
LOAD D2 0
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 44229 !=
LOAD D2 0
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 44229 !=
SETV D2 0
GOTO 44230
SETV D2 1
COMPAREV D2 0
GOTOCMP 44268 ==; Test 'if'
LOAD D2 0; if() #892 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #892 Body End
LOAD D2 0; if() #893 Test
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 44297 !=
LOAD D2 0
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 44297 !=
LOAD D2 0
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 44297 !=
SETV D2 0
GOTO 44298
SETV D2 1
COMPAREV D2 0
GOTOCMP 44447 ==; Test 'if'
LOAD D2 0; if() #893 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
LOAD D2 0
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2; if() #893 Body End
GOTO 44447; if() #891 Body End AND if() #476 Body End
LOAD D2 0; if() #894 Test AND if() #476 Else Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 44447 ==; Test 'if'
LOAD D2 0; if() #895 Test AND if() #894 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0019
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 44447 ==; Test 'if'
LOAD D2 0; if() #896 Test AND if() #895 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 44386 ==; Test 'if'
LOAD D2 0; if() #896 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
SUBV D2 1
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2; if() #896 Body End
LOAD D2 0; if() #897 Test
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 44409 ==; Test 'if'
LOAD D2 0; if() #897 Body Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 314 D2; if() #897 Body End
SETV D2 3; for() #243 setup
STORE D2 0.0011
LOAD D2 0.0011; for() #243 LoopTest
COMPAREV D2 7
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 44447 ==; for() #243 TestFail?
LOAD D2 0; if() #898 Test AND for() #243 Body Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 44443 ==; Test 'if'
PUSHR D4; if() #898 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
PUSHR FFINITDD
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params End
CALLFUNC 3.9655; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Call
POP D4; if() #898 Body End
LOAD D2 0.0011; for() #243 Body End AND for() #243 LoopIncrement
ADDV D2 1
STORE D2 0.0011
GOTO 44411; for() #243 End
LOAD D2 0.0012; if() #895 Body End AND if() #894 Body End AND if() #476 Else End AND if() #475 Else End AND for() #241 Body End AND for() #241 LoopIncrement
ADDV D2 1
STORE D2 0.0012
GOTO 44103; for() #241 End
LOAD D2 0.0014; if() #899 Test
PUSHR D2
POP D0
READPODARRAYV D2 100
COMPAREV D2 0
GOTOCMP 44465 ==
LOAD D2 0.0018
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 0
GOTOCMP 44465 !=
SETV D2 1
GOTO 44466
SETV D2 0
COMPAREV D2 0
GOTOCMP 44474 ==; Test 'if'
SETV D2 2; if() #899 Body Start
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2; if() #899 Body End
LOAD D2 0.0014; if() #900 Test
PUSHR D2
POP D0
READPODARRAYV D2 100
COMPAREV D2 0
GOTOCMP 44499 ==; Test 'if'
PUSHR D4; if() #900 Body Start
LOAD D2 0.0020; UsrFunc[void EZB_Barriershift_Store(npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0014; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 100
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
ADDV D2 101
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0018
PUSHR D2; UsrFunc[void EZB_Barriershift_Store(npc, int, int)] Params End
CALLFUNC 4.0078; UsrFunc[void EZB_Barriershift_Store(npc, int, int)] Call
POP D4; if() #900 Body End
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0022
RETURNFUNC; Func[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_InitVars(int)] Body Start
SETV D2 0
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2
SETV D2 0
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 314 D2
SETV D2 0
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
POP D5
RETURNFUNC; Func[void EZB_InitVars(int)] Body End
PUSHARGSV 0 0.0017; Func[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0024; InlineFunc[int Sqrt(int)] Params Start
PUSHR D2
LOAD D2 0.0024
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0023
PUSHR D2
LOAD D2 0.0023
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3; InlineFunc[int Sqrt(int)] Params End
SQROOTR D2 D2; InlineFunc[int Sqrt(int)] Body
STORE D2 0.0016
LOAD D2 0.0019; InlineFunc[int Sqrt(int)] Params Start
PUSHR D2
LOAD D2 0.0019
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0018
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3; InlineFunc[int Sqrt(int)] Params End
SQROOTR D2 D2; InlineFunc[int Sqrt(int)] Body
STORE D2 0.0015
LOAD D2 0.0024; InlineFunc[int ArcSin(int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start
PUSHR D2
LOAD D2 0.0016
POP D3
DIVR D3 D2; InlineFunc[int ArcSin(int)] Params End
ARCSINR D2 D3; InlineFunc[int ArcSin(int)] Body
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0014
LOAD D2 0.0019; InlineFunc[int ArcSin(int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start
PUSHR D2
LOAD D2 0.0015
POP D3
DIVR D3 D2; InlineFunc[int ArcSin(int)] Params End
ARCSINR D2 D3; InlineFunc[int ArcSin(int)] Body
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0013
ALLOCATEMEMV D2 4 0
STORE D2 0.0012
ALLOCATEMEMV D2 4 0
STORE D2 0.0011
ALLOCATEMEMV D2 4 0
STORE D2 0.0010
ALLOCATEMEMV D2 4 0
STORE D2 0.0009
ALLOCATEMEMV D2 4 0
STORE D2 0.0008
ALLOCATEMEMV D2 4 0
STORE D2 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
STOREV 0 0.0001; for() #245 setup
LOAD D2 0.0001; for() #245 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 45276 ==; for() #245 TestFail?
LOAD D2 0.0012; for() #245 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006
STORE D2 0.0005
LOAD D2 0.0006
STORE D2 0.0004
STOREV 1 0; for() #246 setup
LOAD D2 0; for() #246 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 45149 ==; for() #246 TestFail?
LOAD D2 0.0012; for() #246 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006; if() #906 Test
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 45135 ==; Test 'if'
LOAD D2 0.0006; if() #906 Body Start
STORE D2 0.0005; if() #906 Body End
LOAD D2 0.0006; if() #907 Test
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 45145 ==; Test 'if'
LOAD D2 0.0006; if() #907 Body Start
STORE D2 0.0004; if() #907 Body End
LOAD D2 0; for() #246 Body End AND for() #246 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 45090; for() #246 End
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006
STORE D2 0.0003
LOAD D2 0.0006
STORE D2 0.0002
STOREV 1 0; for() #247 setup
LOAD D2 0; for() #247 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 45241 ==; for() #247 TestFail?
LOAD D2 0.0010; for() #247 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006; if() #908 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 45227 ==; Test 'if'
LOAD D2 0.0006; if() #908 Body Start
STORE D2 0.0003; if() #908 Body End
LOAD D2 0.0006; if() #909 Test
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 45237 ==; Test 'if'
LOAD D2 0.0006; if() #909 Body Start
STORE D2 0.0002; if() #909 Body End
LOAD D2 0; for() #247 Body End AND for() #247 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 45182; for() #247 End
LOAD D2 0.0002; if() #910 Test
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
GOTOCMP 45255 <
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 45255 <
SETV D2 0
GOTO 45256
SETV D2 1
COMPAREV D2 0
GOTOCMP 45272 ==; Test 'if'
SETV D2 0; return Start AND if() #910 Body Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D3 0.0011
DEALLOCATEMEMR D3
LOAD D3 0.0012
DEALLOCATEMEMR D3
GOTO 45302; return End AND if() #910 Body End
LOAD D2 0.0001; for() #245 Body End AND for() #245 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 45052; for() #245 End
SETV D2 1; return Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D3 0.0011
DEALLOCATEMEMR D3
LOAD D3 0.0012
DEALLOCATEMEMR D3
GOTO 45302; return End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D3 0.0011
DEALLOCATEMEMR D3
LOAD D3 0.0012
DEALLOCATEMEMR D3
POPARGS D5 0.0027
RETURNFUNC; Func[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[int EZB_NumSummons(npc)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0; for() #244 setup
LOAD D2 0; for() #244 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 45328 ==; for() #244 TestFail?
LOAD D2 0.0002; InlineFunc[bool npc::isValid()] Params Start AND if() #905 Test AND for() #244 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2; InlineFunc[bool npc::isValid()] Params End
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 45324 ==; Test 'if'
LOAD D2 0.0001; if() #905 Body Start
ADDV D2 1
STORE D2 0.0001; if() #905 Body End
LOAD D2 0; for() #244 Body End AND for() #244 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 45308; for() #244 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int EZB_NumSummons(npc)] Body End
PUSHARGSV 0 0.0005; Func[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 15 0
WRITEPODSTRING D2 "EZBoss_Effects"
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0002
LOAD D2 0.0002; if() #482 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 45391 ==; Test 'if'
ALLOCATEMEMV D2 8 0; if() #482 Body Start
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0012
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0011
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0010
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D0
LOAD D2 0.0009
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
LOAD D2 0.0008
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
LOAD D2 0.0007
POP D0
WRITEPODARRAYVR 5 D2
PUSHR D0
LOAD D2 0.0006
POP D0
WRITEPODARRAYVR 6 D2
PUSHR D0
LOAD D2 0.0005
POP D0
WRITEPODARRAYVR 7 D2
POP D2
STORE D2 0
PUSHR D4
LOAD D2 0.0002; UsrFunc[int RunFFCScript(int, untyped[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int RunFFCScript(int, untyped[])] Params End
CALLFUNC 3.1165; UsrFunc[int RunFFCScript(int, untyped[])] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 45400; if() #482 Body End
ALLOCATEMEMV D2 73 0; if() #482 Else Start
WRITEPODSTRING D2 "ERROR: EZBoss_Effects script wasn't found. Did you forget to assign it?\n"
STORE D2 0
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3; if() #482 Else End
LOAD D3 0.0003
DEALLOCATEMEMR D3
POPARGS D5 0.0013
RETURNFUNC; Func[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_SetEWeaponDeathEffect(eweapon)] Body Start
LOAD D2 0; if() #483 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 140
GOTOCMP 45419 ==
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 142
GOTOCMP 45419 ==
SETV D2 0
GOTO 45420
SETV D2 1
COMPAREV D2 0
GOTOCMP 45430 ==; Test 'if'
PUSHR D4; if() #483 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 12
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 45523; if() #483 Body End
LOAD D2 0; if() #484 Test AND if() #483 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 45446 ==; Test 'if'
PUSHR D4; if() #484 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 14
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 45523; if() #484 Body End
LOAD D2 0; if() #485 Test AND if() #484 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 45465 ==; Test 'if'
PUSHR D4; if() #485 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 3
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 45523; if() #485 Body End
LOAD D2 0; if() #486 Test AND if() #485 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 45484 ==; Test 'if'
PUSHR D4; if() #486 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 4
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 45523; if() #486 Body End
LOAD D2 0; if() #487 Test AND if() #486 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 45500 ==; Test 'if'
PUSHR D4; if() #487 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 5
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 45523; if() #487 Body End
LOAD D2 0; if() #488 Test AND if() #487 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 45516 ==; Test 'if'
PUSHR D4; if() #488 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 16; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 45523; if() #488 Body End
PUSHR D4; if() #488 Else Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4; if() #488 Else End
POP D5; if() #487 Else End AND if() #486 Else End AND if() #485 Else End AND if() #484 Else End AND if() #483 Else End
RETURNFUNC; Func[void EZB_SetEWeaponDeathEffect(eweapon)] Body End
SETR D4 SP2; Func[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Body Start
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0007
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 2
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 3
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 4
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 5
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 6
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 7
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
POPARGS D5 0.0010
RETURNFUNC; Func[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4; if() #489 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 3.1289; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 45664 ==
LOAD D2 0.0011
COMPAREV D2 2
GOTOCMP 45664 !=
SETV D2 1
GOTO 45665
SETV D2 0
COMPAREV D2 0
GOTOCMP 45670 ==; Test 'if'
SETV D2 1; if() #489 Body Start
STORE D2 0.0011
GOTO 45687; if() #489 Body End
PUSHR D4; if() #911 Test AND if() #489 Else Start
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 5; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 3.1289; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 45682 ==
LOAD D2 0.0011
COMPAREV D2 3
GOTOCMP 45682 !=
SETV D2 1
GOTO 45683
SETV D2 0
COMPAREV D2 0
GOTOCMP 45687 ==; Test 'if'
SETV D2 4; if() #911 Body Start
STORE D2 0.0011; if() #911 Body End
LOAD D2 0.0004; if() #489 Else End AND InlineFunc[int Choose(int)] Params Start
PUSHVARGR D2
LOAD D2 0.0003
PUSHVARGR D2
LOAD D2 0.0002
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0001
STOREV 0 0; for() #248 setup
LOAD D2 0; for() #248 LoopTest
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 45754 ==; for() #248 TestFail?
LOAD D2 0.0008; if() #912 Test AND for() #248 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 45727 <=
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
GOTOCMP 45727 >=
SETV D2 1
GOTO 45728
SETV D2 0
COMPAREV D2 0
GOTOCMP 45750 ==; Test 'if'
LOAD D2 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #912 Body Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0004
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #912 Body End
LOAD D2 0; for() #248 Body End AND for() #248 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 45696; for() #248 End
LOAD D2 0.0008; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0007
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #913 Test
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 45787 ==; Test 'if'
PUSHR D4; if() #913 Body Start
LOAD D2 0.0005; UsrFunc[void EZB_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZB_DamageLink(int)] Params End
CALLFUNC 4.1013; UsrFunc[void EZB_DamageLink(int)] Call
POP D4; if() #913 Body End
POPARGS D5 0.0012
RETURNFUNC; Func[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_Teleport(ffc, npc, int)] Body Start
PUSHR D4
LOAD D2 0.0002; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV -1000 0.0002
PUSHV 16; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 4.5803; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4
POPARGS D5 0.0003
RETURNFUNC; Func[void EZB_Teleport(ffc, npc, int)] Body End
PUSHARGSV 0 0.0008; Func[void EZB_Teleport(ffc, npc, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 306
STORE D2 0.0007
LOAD D2 0.0007
ANDV D2 15
STORE D2 0.0006
LOAD D2 0.0007
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0005
LOAD D2 0.0005; if() #914 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 45824 ==; Test 'if'
LOAD D2 0.0006; if() #914 Body Start
STORE D2 0.0005; if() #914 Body End
PUSHR D4
LOAD D2 0.0006; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0005; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.1859; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0005
SETV D2 32; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
STOREV 0 0.0004
SETV D2 0
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
SETV D2 -1000
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
SETR D2 GD10
STORE D2 0.0003
STOREV 0 0.0002; for() #249 setup
LOAD D2 0.0002; for() #249 LoopTest
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 45902 ==; for() #249 TestFail?
PUSHR D4; if(true) #490 [Opt:AlwaysOn] AND for() #249 Body Start
LOAD D2 0.0013; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
PUSHR GD1
SETR D2 GD2
SUBV D2 2
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0008
PUSHR D2; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2279; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0013; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #249 Body End
LOAD D2 0.0002; for() #249 LoopIncrement
ADDV D2 1
STORE D2 0.0002
GOTO 45865; for() #249 End
SETV D2 -1000
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
SETV D3 176; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0004
STOREV 0 0.0002; for() #250 setup
LOAD D2 0.0002; for() #250 LoopTest
COMPAREV D2 352
GOTOCMP 45992 >=
PUSHR D4
LOAD D2 0.0013; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0639; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0682; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 4.0785; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 45990 ==
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0004; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0639; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0682; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
CALLFUNC 2.1695; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.1702; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
DIVV D2 2
MULTV D2 8
ADDV D2 32
POP D3
COMPARER D3 D2
GOTOCMP 45992 >=
SETV D2 1
GOTO 45993
SETV D2 0
COMPAREV D2 0
GOTOCMP 46011 ==; for() #250 TestFail?
LOAD D2 0.0002; if() #491 Test AND for() #250 Body Start
COMPAREV D2 176
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 46004 ==; Test 'if'
LOAD D2 0.0002; if() #491 Body Start
SUBV D2 176
STORE D2 0.0004
GOTO 46007; if() #491 Body End
SETV D3 176; InlineFunc[int Rand(int)] Params AND if() #491 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0004; if() #491 Else End
LOAD D2 0.0002; for() #250 Body End AND for() #250 LoopIncrement
ADDV D2 1
STORE D2 0.0002
GOTO 45915; for() #250 End
PUSHR D4
LOAD D2 0.0004; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0639; UsrFunc[int ComboX(int)] Call
POP D4
SETR GD1 D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0682; UsrFunc[int ComboY(int)] Call
POP D4
SETR GD2 D2
LOAD D2 0.0010; if() #915 Test
COMPAREV D2 -1000
GOTOCMP 46031 <=
LOAD D2 0.0009
COMPAREV D2 -1000
GOTOCMP 46031 <=
SETV D2 1
GOTO 46032
SETV D2 0
COMPAREV D2 0
GOTOCMP 46038 ==; Test 'if'
LOAD D2 0.0010; if() #915 Body Start
SETR GD1 D2
LOAD D2 0.0009
SETR GD2 D2; if() #915 Body End
PUSHR D4
LOAD D2 0.0013; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0013; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 4.2501; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
STOREV 0 0.0002; for() #251 setup
LOAD D2 0.0002; for() #251 LoopTest
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 46097 ==; for() #251 TestFail?
PUSHR D4; if(true) #492 [Opt:AlwaysOn] AND for() #251 Body Start
LOAD D2 0.0013; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
PUSHR GD1
SETR D2 GD2
SUBV D2 2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0008
PUSHR D2; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 4.2279; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0013; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #251 Body End
LOAD D2 0.0002; for() #251 LoopIncrement
ADDV D2 1
STORE D2 0.0002
GOTO 46056; for() #251 End
SETV D2 -2
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
LOAD D2 0.0003
SETR GD10 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
POPARGS D5 0.0014
RETURNFUNC; Func[void EZB_Teleport(ffc, npc, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[void EZB_Trail(ffc, npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0002
SETR D3 GD10; InlineFunc[int Game::ComboTile(int)] Params
COMBOTILE D2 D3; InlineFunc[int Game::ComboTile(int)] Body
STORE D2 0.0001
LOAD D2 0.0002; if() #917 Test
ANDV D2 1
COMPAREV D2 0
GOTOCMP 46140 !=
LOAD D2 0.0002
ANDV D2 2
COMPAREV D2 0
GOTOCMP 46140 !=
SETV D2 0
GOTO 46141
SETV D2 1
COMPAREV D2 0
GOTOCMP 46151 ==; Test 'if'
SETR D2 GD10; InlineFunc[int Game::ComboTile(int)] Params Start AND if() #917 Body Start
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Game::ComboTile(int)] Params End
COMBOTILE D2 D3; InlineFunc[int Game::ComboTile(int)] Body
STORE D2 0.0001; if() #917 Body End
PUSHR D4
PUSHV 40; UsrFunc[lweapon CreateLWeaponAt(int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[lweapon CreateLWeaponAt(int, int, int)] Params End
CALLFUNC 2.1952; UsrFunc[lweapon CreateLWeaponAt(int, int, int)] Call
POP D4
STORE D2 0
SETV D2 3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNOTILE D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DRAW_STYLE D2
SETV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNDEAD D2
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_Trail(ffc, npc, int)] Body End
SETR D4 SP2; Func[int EZB_TurnDir4(int, bool)] Body Start
LOAD D2 0; if() #493 Test
COMPAREV D2 0
GOTOCMP 46309 ==; Test 'if'
LOAD D2 0.0001; if() #494 Test AND if() #493 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 46284 ==; Test 'if'
SETV D2 2; return Start AND if() #494 Body Start
GOTO 46341; return End
GOTO 46307; if() #494 Body End
LOAD D2 0.0001; if() #495 Test AND if() #494 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 46292 ==; Test 'if'
SETV D2 3; return Start AND if() #495 Body Start
GOTO 46341; return End
GOTO 46307; if() #495 Body End
LOAD D2 0.0001; if() #496 Test AND if() #495 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 46300 ==; Test 'if'
SETV D2 1; return Start AND if() #496 Body Start
GOTO 46341; return End
GOTO 46307; if() #496 Body End
LOAD D2 0.0001; if() #918 Test AND if() #496 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 46307 ==; Test 'if'
SETV D2 0; return Start AND if() #918 Body Start
GOTO 46341; return End AND if() #918 Body End
SETV D2 0; if() #496 Else End AND if() #495 Else End AND if() #494 Else End AND return Start
GOTO 46341; return End AND if() #493 Body End
LOAD D2 0.0001; if() #497 Test AND if() #493 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 46317 ==; Test 'if'
SETV D2 3; return Start AND if() #497 Body Start
GOTO 46341; return End
GOTO 46340; if() #497 Body End
LOAD D2 0.0001; if() #498 Test AND if() #497 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 46325 ==; Test 'if'
SETV D2 2; return Start AND if() #498 Body Start
GOTO 46341; return End
GOTO 46340; if() #498 Body End
LOAD D2 0.0001; if() #499 Test AND if() #498 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 46333 ==; Test 'if'
SETV D2 0; return Start AND if() #499 Body Start
GOTO 46341; return End
GOTO 46340; if() #499 Body End
LOAD D2 0.0001; if() #919 Test AND if() #499 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 46340 ==; Test 'if'
SETV D2 1; return Start AND if() #919 Body Start
GOTO 46341; return End AND if() #919 Body End
SETV D2 0; if() #499 Else End AND if() #498 Else End AND if() #497 Else End AND return Start
POPARGS D5 0.0002; return End AND if() #493 Else End
RETURNFUNC; Func[int EZB_TurnDir4(int, bool)] Body End
SETR D4 SP2; Func[int EZB_TurnToAngle(int, int, int)] Body Start
PUSHR D4; InlineFunc[int Abs(int)] Params Start AND if() #920 Test
LOAD D2 0.0002; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.9686; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 46361 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #920 Body Start
GOTO 46380; return End AND if() #920 Body End
LOAD D2 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND return Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
LOAD D2 0.0002; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.9686; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.1920; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int EZB_TurnToAngle(int, int, int)] Body End
PUSHV 0; Func[void EZB_UpdateLaserArray(int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #252 setup
LOAD D2 0; for() #252 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 46744 ==; for() #252 TestFail?
LOAD D2 0.0003; if() #921 Test AND for() #252 Body Start
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 46740 ==; Test 'if'
LOAD D2 0.0003; if() #500 Test AND if() #921 Body Start
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 46569 ==; Test 'if'
PUSHR D4; if() #500 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 2
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 0
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 4
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
ADDV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003; if() #922 Test
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 4
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 46740 ==; Test 'if'
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params AND if() #922 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; if() #922 Body End
GOTO 46740; if() #500 Body End
LOAD D2 0.0003; if() #923 Test AND if() #500 Else Start
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 46740 ==; Test 'if'
PUSHR D4; if() #923 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 2
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 8
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 5
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.1219; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
ADDV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003; if() #924 Test
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 5
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 46740 ==; Test 'if'
SETV D2 0; if() #924 Body Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; if() #924 Body End
LOAD D2 0; if() #923 Body End AND if() #500 Else End AND if() #921 Body End AND for() #252 Body End AND for() #252 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 46385; for() #252 End
POPARGS D5 0.0004
RETURNFUNC; Func[void EZB_UpdateLaserArray(int, int, int)] Body End
PUSHV 0; Func[void EZB_Waitframes(ffc, npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #253 setup
LOAD D2 0; for() #253 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 46770 ==; for() #253 TestFail?
PUSHR D4; for() #253 Body Start
LOAD D2 0.0004; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 4.3079; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #253 Body End
LOAD D2 0; for() #253 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 46749; for() #253 End
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_Waitframes(ffc, npc, int, int)] Body End
PUSHARGSV 0 0.0003; Func[bool EZBE_CanWalk(int, int, int, int, bool)] Body Start
SETR D4 SP2
STOREV 8 0.0002
LOAD D2 0.0007
ADDV D2 15
STORE D2 0.0001
LOAD D2 0.0006
ADDV D2 15
STORE D2 0
LOAD D2 0.0003; if() #1189 Test
COMPAREV D2 0
GOTOCMP 46786 ==; Test 'if'
SETV D2 0; if() #1189 Body Start
STORE D2 0.0002; if() #1189 Body End
LOAD D2 0.0005; if() #612 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 46858 ==; Test 'if'
LOAD D2 0.0006; return Start AND if() #612 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 46853 <
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 4.7054; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 46853 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 4.7054; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 46853 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 4.7054; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 46853 !=
SETV D2 0
GOTO 46854
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 47052; return End
GOTO 47051; if() #612 Body End
LOAD D2 0.0005; if() #613 Test AND if() #612 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 46917 ==; Test 'if'
LOAD D2 0; return Start AND if() #613 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
COMPAREV D2 176
GOTOCMP 46912 >=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 4.7054; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 46912 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 4.7054; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 46912 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 4.7054; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 46912 !=
SETV D2 0
GOTO 46913
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 47052; return End
GOTO 47051; if() #613 Body End
LOAD D2 0.0005; if() #614 Test AND if() #613 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 46985 ==; Test 'if'
LOAD D2 0.0007; return Start AND if() #614 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 46980 <
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 4.7054; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 46980 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
ADDV D2 7
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 4.7054; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 46980 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 4.7054; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 46980 !=
SETV D2 0
GOTO 46981
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 47052; return End
GOTO 47051; if() #614 Body End
LOAD D2 0.0005; if() #1190 Test AND if() #614 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 47051 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #1190 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
COMPAREV D2 256
GOTOCMP 47047 >=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 4.7054; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 47047 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
ADDV D2 7
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 4.7054; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 47047 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 4.7054; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 47047 !=
SETV D2 0
GOTO 47048
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 47052; return End AND if() #1190 Body End
SETV D2 0; if() #614 Else End AND if() #613 Else End AND if() #612 Else End AND return Start
POPARGS D5 0.0008; return End
RETURNFUNC; Func[bool EZBE_CanWalk(int, int, int, int, bool)] Body End
PUSHV 0; Func[bool EZBE_isSolid(int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002; InlineFunc[int ComboAt(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
SETR D3 D2; InlineFunc[int ComboAt(int, int)] Params End
POP D2; InlineFunc[int ComboAt(int, int)] Body Start
COMBO_AT D2 D3; InlineFunc[int ComboAt(int, int)] Body End
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #1215 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 47073 ==; Test 'if'
SETV D2 0; return Start AND if() #1215 Body Start
GOTO 47127; return End AND if() #1215 Body End
LOAD D2 0; if() #1216 Test
COMPAREV D2 63
GOTOCMP 47084 ==
LOAD D2 0
COMPAREV D2 42
GOTOCMP 47084 ==
LOAD D2 0
COMPAREV D2 20
GOTOCMP 47084 ==
SETV D2 0
GOTO 47085
SETV D2 1
COMPAREV D2 0
GOTOCMP 47089 ==; Test 'if'
SETV D2 0; return Start AND if() #1216 Body Start
GOTO 47127; return End AND if() #1216 Body End
LOAD D2 0; if() #1217 Test
COMPAREV D2 18
GOTOCMP 47100 ==
LOAD D2 0
COMPAREV D2 86
GOTOCMP 47098 <
LOAD D2 0
COMPAREV D2 88
GOTOCMP 47100 <=
SETV D2 0
GOTO 47101
SETV D2 1
COMPAREV D2 0
GOTOCMP 47105 ==; Test 'if'
SETV D2 0; return Start AND if() #1217 Body Start
GOTO 47127; return End AND if() #1217 Body End
LOAD D2 0; if() #1218 Test
COMPAREV D2 19
GOTOCMP 47116 ==
LOAD D2 0
COMPAREV D2 89
GOTOCMP 47114 <
LOAD D2 0
COMPAREV D2 91
GOTOCMP 47116 <=
SETV D2 0
GOTO 47117
SETV D2 1
COMPAREV D2 0
GOTOCMP 47121 ==; Test 'if'
SETV D2 0; return Start AND if() #1218 Body Start
GOTO 47127; return End AND if() #1218 Body End
LOAD D2 0.0002; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0001
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool EZBE_isSolid(int, int)] Body End
PUSHV 0; Func[void EZBE_DamageLink(int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 40; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
PUSHR D4
SETV D2 0.0001; UsrFunc[int InFrontX(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 12; UsrFunc[int InFrontX(int, int)] Params End
CALLFUNC 3.0955; UsrFunc[int InFrontX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
PUSHR D4
SETV D2 0.0001; UsrFunc[int InFrontY(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 12; UsrFunc[int InFrontY(int, int)] Params End
CALLFUNC 3.0976; UsrFunc[int InFrontY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 0 0.0002
LOAD D2 0.0001
PUSHR D2
PUSHARGSV -1 0.0002
PUSHV 1; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2441; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 3.1400; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 3.1336; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void EZBE_DamageLink(int)] Body End
PUSHARGSV 0 0.0002; Func[void EZBE_ExpandingCircle(int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
SETV D2 0; for() #402 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #402 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 47274 ==; for() #402 TestFail?
LOAD D2 0.0003; for() #402 Body Start
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
MULTV D2 0.2000
STORE D2 0
PUSHV 4; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #402 Body End
LOAD D2 0.0001; for() #402 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 47214; for() #402 End
SETV D2 16; for() #403 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #403 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 47336 ==; for() #403 TestFail?
LOAD D2 0.0003; for() #403 Body Start
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
MULTV D2 0.2000
STORE D2 0
PUSHV 4; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #403 Body End
LOAD D2 0.0001; for() #403 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 47276; for() #403 End
POPARGS D5 0.0006; return (Void)
RETURNFUNC; Func[void EZBE_ExpandingCircle(int, int, int, int)] Body End
PUSHARGSV 0 0.0008; Func[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 1 0.0005
LOAD D2 0.0010; if() #1191 Test
COMPAREV D2 0
GOTOCMP 47363 !=
LOAD D2 0.0014
COMPAREV D2 132
GOTOCMP 47361 ==
LOAD D2 0.0014
COMPAREV D2 130
GOTOCMP 47361 ==
LOAD D2 0.0014
COMPAREV D2 134
GOTOCMP 47361 ==
LOAD D2 0.0014
COMPAREV D2 137
GOTOCMP 47361 ==
LOAD D2 0.0014
COMPAREV D2 138
GOTOCMP 47363 !=
SETV D2 1
GOTO 47364
SETV D2 0
COMPAREV D2 0
GOTOCMP 47369 ==; Test 'if'
LOAD D2 0.0005; if() #1191 Body Start
ORV D2 2
STORE D2 0.0005; if() #1191 Body End
LOAD D2 0.0010; if() #615 Test
COMPAREV D2 2000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 47381 ==; Test 'if'
LOAD D2 0.0005; if() #615 Body Start
ORV D2 4
STORE D2 0.0005
LOAD D2 0.0010
SUBV D2 2000
STORE D2 0.0010
GOTO 47392; if() #615 Body End
LOAD D2 0.0010; if() #1192 Test AND if() #615 Else Start
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 47392 ==; Test 'if'
LOAD D2 0.0005; if() #1192 Body Start
ORV D2 2
STORE D2 0.0005
LOAD D2 0.0010
SUBV D2 1000
STORE D2 0.0010; if() #1192 Body End
LOAD D2 0.0010; if() #615 Else End AND if() #1193 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 47399 ==; Test 'if'
SETV D2 -1; if() #1193 Body Start
STORE D2 0.0010; if() #1193 Body End
ALLOCATEMEMV D2 16 0
STORE D2 0.0004
ALLOCATEMEMV D2 16 0
STORE D2 0.0003
ALLOCATEMEMV D2 16 0
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0009; if() #1194 Test
COMPAREV D2 0
GOTOCMP 47411 ==; Test 'if'
LOAD D2 0.0009; InlineFunc[void Game::PlaySound(int)] Params AND if() #1194 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1194 Body End
PUSHR D4
LOAD D2 0.0014; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 200
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2441; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 64
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
ADDV D2 1
STORE D2 0.0001
SETV D2 0; for() #404 setup AND while(true) #32 Body [Opt:AlwaysOn] Start
STORE D2 0.0007
LOAD D2 0.0007; for() #404 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 47750 ==; for() #404 TestFail?
LOAD D2 0.0004; InlineFunc[bool eweapon::isValid()] Params Start AND if() #1195 Test AND for() #404 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2; InlineFunc[bool eweapon::isValid()] Params End
ISVALIDEWPN D2; InlineFunc[bool eweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 47746 ==; Test 'if'
LOAD D2 0.0003; if() #1196 Test AND if() #1195 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 16
GOTOCMP 47492 >=
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 3
GOTOCMP 47492 >=
SETV D2 1
GOTO 47493
SETV D2 0
COMPAREV D2 0
GOTOCMP 47508 ==; Test 'if'
SETV D2 0; if() #1196 Body Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #1196 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0007
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003; if() #1197 Test
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 47746 ==; Test 'if'
LOAD D2 0.0002; if() #616 Test AND if() #1197 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 47639 ==; Test 'if'
SETV D2 0; for() #405 setup AND if() #616 Body Start
STORE D2 0.0006
LOAD D2 0.0006; for() #405 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 47746 ==; for() #405 TestFail?
LOAD D2 0.0009; if() #1198 Test AND for() #405 Body Start
COMPAREV D2 0
GOTOCMP 47552 ==; Test 'if'
LOAD D2 0.0009; InlineFunc[void Game::PlaySound(int)] Params AND if() #1198 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1198 Body End
PUSHR D4
LOAD D2 0.0014; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0006; InlineFunc[int DegtoRad(int)] Params Start
MULTV D2 120
SETV D2 120
PUSHR D2
LOAD D2 0.0006
POP D3
MULTR D2 D3
ADDV D2 -90
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 200
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2441; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 56
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 2
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
ADDV D2 1
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2; for() #405 Body End
LOAD D2 0.0006; for() #405 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 47542; for() #405 End
GOTO 47746; if() #616 Body End
LOAD D2 0.0002; if() #1199 Test AND if() #616 Else Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 47746 ==; Test 'if'
SETV D2 0; for() #406 setup AND if() #1199 Body Start
STORE D2 0.0006
LOAD D2 0.0006; for() #406 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 47746 ==; for() #406 TestFail?
LOAD D2 0.0009; if() #1200 Test AND for() #406 Body Start
COMPAREV D2 0
GOTOCMP 47660 ==; Test 'if'
LOAD D2 0.0009; InlineFunc[void Game::PlaySound(int)] Params AND if() #1200 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1200 Body End
PUSHR D4
LOAD D2 0.0014; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0006; InlineFunc[int DegtoRad(int)] Params Start
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0006
POP D3
MULTR D2 D3
ADDV D2 -45
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 200
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2441; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 56
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
ADDV D2 1
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2; for() #406 Body End
LOAD D2 0.0006; for() #406 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 47650; for() #406 End
LOAD D2 0.0007; if() #1199 Body End AND if() #616 Else End AND if() #1197 Body End AND if() #1195 Body End AND for() #404 Body End AND for() #404 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 47463; for() #404 End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #32 Body [Opt:AlwaysOn] End
GOTO 47461; while() #32 End
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0004
DEALLOCATEMEMR D3; [Opt:NeverRet] AND Func[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0010; Func[bool EZBE_Lightning(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0009
ALLOCATEMEMV D2 64 0
STORE D2 0.0008
ALLOCATEMEMV D2 64 0
STORE D2 0.0007
ALLOCATEMEMV D2 64 0
STORE D2 0.0006
ALLOCATEMEMV D2 64 0
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0008; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHV -64
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8061; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHV -32
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8061; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHARGSV 32 0.0002; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8061; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHV 64
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8061; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
POP D4
ALLOCATEMEMV D2 3 0
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0013
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0012
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0011
POP D0
WRITEPODARRAYVR 2 D2
POP D2
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETV D2 0; for() #407 setup
STORE D2 0.0009
LOAD D2 0.0009; for() #407 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 47941 ==; for() #407 TestFail?
LOAD D2 0.0003; for() #407 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0009; if() #1201 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 47875 ==; Test 'if'
LOAD D2 0.0002; if() #1201 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1201 Body End
PUSHR D4
LOAD D2 0.0008; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8261; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8261; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8261; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8261; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #407 Body End
LOAD D2 0.0009; for() #407 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 47843; for() #407 End
SETV D2 0; for() #408 setup
STORE D2 0.0009
LOAD D2 0.0009; for() #408 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 48037 ==; for() #408 TestFail?
LOAD D2 0.0003; for() #408 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0009; if() #1202 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 47975 ==; Test 'if'
LOAD D2 0.0002; if() #1202 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1202 Body End
PUSHR D4
LOAD D2 0.0008; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8261; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8261; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8261; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8261; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #408 Body End
LOAD D2 0.0009; for() #408 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 47943; for() #408 End
SETV D2 0; return Start
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0006
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 48059; return End
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0006
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0017
RETURNFUNC; Func[bool EZBE_Lightning(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZBF_LightningInit(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
PUSHR D4
PUSHV -40; UsrFunc[int Rand(int, int)] Params Start
PUSHV 40; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0001
STOREV 0 0; for() #412 setup
LOAD D2 0; for() #412 LoopTest
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 48259 ==; for() #412 TestFail?
LOAD D2 0; for() #412 Body Start
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
MULTV D2 320
SETV D2 320
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0004
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0003
PUSHR D4
LOAD D2 0.0007; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.1847; UsrFunc[int Rand(int, int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0002
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0; if() #1219 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 48148 ==; Test 'if'
SETV D2 0; if() #1219 Body Start
STORE D2 0.0002; if() #1219 Body End
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0011
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #412 Body End
LOAD D2 0; for() #412 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 48075; for() #412 End
POPARGS D5 0.0014
RETURNFUNC; Func[void EZBF_LightningInit(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0009; Func[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 LINKHP; if() #1220 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 48845 !=; Test 'if' AND return (Void) AND if() #1220 Body
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0015
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0008
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0; for() #413 setup
LOAD D2 0; for() #413 LoopTest
PUSHR D2
LOAD D2 0.0015
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 48845 ==; for() #413 TestFail?
LOAD D2 0.0013; if() #621 Test AND for() #413 Body Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 48316 <=
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 48316 >=
SETV D2 1
GOTO 48317
SETV D2 0
COMPAREV D2 0
GOTOCMP 48500 ==; Test 'if'
LOAD D2 0.0016; if() #621 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0004
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0002
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0006
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0001
PUSHR D4
PUSHV 4; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
LOAD D2 0.0011
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 4.1653; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHR D4; if() #1221 Test
LOAD D2 0.0004; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 11
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 11
PUSHR D2
PUSHV 0; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.9007; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 48841 ==; Test 'if'
PUSHR D4; if() #1221 Body Start
LOAD D2 0.0009; UsrFunc[void EZBE_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZBE_DamageLink(int)] Params End
CALLFUNC 4.7129; UsrFunc[void EZBE_DamageLink(int)] Call
POP D4; if() #1221 Body End
GOTO 48841; if() #621 Body End
LOAD D2 0.0014; if() #622 Test AND if() #621 Else Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 48523 <=
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 48523 >=
SETV D2 1
GOTO 48524
SETV D2 0
COMPAREV D2 0
GOTOCMP 48707 ==; Test 'if'
LOAD D2 0.0016; if() #622 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0004
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0002
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0006
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
LOAD D2 0.0003
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0003
PUSHR D4
PUSHV 4; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
LOAD D2 0.0011
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 4.1653; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHR D4; if() #1222 Test
LOAD D2 0.0004; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 11
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 11
PUSHR D2
PUSHV 0; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.9007; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 48841 ==; Test 'if'
PUSHR D4; if() #1222 Body Start
LOAD D2 0.0009; UsrFunc[void EZBE_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZBE_DamageLink(int)] Params End
CALLFUNC 4.7129; UsrFunc[void EZBE_DamageLink(int)] Call
POP D4; if() #1222 Body End
GOTO 48841; if() #622 Body End
LOAD D2 0.0014; if() #1223 Test AND if() #622 Else Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 48730 >
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 48730 <
SETV D2 1
GOTO 48731
SETV D2 0
COMPAREV D2 0
GOTOCMP 48841 ==; Test 'if'
LOAD D2 0.0016; if() #1223 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0004
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0002
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
PUSHR D4
PUSHV 4; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
LOAD D2 0.0011
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 4.1653; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHR D4; if() #1224 Test
LOAD D2 0.0004; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 11
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 11
PUSHR D2
PUSHV 0; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.9007; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 48841 ==; Test 'if'
PUSHR D4; if() #1224 Body Start
LOAD D2 0.0009; UsrFunc[void EZBE_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZBE_DamageLink(int)] Params End
CALLFUNC 4.7129; UsrFunc[void EZBE_DamageLink(int)] Call
POP D4; if() #1224 Body End
LOAD D2 0; if() #1223 Body End AND if() #622 Else End AND if() #621 Else End AND for() #413 Body End AND for() #413 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 48284; for() #413 End
POPARGS D5 0.0017
RETURNFUNC; Func[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0006
ALLOCATEMEMV D2 64 0
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHV 32
LOAD D2 0.0011
PUSHR D2
PUSHV 0
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8061; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
POP D4
ALLOCATEMEMV D2 3 0
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0010
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0009
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0008
POP D0
WRITEPODARRAYVR 2 D2
POP D2
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETV D2 0; for() #409 setup
STORE D2 0.0006
LOAD D2 0.0006; for() #409 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 48941 ==; for() #409 TestFail?
LOAD D2 0.0003; for() #409 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0006; if() #1203 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 48920 ==; Test 'if'
LOAD D2 0.0002; if() #1203 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1203 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0006
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8261; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #409 Body End
LOAD D2 0.0006; for() #409 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 48888; for() #409 End
SETV D2 0; for() #410 setup
STORE D2 0.0006
LOAD D2 0.0006; for() #410 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 48995 ==; for() #410 TestFail?
LOAD D2 0.0003; for() #410 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0006; if() #1204 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 48975 ==; Test 'if'
LOAD D2 0.0002; if() #1204 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1204 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0006
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 4.8261; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #410 Body End
LOAD D2 0.0006; for() #410 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 48943; for() #410 End
SETV D2 0; return Start
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
GOTO 49005; return End
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
POPARGS D5 0.0014
RETURNFUNC; Func[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0004; Func[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
STORE D2 0.0008
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0006
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0005
LOAD D2 0.0010; if() #617 Test
PUSHR D2
LOAD D2 0.0012
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 49210 ==; Test 'if'
LOAD D2 0.0008; if() #617 Body Start
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0003
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0011
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0011
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0008; InlineFunc[int Max(int, int)] Params Start AND if() #618 Test
PUSHVARGR D2
LOAD D2 0.0006
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0012; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0010
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 49165 <
LOAD D2 0.0008; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0006
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0010
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 49165 >
LOAD D2 0.0007; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0011; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 49165 <
LOAD D2 0.0007; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0011; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 49165 >
SETV D2 1
GOTO 49166
SETV D2 0
COMPAREV D2 0
GOTOCMP 49207 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int Min(int, int)] Params Start AND if() #619 Test AND if() #618 Body Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 49198 >
LOAD D2 0.0007; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 49198 <
SETV D2 0
GOTO 49199
SETV D2 1
COMPAREV D2 0
GOTOCMP 49204 ==; Test 'if'
SETV D2 0; return Start AND if() #619 Body Start
GOTO 49275; return End
GOTO 49274; if() #619 Body End
SETV D2 1; return Start AND if() #619 Else Start
GOTO 49275; return End AND if() #619 Else End
GOTO 49274; if() #618 Body End
SETV D2 0; return Start AND if() #618 Else Start
GOTO 49275; return End AND if() #618 Else End
GOTO 49274; if() #617 Body End
LOAD D2 0.0012; if() #1205 Test AND if() #617 Else Start
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
GOTOCMP 49224 <
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
GOTOCMP 49224 >
SETV D2 1
GOTO 49225
SETV D2 0
COMPAREV D2 0
GOTOCMP 49274 ==; Test 'if'
LOAD D2 0.0011; if() #1205 Body Start
STORE D2 0.0003
LOAD D2 0.0009
STORE D2 0.0002
LOAD D2 0.0003; if() #1206 Test
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 49243 ==; Test 'if'
LOAD D2 0.0009; if() #1206 Body Start
STORE D2 0.0003
LOAD D2 0.0011
STORE D2 0.0002; if() #1206 Body End
LOAD D2 0.0007; if() #1207 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 49255 <
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 49269 <=
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 49267 <
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 49269 <=
SETV D2 0
GOTO 49270
SETV D2 1
COMPAREV D2 0
GOTOCMP 49274 ==; Test 'if'
SETV D2 1; return Start AND if() #1207 Body Start
GOTO 49275; return End AND if() #1207 Body End
SETV D2 0; if() #1205 Body End AND if() #617 Else End AND return Start
POPARGS D5 0.0013; return End
RETURNFUNC; Func[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZBE_WallBounce(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0006
STOREV 1 0.0005
LOAD D2 0.0008; if() #1208 Test
COMPAREV D2 0
GOTOCMP 49301 !=
LOAD D2 0.0013
COMPAREV D2 132
GOTOCMP 49299 ==
LOAD D2 0.0013
COMPAREV D2 130
GOTOCMP 49299 ==
LOAD D2 0.0013
COMPAREV D2 134
GOTOCMP 49299 ==
LOAD D2 0.0013
COMPAREV D2 137
GOTOCMP 49299 ==
LOAD D2 0.0013
COMPAREV D2 138
GOTOCMP 49301 !=
SETV D2 1
GOTO 49302
SETV D2 0
COMPAREV D2 0
GOTOCMP 49307 ==; Test 'if'
LOAD D2 0.0005; if() #1208 Body Start
ORV D2 2
STORE D2 0.0005; if() #1208 Body End
LOAD D2 0.0008; if() #620 Test
COMPAREV D2 2000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 49319 ==; Test 'if'
LOAD D2 0.0005; if() #620 Body Start
ORV D2 4
STORE D2 0.0005
LOAD D2 0.0008
SUBV D2 2000
STORE D2 0.0008
GOTO 49330; if() #620 Body End
LOAD D2 0.0008; if() #1209 Test AND if() #620 Else Start
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 49330 ==; Test 'if'
LOAD D2 0.0005; if() #1209 Body Start
ORV D2 2
STORE D2 0.0005
LOAD D2 0.0008
SUBV D2 1000
STORE D2 0.0008; if() #1209 Body End
LOAD D2 0.0008; if() #620 Else End AND if() #1210 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 49337 ==; Test 'if'
SETV D2 -1; if() #1210 Body Start
STORE D2 0.0008; if() #1210 Body End
PUSHR D4
LOAD D2 0.0013; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.2441; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0004
STOREV 10 0.0003
LOAD D2 0.0009
DIVV D2 100
STORE D2 0.0009
LOAD D2 0.0004; while() #33 Test AND InlineFunc[bool eweapon::isValid()] Params
ISVALIDEWPN D2; InlineFunc[bool eweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 49579 ==; Test 'while'
PUSHR D4; while() #33 Body Start
LOAD D2 0.0009; UsrFunc[int VectorX(int, int)] Params Start
DIVV D2 100
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0009; UsrFunc[int VectorY(int, int)] Params Start
DIVV D2 100
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0006; for() #411 LoopTest
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 49569 ==; for() #411 TestFail?
LOAD D2 0.0012; for() #411 Body Start
PUSHR D2
PUSHR D4
PUSHV 1; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.9260; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0012
LOAD D2 0.0011
PUSHR D2
PUSHR D4
PUSHV 1; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.9270; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0011
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0002; if() #1211 Test
COMPAREV D2 0
GOTOCMP 49452 >=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHV 2
PUSHARGSV 1 0.0002; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 4.6772; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 49472 ==
LOAD D2 0.0002
COMPAREV D2 0
GOTOCMP 49470 <=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHV 3
PUSHARGSV 1 0.0002; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 4.6772; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 49472 ==
SETV D2 0
GOTO 49473
SETV D2 1
COMPAREV D2 0
GOTOCMP 49480 ==; Test 'if'
LOAD D2 0.0002; if() #1211 Body Start
SUBV2 0 D2
STORE D2 0.0002
SETV D2 1
STORE D2 0; if() #1211 Body End
LOAD D2 0.0001; if() #1212 Test
COMPAREV D2 0
GOTOCMP 49498 >=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHV 0
PUSHARGSV 1 0.0002; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 4.6772; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 49517 ==
LOAD D2 0.0001
COMPAREV D2 0
GOTOCMP 49515 <=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHARGSV 1 0.0003; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 4.6772; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 49517 ==
SETV D2 0
GOTO 49518
SETV D2 1
COMPAREV D2 0
GOTOCMP 49525 ==; Test 'if'
LOAD D2 0.0001; if() #1212 Body Start
SUBV2 0 D2
STORE D2 0.0001
SETV D2 1
STORE D2 0; if() #1212 Body End
LOAD D2 0; if() #1213 Test
COMPAREV D2 0
GOTOCMP 49565 ==; Test 'if'
PUSHR D4; if() #1213 Body Start
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0742; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0010
LOAD D2 0.0010; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0003
SUBV D2 1
STORE D2 0.0003
LOAD D2 0.0003; if() #1214 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 49565 ==; Test 'if'
SETV D2 0; if() #1214 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2; if() #1214 Body End
LOAD D2 0.0006; if() #1213 Body End AND for() #411 Body End AND for() #411 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 49386; for() #411 End
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0009; InlineFunc[int Floor(int)] Params
FLOOR D2; InlineFunc[int Floor(int)] Body
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0006
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #33 Body End
GOTO 49363; while() #33 End
POPARGS D5 0.0014
RETURNFUNC; Func[void EZBE_WallBounce(int, int, int, int, int, int, int)] Body End
