stderr:

Compiling 'NewbieBoss.z'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
NewbieBoss.z Line 3463 @ Columns 4-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3461    
3462    if(attack>=91&&attack<=93){
3463        vars[EZBI_SPEEDUPCOUNTER] = 0;
            ^~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3464 @ Columns 4-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3462    if(attack>=91&&attack<=93){
3463        vars[EZBI_SPEEDUPCOUNTER] = 0;
3464        vars[EZBI_INITSPEED] = ghost->Step;
            ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3466 @ Columns 5-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3464    vars[EZBI_INITSPEED] = ghost->Step;
3465    if(attack==91){
3466        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3467 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3465    if(attack==91){
3466        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP;
3467        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*2;
            ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3467 @ Columns 27-47 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3465    if(attack==91){
3466        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP;
3467        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*2;
                                  ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3470 @ Columns 5-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3468    }
3469    else if(attack==92){
3470        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*2;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3471 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3469    else if(attack==92){
3470        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*2;
3471        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*3;
            ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3471 @ Columns 27-47 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3469    else if(attack==92){
3470        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*2;
3471        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*3;
                                  ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3474 @ Columns 5-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3472    }
3473    else if(attack==93){
3474        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*3;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3475 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3473    else if(attack==93){
3474        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*3;
3475        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*4;
            ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3475 @ Columns 27-47 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3473    else if(attack==93){
3474        vars[EZBI_MAXSPEEDCOUNTER] = FRAMES_EZB_SPEEDUP*3;
3475        vars[EZBI_TOPSPEED] = vars[EZBI_INITSPEED]*4;
                                  ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3480 @ Columns 3-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3478    }
3479    
3480    attackPool[1+attackPool[0]] = attack;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3480 @ Columns 16-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3478    }
3479    
3480    attackPool[1+attackPool[0]] = attack;
                     ^~~~~~~~~~~~~


NewbieBoss.z Line 3481 @ Columns 5-18 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3479    
3480    attackPool[1+attackPool[0]] = attack;
3481    ++attackPool[0];
          ^~~~~~~~~~~~~


NewbieBoss.z Line 3500 @ Columns 8-18 - Warning S108: Arrays should be explicitly typed - change `npc` to `npc[]`

3498    void EZB_AddSummon(npc n, npc summons){
3499        for(int i=0; i<256; ++i){
3500            if(!summons[i]->isValid()){
                    ^~~~~~~~~~


NewbieBoss.z Line 3501 @ Columns 5-15 - Warning S108: Arrays should be explicitly typed - change `npc` to `npc[]`

3499    for(int i=0; i<256; ++i){
3500        if(!summons[i]->isValid()){
3501            summons[i] = n;
                ^~~~~~~~~~


NewbieBoss.z Line 3486 @ Columns 3-34 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3484    if(form==0)
3485        return;
3486    attackPool[101+attackPool[100]] = form;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3486 @ Columns 18-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3484    if(form==0)
3485        return;
3486    attackPool[101+attackPool[100]] = form;
                       ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3487 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3485        return;
3486    attackPool[101+attackPool[100]] = form;
3487    ++attackPool[100];
          ^~~~~~~~~~~~~~~


NewbieBoss.z Line 2855 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2853    }
2854    int EZB_AngleDir(ffc this, npc ghost, int vars, int angle){
2855        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3348 @ Columns 6-25 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3346    int i;
3347    int startIndex = 0;
3348    if(vars[EZBI_BSBUFFER]==0)
           ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3351 @ Columns 14-36 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3349        startIndex = 100;
3350    
3351    int size = vars[startIndex+011+6];
                   ^~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3310 @ Columns 6-25 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3308    int i;
3309    int startIndex = 0;
3310    if(vars[EZBI_BSBUFFER]==0)
           ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3313 @ Columns 16-36 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3311        startIndex = 100;
3312    
3313    Ghost_CSet = vars[startIndex+000];
                     ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3315 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3313    Ghost_CSet = vars[startIndex+000];
3314    if(!onlyDefenses){
3315        ghost->Damage = vars[startIndex+001];
                            ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3316 @ Columns 26-46 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3314    if(!onlyDefenses){
3315        ghost->Damage = vars[startIndex+001];
3316        ghost->WeaponDamage = vars[startIndex+002];
                                  ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3317 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3315    ghost->Damage = vars[startIndex+001];
3316    ghost->WeaponDamage = vars[startIndex+002];
3317    ghost->Hunger = vars[startIndex+003];
                        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3318 @ Columns 18-38 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3316    ghost->WeaponDamage = vars[startIndex+002];
3317    ghost->Hunger = vars[startIndex+003];
3318    ghost->Rate = vars[startIndex+004];
                      ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3319 @ Columns 22-42 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3317    ghost->Hunger = vars[startIndex+003];
3318    ghost->Rate = vars[startIndex+004];
3319    ghost->Haltrate = vars[startIndex+005];
                          ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3320 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3318    ghost->Rate = vars[startIndex+004];
3319    ghost->Haltrate = vars[startIndex+005];
3320    ghost->Homing = vars[startIndex+006];
                        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3321 @ Columns 18-38 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3319    ghost->Haltrate = vars[startIndex+005];
3320    ghost->Homing = vars[startIndex+006];
3321    ghost->Step = vars[startIndex+007];
                      ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3322 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3320    ghost->Homing = vars[startIndex+006];
3321    ghost->Step = vars[startIndex+007];
3322    ghost->Weapon = vars[startIndex+008];
                        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3323 @ Columns 21-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3321    ghost->Step = vars[startIndex+007];
3322    ghost->Weapon = vars[startIndex+008];
3323    ghost->ItemSet = vars[startIndex+009];
                         ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3324 @ Columns 17-37 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3322    ghost->Weapon = vars[startIndex+008];
3323    ghost->ItemSet = vars[startIndex+009];
3324    ghost->SFX = vars[startIndex+010];
                     ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3327 @ Columns 5-16 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3325    
3326    for(i=0; i<11; ++i){
3327        vars[300+i] = vars[startIndex+011+i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3327 @ Columns 19-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3325    
3326    for(i=0; i<11; ++i){
3327        vars[300+i] = vars[startIndex+011+i];
                          ^~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3332 @ Columns 24-46 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3330    
3331    for(i=0; i<18; ++i){
3332        ghost->Defense[i] = vars[startIndex+022+i];
                                ^~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3335 @ Columns 16-36 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3333    }
3334    if(includeHP){
3335        ghost->HP = vars[startIndex+040];
                        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3338 @ Columns 3-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3336        Ghost_HP = ghost->HP;
3337    }
3338    vars[EZBI_CURFORMID] = vars[startIndex+041];
        ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3338 @ Columns 26-46 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3336        Ghost_HP = ghost->HP;
3337    }
3338    vars[EZBI_CURFORMID] = vars[startIndex+041];
                               ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3340 @ Columns 6-25 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3338        vars[EZBI_CURFORMID] = vars[startIndex+041];
3339    
3340        if(vars[EZBI_BSBUFFER]==0)
               ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3341 @ Columns 4-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3339    
3340        if(vars[EZBI_BSBUFFER]==0)
3341            vars[EZBI_BSBUFFER] = 1;
                ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3343 @ Columns 4-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3341        vars[EZBI_BSBUFFER] = 1;
3342    else
3343        vars[EZBI_BSBUFFER] = 0;
            ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3256 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3254    npc n = CreateNPCAt(newForm, 128, -1000);
3255    
3256    vars[000] = Ghost_CSet;
        ^~~~~~~~~


NewbieBoss.z Line 3257 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3255    
3256    vars[000] = Ghost_CSet;
3257    vars[001] = ghost->Damage;
        ^~~~~~~~~


NewbieBoss.z Line 3258 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3256    vars[000] = Ghost_CSet;
3257    vars[001] = ghost->Damage;
3258    vars[002] = ghost->WeaponDamage;
        ^~~~~~~~~


NewbieBoss.z Line 3259 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3257    vars[001] = ghost->Damage;
3258    vars[002] = ghost->WeaponDamage;
3259    vars[003] = ghost->Hunger;
        ^~~~~~~~~


NewbieBoss.z Line 3260 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3258    vars[002] = ghost->WeaponDamage;
3259    vars[003] = ghost->Hunger;
3260    vars[004] = ghost->Rate;
        ^~~~~~~~~


NewbieBoss.z Line 3261 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3259    vars[003] = ghost->Hunger;
3260    vars[004] = ghost->Rate;
3261    vars[005] = ghost->Haltrate;
        ^~~~~~~~~


NewbieBoss.z Line 3262 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3260    vars[004] = ghost->Rate;
3261    vars[005] = ghost->Haltrate;
3262    vars[006] = ghost->Homing;
        ^~~~~~~~~


NewbieBoss.z Line 3263 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3261    vars[005] = ghost->Haltrate;
3262    vars[006] = ghost->Homing;
3263    vars[007] = ghost->Step;
        ^~~~~~~~~


NewbieBoss.z Line 3264 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3262    vars[006] = ghost->Homing;
3263    vars[007] = ghost->Step;
3264    vars[008] = ghost->Weapon;
        ^~~~~~~~~


NewbieBoss.z Line 3265 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3263    vars[007] = ghost->Step;
3264    vars[008] = ghost->Weapon;
3265    vars[009] = ghost->ItemSet;
        ^~~~~~~~~


NewbieBoss.z Line 3266 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3264    vars[008] = ghost->Weapon;
3265    vars[009] = ghost->ItemSet;
3266    vars[010] = ghost->SFX;
        ^~~~~~~~~


NewbieBoss.z Line 3268 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3266    vars[010] = ghost->SFX;
3267    for(i=0; i<11; ++i){
3268        vars[011+i] = ghost->Attributes[i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3271 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3269    }
3270    for(i=0; i<18; ++i){
3271        vars[022+i] = ghost->Defense[i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3273 @ Columns 3-11 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3271        vars[022+i] = ghost->Defense[i];
3272    }
3273    vars[40] = ghost->HP;
        ^~~~~~~~


NewbieBoss.z Line 3274 @ Columns 3-11 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3272    }
3273    vars[40] = ghost->HP;
3274    vars[41] = ghost->ID;
        ^~~~~~~~


NewbieBoss.z Line 3276 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3274    vars[41] = ghost->ID;
3275    
3276    vars[100] = n->CSet;
        ^~~~~~~~~


NewbieBoss.z Line 3277 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3275    
3276    vars[100] = n->CSet;
3277    vars[101] = n->Damage;
        ^~~~~~~~~


NewbieBoss.z Line 3278 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3276    vars[100] = n->CSet;
3277    vars[101] = n->Damage;
3278    vars[102] = n->WeaponDamage;
        ^~~~~~~~~


NewbieBoss.z Line 3279 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3277    vars[101] = n->Damage;
3278    vars[102] = n->WeaponDamage;
3279    vars[103] = n->Hunger;
        ^~~~~~~~~


NewbieBoss.z Line 3280 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3278    vars[102] = n->WeaponDamage;
3279    vars[103] = n->Hunger;
3280    vars[104] = n->Rate;
        ^~~~~~~~~


NewbieBoss.z Line 3281 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3279    vars[103] = n->Hunger;
3280    vars[104] = n->Rate;
3281    vars[105] = n->Haltrate;
        ^~~~~~~~~


NewbieBoss.z Line 3282 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3280    vars[104] = n->Rate;
3281    vars[105] = n->Haltrate;
3282    vars[106] = n->Homing;
        ^~~~~~~~~


NewbieBoss.z Line 3283 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3281    vars[105] = n->Haltrate;
3282    vars[106] = n->Homing;
3283    vars[107] = n->Step;
        ^~~~~~~~~


NewbieBoss.z Line 3284 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3282    vars[106] = n->Homing;
3283    vars[107] = n->Step;
3284    vars[108] = n->Weapon;
        ^~~~~~~~~


NewbieBoss.z Line 3285 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3283    vars[107] = n->Step;
3284    vars[108] = n->Weapon;
3285    vars[109] = n->ItemSet;
        ^~~~~~~~~


NewbieBoss.z Line 3286 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3284    vars[108] = n->Weapon;
3285    vars[109] = n->ItemSet;
3286    vars[110] = n->SFX;
        ^~~~~~~~~


NewbieBoss.z Line 3288 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3286    vars[110] = n->SFX;
3287    for(i=0; i<11; ++i){
3288        vars[111+i] = n->Attributes[i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3291 @ Columns 4-15 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3289    }
3290    for(i=0; i<18; ++i){
3291        vars[122+i] = n->Defense[i];
            ^~~~~~~~~~~


NewbieBoss.z Line 3293 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3291        vars[122+i] = n->Defense[i];
3292    }
3293    vars[140] = n->HP;
        ^~~~~~~~~


NewbieBoss.z Line 3294 @ Columns 3-12 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3292    }
3293    vars[140] = n->HP;
3294    vars[141] = n->ID;
        ^~~~~~~~~


NewbieBoss.z Line 3296 @ Columns 3-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3294    vars[141] = n->ID;
3295    
3296    vars[EZBI_BSBUFFER] = 0;
        ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3237 @ Columns 3-18 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3235    }
3236    void EZB_CreateDeathExplosion(int x, int y){
3237        Game->PlaySound(SFX_BOMB);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3080 @ Columns 47-61 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3078    if(state==0){
3079        if(frame%4<2)
3080            EZB_DrawLaser(layer, x, y, width, angle, laserColors[2]);
                                                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3083 @ Columns 52-66 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3081    }
3082    else{
3083        EZB_DrawLaser3Color(layer, x, y, width, angle, laserColors[0], laserColors[1], laserColors[2]);
                                                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3083 @ Columns 68-82 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3081    }
3082    else{
3083        EZB_DrawLaser3Color(layer, x, y, width, angle, laserColors[0], laserColors[1], laserColors[2]);
                                                                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3083 @ Columns 84-98 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3081    }
3082    else{
3083        EZB_DrawLaser3Color(layer, x, y, width, angle, laserColors[0], laserColors[1], laserColors[2]);
                                                                                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3093 @ Columns 18-32 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3091    int w; int wRand;
3092    if(state==0){
3093        clr = Choose(laserColors[1], laserColors[2]);
                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3093 @ Columns 34-48 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3091    int w; int wRand;
3092    if(state==0){
3093        clr = Choose(laserColors[1], laserColors[2]);
                                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3116 @ Columns 18-32 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3114    }
3115    else{
3116        clr = Choose(laserColors[0], laserColors[1], laserColors[2]);
                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3116 @ Columns 34-48 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3114    }
3115    else{
3116        clr = Choose(laserColors[0], laserColors[1], laserColors[2]);
                                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 3116 @ Columns 50-64 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3114    }
3115    else{
3116        clr = Choose(laserColors[0], laserColors[1], laserColors[2]);
                                                         ^~~~~~~~~~~~~~


NewbieBoss.z Line 2758 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2756    int h = Ghost_TileHeight;
2757    
2758    int flags = vars[EZBI_FLAGS];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2924 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2922    }
2923    void EZB_FaceAngle(ffc this, npc ghost, int vars, int angle){
2924        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2931 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2929    }
2930    void EZB_FaceDir(ffc this, npc ghost, int vars, int dir){
2931        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2917 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2915    }
2916    void EZB_FaceLink(ffc this, npc ghost, int vars){
2917        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2686 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2684    }
2685    eweapon EZB_Fire(ffc this, npc ghost, int vars, int x, int y, int angle, int step, int wflags){
2686        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2690 @ Columns 17-34 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2688    if(flags&EZBF_UNBLOCKABLE)
2689        wflags |= EWF_UNBLOCKABLE;
2690    int fireSFX = vars[EZBI_WPNSFX];
                      ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 2691 @ Columns 17-34 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2689        wflags |= EWF_UNBLOCKABLE;
2690    int fireSFX = vars[EZBI_WPNSFX];
2691    int fireSPR = vars[EZBI_WPNSPR];
                      ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 2596 @ Columns 23-42 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2594    void EZB_FiringAnim(ffc this, npc ghost, int vars, int delayType){
2595        int i;
2596        int movementStyle = vars[EZBI_WALKTYPE];
                                ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 2597 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2595    int i;
2596    int movementStyle = vars[EZBI_WALKTYPE];
2597    int flags = vars[EZBI_FLAGS];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2598 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2596    int movementStyle = vars[EZBI_WALKTYPE];
2597    int flags = vars[EZBI_FLAGS];
2598    int combo = vars[EZBI_COMBO];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3613 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3611    void EZB_FishWizardUpdate(ffc this, npc ghost, int vars, int movementMisc){
3612        int i;
3613        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3627 @ Columns 3-18 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3625    //11 - Phase Cooldown
3626    //12 - Knockback
3627    movementMisc[2] = 0;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3628 @ Columns 3-18 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3626    //12 - Knockback
3627    movementMisc[2] = 0;
3628    movementMisc[3] = 0;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3629 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3627    movementMisc[2] = 0;
3628    movementMisc[3] = 0;
3629    if(movementMisc[7]==0){ //Walking
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3630 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3628    movementMisc[3] = 0;
3629    if(movementMisc[7]==0){ //Walking
3630        if(movementMisc[1])
               ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3631 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3629    if(movementMisc[7]==0){ //Walking
3630        if(movementMisc[1])
3631            --movementMisc[1];
                  ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3632 @ Columns 7-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3630    if(movementMisc[1])
3631        --movementMisc[1];
3632    if(movementMisc[11])
           ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3633 @ Columns 7-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3631        --movementMisc[1];
3632    if(movementMisc[11])
3633        --movementMisc[11];
              ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3634 @ Columns 4-19 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3632    if(movementMisc[11])
3633        --movementMisc[11];
3634    movementMisc[0] = Ghost_ConstantWalk4(movementMisc[0], ghost->Step, ghost->Rate, ghost->Homing, ghost->Hunger);
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3634 @ Columns 42-57 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3632    if(movementMisc[11])
3633        --movementMisc[11];
3634    movementMisc[0] = Ghost_ConstantWalk4(movementMisc[0], ghost->Step, ghost->Rate, ghost->Homing, ghost->Hunger);
                                              ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3636 @ Columns 27-42 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3634    movementMisc[0] = Ghost_ConstantWalk4(movementMisc[0], ghost->Step, ghost->Rate, ghost->Homing, ghost->Hunger);
3635    //Ice Wave Attack
3636    if(EZB_InSight(ghost)&&movementMisc[1]==0){
                               ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3637 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3635    //Ice Wave Attack
3636    if(EZB_InSight(ghost)&&movementMisc[1]==0){
3637        movementMisc[1] = ghost->Haltrate*10;
            ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3638 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3636    if(EZB_InSight(ghost)&&movementMisc[1]==0){
3637        movementMisc[1] = ghost->Haltrate*10;
3638        movementMisc[2] = 1; //Regular Attack
            ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3641 @ Columns 28-43 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3639    }
3640    //Diagonal Dash Attack
3641    else if(Rand(1, 90)==1&&movementMisc[1]==0){
                                ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3670 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3668    if(step==0)
3669        step = 0.5;
3670    movementMisc[3] = 1; //Constant Attack
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3671 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3669        step = 0.5;
3670    movementMisc[3] = 1; //Constant Attack
3671    movementMisc[4] = vX;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3672 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3670    movementMisc[3] = 1; //Constant Attack
3671    movementMisc[4] = vX;
3672    movementMisc[5] = vY;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3673 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3671    movementMisc[4] = vX;
3672    movementMisc[5] = vY;
3673    movementMisc[6] = dist/step;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3674 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3672    movementMisc[5] = vY;
3673    movementMisc[6] = dist/step;
3674    movementMisc[7] = 1; //Dash State
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3675 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3673    movementMisc[6] = dist/step;
3674    movementMisc[7] = 1; //Dash State
3675    movementMisc[8] = vars[EZBI_FLAGS];
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3675 @ Columns 24-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3673    movementMisc[6] = dist/step;
3674    movementMisc[7] = 1; //Dash State
3675    movementMisc[8] = vars[EZBI_FLAGS];
                          ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3677 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3675    movementMisc[8] = vars[EZBI_FLAGS];
3676    if(!Ghost_FlagIsSet(GHF_IGNORE_ALL_TERRAIN))
3677        movementMisc[8] = GHF_IGNORE_ALL_TERRAIN;
            ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3679 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3677        movementMisc[8] = GHF_IGNORE_ALL_TERRAIN;
3678    if(!Ghost_FlagIsSet(GHF_IGNORE_NO_ENEMY))
3679        movementMisc[9] = GHF_FLYING_ENEMY;
            ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3681 @ Columns 7-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3679        movementMisc[9] = GHF_FLYING_ENEMY;
3680    if(Ghost_FlagIsSet(GHF_KNOCKBACK))
3681        movementMisc[12] = GHF_KNOCKBACK;
            ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3685 @ Columns 6-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3683    Ghost_SetFlag(GHF_IGNORE_NO_ENEMY);
3684    Ghost_UnsetFlag(GHF_KNOCKBACK);
3685    movementMisc[10] = step;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3686 @ Columns 6-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3684    Ghost_UnsetFlag(GHF_KNOCKBACK);
3685    movementMisc[10] = step;
3686    movementMisc[11] = ghost->Haltrate*10;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3690 @ Columns 11-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3688        }
3689    }
3690    else if(movementMisc[7]==1){
                ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3691 @ Columns 17-32 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3689    }
3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
                         ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3691 @ Columns 33-49 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3689    }
3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
                                         ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3691 @ Columns 51-66 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3689    }
3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
                                                           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3691 @ Columns 67-83 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3689    }
3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
                                                                           ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3692 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3690    else if(movementMisc[7]==1){
3691        Ghost_MoveXY(movementMisc[4]*movementMisc[10], movementMisc[5]*movementMisc[10], 0);
3692        if(movementMisc[6]%4<2)
               ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3696 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3694    else
3695        ghost->DrawYOffset = -2;
3696    --movementMisc[6];
          ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3697 @ Columns 7-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3695        ghost->DrawYOffset = -2;
3696    --movementMisc[6];
3697    if(movementMisc[6]<=0){
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3699 @ Columns 8-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3697    if(movementMisc[6]<=0){
3698        ghost->DrawYOffset = -2;
3699        if(movementMisc[4]<0)
               ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3703 @ Columns 8-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3701    else
3702        Ghost_Dir = DIR_RIGHT;
3703    if(movementMisc[8])
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3705 @ Columns 8-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3703    if(movementMisc[8])
3704        Ghost_UnsetFlag(GHF_IGNORE_ALL_TERRAIN);
3705    if(movementMisc[9])
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3707 @ Columns 8-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3705    if(movementMisc[9])
3706        Ghost_UnsetFlag(GHF_IGNORE_NO_ENEMY);
3707    if(movementMisc[12])
           ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3709 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3707    if(movementMisc[12])
3708        Ghost_SetFlag(GHF_KNOCKBACK);
3709    movementMisc[7] = 0;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3710 @ Columns 5-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3708        Ghost_SetFlag(GHF_KNOCKBACK);
3709    movementMisc[7] = 0;
3710    movementMisc[0] = 0;
        ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3369 @ Columns 17-35 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3367    void EZB_GetExtraProperties(ffc this, npc ghost, int id, int vars, int attack1, int attack2, int attack3, int attackPool, int laserColors){
3368        int i; int j;
3369        int special = vars[EZBI_SPECIAL];
                          ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3370 @ Columns 3-16 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3368    int i; int j;
3369    int special = vars[EZBI_SPECIAL];
3370    attackPool[0] = 0;
        ^~~~~~~~~~~~~


NewbieBoss.z Line 3380 @ Columns 3-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3378    
3379    //If attack 1 is a transformation, set which one
3380    vars[EZBI_BSTYPE] = 0;
        ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3383 @ Columns 4-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3381    if(attack1==50||attack1==51||attack1==71){
3382        EZB_AddTransformation(this, ghost, vars, special, attackPool);
3383        vars[EZBI_BSTYPE] = 1;
            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3385 @ Columns 5-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3383    vars[EZBI_BSTYPE] = 1;
3384    if(attack1==51)
3385        vars[EZBI_BSTYPE] = 2;
            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3387 @ Columns 5-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3385        vars[EZBI_BSTYPE] = 2;
3386    else if(attack1==71)
3387        vars[EZBI_BSTYPE] = 3;
            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3421 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3419    if(f->InitD[0]==id){
3420        if(f->InitD[1]||f->InitD[2]||f->InitD[3]){
3421            laserColors[0] = f->InitD[1];
                ^~~~~~~~~~~~~~


NewbieBoss.z Line 3422 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3420    if(f->InitD[1]||f->InitD[2]||f->InitD[3]){
3421        laserColors[0] = f->InitD[1];
3422        laserColors[1] = f->InitD[2];
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3423 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3421    laserColors[0] = f->InitD[1];
3422    laserColors[1] = f->InitD[2];
3423    laserColors[2] = f->InitD[3];
        ^~~~~~~~~~~~~~


NewbieBoss.z Line 3426 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3424    }
3425    if(f->InitD[4]||f->InitD[5]||f->InitD[6]){
3426        laserColors[3] = f->InitD[4];
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3427 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3425    if(f->InitD[4]||f->InitD[5]||f->InitD[6]){
3426        laserColors[3] = f->InitD[4];
3427        laserColors[4] = f->InitD[5];
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3428 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3426    laserColors[3] = f->InitD[4];
3427    laserColors[4] = f->InitD[5];
3428    laserColors[5] = f->InitD[6];
        ^~~~~~~~~~~~~~


NewbieBoss.z Line 3436 @ Columns 7-35 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3434    if(f->InitD[0]==id){
3435        if(f->InitD[1]>0)
3436            vars[EZBI_TRANSFORMCOOLDOWN] = f->InitD[1]-1;
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3438 @ Columns 7-35 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3436        vars[EZBI_TRANSFORMCOOLDOWN] = f->InitD[1]-1;
3437    if(f->InitD[2]>1)
3438        vars[EZBI_TRANSFORMVARIANCE] = f->InitD[2];
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3449 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3447    
3448    //If the enemy has transformations in the pool but no transforming attack, assume 51, a complete transformation
3449    if(attackPool[100]&&vars[EZBI_BSTYPE]==0){
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3449 @ Columns 23-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3447    
3448    //If the enemy has transformations in the pool but no transforming attack, assume 51, a complete transformation
3449    if(attackPool[100]&&vars[EZBI_BSTYPE]==0){
                            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3450 @ Columns 4-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3448    //If the enemy has transformations in the pool but no transforming attack, assume 51, a complete transformation
3449    if(attackPool[100]&&vars[EZBI_BSTYPE]==0){
3450        vars[EZBI_BSTYPE] = 2;
            ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3454 @ Columns 6-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3452    
3453    //If the enemy has transformations in the pool, select one at random to load for the next transformation
3454    if(attackPool[100]){
           ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3455 @ Columns 34-71 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3453    //If the enemy has transformations in the pool, select one at random to load for the next transformation
3454    if(attackPool[100]){
3455        EZB_Barriershift_Store(ghost, attackPool[101+Rand(attackPool[100])], vars);
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3455 @ Columns 54-69 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3453    //If the enemy has transformations in the pool, select one at random to load for the next transformation
3454    if(attackPool[100]){
3455        EZB_Barriershift_Store(ghost, attackPool[101+Rand(attackPool[100])], vars);
                                                              ^~~~~~~~~~~~~~~


NewbieBoss.z Line 3128 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3126    }
3127    int EZB_GetSpecialCombo(ffc this, npc ghost, int vars, int graphic){
3128        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3129 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3127    int EZB_GetSpecialCombo(ffc this, npc ghost, int vars, int graphic){
3128        int flags = vars[EZBI_FLAGS];
3129        int combo = vars[EZBI_COMBO];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3362 @ Columns 3-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3360    }
3361    void EZB_InitVars(int vars){
3362        vars[EZBI_TRANSFORMCOOLDOWN] = 0;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3363 @ Columns 3-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3361    void EZB_InitVars(int vars){
3362        vars[EZBI_TRANSFORMCOOLDOWN] = 0;
3363        vars[EZBI_TRANSFORMVARIANCE] = 0;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3365 @ Columns 3-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3363    vars[EZBI_TRANSFORMVARIANCE] = 0;
3364    
3365    vars[EZBI_MAXSPEEDCOUNTER] = 0;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3492 @ Columns 7-17 - Warning S108: Arrays should be explicitly typed - change `npc` to `npc[]`

3490    int count;
3491    for(int i=0; i<256; ++i){
3492        if(summons[i]->isValid()){
               ^~~~~~~~~~


NewbieBoss.z Line 3530 @ Columns 3-18 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3528    }
3529    void EZB_SetLaserArray(int arr, int count, int index, int x, int y, int scale, int angle, int chargeTime, int upTime, int damage){
3530        Game->PlaySound(SFX_EZB_LASERCHARGE);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3531 @ Columns 3-13 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3529    void EZB_SetLaserArray(int arr, int count, int index, int x, int y, int scale, int angle, int chargeTime, int upTime, int damage){
3530        Game->PlaySound(SFX_EZB_LASERCHARGE);
3531        arr[index] = x;
            ^~~~~~~~~~


NewbieBoss.z Line 3532 @ Columns 3-19 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3530    Game->PlaySound(SFX_EZB_LASERCHARGE);
3531    arr[index] = x;
3532    arr[count+index] = y;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3533 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3531    arr[index] = x;
3532    arr[count+index] = y;
3533    arr[count*2+index] = scale;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3534 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3532    arr[count+index] = y;
3533    arr[count*2+index] = scale;
3534    arr[count*3+index] = angle;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3535 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3533    arr[count*2+index] = scale;
3534    arr[count*3+index] = angle;
3535    arr[count*4+index] = chargeTime;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3536 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3534    arr[count*3+index] = angle;
3535    arr[count*4+index] = chargeTime;
3536    arr[count*5+index] = upTime;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3537 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3535    arr[count*4+index] = chargeTime;
3536    arr[count*5+index] = upTime;
3537    arr[count*6+index] = 1;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3538 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3536    arr[count*5+index] = upTime;
3537    arr[count*6+index] = 1;
3538    arr[count*7+index] = 0;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3539 @ Columns 3-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3537    arr[count*6+index] = 1;
3538    arr[count*7+index] = 0;
3539    arr[count*8+index] = damage;
        ^~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 2774 @ Columns 14-29 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2772    }
2773    void EZB_Teleport(ffc this, npc ghost, int vars, int x, int y, int teleFrames){
2774        int size = vars[EZBI_SIZE];
                       ^~~~~~~~~~~~~~~


NewbieBoss.z Line 2775 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2773    void EZB_Teleport(ffc this, npc ghost, int vars, int x, int y, int teleFrames){
2774        int size = vars[EZBI_SIZE];
2775        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2776 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2774    int size = vars[EZBI_SIZE];
2775    int flags = vars[EZBI_FLAGS];
2776    int combo = vars[EZBI_COMBO];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 2784 @ Columns 3-18 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2782    h = Clamp(h, 1, 4);
2783    
2784    Game->PlaySound(SFX_EZB_TELEPORT);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2648 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

2646        return;
2647    
2648    int flags = vars[EZBI_FLAGS];
                    ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3508 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3506    void EZB_UpdateLaserArray(int arr, int laserColors, int count){
3507        for(int i=0; i<count; ++i){
3508            if(arr[count*6+i]){
                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3509 @ Columns 8-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3507    for(int i=0; i<count; ++i){
3508        if(arr[count*6+i]){
3509            if(arr[count*6+i]==1){
                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 35-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                             ^~~~~~


NewbieBoss.z Line 3510 @ Columns 43-55 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                     ^~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 57-71 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 73-87 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                                                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 112-126 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                                                                                          ^~~~~~~~~~~~~~


NewbieBoss.z Line 3510 @ Columns 128-142 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3508    if(arr[count*6+i]){
3509        if(arr[count*6+i]==1){
3510            EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
                                                                                                                                          ^~~~~~~~~~~~~~


NewbieBoss.z Line 3511 @ Columns 8-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3509    if(arr[count*6+i]==1){
3510        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
3511        ++arr[count*7+i];
              ^~~~~~~~~~~~~~


NewbieBoss.z Line 3512 @ Columns 9-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3510    EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
3511    ++arr[count*7+i];
3512    if(arr[count*7+i]>=arr[count*4+i]){
           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3512 @ Columns 25-39 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3510    EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], 0, laserColors, -1, 0, arr[count*7+i], arr[count*4+i]);
3511    ++arr[count*7+i];
3512    if(arr[count*7+i]>=arr[count*4+i]){
                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3513 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3511    ++arr[count*7+i];
3512    if(arr[count*7+i]>=arr[count*4+i]){
3513        Game->PlaySound(SFX_EZB_LASER);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3514 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3512    if(arr[count*7+i]>=arr[count*4+i]){
3513        Game->PlaySound(SFX_EZB_LASER);
3514        arr[count*7+i] = 0;
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3515 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3513    Game->PlaySound(SFX_EZB_LASER);
3514    arr[count*7+i] = 0;
3515    arr[count*6+i] = 2;
        ^~~~~~~~~~~~~~


NewbieBoss.z Line 3518 @ Columns 13-27 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3516        }
3517    }
3518    else if(arr[count*6+i]==2){
                ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 35-41 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                         ^~~~~~


NewbieBoss.z Line 3519 @ Columns 43-55 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                 ^~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 57-71 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                               ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 73-87 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                                               ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 89-103 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                                                               ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 125-139 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                                                                                                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3519 @ Columns 141-155 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3517    }
3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
                                                                                                                                                   ^~~~~~~~~~~~~~


NewbieBoss.z Line 3520 @ Columns 8-22 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3518    else if(arr[count*6+i]==2){
3519        EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
3520        ++arr[count*7+i];
              ^~~~~~~~~~~~~~


NewbieBoss.z Line 3521 @ Columns 9-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3519    EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
3520    ++arr[count*7+i];
3521    if(arr[count*7+i]>=arr[count*5+i]){
           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3521 @ Columns 25-39 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3519    EZB_DoLaser(LAYER_EZB_LASER, arr[i], arr[count+i], arr[count*2+i], arr[count*3+i], arr[count*8+i], laserColors, -1, 1, arr[count*7+i], arr[count*5+i]);
3520    ++arr[count*7+i];
3521    if(arr[count*7+i]>=arr[count*5+i]){
                           ^~~~~~~~~~~~~~


NewbieBoss.z Line 3522 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3520    ++arr[count*7+i];
3521    if(arr[count*7+i]>=arr[count*5+i]){
3522        arr[count*7+i] = 0;
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3523 @ Columns 7-21 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3521    if(arr[count*7+i]>=arr[count*5+i]){
3522        arr[count*7+i] = 0;
3523        arr[count*6+i] = 0;
            ^~~~~~~~~~~~~~


NewbieBoss.z Line 3721 @ Columns 15-31 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3719    }
3720    void EZB_Waitframe(ffc this, npc ghost, int vars){
3721        int flags = vars[EZBI_FLAGS];
                        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 3729 @ Columns 7-28 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3727    }
3728    
3729    if(!vars[EZBI_ATTACKFLAG]){
            ^~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3730 @ Columns 7-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3728    
3729    if(!vars[EZBI_ATTACKFLAG]){
3730        if(vars[EZBI_MAXSPEEDCOUNTER]){
               ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3731 @ Columns 8-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3729    if(!vars[EZBI_ATTACKFLAG]){
3730        if(vars[EZBI_MAXSPEEDCOUNTER]){
3731            if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
                   ^~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3731 @ Columns 34-60 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3729    if(!vars[EZBI_ATTACKFLAG]){
3730        if(vars[EZBI_MAXSPEEDCOUNTER]){
3731            if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3732 @ Columns 8-33 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3730    if(vars[EZBI_MAXSPEEDCOUNTER]){
3731        if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732            ++vars[EZBI_SPEEDUPCOUNTER];
                  ^~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 20-40 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                          ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 42-61 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                                                ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 62-82 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                                                                    ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 85-110 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                                                                                           ^~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3733 @ Columns 111-137 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3731    if(vars[EZBI_SPEEDUPCOUNTER]<vars[EZBI_MAXSPEEDCOUNTER]){
3732        ++vars[EZBI_SPEEDUPCOUNTER];
3733        ghost->Step = vars[EZBI_INITSPEED]+(vars[EZBI_TOPSPEED]-vars[EZBI_INITSPEED])*(vars[EZBI_SPEEDUPCOUNTER]/vars[EZBI_MAXSPEEDCOUNTER]);
                                                                                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3738 @ Columns 6-23 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3736    }
3737    
3738    if(vars[EZBI_BSTYPE]==3){
           ^~~~~~~~~~~~~~~~~


NewbieBoss.z Line 3742 @ Columns 5-24 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3740    ghost->HP = 1;
3741    Ghost_HP = 1;
3742    vars[EZBI_BSISDEAD] = 1;
        ^~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 356 @ Columns 5-20 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

354    else
355        stepAngle = WrapDegrees(Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())+Rand(-ghost->Homing, ghost->Homing));
356    Game->PlaySound(SFX_JUMP);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 388 @ Columns 5-20 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

386    else if(movementStyle==9){ //Rapid hop
387        stepAngle = WrapDegrees(Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())+Rand(-ghost->Haltrate, ghost->Haltrate));
388        Game->PlaySound(SFX_JUMP);
           ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 688 @ Columns 11-26 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

686    }
687    else if(constantAttack==46){ //Summon
688        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
                ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 689 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

687    else if(constantAttack==46){ //Summon
688        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
689            Game->PlaySound(SFX_EZB_SUMMON);
               ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 737 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

735    k = 2;
736    Ghost_Data = combo;
737    Game->PlaySound(SFX_EZB_DASH);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 880 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

878    EZB_FiringAnim(this, ghost, vars, 0);
879    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
880    Game->PlaySound(SFX_EZB_LASERCHARGE);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 885 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

883        EZB_Waitframe(this, ghost, vars);
884    }
885    Game->PlaySound(SFX_EZB_LASER);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 895 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

893    EZB_FaceLink(this, ghost, vars);
894    EZB_FiringAnim(this, ghost, vars, 2);
895    Game->PlaySound(SFX_EZB_LASERCHARGE);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 900 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

898        EZB_Waitframe(this, ghost, vars);
899    }
900    Game->PlaySound(SFX_EZB_LASER);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 911 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

909    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
910    k = (w*8+h*8)/2;
911    Game->PlaySound(SFX_EZB_LASERCHARGE);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 921 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

919        EZB_Waitframe(this, ghost, vars);
920    }
921    Game->PlaySound(SFX_EZB_LASER);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 937 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

935    k = Choose(-1, 1);
936    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY())+45;
937    Game->PlaySound(SFX_EZB_LASERCHARGE);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 948 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

946        EZB_Waitframe(this, ghost, vars);
947    }
948    Game->PlaySound(SFX_EZB_LASER);
       ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 982 @ Columns 11-26 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

980    }
981    if(attack==19){ //Summon 1 Enemy
982        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
                ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 984 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

982    if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
983        EZB_FiringAnim(this, ghost, vars, 0);
984        Game->PlaySound(SFX_EZB_SUMMON);
           ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 991 @ Columns 11-26 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

989    }
990    if(attack==20){ //Summon 2 Enemies
991        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
                ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 993 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

991    if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
992        EZB_FiringAnim(this, ghost, vars, 0);
993        Game->PlaySound(SFX_EZB_SUMMON);
           ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1002 @ Columns 11-26 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

1000    }
1001    if(attack==21){ //Summon 3 Enemies
1002        if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
                 ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 1004 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1002    if ( Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP ) {
1003        EZB_FiringAnim(this, ghost, vars, 0);
1004        Game->PlaySound(SFX_EZB_SUMMON);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1083 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1081    EZB_FiringAnim(this, ghost, vars, 2);
1082    k = Rand(8, 152);
1083    Game->PlaySound(SFX_EZB_LASERCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1089 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1087    }
1088    for(j=0; j<8; ++j){
1089        Game->PlaySound(SFX_EZB_LASER);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1101 @ Columns 10-25 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1099    if(j<7){ //dont show the last laser
1100        if(i==0)
1101            Game->PlaySound(SFX_EZB_LASERCHARGE);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1112 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1110    k = 0;
1111    while(true){
1112        Game->PlaySound(SFX_EZB_LASERCHARGE);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1119 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1117        EZB_Waitframe(this, ghost, vars);
1118    }
1119    Game->PlaySound(SFX_EZB_LASER);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1149 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1147    k = 1;
1148    Ghost_Data = combo;
1149    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1163 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1161    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1162    k = 2;
1163    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1188 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1186    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1187    k = 2;
1188    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1202 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1200    EZB_FaceLink(this, ghost, vars);
1201    k = 2;
1202    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1222 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1220    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1221    EZB_FaceAngle(this, ghost, vars, angle);
1222    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1246 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1244    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1245    EZB_FaceAngle(this, ghost, vars, angle);
1246    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1269 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1267    EZB_FaceAngle(this, ghost, vars, angle);
1268    
1269    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1282 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1280    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
1281    
1282    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1302 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1300        EZB_Waitframe(this, ghost, vars);
1301    }
1302    Game->PlaySound(SFX_EZB_SHOCKWAVE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1315 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1313    
1314    Ghost_Data = combo;
1315    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1335 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1333        EZB_Waitframe(this, ghost, vars);
1334    }
1335    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1345 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1343        EZB_Waitframe(this, ghost, vars);
1344    }
1345    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1347 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1345    Game->PlaySound(SFX_EZB_SHAKE);
1346    Screen->Quake = 20;
1347    Game->PlaySound(SFX_EZB_SHOCKWAVE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1359 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1357    
1358    Ghost_Data = combo;
1359    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1379 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1377        EZB_Waitframe(this, ghost, vars);
1378    }
1379    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1389 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1387        EZB_Waitframe(this, ghost, vars);
1388    }
1389    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1404 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1402    
1403    Ghost_Data = combo;
1404    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1424 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1422        EZB_Waitframe(this, ghost, vars);
1423    }
1424    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1434 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1432        EZB_Waitframe(this, ghost, vars);
1433    }
1434    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1437 @ Columns 21-36 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

1435    Screen->Quake = 20;
1436    k = Rand(4, 7);
1437    for(i=0; i<k&&(Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP); ++i){
                       ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 1445 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1443            j = m-176;
1444    }
1445    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1473 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1471    k = 3;
1472    Ghost_Data = combo;
1473    Game->PlaySound(SFX_EZB_BACKSTEP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1490 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1488    k = 2;
1489    Ghost_Data = combo;
1490    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1508 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1506    EZB_FaceLink(this, ghost, vars);
1507    EZB_FiringAnim(this, ghost, vars, 2);
1508    Game->PlaySound(SFX_EZB_LASERCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1513 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1511        EZB_Waitframe(this, ghost, vars);
1512    }
1513    Game->PlaySound(SFX_EZB_LASER);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1535 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1533    Ghost_Jump = 4;
1534    Ghost_Data = combo;
1535    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1557 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1555        EZB_Waitframe(this, ghost, vars);
1556    }
1557    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1568 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1566        EZB_Waitframe(this, ghost, vars);
1567    }
1568    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1570 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1568    Game->PlaySound(SFX_EZB_SHAKE);
1569    Screen->Quake = 4;
1570    Game->PlaySound(SFX_EZB_SHOCKWAVE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1583 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1581    Ghost_Jump = 4;
1582    Ghost_Data = combo;
1583    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1605 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1603        EZB_Waitframe(this, ghost, vars);
1604    }
1605    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1616 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1614        EZB_Waitframe(this, ghost, vars);
1615    }
1616    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1632 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1630    Ghost_Jump = 4;
1631    Ghost_Data = combo;
1632    Game->PlaySound(SFX_JUMP);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1654 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1652        EZB_Waitframe(this, ghost, vars);
1653    }
1654    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1665 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1663        EZB_Waitframe(this, ghost, vars);
1664    }
1665    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1668 @ Columns 21-36 - Warning S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.

1666    Screen->Quake = 4;
1667    k = Rand(2, 3);
1668    for(i=0; i<k&&(Screen->NumNPCs() < EZB_TOTAL_SUMMON_CAP && EZB_NumSummons(summons) < EZB_SUMMON_CAP); ++i){
                       ^~~~~~~~~~~~~~~


INFO: Use [NumNPCs] instead!
NewbieBoss.z Line 1676 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1674            j = m-176;
1675    }
1676    Game->PlaySound(SFX_FALL);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1889 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1887    x = -32+Rand(-32, 32);
1888    y = -32+Rand(-32, 32);
1889    Game->PlaySound(SFX_EZB_LASERCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1904 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1902        EZB_Waitframe(this, ghost, vars);
1903    }
1904    Game->PlaySound(SFX_EZB_LASER);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1961 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1959        y = Link->Y;
1960    }
1961    Game->PlaySound(SFX_EZB_LASERCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 1982 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

1980        y = Link->Y;
1981    }
1982    Game->PlaySound(SFX_EZB_LASER);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2043 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2041    Ghost_X = x-ghost->TileWidth*8;
2042    Ghost_Y = y-ghost->TileHeight*8;
2043    Game->PlaySound(SFX_EZB_DASH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2058 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2056    if(CenterX(ghost)<0||CenterX(ghost)>255||CenterY(ghost)<0||CenterY(ghost)>175)
2057        break;
2058    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2069 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2067    angle = Angle(CenterX(ghost), CenterY(ghost), Link->X+8, Link->Y+8);
2068    if(fireSFX)
2069        Game->PlaySound(fireSFX);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2078 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2076    angle = Angle(CenterX(ghost), CenterY(ghost), Link->X+8, Link->Y+8);
2077    if(fireSFX)
2078        Game->PlaySound(fireSFX);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2089 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2087    angle = Angle(CenterX(ghost), CenterY(ghost), Link->X+8, Link->Y+8);
2088    if(fireSFX)
2089        Game->PlaySound(fireSFX);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2109 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2107    }
2108    EZB_FiringAnim(this, ghost, vars, 1);
2109    Game->PlaySound(SFX_EZB_LIGHTNING);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2122 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2120    angle = EZB_DirAngle(Ghost_Dir);
2121    EZB_FiringAnim(this, ghost, vars, 1);
2122    Game->PlaySound(SFX_EZB_LIGHTNING);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2140 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2138    
2139    if(i%10==0){
2140        Game->PlaySound(SFX_EZB_LIGHTNING);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2152 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2150    angle = EZB_DirAngle(Ghost_Dir);
2151    
2152    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2170 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2168    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
2169    
2170    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2194 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2192    m = -1;
2193    for(j=0; j<3; ++j){
2194        Game->PlaySound(SFX_EZB_SWORD);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2221 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2219    
2220    for(j=0; j<5; ++j){
2221        Game->PlaySound(SFX_EZB_SWORD);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2239 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2237    angle = EZB_DirAngle(Ghost_Dir);
2238    
2239    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2252 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2250        EZB_Waitframe(this, ghost, vars);
2251    }
2252    Game->PlaySound(SFX_EZB_SWORDCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2259 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2257    for(i=0; i<18*8; ++i){
2258        if(i%18==0)
2259            Game->PlaySound(SFX_EZB_SWORDSPIN);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2278 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2276    angle = Angle(CenterX(ghost), CenterY(ghost), CenterLinkX(), CenterLinkY());
2277    
2278    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2283 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2281    arr1[2] = arr1[0]-arr1[1]; //Additional reach of sword
2282    
2283    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2297 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2295        EZB_Waitframe(this, ghost, vars);
2296    }
2297    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2316 @ Columns 7-22 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2314    
2315    for(j=0; j<10; ++j){
2316        Game->PlaySound(SFX_EZB_SWORD);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2332 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2330    angle = EZB_DirAngle(Ghost_Dir);
2331    
2332    Game->PlaySound(SFX_EZB_SWORD);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2345 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2343        EZB_Waitframe(this, ghost, vars);
2344    }
2345    Game->PlaySound(SFX_EZB_SWORDCHARGE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2352 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2350    for(i=0; i<18*6; ++i){
2351        if(i%18==0)
2352            Game->PlaySound(SFX_EZB_SWORDSPIN);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2367 @ Columns 6-21 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2365        EZB_Waitframe(this, ghost, vars);
2366    }
2367    Game->PlaySound(SFX_EZB_SHAKE);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2380 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2378    for(i=0; i<36; ++i){
2379        if(i==0)
2380            Game->PlaySound(SFX_EZB_SWORDSPIN);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2405 @ Columns 9-24 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2403        EZB_Waitframes(this, ghost, vars, 16);
2404    }
2405    Game->PlaySound(SFX_EZB_BARRIERSHIFT_ONDEATH);
        ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2409 @ Columns 9-24 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2407    }
2408    else{
2409        Game->PlaySound(SFX_EZB_BARRIERSHIFT_ONDEATH);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2425 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2423        --vars[EZBI_TRANSFORMCOOLDOWN];
2424    else if(j){
2425        Game->PlaySound(SFX_EZB_BARRIERSHIFT);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 2439 @ Columns 8-23 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

2437        --vars[EZBI_TRANSFORMCOOLDOWN];
2438    else if(j){
2439        Game->PlaySound(SFX_EZB_BARRIERSHIFT);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3863 @ Columns 4-19 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3861    
3862    if(fireSFX)
3863        Game->PlaySound(fireSFX);
            ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3880 @ Columns 10-25 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3878    for(j=0; j<3; ++j){
3879        if(fireSFX)
3880            Game->PlaySound(fireSFX);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3891 @ Columns 10-25 - Warning S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.

3889    for(j=0; j<4; ++j){
3890        if(fireSFX)
3891            Game->PlaySound(fireSFX);
                ^~~~~~~~~~~~~~~


INFO: Use [Audio->PlaySound] instead!
NewbieBoss.z Line 3999 @ Columns 4-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3997    tmpX = x+VectorX(dist, angle)+VectorX(dist2, angle+90)+VectorX(randOff, angle+90+angleSkew);
3998    tmpY = y+VectorY(dist, angle)+VectorY(dist2, angle+90)+VectorY(randOff, angle+90+angleSkew);
3999    lightning[2*i+0] = tmpX;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4000 @ Columns 4-20 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

3998    tmpY = y+VectorY(dist, angle)+VectorY(dist2, angle+90)+VectorY(randOff, angle+90+angleSkew);
3999    lightning[2*i+0] = tmpX;
4000    lightning[2*i+1] = tmpY;
        ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4013 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4011    for(int i=0; i<count-1; ++i){
4012        if(endDist>distPerSegment*i&&endDist<distPerSegment*(i+1)){
4013            x1 = lightning[i*2+0];
                     ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4014 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4012    if(endDist>distPerSegment*i&&endDist<distPerSegment*(i+1)){
4013        x1 = lightning[i*2+0];
4014        y1 = lightning[i*2+1];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4015 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4013    x1 = lightning[i*2+0];
4014    y1 = lightning[i*2+1];
4015    x2 = lightning[(i+1)*2+0];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4016 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4014    y1 = lightning[i*2+1];
4015    x2 = lightning[(i+1)*2+0];
4016    y2 = lightning[(i+1)*2+1];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4029 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4027    }
4028    else if(startDist>distPerSegment*i&&startDist<distPerSegment*(i+1)){
4029        x1 = lightning[i*2+0];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4030 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4028    else if(startDist>distPerSegment*i&&startDist<distPerSegment*(i+1)){
4029        x1 = lightning[i*2+0];
4030        y1 = lightning[i*2+1];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4031 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4029    x1 = lightning[i*2+0];
4030    y1 = lightning[i*2+1];
4031    x2 = lightning[(i+1)*2+0];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4032 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4030    y1 = lightning[i*2+1];
4031    x2 = lightning[(i+1)*2+0];
4032    y2 = lightning[(i+1)*2+1];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4045 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4043    }
4044    else if(startDist<=distPerSegment*i&&endDist>=distPerSegment*(i+1)){
4045        x1 = lightning[i*2+0];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4046 @ Columns 10-26 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4044    else if(startDist<=distPerSegment*i&&endDist>=distPerSegment*(i+1)){
4045        x1 = lightning[i*2+0];
4046        y1 = lightning[i*2+1];
                 ^~~~~~~~~~~~~~~~


NewbieBoss.z Line 4047 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4045    x1 = lightning[i*2+0];
4046    y1 = lightning[i*2+1];
4047    x2 = lightning[(i+1)*2+0];
             ^~~~~~~~~~~~~~~~~~~~


NewbieBoss.z Line 4048 @ Columns 10-30 - Warning S108: Arrays should be explicitly typed - change `int` to `int[]`

4046    y1 = lightning[i*2+1];
4047    x2 = lightning[(i+1)*2+0];
4048    y2 = lightning[(i+1)*2+1];
             ^~~~~~~~~~~~~~~~~~~~


Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Debug: could not resolve symbol "fcc"
Debug: could not resolve symbol "fcc"
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [
    {
      "range": {
        "start": {
          "line": 3462,
          "character": 3
        },
        "end": {
          "line": 3462,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3463,
          "character": 3
        },
        "end": {
          "line": 3463,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3465,
          "character": 4
        },
        "end": {
          "line": 3465,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3466,
          "character": 4
        },
        "end": {
          "line": 3466,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3466,
          "character": 26
        },
        "end": {
          "line": 3466,
          "character": 46
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3469,
          "character": 4
        },
        "end": {
          "line": 3469,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3470,
          "character": 4
        },
        "end": {
          "line": 3470,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3470,
          "character": 26
        },
        "end": {
          "line": 3470,
          "character": 46
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3473,
          "character": 4
        },
        "end": {
          "line": 3473,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3474,
          "character": 4
        },
        "end": {
          "line": 3474,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3474,
          "character": 26
        },
        "end": {
          "line": 3474,
          "character": 46
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3479,
          "character": 2
        },
        "end": {
          "line": 3479,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3479,
          "character": 15
        },
        "end": {
          "line": 3479,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3480,
          "character": 4
        },
        "end": {
          "line": 3480,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3499,
          "character": 7
        },
        "end": {
          "line": 3499,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `npc` to `npc[]`"
    },
    {
      "range": {
        "start": {
          "line": 3500,
          "character": 4
        },
        "end": {
          "line": 3500,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `npc` to `npc[]`"
    },
    {
      "range": {
        "start": {
          "line": 3485,
          "character": 2
        },
        "end": {
          "line": 3485,
          "character": 33
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3485,
          "character": 17
        },
        "end": {
          "line": 3485,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3486,
          "character": 4
        },
        "end": {
          "line": 3486,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2854,
          "character": 14
        },
        "end": {
          "line": 2854,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3347,
          "character": 5
        },
        "end": {
          "line": 3347,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3350,
          "character": 13
        },
        "end": {
          "line": 3350,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3309,
          "character": 5
        },
        "end": {
          "line": 3309,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3312,
          "character": 15
        },
        "end": {
          "line": 3312,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3314,
          "character": 19
        },
        "end": {
          "line": 3314,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3315,
          "character": 25
        },
        "end": {
          "line": 3315,
          "character": 45
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3316,
          "character": 19
        },
        "end": {
          "line": 3316,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3317,
          "character": 17
        },
        "end": {
          "line": 3317,
          "character": 37
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3318,
          "character": 21
        },
        "end": {
          "line": 3318,
          "character": 41
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3319,
          "character": 19
        },
        "end": {
          "line": 3319,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3320,
          "character": 17
        },
        "end": {
          "line": 3320,
          "character": 37
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3321,
          "character": 19
        },
        "end": {
          "line": 3321,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3322,
          "character": 20
        },
        "end": {
          "line": 3322,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3323,
          "character": 16
        },
        "end": {
          "line": 3323,
          "character": 36
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3326,
          "character": 4
        },
        "end": {
          "line": 3326,
          "character": 15
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3326,
          "character": 18
        },
        "end": {
          "line": 3326,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3331,
          "character": 23
        },
        "end": {
          "line": 3331,
          "character": 45
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3334,
          "character": 15
        },
        "end": {
          "line": 3334,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3337,
          "character": 2
        },
        "end": {
          "line": 3337,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3337,
          "character": 25
        },
        "end": {
          "line": 3337,
          "character": 45
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3339,
          "character": 5
        },
        "end": {
          "line": 3339,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3340,
          "character": 3
        },
        "end": {
          "line": 3340,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3342,
          "character": 3
        },
        "end": {
          "line": 3342,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3255,
          "character": 2
        },
        "end": {
          "line": 3255,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3256,
          "character": 2
        },
        "end": {
          "line": 3256,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3257,
          "character": 2
        },
        "end": {
          "line": 3257,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3258,
          "character": 2
        },
        "end": {
          "line": 3258,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3259,
          "character": 2
        },
        "end": {
          "line": 3259,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3260,
          "character": 2
        },
        "end": {
          "line": 3260,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3261,
          "character": 2
        },
        "end": {
          "line": 3261,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3262,
          "character": 2
        },
        "end": {
          "line": 3262,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3263,
          "character": 2
        },
        "end": {
          "line": 3263,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3264,
          "character": 2
        },
        "end": {
          "line": 3264,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3265,
          "character": 2
        },
        "end": {
          "line": 3265,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3267,
          "character": 3
        },
        "end": {
          "line": 3267,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3270,
          "character": 3
        },
        "end": {
          "line": 3270,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3272,
          "character": 2
        },
        "end": {
          "line": 3272,
          "character": 10
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3273,
          "character": 2
        },
        "end": {
          "line": 3273,
          "character": 10
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3275,
          "character": 2
        },
        "end": {
          "line": 3275,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3276,
          "character": 2
        },
        "end": {
          "line": 3276,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3277,
          "character": 2
        },
        "end": {
          "line": 3277,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3278,
          "character": 2
        },
        "end": {
          "line": 3278,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3279,
          "character": 2
        },
        "end": {
          "line": 3279,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3280,
          "character": 2
        },
        "end": {
          "line": 3280,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3281,
          "character": 2
        },
        "end": {
          "line": 3281,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3282,
          "character": 2
        },
        "end": {
          "line": 3282,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3283,
          "character": 2
        },
        "end": {
          "line": 3283,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3284,
          "character": 2
        },
        "end": {
          "line": 3284,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3285,
          "character": 2
        },
        "end": {
          "line": 3285,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3287,
          "character": 3
        },
        "end": {
          "line": 3287,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3290,
          "character": 3
        },
        "end": {
          "line": 3290,
          "character": 14
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3292,
          "character": 2
        },
        "end": {
          "line": 3292,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3293,
          "character": 2
        },
        "end": {
          "line": 3293,
          "character": 11
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3295,
          "character": 2
        },
        "end": {
          "line": 3295,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3236,
          "character": 2
        },
        "end": {
          "line": 3236,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3079,
          "character": 46
        },
        "end": {
          "line": 3079,
          "character": 60
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3082,
          "character": 51
        },
        "end": {
          "line": 3082,
          "character": 65
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3082,
          "character": 67
        },
        "end": {
          "line": 3082,
          "character": 81
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3082,
          "character": 83
        },
        "end": {
          "line": 3082,
          "character": 97
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3092,
          "character": 17
        },
        "end": {
          "line": 3092,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3092,
          "character": 33
        },
        "end": {
          "line": 3092,
          "character": 47
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3115,
          "character": 17
        },
        "end": {
          "line": 3115,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3115,
          "character": 33
        },
        "end": {
          "line": 3115,
          "character": 47
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3115,
          "character": 49
        },
        "end": {
          "line": 3115,
          "character": 63
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2757,
          "character": 14
        },
        "end": {
          "line": 2757,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2923,
          "character": 14
        },
        "end": {
          "line": 2923,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2930,
          "character": 14
        },
        "end": {
          "line": 2930,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2916,
          "character": 14
        },
        "end": {
          "line": 2916,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2685,
          "character": 14
        },
        "end": {
          "line": 2685,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2689,
          "character": 16
        },
        "end": {
          "line": 2689,
          "character": 33
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2690,
          "character": 16
        },
        "end": {
          "line": 2690,
          "character": 33
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2595,
          "character": 22
        },
        "end": {
          "line": 2595,
          "character": 41
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2596,
          "character": 14
        },
        "end": {
          "line": 2596,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2597,
          "character": 14
        },
        "end": {
          "line": 2597,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3612,
          "character": 14
        },
        "end": {
          "line": 3612,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3626,
          "character": 2
        },
        "end": {
          "line": 3626,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3627,
          "character": 2
        },
        "end": {
          "line": 3627,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3628,
          "character": 5
        },
        "end": {
          "line": 3628,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3629,
          "character": 6
        },
        "end": {
          "line": 3629,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3630,
          "character": 6
        },
        "end": {
          "line": 3630,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3631,
          "character": 6
        },
        "end": {
          "line": 3631,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3632,
          "character": 6
        },
        "end": {
          "line": 3632,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3633,
          "character": 3
        },
        "end": {
          "line": 3633,
          "character": 18
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3633,
          "character": 41
        },
        "end": {
          "line": 3633,
          "character": 56
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3635,
          "character": 26
        },
        "end": {
          "line": 3635,
          "character": 41
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3636,
          "character": 4
        },
        "end": {
          "line": 3636,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3637,
          "character": 4
        },
        "end": {
          "line": 3637,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3640,
          "character": 27
        },
        "end": {
          "line": 3640,
          "character": 42
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3669,
          "character": 5
        },
        "end": {
          "line": 3669,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3670,
          "character": 5
        },
        "end": {
          "line": 3670,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3671,
          "character": 5
        },
        "end": {
          "line": 3671,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3672,
          "character": 5
        },
        "end": {
          "line": 3672,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3673,
          "character": 5
        },
        "end": {
          "line": 3673,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3674,
          "character": 5
        },
        "end": {
          "line": 3674,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3674,
          "character": 23
        },
        "end": {
          "line": 3674,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3676,
          "character": 6
        },
        "end": {
          "line": 3676,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3678,
          "character": 6
        },
        "end": {
          "line": 3678,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3680,
          "character": 6
        },
        "end": {
          "line": 3680,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3684,
          "character": 5
        },
        "end": {
          "line": 3684,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3685,
          "character": 5
        },
        "end": {
          "line": 3685,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3689,
          "character": 10
        },
        "end": {
          "line": 3689,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 16
        },
        "end": {
          "line": 3690,
          "character": 31
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 32
        },
        "end": {
          "line": 3690,
          "character": 48
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 50
        },
        "end": {
          "line": 3690,
          "character": 65
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3690,
          "character": 66
        },
        "end": {
          "line": 3690,
          "character": 82
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3691,
          "character": 6
        },
        "end": {
          "line": 3691,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3695,
          "character": 5
        },
        "end": {
          "line": 3695,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3696,
          "character": 6
        },
        "end": {
          "line": 3696,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3698,
          "character": 7
        },
        "end": {
          "line": 3698,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3702,
          "character": 7
        },
        "end": {
          "line": 3702,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3704,
          "character": 7
        },
        "end": {
          "line": 3704,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3706,
          "character": 7
        },
        "end": {
          "line": 3706,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3708,
          "character": 4
        },
        "end": {
          "line": 3708,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3709,
          "character": 4
        },
        "end": {
          "line": 3709,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3368,
          "character": 16
        },
        "end": {
          "line": 3368,
          "character": 34
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3369,
          "character": 2
        },
        "end": {
          "line": 3369,
          "character": 15
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3379,
          "character": 2
        },
        "end": {
          "line": 3379,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3382,
          "character": 3
        },
        "end": {
          "line": 3382,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3384,
          "character": 4
        },
        "end": {
          "line": 3384,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3386,
          "character": 4
        },
        "end": {
          "line": 3386,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3420,
          "character": 6
        },
        "end": {
          "line": 3420,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3421,
          "character": 6
        },
        "end": {
          "line": 3421,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3422,
          "character": 6
        },
        "end": {
          "line": 3422,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3425,
          "character": 6
        },
        "end": {
          "line": 3425,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3426,
          "character": 6
        },
        "end": {
          "line": 3426,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3427,
          "character": 6
        },
        "end": {
          "line": 3427,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3435,
          "character": 6
        },
        "end": {
          "line": 3435,
          "character": 34
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3437,
          "character": 6
        },
        "end": {
          "line": 3437,
          "character": 34
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3448,
          "character": 5
        },
        "end": {
          "line": 3448,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3448,
          "character": 22
        },
        "end": {
          "line": 3448,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3449,
          "character": 3
        },
        "end": {
          "line": 3449,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3453,
          "character": 5
        },
        "end": {
          "line": 3453,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3454,
          "character": 33
        },
        "end": {
          "line": 3454,
          "character": 70
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3454,
          "character": 53
        },
        "end": {
          "line": 3454,
          "character": 68
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3127,
          "character": 14
        },
        "end": {
          "line": 3127,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3128,
          "character": 14
        },
        "end": {
          "line": 3128,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3361,
          "character": 2
        },
        "end": {
          "line": 3361,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3362,
          "character": 2
        },
        "end": {
          "line": 3362,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3364,
          "character": 2
        },
        "end": {
          "line": 3364,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3491,
          "character": 6
        },
        "end": {
          "line": 3491,
          "character": 16
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `npc` to `npc[]`"
    },
    {
      "range": {
        "start": {
          "line": 3529,
          "character": 2
        },
        "end": {
          "line": 3529,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3530,
          "character": 2
        },
        "end": {
          "line": 3530,
          "character": 12
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3531,
          "character": 2
        },
        "end": {
          "line": 3531,
          "character": 18
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3532,
          "character": 2
        },
        "end": {
          "line": 3532,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3533,
          "character": 2
        },
        "end": {
          "line": 3533,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3534,
          "character": 2
        },
        "end": {
          "line": 3534,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3535,
          "character": 2
        },
        "end": {
          "line": 3535,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3536,
          "character": 2
        },
        "end": {
          "line": 3536,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3537,
          "character": 2
        },
        "end": {
          "line": 3537,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3538,
          "character": 2
        },
        "end": {
          "line": 3538,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2773,
          "character": 13
        },
        "end": {
          "line": 2773,
          "character": 28
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2774,
          "character": 14
        },
        "end": {
          "line": 2774,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2775,
          "character": 14
        },
        "end": {
          "line": 2775,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 2783,
          "character": 2
        },
        "end": {
          "line": 2783,
          "character": 17
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2647,
          "character": 14
        },
        "end": {
          "line": 2647,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3507,
          "character": 6
        },
        "end": {
          "line": 3507,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3508,
          "character": 7
        },
        "end": {
          "line": 3508,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 34
        },
        "end": {
          "line": 3509,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 42
        },
        "end": {
          "line": 3509,
          "character": 54
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 56
        },
        "end": {
          "line": 3509,
          "character": 70
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 72
        },
        "end": {
          "line": 3509,
          "character": 86
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 111
        },
        "end": {
          "line": 3509,
          "character": 125
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3509,
          "character": 127
        },
        "end": {
          "line": 3509,
          "character": 141
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3510,
          "character": 7
        },
        "end": {
          "line": 3510,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3511,
          "character": 8
        },
        "end": {
          "line": 3511,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3511,
          "character": 24
        },
        "end": {
          "line": 3511,
          "character": 38
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3512,
          "character": 6
        },
        "end": {
          "line": 3512,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3513,
          "character": 6
        },
        "end": {
          "line": 3513,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3514,
          "character": 6
        },
        "end": {
          "line": 3514,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3517,
          "character": 12
        },
        "end": {
          "line": 3517,
          "character": 26
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 34
        },
        "end": {
          "line": 3518,
          "character": 40
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 42
        },
        "end": {
          "line": 3518,
          "character": 54
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 56
        },
        "end": {
          "line": 3518,
          "character": 70
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 72
        },
        "end": {
          "line": 3518,
          "character": 86
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 88
        },
        "end": {
          "line": 3518,
          "character": 102
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 124
        },
        "end": {
          "line": 3518,
          "character": 138
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3518,
          "character": 140
        },
        "end": {
          "line": 3518,
          "character": 154
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3519,
          "character": 7
        },
        "end": {
          "line": 3519,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3520,
          "character": 8
        },
        "end": {
          "line": 3520,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3520,
          "character": 24
        },
        "end": {
          "line": 3520,
          "character": 38
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3521,
          "character": 6
        },
        "end": {
          "line": 3521,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3522,
          "character": 6
        },
        "end": {
          "line": 3522,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3720,
          "character": 14
        },
        "end": {
          "line": 3720,
          "character": 30
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3728,
          "character": 6
        },
        "end": {
          "line": 3728,
          "character": 27
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3729,
          "character": 6
        },
        "end": {
          "line": 3729,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3730,
          "character": 7
        },
        "end": {
          "line": 3730,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3730,
          "character": 33
        },
        "end": {
          "line": 3730,
          "character": 59
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3731,
          "character": 7
        },
        "end": {
          "line": 3731,
          "character": 32
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 19
        },
        "end": {
          "line": 3732,
          "character": 39
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 41
        },
        "end": {
          "line": 3732,
          "character": 60
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 61
        },
        "end": {
          "line": 3732,
          "character": 81
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 84
        },
        "end": {
          "line": 3732,
          "character": 109
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3732,
          "character": 110
        },
        "end": {
          "line": 3732,
          "character": 136
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3737,
          "character": 5
        },
        "end": {
          "line": 3737,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3741,
          "character": 4
        },
        "end": {
          "line": 3741,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 355,
          "character": 4
        },
        "end": {
          "line": 355,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 387,
          "character": 4
        },
        "end": {
          "line": 387,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 687,
          "character": 10
        },
        "end": {
          "line": 687,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 688,
          "character": 6
        },
        "end": {
          "line": 688,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 736,
          "character": 5
        },
        "end": {
          "line": 736,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 879,
          "character": 5
        },
        "end": {
          "line": 879,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 884,
          "character": 5
        },
        "end": {
          "line": 884,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 894,
          "character": 5
        },
        "end": {
          "line": 894,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 899,
          "character": 5
        },
        "end": {
          "line": 899,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 910,
          "character": 5
        },
        "end": {
          "line": 910,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 920,
          "character": 5
        },
        "end": {
          "line": 920,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 936,
          "character": 5
        },
        "end": {
          "line": 936,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 947,
          "character": 5
        },
        "end": {
          "line": 947,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 981,
          "character": 10
        },
        "end": {
          "line": 981,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 983,
          "character": 6
        },
        "end": {
          "line": 983,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 990,
          "character": 10
        },
        "end": {
          "line": 990,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 992,
          "character": 6
        },
        "end": {
          "line": 992,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1001,
          "character": 10
        },
        "end": {
          "line": 1001,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1003,
          "character": 6
        },
        "end": {
          "line": 1003,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1082,
          "character": 5
        },
        "end": {
          "line": 1082,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1088,
          "character": 6
        },
        "end": {
          "line": 1088,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1100,
          "character": 9
        },
        "end": {
          "line": 1100,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1111,
          "character": 6
        },
        "end": {
          "line": 1111,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1118,
          "character": 6
        },
        "end": {
          "line": 1118,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1148,
          "character": 5
        },
        "end": {
          "line": 1148,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1162,
          "character": 5
        },
        "end": {
          "line": 1162,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1187,
          "character": 5
        },
        "end": {
          "line": 1187,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1201,
          "character": 5
        },
        "end": {
          "line": 1201,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1221,
          "character": 5
        },
        "end": {
          "line": 1221,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1245,
          "character": 5
        },
        "end": {
          "line": 1245,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1268,
          "character": 5
        },
        "end": {
          "line": 1268,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1281,
          "character": 5
        },
        "end": {
          "line": 1281,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1301,
          "character": 5
        },
        "end": {
          "line": 1301,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1314,
          "character": 5
        },
        "end": {
          "line": 1314,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1334,
          "character": 5
        },
        "end": {
          "line": 1334,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1344,
          "character": 5
        },
        "end": {
          "line": 1344,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1346,
          "character": 5
        },
        "end": {
          "line": 1346,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1358,
          "character": 5
        },
        "end": {
          "line": 1358,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1378,
          "character": 5
        },
        "end": {
          "line": 1378,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1388,
          "character": 5
        },
        "end": {
          "line": 1388,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1403,
          "character": 5
        },
        "end": {
          "line": 1403,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1423,
          "character": 5
        },
        "end": {
          "line": 1423,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1433,
          "character": 5
        },
        "end": {
          "line": 1433,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1436,
          "character": 20
        },
        "end": {
          "line": 1436,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1444,
          "character": 6
        },
        "end": {
          "line": 1444,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1472,
          "character": 6
        },
        "end": {
          "line": 1472,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1489,
          "character": 6
        },
        "end": {
          "line": 1489,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1507,
          "character": 5
        },
        "end": {
          "line": 1507,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1512,
          "character": 5
        },
        "end": {
          "line": 1512,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1534,
          "character": 5
        },
        "end": {
          "line": 1534,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1556,
          "character": 5
        },
        "end": {
          "line": 1556,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1567,
          "character": 5
        },
        "end": {
          "line": 1567,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1569,
          "character": 5
        },
        "end": {
          "line": 1569,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1582,
          "character": 5
        },
        "end": {
          "line": 1582,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1604,
          "character": 5
        },
        "end": {
          "line": 1604,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1615,
          "character": 5
        },
        "end": {
          "line": 1615,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1631,
          "character": 5
        },
        "end": {
          "line": 1631,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1653,
          "character": 5
        },
        "end": {
          "line": 1653,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1664,
          "character": 5
        },
        "end": {
          "line": 1664,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1667,
          "character": 20
        },
        "end": {
          "line": 1667,
          "character": 35
        }
      },
      "severity": 2,
      "message": "S094: Function 'screendata::NumNPCs()' is deprecated, and should not be used.\nUse [NumNPCs] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1675,
          "character": 6
        },
        "end": {
          "line": 1675,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1888,
          "character": 5
        },
        "end": {
          "line": 1888,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1903,
          "character": 5
        },
        "end": {
          "line": 1903,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1960,
          "character": 5
        },
        "end": {
          "line": 1960,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 1981,
          "character": 5
        },
        "end": {
          "line": 1981,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2042,
          "character": 6
        },
        "end": {
          "line": 2042,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2057,
          "character": 6
        },
        "end": {
          "line": 2057,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2068,
          "character": 6
        },
        "end": {
          "line": 2068,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2077,
          "character": 6
        },
        "end": {
          "line": 2077,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2088,
          "character": 6
        },
        "end": {
          "line": 2088,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2108,
          "character": 5
        },
        "end": {
          "line": 2108,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2121,
          "character": 5
        },
        "end": {
          "line": 2121,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2139,
          "character": 7
        },
        "end": {
          "line": 2139,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2151,
          "character": 5
        },
        "end": {
          "line": 2151,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2169,
          "character": 5
        },
        "end": {
          "line": 2169,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2193,
          "character": 6
        },
        "end": {
          "line": 2193,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2220,
          "character": 6
        },
        "end": {
          "line": 2220,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2238,
          "character": 5
        },
        "end": {
          "line": 2238,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2251,
          "character": 5
        },
        "end": {
          "line": 2251,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2258,
          "character": 7
        },
        "end": {
          "line": 2258,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2277,
          "character": 5
        },
        "end": {
          "line": 2277,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2282,
          "character": 5
        },
        "end": {
          "line": 2282,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2296,
          "character": 5
        },
        "end": {
          "line": 2296,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2315,
          "character": 6
        },
        "end": {
          "line": 2315,
          "character": 21
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2331,
          "character": 5
        },
        "end": {
          "line": 2331,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2344,
          "character": 5
        },
        "end": {
          "line": 2344,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2351,
          "character": 7
        },
        "end": {
          "line": 2351,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2366,
          "character": 5
        },
        "end": {
          "line": 2366,
          "character": 20
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2379,
          "character": 7
        },
        "end": {
          "line": 2379,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2404,
          "character": 8
        },
        "end": {
          "line": 2404,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2408,
          "character": 8
        },
        "end": {
          "line": 2408,
          "character": 23
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2424,
          "character": 7
        },
        "end": {
          "line": 2424,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 2438,
          "character": 7
        },
        "end": {
          "line": 2438,
          "character": 22
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3862,
          "character": 3
        },
        "end": {
          "line": 3862,
          "character": 18
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3879,
          "character": 9
        },
        "end": {
          "line": 3879,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3890,
          "character": 9
        },
        "end": {
          "line": 3890,
          "character": 24
        }
      },
      "severity": 2,
      "message": "S094: Function 'Game::PlaySound(int)' is deprecated, and should not be used.\nUse [Audio->PlaySound] instead!"
    },
    {
      "range": {
        "start": {
          "line": 3998,
          "character": 3
        },
        "end": {
          "line": 3998,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 3999,
          "character": 3
        },
        "end": {
          "line": 3999,
          "character": 19
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4012,
          "character": 9
        },
        "end": {
          "line": 4012,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4013,
          "character": 9
        },
        "end": {
          "line": 4013,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4014,
          "character": 9
        },
        "end": {
          "line": 4014,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4015,
          "character": 9
        },
        "end": {
          "line": 4015,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4028,
          "character": 9
        },
        "end": {
          "line": 4028,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4029,
          "character": 9
        },
        "end": {
          "line": 4029,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4030,
          "character": 9
        },
        "end": {
          "line": 4030,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4031,
          "character": 9
        },
        "end": {
          "line": 4031,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4044,
          "character": 9
        },
        "end": {
          "line": 4044,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4045,
          "character": 9
        },
        "end": {
          "line": 4045,
          "character": 25
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4046,
          "character": 9
        },
        "end": {
          "line": 4046,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    },
    {
      "range": {
        "start": {
          "line": 4047,
          "character": 9
        },
        "end": {
          "line": 4047,
          "character": 29
        }
      },
      "severity": 2,
      "message": "S108: Arrays should be explicitly typed - change `int` to `int[]`"
    }
  ],
  "metadata": {
    "currentFileSymbols": 392,
    "symbols": 814,
    "identifiers": 10363,
    "elided": true
  }
}

zasm:

PUSHR D0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0 0.0047
SETR D4 SP2
STOREV 0 0.0046
STOREV 0 0.0045
STOREV 0 0.0044
STOREV 0 0.0043
STOREV 0 0.0042
STOREV 0 0.0041
STOREV 0 0.0040
STOREV 0 0.0039
STOREV 0 0.0038
STOREV 0 0.0037
ALLOCATEMEMV D2 2 0
STORE D2 0.0036
ALLOCATEMEMV D2 256 0
STORE D2 0.0035
PUSHR D4
LOAD D2 0.0047; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Params Start
PUSHR D2
LOAD D2 0.0048
PUSHR D2; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Params End
CALLFUNC 2.7407; UsrFunc[npc Ghost_InitAutoGhost(ffc, int)] Call
POP D4
STORE D2 0.0034
ALLOCATEMEMV D2 256 0
STORE D2 0.0033
STOREV 0 0.0032
STOREV 0 0.0031
ALLOCATEMEMV D2 200 0
STORE D2 0.0030
ALLOCATEMEMV D2 6 0
PUSHR D2
WRITEPODARRAY D2 {119,118,124,119,118,124}
POP D2
STORE D2 0.0028
ALLOCATEMEMV D2 400 0
STORE D2 0.0027
SETV D2 0; for() #254 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #254 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 67 ==; for() #254 TestFail?
LOAD D2 0.0034; for() #254 Body Start
PUSHR D2
LOAD D2 0.0046
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0046
ADDV D2 300
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #254 Body End
LOAD D2 0.0046; for() #254 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 42; for() #254 End
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 312 D2
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 300
STORE D2 0.0026
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 301
STORE D2 0.0025
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 302
STORE D2 0.0024
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 303
STORE D2 0.0023
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 304
STORE D2 0.0022
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 305
STORE D2 0.0021
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 306
STORE D2 0.0020
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 307
STORE D2 0.0019
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 308
STORE D2 0.0018
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0017
STOREV 0 0.0016
STOREV 0 0.0015
LOAD D2 0.0025; if() #521 Test
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 136 ==; Test 'if'
SETV D2 44; if() #521 Body Start
STORE D2 0.0016
GOTO 167; if() #521 Body End
LOAD D2 0.0025; if() #522 Test AND if() #521 Else Start
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 144 ==; Test 'if'
SETV D2 45; if() #522 Body Start
STORE D2 0.0016
GOTO 167; if() #522 Body End
LOAD D2 0.0025; if() #523 Test AND if() #522 Else Start
COMPAREV D2 46
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 152 ==; Test 'if'
SETV D2 46; if() #523 Body Start
STORE D2 0.0016
GOTO 167; if() #523 Body End
LOAD D2 0.0025; if() #524 Test AND if() #523 Else Start
COMPAREV D2 47
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 160 ==; Test 'if'
SETV D2 47; if() #524 Body Start
STORE D2 0.0016
GOTO 167; if() #524 Body End
LOAD D2 0.0025; if() #934 Test AND if() #524 Else Start
COMPAREV D2 48
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 167 ==; Test 'if'
SETV D2 48; if() #934 Body Start
STORE D2 0.0016; if() #934 Body End
LOAD D2 0.0016; if() #524 Else End AND if() #523 Else End AND if() #522 Else End AND if() #521 Else End AND if() #935 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 178 ==; Test 'if'
LOAD D2 0.0024; if() #935 Body Start
STORE D2 0.0025
LOAD D2 0.0023
STORE D2 0.0024
SETV D2 0
STORE D2 0.0023; if() #935 Body End
LOAD D2 0.0022
ANDV D2 15
STORE D2 0.0014
LOAD D2 0.0022; InlineFunc[int Floor(int)] Params Start
RSHIFTV D2 4; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
ANDV D2 15
STORE D2 0.0013
LOAD D2 0.0017; if() #936 Test
ANDV D2 512
COMPAREV D2 0
GOTOCMP 196 !=
LOAD D2 0.0017
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 196 !=
SETV D2 1
GOTO 197
SETV D2 0
COMPAREV D2 0
GOTOCMP 206 ==; Test 'if'
PUSHR D4; if() #936 Body Start
PUSHV 8; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 16; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #936 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCID
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0024
PUSHR D2
LOAD D2 0.0023
PUSHR D2
LOAD D2 0.0030
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.4929; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0020
ANDV D2 15
STORE D2 0.0012
LOAD D2 0.0020
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0011
LOAD D2 0.0011; if() #937 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 243 ==; Test 'if'
LOAD D2 0.0012; if() #937 Body Start
STORE D2 0.0011; if() #937 Body End
PUSHR D4
LOAD D2 0.0012; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0012
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0011
LOAD D2 0.0034
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 310 D2
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0010
PUSHR D4
LOAD D2 0.0047; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
PUSHARGSV -1 0.0002
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params End
CALLFUNC 2.7851; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params End
CALLFUNC 2.7615; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #525 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 309 ==; Test 'if'
PUSHR D4; if() #525 Body Start
PUSHV 512; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
GOTO 317; if() #525 Body End
LOAD D2 0.0017; if() #938 Test AND if() #525 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 317 ==; Test 'if'
PUSHR D4; if() #938 Body Start
PUSHV 256; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #938 Body End
LOAD D2 0.0017; if() #525 Else End AND if() #939 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 325 ==; Test 'if'
PUSHR D4; if() #939 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #939 Body End
LOAD D2 0.0017; if() #526 Test
ANDV D2 4
COMPAREV D2 0
GOTOCMP 369 ==; Test 'if'
PUSHR D4; if() #526 Body Start
PUSHV 7168; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 65536; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0047
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0017; if() #940 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 359 ==
PUSHR D4
CALLFUNC 2.7598; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 359 !=
SETV D2 1
GOTO 360
SETV D2 0
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
PUSHR D4; if() #940 Body Start
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 8
SETR GD3 D2; if() #940 Body End
GOTO 377; if() #526 Body End
LOAD D2 0.0017; if() #941 Test AND if() #526 Else Start
ANDV D2 8
COMPAREV D2 0
GOTOCMP 377 ==; Test 'if'
PUSHR D4; if() #941 Body Start
PUSHV 65538; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #941 Body End
LOAD D2 0.0017; if() #526 Else End AND if() #942 Test
ANDV D2 256
COMPAREV D2 0
GOTOCMP 385 ==; Test 'if'
PUSHR D4; if() #942 Body Start
PUSHV 1; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #942 Body End
STOREV -1 0.0009
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
STORE D2 0.0008
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006
ALLOCATEMEMV D2 16 0
STORE D2 0.0005
STOREV -1 0.0004
STOREV 0 0.0003
LOAD D2 0.0026; if() #944 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 456 ==; Test 'if'
SETV D3 360; InlineFunc[int Rand(int)] Params AND if() #944 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0037; if() #944 Body End
LOAD D2 0.0026; if() #945 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 464 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #945 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0007; if() #945 Body End
LOAD D2 0.0026; if() #946 Test
COMPAREV D2 12
GOTOCMP 472 ==
LOAD D2 0.0026
COMPAREV D2 13
GOTOCMP 472 ==
SETV D2 0
GOTO 473
SETV D2 1
COMPAREV D2 0
GOTOCMP 480 ==; Test 'if'
LOAD D2 0.0034; if() #946 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0006; if() #946 Body End
STOREV 0 0.0002; while(true) #9 Body [Opt:AlwaysOn] Start
LOAD D2 0.0026; if() #527 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 521 ==; Test 'if'
PUSHR D4; if() #527 Body Start
LOAD D2 0.0009; UsrFunc[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHALTRATE
PUSHV 48; UsrFunc[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Params End
CALLFUNC 2.6677; UsrFunc[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0009
LOAD D2 0.0009; if() #947 Test
COMPAREV D2 16
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #947 Body Start
STORE D2 0.0002; if() #947 Body End
GOTO 3499; if() #527 Body End
LOAD D2 0.0026; if() #528 Test AND if() #527 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 566 ==; Test 'if'
PUSHR D4; if() #528 Body Start
LOAD D2 0.0009; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params End
CALLFUNC 2.4363; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Call
POP D4
STORE D2 0.0009
LOAD D2 0.0008; if() #529 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 557 ==; Test 'if'
LOAD D2 0.0008; if() #529 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #529 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #948 Test AND if() #529 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #948 Body Start
STORE D2 0.0002; if() #948 Body End
GOTO 3499; if() #529 Else End AND if() #528 Body End
LOAD D2 0.0026; if() #530 Test AND if() #528 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 611 ==; Test 'if'
PUSHR D4; if() #530 Body Start
LOAD D2 0.0009; UsrFunc[int Ghost_ConstantWalk8(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER; UsrFunc[int Ghost_ConstantWalk8(int, int, int, int, int)] Params End
CALLFUNC 2.5586; UsrFunc[int Ghost_ConstantWalk8(int, int, int, int, int)] Call
POP D4
STORE D2 0.0009
LOAD D2 0.0008; if() #531 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 602 ==; Test 'if'
LOAD D2 0.0008; if() #531 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #531 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #949 Test AND if() #531 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #949 Body Start
STORE D2 0.0002; if() #949 Body End
GOTO 3499; if() #531 Else End AND if() #530 Body End
LOAD D2 0.0026; if() #532 Test AND if() #530 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 761 ==; Test 'if'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #950 Test AND if() #532 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 684 ==; Test 'if'
PUSHR D4; if() #950 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #950 Body End
LOAD D2 0.0034; if() #951 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
GOTOCMP 726 <=
SETR D2 LINKACTION
COMPAREV D2 2
GOTOCMP 726 !=
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
POP D3
COMPARER D3 D2
GOTOCMP 726 >=
SETV D2 1
GOTO 727
SETV D2 0
COMPAREV D2 0
GOTOCMP 743 ==; Test 'if'
LOAD D2 0.0008; if() #952 Test AND if() #951 Body Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 5
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 743 ==; Test 'if'
SETV D2 1; if() #952 Body Start
STORE D2 0.0002; if() #952 Body End
LOAD D2 0.0008; if() #951 Body End AND if() #533 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 752 ==; Test 'if'
LOAD D2 0.0008; if() #533 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #533 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #953 Test AND if() #533 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #953 Body Start
STORE D2 0.0002; if() #953 Body End
GOTO 3499; if() #533 Else End AND if() #532 Body End
LOAD D2 0.0026; if() #534 Test AND if() #532 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 894 ==; Test 'if'
PUSHR D4; if() #534 Body Start
LOAD D2 0.0038; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0037
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0038; if() #954 Test
COMPAREV D2 0
GOTOCMP 785 >=
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 798 ==
LOAD D2 0.0038
COMPAREV D2 0
GOTOCMP 796 <=
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 798 ==
SETV D2 0
GOTO 799
SETV D2 1
COMPAREV D2 0
GOTOCMP 806 ==; Test 'if'
LOAD D2 0.0038; if() #954 Body Start
SUBV2 0 D2
STORE D2 0.0038
SETV D2 1
STORE D2 0.0015; if() #954 Body End
LOAD D2 0.0037; if() #955 Test
COMPAREV D2 0
GOTOCMP 817 >=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 829 ==
LOAD D2 0.0037
COMPAREV D2 0
GOTOCMP 827 <=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 829 ==
SETV D2 0
GOTO 830
SETV D2 1
COMPAREV D2 0
GOTOCMP 842 ==; Test 'if'
LOAD D2 0.0037; if() #955 Body Start
SUBV2 0 D2
STORE D2 0.0037
LOAD D2 0.0015; if() #956 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 842 ==; Test 'if'
SETV D2 1; if() #956 Body Start
STORE D2 0.0015; if() #956 Body End
PUSHR D4; if() #955 Body End
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0038
MULTV D2 10
PUSHR D2
LOAD D2 0.0037
MULTV D2 10
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0692; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
LOAD D2 0.0017; if() #957 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 876 ==; Test 'if'
PUSHR D4; if() #957 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #957 Body End
LOAD D2 0.0008; if() #535 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 885 ==; Test 'if'
LOAD D2 0.0008; if() #535 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #535 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #958 Test AND if() #535 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #958 Body Start
STORE D2 0.0002; if() #958 Body End
GOTO 3499; if() #535 Else End AND if() #534 Body End
LOAD D2 0.0026; if() #536 Test AND if() #534 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1000 ==; Test 'if'
PUSHR D4; if() #536 Body Start
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0692; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
LOAD D2 0.0017; if() #959 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 935 ==; Test 'if'
PUSHR D4; if() #959 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #959 Body End
LOAD D2 0.0008; if() #537 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 944 ==; Test 'if'
LOAD D2 0.0008; if() #537 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 952; if() #537 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #960 Test AND if() #537 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 952 ==; Test 'if'
SETV D2 1; if() #960 Body Start
STORE D2 0.0002; if() #960 Body End
LOAD D2 0.0009; if() #537 Else End
ADDV D2 1
STORE D2 0.0009
LOAD D2 0.0009; if() #961 Test
COMPAREV D2 80
GOTOCMP 964 <=
SETV D3 10; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 964 !=
SETV D2 1
GOTO 965
SETV D2 0
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #961 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
SETV D2 0
STORE D2 0.0009
LOAD D2 0.0015; if() #962 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #962 Body Start
STORE D2 0.0015; if() #962 Body End
GOTO 3499; if() #961 Body End AND if() #536 Body End
LOAD D2 0.0026; if() #538 Test AND if() #536 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1214 ==; Test 'if'
LOAD D2 0.0034; if() #538 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
MULTV D2 0.0010
STORE D2 0.0001
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
MULTV D2 0.0100
STORE D2 0
PUSHR D4
LOAD D2 0.0038; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
LOAD D2 0.0037; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0037
PUSHR D4
LOAD D2 0.0038; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0037
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0038; if() #963 Test
COMPAREV D2 0
GOTOCMP 1100 >=
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1113 ==
LOAD D2 0.0038
COMPAREV D2 0
GOTOCMP 1111 <=
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1113 ==
SETV D2 0
GOTO 1114
SETV D2 1
COMPAREV D2 0
GOTOCMP 1126 ==; Test 'if'
LOAD D2 0.0038; if() #963 Body Start
SUBV2 0 D2
STORE D2 0.0038
LOAD D2 0.0015; if() #964 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1126 ==; Test 'if'
SETV D2 1; if() #964 Body Start
STORE D2 0.0015; if() #964 Body End
LOAD D2 0.0037; if() #963 Body End AND if() #965 Test
COMPAREV D2 0
GOTOCMP 1137 >=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1149 ==
LOAD D2 0.0037
COMPAREV D2 0
GOTOCMP 1147 <=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1149 ==
SETV D2 0
GOTO 1150
SETV D2 1
COMPAREV D2 0
GOTOCMP 1162 ==; Test 'if'
LOAD D2 0.0037; if() #965 Body Start
SUBV2 0 D2
STORE D2 0.0037
LOAD D2 0.0015; if() #966 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1162 ==; Test 'if'
SETV D2 1; if() #966 Body Start
STORE D2 0.0015; if() #966 Body End
PUSHR D4; if() #965 Body End
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0038
MULTV D2 10
PUSHR D2
LOAD D2 0.0037
MULTV D2 10
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0692; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
LOAD D2 0.0017; if() #967 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1196 ==; Test 'if'
PUSHR D4; if() #967 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #967 Body End
LOAD D2 0.0008; if() #539 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1205 ==; Test 'if'
LOAD D2 0.0008; if() #539 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #539 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #968 Test AND if() #539 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #968 Body Start
STORE D2 0.0002; if() #968 Body End
GOTO 3499; if() #539 Else End AND if() #538 Body End
LOAD D2 0.0026; if() #540 Test AND if() #538 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1426 ==; Test 'if'
PUSHR D4; if() #540 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 8
PUSHR D2
PUSHVARGV 0; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 8
PUSHVARGV 16; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0034; if() #541 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1282 ==; Test 'if'
PUSHARGSR D4 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND if() #541 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV -30; UsrFunc[int Rand(int, int)] Params Start
PUSHV 30; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0007
GOTO 1322; if() #541 Body End
PUSHARGSR D4 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND if() #541 Else Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int Rand(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHOMING; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0007; if() #541 Else End
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
SETR D2 GD5; while() #10 Test
COMPAREV D2 0
GOTOCMP 1334 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 1334 >
SETV D2 0
GOTO 1335
SETV D2 1
COMPAREV D2 0
GOTOCMP 1384 ==; Test 'while'
PUSHR D4; while() #10 Body Start
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0692; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #969 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1374 ==; Test 'if'
PUSHR D4; if() #969 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #969 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #10 Body End
GOTO 1326; while() #10 End
LOAD D2 0.0006; if() #970 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1392 ==; Test 'if'
LOAD D2 0.0006; if() #970 Body Start
SUBV D2 1
STORE D2 0.0006; if() #970 Body End
LOAD D2 0.0006; if() #971 Test
COMPAREV D2 0
GOTOCMP 1410 <=
LOAD D2 0.0034; InlineFunc[int Ceiling(int)] Params Start AND InlineFunc[int Max(int, int)] Params Start AND InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.5000; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
PUSHVARGR D2
PUSHVARGV 2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 1410 ==
SETV D2 0
GOTO 1411
SETV D2 1
COMPAREV D2 0
GOTOCMP 1420 ==; Test 'if'
SETV D2 1; if() #971 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006; if() #971 Body End
LOAD D2 0.0002; unless() #972 Test
COMPAREV D2 0
GOTOCMP 3499 !=; Test 'unless'
SETV D2 1; unless() #972 Body Start
STORE D2 0.0015; unless() #972 Body End
GOTO 3499; if() #540 Body End
LOAD D2 0.0026; if() #542 Test AND if() #540 Else Start
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1503 ==; Test 'if'
PUSHR D4; if() #542 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 8
PUSHR D2
PUSHVARGV 0; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 8
PUSHVARGV 16; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6766; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
POP D4
LOAD D2 0.0006; if() #973 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1469 ==; Test 'if'
LOAD D2 0.0006; if() #973 Body Start
SUBV D2 1
STORE D2 0.0006; if() #973 Body End
LOAD D2 0.0006; if() #974 Test
COMPAREV D2 0
GOTOCMP 1487 <=
LOAD D2 0.0034; InlineFunc[int Ceiling(int)] Params Start AND InlineFunc[int Max(int, int)] Params Start AND InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.5000; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
PUSHVARGR D2
PUSHVARGV 2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 1487 ==
SETV D2 0
GOTO 1488
SETV D2 1
COMPAREV D2 0
GOTOCMP 1497 ==; Test 'if'
SETV D2 1; if() #974 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006; if() #974 Body End
LOAD D2 0.0002; unless() #975 Test
COMPAREV D2 0
GOTOCMP 3499 !=; Test 'unless'
SETV D2 1; unless() #975 Body Start
STORE D2 0.0015; unless() #975 Body End
GOTO 3499; if() #542 Body End
LOAD D2 0.0026; if() #543 Test AND if() #542 Else Start
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1758 ==; Test 'if'
PUSHARGSR D4 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND if() #543 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int Rand(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCHALTRATE; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0007
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0034; if() #544 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1561 ==; Test 'if'
SETV D2 2.6000; if() #544 Body Start
SETR GD5 D2
GOTO 1575; if() #544 Body End
LOAD D2 0.0034; if() #544 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
MULTV D2 0.0100
SETV D2 0.0100
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
POP D3
MULTR D2 D3
SETR GD5 D2; if() #544 Else End
LOAD D2 0.0034; if() #976 Test
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1622 ==; Test 'if'
SETR D2 GD5; if() #976 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.0100
SETV D2 0.0100
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 0
PUSHV 80; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
POP D3
MULTR D2 D3
STORE D2 0.0044
SETR D2 GD5
PUSHR D2
PUSHR D4
PUSHV -100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 100; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
MULTV D2 0.0100
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD5 D2; if() #976 Body End
SETR D2 GD5; while() #11 Test
COMPAREV D2 0
GOTOCMP 1630 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 1630 >
SETV D2 0
GOTO 1631
SETV D2 1
COMPAREV D2 0
GOTOCMP 1752 ==; Test 'while'
PUSHR D4; while() #11 Body Start
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0692; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #977 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1670 ==; Test 'if'
PUSHR D4; if() #977 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #977 Body End
LOAD D2 0.0008; if() #545 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1679 ==; Test 'if'
LOAD D2 0.0008; if() #545 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 1687; if() #545 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #978 Test AND if() #545 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1687 ==; Test 'if'
SETV D2 1; if() #978 Body Start
STORE D2 0.0002; if() #978 Body End
PUSHR D4; if() #545 Else End
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4
LOAD D2 0.0002; if() #979 Test
COMPAREV D2 0
GOTOCMP 1622 ==; Test 'if'
SETR D2 GD3; while() #12 Test AND if() #979 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1622 ==; Test 'while'
PUSHR D4; while() #12 Body Start
LOAD D2 0.0047; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Params End
CALLFUNC 3.0692; UsrFunc[int EZB_AngleDir(ffc, npc, int, int)] Call
POP D4
SETR GD4 D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #980 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 1741 ==; Test 'if'
PUSHR D4; if() #980 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #980 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #12 Body End
GOTO 1699; while() #12 End
GOTO 1622; if() #979 Body End AND while() #11 Body End AND while() #11 End
LOAD D2 0.0002; unless() #981 Test
COMPAREV D2 0
GOTOCMP 3499 !=; Test 'unless'
SETV D2 1; unless() #981 Body Start
STORE D2 0.0015; unless() #981 Body End
GOTO 3499; if() #543 Body End
LOAD D2 0.0026; if() #546 Test AND if() #543 Else Start
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2074 ==; Test 'if'
LOAD D2 0.0034; if() #547 Test AND if() #546 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
COMPAREV D2 0
GOTOCMP 1802 ==
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
POP D3
COMPARER D3 D2
GOTOCMP 1802 <
SETV D2 0
GOTO 1803
SETV D2 1
COMPAREV D2 0
GOTOCMP 1968 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #547 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETR D2 GD1
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
LOAD D2 0.0009; if() #548 Test
COMPAREV D2 0
GOTOCMP 1858 <=
LOAD D2 0.0007
COMPAREV D2 -1000
GOTOCMP 1858 ==
SETV D2 1
GOTO 1859
SETV D2 0
COMPAREV D2 0
GOTOCMP 1887 ==; Test 'if'
LOAD D2 0.0009; if() #548 Body Start
SUBV D2 1
STORE D2 0.0009
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3385; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
GOTO 2043; if() #548 Body End
PUSHR D4; if() #549 Test AND if() #548 Else Start
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1762; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1933 ==; Test 'if'
LOAD D2 0.0009; if() #982 Test AND if() #549 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1908 ==; Test 'if'
LOAD D2 0.0009; if() #982 Body Start
SUBV D2 1
STORE D2 0.0009; if() #982 Body End
SETV D2 -1000
STORE D2 0.0007
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3385; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
GOTO 2043; if() #549 Body End
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start AND if() #549 Else Start
PUSHR D2
PUSHVARGV -140; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 140; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0007
LOAD D2 0.0034; InlineFunc[int Floor(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
MULTV D2 0.0100
DIVV2 32 D2
SETV D2 32
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
MULTV D2 0.0100
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009
LOAD D2 0.0015; if() #983 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2043 ==; Test 'if'
SETV D2 1; if() #983 Body Start
STORE D2 0.0015; if() #983 Body End
GOTO 2043; if() #549 Else End AND if() #548 Else End AND if() #547 Body End
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #984 Test AND if() #547 Else Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
ADDV D2 32
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2043 ==; Test 'if'
PUSHR D4; if() #984 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #984 Body End
LOAD D2 0.0017; if() #547 Else End AND if() #985 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2056 ==; Test 'if'
PUSHR D4; if() #985 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #985 Body End
LOAD D2 0.0008; if() #550 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2065 ==; Test 'if'
LOAD D2 0.0008; if() #550 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #550 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #986 Test AND if() #550 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #986 Body Start
STORE D2 0.0002; if() #986 Body End
GOTO 3499; if() #550 Else End AND if() #546 Body End
LOAD D2 0.0026; if() #551 Test AND if() #546 Else Start
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2450 ==; Test 'if'
LOAD D2 0.0005; if() #987 Test AND if() #551 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2109 ==; Test 'if'
PUSHR D4; if() #987 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3411; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETR D2 GD4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2; if() #987 Body End
PUSHR D4; unless() #988 Test
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2399 !=; Test 'unless'
LOAD D2 0.0034; if() #552 Test AND unless() #988 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2189 ==; Test 'if'
LOAD D2 0.0005; if() #553 Test AND if() #552 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2144 ==; Test 'if'
SETV D2 3; if() #553 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #553 Body End
LOAD D2 0.0005; if() #554 Test AND if() #553 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2159 ==; Test 'if'
SETV D2 2; if() #554 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #554 Body End
LOAD D2 0.0005; if() #555 Test AND if() #554 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2174 ==; Test 'if'
SETV D2 0; if() #555 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #555 Body End
LOAD D2 0.0005; if() #989 Test AND if() #555 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2392 ==; Test 'if'
SETV D2 1; if() #989 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #989 Body End
GOTO 2392; if() #555 Else End AND if() #554 Else End AND if() #553 Else End AND if() #552 Body End
LOAD D2 0.0034; if() #556 Test AND if() #552 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2257 ==; Test 'if'
LOAD D2 0.0005; if() #557 Test AND if() #556 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2212 ==; Test 'if'
SETV D2 2; if() #557 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #557 Body End
LOAD D2 0.0005; if() #558 Test AND if() #557 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2227 ==; Test 'if'
SETV D2 3; if() #558 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #558 Body End
LOAD D2 0.0005; if() #559 Test AND if() #558 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2242 ==; Test 'if'
SETV D2 1; if() #559 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #559 Body End
LOAD D2 0.0005; if() #990 Test AND if() #559 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2392 ==; Test 'if'
SETV D2 0; if() #990 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #990 Body End
GOTO 2392; if() #559 Else End AND if() #558 Else End AND if() #557 Else End AND if() #556 Body End
LOAD D2 0.0034; if() #560 Test AND if() #556 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2325 ==; Test 'if'
LOAD D2 0.0005; if() #561 Test AND if() #560 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2280 ==; Test 'if'
SETV D2 1; if() #561 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #561 Body End
LOAD D2 0.0005; if() #562 Test AND if() #561 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2295 ==; Test 'if'
SETV D2 0; if() #562 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #562 Body End
LOAD D2 0.0005; if() #563 Test AND if() #562 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2310 ==; Test 'if'
SETV D2 3; if() #563 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #563 Body End
LOAD D2 0.0005; if() #991 Test AND if() #563 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2392 ==; Test 'if'
SETV D2 2; if() #991 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #991 Body End
GOTO 2392; if() #563 Else End AND if() #562 Else End AND if() #561 Else End AND if() #560 Body End
LOAD D2 0.0005; if() #564 Test AND if() #560 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2342 ==; Test 'if'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND if() #564 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #564 Body End
LOAD D2 0.0005; if() #565 Test AND if() #564 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2359 ==; Test 'if'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND if() #565 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #565 Body End
LOAD D2 0.0005; if() #566 Test AND if() #565 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2376 ==; Test 'if'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND if() #566 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 2392; if() #566 Body End
LOAD D2 0.0005; if() #992 Test AND if() #566 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2392 ==; Test 'if'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND if() #992 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #992 Body End
LOAD D2 0.0015; if() #566 Else End AND if() #565 Else End AND if() #564 Else End AND if() #560 Else End AND if() #556 Else End AND if() #552 Else End AND if() #993 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2399 ==; Test 'if'
SETV D2 1; if() #993 Body Start
STORE D2 0.0015; if() #993 Body End
LOAD D2 0.0005; unless() #988 Body End
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR GD4 D2
LOAD D2 0.0017; if() #994 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2417 ==; Test 'if'
PUSHR D4; if() #994 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #994 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.7017; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
LOAD D2 0.0008; if() #567 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2441 ==; Test 'if'
LOAD D2 0.0008; if() #567 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #567 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #995 Test AND if() #567 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #995 Body Start
STORE D2 0.0002; if() #995 Body End
GOTO 3499; if() #567 Else End AND if() #551 Body End
LOAD D2 0.0026; if() #568 Test AND if() #551 Else Start
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2712 ==; Test 'if'
LOAD D2 0.0005; if() #996 Test AND if() #568 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2490 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #996 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3411; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2; if() #996 Body End
LOAD D2 0.0009; if() #569 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2499 ==; Test 'if'
LOAD D2 0.0009; if() #569 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 2684; if() #569 Body End
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #569 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHVARGR NPCRATE; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0046
LOAD D2 0.0046; InlineFunc[int Rand(int)] Params Start AND if() #997 Test
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2550 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #997 Body Start AND UsrFunc[int AngleDir4(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0509; UsrFunc[int AngleDir4(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #997 Body End
PUSHARGSR D4 0.0002; unless() #998 Test AND UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
LOAD D2 0.0005; UsrFunc[int EZB_DirAngle(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int EZB_DirAngle(int)] Params End
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1471; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2576 !=; Test 'unless'
PUSHR D4; unless() #998 Body Start
LOAD D2 0.0005; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 2.9389; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; unless() #998 Body End
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0045
SETV D2 0; for() #255 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #255 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2639 ==; for() #255 TestFail?
PUSHR D4; for() #255 Body Start
LOAD D2 0.0045; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.7017; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3411; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0017; if() #999 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2626 ==; Test 'if'
PUSHR D4; if() #999 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #999 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #255 Body End
LOAD D2 0.0046; for() #255 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 2583; for() #255 End
LOAD D2 0.0006; if() #1000 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2647 ==; Test 'if'
LOAD D2 0.0006; if() #1000 Body Start
SUBV D2 1
STORE D2 0.0006; if() #1000 Body End
LOAD D2 0.0006; if() #1001 Test
COMPAREV D2 0
GOTOCMP 2656 >
SETV D3 2; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 2656 !=
SETV D2 1
GOTO 2657
SETV D2 0
COMPAREV D2 0
GOTOCMP 2666 ==; Test 'if'
SETV D2 1; if() #1001 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0006; if() #1001 Body End
LOAD D2 0.0002; unless() #1002 Test
COMPAREV D2 0
GOTOCMP 2671 !=; Test 'unless'
SETV D2 1; unless() #1002 Body Start
STORE D2 0.0015; unless() #1002 Body End
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0034; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D3 NPCHOMING; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0009; if() #569 Else End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3411; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0017; if() #1003 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
PUSHR D4; if() #1003 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1003 Body End
GOTO 3499; if() #568 Body End
LOAD D2 0.0026; if() #570 Test AND if() #568 Else Start
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2974 ==; Test 'if'
LOAD D2 0.0005; if() #1004 Test AND if() #570 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2752 ==; Test 'if'
SETV D3 8; InlineFunc[int Rand(int)] Params AND if() #1004 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3411; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2; if() #1004 Body End
LOAD D2 0.0009; if() #571 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2761 ==; Test 'if'
LOAD D2 0.0009; if() #571 Body Start
SUBV D2 1
STORE D2 0.0009
GOTO 2946; if() #571 Body End
SETV D3 8; InlineFunc[int Rand(int)] Params AND if() #571 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHVARGR NPCRATE; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0046
LOAD D2 0.0046; InlineFunc[int Rand(int)] Params Start AND if() #1005 Test
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2812 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #1005 Body Start AND UsrFunc[int AngleDir8(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0552; UsrFunc[int AngleDir8(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #1005 Body End
PUSHARGSR D4 0.0002; unless() #1006 Test AND UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
LOAD D2 0.0005; UsrFunc[int EZB_DirAngle(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int EZB_DirAngle(int)] Params End
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1471; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 2838 !=; Test 'unless'
PUSHR D4; unless() #1006 Body Start
LOAD D2 0.0005; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 2.9389; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; unless() #1006 Body End
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0045
SETV D2 0; for() #256 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #256 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2901 ==; for() #256 TestFail?
PUSHR D4; for() #256 Body Start
LOAD D2 0.0045; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.7017; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3411; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0017; if() #1007 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 2888 ==; Test 'if'
PUSHR D4; if() #1007 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1007 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #256 Body End
LOAD D2 0.0046; for() #256 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 2845; for() #256 End
LOAD D2 0.0006; if() #1008 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2909 ==; Test 'if'
LOAD D2 0.0006; if() #1008 Body Start
SUBV D2 1
STORE D2 0.0006; if() #1008 Body End
LOAD D2 0.0006; if() #1009 Test
COMPAREV D2 0
GOTOCMP 2918 >
SETV D3 2; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 2918 !=
SETV D2 1
GOTO 2919
SETV D2 0
COMPAREV D2 0
GOTOCMP 2928 ==; Test 'if'
SETV D2 1; if() #1009 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0006; if() #1009 Body End
LOAD D2 0.0002; unless() #1010 Test
COMPAREV D2 0
GOTOCMP 2933 !=; Test 'unless'
SETV D2 1; unless() #1010 Body Start
STORE D2 0.0015; unless() #1010 Body End
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0034; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D3 NPCHOMING; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
STORE D2 0.0009; if() #571 Else End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3411; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0017; if() #1011 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
PUSHR D4; if() #1011 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1011 Body End
GOTO 3499; if() #570 Body End
LOAD D2 0.0026; if() #572 Test AND if() #570 Else Start
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3053 ==; Test 'if'
PUSHR D4; if() #572 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 8
PUSHR D2
PUSHVARGV 0; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 4
PUSHVARGV 8; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHARGSV -1000 0.0002
PUSHV 4; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.6780; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4
LOAD D2 0.0006; if() #1012 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3019 ==; Test 'if'
LOAD D2 0.0006; if() #1012 Body Start
SUBV D2 1
STORE D2 0.0006; if() #1012 Body End
LOAD D2 0.0006; if() #1013 Test
COMPAREV D2 0
GOTOCMP 3037 <=
LOAD D2 0.0034; InlineFunc[int Ceiling(int)] Params Start AND InlineFunc[int Max(int, int)] Params Start AND InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
MULTV D2 0.5000; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
PUSHVARGR D2
PUSHVARGV 2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 3037 ==
SETV D2 0
GOTO 3038
SETV D2 1
COMPAREV D2 0
GOTOCMP 3047 ==; Test 'if'
SETV D2 1; if() #1013 Body Start
STORE D2 0.0002
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006; if() #1013 Body End
LOAD D2 0.0002; unless() #1014 Test
COMPAREV D2 0
GOTOCMP 3499 !=; Test 'unless'
SETV D2 1; unless() #1014 Body Start
STORE D2 0.0015; unless() #1014 Body End
GOTO 3499; if() #572 Body End
LOAD D2 0.0026; if() #573 Test AND if() #572 Else Start
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3466 ==; Test 'if'
LOAD D2 0.0005; if() #1015 Test AND if() #573 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 15
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3128 ==; Test 'if'
SETV D2 1; if() #1015 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 15 D2
LOAD D2 0.0034; if() #574 Test
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3087 ==; Test 'if'
SETV D2 1; if() #574 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
GOTO 3112; if() #574 Body End
LOAD D2 0.0034; if() #575 Test AND if() #574 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3102 ==; Test 'if'
SETV D2 2; if() #575 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
GOTO 3112; if() #575 Body End
PUSHR D4; if() #575 Else Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2; if() #575 Else End
PUSHR D4; if() #574 Else End
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3411; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETR D2 GD4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #1015 Body End
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0005; if() #1016 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 3412 ==; Test 'if'
SETV D2 0; for() #257 setup AND if() #1016 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #257 LoopTest
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3412 ==; for() #257 TestFail?
LOAD D2 0.0005; if() #576 Test AND for() #257 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3262 ==; Test 'if'
PUSHR D4; if() #576 Body Start
LOAD D2 0.0005; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 3.7249; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
STORE D2 0.0045
PUSHR D4; if() #1017 Test
LOAD D2 0.0045; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3349 ==; Test 'if'
SETR D2 GD1; if() #1017 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int EZB_DirX(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirX(int, int)] Params End
CALLFUNC 3.2122; UsrFunc[int EZB_DirX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int EZB_DirY(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirY(int, int)] Params End
CALLFUNC 3.2159; UsrFunc[int EZB_DirY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4; unless() #1018 Test
LOAD D2 0.0040; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
PUSHR D4
LOAD D2 0.0005; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 2.9389; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params End
CALLFUNC 3.1547; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3349 !=; Test 'unless'
LOAD D2 0.0045; unless() #1018 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; unless() #1018 Body End
GOTO 3349; if() #1017 Body End AND if() #576 Body End
PUSHR D4; if() #576 Else Start
LOAD D2 0.0005; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 0; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 3.7249; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
STORE D2 0.0045
PUSHR D4; if() #1019 Test
LOAD D2 0.0045; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3349 ==; Test 'if'
SETR D2 GD1; if() #1019 Body Start
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int EZB_DirX(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirX(int, int)] Params End
CALLFUNC 3.2122; UsrFunc[int EZB_DirX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int EZB_DirY(int, int)] Params Start
PUSHR D2
PUSHV 8; UsrFunc[int EZB_DirY(int, int)] Params End
CALLFUNC 3.2159; UsrFunc[int EZB_DirY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4; unless() #1020 Test
LOAD D2 0.0040; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
PUSHR D4
LOAD D2 0.0005; UsrFunc[int OppositeDir(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2; UsrFunc[int OppositeDir(int)] Params End
CALLFUNC 2.9389; UsrFunc[int OppositeDir(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Params End
CALLFUNC 3.1547; UsrFunc[bool EZB_CanMoveAtPos(int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3349 !=; Test 'unless'
LOAD D2 0.0045; unless() #1020 Body Start
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; unless() #1020 Body End
PUSHR D4; if() #1019 Body End AND if() #576 Else End AND unless() #1021 Test
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3398 !=; Test 'unless'
LOAD D2 0.0005; if() #577 Test AND unless() #1021 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3384 ==; Test 'if'
PUSHR D4; if() #577 Body Start
LOAD D2 0.0005; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 0; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 3.7249; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
GOTO 3398; if() #577 Body End
PUSHR D4; if() #577 Else Start
LOAD D2 0.0005; UsrFunc[int EZB_TurnDir4(int, bool)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnDir4(int, bool)] Params End
CALLFUNC 3.7249; UsrFunc[int EZB_TurnDir4(int, bool)] Call
POP D4
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #577 Else End
PUSHR D4; unless() #1021 Body End
LOAD D2 0.0005; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.7017; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4; for() #257 Body End
LOAD D2 0.0046; for() #257 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 3155; for() #257 End
LOAD D2 0.0005; if() #1016 Body End
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Floor(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0005
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0005
PUSHR D2
POP D0
READPODARRAYV D2 2
SETR GD4 D2
LOAD D2 0.0017; if() #1022 Test
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3448 ==; Test 'if'
PUSHR D4; if() #1022 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4; if() #1022 Body End
LOAD D2 0.0008; if() #578 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3457 ==; Test 'if'
LOAD D2 0.0008; if() #578 Body Start
SUBV D2 1
STORE D2 0.0008
GOTO 3499; if() #578 Body End
SETV D3 24; InlineFunc[int Rand(int)] Params AND if() #1023 Test AND if() #578 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #1023 Body Start
STORE D2 0.0002; if() #1023 Body End
GOTO 3499; if() #578 Else End AND if() #573 Body End
LOAD D2 0.0026; if() #1024 Test AND if() #573 Else Start
COMPAREV D2 16
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
PUSHR D4; if() #1024 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FishWizardUpdate(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void EZB_FishWizardUpdate(ffc, npc, int, int)] Params End
CALLFUNC 3.4225; UsrFunc[void EZB_FishWizardUpdate(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0005; if() #579 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
COMPAREV D2 0
GOTOCMP 3491 ==; Test 'if'
SETV D2 1; if() #579 Body Start
STORE D2 0.0002
GOTO 3499; if() #579 Body End
LOAD D2 0.0005; if() #1025 Test AND if() #579 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 3
COMPAREV D2 0
GOTOCMP 3499 ==; Test 'if'
SETV D2 1; if() #1025 Body Start
STORE D2 0.0015; if() #1025 Body End
LOAD D2 0.0015; if() #579 Else End AND if() #1024 Body End AND if() #573 Else End AND if() #572 Else End AND if() #570 Else End AND if() #568 Else End AND if() #551 Else End AND if() #546 Else End AND if() #543 Else End AND if() #542 Else End AND if() #540 Else End AND if() #538 Else End AND if() #536 Else End AND if() #534 Else End AND if() #532 Else End AND if() #530 Else End AND if() #528 Else End AND if() #527 Else End AND if() #1026 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3742 ==; Test 'if'
LOAD D2 0.0016; if() #580 Test AND if() #1026 Body Start
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3539 ==; Test 'if'
PUSHR D4; if() #580 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 3740; if() #580 Body End
LOAD D2 0.0016; if() #581 Test AND if() #580 Else Start
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3592 ==; Test 'if'
PUSHR D4; if() #581 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 3740; if() #581 Body End
LOAD D2 0.0016; if() #582 Test AND if() #581 Else Start
COMPAREV D2 46
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3642 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1027 Test AND if() #582 Body Start
COMPAREV D2 40
GOTOCMP 3609 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6281; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 3609 >=
SETV D2 1
GOTO 3610
SETV D2 0
COMPAREV D2 0
GOTOCMP 3740 ==; Test 'if'
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params AND if() #1027 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0829; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0600; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4; if() #1027 Body End
GOTO 3740; if() #582 Body End
LOAD D2 0.0016; if() #583 Test AND if() #582 Else Start
COMPAREV D2 47
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3691 ==; Test 'if'
SETV D2 0; for() #258 setup AND if() #583 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #258 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3740 ==; for() #258 TestFail?
PUSHR D4; for() #258 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #258 Body End
LOAD D2 0.0046; for() #258 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 3649; for() #258 End
GOTO 3740; if() #583 Body End
LOAD D2 0.0016; if() #1028 Test AND if() #583 Else Start
COMPAREV D2 48
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3740 ==; Test 'if'
SETV D2 0; for() #259 setup AND if() #1028 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #259 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3740 ==; for() #259 TestFail?
PUSHR D4; for() #259 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
ADDV D2 45
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #259 Body End
LOAD D2 0.0046; for() #259 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 3698; for() #259 End
SETV D2 -8; if() #1028 Body End AND if() #583 Else End AND if() #582 Else End AND if() #581 Else End AND if() #580 Else End
STORE D2 0.0015; if() #1026 Body End
LOAD D2 0.0015; if() #1029 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3750 ==; Test 'if'
LOAD D2 0.0015; if() #1029 Body Start
ADDV D2 1
STORE D2 0.0015; if() #1029 Body End
LOAD D2 0.0002; if() #1030 Test
COMPAREV D2 0
GOTOCMP 3767 ==
LOAD D2 0.0030
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
GOTOCMP 3765 !=
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 0
GOTOCMP 3767 ==
SETV D2 1
GOTO 3768
SETV D2 0
COMPAREV D2 0
GOTOCMP 20349 ==; Test 'if'
SETV D2 1; if() #1030 Body Start
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 319 D2
STOREV 0 0.0001
LOAD D2 0.0030; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0046
LOAD D2 0.0030
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0017; if() #584 Test
ANDV D2 2048
COMPAREV D2 0
GOTOCMP 3816 ==; Test 'if'
LOAD D2 0.0030; if() #584 Body Start
PUSHR D2
LOAD D2 0.0003
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
ADDV D2 1
STORE D2 0.0003
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0030
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0003
GOTO 3853; if() #584 Body End
LOAD D2 0.0004; if() #1032 Test AND if(true) #1031 [Opt:AlwaysOn] AND if() #584 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
GOTOCMP 3830 !=
LOAD D2 0.0030
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 2
GOTOCMP 3830 <=
SETV D2 1
GOTO 3831
SETV D2 0
COMPAREV D2 0
GOTOCMP 3853 ==; Test 'if'
LOAD D2 0.0046; if() #1032 Body Start
ADDV D2 1
STORE D2 0.0046
LOAD D2 0.0046
PUSHR D2
LOAD D2 0.0030
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0046
LOAD D2 0.0030
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001; if() #1032 Body End
LOAD D2 0.0001; if() #584 Else End
STORE D2 0.0004
LOAD D2 0.0001; if() #1033 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3953 ==; Test 'if'
PUSHR D4; if() #1033 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0010
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4; while() #13 Test
LOAD D2 0.0042; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1471; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3953 ==; Test 'while'
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start AND while() #13 Body Start
ADDV D2 0.2000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7097; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #13 Body End
GOTO 3915; while() #13 End
LOAD D2 0.0001; if() #1033 Body End AND if() #1034 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4005 ==; Test 'if'
PUSHR D4; if() #1034 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1034 Body End
LOAD D2 0.0001; if() #1035 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4083 ==; Test 'if'
PUSHR D4; if() #1035 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1035 Body End
LOAD D2 0.0001; if() #1036 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4158 ==; Test 'if'
PUSHR D4; if() #1036 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #260 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #260 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4148 ==; for() #260 TestFail?
PUSHR D4; for() #260 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #260 Body End
LOAD D2 0.0046; for() #260 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4100; for() #260 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1036 Body End
LOAD D2 0.0001; if() #1037 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4259 ==; Test 'if'
PUSHR D4; if() #1037 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #261 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #261 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4249 ==; for() #261 TestFail?
PUSHR D4; for() #261 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #261 Body End
LOAD D2 0.0046; for() #261 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4183; for() #261 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1037 Body End
LOAD D2 0.0001; if() #1038 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4344 ==; Test 'if'
PUSHR D4; if() #1038 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #262 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #262 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4334 ==; for() #262 TestFail?
PUSHR D4; for() #262 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 350; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #262 Body End
LOAD D2 0.0046; for() #262 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4290; for() #262 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1038 Body End
LOAD D2 0.0001; if() #1039 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4456 ==; Test 'if'
PUSHR D4; if() #1039 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #263 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #263 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4446 ==; for() #263 TestFail?
PUSHR D4; for() #263 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 350; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #263 Body End
LOAD D2 0.0046; for() #263 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4402; for() #263 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1039 Body End
LOAD D2 0.0001; if() #1040 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4543 ==; Test 'if'
PUSHR D4; if() #1040 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #264 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #264 LoopTest
COMPAREV D2 24
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4543 ==; for() #264 TestFail?
PUSHR D4; for() #264 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int Rand(int, int)] Params Start
SUBV2 -10 D2
PUSHR D2
LOAD D2 0.0046
ADDV D2 10
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #264 Body End
LOAD D2 0.0046; for() #264 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4487; for() #264 End
LOAD D2 0.0001; if() #1040 Body End AND if() #1041 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4657 ==; Test 'if'
PUSHR D4; if() #1041 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #265 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #265 LoopTest
COMPAREV D2 24
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4657 ==; for() #265 TestFail?
PUSHR D4; for() #265 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int Rand(int, int)] Params Start
SUBV2 -10 D2
PUSHR D2
LOAD D2 0.0046
ADDV D2 10
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #265 Body End
LOAD D2 0.0046; for() #265 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4601; for() #265 End
LOAD D2 0.0001; if() #1041 Body End AND if() #1042 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4756 ==; Test 'if'
PUSHR D4; if() #1042 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 75
SETV D2 75
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0042
SETV D2 0; for() #266 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #266 LoopTest
COMPAREV D2 7
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4746 ==; for() #266 TestFail?
PUSHR D4; for() #266 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
MULTV D2 25
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #266 Body End
LOAD D2 0.0046; for() #266 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4694; for() #266 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 48; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1042 Body End
LOAD D2 0.0001; if() #1043 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4881 ==; Test 'if'
PUSHR D4; if() #1043 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 75
SETV D2 75
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0042
SETV D2 0; for() #267 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #267 LoopTest
COMPAREV D2 7
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 4871 ==; for() #267 TestFail?
PUSHR D4; for() #267 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
MULTV D2 25
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #267 Body End
LOAD D2 0.0046; for() #267 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4819; for() #267 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 48; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1043 Body End
LOAD D2 0.0001; if() #1044 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5063 ==; Test 'if'
PUSHR D4; if() #1044 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
SUBV D2 45
STORE D2 0.0042
SETV D2 0; for() #268 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #268 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5053 ==; for() #268 TestFail?
SETV D2 -4; for() #269 setup AND for() #268 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #269 LoopTest
COMPAREV D2 4
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4982 ==; for() #269 TestFail?
PUSHR D4; for() #269 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #269 Body End
LOAD D2 0.0045; for() #269 LoopIncrement
ADDV D2 2
STORE D2 0.0045
GOTO 4937; for() #269 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 16; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -5; for() #270 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #270 LoopTest
COMPAREV D2 5
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5039 ==; for() #270 TestFail?
PUSHR D4; for() #270 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #270 Body End
LOAD D2 0.0045; for() #270 LoopIncrement
ADDV D2 2
STORE D2 0.0045
GOTO 4994; for() #270 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #268 Body End
LOAD D2 0.0046; for() #268 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 4930; for() #268 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1044 Body End
LOAD D2 0.0001; if() #1045 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5183 ==; Test 'if'
PUSHR D4; if() #1045 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
SETV D2 0; for() #271 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #271 LoopTest
COMPAREV D2 15
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5173 ==; for() #271 TestFail?
SETV D2 0; for() #272 setup AND for() #271 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #272 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5147 ==; for() #272 TestFail?
PUSHR D4; for() #272 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 72
SETV D2 72
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #272 Body End
LOAD D2 0.0045; for() #272 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 5102; for() #272 End
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
MULTV D2 4
SETV D2 4
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #271 Body End
LOAD D2 0.0046; for() #271 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5095; for() #271 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1045 Body End
LOAD D2 0.0001; if() #1046 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5287 ==; Test 'if'
PUSHR D4; if() #1046 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #273 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #273 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5277 ==; for() #273 TestFail?
SETV D3 360; InlineFunc[int Rand(int)] Params AND for() #273 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
SETV D2 0; for() #274 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #274 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5263 ==; for() #274 TestFail?
PUSHR D4; for() #274 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 36
SETV D2 36
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 180; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #274 Body End
LOAD D2 0.0045; for() #274 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 5218; for() #274 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 45; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #273 Body End
LOAD D2 0.0046; for() #273 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5208; for() #273 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1046 Body End
LOAD D2 0.0001; if() #1047 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5432 ==; Test 'if'
PUSHR D4; if() #1047 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #275 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #275 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5381 ==; for() #275 TestFail?
PUSHR D4; for() #275 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 8
LOAD D2 0.0042
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #275 Body End
LOAD D2 0.0046; for() #275 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5337; for() #275 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #276 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #276 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5432 ==; for() #276 TestFail?
PUSHR D4; for() #276 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 8
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 20; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #276 Body End
LOAD D2 0.0046; for() #276 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5385; for() #276 End
LOAD D2 0.0001; if() #1047 Body End AND if() #1048 Test
COMPAREV D2 16
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5579 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1048 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #277 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #277 LoopTest
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5526 ==; for() #277 TestFail?
PUSHR D4; for() #277 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 40
LOAD D2 0.0042
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #277 Body End
LOAD D2 0.0046; for() #277 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5482; for() #277 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #278 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #278 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5579 ==; for() #278 TestFail?
PUSHR D4; for() #278 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 40
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #278 Body End
LOAD D2 0.0046; for() #278 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5530; for() #278 End
LOAD D2 0.0001; if() #1048 Body End AND if() #1049 Test
COMPAREV D2 17
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5896 ==; Test 'if'
PUSHR D4; if() #1049 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0012
MULTV D2 8
PUSHR D2
LOAD D2 0.0011
MULTV D2 8
POP D3
ADDR D2 D3
DIVV D2 2
STORE D2 0.0044
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #279 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #279 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5761 ==; for() #279 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #279 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 -2; for() #280 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #280 LoopTest
COMPAREV D2 2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5748 ==; for() #280 TestFail?
PUSHR D4; for() #280 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #280 Body End
LOAD D2 0.0045; for() #280 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 5657; for() #280 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #279 Body End
LOAD D2 0.0046; for() #279 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5638; for() #279 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #281 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #281 LoopTest
COMPAREV D2 25
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5896 ==; for() #281 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #281 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 -2; for() #282 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #282 LoopTest
COMPAREV D2 2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5883 ==; for() #282 TestFail?
PUSHR D4; for() #282 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 25; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #282 Body End
LOAD D2 0.0045; for() #282 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 5789; for() #282 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #281 Body End
LOAD D2 0.0046; for() #281 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5765; for() #281 End
LOAD D2 0.0001; if() #1049 Body End AND if() #1050 Test
COMPAREV D2 18
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6450 ==; Test 'if'
PUSHR D4; if() #1050 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0044
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
ADDV D2 45
STORE D2 0.0042
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #283 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #283 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6073 ==; for() #283 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #283 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1051 Test
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
SETV D2 88; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6011 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #1051 Body Start AND UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
PUSHV 88; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.8000
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #1051 Body End
SETV D2 0; for() #284 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #284 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6060 ==; for() #284 TestFail?
PUSHR D4; for() #284 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #284 Body End
LOAD D2 0.0045; for() #284 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6013; for() #284 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #283 Body End
LOAD D2 0.0046; for() #283 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 5951; for() #283 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #285 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #285 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6164 ==; for() #285 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #285 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 0; for() #286 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #286 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6151 ==; for() #286 TestFail?
PUSHR D4; for() #286 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #286 Body End
LOAD D2 0.0045; for() #286 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6101; for() #286 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #285 Body End
LOAD D2 0.0046; for() #285 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6077; for() #285 End
SETV D2 0; for() #287 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #287 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6259 ==; for() #287 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #287 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 0; for() #288 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #288 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6240 ==; for() #288 TestFail?
PUSHR D4; for() #288 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #288 Body End
LOAD D2 0.0045; for() #288 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6190; for() #288 End
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #287 Body End
LOAD D2 0.0046; for() #287 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6166; for() #287 End
SETV D2 0; for() #289 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #289 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6355 ==; for() #289 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #289 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 0; for() #290 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #290 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6335 ==; for() #290 TestFail?
PUSHR D4; for() #290 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 120; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #290 Body End
LOAD D2 0.0045; for() #290 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6285; for() #290 End
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
MULTV D2 1.2500
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #289 Body End
LOAD D2 0.0046; for() #289 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6261; for() #289 End
SETV D2 0; for() #291 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #291 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6450 ==; for() #291 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #291 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
SETV D2 0; for() #292 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #292 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6431 ==; for() #292 TestFail?
PUSHR D4; for() #292 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #292 Body End
LOAD D2 0.0045; for() #292 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 6381; for() #292 End
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0044
POP D3
ADDR D2 D3
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #291 Body End
LOAD D2 0.0046; for() #291 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6357; for() #291 End
LOAD D2 0.0001; if() #1050 Body End AND if() #1052 Test
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6518 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1053 Test AND if() #1052 Body Start
COMPAREV D2 40
GOTOCMP 6467 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6281; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 6467 >=
SETV D2 1
GOTO 6468
SETV D2 0
COMPAREV D2 0
GOTOCMP 6518 ==; Test 'if'
PUSHR D4; if() #1053 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0829; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0600; UsrFunc[void EZB_AddSummon(npc, npc)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1053 Body End
LOAD D2 0.0001; if() #1052 Body End AND if() #1054 Test
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6614 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1055 Test AND if() #1054 Body Start
COMPAREV D2 40
GOTOCMP 6535 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6281; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 6535 >=
SETV D2 1
GOTO 6536
SETV D2 0
COMPAREV D2 0
GOTOCMP 6614 ==; Test 'if'
PUSHR D4; if() #1055 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #293 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #293 LoopTest
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6604 ==; for() #293 TestFail?
PUSHR D4; for() #293 Body Start
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0829; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0600; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4; for() #293 Body End
LOAD D2 0.0046; for() #293 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6552; for() #293 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1055 Body End
LOAD D2 0.0001; if() #1054 Body End AND if() #1056 Test
COMPAREV D2 21
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6710 ==; Test 'if'
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body AND if() #1057 Test AND if() #1056 Body Start
COMPAREV D2 40
GOTOCMP 6631 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6281; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 6631 >=
SETV D2 1
GOTO 6632
SETV D2 0
COMPAREV D2 0
GOTOCMP 6710 ==; Test 'if'
PUSHR D4; if() #1057 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #294 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #294 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6700 ==; for() #294 TestFail?
PUSHR D4; for() #294 Body Start
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHV -4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0829; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0600; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4; for() #294 Body End
LOAD D2 0.0046; for() #294 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6648; for() #294 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1057 Body End
LOAD D2 0.0001; if() #1056 Body End AND if() #1058 Test
COMPAREV D2 22
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6797 ==; Test 'if'
PUSHR D4; if() #1058 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 100; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 3
PUSHV 0.0349
PUSHV 120; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1058 Body End
LOAD D2 0.0001; if() #1059 Test
COMPAREV D2 23
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6895 ==; Test 'if'
PUSHR D4; if() #1059 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #295 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #295 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6895 ==; for() #295 TestFail?
PUSHR D4; for() #295 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 200; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 25; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #295 Body End
LOAD D2 0.0046; for() #295 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6822; for() #295 End
LOAD D2 0.0001; if() #1059 Body End AND if() #1060 Test
COMPAREV D2 24
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6985 ==; Test 'if'
PUSHR D4; if() #1060 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #296 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #296 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 6985 ==; for() #296 TestFail?
PUSHR D4; for() #296 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 200; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 6; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #296 Body End
LOAD D2 0.0046; for() #296 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 6920; for() #296 End
LOAD D2 0.0001; if() #1060 Body End AND if() #1061 Test
COMPAREV D2 25
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7070 ==; Test 'if'
PUSHR D4; if() #1061 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #297 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #297 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7060 ==; for() #297 TestFail?
PUSHR D4; for() #297 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 30
SETV D2 30
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 200; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 4
PUSHV 1
PUSHV 30; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
POP D4; for() #297 Body End
LOAD D2 0.0046; for() #297 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7010; for() #297 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1061 Body End
LOAD D2 0.0001; if() #1062 Test
COMPAREV D2 26
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7138 ==; Test 'if'
PUSHR D4; if() #1062 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #298 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #298 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7128 ==; for() #298 TestFail?
PUSHR D4; for() #298 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #298 Body End
LOAD D2 0.0046; for() #298 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7087; for() #298 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1062 Body End
LOAD D2 0.0001; if() #1063 Test
COMPAREV D2 27
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7207 ==; Test 'if'
PUSHR D4; if() #1063 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #299 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #299 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7197 ==; for() #299 TestFail?
PUSHR D4; for() #299 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
ADDV D2 45
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #299 Body End
LOAD D2 0.0046; for() #299 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7155; for() #299 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1063 Body End
LOAD D2 0.0001; if() #1064 Test
COMPAREV D2 28
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7275 ==; Test 'if'
PUSHR D4; if() #1064 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #300 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #300 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7265 ==; for() #300 TestFail?
PUSHR D4; for() #300 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0046
MULTV D2 45
SETV D2 45
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #300 Body End
LOAD D2 0.0046; for() #300 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7224; for() #300 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1064 Body End
LOAD D2 0.0001; if() #1065 Test
COMPAREV D2 29
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7376 ==; Test 'if'
PUSHR D4; if() #1065 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0
STORE D2 0.0042
PUSHR D4; if() #1066 Test
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7301 ==; Test 'if'
SETV D2 180; if() #1066 Body Start
STORE D2 0.0042; if() #1066 Body End
SETV D2 0; for() #301 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #301 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7366 ==; for() #301 TestFail?
LOAD D2 0.0042; if() #585 Test AND for() #301 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7333 ==; Test 'if'
PUSHR D4; if() #585 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0
PUSHR D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 7352; if() #585 Body End
PUSHR D4; if() #585 Else Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 240
PUSHR D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; if() #585 Else End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #301 Body End
LOAD D2 0.0046; for() #301 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7303; for() #301 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1065 Body End
LOAD D2 0.0001; if() #1067 Test
COMPAREV D2 30
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7555 ==; Test 'if'
PUSHR D4; if() #1067 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #302 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #302 LoopTest
COMPAREV D2 35
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7433 ==; for() #302 TestFail?
PUSHR D4; for() #302 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV -32
LOAD D2 0.0044
PUSHR D2
PUSHV 8
PUSHARGSV 0 0.0002
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 35; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #302 Body End
LOAD D2 0.0046; for() #302 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7400; for() #302 End
SETV D2 0; for() #303 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #303 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7555 ==; for() #303 TestFail?
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params AND for() #303 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0044
STORE D2 0.0039
PUSHR D4
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
LOAD D2 0.0044; while() #14 Test
PUSHR D2
LOAD D2 0.0039
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 -40
GOTOCMP 7468 <=
LOAD D2 0.0044
PUSHR D2
LOAD D2 0.0039
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 40
GOTOCMP 7468 >=
SETV D2 1
GOTO 7469
SETV D2 0
COMPAREV D2 0
GOTOCMP 7478 ==; Test 'while'
PUSHR D4; while() #14 Body Start
PUSHV 8; UsrFunc[int Rand(int, int)] Params Start
PUSHV 152; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044; while() #14 Body End
GOTO 7450; while() #14 End
SETV D2 0; for() #304 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #304 LoopTest
COMPAREV D2 35
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7551 ==; for() #304 TestFail?
LOAD D2 0.0046; if() #1068 Test AND for() #304 Body Start
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7510 ==; Test 'if'
PUSHR D4; if() #1068 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV -32
LOAD D2 0.0039
PUSHR D2
PUSHV 8
PUSHV 0
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 20; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; if() #1068 Body End
LOAD D2 0.0045; if() #1069 Test
COMPAREV D2 7
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7538 ==; Test 'if'
LOAD D2 0.0046; if() #1070 Test AND if() #1069 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7522 ==; Test 'if'
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params AND if() #1070 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1070 Body End
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV -32
LOAD D2 0.0044
PUSHR D2
PUSHV 8
PUSHARGSV 0 0.0002
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 7; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; if() #1069 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #304 Body End
LOAD D2 0.0046; for() #304 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7480; for() #304 End
LOAD D2 0.0045; for() #303 Body End AND for() #303 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 7435; for() #303 End
LOAD D2 0.0001; if() #1067 Body End AND if() #1071 Test
COMPAREV D2 31
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7818 ==; Test 'if'
PUSHR D4; if() #1071 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0
STORE D2 0.0044
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params AND while(true) #15 Body [Opt:AlwaysOn] Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #305 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #305 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7640 ==; for() #305 TestFail?
SETV D2 -1; for() #306 setup AND for() #305 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #306 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7627 ==; for() #306 TestFail?
PUSHR D4; for() #306 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -32
PUSHV 12
PUSHV 90
PUSHV 0
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 30; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #306 Body End
LOAD D2 0.0045; for() #306 LoopIncrement
ADDV D2 2
STORE D2 0.0045
GOTO 7583; for() #306 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #305 Body End
LOAD D2 0.0046; for() #305 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7576; for() #305 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #307 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #307 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7711 ==; for() #307 TestFail?
SETV D2 -1; for() #308 setup AND for() #307 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #308 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7698 ==; for() #308 TestFail?
PUSHR D4; for() #308 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -32
PUSHV 12
PUSHV 90
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 20; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #308 Body End
LOAD D2 0.0045; for() #308 LoopIncrement
ADDV D2 2
STORE D2 0.0045
GOTO 7651; for() #308 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #307 Body End
LOAD D2 0.0046; for() #307 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7644; for() #307 End
LOAD D2 0.0044
ADDV D2 1
STORE D2 0.0044
PUSHR D4; if() #1072 Test
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
MULTV D2 -1
POP D3
ADDR D2 D3
COMPAREV D2 16
GOTOCMP 7749 >=
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
COMPAREV D2 224
GOTOCMP 7754 >
LOAD D2 0.0044
COMPAREV D2 10
GOTOCMP 7754 >
SETV D2 0
GOTO 7755
SETV D2 1
COMPAREV D2 0
GOTOCMP 7818 !=; Test 'if' AND break 1; AND if() #1072 Body
LOAD D2 0.0044; if() #1073 Test
COMPAREV D2 2
GOTOCMP 7813 <=
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
SUBV D2 16
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
MULTV D2 -1
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 7813 <=
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
ADDV D2 16
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
MULTV D2 24
SETV D2 24
PUSHR D2
LOAD D2 0.0044
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 7813 >=
SETV D2 1
GOTO 7814
SETV D2 0
COMPAREV D2 0
GOTOCMP 7572 ==; Test 'if'
GOTO 7818; break 1; AND if() #1073 Body
GOTO 7572; while(true) #15 Body [Opt:AlwaysOn] End AND while() #15 End
LOAD D2 0.0001; if() #1071 Body End AND if() #1074 Test
COMPAREV D2 32
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7920 ==; Test 'if'
PUSHR D4; if() #1074 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #309 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #309 LoopTest
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7910 ==; for() #309 TestFail?
PUSHR D4; for() #309 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
SUBV D2 20
PUSHR D2
LOAD D2 0.0046
MULTV D2 40
SETV D2 40
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #309 Body End
LOAD D2 0.0046; for() #309 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7843; for() #309 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1074 Body End
LOAD D2 0.0001; if() #1075 Test
COMPAREV D2 33
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8021 ==; Test 'if'
PUSHR D4; if() #1075 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 1
STORE D2 0.0044
LOAD D2 0.0010
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #310 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #310 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8021 ==; for() #310 TestFail?
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start AND for() #310 Body Start
ADDV D2 0.5000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7097; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #310 Body End
LOAD D2 0.0046; for() #310 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 7982; for() #310 End
LOAD D2 0.0001; if() #1075 Body End AND if() #1076 Test
COMPAREV D2 34
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8243 ==; Test 'if'
PUSHR D4; if() #1076 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 2
STORE D2 0.0044
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
STORE D2 0.0046
LOAD D2 0.0010
SETR GD10 D2
PUSHR D4; while() #16 Test
LOAD D2 0.0042; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1471; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 8243 ==; Test 'while'
LOAD D2 0.0046; while() #16 Body Start
ADDV D2 1
STORE D2 0.0046
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start
ADDV D2 0.2000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4
LOAD D2 0.0046; if() #1077 Test
MODV D2 4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8225 ==; Test 'if'
LOAD D2 0.0034; if() #586 Test AND if() #1077 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 140
GOTOCMP 8127 ==
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 139
GOTOCMP 8127 ==
SETV D2 0
GOTO 8128
SETV D2 1
COMPAREV D2 0
GOTOCMP 8178 ==; Test 'if'
PUSHR D4; if() #586 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
GOTO 8225; if() #586 Body End
PUSHR D4; if() #586 Else Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; if() #586 Else End
PUSHR D4; if() #1077 Body End
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7097; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #16 Body End
GOTO 8083; while() #16 End
LOAD D2 0.0001; if() #1076 Body End AND if() #1078 Test
COMPAREV D2 35
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8501 ==; Test 'if'
PUSHR D4; if() #1078 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 2
STORE D2 0.0044
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
STORE D2 0.0046
LOAD D2 0.0010
SETR GD10 D2
SETV D2 0; for() #311 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #311 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8346 ==; for() #311 TestFail?
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start AND for() #311 Body Start
ADDV D2 0.1000
PUSHVARGR D2
PUSHVARGV 4; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7097; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #311 Body End
LOAD D2 0.0046; for() #311 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 8307; for() #311 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 2
STORE D2 0.0044
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
STORE D2 0.0046
LOAD D2 0.0010
SETR GD10 D2
SETV D2 0; for() #312 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #312 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8501 ==; for() #312 TestFail?
PUSHARGSR D4 0.0002; for() #312 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0045
LOAD D2 0.0046; if() #1079 Test
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8467 ==; Test 'if'
PUSHR D4; InlineFunc[int Abs(int)] Params Start AND if() #1080 Test AND if() #1079 Body Start
LOAD D2 0.0042; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0663; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8467 ==; Test 'if'
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start AND if() #1080 Body Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
LOAD D2 0.0042; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0663; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
STORE D2 0.0042; if() #1080 Body End
LOAD D2 0.0044; if() #1079 Body End AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 0.1000
PUSHVARGR D2
PUSHVARGV 4; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7097; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #312 Body End
LOAD D2 0.0046; for() #312 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 8406; for() #312 End
LOAD D2 0.0001; if() #1078 Body End AND if() #1081 Test
COMPAREV D2 36
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8650 ==; Test 'if'
PUSHR D4; if() #1081 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3385; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0041; if() #587 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8596 ==; Test 'if'
SETV D2 0.5000; if() #587 Body Start
STORE D2 0.0044
GOTO 8622; if() #587 Body End
LOAD D2 0.0041; if() #588 Test AND if() #587 Else Start
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8604 ==; Test 'if'
SETV D2 1; if() #588 Body Start
STORE D2 0.0044
GOTO 8622; if() #588 Body End
LOAD D2 0.0041; if() #589 Test AND if() #588 Else Start
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8612 ==; Test 'if'
SETV D2 2; if() #589 Body Start
STORE D2 0.0044
GOTO 8622; if() #589 Body End
LOAD D2 0.0041; if() #590 Test AND if() #589 Else Start
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8620 ==; Test 'if'
SETV D2 3; if() #590 Body Start
STORE D2 0.0044
GOTO 8622; if() #590 Body End
SETV D2 4; if() #590 Else Start
STORE D2 0.0044; if() #590 Else End
SETR D2 GD5; if() #589 Else End AND if() #588 Else End AND if() #587 Else End AND while() #17 Test
COMPAREV D2 0
GOTOCMP 8630 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8630 >
SETV D2 0
GOTO 8631
SETV D2 1
COMPAREV D2 0
GOTOCMP 8650 ==; Test 'while'
PUSHR D4; while() #17 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #17 Body End
GOTO 8622; while() #17 End
LOAD D2 0.0001; if() #1081 Body End AND if() #1082 Test
COMPAREV D2 37
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8868 ==; Test 'if'
PUSHR D4; if() #1082 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3385; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0041; if() #591 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8745 ==; Test 'if'
SETV D2 0.5000; if() #591 Body Start
STORE D2 0.0044
GOTO 8771; if() #591 Body End
LOAD D2 0.0041; if() #592 Test AND if() #591 Else Start
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8753 ==; Test 'if'
SETV D2 1; if() #592 Body Start
STORE D2 0.0044
GOTO 8771; if() #592 Body End
LOAD D2 0.0041; if() #593 Test AND if() #592 Else Start
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8761 ==; Test 'if'
SETV D2 2; if() #593 Body Start
STORE D2 0.0044
GOTO 8771; if() #593 Body End
LOAD D2 0.0041; if() #594 Test AND if() #593 Else Start
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8769 ==; Test 'if'
SETV D2 3; if() #594 Body Start
STORE D2 0.0044
GOTO 8771; if() #594 Body End
SETV D2 4; if() #594 Else Start
STORE D2 0.0044; if() #594 Else End
LOAD D2 0.0010; if() #593 Else End AND if() #592 Else End AND if() #591 Else End
SETR GD10 D2
SETR D2 GD5; while() #18 Test
COMPAREV D2 0
GOTOCMP 8781 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8781 >
SETV D2 0
GOTO 8782
SETV D2 1
COMPAREV D2 0
GOTOCMP 8801 ==; Test 'while'
PUSHR D4; while() #18 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #18 Body End
GOTO 8773; while() #18 End
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3385; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 2.6000
SETR GD5 D2
SETR D2 GD5; while() #19 Test
COMPAREV D2 0
GOTOCMP 8847 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8847 >
SETV D2 0
GOTO 8848
SETV D2 1
COMPAREV D2 0
GOTOCMP 8868 ==; Test 'while'
PUSHR D4; while() #19 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
DIVV D2 2
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #19 Body End
GOTO 8839; while() #19 End
LOAD D2 0.0001; if() #1082 Body End AND if() #1083 Test
COMPAREV D2 38
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9076 ==; Test 'if'
PUSHR D4; if() #1083 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 3.2000
SETR GD5 D2
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0041; if() #595 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8960 ==; Test 'if'
SETV D2 0.5000; if() #595 Body Start
STORE D2 0.0044
GOTO 8986; if() #595 Body End
LOAD D2 0.0041; if() #596 Test AND if() #595 Else Start
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8968 ==; Test 'if'
SETV D2 1; if() #596 Body Start
STORE D2 0.0044
GOTO 8986; if() #596 Body End
LOAD D2 0.0041; if() #597 Test AND if() #596 Else Start
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8976 ==; Test 'if'
SETV D2 2; if() #597 Body Start
STORE D2 0.0044
GOTO 8986; if() #597 Body End
LOAD D2 0.0041; if() #598 Test AND if() #597 Else Start
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8984 ==; Test 'if'
SETV D2 3; if() #598 Body Start
STORE D2 0.0044
GOTO 8986; if() #598 Body End
SETV D2 4; if() #598 Else Start
STORE D2 0.0044; if() #598 Else End
LOAD D2 0.0010; if() #597 Else End AND if() #596 Else End AND if() #595 Else End
SETR GD10 D2
SETR D2 GD5; while() #20 Test
COMPAREV D2 0
GOTOCMP 8996 >
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 8996 >
SETV D2 0
GOTO 8997
SETV D2 1
COMPAREV D2 0
GOTOCMP 9016 ==; Test 'while'
PUSHR D4; while() #20 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #20 Body End
GOTO 8988; while() #20 End
SETV D2 2; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #313 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #313 LoopTest
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9076 ==; for() #313 TestFail?
PUSHR D4; for() #313 Body Start
PUSHV 2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
PUSHR D2
PUSHV 64
PUSHV 12
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 3
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6627; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #313 Body End
LOAD D2 0.0046; for() #313 LoopIncrement
ADDV D2 3
STORE D2 0.0046
GOTO 9020; for() #313 End
LOAD D2 0.0001; if() #1083 Body End AND if() #1084 Test
COMPAREV D2 39
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9446 ==; Test 'if'
PUSHR D4; if() #1084 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #314 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #314 LoopTest
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9201 ==; for() #314 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1085 Test AND for() #314 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9183 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1085 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1085 Body End
SETR D2 GD3
ADDV D2 4
SETR GD3 D2
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #314 Body End
LOAD D2 0.0046; for() #314 LoopIncrement
ADDV D2 4
STORE D2 0.0046
GOTO 9113; for() #314 End
SETV D2 0; for() #315 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #315 LoopTest
COMPAREV D2 180
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9290 ==; for() #315 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1086 Test AND for() #315 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9275 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1086 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1086 Body End
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #315 Body End
LOAD D2 0.0046; for() #315 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 9203; for() #315 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #21 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9380 ==; Test 'while'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1087 Test AND while() #21 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9364 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1087 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1087 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #21 Body End
GOTO 9292; while() #21 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 20
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 2; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #316 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #316 LoopTest
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9446 ==; for() #316 TestFail?
PUSHR D4; for() #316 Body Start
PUSHV 2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
PUSHR D2
PUSHV 80
PUSHV 16
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 3
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6627; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #316 Body End
LOAD D2 0.0046; for() #316 LoopIncrement
ADDV D2 6
STORE D2 0.0046
GOTO 9390; for() #316 End
LOAD D2 0.0001; if() #1084 Body End AND if() #1088 Test
COMPAREV D2 40
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9827 ==; Test 'if'
PUSHR D4; if() #1088 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #317 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #317 LoopTest
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9571 ==; for() #317 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1089 Test AND for() #317 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9553 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1089 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1089 Body End
SETR D2 GD3
ADDV D2 4
SETR GD3 D2
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #317 Body End
LOAD D2 0.0046; for() #317 LoopIncrement
ADDV D2 4
STORE D2 0.0046
GOTO 9483; for() #317 End
SETV D2 0; for() #318 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #318 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9660 ==; for() #318 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1090 Test AND for() #318 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9645 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1090 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1090 Body End
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #318 Body End
LOAD D2 0.0046; for() #318 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 9573; for() #318 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #22 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9750 ==; Test 'while'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1091 Test AND while() #22 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9734 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1091 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1091 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #22 Body End
GOTO 9662; while() #22 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 20
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 0; for() #319 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #319 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9827 ==; for() #319 TestFail?
PUSHR D4; for() #319 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 224; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 144; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
SETV D3 50; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHV 8; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3568; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 19
PUSHV 176
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 3
LOAD D2 0.0031
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9589; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 6; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #319 Body End
LOAD D2 0.0046; for() #319 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 9758; for() #319 End
LOAD D2 0.0001; if() #1088 Body End AND if() #1092 Test
COMPAREV D2 41
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10272 ==; Test 'if'
PUSHR D4; if() #1092 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #320 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #320 LoopTest
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 9952 ==; for() #320 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1093 Test AND for() #320 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9934 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1093 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1093 Body End
SETR D2 GD3
ADDV D2 4
SETR GD3 D2
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #320 Body End
LOAD D2 0.0046; for() #320 LoopIncrement
ADDV D2 4
STORE D2 0.0046
GOTO 9864; for() #320 End
SETV D2 0; for() #321 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #321 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10041 ==; for() #321 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1094 Test AND for() #321 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10026 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1094 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1094 Body End
SETV D2 0
SETR GD5 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #321 Body End
LOAD D2 0.0046; for() #321 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 9954; for() #321 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #23 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10131 ==; Test 'while'
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1095 Test AND while() #23 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10115 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1095 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.2000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1095 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #23 Body End
GOTO 10043; while() #23 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 20
PUSHR D2
POP D2
SETR QUAKE D2
PUSHR D4
PUSHV 4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 7; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
SETV D2 0; for() #322 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #322 LoopTest
PUSHR D2
LOAD D2 0.0044
POP D3
COMPARER D3 D2
GOTOCMP 10163 >=
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body
COMPAREV D2 40
GOTOCMP 10163 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6281; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 10163 >=
SETV D2 1
GOTO 10164
SETV D2 0
COMPAREV D2 0
GOTOCMP 10272 ==; for() #322 TestFail?
SETV D3 176; InlineFunc[int Rand(int)] Params AND for() #322 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0045
SETV D2 0; for() #323 setup
STORE D2 0.0043
LOAD D2 0.0043; for() #323 LoopTest
COMPAREV D2 352
GOTOCMP 10198 >=
PUSHR D4
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0412; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0455; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2
PUSHARGSV 16 0.0002; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.1910; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10198 !=
SETV D2 1
GOTO 10199
SETV D2 0
COMPAREV D2 0
GOTOCMP 10217 ==; for() #323 TestFail?
LOAD D2 0.0044; if() #599 Test AND for() #323 Body Start
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10210 ==; Test 'if'
SETV D3 176; InlineFunc[int Rand(int)] Params AND if() #599 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0045
GOTO 10213; if() #599 Body End
LOAD D2 0.0043; if() #599 Else Start
SUBV D2 176
STORE D2 0.0045; if() #599 Else End
LOAD D2 0.0043; for() #323 Body End AND for() #323 LoopIncrement
ADDV D2 1
STORE D2 0.0043
GOTO 10171; for() #323 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0412; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0455; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0829; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0600; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4
SETV D2 176
PUSHR D2
LOAD D2 0.0032
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int Rand(int, int)] Params Start
PUSHV 17; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #322 Body End
LOAD D2 0.0046; for() #322 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10145; for() #322 End
LOAD D2 0.0001; if() #1092 Body End AND if() #1096 Test
COMPAREV D2 42
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10385 ==; Test 'if'
PUSHR D4; if() #1096 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0010
SETR GD10 D2
SETV D2 0; for() #324 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #324 LoopTest
COMPAREV D2 300
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10385 ==; for() #324 TestFail?
PUSHARGSR D4 0.0002; for() #324 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #324 Body End
LOAD D2 0.0046; for() #324 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10330; for() #324 End
LOAD D2 0.0001; if() #1096 Body End AND if() #1097 Test
COMPAREV D2 43
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10639 ==; Test 'if'
PUSHR D4; if() #1097 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETR D2 GD1
PUSHR D2
PUSHR D4
PUSHV 32; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHR D4
PUSHV 32; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4; if() #600 Test
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1762; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10546 ==; Test 'if'
SETV D2 3; if() #600 Body Start
STORE D2 0.0044
LOAD D2 0.0010
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #325 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #325 LoopTest
COMPAREV D2 10
GOTOCMP 10477 >=
PUSHR D4
LOAD D2 0.0042; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1471; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10477 ==
SETV D2 1
GOTO 10478
SETV D2 0
COMPAREV D2 0
GOTOCMP 10639 ==; for() #325 TestFail?
PUSHARGSR D4 0.0002; for() #325 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start
ADDV D2 0.5000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7097; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #325 Body End
LOAD D2 0.0046; for() #325 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10465; for() #325 End
GOTO 10639; if() #600 Body End
PUSHR D4; if() #600 Else Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 2
STORE D2 0.0044
LOAD D2 0.0010
SETR GD10 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4; while() #24 Test
LOAD D2 0.0042; UsrFunc[bool EZB_CanMoveAngle(int)] Params Start
PUSHR D2; UsrFunc[bool EZB_CanMoveAngle(int)] Params End
CALLFUNC 3.1471; UsrFunc[bool EZB_CanMoveAngle(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10639 ==; Test 'while'
LOAD D2 0.0044; InlineFunc[int Min(int, int)] Params Start AND while() #24 Body Start
ADDV D2 0.2000
PUSHVARGR D2
PUSHVARGV 5; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0044
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Trail(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Trail(ffc, npc, int)] Params End
CALLFUNC 3.7097; UsrFunc[void EZB_Trail(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #24 Body End
GOTO 10601; while() #24 End
LOAD D2 0.0001; if() #600 Else End AND if() #1097 Body End AND if() #1098 Test
COMPAREV D2 49
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 10848 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1098 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #326 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #326 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10733 ==; for() #326 TestFail?
PUSHR D4; for() #326 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 64
LOAD D2 0.0042
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 90; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #326 Body End
LOAD D2 0.0046; for() #326 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10689; for() #326 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #327 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #327 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10848 ==; for() #327 TestFail?
SETV D2 0; for() #328 setup AND for() #327 Body Start
STORE D2 0.0045
LOAD D2 0.0045; for() #328 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 10804 ==; for() #328 TestFail?
SETR D2 GD1; for() #328 Body Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHV 1; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
ADDV D2 180
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
SETR D2 GD2
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHV 1; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
ADDV D2 180
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
PUSHR D4; if() #1099 Test
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1762; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 10800 ==; Test 'if'
PUSHR D4; if() #1099 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
ADDV D2 180
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #1099 Body End
LOAD D2 0.0045; for() #328 Body End AND for() #328 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 10744; for() #328 End
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 64
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #327 Body End
LOAD D2 0.0046; for() #327 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10737; for() #327 End
LOAD D2 0.0001; if() #1098 Body End AND if() #1100 Test
COMPAREV D2 52
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11266 ==; Test 'if'
PUSHR D4; if() #1100 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 4
SETR GD5 D2
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD5; while() #25 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10975 ==; Test 'while'
PUSHR D4; while() #25 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 10965 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1101 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1101 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #25 Body End
GOTO 10885; while() #25 End
SETR D2 GD3
STORE D2 0.0044
SETV D2 0; for() #329 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #329 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11102 ==; for() #329 TestFail?
PUSHR D4; for() #329 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11059 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1102 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1102 Body End
SETV D2 0
SETR GD5 D2
LOAD D2 0.0044
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #329 Body End
LOAD D2 0.0046; for() #329 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 10979; for() #329 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #26 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11200 ==; Test 'while'
PUSHR D4; while() #26 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11184 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1103 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1103 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #26 Body End
GOTO 11104; while() #26 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 4
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 2; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #330 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #330 LoopTest
COMPAREV D2 96
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11266 ==; for() #330 TestFail?
PUSHR D4; for() #330 Body Start
PUSHV 2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
PUSHR D2
PUSHV 48
PUSHV 16
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 3
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6627; UsrFunc[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #330 Body End
LOAD D2 0.0046; for() #330 LoopIncrement
ADDV D2 6
STORE D2 0.0046
GOTO 11210; for() #330 End
LOAD D2 0.0001; if() #1100 Body End AND if() #1104 Test
COMPAREV D2 53
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 11695 ==; Test 'if'
PUSHR D4; if() #1104 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 4
SETR GD5 D2
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD5; while() #27 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11393 ==; Test 'while'
PUSHR D4; while() #27 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11383 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1105 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1105 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #27 Body End
GOTO 11303; while() #27 End
SETR D2 GD3
STORE D2 0.0044
SETV D2 0; for() #331 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #331 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11520 ==; for() #331 TestFail?
PUSHR D4; for() #331 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11477 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1106 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1106 Body End
SETV D2 0
SETR GD5 D2
LOAD D2 0.0044
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #331 Body End
LOAD D2 0.0046; for() #331 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 11397; for() #331 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #28 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11618 ==; Test 'while'
PUSHR D4; while() #28 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11602 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1107 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1107 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #28 Body End
GOTO 11522; while() #28 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 4
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 0; for() #332 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #332 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11695 ==; for() #332 TestFail?
PUSHR D4; for() #332 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 224; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV 16; UsrFunc[int Rand(int, int)] Params Start
PUSHV 144; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
SETV D3 50; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHV 8; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3568; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 19
PUSHV 176
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 3
LOAD D2 0.0031
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9589; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 4; UsrFunc[int Rand(int, int)] Params Start
PUSHV 12; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #332 Body End
LOAD D2 0.0046; for() #332 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 11626; for() #332 End
LOAD D2 0.0001; if() #1104 Body End AND if() #1108 Test
COMPAREV D2 54
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12188 ==; Test 'if'
PUSHR D4; if() #1108 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
SETV D2 4
SETR GD5 D2
LOAD D2 0.0010
SETR GD10 D2
SETV D2 45; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD5; while() #29 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11822 ==; Test 'while'
PUSHR D4; while() #29 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11812 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1109 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 1.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1109 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #29 Body End
GOTO 11732; while() #29 End
SETR D2 GD3
STORE D2 0.0044
SETV D2 0; for() #333 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #333 LoopTest
COMPAREV D2 90
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 11949 ==; for() #333 TestFail?
PUSHR D4; for() #333 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 11906 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1110 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.7000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1110 Body End
SETV D2 0
SETR GD5 D2
LOAD D2 0.0044
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #333 Body End
LOAD D2 0.0046; for() #333 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 11826; for() #333 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETR D2 GD3; while() #30 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12047 ==; Test 'while'
PUSHR D4; while() #30 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 12031 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #1111 Body Start AND UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0040
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
MULTV D2 0.3000
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0040; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4; if() #1111 Body End
SETR D2 GD3; InlineFunc[int Max(int, int)] Params Start
SUBV D2 4
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD3 D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while() #30 Body End
GOTO 11951; while() #30 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 4
PUSHR D2
POP D2
SETR QUAKE D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 3; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0044
SETV D2 0; for() #334 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #334 LoopTest
PUSHR D2
LOAD D2 0.0044
POP D3
COMPARER D3 D2
GOTOCMP 12079 >=
SETR D2 NPCCOUNT; InlineFunc[int screendata::NumNPCs()] Body
COMPAREV D2 40
GOTOCMP 12079 >=
PUSHR D4
LOAD D2 0.0033; UsrFunc[int EZB_NumSummons(npc)] Params Start
PUSHR D2; UsrFunc[int EZB_NumSummons(npc)] Params End
CALLFUNC 3.6281; UsrFunc[int EZB_NumSummons(npc)] Call
POP D4
COMPAREV D2 8
GOTOCMP 12079 >=
SETV D2 1
GOTO 12080
SETV D2 0
COMPAREV D2 0
GOTOCMP 12188 ==; for() #334 TestFail?
SETV D3 176; InlineFunc[int Rand(int)] Params AND for() #334 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0045
SETV D2 0; for() #335 setup
STORE D2 0.0043
LOAD D2 0.0043; for() #335 LoopTest
COMPAREV D2 352
GOTOCMP 12114 >=
PUSHR D4
LOAD D2 0.0047; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0412; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0455; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2
PUSHARGSV 16 0.0002; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.1910; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 12114 !=
SETV D2 1
GOTO 12115
SETV D2 0
COMPAREV D2 0
GOTOCMP 12133 ==; for() #335 TestFail?
LOAD D2 0.0044; if() #601 Test AND for() #335 Body Start
COMPAREV D2 176
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12126 ==; Test 'if'
SETV D3 176; InlineFunc[int Rand(int)] Params AND if() #601 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0045
GOTO 12129; if() #601 Body End
LOAD D2 0.0043; if() #601 Else Start
SUBV D2 176
STORE D2 0.0045; if() #601 Else End
LOAD D2 0.0043; for() #335 Body End AND for() #335 LoopIncrement
ADDV D2 1
STORE D2 0.0043
GOTO 12087; for() #335 End
SETV D2 38; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0021; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0412; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0045; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0455; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0829; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0.0032
PUSHR D4
LOAD D2 0.0032; UsrFunc[void EZB_AddSummon(npc, npc)] Params Start
PUSHR D2
LOAD D2 0.0033
PUSHR D2; UsrFunc[void EZB_AddSummon(npc, npc)] Params End
CALLFUNC 3.0600; UsrFunc[void EZB_AddSummon(npc, npc)] Call
POP D4
SETV D2 176
PUSHR D2
LOAD D2 0.0032
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
PUSHV 6; UsrFunc[int Rand(int, int)] Params Start
PUSHV 17; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #334 Body End
LOAD D2 0.0046; for() #334 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 12061; for() #334 End
LOAD D2 0.0001; if() #1108 Body End AND if() #1112 Test
COMPAREV D2 55
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12281 ==; Test 'if'
PUSHR D4; if() #1112 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #336 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #336 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12271 ==; for() #336 TestFail?
PUSHR D4; for() #336 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 350; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHARGSV 16 0.0002; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #336 Body End
LOAD D2 0.0046; for() #336 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 12219; for() #336 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1112 Body End
LOAD D2 0.0001; if() #1113 Test
COMPAREV D2 56
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12401 ==; Test 'if'
PUSHR D4; if() #1113 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #337 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #337 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12391 ==; for() #337 TestFail?
PUSHR D4; for() #337 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHARGSV 16 0.0002; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #337 Body End
LOAD D2 0.0046; for() #337 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 12339; for() #337 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1113 Body End
LOAD D2 0.0001; if() #1114 Test
COMPAREV D2 57
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12521 ==; Test 'if'
PUSHR D4; if() #1114 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
PUSHVARGV -40; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 40; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0045
SETV D2 0; for() #338 setup
STORE D2 0.0044
LOAD D2 0.0044; for() #338 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12511 ==; for() #338 TestFail?
SETV D2 0; for() #339 setup AND for() #338 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #339 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 12497 ==; for() #339 TestFail?
PUSHR D4; for() #339 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 72
SETV D2 72
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 1
LOAD D2 0.0045
PUSHR D2
PUSHV 4; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
POP D4; for() #339 Body End
LOAD D2 0.0046; for() #339 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 12442; for() #339 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #338 Body End
LOAD D2 0.0044; for() #338 LoopIncrement
ADDV D2 1
STORE D2 0.0044
GOTO 12435; for() #338 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 32; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1114 Body End
LOAD D2 0.0001; if() #1115 Test
COMPAREV D2 58
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12635 ==; Test 'if'
PUSHR D4; if() #1115 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #340 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #340 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 12625 ==; for() #340 TestFail?
PUSHR D4; for() #340 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 25
SETV D2 25
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 300; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
SETV D2 0
STORE D2 0.0045
LOAD D2 0.0034; if() #1116 Test
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 129
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12606 ==; Test 'if'
SETV D2 16; if() #1116 Body Start
STORE D2 0.0045; if() #1116 Body End
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
LOAD D2 0.0045
ADDV D2 24
PUSHR D2; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 2.9653; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 16; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9589; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4; for() #340 Body End
LOAD D2 0.0046; for() #340 LoopIncrement
ADDV D2 2
STORE D2 0.0046
GOTO 12552; for() #340 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1115 Body End
LOAD D2 0.0001; if() #1117 Test
COMPAREV D2 59
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12776 ==; Test 'if'
PUSHR D4; if() #1117 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #341 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #341 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 12766 ==; for() #341 TestFail?
PUSHR D4; for() #341 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 45
SETV D2 45
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 300; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
SETV D2 0
STORE D2 0.0045
LOAD D2 0.0034; if() #1118 Test
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
COMPAREV D2 129
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12747 ==; Test 'if'
SETV D2 16; if() #1118 Body Start
STORE D2 0.0045; if() #1118 Body End
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
LOAD D2 0.0045
ADDV D2 24
PUSHR D2; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 2.9653; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 16; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9589; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4; for() #341 Body End
LOAD D2 0.0046; for() #341 LoopIncrement
ADDV D2 2
STORE D2 0.0046
GOTO 12693; for() #341 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1117 Body End
LOAD D2 0.0001; if() #1119 Test
COMPAREV D2 60
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 12904 ==; Test 'if'
PUSHR D4; if() #1119 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 150
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3568; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV 3.6000
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6381; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1119 Body End
LOAD D2 0.0001; if() #1120 Test
COMPAREV D2 61
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13032 ==; Test 'if'
PUSHR D4; if() #1120 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 200
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3568; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV -1
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6381; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1120 Body End
LOAD D2 0.0001; if() #1121 Test
COMPAREV D2 62
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13181 ==; Test 'if'
PUSHR D4; if() #1121 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #342 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #342 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13171 ==; for() #342 TestFail?
PUSHARGSR D4 0.0002; for() #342 Body Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 200
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3568; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV -1
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6381; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 6; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; for() #342 Body End
LOAD D2 0.0046; for() #342 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13090; for() #342 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1121 Body End
LOAD D2 0.0001; if() #1122 Test
COMPAREV D2 63
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13331 ==; Test 'if'
PUSHR D4; if() #1122 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 -2; for() #343 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #343 LoopTest
COMPAREV D2 2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13321 ==; for() #343 TestFail?
PUSHR D4; for() #343 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 200
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3568; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHV 3.6000
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6381; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #343 Body End
LOAD D2 0.0046; for() #343 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13262; for() #343 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1122 Body End
LOAD D2 0.0001; if() #1123 Test
COMPAREV D2 64
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13490 ==; Test 'if'
PUSHR D4; if() #1123 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 0; for() #344 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #344 LoopTest
COMPAREV D2 6
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13480 ==; for() #344 TestFail?
PUSHR D4; for() #344 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHR D4
PUSHV -30; UsrFunc[int Rand(int, int)] Params Start
PUSHV 30; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
PUSHV 100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 300; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3568; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHR D4
PUSHV 24; UsrFunc[int Rand(int, int)] Params Start
PUSHV 36; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
DIVV D2 10
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6381; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #344 Body End
LOAD D2 0.0046; for() #344 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13412; for() #344 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1123 Body End
LOAD D2 0.0001; if() #1124 Test
COMPAREV D2 65
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13600 ==; Test 'if'
PUSHR D4; if() #1124 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 0; for() #345 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #345 LoopTest
COMPAREV D2 18
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13600 ==; for() #345 TestFail?
PUSHR D4; for() #345 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHR D4
PUSHV 100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 400; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3568; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHR D4
PUSHV 24; UsrFunc[int Rand(int, int)] Params Start
PUSHV 36; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
DIVV D2 10
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6381; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #345 Body End
LOAD D2 0.0046; for() #345 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13539; for() #345 End
LOAD D2 0.0001; if() #1124 Body End AND if() #1125 Test
COMPAREV D2 66
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13675 ==; Test 'if'
PUSHR D4; if() #1125 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #346 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #346 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13665 ==; for() #346 TestFail?
PUSHR D4; for() #346 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
MULTV D2 400
SETV D2 400
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
POP D3
MULTR D2 D3
ADDV D2 200
PUSHR D2; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #346 Body End
LOAD D2 0.0046; for() #346 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13617; for() #346 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1125 Body End
LOAD D2 0.0001; if() #1126 Test
COMPAREV D2 67
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13779 ==; Test 'if'
PUSHR D4; if() #1126 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 0; for() #347 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #347 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 13769 ==; for() #347 TestFail?
PUSHR D4; for() #347 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
MULTV D2 400
SETV D2 400
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
POP D3
MULTR D2 D3
ADDV D2 200
PUSHR D2; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #347 Body End
LOAD D2 0.0046; for() #347 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13724; for() #347 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1126 Body End
LOAD D2 0.0001; if() #1127 Test
COMPAREV D2 68
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 13878 ==; Test 'if'
PUSHR D4; if() #1127 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6766; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 150; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1127 Body End
LOAD D2 0.0001; if() #1128 Test
COMPAREV D2 69
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14000 ==; Test 'if'
PUSHR D4; if() #1128 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6766; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 -1; for() #348 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #348 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 13990 ==; for() #348 TestFail?
PUSHR D4; for() #348 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 250; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #348 Body End
LOAD D2 0.0046; for() #348 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 13945; for() #348 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1128 Body End
LOAD D2 0.0001; if() #1129 Test
COMPAREV D2 70
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14133 ==; Test 'if'
SETV D2 0; for() #349 setup AND if() #1129 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #349 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14034 ==; for() #349 TestFail?
PUSHR D4; for() #349 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 4; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6766; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
POP D4; for() #349 Body End
LOAD D2 0.0046; for() #349 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14007; for() #349 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 0; for() #350 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #350 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14123 ==; for() #350 TestFail?
PUSHR D4; for() #350 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
MULTV D2 400
SETV D2 400
PUSHR D2
LOAD D2 0.0046
DIVV D2 7
POP D3
MULTR D2 D3
ADDV D2 200
PUSHR D2; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3544; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Call
POP D4; for() #350 Body End
LOAD D2 0.0046; for() #350 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14078; for() #350 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 24; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1129 Body End
LOAD D2 0.0001; if() #1130 Test
COMPAREV D2 72
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14559 ==; Test 'if'
PUSHR D4; if() #1130 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHV -32; UsrFunc[int Rand(int, int)] Params Start
PUSHV 32; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
ADDV D2 -32
STORE D2 0.0040
PUSHR D4
PUSHV -32; UsrFunc[int Rand(int, int)] Params Start
PUSHV 32; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
ADDV D2 -32
STORE D2 0.0039
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #351 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #351 LoopTest
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14350 ==; for() #351 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #351 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 45
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 1; for() #352 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #352 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14269 ==; for() #352 TestFail?
PUSHR D4; for() #352 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 45
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 135
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #352 Body End
LOAD D2 0.0045; for() #352 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14203; for() #352 End
SETV D2 1; for() #353 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #353 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14337 ==; for() #353 TestFail?
PUSHR D4; for() #353 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV 45
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV -45
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 60; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #353 Body End
LOAD D2 0.0045; for() #353 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14271; for() #353 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #351 Body End
LOAD D2 0.0046; for() #351 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14165; for() #351 End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #354 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #354 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14559 ==; for() #354 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #354 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 45
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 1; for() #355 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #355 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14472 ==; for() #355 TestFail?
PUSHR D4; for() #355 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 45
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0039
PUSHR D2
PUSHV 2
PUSHV 135
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #355 Body End
LOAD D2 0.0045; for() #355 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14400; for() #355 End
SETV D2 1; for() #356 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #356 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14546 ==; for() #356 TestFail?
PUSHR D4; for() #356 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV 45
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
PEEK D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0045
MULTV D2 48
SETV D2 48
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 2
PUSHV -45
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 16; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #356 Body End
LOAD D2 0.0045; for() #356 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14474; for() #356 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #354 Body End
LOAD D2 0.0046; for() #354 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14354; for() #354 End
LOAD D2 0.0001; if() #1130 Body End AND if() #1131 Test
COMPAREV D2 73
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14839 ==; Test 'if'
PUSHR D4; if() #1131 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHVARGV -60; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 60; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
PUSHV -15; UsrFunc[int Rand(int, int)] Params Start
PUSHV 15; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0042
SETV D2 0; for() #357 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #357 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14635 ==; for() #357 TestFail?
SETV D2 0; for() #357 Body Start
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #357 Body End
LOAD D2 0.0046; for() #357 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14617; for() #357 End
SETV D2 0; for() #358 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #358 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14669 ==; for() #358 TestFail?
PUSHR D4; for() #358 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #358 Body End
LOAD D2 0.0046; for() #358 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14637; for() #358 End
SETV D2 0; for() #359 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #359 LoopTest
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14804 ==; for() #359 TestFail?
LOAD D2 0.0046; if() #1132 Test AND for() #359 Body Start
MODV D2 4
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 14770 ==; Test 'if'
LOAD D2 0.0046; if() #1132 Body Start
DIVV D2 4
STORE D2 0.0045
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0044
LOAD D2 0.0012
MULTV D2 8
PUSHR D2
LOAD D2 0.0011
MULTV D2 8
POP D3
ADDR D2 D3
DIVV D2 2
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0035; UsrFunc[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 16
LOAD D2 0.0045
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0043; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0043; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0044
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 4
LOAD D2 0.0044
PUSHR D2
PUSHV 32
PUSHV 16
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6502; UsrFunc[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Call
POP D4; if() #1132 Body End
PUSHR D4
LOAD D2 0.0035; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 16; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params End
CALLFUNC 3.7359; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Call
PEEK D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #359 Body End
LOAD D2 0.0046; for() #359 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14671; for() #359 End
SETV D2 0; for() #360 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #360 LoopTest
COMPAREV D2 48
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 14839 ==; for() #360 TestFail?
PUSHR D4; for() #360 Body Start
LOAD D2 0.0035; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0028
PUSHR D2
PUSHV 16; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Params End
CALLFUNC 3.7359; UsrFunc[void EZB_UpdateLaserArray(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #360 Body End
LOAD D2 0.0046; for() #360 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14806; for() #360 End
LOAD D2 0.0001; if() #1131 Body End AND if() #1133 Test
COMPAREV D2 74
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 15425 ==; Test 'if'
SETV D2 0.0001; if() #1133 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0040
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0039
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #1134 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 14878 ==; Test 'if'
SETV D2 0.0001; if() #1134 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0040
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0039; if() #1134 Body End
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #361 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #361 LoopTest
COMPAREV D2 40
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15150 ==; for() #361 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #361 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
SETV D2 88; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHV 128
PUSHV 88; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0041; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
DIVV D2 40
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0041; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
DIVV D2 40
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0; for() #362 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #362 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15065 ==; for() #362 TestFail?
LOAD D2 0.0036; for() #362 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int VectorX(int, int)] Params Start
MULTV D2 4
PUSHR D2
LOAD D2 0.0046
MULTV D2 5
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0046; UsrFunc[int VectorY(int, int)] Params Start
MULTV D2 4
PUSHR D2
LOAD D2 0.0046
MULTV D2 5
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #362 Body End
LOAD D2 0.0045; for() #362 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 14987; for() #362 End
SETV D2 0; for() #363 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #363 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15137 ==; for() #363 TestFail?
PUSHR D4; for() #363 Body Start
LOAD D2 0.0035; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
PUSHV 0
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 0
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #363 Body End
LOAD D2 0.0045; for() #363 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15067; for() #363 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #361 Body End
LOAD D2 0.0046; for() #361 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 14882; for() #361 End
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #1135 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
GOTOCMP 15164 ==; Test 'if'
SETV D2 0.0001; if() #1135 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0040
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0039; if() #1135 Body End
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #364 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #364 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15425 ==; for() #364 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #364 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHV 128; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHV 88
LOAD D2 0.0040
ADDV D2 8
PUSHR D2
LOAD D2 0.0039
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
PUSHR D4
PUSHV 128; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHV 88
LOAD D2 0.0040
ADDV D2 8
PUSHR D2
LOAD D2 0.0039
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0041; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
DIVV D2 80
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
ADDV D2 128
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0041; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
DIVV D2 80
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
ADDV D2 88
PUSHR D2
LOAD D2 0.0036
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0; for() #365 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #365 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15337 ==; for() #365 TestFail?
LOAD D2 0.0046; InlineFunc[int Max(int, int)] Params Start AND for() #365 Body Start
MULTV D2 2
SUBV2 160 D2
PUSHVARGR D2
PUSHVARGV 40; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0044
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 5
ADDV D2 200
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0036
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0044; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 5
ADDV D2 200
PUSHR D2
LOAD D2 0.0045
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0045
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #365 Body End
LOAD D2 0.0045; for() #365 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15252; for() #365 End
SETV D2 0; for() #366 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #366 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15412 ==; for() #366 TestFail?
PUSHR D4; for() #366 Body Start
LOAD D2 0.0035; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0045
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 6
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0028
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
LOAD D2 0.0046
PUSHR D2
PUSHV 40; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #366 Body End
LOAD D2 0.0045; for() #366 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15339; for() #366 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #364 Body End
LOAD D2 0.0046; for() #364 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15168; for() #364 End
LOAD D2 0.0001; if() #1133 Body End AND if() #1136 Test
COMPAREV D2 75
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16040 ==; Test 'if'
PUSHR D4; if() #1136 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #367 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #367 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15744 ==; for() #367 TestFail?
LOAD D2 0.0028; InlineFunc[int Choose(int)] Params Start AND for() #367 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0043
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0040
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
STORE D2 0.0039
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3385; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0037
SETV D2 0; for() #368 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #368 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15731 ==; for() #368 TestFail?
SETV D2 0; for() #369 setup AND for() #368 Body Start
STORE D2 0.0044
LOAD D2 0.0044; for() #369 LoopTest
COMPAREV D2 256
GOTOCMP 15562 >=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15562 !=
SETV D2 1
GOTO 15563
SETV D2 0
COMPAREV D2 0
GOTOCMP 15581 ==; for() #369 TestFail?
LOAD D2 0.0040; for() #369 Body Start
PUSHR D2
LOAD D2 0.0038
POP D3
ADDR D2 D3
STORE D2 0.0040
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0037
POP D3
ADDR D2 D3
STORE D2 0.0039; for() #369 Body End
LOAD D2 0.0044; for() #369 LoopIncrement
ADDV D2 8
STORE D2 0.0044
GOTO 15549; for() #369 End
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 1
MULTV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
ADDV D2 1
MULTV D2 2
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0046; if() #1137 Test
MODV D2 4
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15637 ==; Test 'if'
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start AND if() #1137 Body Start
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
MULTV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0045
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0043
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End AND if() #1137 Body End
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0038
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0040
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0037
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0039
LOAD D2 0.0038; if() #1138 Test
COMPAREV D2 0
GOTOCMP 15663 >=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
SUBV D2 8
PUSHR D2
LOAD D2 0.0039
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15677 !=
LOAD D2 0.0038
COMPAREV D2 0
GOTOCMP 15675 <=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0039
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15677 !=
SETV D2 0
GOTO 15678
SETV D2 1
COMPAREV D2 0
GOTOCMP 15689 ==; Test 'if'
LOAD D2 0.0038; if() #1138 Body Start
SUBV2 0 D2
STORE D2 0.0038
LOAD D2 0.0040; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
ADDV D2 4
STORE D2 0.0040; if() #1138 Body End
LOAD D2 0.0037; if() #1139 Test
COMPAREV D2 0
GOTOCMP 15701 >=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
SUBV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15715 !=
LOAD D2 0.0037
COMPAREV D2 0
GOTOCMP 15713 <=
LOAD D2 0.0040; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 15715 !=
SETV D2 0
GOTO 15716
SETV D2 1
COMPAREV D2 0
GOTOCMP 15727 ==; Test 'if'
LOAD D2 0.0037; if() #1139 Body Start
SUBV2 0 D2
STORE D2 0.0037
LOAD D2 0.0039; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
ADDV D2 4
STORE D2 0.0039; if() #1139 Body End
LOAD D2 0.0045; for() #368 Body End AND for() #368 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15542; for() #368 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #367 Body End
LOAD D2 0.0046; for() #367 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15442; for() #367 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 48; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #370 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #370 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16004 ==; for() #370 TestFail?
LOAD D2 0.0035; for() #370 Body Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0040
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0039
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
SETV D2 1; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #371 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #371 LoopTest
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 15961 ==; for() #371 TestFail?
PUSHR D4; for() #371 Body Start
LOAD D2 0.0040; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3385; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0040
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0040
LOAD D2 0.0039
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0039
LOAD D2 0.0040
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0.0040; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0039
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0035
PUSHR D2
LOAD D2 0.0046
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0041
LOAD D2 0.0041; if() #1140 Test
COMPAREV D2 8
GOTOCMP 15945 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 15945 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 255
GOTOCMP 15945 >
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 15945 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 175
GOTOCMP 15945 >
SETV D2 0
GOTO 15946
SETV D2 1
COMPAREV D2 0
GOTOCMP 15961 !=; Test 'if' AND break 1; AND if() #1140 Body
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #371 Body End
LOAD D2 0.0045; for() #371 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 15802; for() #371 End
PUSHR D4; if() #1141 Test
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 15991 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
COMPAREV D2 255
GOTOCMP 15991 >
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 15991 <
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
COMPAREV D2 175
GOTOCMP 15991 >
SETV D2 0
GOTO 15992
SETV D2 1
COMPAREV D2 0
GOTOCMP 16004 !=; Test 'if' AND break 1; AND if() #1141 Body
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 10
PUSHR D2
POP D2
SETR QUAKE D2; for() #370 Body End
LOAD D2 0.0046; for() #370 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 15756; for() #370 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
POP D3
SUBR D3 D2
PUSHR D3
PUSHV 16; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.6780; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4; if() #1136 Body End
LOAD D2 0.0001; if() #1142 Test
COMPAREV D2 76
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16130 ==; Test 'if'
PUSHR D4; if() #1142 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0019; if() #1143 Test
COMPAREV D2 0
GOTOCMP 16095 ==; Test 'if'
LOAD D2 0.0019; InlineFunc[void Game::PlaySound(int)] Params AND if() #1143 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1143 Body End
PUSHR D4
PUSHV 1; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3696; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 200
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6308; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1142 Body End
LOAD D2 0.0001; if() #1144 Test
COMPAREV D2 77
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16241 ==; Test 'if'
PUSHR D4; if() #1144 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0019; if() #1145 Test
COMPAREV D2 0
GOTOCMP 16185 ==; Test 'if'
LOAD D2 0.0019; InlineFunc[void Game::PlaySound(int)] Params AND if() #1145 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1145 Body End
SETV D2 -1; for() #372 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #372 LoopTest
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 16241 ==; for() #372 TestFail?
PUSHR D4; for() #372 Body Start
PUSHV 1; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3696; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 45
SETV D2 45
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHV 200
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6308; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; for() #372 Body End
LOAD D2 0.0046; for() #372 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16187; for() #372 End
LOAD D2 0.0001; if() #1144 Body End AND if() #1146 Test
COMPAREV D2 78
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16331 ==; Test 'if'
PUSHR D4; if() #1146 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0019; if() #1147 Test
COMPAREV D2 0
GOTOCMP 16296 ==; Test 'if'
LOAD D2 0.0019; InlineFunc[void Game::PlaySound(int)] Params AND if() #1147 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1147 Body End
PUSHR D4
PUSHV 1; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3696; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
PUSHV 400
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6308; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1146 Body End
LOAD D2 0.0001; if() #1148 Test
COMPAREV D2 79
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16417 ==; Test 'if'
PUSHR D4; if() #1148 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
PUSHV 2; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3696; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0019
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6308; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1148 Body End
LOAD D2 0.0001; if() #1149 Test
COMPAREV D2 80
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16598 ==; Test 'if'
PUSHR D4; if() #1149 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV -1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 1
SETR GD4 D2
SETV D2 0; for() #373 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #373 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16502 ==; for() #373 TestFail?
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #1150 Test AND for() #373 Body Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
SETV D2 40; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16502 !=; Test 'if' AND break 1; AND if() #1150 Body
PUSHARGSR D4 0.0003; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHV 40; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #373 Body End
LOAD D2 0.0046; for() #373 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16436; for() #373 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV 3; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHV 90; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0663; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
PUSHR D4
PUSHV 0; UsrFunc[int Rand(int, int)] Params Start
PUSHV 35; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
MULTR D2 D3
ADDV D2 90
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6308; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 40; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1149 Body End
LOAD D2 0.0001; if() #1151 Test
COMPAREV D2 81
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16727 ==; Test 'if'
PUSHR D4; if() #1151 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Teleport(ffc, npc, int)] Params End
CALLFUNC 3.6766; UsrFunc[void EZB_Teleport(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 12; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3385; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV 3; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6308; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 40; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4; if() #1151 Body End
LOAD D2 0.0001; if() #1152 Test
COMPAREV D2 82
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16900 ==; Test 'if'
SETV D2 0; for() #374 setup AND if() #1152 Body Start
STORE D2 0.0046
LOAD D2 0.0046; for() #374 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16763 ==; for() #374 TestFail?
PUSHR D4; for() #374 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHARGSV -1000 0.0002
PUSHV 4; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.6780; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4; for() #374 Body End
LOAD D2 0.0046; for() #374 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16734; for() #374 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
SETV D2 0; for() #375 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #375 LoopTest
COMPAREV D2 80
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 16900 ==; for() #375 TestFail?
PUSHR D4; for() #375 Body Start
LOAD D2 0.0042; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params End
CALLFUNC 3.7320; UsrFunc[int EZB_TurnToAngle(int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0046; if() #1153 Test
MODV D2 10
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 16887 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1153 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV 4; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0028
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6308; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
POP D4; if() #1153 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #375 Body End
LOAD D2 0.0046; for() #375 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16807; for() #375 End
LOAD D2 0.0001; if() #1152 Body End AND if() #1154 Test
COMPAREV D2 83
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17055 ==; Test 'if'
PUSHR D4; if() #1154 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #376 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #376 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17055 ==; for() #376 TestFail?
PUSHR D4; for() #376 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 3
ADDV D2 0.7500
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 80
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3180; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #376 Body End
LOAD D2 0.0046; for() #376 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 16964; for() #376 End
LOAD D2 0.0001; if() #1154 Body End AND if() #1155 Test
COMPAREV D2 84
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17237 ==; Test 'if'
PUSHR D4; if() #1155 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #377 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #377 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17237 ==; for() #377 TestFail?
PUSHR D4; for() #377 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 3
ADDV D2 0.7500
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 80
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3180; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #377 Body End
LOAD D2 0.0046; for() #377 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17146; for() #377 End
LOAD D2 0.0001; if() #1155 Body End AND if() #1156 Test
COMPAREV D2 85
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17510 ==; Test 'if'
PUSHR D4; if() #1156 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 -1
STORE D2 0.0043
SETV D2 0; for() #378 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #378 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17510 ==; for() #378 TestFail?
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params AND for() #378 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #379 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #379 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17456 ==; for() #379 TestFail?
PUSHR D4; for() #379 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
ADDV D2 0.5000
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
MULTV D2 80
SETV D2 80
PUSHR D2
LOAD D2 0.0043
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
PUSHR D2
LOAD D2 0.0043
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
MULTV D2 60
SETV D2 60
PUSHR D2
LOAD D2 0.0043
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
PUSHR D2
LOAD D2 0.0043
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3180; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #379 Body End
LOAD D2 0.0046; for() #379 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17337; for() #379 End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 8; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0043
SUBV2 0 D2
STORE D2 0.0043
LOAD D2 0.0045; if() #1157 Test
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17506 ==; Test 'if'
PUSHR D4; if() #1157 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042; if() #1157 Body End
LOAD D2 0.0045; for() #378 Body End AND for() #378 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 17328; for() #378 End
LOAD D2 0.0001; if() #1156 Body End AND if() #1158 Test
COMPAREV D2 86
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 17762 ==; Test 'if'
PUSHR D4; if() #1158 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 4
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #380 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #380 LoopTest
COMPAREV D2 5
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17762 ==; for() #380 TestFail?
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params AND for() #380 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV -20; UsrFunc[int Rand(int, int)] Params Start
PUSHV 20; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 0; for() #381 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #381 LoopTest
COMPAREV D2 12
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17758 ==; for() #381 TestFail?
PUSHR D4; for() #381 Body Start
LOAD D2 0.0042; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 1; UsrFunc[int EZB_TurnToAngle(int, int, int)] Params End
CALLFUNC 3.7320; UsrFunc[int EZB_TurnToAngle(int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3385; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 2
ADDV D2 1.5000
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 5
SETV D2 5
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 15
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3180; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #381 Body End
LOAD D2 0.0046; for() #381 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17615; for() #381 End
LOAD D2 0.0045; for() #380 Body End AND for() #380 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 17600; for() #380 End
LOAD D2 0.0001; if() #1158 Body End AND if() #1159 Test
COMPAREV D2 87
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18215 ==; Test 'if'
PUSHR D4; if() #1159 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #382 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #382 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17905 ==; for() #382 TestFail?
PUSHR D4; for() #382 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 80
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3180; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #382 Body End
LOAD D2 0.0046; for() #382 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17826; for() #382 End
SETV D2 0; for() #383 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #383 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 17960 ==; for() #383 TestFail?
PUSHR D4; for() #383 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3180; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #383 Body End
LOAD D2 0.0046; for() #383 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17907; for() #383 End
SETV D2 35; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #384 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #384 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18017 ==; for() #384 TestFail?
PUSHR D4; for() #384 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3180; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #384 Body End
LOAD D2 0.0046; for() #384 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 17964; for() #384 End
SETV D2 0; for() #385 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #385 LoopTest
COMPAREV D2 144
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18133 ==; for() #385 TestFail?
LOAD D2 0.0046; if() #1160 Test AND for() #385 Body Start
MODV D2 18
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18032 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1160 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1160 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3385; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.7500
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3180; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #385 Body End
LOAD D2 0.0046; for() #385 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18019; for() #385 End
SETV D2 0; for() #386 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #386 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18215 ==; for() #386 TestFail?
PUSHR D4; for() #386 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 6
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
ADDV D2 90
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.3180; UsrFunc[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #386 Body End
LOAD D2 0.0046; for() #386 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18135; for() #386 End
LOAD D2 0.0001; if() #1159 Body End AND if() #1161 Test
COMPAREV D2 88
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18571 ==; Test 'if'
PUSHR D4; if() #1161 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #387 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #387 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18379 ==; for() #387 TestFail?
PUSHR D4; for() #387 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 120
PUSHR D2
LOAD D2 0.0042
SUBV D2 130
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2895; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #387 Body End
LOAD D2 0.0046; for() #387 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18308; for() #387 End
SETV D2 0; for() #388 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #388 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18474 ==; for() #388 TestFail?
PUSHR D4; for() #388 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
PUSHV 0.5000
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 120
PUSHR D2
LOAD D2 0.0042
SUBV D2 130
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2895; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #388 Body End
LOAD D2 0.0046; for() #388 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18381; for() #388 End
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #389 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #389 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18571 ==; for() #389 TestFail?
PUSHR D4; for() #389 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 3
ADDV D2 0.7500
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 120
PUSHR D2
LOAD D2 0.0046
MULTV D2 10
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 130
PUSHR D2
LOAD D2 0.0046
MULTV D2 10
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2895; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #389 Body End
LOAD D2 0.0046; for() #389 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18478; for() #389 End
LOAD D2 0.0001; if() #1161 Body End AND if() #1162 Test
COMPAREV D2 89
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 18792 ==; Test 'if'
PUSHR D4; if() #1162 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
PEEK D4
PUSHR D4; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
POP D4
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
ADDV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 4
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #390 setup
STORE D2 0.0045
LOAD D2 0.0045; for() #390 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18792 ==; for() #390 TestFail?
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params AND for() #390 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
PUSHV -20; UsrFunc[int Rand(int, int)] Params Start
PUSHV 20; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0043
SETV D2 0; for() #391 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #391 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18788 ==; for() #391 TestFail?
LOAD D2 0.0045; if() #1163 Test AND for() #391 Body Start
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18700 ==; Test 'if'
PUSHR D4; if() #1163 Body Start
LOAD D2 0.0042; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 4
ADDV D2 4
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
POP D4; if() #1163 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
MULTV D2 5
SETV D2 5
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0043
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 22.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
MULTV D2 2
PUSHR D2; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2895; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #391 Body End
LOAD D2 0.0046; for() #391 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18677; for() #391 End
LOAD D2 0.0045; for() #390 Body End AND for() #390 LoopIncrement
ADDV D2 1
STORE D2 0.0045
GOTO 18662; for() #390 End
LOAD D2 0.0001; if() #1162 Body End AND if() #1164 Test
COMPAREV D2 90
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19572 ==; Test 'if'
PUSHR D4; if() #1164 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 2; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Params End
CALLFUNC 3.3819; UsrFunc[void EZB_FiringAnim(ffc, npc, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[int EZB_DirAngle(int)] Params
CALLFUNC 3.2069; UsrFunc[int EZB_DirAngle(int)] Call
POP D4
STORE D2 0.0042
SETV D2 30; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
MULTV D2 8
ADDV D2 16
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0011
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0035
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0; for() #392 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #392 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18935 ==; for() #392 TestFail?
PUSHR D4; for() #392 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
SUBV D2 80
PUSHR D2
LOAD D2 0.0046
MULTV D2 4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
SUBV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 4.5000
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2895; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #392 Body End
LOAD D2 0.0046; for() #392 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18856; for() #392 End
SETV D2 0; for() #393 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #393 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 18990 ==; for() #393 TestFail?
PUSHR D4; for() #393 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2895; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #393 Body End
LOAD D2 0.0046; for() #393 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18937; for() #393 End
SETV D2 35; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0; for() #394 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #394 LoopTest
COMPAREV D2 30
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19047 ==; for() #394 TestFail?
PUSHR D4; for() #394 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2895; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #394 Body End
LOAD D2 0.0046; for() #394 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 18994; for() #394 End
SETV D2 0; for() #395 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #395 LoopTest
COMPAREV D2 108
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19163 ==; for() #395 TestFail?
LOAD D2 0.0046; if() #1165 Test AND for() #395 Body Start
MODV D2 18
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19062 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1165 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1165 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3385; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.7500
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2895; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #395 Body End
LOAD D2 0.0046; for() #395 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19049; for() #395 End
SETV D2 0; for() #396 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #396 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19271 ==; for() #396 TestFail?
PUSHR D4; for() #396 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0042; InlineFunc[int WrapDegrees(int)] Params Start
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
PUSHR D2; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Params End
CALLFUNC 3.3385; UsrFunc[void EZB_FaceAngle(ffc, npc, int, int)] Call
PEEK D4
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
PUSHV 0.5000
PUSHV 0; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Params End
CALLFUNC 2.7555; UsrFunc[void Ghost_MoveAtAngle(int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0042
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2895; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #396 Body End
LOAD D2 0.0046; for() #396 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19165; for() #396 End
SETV D2 3; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 40
PUSHR D2
POP D2
SETR QUAKE D2
SETV D2 0; for() #397 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #397 LoopTest
COMPAREV D2 24
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 19370 ==; for() #397 TestFail?
PUSHR D4; for() #397 Body Start
LOAD D2 0.0047; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 16
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0035; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 16
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
SETV D3 360; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
PUSHR D4
PUSHV 100; UsrFunc[int Rand(int, int)] Params Start
PUSHV 400; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
PUSHR D2
PUSHV 9; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3568; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0031
PUSHR D4
LOAD D2 0.0031; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params Start
PUSHR D2
PUSHV 15
PUSHR D4
PUSHV 24; UsrFunc[int Rand(int, int)] Params Start
PUSHV 36; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
DIVV D2 10
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Params End
CALLFUNC 2.9699; UsrFunc[void SetEWeaponMovement(eweapon, int, int, int)] Call
PEEK D4
LOAD D2 0.0031; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params Start
PUSHR D2; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Params End
CALLFUNC 3.6381; UsrFunc[void EZB_SetEWeaponDeathEffect(eweapon)] Call
POP D4; for() #397 Body End
LOAD D2 0.0046; for() #397 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19279; for() #397 End
SETV D2 0; for() #398 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #398 LoopTest
COMPAREV D2 60
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19427 ==; for() #398 TestFail?
PUSHR D4; for() #398 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2895; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #398 Body End
LOAD D2 0.0046; for() #398 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19372; for() #398 End
SETV D2 0; for() #399 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #399 LoopTest
COMPAREV D2 36
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19501 ==; for() #399 TestFail?
LOAD D2 0.0046; if() #1166 Test AND for() #399 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19441 ==; Test 'if'
SETV D2 54; InlineFunc[void Game::PlaySound(int)] Params AND if() #1166 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1166 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0046
MULTV D2 20
SETV D2 20
PUSHR D2
LOAD D2 0.0046
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2895; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #399 Body End
LOAD D2 0.0046; for() #399 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19429; for() #399 End
SETV D2 0; for() #400 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #400 LoopTest
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 19572 ==; for() #400 TestFail?
PUSHR D4; for() #400 Body Start
LOAD D2 0.0047; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0042
ADDV D2 60
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0035
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0046; InlineFunc[int Sin(int)] Params Start
MULTV D2 9
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0034
PUSHR D2
POP REFNPC
PUSHR NPCWDP; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2895; UsrFunc[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #400 Body End
LOAD D2 0.0046; for() #400 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 19503; for() #400 End
SETV D2 0; if() #1164 Body End
STORE D2 0.0046
LOAD D2 0.0027; if() #1167 Test
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 0
GOTOCMP 19789 ==; Test 'if'
LOAD D2 0.0027; if() #602 Test AND if() #1167 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19667 ==; Test 'if'
LOAD D2 0.0027; if() #1168 Test AND if() #602 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 202
COMPAREV D2 0
GOTOCMP 19789 ==; Test 'if'
PUSHR D4; if(true) #603 [Opt:AlwaysOn] AND if() #1168 Body Start
LOAD D2 0.0034; UsrFunc[int EZB_BarrierShift_TransformAnimSize(npc, int)] Params Start
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[int EZB_BarrierShift_TransformAnimSize(npc, int)] Params End
CALLFUNC 3.0716; UsrFunc[int EZB_BarrierShift_TransformAnimSize(npc, int)] Call
POP D4
STORE D2 0.0045
LOAD D2 0.0045; InlineFunc[int Max(int, int)] Params Start AND if(true) #1169 [Opt:AlwaysOn]
PUSHVARGR D2
LOAD D2 0.0034; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_TILE_W
LOAD D2 0.0034
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_TILE_H; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
MULTV D2 8
ADDV D2 8
STORE D2 0.0044
PUSHR D4
PUSHV 0; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0047; UsrFunc[int CenterX(ffc)] Params Start
PUSHR D2; UsrFunc[int CenterX(ffc)] Params End
CALLFUNC 2.0661; UsrFunc[int CenterX(ffc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0047; UsrFunc[int CenterY(ffc)] Params Start
PUSHR D2; UsrFunc[int CenterY(ffc)] Params End
CALLFUNC 2.0707; UsrFunc[int CenterY(ffc)] Call
POP D4
PUSHR D2
LOAD D2 0.0044
PUSHR D2
PUSHV 12
PUSHARGSV 0 0.0003; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.6308; UsrFunc[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 16; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Params End
CALLFUNC 3.7723; UsrFunc[void EZB_Waitframes(ffc, npc, int, int)] Call
POP D4
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0034; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 0
PUSHV 1; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params End
CALLFUNC 3.0774; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 202 D2
SETV D2 1
STORE D2 0.0046; if() #1168 Body End
GOTO 19789; if() #602 Body End
LOAD D2 0.0027; if() #604 Test AND if() #602 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19733 ==; Test 'if'
SETV D2 0; if() #604 Body Start
STORE D2 0.0045
LOAD D2 0.0027; if() #605 Test
PUSHR D2
POP D0
READPODARRAYV D2 314
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19688 ==; Test 'if'
SETV D2 1; if() #605 Body Start
STORE D2 0.0045
GOTO 19700; if() #605 Body End
LOAD D2 0.0027; InlineFunc[int Rand(int)] Params Start AND if() #1170 Test AND if() #605 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 314
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19700 ==; Test 'if'
SETV D2 1; if() #1170 Body Start
STORE D2 0.0045; if() #1170 Body End
LOAD D2 0.0027; if() #605 Else End AND if() #606 Test
PUSHR D2
POP D0
READPODARRAYV D2 313
COMPAREV D2 0
GOTOCMP 19717 ==; Test 'if'
LOAD D2 0.0027; if() #606 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 313
SUBV D2 1
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2
GOTO 19789; if() #606 Body End
LOAD D2 0.0045; if() #1171 Test AND if() #606 Else Start
COMPAREV D2 0
GOTOCMP 19789 ==; Test 'if'
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params AND if() #1171 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0034; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHARGSV 0 0.0002; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params End
CALLFUNC 3.0774; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Call
POP D4
SETV D2 1
STORE D2 0.0046; if() #1171 Body End
GOTO 19789; if() #606 Else End AND if() #604 Body End
SETV D2 0; if() #604 Else Start
STORE D2 0.0045
LOAD D2 0.0027; if() #607 Test
PUSHR D2
POP D0
READPODARRAYV D2 314
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19746 ==; Test 'if'
SETV D2 1; if() #607 Body Start
STORE D2 0.0045
GOTO 19758; if() #607 Body End
LOAD D2 0.0027; InlineFunc[int Rand(int)] Params Start AND if() #1172 Test AND if() #607 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 314
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19758 ==; Test 'if'
SETV D2 1; if() #1172 Body Start
STORE D2 0.0045; if() #1172 Body End
LOAD D2 0.0027; if() #607 Else End AND if() #608 Test
PUSHR D2
POP D0
READPODARRAYV D2 313
COMPAREV D2 0
GOTOCMP 19775 ==; Test 'if'
LOAD D2 0.0027; if() #608 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 313
SUBV D2 1
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2
GOTO 19789; if() #608 Body End
LOAD D2 0.0045; if() #1173 Test AND if() #608 Else Start
COMPAREV D2 0
GOTOCMP 19789 ==; Test 'if'
SETV D2 56; InlineFunc[void Game::PlaySound(int)] Params AND if() #1173 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
PUSHR D4
LOAD D2 0.0034; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Params End
CALLFUNC 3.0774; UsrFunc[void EZB_Barriershift_Load(npc, int, bool, bool)] Call
POP D4; if() #1173 Body End
LOAD D2 0.0046; if() #608 Else End AND if() #604 Else End AND if() #602 Else End AND if() #1167 Body End AND if() #1174 Test
COMPAREV D2 0
GOTOCMP 20293 ==; Test 'if'
PUSHR D4; if() #1174 Body Start
PUSHV 512; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 256; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 7168; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 65536; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 16384; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 65538; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 1; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 16384; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 16; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
PEEK D4
PUSHV 8; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 300
STORE D2 0.0026
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 301
STORE D2 0.0025
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 302
STORE D2 0.0024
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 303
STORE D2 0.0023
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 304
STORE D2 0.0022
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 305
STORE D2 0.0021
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 306
STORE D2 0.0020
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 307
STORE D2 0.0019
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 308
STORE D2 0.0018
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0017
SETV D2 0
PUSHR D2
LOAD D2 0.0030
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0030
SETR D0 D2
POP D2
WRITEPODARRAYVR 100 D2
PUSHR D4
LOAD D2 0.0027; UsrFunc[void EZB_InitVars(int)] Params Start
PUSHR D2; UsrFunc[void EZB_InitVars(int)] Params End
CALLFUNC 3.5484; UsrFunc[void EZB_InitVars(int)] Call
POP D4
SETV D2 0
STORE D2 0.0016
SETV D2 0
STORE D2 0.0015
LOAD D2 0.0025; if() #609 Test
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19905 ==; Test 'if'
SETV D2 44; if() #609 Body Start
STORE D2 0.0016
GOTO 19936; if() #609 Body End
LOAD D2 0.0025; if() #610 Test AND if() #609 Else Start
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19913 ==; Test 'if'
SETV D2 45; if() #610 Body Start
STORE D2 0.0016
GOTO 19936; if() #610 Body End
LOAD D2 0.0025; if() #611 Test AND if() #610 Else Start
COMPAREV D2 46
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19921 ==; Test 'if'
SETV D2 46; if() #611 Body Start
STORE D2 0.0016
GOTO 19936; if() #611 Body End
LOAD D2 0.0025; if() #612 Test AND if() #611 Else Start
COMPAREV D2 47
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19929 ==; Test 'if'
SETV D2 47; if() #612 Body Start
STORE D2 0.0016
GOTO 19936; if() #612 Body End
LOAD D2 0.0025; if() #1175 Test AND if() #612 Else Start
COMPAREV D2 48
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 19936 ==; Test 'if'
SETV D2 48; if() #1175 Body Start
STORE D2 0.0016; if() #1175 Body End
LOAD D2 0.0016; if() #612 Else End AND if() #611 Else End AND if() #610 Else End AND if() #609 Else End AND if() #1176 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 19947 ==; Test 'if'
LOAD D2 0.0024; if() #1176 Body Start
STORE D2 0.0025
LOAD D2 0.0023
STORE D2 0.0024
SETV D2 0
STORE D2 0.0023; if() #1176 Body End
LOAD D2 0.0022
ANDV D2 15
STORE D2 0.0014
LOAD D2 0.0022; InlineFunc[int Floor(int)] Params Start
RSHIFTV D2 4; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
ANDV D2 15
STORE D2 0.0013
LOAD D2 0.0017; if() #1177 Test
ANDV D2 512
COMPAREV D2 0
GOTOCMP 19965 !=
LOAD D2 0.0017
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 19965 !=
SETV D2 1
GOTO 19966
SETV D2 0
COMPAREV D2 0
GOTOCMP 19975 ==; Test 'if'
PUSHR D4; if() #1177 Body Start
PUSHV 8; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 16; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1177 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 312
PUSHR D2
LOAD D2 0.0027
PUSHR D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0024
PUSHR D2
LOAD D2 0.0023
PUSHR D2
LOAD D2 0.0030
PUSHR D2
LOAD D2 0.0028
PUSHR D2; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.4929; UsrFunc[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0020
ANDV D2 15
STORE D2 0.0012
LOAD D2 0.0020
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0011
LOAD D2 0.0011; if() #1178 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20013 ==; Test 'if'
LOAD D2 0.0012; if() #1178 Body Start
STORE D2 0.0011; if() #1178 Body End
PUSHR D4
LOAD D2 0.0012; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0012
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0011
LOAD D2 0.0027
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0010
SETR D2 GD12; if() #1179 Test
PUSHR D2
LOAD D2 0.0012
POP D3
COMPARER D3 D2
GOTOCMP 20048 !=
SETR D2 GD13
PUSHR D2
LOAD D2 0.0011
POP D3
COMPARER D3 D2
GOTOCMP 20048 !=
SETV D2 0
GOTO 20049
SETV D2 1
COMPAREV D2 0
GOTOCMP 20063 ==; Test 'if'
PUSHR D4; if() #1179 Body Start
LOAD D2 0.0047; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
PUSHARGSV -1 0.0002
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Params End
CALLFUNC 2.7851; UsrFunc[void Ghost_Transform(ffc, npc, int, int, int, int)] Call
POP D4; if() #1179 Body End
PUSHR D4
LOAD D2 0.0034; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params End
CALLFUNC 2.7615; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Call
POP D4
LOAD D2 0.0017; if() #613 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 20085 ==; Test 'if'
PUSHR D4; if() #613 Body Start
PUSHV 512; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
GOTO 20093; if() #613 Body End
LOAD D2 0.0017; if() #1180 Test AND if() #613 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 20093 ==; Test 'if'
PUSHR D4; if() #1180 Body Start
PUSHV 256; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1180 Body End
LOAD D2 0.0017; if() #613 Else End AND if() #1181 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 20101 ==; Test 'if'
PUSHR D4; if() #1181 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1181 Body End
LOAD D2 0.0017; if() #614 Test
ANDV D2 4
COMPAREV D2 0
GOTOCMP 20145 ==; Test 'if'
PUSHR D4; if() #614 Body Start
PUSHV 7168; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 65536; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0047
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0017; if() #1182 Test
ANDV D2 16
COMPAREV D2 0
GOTOCMP 20135 ==
PUSHR D4
CALLFUNC 2.7598; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 20135 !=
SETV D2 1
GOTO 20136
SETV D2 0
COMPAREV D2 0
GOTOCMP 20153 ==; Test 'if'
PUSHR D4; if() #1182 Body Start
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4
SETV D2 8
SETR GD3 D2; if() #1182 Body End
GOTO 20153; if() #614 Body End
LOAD D2 0.0017; if() #1183 Test AND if() #614 Else Start
ANDV D2 8
COMPAREV D2 0
GOTOCMP 20153 ==; Test 'if'
PUSHR D4; if() #1183 Body Start
PUSHV 65538; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1183 Body End
LOAD D2 0.0017; if() #614 Else End AND if() #1184 Test
ANDV D2 256
COMPAREV D2 0
GOTOCMP 20161 ==; Test 'if'
PUSHR D4; if() #1184 Body Start
PUSHV 1; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #1184 Body End
SETV D2 -1
STORE D2 0.0009
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
STORE D2 0.0008
PUSHARGSR D4 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0034; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0034; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
STORE D2 0.0006
SETV D2 0
STORE D2 0.0038
SETV D2 0
STORE D2 0.0037
SETV D2 -1
STORE D2 0.0004
LOAD D2 0.0026; if() #1186 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20235 ==; Test 'if'
SETV D3 360; InlineFunc[int Rand(int)] Params AND if() #1186 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0037; if() #1186 Body End
LOAD D2 0.0026; if() #1187 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20243 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #1187 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0007; if() #1187 Body End
LOAD D2 0.0026; if() #1188 Test
COMPAREV D2 12
GOTOCMP 20251 ==
LOAD D2 0.0026
COMPAREV D2 13
GOTOCMP 20251 ==
SETV D2 0
GOTO 20252
SETV D2 1
COMPAREV D2 0
GOTOCMP 20259 ==; Test 'if'
LOAD D2 0.0034; if() #1188 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
STORE D2 0.0006; if() #1188 Body End
LOAD D2 0.0027; if() #1189 Test
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20273 ==; Test 'if'
SETV D2 0; if() #1189 Body Start
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2; if() #1189 Body End
SETV D2 0; for() #401 setup
STORE D2 0.0046
LOAD D2 0.0046; for() #401 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20293 ==; for() #401 TestFail?
SETV D2 0; for() #401 Body Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0046
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #401 Body End
LOAD D2 0.0046; for() #401 LoopIncrement
ADDV D2 1
STORE D2 0.0046
GOTO 20275; for() #401 End
LOAD D2 0.0010; if() #1174 Body End
SETR GD10 D2
LOAD D2 0.0034
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
STORE D2 0.0008
LOAD D2 0.0026; if() #1190 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20333 ==; Test 'if'
SETV D3 360; InlineFunc[int Rand(int)] Params AND if() #1190 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0042
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0038
PUSHR D4
LOAD D2 0.0034; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0042
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0037; if() #1190 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Params End
CALLFUNC 3.3411; UsrFunc[void EZB_FaceDir(ffc, npc, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0.0027
SETR D0 D2
POP D2
WRITEPODARRAYVR 319 D2; if() #1030 Body End
PUSHR D4
LOAD D2 0.0047; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0034
PUSHR D2
LOAD D2 0.0027
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; while(true) #9 Body [Opt:AlwaysOn] End
GOTO 480; while() #9 End
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0027
DEALLOCATEMEMR D3
LOAD D3 0.0028
DEALLOCATEMEMR D3
LOAD D3 0.0030
DEALLOCATEMEMR D3
LOAD D3 0.0033
DEALLOCATEMEMR D3
LOAD D3 0.0035
DEALLOCATEMEMR D3
LOAD D3 0.0036
DEALLOCATEMEMR D3; [Opt:NeverRet] AND void run(int) Body End
SETR D4 SP2; Func[int DirNormal(int)] Body Start
LOAD D2 0; switch() #9 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 8
GOTOCMP 20393 ==; case '80000'
COMPAREV SWITCHKEY 9
GOTOCMP 20395 ==; case '90000'
COMPAREV SWITCHKEY 10
GOTOCMP 20397 ==; case '100000'
COMPAREV SWITCHKEY 11
GOTOCMP 20399 ==; case '110000'
COMPAREV SWITCHKEY 12
GOTOCMP 20401 ==; case '120000'
COMPAREV SWITCHKEY 13
GOTOCMP 20403 ==; case '130000'
COMPAREV SWITCHKEY 14
GOTOCMP 20405 ==; case '140000'
COMPAREV SWITCHKEY 15
GOTOCMP 20407 ==; case '150000'
GOTO 20409; switch() #9 NoMatch
SETV D2 0; Case block AND return Start
GOTO 20410; return End
SETV D2 5; Case block AND return Start
GOTO 20410; return End
SETV D2 3; Case block AND return Start
GOTO 20410; return End
SETV D2 7; Case block AND return Start
GOTO 20410; return End
SETV D2 1; Case block AND return Start
GOTO 20410; return End
SETV D2 6; Case block AND return Start
GOTO 20410; return End
SETV D2 2; Case block AND return Start
GOTO 20410; return End
SETV D2 4; Case block AND return Start
GOTO 20410; return End
LOAD D2 0; Case block AND return Start
POP D5; return End
RETURNFUNC; Func[int DirNormal(int)] Body End
PUSHARGSV 0 0.0004; Func[int ComboX(int)] Body Start
SETR D4 SP2
SETR D2 REGION_ID; if() #26 Test
COMPAREV D2 0
GOTOCMP 20450 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Floor(int)] Params Start AND if() #26 Body Start
DIVV D2 176; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0003
SETR D2 REGION_SCREEN_WIDTH
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
MODR D3 D2
SETR D2 D3
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0002
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
LOAD D2 0.0004
MODV D2 176
STORE D2 0
LOAD D2 0.0001; return Start
MULTV D2 16
MULTV D2 16
PUSHR D2
LOAD D2 0
MODV D2 16
MULTV D2 16
POP D3
ADDR D2 D3
GOTO 20453; return End AND if() #26 Body End
LOAD D2 0.0004; return Start AND if() #26 Else Start
MODV D2 16
MULTV D2 16
POPARGS D5 0.0005; return End AND if() #26 Else End
RETURNFUNC; Func[int ComboX(int)] Body End
PUSHARGSV 0 0.0004; Func[int ComboY(int)] Body Start
SETR D4 SP2
SETR D2 REGION_ID; if() #27 Test
COMPAREV D2 0
GOTOCMP 20486 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Floor(int)] Params Start AND if() #27 Body Start
DIVV D2 176; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0003
SETR D2 REGION_SCREEN_WIDTH
STORE D2 0.0002
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0002
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0004
MODV D2 176
STORE D2 0
LOAD D2 0.0001; return Start
MULTV D2 11
MULTV D2 16
PUSHR D2
LOAD D2 0
ANDV D2 240
POP D3
ADDR D2 D3
GOTO 20488; return End AND if() #27 Body End
LOAD D2 0.0004; return Start AND if() #27 Else Start
ANDV D2 240
POPARGS D5 0.0005; return End AND if() #27 Else End
RETURNFUNC; Func[int ComboY(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR D4 SP2; Func[int AngleDir4(int)] Body Start
LOAD D2 0; if() #1 Test
COMPAREV D2 135
GOTOCMP 20518 >
LOAD D2 0
COMPAREV D2 45
GOTOCMP 20518 <=
SETV D2 1
GOTO 20519
SETV D2 0
COMPAREV D2 0
GOTOCMP 20523 ==; Test 'if'
SETV D2 1; return Start AND if() #1 Body Start
GOTO 20550; return End AND if() #1 Body End
LOAD D2 0; if() #2 Test AND if() #1 Else Start
COMPAREV D2 45
GOTOCMP 20531 >
LOAD D2 0
COMPAREV D2 -45
GOTOCMP 20531 <=
SETV D2 1
GOTO 20532
SETV D2 0
COMPAREV D2 0
GOTOCMP 20536 ==; Test 'if'
SETV D2 3; return Start AND if() #2 Body Start
GOTO 20550; return End AND if() #2 Body End
LOAD D2 0; if() #3 Test AND if() #2 Else Start
COMPAREV D2 -45
GOTOCMP 20544 >
LOAD D2 0
COMPAREV D2 -135
GOTOCMP 20544 <=
SETV D2 1
GOTO 20545
SETV D2 0
COMPAREV D2 0
GOTOCMP 20549 ==; Test 'if'
SETV D2 0; return Start AND if() #3 Body Start
GOTO 20550; return End AND if() #3 Body End
SETV D2 2; return Start AND if() #3 Else Start
POP D5; return End AND if() #3 Else End AND if() #2 Else End AND if() #1 Else End
RETURNFUNC; Func[int AngleDir4(int)] Body End
SETR D4 SP2; Func[int AngleDir8(int)] Body Start
LOAD D2 0; if() #4 Test
COMPAREV D2 157.5000
GOTOCMP 20561 >
LOAD D2 0
COMPAREV D2 112.5000
GOTOCMP 20561 <=
SETV D2 1
GOTO 20562
SETV D2 0
COMPAREV D2 0
GOTOCMP 20566 ==; Test 'if'
SETV D2 6; return Start AND if() #4 Body Start
GOTO 20645; return End AND if() #4 Body End
LOAD D2 0; if() #5 Test AND if() #4 Else Start
COMPAREV D2 112.5000
GOTOCMP 20574 >
LOAD D2 0
COMPAREV D2 67.5000
GOTOCMP 20574 <=
SETV D2 1
GOTO 20575
SETV D2 0
COMPAREV D2 0
GOTOCMP 20579 ==; Test 'if'
SETV D2 1; return Start AND if() #5 Body Start
GOTO 20645; return End AND if() #5 Body End
LOAD D2 0; if() #6 Test AND if() #5 Else Start
COMPAREV D2 67.5000
GOTOCMP 20587 >
LOAD D2 0
COMPAREV D2 22.5000
GOTOCMP 20587 <=
SETV D2 1
GOTO 20588
SETV D2 0
COMPAREV D2 0
GOTOCMP 20592 ==; Test 'if'
SETV D2 7; return Start AND if() #6 Body Start
GOTO 20645; return End AND if() #6 Body End
LOAD D2 0; if() #7 Test AND if() #6 Else Start
COMPAREV D2 22.5000
GOTOCMP 20600 >
LOAD D2 0
COMPAREV D2 -22.5000
GOTOCMP 20600 <=
SETV D2 1
GOTO 20601
SETV D2 0
COMPAREV D2 0
GOTOCMP 20605 ==; Test 'if'
SETV D2 3; return Start AND if() #7 Body Start
GOTO 20645; return End AND if() #7 Body End
LOAD D2 0; if() #8 Test AND if() #7 Else Start
COMPAREV D2 -22.5000
GOTOCMP 20613 >
LOAD D2 0
COMPAREV D2 -67.5000
GOTOCMP 20613 <=
SETV D2 1
GOTO 20614
SETV D2 0
COMPAREV D2 0
GOTOCMP 20618 ==; Test 'if'
SETV D2 5; return Start AND if() #8 Body Start
GOTO 20645; return End AND if() #8 Body End
LOAD D2 0; if() #9 Test AND if() #8 Else Start
COMPAREV D2 -67.5000
GOTOCMP 20626 >
LOAD D2 0
COMPAREV D2 -112.5000
GOTOCMP 20626 <=
SETV D2 1
GOTO 20627
SETV D2 0
COMPAREV D2 0
GOTOCMP 20631 ==; Test 'if'
SETV D2 0; return Start AND if() #9 Body Start
GOTO 20645; return End AND if() #9 Body End
LOAD D2 0; if() #10 Test AND if() #9 Else Start
COMPAREV D2 -112.5000
GOTOCMP 20639 >
LOAD D2 0
COMPAREV D2 -157.5000
GOTOCMP 20639 <=
SETV D2 1
GOTO 20640
SETV D2 0
COMPAREV D2 0
GOTOCMP 20644 ==; Test 'if'
SETV D2 4; return Start AND if() #10 Body Start
GOTO 20645; return End AND if() #10 Body End
SETV D2 2; return Start AND if() #10 Else Start
POP D5; return End AND if() #10 Else End AND if() #9 Else End AND if() #8 Else End AND if() #7 Else End AND if() #6 Else End AND if() #5 Else End AND if() #4 Else End
RETURNFUNC; Func[int AngleDir8(int)] Body End
SETR D4 SP2; Func[int CenterLinkX()] Body Start
SETV D2 0.0001; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
RETURNFUNC; return End AND Func[int CenterLinkX()] Body End
SETR D4 SP2; Func[int CenterLinkY()] Body Start
SETV D2 0.0001; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
RETURNFUNC; return End AND Func[int CenterLinkY()] Body End
SETR D4 SP2; Func[int CenterX(ffc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(ffc)] Body End
SETR D4 SP2; Func[int CenterX(npc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(npc)] Body End
SETR D4 SP2; Func[int CenterY(ffc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(ffc)] Body End
SETR D4 SP2; Func[int CenterY(npc)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(npc)] Body End
SETR D4 SP2; Func[int Rand(int, int)] Body Start
SETV D2 0; InlineFunc[int randgen::Rand(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SETR D3 D2; InlineFunc[int randgen::Rand(int, int)] Params End
POP D2; InlineFunc[int randgen::Rand(int, int)] Body Start
POP REFRNG
RNGRAND3 D2 D3; InlineFunc[int randgen::Rand(int, int)] Body End
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int Rand(int, int)] Body End
SETR D4 SP2; Func[int Clamp(int, int, int)] Body Start
LOAD D2 0.0002; if() #17 Test
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20777 ==; Test 'if'
LOAD D2 0.0001; if() #17 Body Start
STORE D2 0.0002
GOTO 20787; if() #17 Body End
LOAD D2 0.0002; if() #65 Test AND if() #17 Else Start
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 20787 ==; Test 'if'
LOAD D2 0; if() #65 Body Start
STORE D2 0.0002; if() #65 Body End
LOAD D2 0.0002; if() #17 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
SETR D4 SP2; Func[bool ClockIsActive()] Body Start
SETR D2 GD26; return Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I!=
RETURNFUNC; return End AND Func[bool ClockIsActive()] Body End
PUSHV 0; Func[lweapon CreateLWeaponAt(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[lweapon screendata::CreateLWeapon(int)] Params
CREATELWEAPONR D2; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body Start
SETR D2 REFLWPN; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body End
STORE D2 0
LOAD D2 0; InlineFunc[bool lweapon::isValid()] Params AND if() #91 Test
ISVALIDLWPN D2; InlineFunc[bool lweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 20826 ==; Test 'if'
LOAD D2 0.0002; if() #91 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #91 Body End
LOAD D2 0; return Start
POPARGS D5 0.0004; return End
RETURNFUNC; Func[lweapon CreateLWeaponAt(int, int, int)] Body End
PUSHV 0; Func[npc CreateNPCAt(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[npc screendata::CreateNPC(int)] Params
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND if() #92 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 20857 ==; Test 'if'
LOAD D2 0.0002; if() #92 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #92 Body End
LOAD D2 0; return Start
POPARGS D5 0.0004; return End
RETURNFUNC; Func[npc CreateNPCAt(int, int, int)] Body End
PUSHV 0; Func[bool IsWater(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #346 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20874 ==; Test 'if'
SETV D2 1; return Start AND if() #346 Body Start
GOTO 20902; return End AND if() #346 Body End
LOAD D2 0; if() #347 Test
COMPAREV D2 18
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20881 ==; Test 'if'
SETV D2 1; return Start AND if() #347 Body Start
GOTO 20902; return End AND if() #347 Body End
LOAD D2 0; if() #348 Test
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 20888 ==; Test 'if'
SETV D2 1; return Start AND if() #348 Body Start
GOTO 20902; return End AND if() #348 Body End
LOAD D2 0; if() #349 Test
COMPAREV D2 86
GOTOCMP 20896 <
LOAD D2 0
COMPAREV D2 91
GOTOCMP 20896 >
SETV D2 1
GOTO 20897
SETV D2 0
COMPAREV D2 0
GOTOCMP 20901 ==; Test 'if'
SETV D2 1; return Start AND if() #349 Body Start
GOTO 20902; return End AND if() #349 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool IsWater(int)] Body End
SETR D4 SP2; Func[bool __IsPit(int)] Body Start
PUSHR D4; return Start
LOAD D2 0; UsrFunc[bool IsPit(int)] Params Start
PUSHR D2; UsrFunc[bool IsPit(int)] Params End
CALLFUNC 2.9316; UsrFunc[bool IsPit(int)] Call
POP D4
POP D5; return End
RETURNFUNC; Func[bool __IsPit(int)] Body End
PUSHV 0; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #154 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20925 ==; Test 'if'
PUSHR D4; if() #154 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 2.1062; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #154 Body End
LOAD D2 0.0002; if() #155 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 20936 ==; Test 'if'
PUSHR D4; if() #155 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 2.1222; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #155 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0003; if() #156 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 21006 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #156 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #156 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 2.1275; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #157 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 21040 ==; Test 'if'
SETV D2 0; if() #157 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #157 Body End
LOAD D2 0; if() #158 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 21057 ==; Test 'if'
PUSHR D4; if() #158 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 2.1385; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #158 Body End
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #55 Test
COMPAREV D2 129
GOTOCMP 21072 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 21072 ==
SETV D2 0
GOTO 21073
SETV D2 1
COMPAREV D2 0
GOTOCMP 21077 ==; Test 'if'
SETV D2 17; return Start AND if() #55 Body Start
GOTO 21220; return End AND if() #55 Body End
LOAD D2 0.0003; if() #56 Test AND if() #55 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21084 ==; Test 'if'
SETV D2 18; return Start AND if() #56 Body Start
GOTO 21220; return End AND if() #56 Body End
LOAD D2 0.0003; if() #57 Test AND if() #56 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21091 ==; Test 'if'
SETV D2 19; return Start AND if() #57 Body Start
GOTO 21220; return End AND if() #57 Body End
LOAD D2 0.0003; if() #58 Test AND if() #57 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21098 ==; Test 'if'
SETV D2 35; return Start AND if() #58 Body Start
GOTO 21220; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21105 ==; Test 'if'
SETV D2 81; return Start AND if() #59 Body Start
GOTO 21220; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21112 ==; Test 'if'
SETV D2 80; return Start AND if() #60 Body Start
GOTO 21220; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21119 ==; Test 'if'
SETV D2 21; return Start AND if() #61 Body Start
GOTO 21220; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21126 ==; Test 'if'
SETV D2 20; return Start AND if() #62 Body Start
GOTO 21220; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21133 ==; Test 'if'
SETV D2 36; return Start AND if() #63 Body Start
GOTO 21220; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21140 ==; Test 'if'
SETV D2 76; return Start AND if() #64 Body Start
GOTO 21220; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21147 ==; Test 'if'
SETV D2 77; return Start AND if() #65 Body Start
GOTO 21220; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21219 ==; Test 'if'
STOREV 0 0.0002; if() #66 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #43 setup
LOAD D2 0; for() #43 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21203 ==; for() #43 TestFail?
LOAD D2 0; unless() #187 Test AND for() #43 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 21199 ==; Test 'unless' AND continue 1; AND unless() #187 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #188 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 21199 !=; Test 'if' AND continue 1; AND if() #188 Body
LOAD D2 0.0001; if() #189 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 21199 ==; Test 'if'
LOAD D2 0.0001; if() #189 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #190 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 21203 !=; Test 'if' AND break 1; AND if() #190 Body
LOAD D2 0; if() #189 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 21155; for() #43 End
LOAD D2 0.0002; if() #67 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21210 ==; Test 'if'
SETV D2 4; return Start AND if() #67 Body Start
GOTO 21220; return End AND if() #67 Body End
LOAD D2 0.0002; if() #68 Test AND if() #67 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21217 ==; Test 'if'
SETV D2 5; return Start AND if() #68 Body Start
GOTO 21220; return End AND if() #68 Body End
SETV D2 6; return Start AND if() #68 Else Start
GOTO 21220; return End AND if() #68 Else End AND if() #67 Else End AND if() #66 Body End
SETV D2 0; return Start AND if() #66 Else Start
POPARGS D5 0.0004; return End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #51 Test
COMPAREV D2 129
GOTOCMP 21231 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 21231 ==
SETV D2 0
GOTO 21232
SETV D2 1
COMPAREV D2 0
GOTOCMP 21236 ==; Test 'if'
SETV D2 40; return Start AND if() #51 Body Start
GOTO 21273; return End AND if() #51 Body End
LOAD D2 0; if() #52 Test AND if() #51 Else Start
COMPAREV D2 134
GOTOCMP 21244 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 21244 ==
SETV D2 0
GOTO 21245
SETV D2 1
COMPAREV D2 0
GOTOCMP 21249 ==; Test 'if'
SETV D2 32; return Start AND if() #52 Body Start
GOTO 21273; return End AND if() #52 Body End
LOAD D2 0; if() #53 Test AND if() #52 Else Start
COMPAREV D2 140
GOTOCMP 21260 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 21260 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 21260 ==
SETV D2 0
GOTO 21261
SETV D2 1
COMPAREV D2 0
GOTOCMP 21265 ==; Test 'if'
SETV D2 13; return Start AND if() #53 Body Start
GOTO 21273; return End AND if() #53 Body End
LOAD D2 0; if() #54 Test AND if() #53 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21272 ==; Test 'if'
SETV D2 51; return Start AND if() #54 Body Start
GOTO 21273; return End AND if() #54 Body End
SETV D2 0; return Start AND if() #54 Else Start
POP D5; return End AND if() #54 Else End AND if() #53 Else End AND if() #52 Else End AND if() #51 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #488 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21292 ==; Test 'if'
LOAD D2 0.0001; if() #488 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #488 Body End
LOAD D2 0.0001; if() #186 Test
COMPAREV D2 0.3927
GOTOCMP 21300 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 21300 >
SETV D2 0
GOTO 21301
SETV D2 1
COMPAREV D2 0
GOTOCMP 21306 ==; Test 'if'
SETV D2 3; if() #186 Body Start
STORE D2 0
GOTO 21356; if() #186 Body End
LOAD D2 0.0001; if() #187 Test AND if() #186 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21314 ==; Test 'if'
SETV D2 7; if() #187 Body Start
STORE D2 0
GOTO 21356; if() #187 Body End
LOAD D2 0.0001; if() #188 Test AND if() #187 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21322 ==; Test 'if'
SETV D2 1; if() #188 Body Start
STORE D2 0
GOTO 21356; if() #188 Body End
LOAD D2 0.0001; if() #189 Test AND if() #188 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21330 ==; Test 'if'
SETV D2 6; if() #189 Body Start
STORE D2 0
GOTO 21356; if() #189 Body End
LOAD D2 0.0001; if() #190 Test AND if() #189 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21338 ==; Test 'if'
SETV D2 2; if() #190 Body Start
STORE D2 0
GOTO 21356; if() #190 Body End
LOAD D2 0.0001; if() #191 Test AND if() #190 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21346 ==; Test 'if'
SETV D2 4; if() #191 Body Start
STORE D2 0
GOTO 21356; if() #191 Body End
LOAD D2 0.0001; if() #192 Test AND if() #191 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21354 ==; Test 'if'
SETV D2 0; if() #192 Body Start
STORE D2 0
GOTO 21356; if() #192 Body End
SETV D2 5; if() #192 Else Start
STORE D2 0; if() #192 Else End
LOAD D2 0.0002; if() #191 Else End AND if() #190 Else End AND if() #189 Else End AND if() #188 Else End AND if() #187 Else End AND if() #186 Else End AND if() #489 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 21374 ==; Test 'if'
PUSHR D4; if() #489 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 2.1550; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #489 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #210 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 21468 ==; Test 'if'
LOAD D2 0.0001; if() #210 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #494 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21407 ==; Test 'if'
LOAD D2 0; if() #494 Body Start
ADDV D2 6.2832
STORE D2 0; if() #494 Body End
LOAD D2 0; if() #211 Test
COMPAREV D2 0.7854
GOTOCMP 21415 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 21415 >
SETV D2 0
GOTO 21416
SETV D2 1
COMPAREV D2 0
GOTOCMP 21428 ==; Test 'if'
SETV D2 4; if() #211 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 21548; if() #211 Body End
LOAD D2 0; if() #212 Test AND if() #211 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21443 ==; Test 'if'
SETV D2 3; if() #212 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 21548; if() #212 Body End
LOAD D2 0; if() #213 Test AND if() #212 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 21458 ==; Test 'if'
SETV D2 7; if() #213 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 21548; if() #213 Body End
SETV D2 0; if() #213 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #213 Else End
GOTO 21548; if() #212 Else End AND if() #211 Else End AND if() #210 Body End
PUSHR D4; if() #210 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 2.1686; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #214 Test
COMPAREV D2 0
GOTOCMP 21487 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 21487 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 21487 ==
SETV D2 0
GOTO 21488
SETV D2 1
COMPAREV D2 0
GOTOCMP 21500 ==; Test 'if'
SETV D2 0; if() #214 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 21548; if() #214 Body End
LOAD D2 0; if() #215 Test AND if() #214 Else Start
COMPAREV D2 1
GOTOCMP 21511 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 21511 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 21511 ==
SETV D2 0
GOTO 21512
SETV D2 1
COMPAREV D2 0
GOTOCMP 21524 ==; Test 'if'
SETV D2 3; if() #215 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 21548; if() #215 Body End
LOAD D2 0; if() #216 Test AND if() #215 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21539 ==; Test 'if'
SETV D2 7; if() #216 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 21548; if() #216 Body End
SETV D2 4; if() #216 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #216 Else End
POPARGS D5 0.0002; if() #215 Else End AND if() #214 Else End AND if() #210 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #683 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21558 ==; Test 'if'
SETV D2 8; return Start AND if() #683 Body Start
GOTO 21608; return End AND if() #683 Body End
LOAD D2 0; if() #684 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21565 ==; Test 'if'
SETV D2 12; return Start AND if() #684 Body Start
GOTO 21608; return End AND if() #684 Body End
LOAD D2 0; if() #685 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21572 ==; Test 'if'
SETV D2 14; return Start AND if() #685 Body Start
GOTO 21608; return End AND if() #685 Body End
LOAD D2 0; if() #686 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21579 ==; Test 'if'
SETV D2 10; return Start AND if() #686 Body Start
GOTO 21608; return End AND if() #686 Body End
LOAD D2 0; if() #687 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21586 ==; Test 'if'
SETV D2 15; return Start AND if() #687 Body Start
GOTO 21608; return End AND if() #687 Body End
LOAD D2 0; if() #688 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21593 ==; Test 'if'
SETV D2 9; return Start AND if() #688 Body Start
GOTO 21608; return End AND if() #688 Body End
LOAD D2 0; if() #689 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21600 ==; Test 'if'
SETV D2 13; return Start AND if() #689 Body Start
GOTO 21608; return End AND if() #689 Body End
LOAD D2 0; if() #690 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21607 ==; Test 'if'
SETV D2 11; return Start AND if() #690 Body Start
GOTO 21608; return End AND if() #690 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[bool Ghost_CanMove(int, int, int)] Body Start
PUSHR D4; return Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1626; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int)] Body End
SETR D4 SP2; Func[bool Ghost_CanMove(int, int, int, bool)] Body Start
LOAD D2 0.0002; if() #217 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21634 ==; Test 'if'
SETV D2 1; return Start AND if() #217 Body Start
GOTO 21684; return End AND if() #217 Body End
LOAD D2 0.0003; if() #218 Test
COMPAREV D2 4
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 21642 ==; Test 'if'
LOAD D2 0.0002; if() #218 Body Start
MULTV D2 0.7071
STORE D2 0.0002; if() #218 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 2.1686; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0002; while() #1 Test
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 21673 ==; Test 'while'
PUSHR D4; unless() #219 Test AND while() #1 Body Start
LOAD D2 0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.1759; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21669 !=; Test 'unless'
SETV D2 0; return Start AND unless() #219 Body Start
GOTO 21684; return End AND unless() #219 Body End
LOAD D2 0.0002
SUBV D2 8
STORE D2 0.0002; while() #1 Body End
GOTO 21648; while() #1 End
PUSHR D4; return Start
LOAD D2 0.0003; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.1759; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0004; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int, bool)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #669 Test
COMPAREV D2 0
GOTOCMP 21695 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 21695 >
SETV D2 1
GOTO 21696
SETV D2 0
COMPAREV D2 0
GOTOCMP 21700 ==; Test 'if'
LOAD D2 0; return Start AND if() #669 Body Start
GOTO 21757; return End AND if() #669 Body End
LOAD D2 0; if() #670 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21707 ==; Test 'if'
SETV D2 0; return Start AND if() #670 Body Start
GOTO 21757; return End AND if() #670 Body End
LOAD D2 0; if() #671 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21714 ==; Test 'if'
SETV D2 5; return Start AND if() #671 Body Start
GOTO 21757; return End AND if() #671 Body End
LOAD D2 0; if() #672 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21721 ==; Test 'if'
SETV D2 3; return Start AND if() #672 Body Start
GOTO 21757; return End AND if() #672 Body End
LOAD D2 0; if() #673 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21728 ==; Test 'if'
SETV D2 7; return Start AND if() #673 Body Start
GOTO 21757; return End AND if() #673 Body End
LOAD D2 0; if() #674 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21735 ==; Test 'if'
SETV D2 1; return Start AND if() #674 Body Start
GOTO 21757; return End AND if() #674 Body End
LOAD D2 0; if() #675 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21742 ==; Test 'if'
SETV D2 6; return Start AND if() #675 Body Start
GOTO 21757; return End AND if() #675 Body End
LOAD D2 0; if() #676 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21749 ==; Test 'if'
SETV D2 2; return Start AND if() #676 Body Start
GOTO 21757; return End AND if() #676 Body End
LOAD D2 0; if() #677 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21756 ==; Test 'if'
SETV D2 4; return Start AND if() #677 Body Start
GOTO 21757; return End AND if() #677 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
PUSHARGSV 0 0.0006; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0009; if() #302 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 21888 ==; Test 'if'
SETR D2 GD13; if() #302 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #165 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #165 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21846 ==; for() #165 TestFail?
PUSHR D4; unless() #578 Test AND for() #165 Body Start
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2555; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21842 !=; Test 'unless'
SETV D2 0; return Start AND unless() #578 Body Start
GOTO 22539; return End AND unless() #578 Body End
LOAD D2 0.0005; for() #165 Body End AND for() #165 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 21816; for() #165 End
PUSHR D4; unless() #579 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2555; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21863 !=; Test 'unless'
SETV D2 0; return Start AND unless() #579 Body Start
GOTO 22539; return End AND unless() #579 Body End
PUSHR D4; unless() #580 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2555; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21886 !=; Test 'unless'
SETV D2 0; return Start AND unless() #580 Body Start
GOTO 22539; return End AND unless() #580 Body End
SETV D2 1; return Start
GOTO 22539; return End AND if() #302 Body End
LOAD D2 0.0009; if() #303 Test AND if() #302 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22021 ==; Test 'if'
SETR D2 GD13; if() #303 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD1
PUSHR D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #166 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #166 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 21979 ==; for() #166 TestFail?
PUSHR D4; unless() #581 Test AND for() #166 Body Start
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2555; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21975 !=; Test 'unless'
SETV D2 0; return Start AND unless() #581 Body Start
GOTO 22539; return End AND unless() #581 Body End
LOAD D2 0.0005; for() #166 Body End AND for() #166 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 21949; for() #166 End
PUSHR D4; unless() #582 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2555; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 21996 !=; Test 'unless'
SETV D2 0; return Start AND unless() #582 Body Start
GOTO 22539; return End AND unless() #582 Body End
PUSHR D4; unless() #583 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2555; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22019 !=; Test 'unless'
SETV D2 0; return Start AND unless() #583 Body Start
GOTO 22539; return End AND unless() #583 Body End
SETV D2 1; return Start
GOTO 22539; return End AND if() #303 Body End
LOAD D2 0.0009; if() #304 Test AND if() #303 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22161 ==; Test 'if'
PUSHR D4; if() #584 Test AND if() #304 Body Start
CALLFUNC 2.7598; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 22039 ==
PUSHR D4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22039 !=
SETV D2 1
GOTO 22040
SETV D2 0
COMPAREV D2 0
GOTOCMP 22044 ==; Test 'if'
SETV D2 0; return Start AND if() #584 Body Start
GOTO 22539; return End AND if() #584 Body End
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD23
RSHIFTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #167 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #167 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 22119 ==; for() #167 TestFail?
PUSHR D4; unless() #585 Test AND for() #167 Body Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2555; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22115 !=; Test 'unless'
SETV D2 0; return Start AND unless() #585 Body Start
GOTO 22539; return End AND unless() #585 Body End
LOAD D2 0.0005; for() #167 Body End AND for() #167 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 22089; for() #167 End
PUSHR D4; unless() #586 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2555; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22136 !=; Test 'unless'
SETV D2 0; return Start AND unless() #586 Body Start
GOTO 22539; return End AND unless() #586 Body End
PUSHR D4; unless() #587 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2555; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22159 !=; Test 'unless'
SETV D2 0; return Start AND unless() #587 Body Start
GOTO 22539; return End AND unless() #587 Body End
SETV D2 1; return Start
GOTO 22539; return End AND if() #304 Body End
LOAD D2 0.0009; if() #305 Test AND if() #304 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22294 ==; Test 'if'
SETR D2 GD12; if() #305 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD1
PUSHR D2
SETR D2 GD22
RSHIFTV D2 8
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
DIVV D2 8
SUBV D2 1
STORE D2 0.0001
SETV D2 1; for() #168 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #168 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 22252 ==; for() #168 TestFail?
PUSHR D4; unless() #588 Test AND for() #168 Body Start
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0005
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2555; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22248 !=; Test 'unless'
SETV D2 0; return Start AND unless() #588 Body Start
GOTO 22539; return End AND unless() #588 Body End
LOAD D2 0.0005; for() #168 Body End AND for() #168 LoopIncrement
ADDV D2 1
STORE D2 0.0005
GOTO 22222; for() #168 End
PUSHR D4; unless() #589 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2555; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22269 !=; Test 'unless'
SETV D2 0; return Start AND unless() #589 Body Start
GOTO 22539; return End AND unless() #589 Body End
PUSHR D4; unless() #590 Test
LOAD D2 0.0002; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2555; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22292 !=; Test 'unless'
SETV D2 0; return Start AND unless() #590 Body Start
GOTO 22539; return End AND unless() #590 Body End
SETV D2 1; return Start
GOTO 22539; return End AND if() #305 Body End
LOAD D2 0.0009; if() #306 Test AND if() #305 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22355 ==; Test 'if'
STOREV 0 0; if() #306 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1626; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #591 Test
COMPAREV D2 0
GOTOCMP 22329 !=; Test 'unless'
SETV D2 0; return Start AND unless() #591 Body Start
GOTO 22539; return End AND unless() #591 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1626; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 22539; return End AND if() #306 Body End
LOAD D2 0.0009; if() #307 Test AND if() #306 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22416 ==; Test 'if'
STOREV 0 0; if() #307 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1626; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #592 Test
COMPAREV D2 0
GOTOCMP 22390 !=; Test 'unless'
SETV D2 0; return Start AND unless() #592 Body Start
GOTO 22539; return End AND unless() #592 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1626; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 22539; return End AND if() #307 Body End
LOAD D2 0.0009; if() #308 Test AND if() #307 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22477 ==; Test 'if'
STOREV 0 0; if() #308 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1626; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #593 Test
COMPAREV D2 0
GOTOCMP 22451 !=; Test 'unless'
SETV D2 0; return Start AND unless() #593 Body Start
GOTO 22539; return End AND unless() #593 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1626; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 22539; return End AND if() #308 Body End
LOAD D2 0.0009; if() #309 Test AND if() #308 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22538 ==; Test 'if'
STOREV 0 0; if() #309 Body Start
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD1 D2
PUSHR D4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1626; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD1
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
LOAD D2 0; unless() #594 Test
COMPAREV D2 0
GOTOCMP 22512 !=; Test 'unless'
SETV D2 0; return Start AND unless() #594 Body Start
GOTO 22539; return End AND unless() #594 Body End
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
ADDR D2 D3
SETR GD2 D2
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 2.1626; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP D4
STORE D2 0
SETR D2 GD2
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
LOAD D2 0; return Start
GOTO 22539; return End AND if() #309 Body End
SETV D2 0; return Start AND if() #309 Else Start
POPARGS D5 0.0010; return End AND if() #309 Else End AND if() #308 Else End AND if() #307 Else End AND if() #306 Else End AND if() #305 Else End AND if() #304 Else End AND if() #303 Else End AND if() #302 Else End
RETURNFUNC; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body End
SETR D4 SP2; Func[bool Ghost_CanMovePixel(int, int)] Body Start
PUSHR D4; return Start
LOAD D2 0.0001; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 2.2555; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP D4
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int)] Body End
PUSHV 0; Func[bool Ghost_CanMovePixel(int, int, bool)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #220 Test
COMPAREV D2 0
GOTOCMP 22577 <
LOAD D2 0.0003
PUSHR D2
SETR D2 REGION_WIDTH
POP D3
COMPARER D3 D2
GOTOCMP 22577 >=
LOAD D2 0.0002
COMPAREV D2 0
GOTOCMP 22577 <
LOAD D2 0.0002
PUSHR D2
SETR D2 REGION_HEIGHT
POP D3
COMPARER D3 D2
GOTOCMP 22577 >=
SETV D2 0
GOTO 22578
SETV D2 1
COMPAREV D2 0
GOTOCMP 22585 ==; Test 'if'
PUSHR D4; return Start AND if() #220 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 22778; return End AND if() #220 Body End
LOAD D2 0.0003; InlineFunc[int ComboAt(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
SETR D3 D2; InlineFunc[int ComboAt(int, int)] Params End
POP D2; InlineFunc[int ComboAt(int, int)] Body Start
COMBO_AT D2 D3; InlineFunc[int ComboAt(int, int)] Body End
STORE D2 0
PUSHR D4; unless() #221 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22689 !=; Test 'unless'
LOAD D2 0; if() #222 Test AND unless() #221 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 110
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22608 ==; Test 'if'
SETV D2 0; return Start AND if() #222 Body Start
GOTO 22778; return End AND if() #222 Body End
LOAD D2 0; if() #223 Test
PUSHR D2
POP D0
SETR D2 COMBOFD
COMPAREV D2 96
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22618 ==; Test 'if'
SETV D2 0; return Start AND if() #223 Body Start
GOTO 22778; return End AND if() #223 Body End
LOAD D2 0; if() #224 Test
PUSHR D2
POP D0
SETR D2 COMBOID
COMPAREV D2 96
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22628 ==; Test 'if'
SETV D2 0; return Start AND if() #224 Body Start
GOTO 22778; return End AND if() #224 Body End
PUSHR D4; if() #77 Test
PUSHV 65536; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22645 ==; Test 'if'
LOAD D2 0; if() #225 Test AND if() #77 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 44
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22689 ==; Test 'if'
SETV D2 0; return Start AND if() #225 Body Start
GOTO 22778; return End AND if() #225 Body End
GOTO 22689; if() #77 Body End
LOAD D2 0.0001; if() #78 Test AND if() #77 Else Start
COMPAREV D2 0
GOTOCMP 22659 ==; Test 'if'
LOAD D2 0; if() #226 Test AND if() #78 Body Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 54
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22689 ==; Test 'if'
SETV D2 0; return Start AND if() #226 Body Start
GOTO 22778; return End AND if() #226 Body End
GOTO 22689; if() #78 Body End
LOAD D2 0; if() #227 Test AND if() #78 Else Start
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 128
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22669 ==; Test 'if'
SETV D2 0; return Start AND if() #227 Body Start
GOTO 22778; return End AND if() #227 Body End
LOAD D2 0; if() #228 Test
PUSHR D2
POP D0
SETR D2 COMBOFD
COMPAREV D2 97
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22679 ==; Test 'if'
SETV D2 0; return Start AND if() #228 Body Start
GOTO 22778; return End AND if() #228 Body End
LOAD D2 0; if() #229 Test
PUSHR D2
POP D0
SETR D2 COMBOID
COMPAREV D2 97
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 22689 ==; Test 'if'
SETV D2 0; return Start AND if() #229 Body Start
GOTO 22778; return End AND if() #229 Body End
PUSHR D4; if() #78 Else End AND if() #77 Else End AND unless() #221 Body End AND if() #230 Test
PUSHV 65539; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22701 ==; Test 'if'
PUSHR D4; return Start AND if() #230 Body Start
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 2.0860; UsrFunc[bool IsWater(int)] Call
POP D4
GOTO 22778; return End AND if() #230 Body End
PUSHR D4; if() #231 Test
PUSHV 65538; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22724 ==; Test 'if'
PUSHR D4; return Start AND if() #231 Body Start
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 2.0860; UsrFunc[bool IsWater(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22722 !=
LOAD D2 0
PUSHR D2
POP D0
SETR D2 COMBOTD
COMPAREV D2 58
GOTOCMP 22722 ==
SETV D2 0
GOTO 22778
SETV D2 1
GOTO 22778; return End AND if() #231 Body End
PUSHR D4; if() #232 Test
LOAD D2 0; UsrFunc[bool IsWater(int)] Params Start
PUSHR D2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 2.0860; UsrFunc[bool IsWater(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22736 ==; Test 'if'
PUSHR D4; return Start AND if() #232 Body Start
PUSHV 2048; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 22778; return End AND if() #232 Body End
PUSHR D4; if() #233 Test
LOAD D2 0; UsrFunc[bool __IsPit(int)] Params Start
PUSHR D2; UsrFunc[bool __IsPit(int)] Params End
CALLFUNC 2.0904; UsrFunc[bool __IsPit(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22748 ==; Test 'if'
PUSHR D4; return Start AND if() #233 Body Start
PUSHV 4096; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 22778; return End AND if() #233 Body End
PUSHR D4; if() #79 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22756 ==; Test 'if'
SETV D2 1; return Start AND if() #79 Body Start
GOTO 22778; return End AND if() #79 Body End
PUSHR D4; if() #80 Test AND if() #79 Else Start
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22770 ==; Test 'if'
PUSHR D4; return Start AND if() #80 Body Start
LOAD D2 0.0003; UsrFunc[bool __FullTileWalkable(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[bool __FullTileWalkable(int, int)] Params End
CALLFUNC 2.2811; UsrFunc[bool __FullTileWalkable(int, int)] Call
POP D4
GOTO 22778; return End AND if() #80 Body End
LOAD D2 0.0003; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND return Start AND if() #80 Else Start
PUSHR D2
LOAD D2 0.0002
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
SETCMP D2 I==
POPARGS D5 0.0004; return End AND if() #80 Else End AND if() #79 Else End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int, bool)] Body End
SETR D4 SP2; Func[bool Ghost_FlagIsSet(int)] Body Start
LOAD D2 0; if() #113 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 22799 ==; Test 'if'
SETR D2 GD16; return Start AND if() #113 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
GOTO 22809; return End AND if() #113 Body End
SETR D2 GD15; return Start AND if() #113 Else Start
PUSHR D2
LOAD D2 0
POP D3
ANDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
POP D5; return End AND if() #113 Else End
RETURNFUNC; Func[bool Ghost_FlagIsSet(int)] Body End
SETR D4 SP2; Func[bool __FullTileWalkable(int, int)] Body Start
LOAD D2 0.0001; if() #568 Test
COMPAREV D2 0
GOTOCMP 22832 <
LOAD D2 0
COMPAREV D2 0
GOTOCMP 22832 <
LOAD D2 0.0001
PUSHR D2
SETR D2 REGION_WIDTH
POP D3
COMPARER D3 D2
GOTOCMP 22832 >=
LOAD D2 0
PUSHR D2
SETR D2 REGION_HEIGHT
POP D3
COMPARER D3 D2
GOTOCMP 22832 >=
SETV D2 0
GOTO 22833
SETV D2 1
COMPAREV D2 0
GOTOCMP 22840 ==; Test 'if'
PUSHR D4; return Start AND if() #568 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
GOTO 22900; return End AND if() #568 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0001
MODV D2 16
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0
MODV D2 16
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #569 Test
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 22894 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 22894 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 22894 !=
LOAD D2 0.0001; InlineFunc[bool screendata::isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
ADDV D2 8
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 22894 !=
SETV D2 0
GOTO 22895
SETV D2 1
COMPAREV D2 0
GOTOCMP 22899 ==; Test 'if'
SETV D2 0; return Start AND if() #569 Body Start
GOTO 22900; return End AND if() #569 Body End
SETV D2 1; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __FullTileWalkable(int, int)] Body End
PUSHARGSV 0 0.0004; Func[bool Ghost_CheckFreeze(ffc, npc)] Body Start
SETR D4 SP2
PUSHR D4; if() #234 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22915 ==
PUSHR D4
CALLFUNC 2.0790; UsrFunc[bool ClockIsActive()] Call
POP D4
COMPAREV D2 0
GOTOCMP 22929 !=
PUSHR D4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 22927 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTUN
COMPAREV D2 0
GOTOCMP 22929 >
SETV D2 0
GOTO 22930
SETV D2 1
COMPAREV D2 0
GOTOCMP 23158 ==; Test 'if'
LOAD D2 0.0005; if() #234 Body Start
PUSHR D2
POP REFFFC
SETR D2 XD
STORE D2 0.0003
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 YD
STORE D2 0.0002
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 XD2
STORE D2 0.0001
LOAD D2 0.0005
PUSHR D2
POP REFFFC
SETR D2 YD2
STORE D2 0
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETR D2 GD17
ORV D2 2
SETR GD17 D2
PUSHR D4; while() #2 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23002 ==
PUSHR D4
CALLFUNC 2.0790; UsrFunc[bool ClockIsActive()] Call
POP D4
COMPAREV D2 0
GOTOCMP 23016 !=
PUSHR D4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23014 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTUN
COMPAREV D2 0
GOTOCMP 23016 >
SETV D2 0
GOTO 23017
SETV D2 1
COMPAREV D2 0
GOTOCMP 23122 ==; Test 'while'
PUSHR D4; while() #2 Body Start
LOAD D2 0.0005; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 2.3161; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_DrawShadow(npc)] Params Start
PUSHR D2; UsrFunc[void __Ghost_DrawShadow(npc)] Params End
CALLFUNC 2.3246; UsrFunc[void __Ghost_DrawShadow(npc)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.3411; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND unless() #81 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23043 !=; Test 'unless'
SETV D2 0; return Start AND unless() #81 Body Start
GOTO 23159; return End
GOTO 23053; unless() #81 Body End
LOAD D2 0.0004; if() #235 Test AND unless() #81 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCHP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 23053 ==; Test 'if'
SETV D2 0; return Start AND if() #235 Body Start
GOTO 23159; return End AND if() #235 Body End
PUSHR D4; unless() #81 Else End
LOAD D2 0.0005; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3811; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23082 ==; Test 'if'
SETR D2 GD10; if() #82 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.1686; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
GOTO 23114; if() #82 Body End
PUSHR D4; if() #83 Test AND if() #82 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23105 ==; Test 'if'
SETR D2 GD10; if() #83 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.1686; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
GOTO 23114; if() #83 Body End
SETR D2 GD10; if() #83 Else Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #83 Else End
PUSHR D4; if() #82 Else End
LOAD D2 0.0005; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params End
CALLFUNC 2.3945; UsrFunc[void Ghost_CheckHit(ffc, npc)] Call
POP D4; while() #2 Body End
GOTO 22991; while() #2 End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2; if() #234 Body End
SETV D2 1; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool Ghost_CheckFreeze(ffc, npc)] Body End
PUSHV 0; Func[void __Ghost_UpdateFlashing(ffc, npc)] Body Start
SETR D4 SP2
STOREV 0 0
SETR D2 GD20; if() #635 Test
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 23179 ==; Test 'if'
SETR D2 GD20; if() #635 Body Start
SUBV D2 1
SETR GD20 D2
SETR D2 GD20; if() #636 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23179 ==; Test 'if'
SETV D2 1; if() #636 Body Start
STORE D2 0; if() #636 Body End
SETR D2 GD17; if() #635 Body End AND if() #637 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23244 ==; Test 'if'
SETR D2 GD20; if() #338 Test AND if() #637 Body Start
COMPAREV D2 0
GOTOCMP 23190 <=
SETV D2 1
GOTO 23191
SETV D2 0
COMPAREV D2 0
GOTOCMP 23208 ==; Test 'if'
SETR D2 GD26; if() #338 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
RSHIFTV D2 1
SUBV2 9 D2
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
GOTO 23244; if() #338 Body End
LOAD D2 0.0001; if() #339 Test AND if() #338 Else Start
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 64
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 23232 ==; Test 'if'
SETR D2 GD26; if() #339 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
ANDV D2 3
ADDV D2 6
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
GOTO 23244; if() #339 Body End
LOAD D2 0; if() #638 Test AND if() #339 Else Start
COMPAREV D2 0
GOTOCMP 23244 ==; Test 'if'
SETR D2 GD11; if() #638 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2; if() #638 Body End
POPARGS D5 0.0003; if() #339 Else End AND if() #338 Else End AND if() #637 Body End
RETURNFUNC; Func[void __Ghost_UpdateFlashing(ffc, npc)] Body End
PUSHARGSV 0 0.0004; Func[void __Ghost_DrawShadow(npc)] Body Start
SETR D4 SP2
SETR D2 GD3; if() #595 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 23409 !=; Test 'if' AND return (Void) AND if() #595 Body
PUSHR D4; unless() #596 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23273 !=
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 4
GOTOCMP 23273 ==
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCTYPE
COMPAREV D2 40
GOTOCMP 23273 ==
SETV D2 0
GOTO 23274
SETV D2 1
COMPAREV D2 0
GOTOCMP 23409 ==; Test 'unless' AND return (Void) AND unless() #596 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETR D2 GD12; if() #310 Test
COMPAREV D2 3
GOTOCMP 23288 <
SETR D2 GD13
COMPAREV D2 3
GOTOCMP 23288 <
SETV D2 0
GOTO 23289
SETV D2 1
COMPAREV D2 0
GOTOCMP 23337 ==; Test 'if'
SETR D2 GD1; if() #310 Body Start
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
SETV D2 1
STORE D2 0
PUSHR D4; if() #311 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23330 ==; Test 'if'
SETV D2 27400; if() #311 Body Start
STORE D2 0.0001
GOTO 23391; if() #311 Body End
SETR D2 GD26; if() #311 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
STORE D2 0.0001; if() #311 Else End
GOTO 23391; if() #310 Body End
SETR D2 GD1; if() #310 Else Start
PUSHR D2
SETR D2 GD12
SUBV D2 2
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 2
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
SUBV D2 2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
SETV D2 2
STORE D2 0
PUSHR D4; if() #312 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23376 ==; Test 'if'
SETV D2 27392; if() #312 Body Start
STORE D2 0.0001
GOTO 23391; if() #312 Body End
SETR D2 GD26; if() #312 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 4
MULTV D2 2
SETV D2 2
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
POP D3
MULTR D2 D3
ADDV D2 27392
STORE D2 0.0001; if() #312 Else End
PUSHV 1; if() #310 Else End AND InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #313 [Opt:AlwaysOn]
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_DrawShadow(npc)] Body End
PUSHARGSV 0 0.0004; Func[void Ghost_WaitframeLight(ffc, npc)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 24 0
PUSHR D2
SETR D0 D2
PUSHR D0
SETR D2 GD1
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
SETR D2 GD2
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
SETR D2 GD3
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D0
SETR D2 GD5
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
SETR D2 GD6
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
SETR D2 GD7
POP D0
WRITEPODARRAYVR 5 D2
PUSHR D0
SETR D2 GD8
POP D0
WRITEPODARRAYVR 6 D2
PUSHR D0
SETR D2 GD9
POP D0
WRITEPODARRAYVR 7 D2
PUSHR D0
SETR D2 GD18
POP D0
WRITEPODARRAYVR 8 D2
PUSHR D0
SETR D2 GD19
POP D0
WRITEPODARRAYVR 9 D2
PUSHR D0
SETR D2 GD11
POP D0
WRITEPODARRAYVR 10 D2
PUSHR D0
SETR D2 GD4
POP D0
WRITEPODARRAYVR 11 D2
PUSHR D0
SETR D2 GD10
POP D0
WRITEPODARRAYVR 12 D2
PUSHR D0
SETR D2 GD12
POP D0
WRITEPODARRAYVR 13 D2
PUSHR D0
SETR D2 GD13
POP D0
WRITEPODARRAYVR 14 D2
PUSHR D0
SETR D2 GD15
POP D0
WRITEPODARRAYVR 15 D2
PUSHR D0
SETR D2 GD16
POP D0
WRITEPODARRAYVR 16 D2
PUSHR D0
SETR D2 GD17
POP D0
WRITEPODARRAYVR 17 D2
PUSHR D0
SETR D2 GD20
POP D0
WRITEPODARRAYVR 18 D2
PUSHR D0
SETR D2 GD21
POP D0
WRITEPODARRAYVR 19 D2
PUSHR D0
SETR D2 GD14
POP D0
WRITEPODARRAYVR 20 D2
PUSHR D0
SETR D2 GD22
POP D0
WRITEPODARRAYVR 21 D2
PUSHR D0
SETR D2 GD23
POP D0
WRITEPODARRAYVR 22 D2
POP D2
STORE D2 0.0002
ALLOCATEMEMV D2 21 0
STORE D2 0.0001
SETR D2 GD25; if() #331 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 23543 ==; Test 'if'
STOREV 0 0; for() #62 setup AND if() #331 Body Start
LOAD D2 0; for() #62 LoopTest
COMPAREV D2 21
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23543 ==; for() #62 TestFail?
SETR D2 GD25; for() #62 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #62 Body End
LOAD D2 0; for() #62 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 23521; for() #62 End
LOAD D2 0.0004; if() #331 Body End AND InlineFunc[bool npc::isValid()] Params AND if() #332 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23560 ==; Test 'if'
LOAD D2 0.0002; if() #332 Body Start
ORV D2 65536
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #332 Body End
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND if() #162 Test AND do-while() #2 Body Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23622 ==; Test 'if'
SETR D2 GD25; if() #164 Test AND if(true) #163 [Opt:AlwaysOn] AND if() #162 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 23597 ==; Test 'if'
ALLOCATEMEMV D2 34 0; if() #164 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params End
CALLFUNC 2.8971; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 23 D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 2.9246; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 23627; if() #164 Body End
ALLOCATEMEMV D2 10 0; if() #164 Else Start
STORE D2 0
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Params End
CALLFUNC 2.8971; UsrFunc[void __SetUpDrawingArray(ffc, npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 23 D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 2.9246; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3; if() #164 Else End
GOTO 23627; if() #162 Body End
PUSHR D4; if() #162 Else Start
LOAD D2 0.0005; UsrFunc[void __HideFFCAndWait(ffc)] Params Start
PUSHR D2; UsrFunc[void __HideFFCAndWait(ffc)] Params End
CALLFUNC 2.9246; UsrFunc[void __HideFFCAndWait(ffc)] Call
POP D4; if() #162 Else End
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR GD1 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 1
SETR GD2 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 2
SETR GD3 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 3
SETR GD5 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 4
SETR GD6 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 5
SETR GD7 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 6
SETR GD8 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 7
SETR GD9 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 8
SETR GD18 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 9
SETR GD19 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 10
SETR GD11 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 11
SETR GD4 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 12
SETR GD10 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 13
SETR GD12 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 14
SETR GD13 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 15
SETR GD15 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 16
SETR GD16 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 17
SETR GD17 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 18
SETR GD20 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 19
SETR GD21 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 20
SETR GD14 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 21
SETR GD22 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 22
SETR GD23 D2
LOAD D2 0.0001; if() #165 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 23774 ==; Test 'if'
STOREV 0 0; for() #63 setup AND if() #165 Body Start
LOAD D2 0; for() #63 LoopTest
COMPAREV D2 21
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23780 ==; for() #63 TestFail?
LOAD D2 0.0001; for() #63 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #63 Body End
LOAD D2 0; for() #63 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 23751; for() #63 End
GOTO 23780; if() #165 Body End
SETV D2 0; if() #165 Else Start
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #165 Else End
SETR D2 GD26; do-while() #2 Body End AND do-while() #2 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 23560 !=; Test 'while'
LOAD D2 0.0004; InlineFunc[bool npc::isValid()] Params AND if() #333 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23805 ==; Test 'if'
SETV D2 65536; if() #333 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #333 Body End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
POPARGS D5 0.0006
RETURNFUNC; Func[void Ghost_WaitframeLight(ffc, npc)] Body End
SETR D4 SP2; Func[void Ghost_SetPosition(ffc, npc)] Body Start
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND unless() #300 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 23943 ==; Test 'unless' AND return (Void) AND unless() #300 Body
PUSHR D4; if() #156 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 23824 !=
SETV D2 1
GOTO 23825
SETV D2 0
COMPAREV D2 0
GOTOCMP 23855 ==; Test 'if'
SETR D2 GD1; if() #156 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 23887; if() #156 Body End
SETR D2 GD1; if() #156 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
SETR D2 GD3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2; if() #156 Else End
PUSHR D4
SETR D2 GD1; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
PUSHV -64
PUSHR REGION_WIDTH; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
PUSHR D4
SETR D2 GD2; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
SETR D2 GD3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
SUBR D3 D2
PUSHR D3
PUSHV -64
PUSHR REGION_HEIGHT; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void Ghost_SetPosition(ffc, npc)] Body End
PUSHARGSV 0 0.0005; Func[void Ghost_CheckHit(ffc, npc)] Body Start
SETR D4 SP2
LOAD D2 0.0005; if() #236 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
SETR D2 GD14
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24126 ==; Test 'if'
SETR D2 GD17; if() #236 Body Start
ORV D2 1
SETR GD17 D2
LOAD D2 0.0005
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
SETR D2 GD20; if() #237 Test
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 23973 ==; Test 'if'
SETV D2 32; if() #237 Body Start
SETR GD20 D2; if() #237 Body End
PUSHR D4; if() #238 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24126 ==; Test 'if'
SETV D2 0.0001; if() #238 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0003
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params AND if() #84 Test
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETR D2 GD12
ADDV D2 1
MULTV D2 16
POP D3
COMPARER D3 D2
GOTOCMP 24019 >=
LOAD D2 0.0003; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETR D2 GD13
ADDV D2 1
MULTV D2 16
POP D3
COMPARER D3 D2
GOTOCMP 24019 >=
SETV D2 1
GOTO 24020
SETV D2 0
COMPAREV D2 0
GOTOCMP 24055 ==; Test 'if'
SETV D2 0.0001; if() #239 Test AND if() #84 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
ANDV D2 2
PUSHR D2
SETR D2 GD4
ANDV D2 2
POP D3
COMPARER D3 D2
GOTOCMP 24044 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 24044 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24044 !=
SETV D2 0
GOTO 24045
SETV D2 1
COMPAREV D2 0
GOTOCMP 24126 ==; Test 'if'
SETV D2 0.0001; if() #239 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
LSHIFTV D2 12
ORV D2 16
SETR GD21 D2; if() #239 Body End
GOTO 24126; if() #84 Body End
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params AND if() #85 Test AND if() #84 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0003; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24096 ==; Test 'if'
SETR D2 GD4; if() #240 Test AND if() #85 Body Start
COMPAREV D2 0
GOTOCMP 24082 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 24082 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 24082 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24082 !=
SETV D2 0
GOTO 24083
SETV D2 1
COMPAREV D2 0
GOTOCMP 24126 ==; Test 'if'
LOAD D2 0.0003; if() #86 Test AND if() #240 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24093 ==; Test 'if'
SETV D2 16; if() #86 Body Start
SETR GD21 D2
GOTO 24126; if() #86 Body End
SETV D2 4112; if() #86 Else Start
SETR GD21 D2; if() #86 Else End
GOTO 24126; if() #240 Body End AND if() #85 Body End
SETR D2 GD4; if() #241 Test AND if() #85 Else Start
COMPAREV D2 2
GOTOCMP 24113 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 24113 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 24113 >
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24113 !=
SETV D2 0
GOTO 24114
SETV D2 1
COMPAREV D2 0
GOTOCMP 24126 ==; Test 'if'
LOAD D2 0.0004; if() #87 Test AND if() #241 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24124 ==; Test 'if'
SETV D2 8208; if() #87 Body Start
SETR GD21 D2
GOTO 24126; if() #87 Body End
SETV D2 12304; if() #87 Else Start
SETR GD21 D2; if() #87 Else End
SETR D2 GD21; if() #241 Body End AND if() #85 Else End AND if() #84 Else End AND if() #238 Body End AND if() #236 Body End AND if() #242 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24353 ==; Test 'if'
SETR D2 GD21; if() #242 Body Start
RSHIFTV D2 12
STORE D2 0.0004
SETR D2 GD21
ANDV D2 4095
STORE D2 0.0003
STOREV 4 0.0002
PUSHR D4; if() #243 Test
PUSHV 5; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24147 ==; Test 'if'
LOAD D2 0.0002; if() #243 Body Start
DIVV D2 2
STORE D2 0.0002; if() #243 Body End
PUSHR D4; if() #88 Test
LOAD D2 0.0004; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24255 ==; Test 'if'
STOREV 0 0.0001; if() #88 Body Start
STOREV 0 0
LOAD D2 0.0003
SUBV D2 1
STORE D2 0.0003
LOAD D2 0.0003; if() #89 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24175 ==; Test 'if'
LOAD D2 0.0004; if() #89 Body Start
LSHIFTV D2 12
PUSHR D2
LOAD D2 0.0003
POP D3
ORR D2 D3
SETR GD21 D2
GOTO 24177; if() #89 Body End
SETV D2 0; if() #89 Else Start
SETR GD21 D2; if() #89 Else End
LOAD D2 0.0004; if() #90 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24186 ==; Test 'if'
LOAD D2 0.0002; if() #90 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 24205; if() #90 Body End
LOAD D2 0.0004; if() #91 Test AND if() #90 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24194 ==; Test 'if'
LOAD D2 0.0002; if() #91 Body Start
STORE D2 0
GOTO 24205; if() #91 Body End
LOAD D2 0.0004; if() #92 Test AND if() #91 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24203 ==; Test 'if'
LOAD D2 0.0002; if() #92 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 24205; if() #92 Body End
LOAD D2 0.0002; if() #92 Else Start
STORE D2 0.0001; if() #92 Else End
LOAD D2 0.0001; if() #91 Else End AND if() #90 Else End AND if() #93 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24230 ==; Test 'if'
SETR D2 GD1; if() #93 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
SETR GD1 D2
SETR D2 GD18
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
SETR GD18 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3811; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
GOTO 24353; if() #93 Body End
LOAD D2 0; if() #244 Test AND if() #93 Else Start
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24353 ==; Test 'if'
SETR D2 GD2; if() #244 Body Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD2 D2
SETR D2 GD19
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD19 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3811; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4; if() #244 Body End
GOTO 24353; if() #93 Else End AND if() #88 Body End
STOREV -1 0.0001; if() #88 Else Start
STOREV -1 0
SETV D2 0
SETR GD21 D2
SETR D2 GD17
ORV D2 16
SETR GD17 D2
LOAD D2 0.0004; if() #94 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24273 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Floor(int)] Params Start AND if() #94 Body Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
STORE D2 0
GOTO 24302; if() #94 Body End
LOAD D2 0.0004; if() #95 Test AND if() #94 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24285 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Ceiling(int)] Params Start AND if() #95 Body Start
LSHIFTV D2 0
DIVV D2 8; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
MULTV D2 8
STORE D2 0
GOTO 24302; if() #95 Body End
LOAD D2 0.0004; if() #96 Test AND if() #95 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24296 ==; Test 'if'
SETR D2 GD1; InlineFunc[int Floor(int)] Params Start AND if() #96 Body Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
MULTV D2 8
STORE D2 0.0001
GOTO 24302; if() #96 Body End
SETR D2 GD1; InlineFunc[int Ceiling(int)] Params Start AND if() #96 Else Start
LSHIFTV D2 0
DIVV D2 8; InlineFunc[int Ceiling(int)] Params End
CEILING D2; InlineFunc[int Ceiling(int)] Body
MULTV D2 8
STORE D2 0.0001; if() #96 Else End
LOAD D2 0.0001; if() #95 Else End AND if() #94 Else End AND if() #97 Test
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24328 ==; Test 'if'
SETR D2 GD18; if() #97 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
SETR GD18 D2
LOAD D2 0.0001
SETR GD1 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3811; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
GOTO 24353; if() #97 Body End
LOAD D2 0; if() #245 Test AND if() #97 Else Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24353 ==; Test 'if'
SETR D2 GD19; if() #245 Body Start
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
SETR GD19 D2
LOAD D2 0
SETR GD2 D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3811; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4; if() #245 Body End
POPARGS D5 0.0007; if() #97 Else End AND if() #88 Else End AND if() #242 Body End
RETURNFUNC; Func[void Ghost_CheckHit(ffc, npc)] Body End
SETR D4 SP2; Func[void Ghost_ClearCombos()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
RETURNFUNC; Func[void Ghost_ClearCombos()] Body End
PUSHARGSV 0 0.0005; Func[int Ghost_ConstantWalk4(int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD21; if() #246 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24372 ==; Test 'if'
LOAD D2 0.0009; return Start AND if() #246 Body Start
GOTO 24712; return End AND if() #246 Body End
STOREV 0 0.0004
STOREV 0 0.0003
PUSHR D4
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0.0002
PUSHR D4; unless() #247 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24389 !=; Test 'unless'
PUSHR D4; unless() #247 Body Start
PUSHV 32768; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; unless() #247 Body End
LOAD D2 0.0008
DIVV D2 100
STORE D2 0.0008
SETR D2 GD17; if() #248 Test
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24533 ==; Test 'if'
SETR D2 GD1; if() #98 Test AND if() #248 Body Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24461 ==; Test 'if'
PUSHR D4; if() #98 Body Start
PUSHV 2; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV 3; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #99 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 24442 ==; Test 'if'
SETR D2 GD4; unless() #249 Test AND if() #99 Body Start
COMPAREV D2 2
GOTOCMP 24434 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 24434 ==
SETV D2 0
GOTO 24435
SETV D2 1
COMPAREV D2 0
GOTOCMP 24450 !=; Test 'unless'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #249 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #249 Body End
GOTO 24450; if() #99 Body End
LOAD D2 0.0001; if() #100 Test AND if() #99 Else Start
COMPAREV D2 0
GOTOCMP 24448 ==; Test 'if'
SETV D2 2; if() #100 Body Start
SETR GD4 D2
GOTO 24450; if() #100 Body End
SETV D2 3; if() #100 Else Start
SETR GD4 D2; if() #100 Else End
LOAD D2 0.0008; if() #99 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009
GOTO 24533; if() #98 Body End
SETR D2 GD2; if() #101 Test AND if() #98 Else Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24523 ==; Test 'if'
PUSHR D4; if() #101 Body Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #102 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 24504 ==; Test 'if'
SETR D2 GD4; unless() #250 Test AND if() #102 Body Start
COMPAREV D2 0
GOTOCMP 24496 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 24496 ==
SETV D2 0
GOTO 24497
SETV D2 1
COMPAREV D2 0
GOTOCMP 24512 !=; Test 'unless'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #250 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #250 Body End
GOTO 24512; if() #102 Body End
LOAD D2 0.0001; if() #103 Test AND if() #102 Else Start
COMPAREV D2 0
GOTOCMP 24510 ==; Test 'if'
SETV D2 0; if() #103 Body Start
SETR GD4 D2
GOTO 24512; if() #103 Body End
SETV D2 1; if() #103 Else Start
SETR GD4 D2; if() #103 Else End
LOAD D2 0.0008; if() #102 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009
GOTO 24533; if() #101 Body End
LOAD D2 0.0008; InlineFunc[int Floor(int)] Params Start AND if() #101 Else Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009; if() #101 Else End
LOAD D2 0.0009; if() #98 Else End AND if() #248 Body End AND if() #251 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 24567 ==; Test 'if'
PUSHR D4; if() #251 Body Start
CALLFUNC 2.4790; UsrFunc[void __Ghost_FixCoords()] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params End
CALLFUNC 2.4846; UsrFunc[void __Ghost_NewDir4(int, int, int)] Call
POP D4
LOAD D2 0.0008; if() #104 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24557 ==; Test 'if'
SETV D2 0; if() #104 Body Start
STORE D2 0.0009
GOTO 24567; if() #104 Body End
LOAD D2 0.0008; InlineFunc[int Floor(int)] Params Start AND if() #104 Else Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0009; if() #104 Else End
SETR D2 GD1; if() #251 Body End AND InlineFunc[int Abs(int)] Params Start AND if() #105 Test
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 24593 >=
SETR D2 GD2; InlineFunc[int Abs(int)] Params Start
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 24593 >=
SETV D2 1
GOTO 24594
SETV D2 0
COMPAREV D2 0
GOTOCMP 24630 ==; Test 'if'
SETR D2 LINKACTION; if() #252 Test AND if() #105 Body Start
COMPAREV D2 7
GOTOCMP 24605 !=
SETR D2 GD17
ANDV D2 32
COMPAREV D2 0
GOTOCMP 24605 !=
SETV D2 1
GOTO 24606
SETV D2 0
COMPAREV D2 0
GOTOCMP 24633 ==; Test 'if'
SETR D2 GD4; if() #252 Body Start
XORV D2 1
SETR GD4 D2
LOAD D2 0.0008; InlineFunc[int Floor(int)] Params Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
LOAD D2 0.0009
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0009
SETR D2 GD17
ORV D2 32
SETR GD17 D2; if() #252 Body End
GOTO 24633; if() #105 Body End
SETR D2 GD17; if() #105 Else Start
ANDV D2 -33
SETR GD17 D2; if() #105 Else End
SETR D2 GD4; if() #253 Test
COMPAREV D2 0
GOTOCMP 24641 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 24641 ==
SETV D2 1
GOTO 24642
SETV D2 0
COMPAREV D2 0
GOTOCMP 24664 ==; Test 'if'
SETR D2 GD4; if() #106 Test AND if() #253 Body Start
COMPAREV D2 2
GOTOCMP 24655 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 24655 ==
SETR D2 GD4
COMPAREV D2 6
GOTOCMP 24655 ==
SETV D2 0
GOTO 24656
SETV D2 1
COMPAREV D2 0
GOTOCMP 24662 ==; Test 'if'
LOAD D2 0.0008; if() #106 Body Start
SUBV2 0 D2
STORE D2 0.0004
GOTO 24664; if() #106 Body End
LOAD D2 0.0008; if() #106 Else Start
STORE D2 0.0004; if() #106 Else End
SETR D2 GD4; if() #253 Body End AND if() #254 Test
COMPAREV D2 2
GOTOCMP 24672 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 24672 ==
SETV D2 1
GOTO 24673
SETV D2 0
COMPAREV D2 0
GOTOCMP 24695 ==; Test 'if'
SETR D2 GD4; if() #107 Test AND if() #254 Body Start
COMPAREV D2 0
GOTOCMP 24686 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 24686 ==
SETR D2 GD4
COMPAREV D2 5
GOTOCMP 24686 ==
SETV D2 0
GOTO 24687
SETV D2 1
COMPAREV D2 0
GOTOCMP 24693 ==; Test 'if'
LOAD D2 0.0008; if() #107 Body Start
SUBV2 0 D2
STORE D2 0.0003
GOTO 24695; if() #107 Body End
LOAD D2 0.0008; if() #107 Else Start
STORE D2 0.0003; if() #107 Else End
LOAD D2 0.0002; if() #254 Body End AND unless() #255 Test
COMPAREV D2 0
GOTOCMP 24702 !=; Test 'unless'
PUSHR D4; unless() #255 Body Start
PUSHV 32768; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; unless() #255 Body End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0009; return Start
SUBV D2 1
POPARGS D5 0.0010; return End
RETURNFUNC; Func[int Ghost_ConstantWalk4(int, int, int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_SetFlag(int)] Body Start
LOAD D2 0; if() #155 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24732 ==; Test 'if'
SETR D2 GD16; if() #155 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ORR D2 D3
SETR GD16 D2
GOTO 24738; if() #155 Body End
SETR D2 GD15; if() #155 Else Start
PUSHR D2
LOAD D2 0
POP D3
ORR D2 D3
SETR GD15 D2; if() #155 Else End
POP D5
RETURNFUNC; Func[void Ghost_SetFlag(int)] Body End
SETR D4 SP2; Func[bool __Ghost_CanMoveNES(int, int, int)] Body Start
LOAD D2 0.0001; if() #576 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 24748 ==; Test 'if'
SETV D2 1; return Start AND if() #576 Body Start
GOTO 24788; return End AND if() #576 Body End
LOAD D2 0.0001; while() #7 Test
COMPAREV D2 8
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24775 ==; Test 'while'
PUSHR D4; unless() #577 Test AND while() #7 Body Start
LOAD D2 0.0002; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.1759; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24771 !=; Test 'unless'
SETV D2 0; return Start AND unless() #577 Body Start
GOTO 24788; return End AND unless() #577 Body End
LOAD D2 0.0001
SUBV D2 8
STORE D2 0.0001; while() #7 Body End
GOTO 24748; while() #7 End
PUSHR D4; return Start
LOAD D2 0.0002; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD3
COMPAREV D2 0
SETCMP D2 I>
PUSHR D2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 2.1759; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP D4
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool __Ghost_CanMoveNES(int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void __Ghost_FixCoords()] Body Start
SETR D4 SP2
SETR D2 GD1
ANDV D2 240
STORE D2 0.0001
SETR D2 GD1; if() #599 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24804 ==; Test 'if'
LOAD D2 0.0001; if() #599 Body Start
ADDV D2 16
STORE D2 0.0001; if() #599 Body End
LOAD D2 0.0001
SETR GD1 D2
SETV D2 0; if() #315 Test
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24830 ==; Test 'if'
SETR D2 GD2; if() #315 Body Start
ANDV D2 248
STORE D2 0
SETR D2 GD2; if() #600 Test
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24827 ==; Test 'if'
LOAD D2 0; if() #600 Body Start
ADDV D2 8
STORE D2 0; if() #600 Body End
LOAD D2 0
SETR GD2 D2
GOTO 24844; if() #315 Body End
SETR D2 GD2; if() #315 Else Start
ANDV D2 240
STORE D2 0
SETR D2 GD2; if() #601 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 24842 ==; Test 'if'
LOAD D2 0; if() #601 Body Start
ADDV D2 16
STORE D2 0; if() #601 Body End
LOAD D2 0
SETR GD2 D2; if() #315 Else End
POPARGS D5 0.0002
RETURNFUNC; Func[void __Ghost_FixCoords()] Body End
PUSHARGSV 0 0.0005; Func[void __Ghost_NewDir4(int, int, int)] Body Start
SETR D4 SP2
STOREV -1 0.0004
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #611 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24937 ==; Test 'if'
PUSHR D4; if() #611 Body Start
PUSHV 11; UsrFunc[lweapon LoadLWeaponOf(int)] Params
CALLFUNC 2.9353; UsrFunc[lweapon LoadLWeaponOf(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[bool lweapon::isValid()] Params AND if() #612 Test
ISVALIDLWPN D2; InlineFunc[bool lweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 24937 ==; Test 'if'
SETR D2 GD2; InlineFunc[int Abs(int)] Params Start AND if() #613 Test AND if() #612 Body Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 14
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 24909 ==; Test 'if'
LOAD D2 0.0003; if() #325 Test AND if() #613 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24895 ==; Test 'if'
SETV D2 0; if() #325 Body Start
STORE D2 0.0004
GOTO 24897; if() #325 Body End
SETV D2 1; if() #325 Else Start
STORE D2 0.0004; if() #325 Else End
PUSHR D4; if() #614 Test
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24909 ==; Test 'if'
LOAD D2 0.0004; if() #614 Body Start
SETR GD4 D2
GOTO 25073; return (Void) AND if() #614 Body End
LOAD D2 0.0003; if() #613 Body End AND if() #326 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24923 ==; Test 'if'
SETV D2 2; if() #326 Body Start
STORE D2 0.0004
GOTO 24925; if() #326 Body End
SETV D2 3; if() #326 Else Start
STORE D2 0.0004; if() #326 Else End
PUSHR D4; if() #615 Test
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24937 ==; Test 'if'
LOAD D2 0.0004; if() #615 Body Start
SETR GD4 D2
GOTO 25073; return (Void) AND if() #615 Body End
SETV D3 256; if() #612 Body End AND if() #611 Body End AND InlineFunc[int Rand(int)] Params AND if() #616 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 24972 ==; Test 'if'
PUSHR D4; if() #616 Body Start
PUSHV 8; UsrFunc[int __Ghost_LinedUp(int, bool)] Params Start
PUSHV 0; UsrFunc[int __Ghost_LinedUp(int, bool)] Params End
CALLFUNC 3.0328; UsrFunc[int __Ghost_LinedUp(int, bool)] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #617 Test
COMPAREV D2 0
GOTOCMP 24966 <
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 24966 ==
SETV D2 1
GOTO 24967
SETV D2 0
COMPAREV D2 0
GOTOCMP 24972 ==; Test 'if'
LOAD D2 0.0004; if() #617 Body Start
SETR GD4 D2
GOTO 25073; return (Void) AND if() #617 Body End
ALLOCATEMEMV D2 4 0; if() #616 Body End
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0; for() #171 setup
LOAD D2 0; for() #171 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25007 ==; for() #171 TestFail?
PUSHR D4; if() #618 Test AND for() #171 Body Start
LOAD D2 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 16
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25003 ==; Test 'if'
SETV D2 1; if() #618 Body Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
ADDV D2 1
STORE D2 0.0002; if() #618 Body End
LOAD D2 0; for() #171 Body End AND for() #171 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 24977; for() #171 End
LOAD D2 0.0002; if() #619 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25017 ==; Test 'if'
SETV D2 -1; if() #619 Body Start
SETR GD4 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 25073; return (Void) AND if() #619 Body End
SETV D3 16; InlineFunc[int Rand(int)] Params AND if() #620 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 25036 ==; Test 'if'
LOAD D2 0.0003; if() #621 Test AND if() #620 Body Start
PUSHR D2
SETR D2 GD4
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 25036 ==; Test 'if'
LOAD D3 0.0003; if() #621 Body Start
DEALLOCATEMEMR D3
GOTO 25073; return (Void) AND if() #621 Body End
LOAD D2 0.0002; if() #620 Body End AND InlineFunc[int Rand(int)] Params Start
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0001
STOREV 0 0; for() #172 setup
LOAD D2 0; for() #172 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25071 ==; for() #172 TestFail?
LOAD D2 0.0003; unless() #622 Test AND for() #172 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 25067 ==; Test 'unless' AND continue 1; AND unless() #622 Body
LOAD D2 0.0001; if() #327 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25064 ==; Test 'if'
LOAD D2 0; if() #327 Body Start
SETR GD4 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 25073; return (Void)
GOTO 25067; if() #327 Body End
LOAD D2 0.0001; if() #327 Else Start
SUBV D2 1
STORE D2 0.0001; if() #327 Else End
LOAD D2 0; for() #172 Body End AND for() #172 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 25041; for() #172 End
LOAD D3 0.0003
DEALLOCATEMEMR D3
POPARGS D5 0.0008
RETURNFUNC; Func[void __Ghost_NewDir4(int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_UnsetFlag(int)] Body Start
LOAD D2 0; if() #157 Test
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 25093 ==; Test 'if'
SETR D2 GD16; if() #157 Body Start
PUSHR D2
LOAD D2 0
ANDV D2 65535
SETV D3 -2
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
SETR GD16 D2
GOTO 25100; if() #157 Body End
SETR D2 GD15; if() #157 Else Start
PUSHR D2
LOAD D2 0
BITNOT D2
POP D3
ANDR D2 D3
SETR GD15 D2; if() #157 Else End
POP D5
RETURNFUNC; Func[void Ghost_UnsetFlag(int)] Body End
PUSHARGSV 0 0.0004; Func[void Ghost_MoveXY(int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0005; if() #292 Test
COMPAREV D2 0
GOTOCMP 25120 >=
PUSHR D4
CALLFUNC 2.7598; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 25120 ==
PUSHR D4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25120 !=
SETV D2 1
GOTO 25121
SETV D2 0
COMPAREV D2 0
GOTOCMP 25125 ==; Test 'if'
SETV D2 0; if() #292 Body Start
STORE D2 0.0005; if() #292 Body End
LOAD D2 0.0006; while() #3 Test AND InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 8
GOTOCMP 25135 >
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 8
GOTOCMP 25135 >
SETV D2 0
GOTO 25136
SETV D2 1
COMPAREV D2 0
GOTOCMP 25202 ==; Test 'while'
LOAD D2 0.0006; InlineFunc[int Abs(int)] Params AND if() #138 Test AND while() #3 Body Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 25175 ==; Test 'if'
LOAD D2 0.0006; if() #139 Test AND if() #138 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25164 ==; Test 'if'
PUSHR D4; if() #139 Body Start
PUSHV 8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006
SUBV D2 8
STORE D2 0.0006
GOTO 25125; if() #139 Body End
PUSHR D4; if() #139 Else Start
PUSHV -8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006
ADDV D2 8
STORE D2 0.0006; if() #139 Else End
GOTO 25125; if() #138 Body End
LOAD D2 0.0005; if() #140 Test AND if() #138 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25191 ==; Test 'if'
PUSHR D4; if() #140 Body Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 8
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0005
SUBV D2 8
STORE D2 0.0005
GOTO 25125; if() #140 Body End
PUSHR D4; if() #140 Else Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV -8
LOAD D2 0.0004
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0005
ADDV D2 8
STORE D2 0.0005; if() #140 Else End
GOTO 25125; if() #138 Else End AND while() #3 Body End AND while() #3 End
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0006; if() #141 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25277 ==; Test 'if'
SETR D2 GD22; if() #141 Body Start
RSHIFTV D2 8
STORE D2 0.0002
SETR D2 GD1
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #142 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25247 ==; Test 'if'
LOAD D2 0.0003; if() #142 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25269; if() #142 Body End
PUSHR D4; if() #143 Test AND if() #142 Else Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0006
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25265 ==; Test 'if'
LOAD D2 0.0003; if() #143 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25269; if() #143 Body End
LOAD D2 0.0003; if() #143 Else Start
RSHIFTV D2 3
LSHIFTV D2 3
STORE D2 0.0003; if() #143 Else End
LOAD D2 0.0003; if() #142 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2
GOTO 25360; if() #141 Body End
LOAD D2 0.0006; if() #293 Test AND if() #141 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25360 ==; Test 'if'
SETR D2 GD12; if() #293 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD22
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
STORE D2 0.0002
SETR D2 GD1
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #144 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25330 ==; Test 'if'
LOAD D2 0.0003; if() #144 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25353; if() #144 Body End
PUSHR D4; if() #145 Test AND if() #144 Else Start
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25347 ==; Test 'if'
LOAD D2 0.0003; if() #145 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25353; if() #145 Body End
LOAD D2 0.0003; if() #145 Else Start
ADDV D2 7
RSHIFTV D2 3
LSHIFTV D2 3
SUBV D2 1
STORE D2 0.0003; if() #145 Else End
LOAD D2 0.0003; if() #144 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD1 D2; if() #293 Body End
LOAD D2 0.0005; if() #141 Else End AND if() #146 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25431 ==; Test 'if'
SETR D2 GD23; if() #146 Body Start
RSHIFTV D2 8
STORE D2 0.0002
SETR D2 GD2
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #147 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25401 ==; Test 'if'
LOAD D2 0.0003; if() #147 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25423; if() #147 Body End
PUSHR D4; if() #148 Test AND if() #147 Else Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0005
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25419 ==; Test 'if'
LOAD D2 0.0003; if() #148 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25423; if() #148 Body End
LOAD D2 0.0003; if() #148 Else Start
RSHIFTV D2 3
LSHIFTV D2 3
STORE D2 0.0003; if() #148 Else End
LOAD D2 0.0003; if() #147 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2
GOTO 25514; if() #146 Body End
LOAD D2 0.0005; if() #294 Test AND if() #146 Else Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25514 ==; Test 'if'
SETR D2 GD13; if() #294 Body Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
SETR D2 GD23
ANDV D2 255
POP D3
SUBR D3 D2
SETR D2 D3
SUBV D2 1
STORE D2 0.0002
SETR D2 GD2
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0001
LOAD D2 0.0003; InlineFunc[int Floor(int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
DIVV D2 8; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0
LOAD D2 0.0001; if() #149 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25484 ==; Test 'if'
LOAD D2 0.0003; if() #149 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25507; if() #149 Body End
PUSHR D4; if() #150 Test AND if() #149 Else Start
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25501 ==; Test 'if'
LOAD D2 0.0003; if() #150 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
ADDR D2 D3
STORE D2 0.0003
GOTO 25507; if() #150 Body End
LOAD D2 0.0003; if() #150 Else Start
ADDV D2 7
RSHIFTV D2 3
LSHIFTV D2 3
SUBV D2 1
STORE D2 0.0003; if() #150 Else End
LOAD D2 0.0003; if() #149 Else End
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
SETR GD2 D2; if() #294 Body End
PUSHR D4; if() #146 Else End AND if() #295 Test
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25526 ==
SETR D2 GD17
ANDV D2 4
COMPAREV D2 0
GOTOCMP 25526 !=
SETV D2 1
GOTO 25527
SETV D2 0
COMPAREV D2 0
GOTOCMP 25584 ==; Test 'if'
PUSHR D4; if() #151 Test AND if() #295 Body Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25549 ==; Test 'if'
PUSHR D4; if() #151 Body Start
LOAD D2 0.0006; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2
LOAD D2 0.0005
SETR D1 D2; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS D2; InlineFunc[int WrapAngle(int)] Body
MULTV D2 57.2958
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0552; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 25580; if() #151 Body End
LOAD D2 0.0006; InlineFunc[int Abs(int)] Params AND if() #152 Test AND if() #151 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25570 ==; Test 'if'
LOAD D2 0.0005; if() #153 Test AND if() #152 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25567 ==; Test 'if'
SETV D2 0; if() #153 Body Start
SETR GD4 D2
GOTO 25580; if() #153 Body End
SETV D2 1; if() #153 Else Start
SETR GD4 D2; if() #153 Else End
GOTO 25580; if() #152 Body End
LOAD D2 0.0006; if() #154 Test AND if() #152 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25578 ==; Test 'if'
SETV D2 2; if() #154 Body Start
SETR GD4 D2
GOTO 25580; if() #154 Body End
SETV D2 3; if() #154 Else Start
SETR GD4 D2; if() #154 Else End
SETR D2 GD1; if() #152 Else End AND if() #151 Else End
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2; if() #295 Body End
POPARGS D5 0.0007
RETURNFUNC; Func[void Ghost_MoveXY(int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[int Ghost_ConstantWalk8(int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD21; if() #256 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25595 ==; Test 'if'
LOAD D2 0.0006; return Start AND if() #256 Body Start
GOTO 25696; return End AND if() #256 Body End
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0005
DIVV D2 100
STORE D2 0.0005
LOAD D2 0.0006; if() #257 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 25624 ==; Test 'if'
PUSHR D4; if() #257 Body Start
LOAD D2 0.0004; UsrFunc[void __Ghost_NewDir8(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void __Ghost_NewDir8(int, int, int)] Params End
CALLFUNC 2.5698; UsrFunc[void __Ghost_NewDir8(int, int, int)] Call
POP D4
LOAD D2 0.0005; InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0005
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0006; if() #257 Body End
SETR D2 GD4; if() #258 Test
COMPAREV D2 0
GOTOCMP 25632 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 25632 ==
SETV D2 1
GOTO 25633
SETV D2 0
COMPAREV D2 0
GOTOCMP 25655 ==; Test 'if'
SETR D2 GD4; if() #108 Test AND if() #258 Body Start
COMPAREV D2 2
GOTOCMP 25646 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 25646 ==
SETR D2 GD4
COMPAREV D2 6
GOTOCMP 25646 ==
SETV D2 0
GOTO 25647
SETV D2 1
COMPAREV D2 0
GOTOCMP 25653 ==; Test 'if'
LOAD D2 0.0005; if() #108 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 25655; if() #108 Body End
LOAD D2 0.0005; if() #108 Else Start
STORE D2 0.0001; if() #108 Else End
SETR D2 GD4; if() #258 Body End AND if() #259 Test
COMPAREV D2 2
GOTOCMP 25663 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 25663 ==
SETV D2 1
GOTO 25664
SETV D2 0
COMPAREV D2 0
GOTOCMP 25686 ==; Test 'if'
SETR D2 GD4; if() #109 Test AND if() #259 Body Start
COMPAREV D2 0
GOTOCMP 25677 ==
SETR D2 GD4
COMPAREV D2 4
GOTOCMP 25677 ==
SETR D2 GD4
COMPAREV D2 5
GOTOCMP 25677 ==
SETV D2 0
GOTO 25678
SETV D2 1
COMPAREV D2 0
GOTOCMP 25684 ==; Test 'if'
LOAD D2 0.0005; if() #109 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 25686; if() #109 Body End
LOAD D2 0.0005; if() #109 Else Start
STORE D2 0; if() #109 Else End
PUSHR D4; if() #259 Body End
LOAD D2 0.0001; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0006; return Start
SUBV D2 1
POPARGS D5 0.0007; return End
RETURNFUNC; Func[int Ghost_ConstantWalk8(int, int, int, int, int)] Body End
PUSHARGSV 0 0.0005; Func[void __Ghost_NewDir8(int, int, int)] Body Start
SETR D4 SP2
STOREV -1 0.0004
PUSHR D4; if() #623 Test
PUSHR GD4; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25879 ==; Test 'if'
SETV D3 4; InlineFunc[int Rand(int)] Params AND if() #624 Test AND if() #623 Body Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25829 ==; Test 'if'
PUSHR D4; if() #624 Body Start
PUSHV 11; UsrFunc[lweapon LoadLWeaponOf(int)] Params
CALLFUNC 2.9353; UsrFunc[lweapon LoadLWeaponOf(int)] Call
POP D4
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[bool lweapon::isValid()] Params AND if() #625 Test
ISVALIDLWPN D2; InlineFunc[bool lweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 25829 ==; Test 'if'
LOAD D2 0.0003; if() #328 Test AND if() #625 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25741 ==; Test 'if'
SETV D2 2; if() #328 Body Start
STORE D2 0.0004
GOTO 25757; if() #328 Body End
LOAD D2 0.0003; if() #329 Test AND if() #328 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25755 ==; Test 'if'
SETV D2 3; if() #329 Body Start
STORE D2 0.0004
GOTO 25757; if() #329 Body End
SETV D2 0; if() #329 Else Start
STORE D2 0.0004; if() #329 Else End
SETR D2 GD2; if() #328 Else End AND InlineFunc[int Abs(int)] Params Start AND if() #626 Test
PUSHR D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 14
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25811 ==; Test 'if'
LOAD D2 0.0004; if() #330 Test AND if() #626 Body Start
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 25795 ==; Test 'if'
LOAD D2 0.0003; if() #331 Test AND if() #330 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25791 ==; Test 'if'
LOAD D2 0.0004; if() #331 Body Start
ADDV D2 2
STORE D2 0.0004
GOTO 25811; if() #331 Body End
LOAD D2 0.0004; if() #331 Else Start
ADDV D2 4
STORE D2 0.0004; if() #331 Else End
GOTO 25811; if() #330 Body End
LOAD D2 0.0003; if() #332 Test AND if() #330 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25809 ==; Test 'if'
SETV D2 0; if() #332 Body Start
STORE D2 0.0004
GOTO 25811; if() #332 Body End
SETV D2 1; if() #332 Else Start
STORE D2 0.0004; if() #332 Else End
PUSHR D4; if() #330 Else End AND if() #626 Body End AND if() #627 Test
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25829 ==; Test 'if'
LOAD D2 0.0004; if() #627 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
GOTO 25973; return (Void) AND if() #627 Body End
SETV D3 256; if() #625 Body End AND if() #624 Body End AND InlineFunc[int Rand(int)] Params AND if() #628 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25870 ==; Test 'if'
PUSHR D4; if() #628 Body Start
PUSHV 8; UsrFunc[int __Ghost_LinedUp(int, bool)] Params Start
PUSHV 1; UsrFunc[int __Ghost_LinedUp(int, bool)] Params End
CALLFUNC 3.0328; UsrFunc[int __Ghost_LinedUp(int, bool)] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #629 Test
COMPAREV D2 0
GOTOCMP 25858 <
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25858 ==
SETV D2 1
GOTO 25859
SETV D2 0
COMPAREV D2 0
GOTOCMP 25870 ==; Test 'if'
LOAD D2 0.0004; if() #629 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
GOTO 25973; return (Void) AND if() #629 Body End
SETV D3 16; if() #628 Body End AND InlineFunc[int Rand(int)] Params AND if() #630 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 25973 !=; Test 'if' AND return (Void) AND if() #630 Body
ALLOCATEMEMV D2 8 0; if() #623 Body End
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0; for() #173 setup
LOAD D2 0; for() #173 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25914 ==; for() #173 TestFail?
PUSHR D4; if() #631 Test AND for() #173 Body Start
LOAD D2 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHR D2
PUSHV 8
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 25910 ==; Test 'if'
LOAD D2 0.0002; if() #631 Body Start
ADDV D2 1
STORE D2 0.0002
SETV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; if() #631 Body End
LOAD D2 0; for() #173 Body End AND for() #173 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 25884; for() #173 End
LOAD D2 0.0002; if() #632 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25930 ==; Test 'if'
SETV D2 -1; if() #632 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 25973; return (Void) AND if() #632 Body End
LOAD D2 0.0002; InlineFunc[int Rand(int)] Params Start
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0001
STOREV 0 0; for() #174 setup
LOAD D2 0; for() #174 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 25971 ==; for() #174 TestFail?
LOAD D2 0.0003; unless() #633 Test AND for() #174 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 25967 ==; Test 'unless' AND continue 1; AND unless() #633 Body
LOAD D2 0.0001; if() #333 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25964 ==; Test 'if'
LOAD D2 0; if() #333 Body Start
SETR GD4 D2
SETR D2 GD1
LSHIFTV D2 0
SETR GD1 D2
SETR D2 GD2
LSHIFTV D2 0
SETR GD2 D2
LOAD D3 0.0003
DEALLOCATEMEMR D3
GOTO 25973; return (Void)
GOTO 25967; if() #333 Body End
LOAD D2 0.0001; if() #333 Else Start
SUBV D2 1
STORE D2 0.0001; if() #333 Else End
LOAD D2 0; for() #174 Body End AND for() #174 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 25935; for() #174 End
LOAD D3 0.0003
DEALLOCATEMEMR D3
POPARGS D5 0.0008
RETURNFUNC; Func[void __Ghost_NewDir8(int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_DeathAnimation(ffc, npc, int)] Body Start
LOAD D2 0; if() #110 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 25990 ==; Test 'if'
PUSHR D4; if() #110 Body Start
LOAD D2 0.0002; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 0; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params End
CALLFUNC 2.6099; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Call
POP D4
GOTO 26097; if() #110 Body End
LOAD D2 0; if() #111 Test AND if() #110 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26004 ==; Test 'if'
PUSHR D4; if() #111 Body Start
LOAD D2 0.0002; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Params End
CALLFUNC 2.6099; UsrFunc[void __Ghost_Explode(ffc, npc, bool)] Call
POP D4
GOTO 26097; if() #111 Body End
LOAD D2 0; if() #112 Test AND if() #111 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26017 ==; Test 'if'
PUSHR D4; if() #112 Body Start
LOAD D2 0.0002; UsrFunc[void __Ghost_ShrinkAway(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void __Ghost_ShrinkAway(ffc, npc)] Params End
CALLFUNC 2.6268; UsrFunc[void __Ghost_ShrinkAway(ffc, npc)] Call
POP D4
GOTO 26097; if() #112 Body End
LOAD D2 0.0001; InlineFunc[bool npc::isValid()] Params AND if() #260 Test AND if() #112 Else Start
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 26090 ==; Test 'if'
SETV D2 1; if() #260 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD1
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2; if() #260 Body End
PUSHR D4
LOAD D2 0.0002; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.6535; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2; if() #112 Else End
POPARGS D5 0.0003; if() #111 Else End AND if() #110 Else End
RETURNFUNC; Func[void Ghost_DeathAnimation(ffc, npc, int)] Body End
PUSHARGSV 0 0.0005; Func[void __Ghost_Explode(ffc, npc, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0004
SETR D2 GD1
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __DeathAnimStart(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void __DeathAnimStart(ffc, npc)] Params End
CALLFUNC 3.0237; UsrFunc[void __DeathAnimStart(ffc, npc)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void __DeathAnimSFX(int, int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCID
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X; UsrFunc[void __DeathAnimSFX(int, int)] Params End
CALLFUNC 3.0181; UsrFunc[void __DeathAnimSFX(int, int)] Call
POP D4
LOAD D2 0.0005; if() #314 Test
COMPAREV D2 0
GOTOCMP 26155 ==; Test 'if'
SETV D2 10000; if() #314 Body Start
SETR GD20 D2
GOTO 26157; if() #314 Body End
SETV D2 0; if() #314 Else Start
SETR GD20 D2; if() #314 Else End
STOREV 0 0.0001; for() #169 setup
LOAD D2 0.0001; for() #169 LoopTest
COMPAREV D2 15
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26259 ==; for() #169 TestFail?
SETV D2 4; InlineFunc[lweapon screendata::CreateLWeapon(int)] Params AND for() #169 Body Start
CREATELWEAPONR D2; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body Start
SETR D2 REFLWPN; InlineFunc[lweapon screendata::CreateLWeapon(int)] Body End
STORE D2 0.0004
LOAD D2 0.0003
PUSHR D2
SETR D2 GD12; InlineFunc[int Rand(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
SUBV D2 8
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
PUSHR D2
SETR D2 GD13; InlineFunc[int Rand(int)] Params Start
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
POP D3
ADDR D2 D3
SUBV D2 8
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFLWPN
SETR LWPNCOLLDET D2
STOREV 0 0; for() #170 setup
LOAD D2 0; for() #170 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26255 ==; for() #170 TestFail?
PUSHR D4; for() #170 Body Start
LOAD D2 0.0007; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3811; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
LOAD D2 0.0005; if() #598 Test
COMPAREV D2 0
GOTOCMP 26244 ==; Test 'if'
PUSHR D4; if() #598 Body Start
LOAD D2 0.0007; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 2.3161; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
POP D4; if() #598 Body End
PUSHR D4
LOAD D2 0.0007; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.3411; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4; for() #170 Body End
LOAD D2 0; for() #170 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 26222; for() #170 End
LOAD D2 0.0001; for() #169 Body End AND for() #169 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 26158; for() #169 End
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params End
CALLFUNC 3.0110; UsrFunc[void __DeathAnimEnd(ffc, npc)] Call
POP D4
POPARGS D5 0.0008
RETURNFUNC; Func[void __Ghost_Explode(ffc, npc, bool)] Body End
PUSHARGSV 0 0.0011; Func[void __Ghost_ShrinkAway(ffc, npc)] Body Start
SETR D4 SP2
SETR D2 GD1
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0010
SETR D2 GD2
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0009
SETR D2 GD12
MULTV D2 16
STORE D2 0.0008
SETR D2 GD13
MULTV D2 16
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE
STORE D2 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
LOAD D2 0.0012; if() #334 Test
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 26325 ==; Test 'if'
SETV D2 4; if() #334 Body Start
STORE D2 0.0005
GOTO 26339; if() #334 Body End
SETV D2 1; if() #335 Test AND if() #334 Else Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26337 ==; Test 'if'
SETV D2 1; if() #335 Body Start
STORE D2 0.0005
GOTO 26339; if() #335 Body End
SETV D2 2; if() #335 Else Start
STORE D2 0.0005; if() #335 Else End
LOAD D2 0.0011; if() #334 Else End AND if() #336 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 256
COMPAREV D2 0
GOTOCMP 26357 !=
LOAD D2 0.0012
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 26357 !=
SETV D2 0
GOTO 26358
SETV D2 1
COMPAREV D2 0
GOTOCMP 26363 ==; Test 'if'
SETV D2 64; if() #336 Body Start
STORE D2 0.0004
GOTO 26365; if() #336 Body End
SETV D2 128; if() #336 Else Start
STORE D2 0.0004; if() #336 Else End
PUSHR D4
LOAD D2 0.0012; UsrFunc[void __DeathAnimStart(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void __DeathAnimStart(ffc, npc)] Params End
CALLFUNC 3.0237; UsrFunc[void __DeathAnimStart(ffc, npc)] Call
POP D4
SETV D2 1024
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
SETV D2 0
SETR GD20 D2
STOREV 0 0.0003; for() #175 setup
LOAD D2 0.0003; for() #175 LoopTest
COMPAREV D2 120
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26526 ==; for() #175 TestFail?
LOAD D2 0.0003; InlineFunc[int Cos(int)] Params Start AND for() #175 Body Start
SUBV D2 30
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
SETV D3 30; InlineFunc[int Cos(int)] Params
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
STORE D2 0.0001
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0002
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0003; if() #634 Test
COMPAREV D2 30
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26428 ==; Test 'if'
PUSHR D4; if() #634 Body Start
LOAD D2 0.0011; UsrFunc[void __DeathAnimSFX(int, int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCID
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X; UsrFunc[void __DeathAnimSFX(int, int)] Params End
CALLFUNC 3.0181; UsrFunc[void __DeathAnimSFX(int, int)] Call
POP D4; if() #634 Body End
SETR D2 GD10; if() #337 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26475 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #337 Body Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0009
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0006
PUSHR D2
PUSHR GD12
PUSHR GD13
PUSHR GD11
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV 0 0.0004
PUSHV 1
LOAD D2 0.0004
PUSHR D2; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 26515; if() #337 Body End
LOAD D2 0.0005; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #337 Else Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0008
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0009
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 2
POP D3
SUBR D3 D2
PUSHR D3
PUSHR GD10
PUSHR GD12
PUSHR GD13
PUSHR GD11
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV 0 0.0005
PUSHV 1
LOAD D2 0.0004
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #337 Else End
PUSHR D4
LOAD D2 0.0012; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.3411; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4; for() #175 Body End
LOAD D2 0.0003; for() #175 LoopIncrement
ADDV D2 1
STORE D2 0.0003
GOTO 26384; for() #175 End
PUSHR D4
LOAD D2 0.0012; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2; UsrFunc[void __DeathAnimEnd(ffc, npc)] Params End
CALLFUNC 3.0110; UsrFunc[void __DeathAnimEnd(ffc, npc)] Call
POP D4
POPARGS D5 0.0013
RETURNFUNC; Func[void __Ghost_ShrinkAway(ffc, npc)] Body End
PUSHV 0; Func[void __GhCleanUp(ffc)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFCWIDTH D2
SETV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFCHEIGHT D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DELAY D2
STOREV 0 0; for() #164 setup
LOAD D2 0; for() #164 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26667 ==; for() #164 TestFail?
SETV D2 0; for() #164 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; for() #164 Body End
LOAD D2 0; for() #164 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 26646; for() #164 End
POPARGS D5 0.0002
RETURNFUNC; Func[void __GhCleanUp(ffc)] Body End
SETR D4 SP2; Func[void Ghost_ForceDir(int)] Body Start
LOAD D2 0
SETR GD4 D2
SETR D2 GD17
ORV D2 4
SETR GD17 D2
POP D5
RETURNFUNC; Func[void Ghost_ForceDir(int)] Body End
PUSHARGSV 0 0.0005; Func[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD21; if() #272 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 26686 ==; Test 'if'
LOAD D2 0.0011; return Start AND if() #272 Body Start
GOTO 27015; return End AND if() #272 Body End
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0011; if() #119 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26698 ==; Test 'if'
SETV D2 0; if() #119 Body Start
STORE D2 0.0004
SETV D2 0
STORE D2 0.0003
GOTO 26704; if() #119 Body End
LOAD D2 0.0011; if() #119 Else Start
MULTV D2 10000
STORE D2 0.0004
LOAD D2 0.0011
RSHIFTV D2 0
STORE D2 0.0003; if() #119 Else End
LOAD D2 0.0003; if() #273 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 26712 ==; Test 'if'
LOAD D2 0.0003; return Start AND if() #273 Body Start
SUBV D2 1
GOTO 27015; return End AND if() #273 Body End
PUSHR D4
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0.0002
PUSHR D4; unless() #274 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 26727 !=; Test 'unless'
PUSHR D4; unless() #274 Body Start
PUSHV 32768; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; unless() #274 Body End
LOAD D2 0.0010
DIVV D2 100
STORE D2 0.0010
SETR D2 GD17; if() #275 Test
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 26871 ==; Test 'if'
SETR D2 GD1; if() #120 Test AND if() #275 Body Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26799 ==; Test 'if'
PUSHR D4; if() #120 Body Start
PUSHV 2; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV 3; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #121 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 26780 ==; Test 'if'
SETR D2 GD4; unless() #276 Test AND if() #121 Body Start
COMPAREV D2 2
GOTOCMP 26772 ==
SETR D2 GD4
COMPAREV D2 3
GOTOCMP 26772 ==
SETV D2 0
GOTO 26773
SETV D2 1
COMPAREV D2 0
GOTOCMP 26788 !=; Test 'unless'
PUSHVARGV 2; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #276 Body Start
PUSHVARGV 3; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #276 Body End
GOTO 26788; if() #121 Body End
LOAD D2 0.0001; if() #122 Test AND if() #121 Else Start
COMPAREV D2 0
GOTOCMP 26786 ==; Test 'if'
SETV D2 2; if() #122 Body Start
SETR GD4 D2
GOTO 26788; if() #122 Body End
SETV D2 3; if() #122 Else Start
SETR GD4 D2; if() #122 Else End
LOAD D2 0.0010; if() #121 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004
GOTO 26871; if() #120 Body End
SETR D2 GD2; if() #123 Test AND if() #120 Else Start
MODV D2 16
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26861 ==; Test 'if'
PUSHR D4; if() #123 Body Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Params End
CALLFUNC 2.4740; UsrFunc[bool __Ghost_CanMoveNES(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #124 Test
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 BI==
COMPAREV D2 0
GOTOCMP 26842 ==; Test 'if'
SETR D2 GD4; unless() #277 Test AND if() #124 Body Start
COMPAREV D2 0
GOTOCMP 26834 ==
SETR D2 GD4
COMPAREV D2 1
GOTOCMP 26834 ==
SETV D2 0
GOTO 26835
SETV D2 1
COMPAREV D2 0
GOTOCMP 26850 !=; Test 'unless'
PUSHVARGV 0; InlineFunc[Direction Choose(Direction)] Params Start AND unless() #277 Body Start
PUSHVARGV 1; InlineFunc[Direction Choose(Direction)] Params End
CHOOSEVARG; InlineFunc[Direction Choose(Direction)] Body
SETR GD4 D2; unless() #277 Body End
GOTO 26850; if() #124 Body End
LOAD D2 0.0001; if() #125 Test AND if() #124 Else Start
COMPAREV D2 0
GOTOCMP 26848 ==; Test 'if'
SETV D2 0; if() #125 Body Start
SETR GD4 D2
GOTO 26850; if() #125 Body End
SETV D2 1; if() #125 Else Start
SETR GD4 D2; if() #125 Else End
LOAD D2 0.0010; if() #124 Else End AND InlineFunc[int Floor(int)] Params Start
DIVV2 8 D2
SETV D2 8
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004
GOTO 26871; if() #123 Body End
LOAD D2 0.0010; InlineFunc[int Floor(int)] Params Start AND if() #123 Else Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004; if() #123 Else End
LOAD D2 0.0004; if() #120 Else End AND if() #275 Body End AND if() #278 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26923 ==; Test 'if'
PUSHR D4; if() #278 Body Start
CALLFUNC 2.4790; UsrFunc[void __Ghost_FixCoords()] Call
POP D4
LOAD D2 0.0010; InlineFunc[int Floor(int)] Params Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
STORE D2 0.0004
LOAD D2 0.0011; if() #279 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 26923 ==; Test 'if'
PUSHR D4; if() #279 Body Start
LOAD D2 0.0009; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void __Ghost_NewDir4(int, int, int)] Params End
CALLFUNC 2.4846; UsrFunc[void __Ghost_NewDir4(int, int, int)] Call
POP D4
SETV D3 16; InlineFunc[int Rand(int)] Params AND if() #280 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 26923 ==; Test 'if'
LOAD D2 0.0002; unless() #281 Test AND if() #280 Body Start
COMPAREV D2 0
GOTOCMP 26919 !=; Test 'unless'
PUSHR D4; unless() #281 Body Start
PUSHV 32768; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; unless() #281 Body End
LOAD D2 0.0005
STORE D2 0.0003
LOAD D2 0.0003; return Start
GOTO 27015; return End AND if() #280 Body End
SETR D2 GD1; if() #279 Body End AND if() #278 Body End AND InlineFunc[int Abs(int)] Params Start AND if() #126 Test
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 26949 >=
SETR D2 GD2; InlineFunc[int Abs(int)] Params Start
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
COMPAREV D2 16
GOTOCMP 26949 >=
SETV D2 1
GOTO 26950
SETV D2 0
COMPAREV D2 0
GOTOCMP 26986 ==; Test 'if'
SETR D2 LINKACTION; if() #282 Test AND if() #126 Body Start
COMPAREV D2 7
GOTOCMP 26961 !=
SETR D2 GD17
ANDV D2 32
COMPAREV D2 0
GOTOCMP 26961 !=
SETV D2 1
GOTO 26962
SETV D2 0
COMPAREV D2 0
GOTOCMP 26989 ==; Test 'if'
SETR D2 GD4; if() #282 Body Start
XORV D2 1
SETR GD4 D2
LOAD D2 0.0010; InlineFunc[int Floor(int)] Params Start
DIVV2 16 D2
SETV D2 16
PUSHR D2
LOAD D2 0.0010
POP D3
DIVR D3 D2
SETR D2 D3; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
SETR D2 GD17
ORV D2 32
SETR GD17 D2; if() #282 Body End
GOTO 26989; if() #126 Body End
SETR D2 GD17; if() #126 Else Start
ANDV D2 -33
SETR GD17 D2; if() #126 Else End
LOAD D2 0.0004
SUBV D2 1
STORE D2 0.0004
PUSHR D4
PUSHR GD4; UsrFunc[void Ghost_Move(int, int, int)] Params Start
LOAD D2 0.0010
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.7017; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
LOAD D2 0.0002; unless() #283 Test
COMPAREV D2 0
GOTOCMP 27006 !=; Test 'unless'
PUSHR D4; unless() #283 Body Start
PUSHV 32768; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; unless() #283 Body End
LOAD D2 0.0004; if() #127 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27014 ==; Test 'if'
LOAD D2 0.0004; return Start AND if() #127 Body Start
DIVV D2 10000
GOTO 27015; return End AND if() #127 Body End
SETV D2 -1; return Start AND if() #127 Else Start
POPARGS D5 0.0012; return End AND if() #127 Else End
RETURNFUNC; Func[int Ghost_HaltingWalk4(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void Ghost_Move(int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0004; if() #130 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27030 ==; Test 'if'
LOAD D2 0.0003; if() #130 Body Start
SUBV2 0 D2
STORE D2 0
GOTO 27108; if() #130 Body End
LOAD D2 0.0004; if() #131 Test AND if() #130 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27038 ==; Test 'if'
LOAD D2 0.0003; if() #131 Body Start
STORE D2 0
GOTO 27108; if() #131 Body End
LOAD D2 0.0004; if() #132 Test AND if() #131 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27047 ==; Test 'if'
LOAD D2 0.0003; if() #132 Body Start
SUBV2 0 D2
STORE D2 0.0001
GOTO 27108; if() #132 Body End
LOAD D2 0.0004; if() #133 Test AND if() #132 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27055 ==; Test 'if'
LOAD D2 0.0003; if() #133 Body Start
STORE D2 0.0001
GOTO 27108; if() #133 Body End
LOAD D2 0.0004; if() #134 Test AND if() #133 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27069 ==; Test 'if'
LOAD D2 0.0003; if() #134 Body Start
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0
GOTO 27108; if() #134 Body End
LOAD D2 0.0004; if() #135 Test AND if() #134 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27082 ==; Test 'if'
LOAD D2 0.0003; if() #135 Body Start
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0
GOTO 27108; if() #135 Body End
LOAD D2 0.0004; if() #136 Test AND if() #135 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27095 ==; Test 'if'
LOAD D2 0.0003; if() #136 Body Start
SUBV2 0 D2
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
MULTV D2 0.7071
STORE D2 0
GOTO 27108; if() #136 Body End
LOAD D2 0.0004; if() #137 Test AND if() #136 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27117 ==; Test 'if'
LOAD D2 0.0003; if() #137 Body Start
MULTV D2 0.7071
STORE D2 0.0001
LOAD D2 0.0003
MULTV D2 0.7071
STORE D2 0
GOTO 27108; if() #137 Body End
GOTO 27117; return (Void) AND if() #137 Else
PUSHR D4; if() #136 Else End AND if() #135 Else End AND if() #134 Else End AND if() #133 Else End AND if() #132 Else End AND if() #131 Else End AND if() #130 Else End
LOAD D2 0.0001; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
POPARGS D5 0.0005
RETURNFUNC; Func[void Ghost_Move(int, int, int)] Body End
SETR D4 SP2; Func[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Body Start
LOAD D2 0.0001; if() #602 Test
COMPAREV D2 -1
GOTOCMP 27128 ==
LOAD D2 0.0001
COMPAREV D2 -2
GOTOCMP 27128 ==
SETV D2 0
GOTO 27129
SETV D2 1
COMPAREV D2 0
GOTOCMP 27133 ==; Test 'if'
SETV D2 1; if() #602 Body Start
STORE D2 0.0001; if() #602 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0001
SETR GD10 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
LOAD D2 0
SETR GD11 D2
LOAD D2 0.0002; if() #316 Test
COMPAREV D2 0
GOTOCMP 27179 ==; Test 'if'
LOAD D2 0.0003; if() #316 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
SETR GD1 D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SETR GD2 D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SETR GD3 D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_JUMP
SETR GD5 D2
GOTO 27211; if() #316 Body End
LOAD D2 0.0004; if() #316 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
SETR GD1 D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
SETR GD2 D2
SETV D2 0
SETR GD3 D2
SETV D2 0
SETR GD5 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2; if() #316 Else End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3811; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
SETR GD4 D2
SETV D2 0
SETR GD6 D2
SETV D2 0
SETR GD7 D2
SETV D2 0
SETR GD8 D2
SETV D2 0
SETR GD9 D2
SETR D2 GD1
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
SETR GD12 D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
SETR GD13 D2
SETV D2 0
SETR GD22 D2
SETV D2 0
SETR GD23 D2
LOAD D2 0.0001; if() #603 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27329 ==; Test 'if'
SETV D2 3; if(true) #317 [Opt:AlwaysOn] AND if() #603 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
SETV D2 65456
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCOTILE D2
SETV D2 65456; if(true) #604 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2; if() #603 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003; if() #318 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27360 ==; Test 'if'
SETV D2 1; if() #318 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
GOTO 27372; if() #318 Body End
SETV D2 0; if() #318 Else Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #318 Else End
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
SETV D2 0
SETR GD15 D2
SETV D2 0
SETR GD16 D2
SETV D2 0
SETR GD20 D2
SETV D2 0
SETR GD21 D2
SETV D2 0
SETR GD17 D2
SETV D2 0
PUSHR D2
SETR D2 GD25
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 65536
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Body End
PUSHARGSV 0 0.0008; Func[npc Ghost_InitAutoGhost(ffc, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
SETR D2 NPCCOUNT; for() #50 setup
STORE D2 0.0005
LOAD D2 0.0005; for() #50 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27508 ==; for() #50 TestFail?
LOAD D2 0.0005; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #50 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0007
LOAD D2 0.0007; if() #128 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27438 ==; Test 'if'
SETV D2 0; if() #128 Body Start
STORE D2 0.0006
GOTO 27504; continue 1;
GOTO 27440; if() #128 Body End
SETV D2 1; if() #128 Else Start
STORE D2 0.0006; if() #128 Else End
LOAD D2 0.0007; if() #284 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27455 ==; Test 'if'
SETV D2 0; if() #284 Body Start
STORE D2 0.0006
GOTO 27504; continue 1; AND if() #284 Body End
LOAD D2 0.0006; if() #129 Test
COMPAREV D2 0
GOTOCMP 27508 ==; Test 'if'
PUSHR D4; if() #129 Body Start
LOAD D2 0.0009; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
PUSHV 1
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Params End
CALLFUNC 2.7119; UsrFunc[void __Ghost_InitInternal(ffc, npc, bool, int, int)] Call
POP D4
LOAD D2 0.0007; if() #285 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 27500 ==; Test 'if'
SETV D2 1; if() #285 Body Start
PUSHR D2
LOAD D2 0.0009
POP D3
PUSHR D2
PUSHR D3
SETV D2 1
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #285 Body End
LOAD D2 0.0007; return Start
GOTO 27553; return End
GOTO 27504; if() #129 Body End
GOTO 27508; break 1; AND if() #129 Else
LOAD D2 0.0005; for() #50 Body End AND for() #50 LoopIncrement
SUBV D2 1
STORE D2 0.0005
GOTO 27413; for() #50 End
ALLOCATEMEMV D2 60 0
WRITEPODSTRING D2 "ghost.zh: AutoGhost initialization failed - enemy missing.\n"
STORE D2 0.0004
ALLOCATEMEMV D2 30 0
WRITEPODSTRING D2 "  DMap %d, screen %X\n"
STORE D2 0.0002
ALLOCATEMEMV D2 30 0
WRITEPODSTRING D2 "  Script %d, enemy ID %d\n"
STORE D2 0
LOAD D2 0.0004; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGR CURDMAP
PUSHVARGR CURDSCR; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP REFFFC
PUSHVARGR FFSCRIPT
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0009
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
QUIT; InlineFunc[void Quit()] Body
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0004
DEALLOCATEMEMR D3
POPARGS D5 0.0010
RETURNFUNC; Func[npc Ghost_InitAutoGhost(ffc, int)] Body End
SETR D4 SP2; Func[void Ghost_MoveAtAngle(int, int, int)] Body Start
PUSHARGSR D4 0.0002; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
LOAD D2 0.0001; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
POPARGS D5 0.0003
RETURNFUNC; Func[void Ghost_MoveAtAngle(int, int, int)] Body End
SETR D4 SP2; Func[int VectorX(int, int)] Body Start
LOAD D2 0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR D4 SP2; Func[int VectorY(int, int)] Body Start
LOAD D2 0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
SETR D4 SP2; Func[bool IsSideview()] Body Start
SETV D2 0; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
PUSHR D2
SETR D2 CURDMAP; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATASIDEVIEW
POP D3
COMPARER D3 D2
SETCMP D2 BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR D4 SP2; Func[void Ghost_SetHitOffsets(npc, int, int, int, int)] Body Start
SETR D2 GD13
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
LOAD D2 0.0003; if() #296 Test
COMPAREV D2 0
GOTOCMP 27642 <=
LOAD D2 0.0003
COMPAREV D2 1
GOTOCMP 27642 >=
SETV D2 1
GOTO 27643
SETV D2 0
COMPAREV D2 0
GOTOCMP 27656 ==; Test 'if'
PUSHR D4; if() #296 Body Start
LOAD D2 0.0003; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7836; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0.0003; if() #296 Body End
LOAD D2 0.0002; if() #297 Test
COMPAREV D2 0
GOTOCMP 27664 <=
LOAD D2 0.0002
COMPAREV D2 1
GOTOCMP 27664 >=
SETV D2 1
GOTO 27665
SETV D2 0
COMPAREV D2 0
GOTOCMP 27678 ==; Test 'if'
PUSHR D4; if() #297 Body Start
LOAD D2 0.0002; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7836; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0.0002; if() #297 Body End
LOAD D2 0.0001; if() #298 Test
COMPAREV D2 0
GOTOCMP 27686 <=
LOAD D2 0.0001
COMPAREV D2 1
GOTOCMP 27686 >=
SETV D2 1
GOTO 27687
SETV D2 0
COMPAREV D2 0
GOTOCMP 27700 ==; Test 'if'
PUSHR D4; if() #298 Body Start
LOAD D2 0.0001; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7836; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0.0001; if() #298 Body End
LOAD D2 0; if() #299 Test
COMPAREV D2 0
GOTOCMP 27708 <=
LOAD D2 0
COMPAREV D2 1
GOTOCMP 27708 >=
SETV D2 1
GOTO 27709
SETV D2 0
COMPAREV D2 0
GOTOCMP 27722 ==; Test 'if'
PUSHR D4; if() #299 Body Start
LOAD D2 0; UsrFunc[int Round(int)] Params Start
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
MULTV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7836; UsrFunc[int Round(int)] Call
POP D4
STORE D2 0; if() #299 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0003
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
LOAD D2 0; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 0
PUSHV 64; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_X D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
LOAD D2 0.0001
LSHIFTV D2 8
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD22 D2
LOAD D2 0.0003
LSHIFTV D2 8
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SETR GD23 D2
POPARGS D5 0.0005
RETURNFUNC; Func[void Ghost_SetHitOffsets(npc, int, int, int, int)] Body End
SETR D4 SP2; Func[int Round(int)] Body Start
LOAD D2 0; return Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 27846 ==
LOAD D2 0
SUBV D2 0.5000
LSHIFTV D2 0
GOTO 27849
LOAD D2 0
ADDV D2 0.5000
LSHIFTV D2 0
POP D5; return End
RETURNFUNC; Func[int Round(int)] Body End
PUSHV 0; Func[void Ghost_Transform(ffc, npc, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0004; if() #313 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 27870 ==; Test 'if'
LOAD D2 0.0004; if() #313 Body Start
SETR GD10 D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #313 Body End
LOAD D2 0.0003; if() #314 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 27895 ==; Test 'if'
LOAD D2 0.0003; if() #314 Body Start
SETR GD11 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2; if() #314 Body End
LOAD D2 0.0002; if() #315 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 27962 ==; Test 'if'
SETR D2 GD12; if() #315 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0002
SETR GD12 D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD12
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD1
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD1 D2
SETR D2 GD1
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD1
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2; if() #315 Body End
LOAD D2 0.0001; if() #316 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 28029 ==; Test 'if'
SETR D2 GD13; if() #316 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0001
SETR GD13 D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD13
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD2
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR GD2 D2
SETR D2 GD2
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #316 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params Start
PUSHR D2
PUSHARGSV 0 0.0004; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Params End
CALLFUNC 2.7615; UsrFunc[void Ghost_SetHitOffsets(npc, int, int, int, int)] Call
POP D4
POPARGS D5 0.0007
RETURNFUNC; Func[void Ghost_Transform(ffc, npc, int, int, int, int)] Body End
SETR D4 SP2; Func[void Ghost_Waitframe(ffc, npc)] Body Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 2.8048; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void Ghost_Waitframe(ffc, npc)] Body End
PUSHV 0; Func[bool Ghost_Waitframe(ffc, npc, bool, bool)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
PUSHR D4; unless() #322 Test
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28205 !=; Test 'unless'
PUSHR D4; if() #158 Test AND unless() #322 Body Start
CALLFUNC 2.7598; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 28168 ==; Test 'if'
SETR D2 GD5; if() #323 Test AND if() #158 Body Start
COMPAREV D2 0
GOTOCMP 28082 !=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28082 !=
SETV D2 0
GOTO 28083
SETV D2 1
COMPAREV D2 0
GOTOCMP 28205 ==; Test 'if'
PUSHR D4; if() #323 Body Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
STORE D2 0
PUSHR D4
PUSHV 64; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
SETR D2 GD5; if() #159 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 28137 ==; Test 'if'
PUSHR D4; if() #159 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR GD5
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.7017; UsrFunc[void Ghost_Move(int, int, int)] Call
POP D4
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2
SETR D2 GD5; if() #324 Test
COMPAREV D2 0
GOTOCMP 28127 <=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28127 !=
SETV D2 1
GOTO 28128
SETV D2 0
COMPAREV D2 0
GOTOCMP 28132 ==; Test 'if'
SETV D2 0; if() #324 Body Start
SETR GD5 D2; if() #324 Body End
PUSHR D4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
GOTO 28160; if() #159 Body End
PUSHR D4; if() #159 Else Start
PUSHV 1; UsrFunc[void Ghost_Move(int, int, int)] Params Start
SETR D2 GD5
SUBV2 0 D2
PUSHR D2
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 2.7017; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28158 ==; Test 'if'
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start AND if() #160 Body Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2
GOTO 28160; if() #160 Body End
SETV D2 0; if() #160 Else Start
SETR GD5 D2; if() #160 Else End
LOAD D2 0; if() #159 Else End AND if() #325 Test
COMPAREV D2 0
GOTOCMP 28205 ==; Test 'if'
PUSHR D4; if() #325 Body Start
PUSHV 64; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #325 Body End
GOTO 28205; if() #323 Body End AND if() #158 Body End
SETR D2 GD5; if() #326 Test AND if() #158 Else Start
COMPAREV D2 0
GOTOCMP 28176 !=
SETR D2 GD3
COMPAREV D2 0
GOTOCMP 28176 >
SETV D2 0
GOTO 28177
SETV D2 1
COMPAREV D2 0
GOTOCMP 28205 ==; Test 'if'
SETR D2 GD3; if() #161 Test AND if() #326 Body Start
PUSHR D2
SETR D2 GD5
POP D3
ADDR D2 D3
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 28193 ==; Test 'if'
SETV D2 0; if() #161 Body Start
SETR GD3 D2
SETV D2 0
SETR GD5 D2
GOTO 28205; if() #161 Body End
SETR D2 GD3; if() #161 Else Start
PUSHR D2
SETR D2 GD5
POP D3
ADDR D2 D3
SETR GD3 D2
SETR D2 GD5; InlineFunc[int Max(int, int)] Params Start
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SETR GD5 D2; if() #161 Else End
SETR D2 GD6; if() #326 Body End AND if() #158 Else End AND unless() #322 Body End AND if() #327 Test
COMPAREV D2 0
GOTOCMP 28219 !=
SETR D2 GD7
COMPAREV D2 0
GOTOCMP 28219 !=
SETR D2 GD8
COMPAREV D2 0
GOTOCMP 28219 !=
SETR D2 GD9
COMPAREV D2 0
GOTOCMP 28219 !=
SETV D2 0
GOTO 28220
SETV D2 1
COMPAREV D2 0
GOTOCMP 28243 ==; Test 'if'
SETR D2 GD6; if() #327 Body Start
PUSHR D2
SETR D2 GD8
POP D3
ADDR D2 D3
SETR GD6 D2
SETR D2 GD7
PUSHR D2
SETR D2 GD9
POP D3
ADDR D2 D3
SETR GD7 D2
PUSHR D4
PUSHR GD6; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR GD7
PUSHV 2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
PEEK D4
PUSHR GD4; UsrFunc[void Ghost_ForceDir(int)] Params
CALLFUNC 2.6669; UsrFunc[void Ghost_ForceDir(int)] Call
POP D4; if() #327 Body End
PUSHR D4
LOAD D2 0.0004; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_SetPosition(ffc, npc)] Params End
CALLFUNC 2.3811; UsrFunc[void Ghost_SetPosition(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 0; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Params End
CALLFUNC 2.8314; UsrFunc[void __Ghost_WaitframePart1(ffc, npc, bool)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Params End
CALLFUNC 2.3161; UsrFunc[void __Ghost_UpdateFlashing(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Params End
CALLFUNC 2.3411; UsrFunc[void Ghost_WaitframeLight(ffc, npc)] Call
POP D4
SETR D2 GD17
ANDV D2 32
SETR GD17 D2
PUSHR D4; return Start
LOAD D2 0.0004; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Params End
CALLFUNC 2.8818; UsrFunc[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Call
POP D4
POPARGS D5 0.0005; return End
RETURNFUNC; Func[bool Ghost_Waitframe(ffc, npc, bool, bool)] Body End
SETR D4 SP2; Func[bool Ghost_Waitframe(ffc, npc, int, bool)] Body Start
PUSHR D4; unless() #320 Test
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 0 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 2.8048; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28311 !=; Test 'unless'
PUSHR D4; unless() #320 Body Start
LOAD D2 0.0003; UsrFunc[void Ghost_DeathAnimation(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void Ghost_DeathAnimation(ffc, npc, int)] Params End
CALLFUNC 2.5975; UsrFunc[void Ghost_DeathAnimation(ffc, npc, int)] Call
POP D4
LOAD D2 0; if() #321 Test
COMPAREV D2 0
GOTOCMP 28309 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #321 Body
SETV D2 0; return Start
GOTO 28312; return End AND unless() #320 Body End
SETV D2 1; return Start
POPARGS D5 0.0004; return End
RETURNFUNC; Func[bool Ghost_Waitframe(ffc, npc, int, bool)] Body End
PUSHARGSV 0 0.0002; Func[void __Ghost_WaitframePart1(ffc, npc, bool)] Body Start
SETR D4 SP2
SETR D2 GD17; if() #340 Test
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28332 ==; Test 'if'
SETR D2 GD4; if() #340 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
GOTO 28429; if() #340 Body End
LOAD D2 0.0002; if() #341 Test AND if() #340 Else Start
COMPAREV D2 0
GOTOCMP 28341 ==; Test 'if'
LOAD D2 0.0003; if() #341 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
SETR GD4 D2
GOTO 28429; if() #341 Body End
PUSHR D4; if() #639 Test AND if() #341 Else Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28361 ==
SETR D2 GD18
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
GOTOCMP 28359 !=
SETR D2 GD19
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
GOTOCMP 28361 ==
SETV D2 1
GOTO 28362
SETV D2 0
COMPAREV D2 0
GOTOCMP 28429 ==; Test 'if'
SETR D2 GD1; if() #639 Body Start
PUSHR D2
SETR D2 GD18
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
SETR D2 GD2
PUSHR D2
SETR D2 GD19
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHR D4; if() #342 Test
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28398 ==; Test 'if'
PUSHR D4; if() #342 Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2
LOAD D2 0
SETR D1 D2; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS D2; InlineFunc[int WrapAngle(int)] Body
MULTV D2 57.2958
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0552; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 28429; if() #342 Body End
LOAD D2 0.0001; InlineFunc[int Abs(int)] Params AND if() #343 Test AND if() #342 Else Start
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0; InlineFunc[int Abs(int)] Params
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 28419 ==; Test 'if'
LOAD D2 0.0001; if() #344 Test AND if() #343 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 28416 ==; Test 'if'
SETV D2 2; if() #344 Body Start
SETR GD4 D2
GOTO 28429; if() #344 Body End
SETV D2 3; if() #344 Else Start
SETR GD4 D2; if() #344 Else End
GOTO 28429; if() #343 Body End
LOAD D2 0; if() #345 Test AND if() #343 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 28427 ==; Test 'if'
SETV D2 0; if() #345 Body Start
SETR GD4 D2
GOTO 28429; if() #345 Body End
SETV D2 1; if() #345 Else Start
SETR GD4 D2; if() #345 Else End
SETR D2 GD4; if() #343 Else End AND if() #342 Else End AND if() #639 Body End AND if() #341 Else End AND if() #340 Else End
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
SETR D2 GD1
SETR GD18 D2
SETR D2 GD2
SETR GD19 D2
SETR D2 GD10; if() #346 Test
COMPAREV D2 0
GOTOCMP 28450 ==
SETR D2 GD10
COMPAREV D2 1
GOTOCMP 28450 ==
SETV D2 0
GOTO 28451
SETV D2 1
COMPAREV D2 0
GOTOCMP 28474 ==; Test 'if'
LOAD D2 0.0004; if() #640 Test AND if() #346 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28570 ==; Test 'if'
SETR D2 GD10; if() #640 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #640 Body End
GOTO 28570; if() #346 Body End
PUSHR D4; if() #347 Test AND if() #346 Else Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28512 ==; Test 'if'
LOAD D2 0.0004; if() #641 Test AND if() #347 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28570 ==; Test 'if'
SETR D2 GD10; if() #641 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.1686; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #641 Body End
GOTO 28570; if() #347 Body End
PUSHR D4; if() #348 Test AND if() #347 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28550 ==; Test 'if'
LOAD D2 0.0004; if() #642 Test AND if() #348 Body Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28570 ==; Test 'if'
SETR D2 GD10; if() #642 Body Start
PUSHR D2
PUSHR D4
PUSHR GD4; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 2.1686; UsrFunc[int __NormalizeDir(int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #642 Body End
GOTO 28570; if() #348 Body End
LOAD D2 0.0004; if() #643 Test AND if() #348 Else Start
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
SETR D2 GD10
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28570 ==; Test 'if'
SETR D2 GD10; if() #643 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #643 Body End
LOAD D2 0.0004; if() #348 Else End AND if() #347 Else End AND if() #346 Else End AND if() #644 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
SETR D2 GD12
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28590 ==; Test 'if'
SETR D2 GD12; if() #644 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2; if() #644 Body End
LOAD D2 0.0003; if() #645 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
SETR D2 GD12
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28634 ==; Test 'if'
SETR D2 GD12; if() #645 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETR D2 GD12
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD12
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_X D2; if() #645 Body End
LOAD D2 0.0004; if() #646 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
SETR D2 GD13
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28654 ==; Test 'if'
SETR D2 GD13; if() #646 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2; if() #646 Body End
LOAD D2 0.0003; if() #647 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
SETR D2 GD13
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28698 ==; Test 'if'
SETR D2 GD13; if() #647 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD13
MULTV D2 16
SETV D2 16
PUSHR D2
SETR D2 GD13
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2; if() #647 Body End
PUSHR D4; if() #648 Test
PUSHV 128; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 28763 ==; Test 'if'
SETR D2 GD3; if() #349 Test AND if() #648 Body Start
COMPAREV D2 32
GOTOCMP 28718 <
LOAD D2 0.0004
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28718 !=
SETV D2 1
GOTO 28719
SETV D2 0
COMPAREV D2 0
GOTOCMP 28734 ==; Test 'if'
SETV D2 1; if() #349 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
GOTO 28763; if() #349 Body End
SETR D2 GD3; if() #649 Test AND if() #349 Else Start
COMPAREV D2 32
GOTOCMP 28748 >=
LOAD D2 0.0004
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28748 ==
SETV D2 1
GOTO 28749
SETV D2 0
COMPAREV D2 0
GOTOCMP 28763 ==; Test 'if'
SETV D2 0; if() #649 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2; if() #649 Body End
SETR D2 GD14; if() #349 Else End AND if() #648 Body End
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETR D2 GD11
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETR D2 GD17; if() #350 Test
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 28797 ==; Test 'if'
SETR D2 GD11; if() #350 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
GOTO 28811; if() #350 Body End
SETR D2 GD20; if() #650 Test AND if() #350 Else Start
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 28811 ==; Test 'if'
SETR D2 GD11; if() #650 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2; if() #650 Body End
PUSHR D4; if() #350 Else End
LOAD D2 0.0003; UsrFunc[void __Ghost_DrawShadow(npc)] Params Start
PUSHR D2; UsrFunc[void __Ghost_DrawShadow(npc)] Params End
CALLFUNC 2.3246; UsrFunc[void __Ghost_DrawShadow(npc)] Call
POP D4
POPARGS D5 0.0005
RETURNFUNC; Func[void __Ghost_WaitframePart1(ffc, npc, bool)] Body End
PUSHV 0; Func[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Body Start
SETR D4 SP2
LOAD D2 0.0003; InlineFunc[bool npc::isValid()] Params AND unless() #651 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 28845 !=; Test 'unless'
LOAD D2 0.0002; if() #652 Test AND unless() #651 Body Start
COMPAREV D2 0
GOTOCMP 28837 ==; Test 'if'
PUSHR D4; if() #652 Body Start
LOAD D2 0.0004; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.6535; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2
PUSHR D4
CALLFUNC 2.4355; UsrFunc[void Ghost_ClearCombos()] Call
POP D4; if() #652 Body End
LOAD D2 0.0001; if() #653 Test
COMPAREV D2 0
GOTOCMP 28841 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #653 Body
SETV D2 0
SETR GD14 D2
SETV D2 0; return Start
GOTO 28969; return End AND unless() #651 Body End
STOREV 0 0
LOAD D2 0.0003; if() #654 Test
PUSHR D2
POP REFNPC
SETR D2 NPCHP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 28856 ==; Test 'if'
SETV D2 1; if() #654 Body Start
STORE D2 0; if() #654 Body End
LOAD D2 0; unless() #655 Test
COMPAREV D2 0
GOTOCMP 28875 !=; Test 'unless'
PUSHR D4; unless() #655 Body Start
LOAD D2 0.0004; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void Ghost_CheckHit(ffc, npc)] Params End
CALLFUNC 2.3945; UsrFunc[void Ghost_CheckHit(ffc, npc)] Call
PEEK D4
LOAD D2 0.0004; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Params End
CALLFUNC 2.2902; UsrFunc[bool Ghost_CheckFreeze(ffc, npc)] Call
POP D4
COMPAREV D2 0
SETCMP D2 I==
STORE D2 0; unless() #655 Body End
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2
LOAD D2 0; if() #656 Test
COMPAREV D2 0
GOTOCMP 28968 ==; Test 'if'
LOAD D2 0.0002; if() #657 Test AND if() #656 Body Start
COMPAREV D2 0
GOTOCMP 28962 ==; Test 'if'
SETV D2 1; if() #657 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETR D2 GD1
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD12
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 GD2
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
SETV D2 8
PUSHR D2
SETR D2 GD13
SUBV D2 1
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.6535; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2; if() #657 Body End
LOAD D2 0.0001; if() #658 Test
COMPAREV D2 0
GOTOCMP 28966 ==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #658 Body
SETV D2 0; return Start
GOTO 28969; return End AND if() #656 Body End
SETV D2 1; return Start
POPARGS D5 0.0005; return End
RETURNFUNC; Func[bool __Ghost_WaitframePart2(ffc, npc, bool, bool)] Body End
PUSHARGSV 0 0.0006; Func[void __SetUpDrawingArray(ffc, npc, int[])] Body Start
SETR D4 SP2
STOREV 0 0.0005
LOAD D2 0.0008; if() #678 Test
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28986 ==; Test 'if'
LOAD D2 0.0005; if() #678 Body Start
ORV D2 4
STORE D2 0.0005; if() #678 Body End
LOAD D2 0.0008; if() #679 Test
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 28998 ==; Test 'if'
LOAD D2 0.0005; if() #679 Body Start
ORV D2 1
STORE D2 0.0005; if() #679 Body End
PUSHR D4; if() #680 Test
LOAD D2 0.0007; UsrFunc[bool __Ghost_IsFlickering(npc)] Params Start
PUSHR D2; UsrFunc[bool __Ghost_IsFlickering(npc)] Params End
CALLFUNC 3.0313; UsrFunc[bool __Ghost_IsFlickering(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 29008 ==; Test 'if'
LOAD D2 0.0005; if() #680 Body Start
ORV D2 2
STORE D2 0.0005; if() #680 Body End
LOAD D2 0.0008
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
STOREV 3 0.0004
SETR D2 GD1
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0003
SETR D2 GD2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
SETR D2 GD3
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
ADDR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0002
SETR D2 GD25; if() #681 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 29176 ==; Test 'if'
STOREV 1 0.0001; if() #681 Body Start
STOREV 0 0; for() #176 setup
LOAD D2 0; for() #176 LoopTest
PUSHR D2
SETR D2 GD25
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 29176 ==; for() #176 TestFail?
SETR D2 GD25; for() #176 Body Start
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 1
POP D0
READPODARRAYR D2 D2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 2
POP D0
READPODARRAYR D2 D2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETR D2 GD25
PUSHR D2
LOAD D2 0.0001
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 4
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 6
STORE D2 0.0004
LOAD D2 0.0001
ADDV D2 6
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; for() #176 Body End
LOAD D2 0; for() #176 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 29064; for() #176 End
LOAD D2 0.0008; if() #681 Body End AND if(true) #682 [Opt:AlwaysOn]
PUSHR D2
POP REFFFC
SETR D2 DATA
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0008
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0008
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
ADDV D2 4
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0006
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0.0006
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
POPARGS D5 0.0009
RETURNFUNC; Func[void __SetUpDrawingArray(ffc, npc, int[])] Body End
PUSHV 0; Func[void __HideFFCAndWait(ffc)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
STORE D2 0
SETV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
WAITFRAME; InlineFunc[void Waitframe()] Body
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __HideFFCAndWait(ffc)] Body End
SETR D4 SP2; Func[int InFrontX(int, int)] Body Start
PUSHR D4; switch() #21 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 2.0373; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 2
GOTOCMP 29286 ==; case '20000'
COMPAREV SWITCHKEY 3
GOTOCMP 29289 ==; case '30000'
GOTO 29292; switch() #21 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 29293; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 29293; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontX(int, int)] Body End
SETR D4 SP2; Func[int InFrontY(int, int)] Body Start
PUSHR D4; switch() #22 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 2.0373; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 0
GOTOCMP 29307 ==; case '0'
COMPAREV SWITCHKEY 1
GOTOCMP 29310 ==; case '10000'
GOTO 29313; switch() #22 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 29314; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 29314; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontY(int, int)] Body End
PUSHV 0; Func[bool IsPit(int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #343 Test
COMPAREV D2 41
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29330 ==; Test 'if'
SETV D2 1; return Start AND if() #343 Body Start
GOTO 29351; return End AND if() #343 Body End
LOAD D2 0; if() #344 Test
COMPAREV D2 93
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29337 ==; Test 'if'
SETV D2 1; return Start AND if() #344 Body Start
GOTO 29351; return End AND if() #344 Body End
LOAD D2 0; if() #345 Test
COMPAREV D2 80
GOTOCMP 29345 <
LOAD D2 0
COMPAREV D2 82
GOTOCMP 29345 >
SETV D2 1
GOTO 29346
SETV D2 0
COMPAREV D2 0
GOTOCMP 29350 ==; Test 'if'
SETV D2 1; return Start AND if() #345 Body Start
GOTO 29351; return End AND if() #345 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool IsPit(int)] Body End
PUSHARGSV 0 0.0002; Func[lweapon LoadLWeaponOf(int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
SETR D2 LWPNCOUNT; for() #78 setup
STORE D2 0
LOAD D2 0; for() #78 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 29385 ==; for() #78 TestFail?
LOAD D2 0; InlineFunc[lweapon screendata::LoadLWeapon(int)] Params AND for() #78 Body Start
SUBV D2 1; InlineFunc[lweapon screendata::LoadLWeapon(int)] Body Start
LOADLWEAPONR D2
SETR D2 REFLWPN; InlineFunc[lweapon screendata::LoadLWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #385 Test
PUSHR D2
POP REFLWPN
SETR D2 LWPNID
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29381 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #385 Body Start
GOTO 29387; return End AND if() #385 Body End
LOAD D2 0; for() #78 Body End AND for() #78 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 29358; for() #78 End
STOREV 0 0
LOAD D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[lweapon LoadLWeaponOf(int)] Body End
SETR D4 SP2; Func[int OppositeDir(int)] Body Start
LOAD D2 0; if() #438 Test
COMPAREV D2 7
GOTOCMP 29398 <=
LOAD D2 0
COMPAREV D2 16
GOTOCMP 29398 >=
SETV D2 1
GOTO 29399
SETV D2 0
COMPAREV D2 0
GOTOCMP 29406 ==; Test 'if'
LOAD D2 0; return Start AND if() #438 Body Start
ADDV D2 4
MODV D2 8
ADDV D2 8
GOTO 29416; return End AND if() #438 Body End
LOAD D2 0; return Start
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 29414 ==
LOAD D2 0
XORV D2 1
GOTO 29416
LOAD D2 0
XORV D2 3
POP D5; return End
RETURNFUNC; Func[int OppositeDir(int)] Body End
PUSHARGSV 0 0.0003; Func[int RunFFCScript(int, untyped[])] Body Start
SETR D4 SP2
LOAD D2 0.0004; if() #454 Test
COMPAREV D2 0
GOTOCMP 29428 <
LOAD D2 0.0004
COMPAREV D2 511
GOTOCMP 29428 >
SETV D2 0
GOTO 29429
SETV D2 1
COMPAREV D2 0
GOTOCMP 29433 ==; Test 'if'
SETV D2 0; return Start AND if() #454 Body Start
GOTO 29540; return End AND if() #454 Body End
STOREV 0 0.0002
STOREV 1 0.0001; for() #121 setup
LOAD D2 0.0001; for() #121 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29539 ==; for() #121 TestFail?
LOAD D2 0.0001; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #121 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0002
LOAD D2 0.0002; if() #455 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 29475 !=
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 29464 ==
LOAD D2 0.0002
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 29475 !=
LOAD D2 0.0002
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 29475 !=
SETV D2 0
GOTO 29476
SETV D2 1
COMPAREV D2 0
GOTOCMP 29535 !=; Test 'if' AND continue 1; AND if() #455 Body
SETV D2 1
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0003; if() #456 Test
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29533 ==; Test 'if'
LOAD D2 0.0003; InlineFunc[int SizeOfArray(untyped[])] Params AND InlineFunc[int Min(int, int)] Params Start AND for() #122 setup AND if() #456 Body Start
ARRAYSIZE D2; InlineFunc[int SizeOfArray(untyped[])] Body
PUSHVARGR D2
PUSHVARGV 8; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
SUBV D2 1
STORE D2 0
LOAD D2 0; for() #122 LoopTest
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 29533 ==; for() #122 TestFail?
LOAD D2 0.0003; for() #122 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2; for() #122 Body End
LOAD D2 0; for() #122 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 29508; for() #122 End
LOAD D2 0.0001; if() #456 Body End AND return Start
GOTO 29540; return End AND for() #121 Body End
LOAD D2 0.0001; for() #121 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 29435; for() #121 End
SETV D2 0; return Start
POPARGS D5 0.0005; return End
RETURNFUNC; Func[int RunFFCScript(int, untyped[])] Body End
PUSHARGSV 0 0.0002; Func[int ScreenFlag(int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 10 0
PUSHR D2
WRITEPODARRAY D2 {3,9,4,8,7,4,4,2,3,7}
POP D2
STORE D2 0
LOAD D2 0.0002; if() #475 Test
COMPAREV D2 0
GOTOCMP 29564 <
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
POP D0
READPODARRAYR D2 D2
POP D3
COMPARER D3 D2
GOTOCMP 29564 >=
SETV D2 0
GOTO 29565
SETV D2 1
COMPAREV D2 0
GOTOCMP 29571 ==; Test 'if'
SETV D2 -1; return Start AND if() #475 Body Start
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 29587; return End AND if() #475 Body End
LOAD D2 0.0003; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
PUSHR D2
LOAD D2 0.0002
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 29587; return End
LOAD D3 0
DEALLOCATEMEMR D3
POPARGS D5 0.0004
RETURNFUNC; Func[int ScreenFlag(int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body Start
LOAD D2 0.0001; if() #486 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29608 ==; Test 'if'
LOAD D2 0; if() #487 Test AND if() #486 Body Start
COMPAREV D2 1
GOTOCMP 29603 <
LOAD D2 0
COMPAREV D2 511
GOTOCMP 29603 >
SETV D2 0
GOTO 29604
SETV D2 1
COMPAREV D2 0
GOTOCMP 29608 ==; Test 'if'
SETV D2 1; if() #487 Body Start
STORE D2 0.0001; if() #487 Body End
LOAD D2 0.0001; if() #486 Body End
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponLifespan(eweapon, int, int)] Body Start
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponLifespan(eweapon, int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponMovement(eweapon, int, int, int)] Body Start
LOAD D2 0.0003; if() #491 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29742 ==; Test 'if'
LOAD D2 0.0003; if() #491 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #491 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0003
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002; if() #206 Test
COMPAREV D2 4
GOTOCMP 29817 ==
LOAD D2 0.0002
COMPAREV D2 6
GOTOCMP 29817 ==
SETV D2 0
GOTO 29818
SETV D2 1
COMPAREV D2 0
GOTOCMP 29867 ==; Test 'if'
LOAD D2 0.0003; if() #207 Test AND if() #206 Body Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29851 ==; Test 'if'
LOAD D2 0.0003; if() #207 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 29972; if() #207 Body End
LOAD D2 0.0003; if() #207 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #207 Else End
GOTO 29972; if() #206 Body End
LOAD D2 0.0002; if() #208 Test AND if() #206 Else Start
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29934 ==; Test 'if'
LOAD D2 0.0003; if() #208 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #492 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29972 ==; Test 'if'
LOAD D2 0.0003; if() #209 Test AND if() #492 Body Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 29917 ==; Test 'if'
SETV D2 -1; if() #209 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 29972; if() #209 Body End
PUSHR D4; if() #209 Else Start
LOAD D2 0.0003; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params Start
PUSHR D2; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params End
CALLFUNC 2.9974; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Call
POP D4
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #209 Else End
GOTO 29972; if() #492 Body End AND if() #208 Body End
LOAD D2 0.0002; if() #493 Test AND if() #208 Else Start
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 29972 ==; Test 'if'
LOAD D2 0.0001; if() #493 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0.1600
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #493 Body End
POPARGS D5 0.0004; if() #208 Else End AND if() #206 Else End
RETURNFUNC; Func[void SetEWeaponMovement(eweapon, int, int, int)] Body End
PUSHARGSV 0 0.0005; Func[int __GetEWeaponThrowHeight(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
STORE D2 0.0004
LOAD D2 0.0004; if() #572 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 29989 ==; Test 'if'
SETV D2 1; return Start AND if() #572 Body Start
GOTO 30090; return End AND if() #572 Body End
LOAD D2 0.0005; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0003
LOAD D2 0.0003; if() #573 Test
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30038 ==; Test 'if'
SETV D2 1; return Start AND if() #573 Body Start
GOTO 30090; return End AND if() #573 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0001; while() #5 Test
COMPAREV D2 3.2000
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30065 ==; Test 'while'
LOAD D2 0.0001; while() #5 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002
LOAD D2 0.0002; if() #574 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30046 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #574 Body Start
GOTO 30090; return End AND if() #574 Body End
GOTO 30046; while() #5 Body End AND while() #5 End
STOREV 0 0
LOAD D2 0.0002; while() #6 Test
PUSHR D2
LOAD D2 0
DIVV D2 3.2000
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 30089 ==; Test 'while'
LOAD D2 0.0001; while() #6 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SUBV D2 3.2000
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002; while() #6 Body End
GOTO 30066; while() #6 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(eweapon)] Body End
SETR D4 SP2; Func[int Sign(int)] Body Start
LOAD D2 0; if() #235 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 30100 ==; Test 'if'
SETV D2 1; return Start AND if() #235 Body Start
GOTO 30108; return End AND if() #235 Body End
LOAD D2 0; if() #236 Test AND if() #235 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30107 ==; Test 'if'
SETV D2 -1; return Start AND if() #236 Body Start
GOTO 30108; return End AND if() #236 Body End
SETV D2 0; return Start AND if() #236 Else Start
POP D5; return End AND if() #236 Else End AND if() #235 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR D4 SP2; Func[void __DeathAnimEnd(ffc, npc)] Body Start
LOAD D2 0; InlineFunc[bool npc::isValid()] Params AND if() #561 Test
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 30169 ==; Test 'if'
SETV D2 -1000; if() #561 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD12
SUBV D2 1
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD13
SUBV D2 1
MULTV D2 8
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #561 Body End
PUSHR D4
LOAD D2 0.0001; UsrFunc[void __GhCleanUp(ffc)] Params Start
PUSHR D2; UsrFunc[void __GhCleanUp(ffc)] Params End
CALLFUNC 2.6535; UsrFunc[void __GhCleanUp(ffc)] Call
POP D4
SETV D2 0
SETR GD10 D2
PUSHR D4
CALLFUNC 2.4355; UsrFunc[void Ghost_ClearCombos()] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void __DeathAnimEnd(ffc, npc)] Body End
PUSHV 0; Func[void __DeathAnimSFX(int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002; InlineFunc[npc screendata::CreateNPC(int)] Params
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETR D2 REGION_HEIGHT
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void __DeathAnimSFX(int, int)] Body End
SETR D4 SP2; Func[void __DeathAnimStart(ffc, npc)] Body Start
SETR D2 GD11
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCBGSFX D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DeathAnimStart(ffc, npc)] Body End
SETR D4 SP2; Func[bool __Ghost_IsFlickering(npc)] Body Start
LOAD D2 0; if() #606 Test
PUSHR D2
POP REFNPC
SETR D2 NPCMFLAGS
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 30325 ==; Test 'if'
SETV D2 1; return Start AND if() #606 Body Start
GOTO 30326; return End AND if() #606 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[bool __Ghost_IsFlickering(npc)] Body End
SETR D4 SP2; Func[int __Ghost_LinedUp(int, bool)] Body Start
SETV D2 0.0001; InlineFunc[int Abs(int)] Params Start AND if() #319 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30363 ==; Test 'if'
SETV D2 0.0001; if() #320 Test AND if() #319 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30360 ==; Test 'if'
SETV D2 0; return Start AND if() #320 Body Start
GOTO 30475; return End
GOTO 30396; if() #320 Body End
SETV D2 1; return Start AND if() #320 Else Start
GOTO 30475; return End AND if() #320 Else End
GOTO 30396; if() #319 Body End
SETV D2 0.0001; InlineFunc[int Abs(int)] Params Start AND if() #608 Test AND if() #319 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30396 ==; Test 'if'
SETV D2 0.0001; if() #321 Test AND if() #608 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30394 ==; Test 'if'
SETV D2 2; return Start AND if() #321 Body Start
GOTO 30475; return End
GOTO 30396; if() #321 Body End
SETV D2 3; return Start AND if() #321 Else Start
GOTO 30475; return End AND if() #321 Else End
LOAD D2 0; if() #608 Body End AND if() #319 Else End AND if() #609 Test
COMPAREV D2 0
GOTOCMP 30474 ==; Test 'if'
SETV D2 0.0001; InlineFunc[int Abs(int)] Params Start AND if() #610 Test AND if() #609 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
SETV D2 0.0001; InlineFunc[int Abs(int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30474 ==; Test 'if'
SETV D2 0.0001; if() #322 Test AND if() #610 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
SETR D2 GD2
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30458 ==; Test 'if'
SETV D2 0.0001; if() #323 Test AND if() #322 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30455 ==; Test 'if'
SETV D2 4; return Start AND if() #323 Body Start
GOTO 30475; return End
GOTO 30474; if() #323 Body End
SETV D2 5; return Start AND if() #323 Else Start
GOTO 30475; return End AND if() #323 Else End
GOTO 30474; if() #322 Body End
SETV D2 0.0001; if() #324 Test AND if() #322 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
SETR D2 GD1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30472 ==; Test 'if'
SETV D2 6; return Start AND if() #324 Body Start
GOTO 30475; return End
GOTO 30474; if() #324 Body End
SETV D2 7; return Start AND if() #324 Else Start
GOTO 30475; return End AND if() #324 Else End
SETV D2 -1; if() #322 Else End AND if() #610 Body End AND if() #609 Body End AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int __Ghost_LinedUp(int, bool)] Body End
SETR D4 SP2; Func[void EZB_AddAttack(ffc, npc, int, int, int)] Body Start
LOAD D2 0.0001; if() #817 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30598 !=; Test 'if' AND return (Void) AND if() #817 Body
LOAD D2 0.0001; if() #818 Test
COMPAREV D2 91
GOTOCMP 30491 <
LOAD D2 0.0001
COMPAREV D2 93
GOTOCMP 30491 >
SETV D2 1
GOTO 30492
SETV D2 0
COMPAREV D2 0
GOTOCMP 30575 ==; Test 'if'
SETV D2 0; if() #818 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 315 D2
LOAD D2 0.0003
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 317 D2
LOAD D2 0.0001; if() #438 Test
COMPAREV D2 91
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30531 ==; Test 'if'
SETV D2 300; if() #438 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 317
MULTV D2 2
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 318 D2
GOTO 30598; if() #438 Body End
LOAD D2 0.0001; if() #439 Test AND if() #438 Else Start
COMPAREV D2 92
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30553 ==; Test 'if'
SETV D2 600; if() #439 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 317
MULTV D2 3
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 318 D2
GOTO 30598; if() #439 Body End
LOAD D2 0.0001; if() #819 Test AND if() #439 Else Start
COMPAREV D2 93
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30598 ==; Test 'if'
SETV D2 900; if() #819 Body Start
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 317
MULTV D2 4
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 318 D2; if() #819 Body End
GOTO 30598; if() #439 Else End AND if() #438 Else End AND return (Void) AND if() #818 Body End
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
ADDV D2 1
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_AddAttack(ffc, npc, int, int, int)] Body End
PUSHV 0; Func[void EZB_AddSummon(npc, npc)] Body Start
SETR D4 SP2
STOREV 0 0; for() #220 setup
LOAD D2 0; for() #220 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30630 ==; for() #220 TestFail?
LOAD D2 0.0001; InlineFunc[bool npc::isValid()] Params Start AND unless() #820 Test AND for() #220 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2; InlineFunc[bool npc::isValid()] Params End
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 30626 !=; Test 'unless'
LOAD D2 0.0002; unless() #820 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
GOTO 30630; return (Void) AND unless() #820 Body End
LOAD D2 0; for() #220 Body End AND for() #220 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 30603; for() #220 End
POPARGS D5 0.0003
RETURNFUNC; Func[void EZB_AddSummon(npc, npc)] Body End
SETR D4 SP2; Func[void EZB_AddTransformation(ffc, npc, int, int, int)] Body Start
LOAD D2 0.0001; if() #821 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30661 !=; Test 'if' AND return (Void) AND if() #821 Body
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 100
ADDV D2 101
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 100
ADDV D2 1
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 100 D2
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_AddTransformation(ffc, npc, int, int, int)] Body End
PUSHV 0; Func[int EZB_AngDiff(int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
LOAD D2 0; if() #440 Test
COMPAREV D2 180
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 30681 ==; Test 'if'
LOAD D2 0; if() #440 Body Start
SUBV D2 360
STORE D2 0
GOTO 30689; if() #440 Body End
LOAD D2 0; if() #822 Test AND if() #440 Else Start
COMPAREV D2 -180
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 30689 ==; Test 'if'
LOAD D2 0; if() #822 Body Start
ADDV D2 360
STORE D2 0; if() #822 Body End
LOAD D2 0; if() #440 Else End AND return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int EZB_AngDiff(int, int)] Body End
PUSHV 0; Func[int EZB_AngleDir(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #441 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 30709 ==; Test 'if'
PUSHR D4; return Start AND if() #441 Body Start
LOAD D2 0.0001; UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0552; UsrFunc[int AngleDir8(int)] Call
POP D4
GOTO 30714; return End AND if() #441 Body End
PUSHR D4; return Start AND if() #441 Else Start
LOAD D2 0.0001; UsrFunc[int AngleDir4(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0509; UsrFunc[int AngleDir4(int)] Call
POP D4
POPARGS D5 0.0005; return End AND if() #441 Else End
RETURNFUNC; Func[int EZB_AngleDir(ffc, npc, int, int)] Body End
PUSHARGSV 0 0.0005; Func[int EZB_BarrierShift_TransformAnimSize(npc, int)] Body Start
SETR D4 SP2
STOREV 0 0.0004
LOAD D2 0.0005; if() #823 Test
PUSHR D2
POP D0
READPODARRAYV D2 201
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30729 ==; Test 'if'
SETV D2 100; if() #823 Body Start
STORE D2 0.0004; if() #823 Body End
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
ADDV D2 11
ADDV D2 6
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0003
ANDV D2 15
STORE D2 0.0002
LOAD D2 0.0003
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0001
LOAD D2 0.0001; if() #824 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30751 ==; Test 'if'
LOAD D2 0.0002; if() #824 Body Start
STORE D2 0.0001; if() #824 Body End
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0002; InlineFunc[int Max(int, int)] Params Start AND return Start
PUSHVARGR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POPARGS D5 0.0007; return End
RETURNFUNC; Func[int EZB_BarrierShift_TransformAnimSize(npc, int)] Body End
PUSHARGSV 0 0.0002; Func[void EZB_Barriershift_Load(npc, int, bool, bool)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
LOAD D2 0.0004; if() #825 Test
PUSHR D2
POP D0
READPODARRAYV D2 201
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 30788 ==; Test 'if'
SETV D2 100; if() #825 Body Start
STORE D2 0; if() #825 Body End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
SETR GD11 D2
LOAD D2 0.0003; unless() #826 Test
COMPAREV D2 0
GOTOCMP 30967 !=; Test 'unless'
LOAD D2 0.0004; unless() #826 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCDP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCWDP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHUNGER D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCRATE D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 5
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHALTRATE D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 6
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHOMING D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 7
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 8
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCWEAPON D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 9
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 10
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCBGSFX D2
SETV D2 0; for() #221 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #221 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30967 ==; for() #221 TestFail?
LOAD D2 0.0004; for() #221 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 11
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
ADDV D2 300
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #221 Body End
LOAD D2 0.0001; for() #221 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 30939; for() #221 End
SETV D2 0; unless() #826 Body End AND for() #222 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #222 LoopTest
COMPAREV D2 18
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 30999 ==; for() #222 TestFail?
LOAD D2 0.0004; for() #222 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 22
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
POP D0
POP D2
POP REFNPC
SETR NPCDEFENSED D2; for() #222 Body End
LOAD D2 0.0001; for() #222 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 30969; for() #222 End
LOAD D2 0.0002; if() #827 Test
COMPAREV D2 0
GOTOCMP 31021 ==; Test 'if'
LOAD D2 0.0004; if() #827 Body Start
PUSHR D2
LOAD D2 0
ADDV D2 40
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
LOAD D2 0.0005
PUSHR D2
POP REFNPC
SETR D2 NPCHP
SETR GD14 D2; if() #827 Body End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
ADDV D2 41
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0004
SETR D0 D2
POP D2
WRITEPODARRAYVR 312 D2
LOAD D2 0.0004; if() #442 Test
PUSHR D2
POP D0
READPODARRAYV D2 201
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31047 ==; Test 'if'
SETV D2 1; if() #442 Body Start
PUSHR D2
LOAD D2 0.0004
SETR D0 D2
POP D2
WRITEPODARRAYVR 201 D2
GOTO 31053; if() #442 Body End
SETV D2 0; if() #442 Else Start
PUSHR D2
LOAD D2 0.0004
SETR D0 D2
POP D2
WRITEPODARRAYVR 201 D2; if() #442 Else End
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_Barriershift_Load(npc, int, bool, bool)] Body End
PUSHARGSV 0 0.0002; Func[void EZB_Barriershift_Store(npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
PUSHR D4
LOAD D2 0.0003; UsrFunc[npc CreateNPCAt(int, int, int)] Params Start
PUSHR D2
PUSHV 128
PUSHV -1000; UsrFunc[npc CreateNPCAt(int, int, int)] Params End
CALLFUNC 2.0829; UsrFunc[npc CreateNPCAt(int, int, int)] Call
POP D4
STORE D2 0
SETR D2 GD11
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHUNGER
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 8 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCITEMSET
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 9 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCBGSFX
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 10 D2
SETV D2 0; for() #223 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #223 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31189 ==; for() #223 TestFail?
LOAD D2 0.0004; for() #223 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 11
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #223 Body End
LOAD D2 0.0001; for() #223 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 31164; for() #223 End
SETV D2 0; for() #224 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #224 LoopTest
COMPAREV D2 18
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31216 ==; for() #224 TestFail?
LOAD D2 0.0004; for() #224 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDEFENSED
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 22
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #224 Body End
LOAD D2 0.0001; for() #224 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 31191; for() #224 End
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 40 D2
LOAD D2 0.0004
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 41 D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 100 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 101 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCWDP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 102 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHUNGER
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 103 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 104 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 105 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHOMING
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 106 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 107 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCWEAPON
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 108 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCITEMSET
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 109 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCBGSFX
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 110 D2
SETV D2 0; for() #225 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #225 LoopTest
COMPAREV D2 11
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31360 ==; for() #225 TestFail?
LOAD D2 0; for() #225 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 111
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #225 Body End
LOAD D2 0.0001; for() #225 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 31335; for() #225 End
SETV D2 0; for() #226 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #226 LoopTest
COMPAREV D2 18
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 31387 ==; for() #226 TestFail?
LOAD D2 0; for() #226 Body Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDEFENSED
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
ADDV D2 122
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #226 Body End
LOAD D2 0.0001; for() #226 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 31362; for() #226 End
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCHP
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 140 D2
LOAD D2 0
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 141 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0002
SETR D0 D2
POP D2
WRITEPODARRAYVR 201 D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_Barriershift_Store(npc, int, int)] Body End
PUSHARGSV 0 0.0002; Func[bool EZB_CanMoveAngle(int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 10; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV 10; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0001; if() #828 Test
COMPAREV D2 0
GOTOCMP 31498 >=
PUSHR D4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31511 ==
LOAD D2 0.0001
COMPAREV D2 0
GOTOCMP 31509 <=
PUSHR D4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31511 ==
SETV D2 0
GOTO 31512
SETV D2 1
COMPAREV D2 0
GOTOCMP 31516 ==; Test 'if'
SETV D2 0; return Start AND if() #828 Body Start
GOTO 31545; return End AND if() #828 Body End
LOAD D2 0; if() #829 Test
COMPAREV D2 0
GOTOCMP 31527 >=
PUSHR D4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31539 ==
LOAD D2 0
COMPAREV D2 0
GOTOCMP 31537 <=
PUSHR D4
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 2.1610; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31539 ==
SETV D2 0
GOTO 31540
SETV D2 1
COMPAREV D2 0
GOTOCMP 31544 ==; Test 'if'
SETV D2 0; return Start AND if() #829 Body Start
GOTO 31545; return End AND if() #829 Body End
SETV D2 1; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool EZB_CanMoveAngle(int)] Body End
PUSHV 0; Func[bool EZB_CanMoveAtPos(int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0001; if() #443 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31601 ==; Test 'if'
SETV D2 0; for() #227 setup AND if() #443 Body Start
STORE D2 0
LOAD D2 0; for() #227 LoopTest
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31759 ==; for() #227 TestFail?
PUSHR D4; unless() #830 Test AND for() #227 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
SUBV D2 1
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2541; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31582 !=; Test 'unless'
SETV D2 0; return Start AND unless() #830 Body Start
GOTO 31760; return End AND unless() #830 Body End
LOAD D2 0; if() #831 Test
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31759 !=; Test 'if' AND break 1; AND if() #831 Body
LOAD D2 0; for() #227 Body End AND for() #227 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0003
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31557; for() #227 End
GOTO 31759; if() #443 Body End
LOAD D2 0.0001; if() #444 Test AND if() #443 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31655 ==; Test 'if'
SETV D2 0; for() #228 setup AND if() #444 Body Start
STORE D2 0
LOAD D2 0; for() #228 LoopTest
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31759 ==; for() #228 TestFail?
PUSHR D4; unless() #832 Test AND for() #228 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2541; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31636 !=; Test 'unless'
SETV D2 0; return Start AND unless() #832 Body Start
GOTO 31760; return End AND unless() #832 Body End
LOAD D2 0; if() #833 Test
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31759 !=; Test 'if' AND break 1; AND if() #833 Body
LOAD D2 0; for() #228 Body End AND for() #228 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0003
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31608; for() #228 End
GOTO 31759; if() #444 Body End
LOAD D2 0.0001; if() #445 Test AND if() #444 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31706 ==; Test 'if'
SETV D2 0; for() #229 setup AND if() #445 Body Start
STORE D2 0
LOAD D2 0; for() #229 LoopTest
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31759 ==; for() #229 TestFail?
PUSHR D4; unless() #834 Test AND for() #229 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
SUBV D2 1
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2541; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31687 !=; Test 'unless'
SETV D2 0; return Start AND unless() #834 Body Start
GOTO 31760; return End AND unless() #834 Body End
LOAD D2 0; if() #835 Test
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31759 !=; Test 'if' AND break 1; AND if() #835 Body
LOAD D2 0; for() #229 Body End AND for() #229 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0002
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31662; for() #229 End
GOTO 31759; if() #445 Body End
LOAD D2 0.0001; if() #836 Test AND if() #445 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31759 ==; Test 'if'
SETV D2 0; for() #230 setup AND if() #836 Body Start
STORE D2 0
LOAD D2 0; for() #230 LoopTest
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31759 ==; for() #230 TestFail?
PUSHR D4; unless() #837 Test AND for() #230 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2541; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31741 !=; Test 'unless'
SETV D2 0; return Start AND unless() #837 Body Start
GOTO 31760; return End AND unless() #837 Body End
LOAD D2 0; if() #838 Test
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31759 !=; Test 'if' AND break 1; AND if() #838 Body
LOAD D2 0; for() #230 Body End AND for() #230 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0002
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31713; for() #230 End
SETV D2 1; if() #836 Body End AND if() #445 Else End AND if() #444 Else End AND if() #443 Else End AND return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool EZB_CanMoveAtPos(int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[bool EZB_CanPlace(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004; for() #231 setup
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
STORE D2 0.0001
LOAD D2 0.0001; for() #231 LoopTest
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31907 ==; for() #231 TestFail?
LOAD D2 0.0004; for() #232 setup AND for() #231 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
STORE D2 0
LOAD D2 0; for() #232 LoopTest
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31869 ==; for() #232 TestFail?
PUSHR D4; unless() #839 Test AND for() #232 Body Start
LOAD D2 0.0003; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2541; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31831 !=; Test 'unless'
SETV D2 0; return Start AND unless() #839 Body Start
GOTO 31908; return End AND unless() #839 Body End
LOAD D2 0; if() #840 Test
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31869 !=; Test 'if' AND break 1; AND if() #840 Body
LOAD D2 0; for() #232 Body End AND for() #232 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_Y
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
POP D3
ADDR D2 D3
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31793; for() #232 End
LOAD D2 0.0001; if() #841 Test
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
POP D3
ADDR D2 D3
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31907 !=; Test 'if' AND break 1; AND if() #841 Body
LOAD D2 0.0001; for() #231 Body End AND for() #231 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_OFFSET_X
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
POP D3
ADDR D2 D3
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001
GOTO 31769; for() #231 End
SETV D2 1; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[bool EZB_CanPlace(ffc, npc, int, int)] Body End
PUSHARGSV 0 0.0002; Func[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001; for() #233 setup
LOAD D2 0.0001; for() #233 LoopTest
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31987 ==; for() #233 TestFail?
STOREV 0 0; for() #234 setup AND for() #233 Body Start
LOAD D2 0; for() #234 LoopTest
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 31969 ==; for() #234 TestFail?
PUSHR D4; unless() #842 Test AND for() #234 Body Start
LOAD D2 0.0005; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool Ghost_CanMovePixel(int, int)] Params End
CALLFUNC 2.2541; UsrFunc[bool Ghost_CanMovePixel(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 31951 !=; Test 'unless'
SETV D2 0; return Start AND unless() #842 Body Start
GOTO 31988; return End AND unless() #842 Body End
LOAD D2 0; if() #843 Test
PUSHR D2
LOAD D2 0.0002
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31969 !=; Test 'if' AND break 1; AND if() #843 Body
LOAD D2 0; for() #234 Body End AND for() #234 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0002
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
GOTO 31923; for() #234 End
LOAD D2 0.0001; if() #844 Test
PUSHR D2
LOAD D2 0.0003
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 31987 !=; Test 'if' AND break 1; AND if() #844 Body
LOAD D2 0.0001; for() #233 Body End AND for() #233 LoopIncrement AND InlineFunc[int Min(int, int)] Params Start
ADDV D2 8
PUSHVARGR D2
LOAD D2 0.0003
SUBV D2 1
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001
GOTO 31913; for() #233 End
SETV D2 1; return Start
POPARGS D5 0.0008; return End
RETURNFUNC; Func[bool EZB_CanPlace(ffc, npc, int, int, int, int)] Body End
PUSHV 0; Func[void EZB_DamageLink(int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 40; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
PUSHR D4
SETV D2 0.0001; UsrFunc[int InFrontX(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 12; UsrFunc[int InFrontX(int, int)] Params End
CALLFUNC 2.9274; UsrFunc[int InFrontX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
PUSHR D4
SETV D2 0.0001; UsrFunc[int InFrontY(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 12; UsrFunc[int InFrontY(int, int)] Params End
CALLFUNC 2.9295; UsrFunc[int InFrontY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 0 0.0002
LOAD D2 0.0001
PUSHR D2
PUSHARGSV -1 0.0002
PUSHV 1; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.0912; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 2.9653; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9589; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void EZB_DamageLink(int)] Body End
SETR D4 SP2; Func[int EZB_DirAngle(int)] Body Start
LOAD D2 0; if() #446 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32077 ==; Test 'if'
SETV D2 -90; return Start AND if() #446 Body Start
GOTO 32120; return End AND if() #446 Body End
LOAD D2 0; if() #447 Test AND if() #446 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32084 ==; Test 'if'
SETV D2 90; return Start AND if() #447 Body Start
GOTO 32120; return End AND if() #447 Body End
LOAD D2 0; if() #448 Test AND if() #447 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32091 ==; Test 'if'
SETV D2 180; return Start AND if() #448 Body Start
GOTO 32120; return End AND if() #448 Body End
LOAD D2 0; if() #449 Test AND if() #448 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32098 ==; Test 'if'
SETV D2 -135; return Start AND if() #449 Body Start
GOTO 32120; return End AND if() #449 Body End
LOAD D2 0; if() #450 Test AND if() #449 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32105 ==; Test 'if'
SETV D2 -45; return Start AND if() #450 Body Start
GOTO 32120; return End AND if() #450 Body End
LOAD D2 0; if() #451 Test AND if() #450 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32112 ==; Test 'if'
SETV D2 135; return Start AND if() #451 Body Start
GOTO 32120; return End AND if() #451 Body End
LOAD D2 0; if() #452 Test AND if() #451 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32119 ==; Test 'if'
SETV D2 45; return Start AND if() #452 Body Start
GOTO 32120; return End AND if() #452 Body End
SETV D2 0; return Start AND if() #452 Else Start
POP D5; return End AND if() #452 Else End AND if() #451 Else End AND if() #450 Else End AND if() #449 Else End AND if() #448 Else End AND if() #447 Else End AND if() #446 Else End
RETURNFUNC; Func[int EZB_DirAngle(int)] Body End
SETR D4 SP2; Func[int EZB_DirX(int, int)] Body Start
LOAD D2 0.0001; if() #845 Test
COMPAREV D2 2
GOTOCMP 32134 ==
LOAD D2 0.0001
COMPAREV D2 4
GOTOCMP 32134 ==
LOAD D2 0.0001
COMPAREV D2 6
GOTOCMP 32134 ==
SETV D2 0
GOTO 32135
SETV D2 1
COMPAREV D2 0
GOTOCMP 32140 ==; Test 'if'
LOAD D2 0; return Start AND if() #845 Body Start
SUBV2 0 D2
GOTO 32157; return End AND if() #845 Body End
LOAD D2 0.0001; if() #846 Test
COMPAREV D2 3
GOTOCMP 32151 ==
LOAD D2 0.0001
COMPAREV D2 5
GOTOCMP 32151 ==
LOAD D2 0.0001
COMPAREV D2 7
GOTOCMP 32151 ==
SETV D2 0
GOTO 32152
SETV D2 1
COMPAREV D2 0
GOTOCMP 32156 ==; Test 'if'
LOAD D2 0; return Start AND if() #846 Body Start
GOTO 32157; return End AND if() #846 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int EZB_DirX(int, int)] Body End
SETR D4 SP2; Func[int EZB_DirY(int, int)] Body Start
LOAD D2 0.0001; if() #847 Test
COMPAREV D2 0
GOTOCMP 32171 ==
LOAD D2 0.0001
COMPAREV D2 4
GOTOCMP 32171 ==
LOAD D2 0.0001
COMPAREV D2 5
GOTOCMP 32171 ==
SETV D2 0
GOTO 32172
SETV D2 1
COMPAREV D2 0
GOTOCMP 32177 ==; Test 'if'
LOAD D2 0; return Start AND if() #847 Body Start
SUBV2 0 D2
GOTO 32194; return End AND if() #847 Body End
LOAD D2 0.0001; if() #848 Test
COMPAREV D2 1
GOTOCMP 32188 ==
LOAD D2 0.0001
COMPAREV D2 6
GOTOCMP 32188 ==
LOAD D2 0.0001
COMPAREV D2 7
GOTOCMP 32188 ==
SETV D2 0
GOTO 32189
SETV D2 1
COMPAREV D2 0
GOTOCMP 32193 ==; Test 'if'
LOAD D2 0; return Start AND if() #848 Body Start
GOTO 32194; return End AND if() #848 Body End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int EZB_DirY(int, int)] Body End
PUSHARGSV 0 0.0004; Func[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4; if() #453 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9542; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32210 ==
LOAD D2 0.0014
COMPAREV D2 2
GOTOCMP 32210 !=
SETV D2 1
GOTO 32211
SETV D2 0
COMPAREV D2 0
GOTOCMP 32216 ==; Test 'if'
SETV D2 1; if() #453 Body Start
STORE D2 0.0014
GOTO 32233; if() #453 Body End
PUSHR D4; if() #849 Test AND if() #453 Else Start
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 5; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9542; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32228 ==
LOAD D2 0.0014
COMPAREV D2 3
GOTOCMP 32228 !=
SETV D2 1
GOTO 32229
SETV D2 0
COMPAREV D2 0
GOTOCMP 32233 ==; Test 'if'
SETV D2 4; if() #849 Body Start
STORE D2 0.0014; if() #849 Body End
STOREV 0 0.0003; if() #453 Else End AND if(false) #454 [Opt:AlwaysOff]
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0006; if() #455 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 32540 ==; Test 'if'
LOAD D2 0.0008; InlineFunc[int Choose(int)] Params Start AND if() #455 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0003
LOAD D2 0.0007; if() #850 Test
COMPAREV D2 -1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 32260 ==; Test 'if'
LOAD D2 0.0007; if() #850 Body Start
STORE D2 0.0003; if() #850 Body End
LOAD D2 0.0005; if() #851 Test
MODV D2 4
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 32628 ==; Test 'if'
LOAD D2 0.0011; if() #851 Body Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
MULTV D2 0.8000
STORE D2 0.0002
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorX(int, int)] Params Start
DIVV D2 2
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0013
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorY(int, int)] Params Start
DIVV D2 2
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0012
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
PUSHR D4
LOAD D2 0.0002; UsrFunc[int Round(int)] Params Start
DIVV D2 4
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7836; UsrFunc[int Round(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0001
LOAD D2 0.0014; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
ALLOCATEMEMV D2 2 0
STORE D2 0
LOAD D2 0.0013
PUSHR D2
PUSHR D4
PUSHV 320; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
PUSHV 320; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0011; if() #456 Test
DIVV D2 16
COMPAREV D2 1
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 32470 ==; Test 'if'
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start AND if() #456 Body Start
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Round(int)] Params Start
DIVV D2 16
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7836; UsrFunc[int Round(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0014; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 3.2630; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
GOTO 32537; if() #456 Body End
LOAD D2 0.0014; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start AND if() #456 Else Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End AND if() #456 Else End
LOAD D3 0
DEALLOCATEMEMR D3; if() #851 Body End
GOTO 32628; if() #455 Body End
LOAD D2 0.0008; InlineFunc[int Choose(int)] Params Start AND if() #455 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHVARGR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHVARGR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0003
LOAD D2 0.0007; if() #852 Test
COMPAREV D2 -1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 32564 ==; Test 'if'
LOAD D2 0.0007; if() #852 Body Start
STORE D2 0.0003; if() #852 Body End
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
PUSHR D4
LOAD D2 0.0011; UsrFunc[int Round(int)] Params Start
DIVV D2 8
PUSHR D2; UsrFunc[int Round(int)] Params End
CALLFUNC 2.7836; UsrFunc[int Round(int)] Call
POP D4
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0014; UsrFunc[void EZB_DrawLaser(int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[void EZB_DrawLaser(int, int, int, int, int, int)] Params End
CALLFUNC 3.2690; UsrFunc[void EZB_DrawLaser(int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0013; UsrFunc[bool EZB_LaserCollision(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[bool EZB_LaserCollision(int, int, int, int)] Params End
CALLFUNC 3.2793; UsrFunc[bool EZB_LaserCollision(int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32628 ==; Test 'if'
PUSHR D4; if() #853 Body Start
LOAD D2 0.0009; UsrFunc[void EZB_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZB_DamageLink(int)] Params End
CALLFUNC 3.1990; UsrFunc[void EZB_DamageLink(int)] Call
POP D4; if() #853 Body End
POPARGS D5 0.0015; if() #455 Else End
RETURNFUNC; Func[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body Start
LOAD D2 0.0008; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body End
SETR D4 SP2; Func[void EZB_DrawLaser(int, int, int, int, int, int)] Body Start
PUSHR D4; if() #457 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9542; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32703 ==
LOAD D2 0.0005
COMPAREV D2 2
GOTOCMP 32703 !=
SETV D2 1
GOTO 32704
SETV D2 0
COMPAREV D2 0
GOTOCMP 32709 ==; Test 'if'
SETV D2 1; if() #457 Body Start
STORE D2 0.0005
GOTO 32726; if() #457 Body End
PUSHR D4; if() #856 Test AND if() #457 Else Start
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 5; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9542; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 32721 ==
LOAD D2 0.0005
COMPAREV D2 3
GOTOCMP 32721 !=
SETV D2 1
GOTO 32722
SETV D2 0
COMPAREV D2 0
GOTOCMP 32726 ==; Test 'if'
SETV D2 4; if() #856 Body Start
STORE D2 0.0005; if() #856 Body End
LOAD D2 0.0005; if() #457 Else End AND InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0.0005; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
ADDV D2 512
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_DrawLaser(int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[bool EZB_LaserCollision(int, int, int, int)] Body Start
SETR D4 SP2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params Start
LOAD D2 0.0004
SUBV D2 3
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0.0002
LOAD D2 0.0006
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #906 Test
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 32849 ==; Test 'if'
SETV D2 1; return Start AND if() #906 Body Start
GOTO 32893; return End AND if() #906 Body End
PUSHR D4; return Start
LOAD D2 0.0006; UsrFunc[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorX(int, int)] Params Start
ADDV D2 128
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorY(int, int)] Params Start
ADDV D2 128
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 128
LOAD D2 0.0003
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
PUSHARGSV 4 0.0002
PUSHV 0; UsrFunc[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.5505; UsrFunc[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Call
POP D4
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool EZB_LaserCollision(int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Body Start
SETR D2 LINKHP; if() #854 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33040 !=; Test 'if' AND return (Void) AND if() #854 Body
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
ADDV D2 -8
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
LOAD D2 0.0005
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
PUSHV 6; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHV 1; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params End
CALLFUNC 3.3042; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Call
POP D4
PUSHR D2
PUSHV 2
PUSHV 1
PUSHR GD11
PUSHARGSV -1 0.0002
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 0
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0; if() #855 Test
COMPAREV D2 0
GOTOCMP 33040 ==; Test 'if'
PUSHR D4; if() #855 Body Start
LOAD D2 0.0005; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params Start
ADDV D2 8
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
PUSHV 8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 16 0.0002
LOAD D2 0
PUSHR D2; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params End
CALLFUNC 3.3091; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params Start
ADDV D2 8
PUSHR D2
PUSHR D4
PUSHV -8; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
PUSHV -8; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0002
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 16 0.0002
LOAD D2 0
PUSHR D2; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params End
CALLFUNC 3.3091; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Call
POP D4; if() #855 Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawGreatsword(ffc, npc, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int EZB_GetSpecialCombo(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0002
LOAD D2 0.0004
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0001
LOAD D2 0.0001
ADDV D2 2
STORE D2 0
LOAD D2 0.0002; if() #480 Test
ANDV D2 1
COMPAREV D2 0
GOTOCMP 33065 ==; Test 'if'
LOAD D2 0.0001; if() #480 Body Start
ADDV D2 8
STORE D2 0
GOTO 33072; if() #480 Body End
LOAD D2 0.0002; if() #903 Test AND if() #480 Else Start
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33072 ==; Test 'if'
LOAD D2 0.0001; if() #903 Body Start
ADDV D2 16
STORE D2 0; if() #903 Body End
LOAD D2 0.0003; if() #480 Else End AND if() #481 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33080 ==; Test 'if'
LOAD D2 0; return Start AND if() #481 Body Start
GOTO 33089; return End
GOTO 33088; if() #481 Body End
LOAD D2 0.0003; if() #904 Test AND if() #481 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33088 ==; Test 'if'
LOAD D2 0; return Start AND if() #904 Body Start
ADDV D2 1
GOTO 33089; return End AND if() #904 Body End
SETV D2 0; if() #481 Else End AND return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[int EZB_GetSpecialCombo(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_MakeHitbox(int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 40; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 120
PUSHV 80
PUSHARGSV 0 0.0002
LOAD D2 0.0001
PUSHR D2
PUSHARGSV -1 0.0002
PUSHV 1; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.0912; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_X D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 2.9653; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9589; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_MakeHitbox(int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Body Start
SETR D2 LINKHP; if() #857 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33254 !=; Test 'if' AND return (Void) AND if() #857 Body
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 2.7578; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 2.7588; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
PUSHV 6; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHV 0; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Params End
CALLFUNC 3.3042; UsrFunc[int EZB_GetSpecialCombo(ffc, npc, int, int)] Call
POP D4
PUSHR D2
PUSHARGSV 1 0.0002
PUSHR GD11
PUSHARGSV -1 0.0002
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 0
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
LOAD D2 0; if() #858 Test
COMPAREV D2 0
GOTOCMP 33254 ==; Test 'if'
PUSHR D4; if() #858 Body Start
LOAD D2 0.0005; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHARGSV 16 0.0002
LOAD D2 0
PUSHR D2; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Params End
CALLFUNC 3.3091; UsrFunc[void EZB_MakeHitbox(int, int, int, int, int)] Call
POP D4; if() #858 Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawSword(ffc, npc, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 GD12
STORE D2 0.0006
SETR D2 GD13
STORE D2 0.0005
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0004
SETR D2 GD10
STORE D2 0.0003
LOAD D2 0.0004; if() #859 Test
ANDV D2 1
COMPAREV D2 0
GOTOCMP 33279 !=
LOAD D2 0.0004
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33279 !=
SETV D2 0
GOTO 33280
SETV D2 1
COMPAREV D2 0
GOTOCMP 33288 ==; Test 'if'
LOAD D2 0.0003; if() #859 Body Start
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
STORE D2 0.0003; if() #859 Body End
STOREV 2 0.0002
PUSHR D4; if() #860 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9542; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 33298 ==; Test 'if'
SETV D2 1; if() #860 Body Start
STORE D2 0.0002; if() #860 Body End
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0001
STOREV 128 0
LOAD D2 0.0008; if() #861 Test
PUSHR D2
LOAD D2 0.0007
SUBV D2 8
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 33317 ==; Test 'if'
SETV D2 64; if() #861 Body Start
STORE D2 0; if() #861 Body End
LOAD D2 0.0002; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0006
MULTV D2 8
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0005
MULTV D2 24
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0013
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
LOAD D2 0.0006
MULTV D2 16
PUSHR D2
LOAD D2 0.0006
MULTV D2 16
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0005
MULTV D2 16
PUSHR D2
LOAD D2 0.0005
MULTV D2 24
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 0 0.0003
PUSHV -1
PUSHV 0
PUSHV 1
LOAD D2 0
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0014
RETURNFUNC; Func[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Body End
PUSHV 0; Func[void EZB_FaceAngle(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #459 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33403 ==; Test 'if'
PUSHR D4; if() #459 Body Start
LOAD D2 0.0001; UsrFunc[int AngleDir8(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0552; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 33409; if() #459 Body End
PUSHR D4; if() #459 Else Start
LOAD D2 0.0001; UsrFunc[int AngleDir4(int)] Params Start
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0509; UsrFunc[int AngleDir4(int)] Call
POP D4
SETR GD4 D2; if() #459 Else End
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_FaceAngle(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_FaceDir(ffc, npc, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #460 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33425 ==; Test 'if'
LOAD D2 0.0001; if() #460 Body Start
SETR GD4 D2
GOTO 33449; if() #460 Body End
LOAD D2 0.0001; if() #461 Test AND if() #460 Else Start
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33433 ==; Test 'if'
LOAD D2 0.0001; if() #461 Body Start
SETR GD4 D2
GOTO 33449; if() #461 Body End
LOAD D2 0.0001; if() #462 Test AND if() #461 Else Start
COMPAREV D2 4
GOTOCMP 33441 ==
LOAD D2 0.0001
COMPAREV D2 6
GOTOCMP 33441 ==
SETV D2 0
GOTO 33442
SETV D2 1
COMPAREV D2 0
GOTOCMP 33447 ==; Test 'if'
SETV D2 2; if() #462 Body Start
SETR GD4 D2
GOTO 33449; if() #462 Body End
SETV D2 3; if() #462 Else Start
SETR GD4 D2; if() #462 Else End
POPARGS D5 0.0005; if() #461 Else End AND if() #460 Else End
RETURNFUNC; Func[void EZB_FaceDir(ffc, npc, int, int)] Body End
SETR D4 SP2; Func[void EZB_FaceDir4(ffc, npc, int, int)] Body Start
LOAD D2 0; if() #463 Test
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33460 ==; Test 'if'
LOAD D2 0; if() #463 Body Start
SETR GD4 D2
GOTO 33476; if() #463 Body End
LOAD D2 0; if() #464 Test AND if() #463 Else Start
COMPAREV D2 4
GOTOCMP 33468 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 33468 ==
SETV D2 0
GOTO 33469
SETV D2 1
COMPAREV D2 0
GOTOCMP 33474 ==; Test 'if'
SETV D2 2; if() #464 Body Start
SETR GD4 D2
GOTO 33476; if() #464 Body End
SETV D2 3; if() #464 Else Start
SETR GD4 D2; if() #464 Else End
POPARGS D5 0.0004; if() #463 Else End
RETURNFUNC; Func[void EZB_FaceDir4(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_FaceLink(ffc, npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #465 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33516 ==; Test 'if'
PUSHARGSR D4 0.0003; if() #465 Body Start AND UsrFunc[int AngleDir8(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0002; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0552; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 33542; if() #465 Body End
PUSHARGSR D4 0.0003; if() #465 Else Start AND UsrFunc[int AngleDir4(int)] Params Start AND UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0002; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir4(int)] Params End
CALLFUNC 2.0509; UsrFunc[int AngleDir4(int)] Call
POP D4
SETR GD4 D2; if() #465 Else End
POPARGS D5 0.0004
RETURNFUNC; Func[void EZB_FaceLink(ffc, npc, int)] Body End
PUSHV 0; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0007; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 0; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Params End
CALLFUNC 3.3568; UsrFunc[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0008; return End
RETURNFUNC; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0013; UsrFunc[int EZB_WeaponTypeToID(int)] Params Start
PUSHR D2
POP REFNPC
PUSHR NPCWEAPON; UsrFunc[int EZB_WeaponTypeToID(int)] Params End
CALLFUNC 3.3696; UsrFunc[int EZB_WeaponTypeToID(int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0006; if() #863 Test
ANDV D2 128
COMPAREV D2 0
GOTOCMP 33590 ==; Test 'if'
LOAD D2 0.0007; if() #863 Body Start
ORV D2 1
STORE D2 0.0007; if() #863 Body End
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 307
STORE D2 0.0004
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 308
STORE D2 0.0003
LOAD D2 0.0003; if() #864 Test
COMPAREV D2 0
GOTOCMP 33620 !=
LOAD D2 0.0005
COMPAREV D2 132
GOTOCMP 33618 ==
LOAD D2 0.0005
COMPAREV D2 130
GOTOCMP 33618 ==
LOAD D2 0.0005
COMPAREV D2 134
GOTOCMP 33618 ==
LOAD D2 0.0005
COMPAREV D2 137
GOTOCMP 33618 ==
LOAD D2 0.0005
COMPAREV D2 138
GOTOCMP 33620 !=
SETV D2 1
GOTO 33621
SETV D2 0
COMPAREV D2 0
GOTOCMP 33626 ==; Test 'if'
LOAD D2 0.0007; if() #864 Body Start
ORV D2 2
STORE D2 0.0007; if() #864 Body End
LOAD D2 0.0003; if() #466 Test
COMPAREV D2 2000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 33638 ==; Test 'if'
LOAD D2 0.0007; if() #466 Body Start
ORV D2 4
STORE D2 0.0007
LOAD D2 0.0003
SUBV D2 2000
STORE D2 0.0003
GOTO 33649; if() #466 Body End
LOAD D2 0.0003; if() #865 Test AND if() #466 Else Start
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 33649 ==; Test 'if'
LOAD D2 0.0007; if() #865 Body Start
ORV D2 2
STORE D2 0.0007
LOAD D2 0.0003
SUBV D2 1000
STORE D2 0.0003; if() #865 Body End
LOAD D2 0.0004; if() #466 Else End
STORE D2 0.0002
LOAD D2 0.0004; if() #866 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33658 ==; Test 'if'
SETV D2 -1; if() #866 Body Start
STORE D2 0.0002; if() #866 Body End
LOAD D2 0.0003
STORE D2 0.0001
LOAD D2 0.0003; if() #867 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 33667 ==; Test 'if'
SETV D2 -1; if() #867 Body Start
STORE D2 0.0001; if() #867 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0013
PUSHR D2
POP REFNPC
PUSHR NPCWDP
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 2.0912; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0015; return End
RETURNFUNC; Func[eweapon EZB_Fire(ffc, npc, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[int EZB_WeaponTypeToID(int)] Body Start
LOAD D2 0; if() #507 Test
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33705 ==; Test 'if'
SETV D2 140; return Start AND if() #507 Body Start
GOTO 33817; return End
GOTO 33816; if() #507 Body End
LOAD D2 0; if() #508 Test AND if() #507 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33713 ==; Test 'if'
SETV D2 141; return Start AND if() #508 Body Start
GOTO 33817; return End
GOTO 33816; if() #508 Body End
LOAD D2 0; if() #509 Test AND if() #508 Else Start
COMPAREV D2 129
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33721 ==; Test 'if'
SETV D2 129; return Start AND if() #509 Body Start
GOTO 33817; return End
GOTO 33816; if() #509 Body End
LOAD D2 0; if() #510 Test AND if() #509 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33729 ==; Test 'if'
SETV D2 130; return Start AND if() #510 Body Start
GOTO 33817; return End
GOTO 33816; if() #510 Body End
LOAD D2 0; if() #511 Test AND if() #510 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33737 ==; Test 'if'
SETV D2 131; return Start AND if() #511 Body Start
GOTO 33817; return End
GOTO 33816; if() #511 Body End
LOAD D2 0; if() #512 Test AND if() #511 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33745 ==; Test 'if'
SETV D2 132; return Start AND if() #512 Body Start
GOTO 33817; return End
GOTO 33816; if() #512 Body End
LOAD D2 0; if() #513 Test AND if() #512 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33753 ==; Test 'if'
SETV D2 133; return Start AND if() #513 Body Start
GOTO 33817; return End
GOTO 33816; if() #513 Body End
LOAD D2 0; if() #514 Test AND if() #513 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33761 ==; Test 'if'
SETV D2 134; return Start AND if() #514 Body Start
GOTO 33817; return End
GOTO 33816; if() #514 Body End
LOAD D2 0; if() #515 Test AND if() #514 Else Start
COMPAREV D2 135
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33769 ==; Test 'if'
SETV D2 135; return Start AND if() #515 Body Start
GOTO 33817; return End
GOTO 33816; if() #515 Body End
LOAD D2 0; if() #516 Test AND if() #515 Else Start
COMPAREV D2 136
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33777 ==; Test 'if'
SETV D2 136; return Start AND if() #516 Body Start
GOTO 33817; return End
GOTO 33816; if() #516 Body End
LOAD D2 0; if() #517 Test AND if() #516 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33785 ==; Test 'if'
SETV D2 137; return Start AND if() #517 Body Start
GOTO 33817; return End
GOTO 33816; if() #517 Body End
LOAD D2 0; if() #518 Test AND if() #517 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33793 ==; Test 'if'
SETV D2 138; return Start AND if() #518 Body Start
GOTO 33817; return End
GOTO 33816; if() #518 Body End
LOAD D2 0; if() #519 Test AND if() #518 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33801 ==; Test 'if'
SETV D2 139; return Start AND if() #519 Body Start
GOTO 33817; return End
GOTO 33816; if() #519 Body End
LOAD D2 0; if() #520 Test AND if() #519 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33809 ==; Test 'if'
SETV D2 142; return Start AND if() #520 Body Start
GOTO 33817; return End
GOTO 33816; if() #520 Body End
LOAD D2 0; if() #933 Test AND if() #520 Else Start
COMPAREV D2 145
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33816 ==; Test 'if'
SETV D2 145; return Start AND if() #933 Body Start
GOTO 33817; return End AND if() #933 Body End
SETV D2 134; if() #520 Else End AND if() #519 Else End AND if() #518 Else End AND if() #517 Else End AND if() #516 Else End AND if() #515 Else End AND if() #514 Else End AND if() #513 Else End AND if() #512 Else End AND if() #511 Else End AND if() #510 Else End AND if() #509 Else End AND if() #508 Else End AND if() #507 Else End AND return Start
POP D5; return End
RETURNFUNC; Func[int EZB_WeaponTypeToID(int)] Body End
PUSHARGSV 0 0.0008; Func[void EZB_FiringAnim(ffc, npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0006
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 310
STORE D2 0.0005
LOAD D2 0.0006; if() #467 Test
ANDV D2 2
COMPAREV D2 0
GOTOCMP 33840 ==; Test 'if'
LOAD D2 0.0005; if() #467 Body Start
ADDV D2 8
SETR GD10 D2
GOTO 33851; if() #467 Body End
LOAD D2 0.0006; if() #468 Test AND if() #467 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 33848 ==; Test 'if'
LOAD D2 0.0005; if() #468 Body Start
ADDV D2 4
SETR GD10 D2
GOTO 33851; if() #468 Body End
LOAD D2 0.0005; if() #468 Else Start
ADDV D2 1
SETR GD10 D2; if() #468 Else End
LOAD D2 0.0010; if() #467 Else End
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
STORE D2 0.0004
LOAD D2 0.0010
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
STORE D2 0.0003
LOAD D2 0.0008; if() #469 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33887 ==; Test 'if'
SETV D2 0; for() #237 setup AND if() #469 Body Start
STORE D2 0.0007
LOAD D2 0.0007; for() #237 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34054 ==; for() #237 TestFail?
PUSHR D4; for() #237 Body Start
LOAD D2 0.0011; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #237 Body End
LOAD D2 0.0007; for() #237 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 33868; for() #237 End
GOTO 34054; if() #469 Body End
LOAD D2 0.0008; if() #470 Test AND if() #469 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 33971 ==; Test 'if'
STOREV 0 0.0001; if() #470 Body Start
STOREV 0 0
SETV D2 0; for() #238 setup
STORE D2 0.0007
LOAD D2 0.0007; for() #238 LoopTest
COMPAREV D2 32
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 33952 ==; for() #238 TestFail?
PUSHR D4; if(true) #868 [Opt:AlwaysOn] AND for() #238 Body Start
PUSHV -1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV -1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
PUSHR D4
LOAD D2 0.0011; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #238 Body End
LOAD D2 0.0007; for() #238 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 33896; for() #238 End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
GOTO 34054; if() #470 Body End
LOAD D2 0.0008; if() #869 Test AND if() #470 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34054 ==; Test 'if'
STOREV 0 0.0001; if() #869 Body Start
STOREV 0 0
SETV D2 0; for() #239 setup
STORE D2 0.0007
LOAD D2 0.0007; for() #239 LoopTest
COMPAREV D2 64
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34036 ==; for() #239 TestFail?
PUSHR D4; if(true) #870 [Opt:AlwaysOn] AND for() #239 Body Start
PUSHV -2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0001
PUSHR D4
PUSHV -2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
PUSHR D4
LOAD D2 0.0011; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #239 Body End
LOAD D2 0.0007; for() #239 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 33980; for() #239 End
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0010
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; if() #869 Body End
POPARGS D5 0.0012; if() #470 Else End AND if() #469 Else End
RETURNFUNC; Func[void EZB_FiringAnim(ffc, npc, int, int)] Body End
PUSHV 0; Func[void EZB_Waitframe(ffc, npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0
LOAD D2 0; if() #927 Test
ANDV D2 512
COMPAREV D2 0
GOTOCMP 34076 ==; Test 'if'
SETV D2 60; if() #927 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTUN D2; if() #927 Body End
LOAD D2 0; if() #928 Test
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 34089 ==; Test 'if'
SETV D2 0; if() #928 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTUN D2; if() #928 Body End
LOAD D2 0.0001; unless() #929 Test
PUSHR D2
POP D0
READPODARRAYV D2 319
COMPAREV D2 0
GOTOCMP 34167 !=; Test 'unless'
LOAD D2 0.0001; if() #930 Test AND unless() #929 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 316
COMPAREV D2 0
GOTOCMP 34167 ==; Test 'if'
LOAD D2 0.0001; if() #931 Test AND if() #930 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 315
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 316
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34167 ==; Test 'if'
LOAD D2 0.0001; if() #931 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 315
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
SETR D0 D2
POP D2
WRITEPODARRAYVR 315 D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 317
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 318
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 317
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 315
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP D0
READPODARRAYV D2 316
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCSTEP D2; if() #931 Body End
LOAD D2 0.0001; if() #930 Body End AND unless() #929 Body End AND if() #504 Test
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34203 ==; Test 'if'
PUSHR D4; unless() #932 Test AND if() #504 Body Start
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 0 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Params End
CALLFUNC 2.8048; UsrFunc[bool Ghost_Waitframe(ffc, npc, bool, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34223 !=; Test 'unless'
SETV D2 1; unless() #932 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 1
SETR GD14 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0001
SETR D0 D2
POP D2
WRITEPODARRAYVR 202 D2; unless() #932 Body End
GOTO 34223; if() #504 Body End
LOAD D2 0; if() #505 Test AND if() #504 Else Start
ANDV D2 32
COMPAREV D2 0
GOTOCMP 34216 ==; Test 'if'
PUSHR D4; if(false) #506 [Opt:AlwaysOff] AND if() #505 Body Start
LOAD D2 0.0003; UsrFunc[bool Ghost_Waitframe(ffc, npc, int, bool)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[bool Ghost_Waitframe(ffc, npc, int, bool)] Params End
CALLFUNC 2.8285; UsrFunc[bool Ghost_Waitframe(ffc, npc, int, bool)] Call
POP D4
GOTO 34223; if() #505 Body End
PUSHR D4; if() #505 Else Start
LOAD D2 0.0003; UsrFunc[void Ghost_Waitframe(ffc, npc)] Params Start
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void Ghost_Waitframe(ffc, npc)] Params End
CALLFUNC 2.8037; UsrFunc[void Ghost_Waitframe(ffc, npc)] Call
POP D4; if() #505 Else End
POPARGS D5 0.0004; if() #504 Else End
RETURNFUNC; Func[void EZB_Waitframe(ffc, npc, int)] Body End
PUSHARGSV 0 0.0010; Func[void EZB_FishWizardUpdate(ffc, npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0009
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0008
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0010; if() #471 Test
PUSHR D2
POP D0
READPODARRAYV D2 7
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34621 ==; Test 'if'
LOAD D2 0.0010; if() #871 Test AND if() #471 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 0
GOTOCMP 34269 ==; Test 'if'
LOAD D2 0.0010; if() #871 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 1
SUBV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2; if() #871 Body End
LOAD D2 0.0010; if() #872 Test
PUSHR D2
POP D0
READPODARRAYV D2 11
COMPAREV D2 0
GOTOCMP 34285 ==; Test 'if'
LOAD D2 0.0010; if() #872 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 11
SUBV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 11 D2; if() #872 Body End
PUSHR D4
LOAD D2 0.0010; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCSTEP
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCRATE
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCHOMING
LOAD D2 0.0012
PUSHR D2
POP REFNPC
PUSHR NPCHUNGER; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Params End
CALLFUNC 2.4363; UsrFunc[int Ghost_ConstantWalk4(int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4; if() #472 Test
LOAD D2 0.0012; UsrFunc[bool EZB_InSight(npc)] Params Start
PUSHR D2; UsrFunc[bool EZB_InSight(npc)] Params End
CALLFUNC 3.4779; UsrFunc[bool EZB_InSight(npc)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34329 ==
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 0
GOTOCMP 34329 !=
SETV D2 1
GOTO 34330
SETV D2 0
COMPAREV D2 0
GOTOCMP 34349 ==; Test 'if'
LOAD D2 0.0012; if() #472 Body Start
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
GOTO 34777; if() #472 Body End
PUSHR D4; if() #873 Test AND if() #472 Else Start
PUSHV 1; UsrFunc[int Rand(int, int)] Params Start
PUSHV 90; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
COMPAREV D2 1
GOTOCMP 34364 !=
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
COMPAREV D2 0
GOTOCMP 34364 !=
SETV D2 1
GOTO 34365
SETV D2 0
COMPAREV D2 0
GOTOCMP 34777 ==; Test 'if'
STOREV 0 0.0007; if() #873 Body Start
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_TILE_W
LOAD D2 0.0012
PUSHR D2
POP REFSPRITE
PUSHVARGR SPRITE_TILE_H; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
SUBV D2 1
STORE D2 0.0002
STOREV 0 0.0001
SETV D2 0; for() #240 setup
STORE D2 0.0009
LOAD D2 0.0009; for() #240 LoopTest
COMPAREV D2 128
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34460 ==; for() #240 TestFail?
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start AND for() #240 Body Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0007
PUSHVARGV -1; InlineFunc[int Choose(int)] Params Start
PUSHVARGV 1; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0006
LOAD D2 0.0002
MULTV D2 16
PUSHR D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
MULTV D2 16
SETV D2 16
PUSHR D2
PUSHR D4
PUSHV 2; UsrFunc[int Rand(int, int)] Params Start
PUSHV 4; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 2.0753; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0005
SETR D2 GD1
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0004
SETR D2 GD2
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
PUSHR D4; if() #874 Test
LOAD D2 0.0013; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1762; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34456 ==; Test 'if'
SETV D2 1; if() #874 Body Start
STORE D2 0.0001
GOTO 34460; break 1; AND if() #874 Body End
LOAD D2 0.0009; for() #240 Body End AND for() #240 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 34386; for() #240 End
LOAD D2 0.0001; if() #875 Test
COMPAREV D2 0
GOTOCMP 34777 ==; Test 'if'
LOAD D2 0.0008; if() #473 Test AND if() #875 Body Start
ANDV D2 2
COMPAREV D2 0
GOTOCMP 34480 ==; Test 'if'
PUSHARGSR D4 0.0002; if() #473 Body Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 2.0490; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 2.0552; UsrFunc[int AngleDir8(int)] Call
POP D4
SETR GD4 D2
GOTO 34494; if() #473 Body End
LOAD D2 0.0008; if() #876 Test AND if() #473 Else Start
ANDV D2 1
COMPAREV D2 0
GOTOCMP 34494 ==; Test 'if'
LOAD D2 0.0007; if() #474 Test AND if() #876 Body Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34492 ==; Test 'if'
SETV D2 2; if() #474 Body Start
SETR GD4 D2
GOTO 34494; if() #474 Body End
SETV D2 3; if() #474 Else Start
SETR GD4 D2; if() #474 Else End
PUSHR D4; if() #876 Body End AND if() #473 Else End
PUSHV 0; UsrFunc[int Clamp(int, int, int)] Params Start
LOAD D2 0.0012; InlineFunc[int Floor(int)] Params Start
PUSHR D2
POP REFNPC
SETR D2 NPCSTEP
DIVV D2 100; InlineFunc[int Floor(int)] Params End
FLOOR D2; InlineFunc[int Floor(int)] Body
PUSHR D2
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #877 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34514 ==; Test 'if'
SETV D2 0.5000; if() #877 Body Start
STORE D2 0; if() #877 Body End
SETV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
DIVR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 309
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 8 D2
PUSHR D4; unless() #878 Test
PUSHV 7168; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34570 !=; Test 'unless'
SETV D2 7168; unless() #878 Body Start
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 8 D2; unless() #878 Body End
PUSHR D4; unless() #879 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34582 !=; Test 'unless'
SETV D2 65536; unless() #879 Body Start
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 9 D2; unless() #879 Body End
PUSHR D4; if() #880 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 2.2780; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 34594 ==; Test 'if'
SETV D2 1; if() #880 Body Start
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 12 D2; if() #880 Body End
PUSHR D4
PUSHV 7168; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 65537; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK D4
PUSHV 1; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 10 D2
LOAD D2 0.0012
PUSHR D2
POP REFNPC
SETR D2 NPCHALTRATE
MULTV D2 10
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 11 D2; if() #875 Body End
GOTO 34777; if() #873 Body End AND if() #472 Else End AND if() #471 Body End
LOAD D2 0.0010; if() #881 Test AND if() #471 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 7
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34777 ==; Test 'if'
PUSHR D4; if() #881 Body Start
LOAD D2 0.0010; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 4
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 10
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 5
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 10
POP D3
MULTR D2 D3
PUSHR D2
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 2.5102; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP D4
LOAD D2 0.0010; if() #475 Test
PUSHR D2
POP D0
READPODARRAYV D2 6
MODV D2 4
COMPAREV D2 2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34676 ==; Test 'if'
SETV D2 -1000; if() #475 Body Start
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
GOTO 34685; if() #475 Body End
SETV D2 -2; if() #475 Else Start
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; if() #475 Else End
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 6
SUBV D2 1
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0.0010; if() #882 Test
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 34777 ==; Test 'if'
SETV D2 -2; if() #882 Body Start
PUSHR D2
LOAD D2 0.0012
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
LOAD D2 0.0010; if() #476 Test
PUSHR D2
POP D0
READPODARRAYV D2 4
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 34723 ==; Test 'if'
SETV D2 2; if() #476 Body Start
SETR GD4 D2
GOTO 34725; if() #476 Body End
SETV D2 3; if() #476 Else Start
SETR GD4 D2; if() #476 Else End
LOAD D2 0.0010; if() #883 Test
PUSHR D2
POP D0
READPODARRAYV D2 8
COMPAREV D2 0
GOTOCMP 34735 ==; Test 'if'
PUSHR D4; if() #883 Body Start
PUSHV 7168; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; if() #883 Body End
LOAD D2 0.0010; if() #884 Test
PUSHR D2
POP D0
READPODARRAYV D2 9
COMPAREV D2 0
GOTOCMP 34745 ==; Test 'if'
PUSHR D4; if() #884 Body Start
PUSHV 65537; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 2.5075; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP D4; if() #884 Body End
LOAD D2 0.0010; if() #885 Test
PUSHR D2
POP D0
READPODARRAYV D2 12
COMPAREV D2 0
GOTOCMP 34755 ==; Test 'if'
PUSHR D4; if() #885 Body Start
PUSHV 1; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 2.4714; UsrFunc[void Ghost_SetFlag(int)] Call
POP D4; if() #885 Body End
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
PUSHR D4
LOAD D2 0.0013; UsrFunc[void EZB_FaceDir4(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
PUSHR GD4; UsrFunc[void EZB_FaceDir4(ffc, npc, int, int)] Params End
CALLFUNC 3.3451; UsrFunc[void EZB_FaceDir4(ffc, npc, int, int)] Call
POP D4; if() #882 Body End
POPARGS D5 0.0014; if() #881 Body End AND if() #471 Else End
RETURNFUNC; Func[void EZB_FishWizardUpdate(ffc, npc, int, int)] Body End
PUSHARGSV 0 0.0006; Func[bool EZB_InSight(npc)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int CenterX(npc)] Params Start
PUSHR D2; UsrFunc[int CenterX(npc)] Params End
CALLFUNC 2.0684; UsrFunc[int CenterX(npc)] Call
POP D4
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0006; UsrFunc[int CenterY(npc)] Params Start
PUSHR D2; UsrFunc[int CenterY(npc)] Params End
CALLFUNC 2.0730; UsrFunc[int CenterY(npc)] Call
POP D4
STORE D2 0.0004
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
STORE D2 0.0003
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
STORE D2 0.0002
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
ADDV D2 8
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
ADDV D2 8
STORE D2 0
SETR D2 GD4; if() #482 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34843 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #482 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
GOTOCMP 34840 >=
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
GOTOCMP 34840 >=
SETV D2 1
GOTO 34927
SETV D2 0
GOTO 34927; return End
GOTO 34926; if() #482 Body End
SETR D2 GD4; if() #483 Test AND if() #482 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34871 ==; Test 'if'
LOAD D2 0.0005; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #483 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
GOTOCMP 34868 >=
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
GOTOCMP 34868 <=
SETV D2 1
GOTO 34927
SETV D2 0
GOTO 34927; return End
GOTO 34926; if() #483 Body End
SETR D2 GD4; if() #484 Test AND if() #483 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34899 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #484 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
GOTOCMP 34896 >=
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
GOTOCMP 34896 >=
SETV D2 1
GOTO 34927
SETV D2 0
GOTO 34927; return End
GOTO 34926; if() #484 Body End
SETR D2 GD4; if() #905 Test AND if() #484 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 34926 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[int Abs(int)] Params Start AND return Start AND if() #905 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
GOTOCMP 34924 >=
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
GOTOCMP 34924 <=
SETV D2 1
GOTO 34927
SETV D2 0
GOTO 34927; return End AND if() #905 Body End
SETV D2 0; if() #484 Else End AND if() #483 Else End AND if() #482 Else End AND return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool EZB_InSight(npc)] Body End
PUSHARGSV 0 0.0013; Func[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0012
STOREV 0 0.0011
LOAD D2 0.0018
PUSHR D2
POP D0
READPODARRAYV D2 305
STORE D2 0.0010
SETV D2 0
PUSHR D2
LOAD D2 0.0014
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
ALLOCATEMEMV D2 20 0
WRITEPODSTRING D2 "EZBoss_ExtraAttacks"
STORE D2 0.0008
LOAD D2 0.0008; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0007
ALLOCATEMEMV D2 24 0
WRITEPODSTRING D2 "EZBoss_ChangeLaserColor"
STORE D2 0.0005
LOAD D2 0.0005; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0004
ALLOCATEMEMV D2 28 0
WRITEPODSTRING D2 "EZBoss_ExtraTransformations"
STORE D2 0.0002
LOAD D2 0.0002; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2
LOAD D2 0.0017; if() #886 Test
COMPAREV D2 50
GOTOCMP 34979 ==
LOAD D2 0.0017
COMPAREV D2 51
GOTOCMP 34979 ==
LOAD D2 0.0017
COMPAREV D2 71
GOTOCMP 34979 ==
SETV D2 0
GOTO 34980
SETV D2 1
COMPAREV D2 0
GOTOCMP 35030 ==; Test 'if'
PUSHR D4; if() #886 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0632; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Call
POP D4
SETV D2 1
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2
LOAD D2 0.0017; if() #477 Test
COMPAREV D2 51
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35013 ==; Test 'if'
SETV D2 2; if() #477 Body Start
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2
GOTO 35024; if() #477 Body End
LOAD D2 0.0017; if() #887 Test AND if() #477 Else Start
COMPAREV D2 71
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35024 ==; Test 'if'
SETV D2 3; if() #887 Body Start
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2; if() #887 Body End
LOAD D2 0.0016; if() #477 Else End
STORE D2 0.0017
LOAD D2 0.0015
STORE D2 0.0016
SETV D2 0
STORE D2 0.0015; if() #886 Body End
LOAD D2 0.0017; if() #888 Test
COMPAREV D2 0
GOTOCMP 35046 ==; Test 'if'
PUSHR D4; if() #888 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0017
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0477; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #888 Body End
LOAD D2 0.0016; if() #889 Test
COMPAREV D2 0
GOTOCMP 35062 ==; Test 'if'
PUSHR D4; if() #889 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0477; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #889 Body End
LOAD D2 0.0015; if() #890 Test
COMPAREV D2 0
GOTOCMP 35078 ==; Test 'if'
PUSHR D4; if() #890 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0477; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #890 Body End
SETV D2 1; for() #241 setup
STORE D2 0.0012
LOAD D2 0.0012; for() #241 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 35428 ==; for() #241 TestFail?
LOAD D2 0.0012; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #241 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0
LOAD D2 0; if() #478 Test
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35152 ==; Test 'if'
LOAD D2 0; if() #891 Test AND if() #478 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0019
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35424 ==; Test 'if'
SETV D2 1; for() #242 setup AND if() #891 Body Start
STORE D2 0.0011
LOAD D2 0.0011; for() #242 LoopTest
COMPAREV D2 7
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 35424 ==; for() #242 TestFail?
LOAD D2 0; if() #892 Test AND for() #242 Body Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35147 ==; Test 'if'
PUSHR D4; if() #892 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
PUSHR FFINITDD
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0477; UsrFunc[void EZB_AddAttack(ffc, npc, int, int, int)] Call
POP D4; if() #892 Body End
LOAD D2 0.0011; for() #242 Body End AND for() #242 LoopIncrement
ADDV D2 1
STORE D2 0.0011
GOTO 35115; for() #242 End
GOTO 35424; if() #891 Body End AND if() #478 Body End
LOAD D2 0; if() #479 Test AND if() #478 Else Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35314 ==; Test 'if'
LOAD D2 0; if() #893 Test AND if() #479 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0019
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35424 ==; Test 'if'
LOAD D2 0; if() #894 Test AND if() #893 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35206 !=
LOAD D2 0
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35206 !=
LOAD D2 0
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35206 !=
SETV D2 0
GOTO 35207
SETV D2 1
COMPAREV D2 0
GOTOCMP 35245 ==; Test 'if'
LOAD D2 0; if() #894 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #894 Body End
LOAD D2 0; if() #895 Test
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35274 !=
LOAD D2 0
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35274 !=
LOAD D2 0
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35274 !=
SETV D2 0
GOTO 35275
SETV D2 1
COMPAREV D2 0
GOTOCMP 35424 ==; Test 'if'
LOAD D2 0; if() #895 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
LOAD D2 0
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0013
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2; if() #895 Body End
GOTO 35424; if() #893 Body End AND if() #479 Body End
LOAD D2 0; if() #896 Test AND if() #479 Else Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35424 ==; Test 'if'
LOAD D2 0; if() #897 Test AND if() #896 Body Start
PUSHR D2
SETV D2 0
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0019
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 35424 ==; Test 'if'
LOAD D2 0; if() #898 Test AND if() #897 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 35363 ==; Test 'if'
LOAD D2 0; if() #898 Body Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
SUBV D2 1
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2; if() #898 Body End
LOAD D2 0; if() #899 Test
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 35386 ==; Test 'if'
LOAD D2 0; if() #899 Body Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 314 D2; if() #899 Body End
SETV D2 3; for() #243 setup
STORE D2 0.0011
LOAD D2 0.0011; for() #243 LoopTest
COMPAREV D2 7
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 35424 ==; for() #243 TestFail?
LOAD D2 0; if() #900 Test AND for() #243 Body Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFINITDD
COMPAREV D2 0
GOTOCMP 35420 ==; Test 'if'
PUSHR D4; if() #900 Body Start
LOAD D2 0.0021; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
POP REFFFC
PUSHR FFINITDD
LOAD D2 0.0014
PUSHR D2; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Params End
CALLFUNC 3.0632; UsrFunc[void EZB_AddTransformation(ffc, npc, int, int, int)] Call
POP D4; if() #900 Body End
LOAD D2 0.0011; for() #243 Body End AND for() #243 LoopIncrement
ADDV D2 1
STORE D2 0.0011
GOTO 35388; for() #243 End
LOAD D2 0.0012; if() #897 Body End AND if() #896 Body End AND if() #479 Else End AND if() #478 Else End AND for() #241 Body End AND for() #241 LoopIncrement
ADDV D2 1
STORE D2 0.0012
GOTO 35080; for() #241 End
LOAD D2 0.0014; if() #901 Test
PUSHR D2
POP D0
READPODARRAYV D2 100
COMPAREV D2 0
GOTOCMP 35442 ==
LOAD D2 0.0018
PUSHR D2
POP D0
READPODARRAYV D2 200
COMPAREV D2 0
GOTOCMP 35442 !=
SETV D2 1
GOTO 35443
SETV D2 0
COMPAREV D2 0
GOTOCMP 35451 ==; Test 'if'
SETV D2 2; if() #901 Body Start
PUSHR D2
LOAD D2 0.0018
SETR D0 D2
POP D2
WRITEPODARRAYVR 200 D2; if() #901 Body End
LOAD D2 0.0014; if() #902 Test
PUSHR D2
POP D0
READPODARRAYV D2 100
COMPAREV D2 0
GOTOCMP 35476 ==; Test 'if'
PUSHR D4; if() #902 Body Start
LOAD D2 0.0020; UsrFunc[void EZB_Barriershift_Store(npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0014; InlineFunc[int Rand(int)] Params Start
PUSHR D2
POP D0
READPODARRAYV D2 100
SETR D3 D2; InlineFunc[int Rand(int)] Params End
RNDR D2 D3; InlineFunc[int Rand(int)] Body
ADDV D2 101
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0018
PUSHR D2; UsrFunc[void EZB_Barriershift_Store(npc, int, int)] Params End
CALLFUNC 3.1055; UsrFunc[void EZB_Barriershift_Store(npc, int, int)] Call
POP D4; if() #902 Body End
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0022
RETURNFUNC; Func[void EZB_GetExtraProperties(ffc, npc, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_InitVars(int)] Body Start
SETV D2 0
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 313 D2
SETV D2 0
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 314 D2
SETV D2 0
PUSHR D2
LOAD D2 0
SETR D0 D2
POP D2
WRITEPODARRAYVR 316 D2
POP D5
RETURNFUNC; Func[void EZB_InitVars(int)] Body End
PUSHARGSV 0 0.0017; Func[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0024; InlineFunc[int Sqrt(int)] Params Start
PUSHR D2
LOAD D2 0.0024
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0023
PUSHR D2
LOAD D2 0.0023
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3; InlineFunc[int Sqrt(int)] Params End
SQROOTR D2 D2; InlineFunc[int Sqrt(int)] Body
STORE D2 0.0016
LOAD D2 0.0019; InlineFunc[int Sqrt(int)] Params Start
PUSHR D2
LOAD D2 0.0019
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0018
PUSHR D2
LOAD D2 0.0018
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3; InlineFunc[int Sqrt(int)] Params End
SQROOTR D2 D2; InlineFunc[int Sqrt(int)] Body
STORE D2 0.0015
LOAD D2 0.0024; InlineFunc[int ArcSin(int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start
PUSHR D2
LOAD D2 0.0016
POP D3
DIVR D3 D2; InlineFunc[int ArcSin(int)] Params End
ARCSINR D2 D3; InlineFunc[int ArcSin(int)] Body
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0014
LOAD D2 0.0019; InlineFunc[int ArcSin(int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start
PUSHR D2
LOAD D2 0.0015
POP D3
DIVR D3 D2; InlineFunc[int ArcSin(int)] Params End
ARCSINR D2 D3; InlineFunc[int ArcSin(int)] Body
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0013
ALLOCATEMEMV D2 4 0
STORE D2 0.0012
ALLOCATEMEMV D2 4 0
STORE D2 0.0011
ALLOCATEMEMV D2 4 0
STORE D2 0.0010
ALLOCATEMEMV D2 4 0
STORE D2 0.0009
ALLOCATEMEMV D2 4 0
STORE D2 0.0008
ALLOCATEMEMV D2 4 0
STORE D2 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0026
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0012
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0025
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0022; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0014
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0011
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
SUBR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0021
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Cos(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0010
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0020
PUSHR D2
LOAD D2 0.0015
PUSHR D2
LOAD D2 0.0017; InlineFunc[int Sin(int)] Params Start
ADDV D2 180
PUSHR D2
LOAD D2 0.0013
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0012
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 2
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 1
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
STOREV 0 0.0001; for() #245 setup
LOAD D2 0.0001; for() #245 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36253 ==; for() #245 TestFail?
LOAD D2 0.0012; for() #245 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006
STORE D2 0.0005
LOAD D2 0.0006
STORE D2 0.0004
STOREV 1 0; for() #246 setup
LOAD D2 0; for() #246 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36126 ==; for() #246 TestFail?
LOAD D2 0.0012; for() #246 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006; if() #908 Test
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36112 ==; Test 'if'
LOAD D2 0.0006; if() #908 Body Start
STORE D2 0.0005; if() #908 Body End
LOAD D2 0.0006; if() #909 Test
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 36122 ==; Test 'if'
LOAD D2 0.0006; if() #909 Body Start
STORE D2 0.0004; if() #909 Body End
LOAD D2 0; for() #246 Body End AND for() #246 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 36067; for() #246 End
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0009
PUSHR D2
POP D0
READPODARRAYV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006
STORE D2 0.0003
LOAD D2 0.0006
STORE D2 0.0002
STOREV 1 0; for() #247 setup
LOAD D2 0; for() #247 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36218 ==; for() #247 TestFail?
LOAD D2 0.0010; for() #247 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D0
READPODARRAYR D2 D2
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0006; if() #910 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36204 ==; Test 'if'
LOAD D2 0.0006; if() #910 Body Start
STORE D2 0.0003; if() #910 Body End
LOAD D2 0.0006; if() #911 Test
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 36214 ==; Test 'if'
LOAD D2 0.0006; if() #911 Body Start
STORE D2 0.0002; if() #911 Body End
LOAD D2 0; for() #247 Body End AND for() #247 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 36159; for() #247 End
LOAD D2 0.0002; if() #912 Test
PUSHR D2
LOAD D2 0.0005
POP D3
COMPARER D3 D2
GOTOCMP 36232 <
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 36232 <
SETV D2 0
GOTO 36233
SETV D2 1
COMPAREV D2 0
GOTOCMP 36249 ==; Test 'if'
SETV D2 0; return Start AND if() #912 Body Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D3 0.0011
DEALLOCATEMEMR D3
LOAD D3 0.0012
DEALLOCATEMEMR D3
GOTO 36279; return End AND if() #912 Body End
LOAD D2 0.0001; for() #245 Body End AND for() #245 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 36029; for() #245 End
SETV D2 1; return Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D3 0.0011
DEALLOCATEMEMR D3
LOAD D3 0.0012
DEALLOCATEMEMR D3
GOTO 36279; return End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0009
DEALLOCATEMEMR D3
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D3 0.0011
DEALLOCATEMEMR D3
LOAD D3 0.0012
DEALLOCATEMEMR D3
POPARGS D5 0.0027
RETURNFUNC; Func[bool EZB_RotRectCollision(int, int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[int EZB_NumSummons(npc)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0; for() #244 setup
LOAD D2 0; for() #244 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36305 ==; for() #244 TestFail?
LOAD D2 0.0002; InlineFunc[bool npc::isValid()] Params Start AND if() #907 Test AND for() #244 Body Start
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2; InlineFunc[bool npc::isValid()] Params End
ISVALIDNPC D2; InlineFunc[bool npc::isValid()] Body
COMPAREV D2 0
GOTOCMP 36301 ==; Test 'if'
LOAD D2 0.0001; if() #907 Body Start
ADDV D2 1
STORE D2 0.0001; if() #907 Body End
LOAD D2 0; for() #244 Body End AND for() #244 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 36285; for() #244 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int EZB_NumSummons(npc)] Body End
PUSHARGSV 0 0.0005; Func[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 15 0
WRITEPODSTRING D2 "EZBoss_Effects"
STORE D2 0.0003
LOAD D2 0.0003; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
STORE D2 0.0002
LOAD D2 0.0002; if() #485 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 36368 ==; Test 'if'
ALLOCATEMEMV D2 8 0; if() #485 Body Start
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0012
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0011
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0010
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D0
LOAD D2 0.0009
POP D0
WRITEPODARRAYVR 3 D2
PUSHR D0
LOAD D2 0.0008
POP D0
WRITEPODARRAYVR 4 D2
PUSHR D0
LOAD D2 0.0007
POP D0
WRITEPODARRAYVR 5 D2
PUSHR D0
LOAD D2 0.0006
POP D0
WRITEPODARRAYVR 6 D2
PUSHR D0
LOAD D2 0.0005
POP D0
WRITEPODARRAYVR 7 D2
POP D2
STORE D2 0
PUSHR D4
LOAD D2 0.0002; UsrFunc[int RunFFCScript(int, untyped[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int RunFFCScript(int, untyped[])] Params End
CALLFUNC 2.9418; UsrFunc[int RunFFCScript(int, untyped[])] Call
POP D4
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 36377; if() #485 Body End
ALLOCATEMEMV D2 73 0; if() #485 Else Start
WRITEPODSTRING D2 "ERROR: EZBoss_Effects script wasn't found. Did you forget to assign it?\n"
STORE D2 0
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3; if() #485 Else End
LOAD D3 0.0003
DEALLOCATEMEMR D3
POPARGS D5 0.0013
RETURNFUNC; Func[void EZB_RunEffect(int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_SetEWeaponDeathEffect(eweapon)] Body Start
LOAD D2 0; if() #486 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 140
GOTOCMP 36396 ==
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 142
GOTOCMP 36396 ==
SETV D2 0
GOTO 36397
SETV D2 1
COMPAREV D2 0
GOTOCMP 36407 ==; Test 'if'
PUSHR D4; if() #486 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 12
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9589; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36500; if() #486 Body End
LOAD D2 0; if() #487 Test AND if() #486 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36423 ==; Test 'if'
PUSHR D4; if() #487 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 14
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9589; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36500; if() #487 Body End
LOAD D2 0; if() #488 Test AND if() #487 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36442 ==; Test 'if'
PUSHR D4; if() #488 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 3
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9589; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36500; if() #488 Body End
LOAD D2 0; if() #489 Test AND if() #488 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36461 ==; Test 'if'
PUSHR D4; if() #489 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 4
LOAD D2 0
PUSHR D2
POP REFEWPN
PUSHR EWPNPOWER; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9589; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36500; if() #489 Body End
LOAD D2 0; if() #490 Test AND if() #489 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36477 ==; Test 'if'
PUSHR D4; if() #490 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 5
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9589; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36500; if() #490 Body End
LOAD D2 0; if() #491 Test AND if() #490 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36493 ==; Test 'if'
PUSHR D4; if() #491 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 2
PUSHV 16; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9589; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
GOTO 36500; if() #491 Body End
PUSHR D4; if() #491 Else Start
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV -1; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 2.9589; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4; if() #491 Else End
POP D5; if() #490 Else End AND if() #489 Else End AND if() #488 Else End AND if() #487 Else End AND if() #486 Else End
RETURNFUNC; Func[void EZB_SetEWeaponDeathEffect(eweapon)] Body End
SETR D4 SP2; Func[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Body Start
SETV D2 36; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0007
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 2
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 3
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 4
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 5
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 6
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 7
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
MULTV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
POPARGS D5 0.0010
RETURNFUNC; Func[void EZB_SetLaserArray(int, int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0002; Func[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
PUSHR D4; if() #492 Test
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 4; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9542; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 36641 ==
LOAD D2 0.0011
COMPAREV D2 2
GOTOCMP 36641 !=
SETV D2 1
GOTO 36642
SETV D2 0
COMPAREV D2 0
GOTOCMP 36647 ==; Test 'if'
SETV D2 1; if() #492 Body Start
STORE D2 0.0011
GOTO 36664; if() #492 Body End
PUSHR D4; if() #913 Test AND if() #492 Else Start
PUSHV 1; UsrFunc[int ScreenFlag(int, int)] Params Start
PUSHV 5; UsrFunc[int ScreenFlag(int, int)] Params End
CALLFUNC 2.9542; UsrFunc[int ScreenFlag(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 36659 ==
LOAD D2 0.0011
COMPAREV D2 3
GOTOCMP 36659 !=
SETV D2 1
GOTO 36660
SETV D2 0
COMPAREV D2 0
GOTOCMP 36664 ==; Test 'if'
SETV D2 4; if() #913 Body Start
STORE D2 0.0011; if() #913 Body End
LOAD D2 0.0004; if() #492 Else End AND InlineFunc[int Choose(int)] Params Start
PUSHVARGR D2
LOAD D2 0.0003
PUSHVARGR D2
LOAD D2 0.0002
PUSHVARGR D2; InlineFunc[int Choose(int)] Params End
CHOOSEVARG; InlineFunc[int Choose(int)] Body
STORE D2 0.0001
STOREV 0 0; for() #248 setup
LOAD D2 0; for() #248 LoopTest
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36731 ==; for() #248 TestFail?
LOAD D2 0.0008; if() #914 Test AND for() #248 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 36704 <=
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
GOTOCMP 36704 >=
SETV D2 1
GOTO 36705
SETV D2 0
COMPAREV D2 0
GOTOCMP 36727 ==; Test 'if'
LOAD D2 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #914 Body Start
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0004
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #914 Body End
LOAD D2 0; for() #248 Body End AND for() #248 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 36673; for() #248 End
LOAD D2 0.0008; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0007
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #915 Test
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0009; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36764 ==; Test 'if'
PUSHR D4; if() #915 Body Start
LOAD D2 0.0005; UsrFunc[void EZB_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZB_DamageLink(int)] Params End
CALLFUNC 3.1990; UsrFunc[void EZB_DamageLink(int)] Call
POP D4; if() #915 Body End
POPARGS D5 0.0012
RETURNFUNC; Func[void EZB_Shockwave(int, int, int, int, int, int, int, int, int, int)] Body End
SETR D4 SP2; Func[void EZB_Teleport(ffc, npc, int)] Body Start
PUSHR D4
LOAD D2 0.0002; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHARGSV -1000 0.0002
PUSHV 16; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Params End
CALLFUNC 3.6780; UsrFunc[void EZB_Teleport(ffc, npc, int, int, int, int)] Call
POP D4
POPARGS D5 0.0003
RETURNFUNC; Func[void EZB_Teleport(ffc, npc, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZB_Teleport(ffc, npc, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0010
PUSHR D2
POP D0
READPODARRAYV D2 306
STORE D2 0.0006
LOAD D2 0.0006
ANDV D2 15
STORE D2 0.0005
LOAD D2 0.0006
RSHIFTV D2 4
ANDV D2 15
STORE D2 0.0004
LOAD D2 0.0004; if() #916 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 36801 ==; Test 'if'
LOAD D2 0.0005; if() #916 Body Start
STORE D2 0.0004; if() #916 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 4; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 2.0765; UsrFunc[int Clamp(int, int, int)] Call
POP D4
STORE D2 0.0004
SETV D2 32; InlineFunc[void Game::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
STOREV 0 0.0003
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
SETV D2 -1000
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
SETR D2 GD10
STORE D2 0.0002
STOREV 0 0.0001; for() #249 setup
LOAD D2 0.0001; for() #249 LoopTest
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 36879 ==; for() #249 TestFail?
PUSHR D4; if(true) #493 [Opt:AlwaysOn] AND for() #249 Body Start
LOAD D2 0.0012; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHR GD1
SETR D2 GD2
SUBV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3256; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0012; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #249 Body End
LOAD D2 0.0001; for() #249 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 36842; for() #249 End
SETV D2 -1000
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
SETV D3 176; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0003
STOREV 0 0.0001; for() #250 setup
LOAD D2 0.0001; for() #250 LoopTest
COMPAREV D2 352
GOTOCMP 36969 >=
PUSHR D4
LOAD D2 0.0012; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0412; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0455; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Params End
CALLFUNC 3.1762; UsrFunc[bool EZB_CanPlace(ffc, npc, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 36967 ==
PUSHR D4; InlineFunc[int Distance(int, int, int, int)] Params Start
LOAD D2 0.0003; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0412; UsrFunc[int ComboX(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0455; UsrFunc[int ComboY(int)] Call
POP D4
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
CALLFUNC 2.0647; UsrFunc[int CenterLinkX()] Call
POP D4
PUSHR D2
PUSHR D4
CALLFUNC 2.0654; UsrFunc[int CenterLinkY()] Call
POP D4; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
DIVV D2 2
MULTV D2 8
ADDV D2 32
POP D3
COMPARER D3 D2
GOTOCMP 36969 >=
SETV D2 1
GOTO 36970
SETV D2 0
COMPAREV D2 0
GOTOCMP 36988 ==; for() #250 TestFail?
LOAD D2 0.0001; if() #494 Test AND for() #250 Body Start
COMPAREV D2 176
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 36981 ==; Test 'if'
LOAD D2 0.0001; if() #494 Body Start
SUBV D2 176
STORE D2 0.0003
GOTO 36984; if() #494 Body End
SETV D3 176; InlineFunc[int Rand(int)] Params AND if() #494 Else Start
RNDR D2 D3; InlineFunc[int Rand(int)] Body
STORE D2 0.0003; if() #494 Else End
LOAD D2 0.0001; for() #250 Body End AND for() #250 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 36892; for() #250 End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboX(int)] Params Start
PUSHR D2; UsrFunc[int ComboX(int)] Params End
CALLFUNC 2.0412; UsrFunc[int ComboX(int)] Call
POP D4
SETR GD1 D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int ComboY(int)] Params Start
PUSHR D2; UsrFunc[int ComboY(int)] Params End
CALLFUNC 2.0455; UsrFunc[int ComboY(int)] Call
POP D4
SETR GD2 D2
LOAD D2 0.0009; if() #917 Test
COMPAREV D2 -1000
GOTOCMP 37008 <=
LOAD D2 0.0008
COMPAREV D2 -1000
GOTOCMP 37008 <=
SETV D2 1
GOTO 37009
SETV D2 0
COMPAREV D2 0
GOTOCMP 37015 ==; Test 'if'
LOAD D2 0.0009; if() #917 Body Start
SETR GD1 D2
LOAD D2 0.0008
SETR GD2 D2; if() #917 Body End
PUSHR D4
LOAD D2 0.0012; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
PEEK D4
LOAD D2 0.0012; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Params End
CALLFUNC 3.3478; UsrFunc[void EZB_FaceLink(ffc, npc, int)] Call
POP D4
STOREV 0 0.0001; for() #251 setup
LOAD D2 0.0001; for() #251 LoopTest
PUSHR D2
LOAD D2 0.0007
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37074 ==; for() #251 TestFail?
PUSHR D4; if(true) #495 [Opt:AlwaysOn] AND for() #251 Body Start
LOAD D2 0.0012; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHR GD1
SETR D2 GD2
SUBV D2 2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Params End
CALLFUNC 3.3256; UsrFunc[void EZB_DrawTeleport(ffc, npc, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0012; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #251 Body End
LOAD D2 0.0001; for() #251 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 37033; for() #251 End
SETV D2 -2
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
LOAD D2 0.0002
SETR GD10 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFNPC
SETR NPCCOLLDET D2
POPARGS D5 0.0013
RETURNFUNC; Func[void EZB_Teleport(ffc, npc, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[void EZB_Trail(ffc, npc, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 309
STORE D2 0.0002
SETR D3 GD10; InlineFunc[int Game::ComboTile(int)] Params
COMBOTILE D2 D3; InlineFunc[int Game::ComboTile(int)] Body
STORE D2 0.0001
LOAD D2 0.0002; if() #919 Test
ANDV D2 1
COMPAREV D2 0
GOTOCMP 37117 !=
LOAD D2 0.0002
ANDV D2 2
COMPAREV D2 0
GOTOCMP 37117 !=
SETV D2 0
GOTO 37118
SETV D2 1
COMPAREV D2 0
GOTOCMP 37128 ==; Test 'if'
SETR D2 GD10; InlineFunc[int Game::ComboTile(int)] Params Start AND if() #919 Body Start
PUSHR D2
SETR D2 GD4
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[int Game::ComboTile(int)] Params End
COMBOTILE D2 D3; InlineFunc[int Game::ComboTile(int)] Body
STORE D2 0.0001; if() #919 Body End
PUSHR D4
PUSHV 40; UsrFunc[lweapon CreateLWeaponAt(int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[lweapon CreateLWeaponAt(int, int, int)] Params End
CALLFUNC 2.0798; UsrFunc[lweapon CreateLWeaponAt(int, int, int)] Call
POP D4
STORE D2 0
SETV D2 3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNOTILE D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DRAW_STYLE D2
SETV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFLWPN
SETR LWPNDEAD D2
POPARGS D5 0.0006
RETURNFUNC; Func[void EZB_Trail(ffc, npc, int)] Body End
SETR D4 SP2; Func[int EZB_TurnDir4(int, bool)] Body Start
LOAD D2 0; if() #496 Test
COMPAREV D2 0
GOTOCMP 37286 ==; Test 'if'
LOAD D2 0.0001; if() #497 Test AND if() #496 Body Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37261 ==; Test 'if'
SETV D2 2; return Start AND if() #497 Body Start
GOTO 37318; return End
GOTO 37284; if() #497 Body End
LOAD D2 0.0001; if() #498 Test AND if() #497 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37269 ==; Test 'if'
SETV D2 3; return Start AND if() #498 Body Start
GOTO 37318; return End
GOTO 37284; if() #498 Body End
LOAD D2 0.0001; if() #499 Test AND if() #498 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37277 ==; Test 'if'
SETV D2 1; return Start AND if() #499 Body Start
GOTO 37318; return End
GOTO 37284; if() #499 Body End
LOAD D2 0.0001; if() #920 Test AND if() #499 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37284 ==; Test 'if'
SETV D2 0; return Start AND if() #920 Body Start
GOTO 37318; return End AND if() #920 Body End
SETV D2 0; if() #499 Else End AND if() #498 Else End AND if() #497 Else End AND return Start
GOTO 37318; return End AND if() #496 Body End
LOAD D2 0.0001; if() #500 Test AND if() #496 Else Start
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37294 ==; Test 'if'
SETV D2 3; return Start AND if() #500 Body Start
GOTO 37318; return End
GOTO 37317; if() #500 Body End
LOAD D2 0.0001; if() #501 Test AND if() #500 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37302 ==; Test 'if'
SETV D2 2; return Start AND if() #501 Body Start
GOTO 37318; return End
GOTO 37317; if() #501 Body End
LOAD D2 0.0001; if() #502 Test AND if() #501 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37310 ==; Test 'if'
SETV D2 0; return Start AND if() #502 Body Start
GOTO 37318; return End
GOTO 37317; if() #502 Body End
LOAD D2 0.0001; if() #921 Test AND if() #502 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37317 ==; Test 'if'
SETV D2 1; return Start AND if() #921 Body Start
GOTO 37318; return End AND if() #921 Body End
SETV D2 0; if() #502 Else End AND if() #501 Else End AND if() #500 Else End AND return Start
POPARGS D5 0.0002; return End AND if() #496 Else End
RETURNFUNC; Func[int EZB_TurnDir4(int, bool)] Body End
SETR D4 SP2; Func[int EZB_TurnToAngle(int, int, int)] Body Start
PUSHR D4; InlineFunc[int Abs(int)] Params Start AND if() #922 Test
LOAD D2 0.0002; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0663; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37338 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #922 Body Start
GOTO 37357; return End AND if() #922 Body End
LOAD D2 0.0002; InlineFunc[int WrapDegrees(int)] Params Start AND return Start
PUSHR D2
PUSHARGSR D4 0.0002; UsrFunc[int Sign(int)] Params Start
LOAD D2 0.0002; UsrFunc[int EZB_AngDiff(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int EZB_AngDiff(int, int)] Params End
CALLFUNC 3.0663; UsrFunc[int EZB_AngDiff(int, int)] Call
POP D4
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 3.0092; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3; InlineFunc[int WrapDegrees(int)] Params End
WRAPDEGREES D2; InlineFunc[int WrapDegrees(int)] Body
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int EZB_TurnToAngle(int, int, int)] Body End
PUSHV 0; Func[void EZB_UpdateLaserArray(int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #252 setup
LOAD D2 0; for() #252 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37721 ==; for() #252 TestFail?
LOAD D2 0.0003; if() #923 Test AND for() #252 Body Start
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 37717 ==; Test 'if'
LOAD D2 0.0003; if() #503 Test AND if() #923 Body Start
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37546 ==; Test 'if'
PUSHR D4; if() #503 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 2
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 0
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 0
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 4
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
ADDV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003; if() #924 Test
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 4
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 37717 ==; Test 'if'
SETV D2 37; InlineFunc[void Game::PlaySound(int)] Params AND if() #924 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; if() #924 Body End
GOTO 37717; if() #503 Body End
LOAD D2 0.0003; if() #925 Test AND if() #503 Else Start
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 37717 ==; Test 'if'
PUSHR D4; if() #925 Body Start
PUSHV 3; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 2
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 8
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV -1
PUSHV 1
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 5
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 3.2196; UsrFunc[void EZB_DoLaser(int, int, int, int, int, int, int, int, int, int, int)] Call
POP D4
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
ADDV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003; if() #926 Test
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 5
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
POP D0
READPODARRAYR D2 D2
POP D3
COMPARER D3 D2
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 37717 ==; Test 'if'
SETV D2 0; if() #926 Body Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 7
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
MULTV D2 6
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; if() #926 Body End
LOAD D2 0; if() #925 Body End AND if() #503 Else End AND if() #923 Body End AND for() #252 Body End AND for() #252 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37362; for() #252 End
POPARGS D5 0.0004
RETURNFUNC; Func[void EZB_UpdateLaserArray(int, int, int)] Body End
PUSHV 0; Func[void EZB_Waitframes(ffc, npc, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #253 setup
LOAD D2 0; for() #253 LoopTest
PUSHR D2
LOAD D2 0.0001
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 37747 ==; for() #253 TestFail?
PUSHR D4; for() #253 Body Start
LOAD D2 0.0004; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Params End
CALLFUNC 3.4056; UsrFunc[void EZB_Waitframe(ffc, npc, int)] Call
POP D4; for() #253 Body End
LOAD D2 0; for() #253 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 37726; for() #253 End
POPARGS D5 0.0005
RETURNFUNC; Func[void EZB_Waitframes(ffc, npc, int, int)] Body End


PUSHR D0; void run(int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR REFFFC; void run(int, int, int, int, int, int, int) Body Start
SETR D4 SP2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #31 Body [Opt:AlwaysOn]
GOTO 10; while() #31 End AND [Opt:NeverRet] AND void run(int, int, int, int, int, int, int) Body End


PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
SETR D4 SP2
LOAD D2 0.0008; if() #1227 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 27 ==; Test 'if'
PUSHR D4; if() #1227 Body Start
LOAD D2 0.0007; UsrFunc[void EZBE_ExpandingCircle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void EZBE_ExpandingCircle(int, int, int, int)] Params End
CALLFUNC 0.1633; UsrFunc[void EZBE_ExpandingCircle(int, int, int, int)] Call
POP D4; if() #1227 Body End
LOAD D2 0.0008; if() #1228 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 49 ==; Test 'if'
PUSHR D4; if() #1228 Body Start
LOAD D2 0.0007; UsrFunc[void EZBE_WallBounce(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void EZBE_WallBounce(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3702; UsrFunc[void EZBE_WallBounce(int, int, int, int, int, int, int)] Call
POP D4; if() #1228 Body End
LOAD D2 0.0008; if() #1229 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 69 ==; Test 'if'
LOAD D2 0.0007; UsrFunc[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Params Start AND if() #1229 Body Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1763; UsrFunc[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Call AND [Opt:NeverRet] AND if() #1229 Body End
LOAD D2 0.0008; if() #1230 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 91 ==; Test 'if'
PUSHR D4; if() #1230 Body Start
LOAD D2 0.0007; UsrFunc[bool EZBE_Lightning(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool EZBE_Lightning(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2183; UsrFunc[bool EZBE_Lightning(int, int, int, int, int, int, int)] Call
POP D4; if() #1230 Body End
LOAD D2 0.0008; if() #1231 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 113 ==; Test 'if'
PUSHR D4; if() #1231 Body Start
LOAD D2 0.0007; UsrFunc[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3272; UsrFunc[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Call
POP D4; if() #1231 Body End
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
POPARGS D5 0.0009
QUIT; void run(int, int, int, int, int, int, int, int) Body End
SETR D4 SP2; Func[int DirNormal(int)] Body Start
LOAD D2 0; switch() #9 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 8
GOTOCMP 144 ==; case '80000'
COMPAREV SWITCHKEY 9
GOTOCMP 146 ==; case '90000'
COMPAREV SWITCHKEY 10
GOTOCMP 148 ==; case '100000'
COMPAREV SWITCHKEY 11
GOTOCMP 150 ==; case '110000'
COMPAREV SWITCHKEY 12
GOTOCMP 152 ==; case '120000'
COMPAREV SWITCHKEY 13
GOTOCMP 154 ==; case '130000'
COMPAREV SWITCHKEY 14
GOTOCMP 156 ==; case '140000'
COMPAREV SWITCHKEY 15
GOTOCMP 158 ==; case '150000'
GOTO 160; switch() #9 NoMatch
SETV D2 0; Case block AND return Start
GOTO 161; return End
SETV D2 5; Case block AND return Start
GOTO 161; return End
SETV D2 3; Case block AND return Start
GOTO 161; return End
SETV D2 7; Case block AND return Start
GOTO 161; return End
SETV D2 1; Case block AND return Start
GOTO 161; return End
SETV D2 6; Case block AND return Start
GOTO 161; return End
SETV D2 2; Case block AND return Start
GOTO 161; return End
SETV D2 4; Case block AND return Start
GOTO 161; return End
LOAD D2 0; Case block AND return Start
POP D5; return End
RETURNFUNC; Func[int DirNormal(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR D4 SP2; Func[int Rand(int, int)] Body Start
SETV D2 0; InlineFunc[int randgen::Rand(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SETR D3 D2; InlineFunc[int randgen::Rand(int, int)] Params End
POP D2; InlineFunc[int randgen::Rand(int, int)] Body Start
POP REFRNG
RNGRAND3 D2 D3; InlineFunc[int randgen::Rand(int, int)] Body End
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int Rand(int, int)] Body End
PUSHV 0; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #154 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 207 ==; Test 'if'
PUSHR D4; if() #154 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.0344; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #154 Body End
LOAD D2 0.0002; if() #155 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 218 ==; Test 'if'
PUSHR D4; if() #155 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.0504; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #155 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0003; if() #156 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 288 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #156 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #156 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.0557; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #157 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 322 ==; Test 'if'
SETV D2 0; if() #157 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #157 Body End
LOAD D2 0; if() #158 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 339 ==; Test 'if'
PUSHR D4; if() #158 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.0667; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #158 Body End
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #55 Test
COMPAREV D2 129
GOTOCMP 354 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 354 ==
SETV D2 0
GOTO 355
SETV D2 1
COMPAREV D2 0
GOTOCMP 359 ==; Test 'if'
SETV D2 17; return Start AND if() #55 Body Start
GOTO 502; return End AND if() #55 Body End
LOAD D2 0.0003; if() #56 Test AND if() #55 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 366 ==; Test 'if'
SETV D2 18; return Start AND if() #56 Body Start
GOTO 502; return End AND if() #56 Body End
LOAD D2 0.0003; if() #57 Test AND if() #56 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 373 ==; Test 'if'
SETV D2 19; return Start AND if() #57 Body Start
GOTO 502; return End AND if() #57 Body End
LOAD D2 0.0003; if() #58 Test AND if() #57 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 380 ==; Test 'if'
SETV D2 35; return Start AND if() #58 Body Start
GOTO 502; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 387 ==; Test 'if'
SETV D2 81; return Start AND if() #59 Body Start
GOTO 502; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 394 ==; Test 'if'
SETV D2 80; return Start AND if() #60 Body Start
GOTO 502; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 401 ==; Test 'if'
SETV D2 21; return Start AND if() #61 Body Start
GOTO 502; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 408 ==; Test 'if'
SETV D2 20; return Start AND if() #62 Body Start
GOTO 502; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 415 ==; Test 'if'
SETV D2 36; return Start AND if() #63 Body Start
GOTO 502; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 422 ==; Test 'if'
SETV D2 76; return Start AND if() #64 Body Start
GOTO 502; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 429 ==; Test 'if'
SETV D2 77; return Start AND if() #65 Body Start
GOTO 502; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 501 ==; Test 'if'
STOREV 0 0.0002; if() #66 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #43 setup
LOAD D2 0; for() #43 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 485 ==; for() #43 TestFail?
LOAD D2 0; unless() #187 Test AND for() #43 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 481 ==; Test 'unless' AND continue 1; AND unless() #187 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #188 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 481 !=; Test 'if' AND continue 1; AND if() #188 Body
LOAD D2 0.0001; if() #189 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 481 ==; Test 'if'
LOAD D2 0.0001; if() #189 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #190 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 485 !=; Test 'if' AND break 1; AND if() #190 Body
LOAD D2 0; if() #189 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 437; for() #43 End
LOAD D2 0.0002; if() #67 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 492 ==; Test 'if'
SETV D2 4; return Start AND if() #67 Body Start
GOTO 502; return End AND if() #67 Body End
LOAD D2 0.0002; if() #68 Test AND if() #67 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 499 ==; Test 'if'
SETV D2 5; return Start AND if() #68 Body Start
GOTO 502; return End AND if() #68 Body End
SETV D2 6; return Start AND if() #68 Else Start
GOTO 502; return End AND if() #68 Else End AND if() #67 Else End AND if() #66 Body End
SETV D2 0; return Start AND if() #66 Else Start
POPARGS D5 0.0004; return End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #51 Test
COMPAREV D2 129
GOTOCMP 513 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 513 ==
SETV D2 0
GOTO 514
SETV D2 1
COMPAREV D2 0
GOTOCMP 518 ==; Test 'if'
SETV D2 40; return Start AND if() #51 Body Start
GOTO 555; return End AND if() #51 Body End
LOAD D2 0; if() #52 Test AND if() #51 Else Start
COMPAREV D2 134
GOTOCMP 526 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 526 ==
SETV D2 0
GOTO 527
SETV D2 1
COMPAREV D2 0
GOTOCMP 531 ==; Test 'if'
SETV D2 32; return Start AND if() #52 Body Start
GOTO 555; return End AND if() #52 Body End
LOAD D2 0; if() #53 Test AND if() #52 Else Start
COMPAREV D2 140
GOTOCMP 542 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 542 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 542 ==
SETV D2 0
GOTO 543
SETV D2 1
COMPAREV D2 0
GOTOCMP 547 ==; Test 'if'
SETV D2 13; return Start AND if() #53 Body Start
GOTO 555; return End AND if() #53 Body End
LOAD D2 0; if() #54 Test AND if() #53 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 554 ==; Test 'if'
SETV D2 51; return Start AND if() #54 Body Start
GOTO 555; return End AND if() #54 Body End
SETV D2 0; return Start AND if() #54 Else Start
POP D5; return End AND if() #54 Else End AND if() #53 Else End AND if() #52 Else End AND if() #51 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #488 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 574 ==; Test 'if'
LOAD D2 0.0001; if() #488 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #488 Body End
LOAD D2 0.0001; if() #186 Test
COMPAREV D2 0.3927
GOTOCMP 582 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 582 >
SETV D2 0
GOTO 583
SETV D2 1
COMPAREV D2 0
GOTOCMP 588 ==; Test 'if'
SETV D2 3; if() #186 Body Start
STORE D2 0
GOTO 638; if() #186 Body End
LOAD D2 0.0001; if() #187 Test AND if() #186 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 596 ==; Test 'if'
SETV D2 7; if() #187 Body Start
STORE D2 0
GOTO 638; if() #187 Body End
LOAD D2 0.0001; if() #188 Test AND if() #187 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 604 ==; Test 'if'
SETV D2 1; if() #188 Body Start
STORE D2 0
GOTO 638; if() #188 Body End
LOAD D2 0.0001; if() #189 Test AND if() #188 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 612 ==; Test 'if'
SETV D2 6; if() #189 Body Start
STORE D2 0
GOTO 638; if() #189 Body End
LOAD D2 0.0001; if() #190 Test AND if() #189 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 620 ==; Test 'if'
SETV D2 2; if() #190 Body Start
STORE D2 0
GOTO 638; if() #190 Body End
LOAD D2 0.0001; if() #191 Test AND if() #190 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 628 ==; Test 'if'
SETV D2 4; if() #191 Body Start
STORE D2 0
GOTO 638; if() #191 Body End
LOAD D2 0.0001; if() #192 Test AND if() #191 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 636 ==; Test 'if'
SETV D2 0; if() #192 Body Start
STORE D2 0
GOTO 638; if() #192 Body End
SETV D2 5; if() #192 Else Start
STORE D2 0; if() #192 Else End
LOAD D2 0.0002; if() #191 Else End AND if() #190 Else End AND if() #189 Else End AND if() #188 Else End AND if() #187 Else End AND if() #186 Else End AND if() #489 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 656 ==; Test 'if'
PUSHR D4; if() #489 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.0832; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #489 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #210 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 750 ==; Test 'if'
LOAD D2 0.0001; if() #210 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #494 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 689 ==; Test 'if'
LOAD D2 0; if() #494 Body Start
ADDV D2 6.2832
STORE D2 0; if() #494 Body End
LOAD D2 0; if() #211 Test
COMPAREV D2 0.7854
GOTOCMP 697 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 697 >
SETV D2 0
GOTO 698
SETV D2 1
COMPAREV D2 0
GOTOCMP 710 ==; Test 'if'
SETV D2 4; if() #211 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 830; if() #211 Body End
LOAD D2 0; if() #212 Test AND if() #211 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 725 ==; Test 'if'
SETV D2 3; if() #212 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 830; if() #212 Body End
LOAD D2 0; if() #213 Test AND if() #212 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 740 ==; Test 'if'
SETV D2 7; if() #213 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 830; if() #213 Body End
SETV D2 0; if() #213 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #213 Else End
GOTO 830; if() #212 Else End AND if() #211 Else End AND if() #210 Body End
PUSHR D4; if() #210 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.0892; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #214 Test
COMPAREV D2 0
GOTOCMP 769 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 769 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 769 ==
SETV D2 0
GOTO 770
SETV D2 1
COMPAREV D2 0
GOTOCMP 782 ==; Test 'if'
SETV D2 0; if() #214 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 830; if() #214 Body End
LOAD D2 0; if() #215 Test AND if() #214 Else Start
COMPAREV D2 1
GOTOCMP 793 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 793 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 793 ==
SETV D2 0
GOTO 794
SETV D2 1
COMPAREV D2 0
GOTOCMP 806 ==; Test 'if'
SETV D2 3; if() #215 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 830; if() #215 Body End
LOAD D2 0; if() #216 Test AND if() #215 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 821 ==; Test 'if'
SETV D2 7; if() #216 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 830; if() #216 Body End
SETV D2 4; if() #216 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #216 Else End
POPARGS D5 0.0002; if() #215 Else End AND if() #214 Else End AND if() #210 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #683 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 840 ==; Test 'if'
SETV D2 8; return Start AND if() #683 Body Start
GOTO 890; return End AND if() #683 Body End
LOAD D2 0; if() #684 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 847 ==; Test 'if'
SETV D2 12; return Start AND if() #684 Body Start
GOTO 890; return End AND if() #684 Body End
LOAD D2 0; if() #685 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 854 ==; Test 'if'
SETV D2 14; return Start AND if() #685 Body Start
GOTO 890; return End AND if() #685 Body End
LOAD D2 0; if() #686 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 861 ==; Test 'if'
SETV D2 10; return Start AND if() #686 Body Start
GOTO 890; return End AND if() #686 Body End
LOAD D2 0; if() #687 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 868 ==; Test 'if'
SETV D2 15; return Start AND if() #687 Body Start
GOTO 890; return End AND if() #687 Body End
LOAD D2 0; if() #688 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 875 ==; Test 'if'
SETV D2 9; return Start AND if() #688 Body Start
GOTO 890; return End AND if() #688 Body End
LOAD D2 0; if() #689 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 882 ==; Test 'if'
SETV D2 13; return Start AND if() #689 Body Start
GOTO 890; return End AND if() #689 Body End
LOAD D2 0; if() #690 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 889 ==; Test 'if'
SETV D2 11; return Start AND if() #690 Body Start
GOTO 890; return End AND if() #690 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #669 Test
COMPAREV D2 0
GOTOCMP 901 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 901 >
SETV D2 1
GOTO 902
SETV D2 0
COMPAREV D2 0
GOTOCMP 906 ==; Test 'if'
LOAD D2 0; return Start AND if() #669 Body Start
GOTO 963; return End AND if() #669 Body End
LOAD D2 0; if() #670 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 913 ==; Test 'if'
SETV D2 0; return Start AND if() #670 Body Start
GOTO 963; return End AND if() #670 Body End
LOAD D2 0; if() #671 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 920 ==; Test 'if'
SETV D2 5; return Start AND if() #671 Body Start
GOTO 963; return End AND if() #671 Body End
LOAD D2 0; if() #672 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 927 ==; Test 'if'
SETV D2 3; return Start AND if() #672 Body Start
GOTO 963; return End AND if() #672 Body End
LOAD D2 0; if() #673 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 934 ==; Test 'if'
SETV D2 7; return Start AND if() #673 Body Start
GOTO 963; return End AND if() #673 Body End
LOAD D2 0; if() #674 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 941 ==; Test 'if'
SETV D2 1; return Start AND if() #674 Body Start
GOTO 963; return End AND if() #674 Body End
LOAD D2 0; if() #675 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 948 ==; Test 'if'
SETV D2 6; return Start AND if() #675 Body Start
GOTO 963; return End AND if() #675 Body End
LOAD D2 0; if() #676 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 955 ==; Test 'if'
SETV D2 2; return Start AND if() #676 Body Start
GOTO 963; return End AND if() #676 Body End
LOAD D2 0; if() #677 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 962 ==; Test 'if'
SETV D2 4; return Start AND if() #677 Body Start
GOTO 963; return End AND if() #677 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR D4 SP2; Func[int VectorX(int, int)] Body Start
LOAD D2 0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR D4 SP2; Func[int VectorY(int, int)] Body Start
LOAD D2 0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
SETR D4 SP2; Func[int InFrontX(int, int)] Body Start
PUSHR D4; switch() #21 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 0.0124; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 2
GOTOCMP 997 ==; case '20000'
COMPAREV SWITCHKEY 3
GOTOCMP 1000 ==; case '30000'
GOTO 1003; switch() #21 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 1004; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 1004; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontX(int, int)] Body End
SETR D4 SP2; Func[int InFrontY(int, int)] Body Start
PUSHR D4; switch() #22 Key
LOAD D2 0.0001; UsrFunc[int DirNormal(int)] Params Start
PUSHR D2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 0.0124; UsrFunc[int DirNormal(int)] Call
POP D4
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 0
GOTOCMP 1018 ==; case '0'
COMPAREV SWITCHKEY 1
GOTOCMP 1021 ==; case '10000'
GOTO 1024; switch() #22 NoMatch
LOAD D2 0; Case block AND return Start
SUBV D2 16
GOTO 1025; return End
LOAD D2 0; Case block AND return Start
SUBV2 16 D2
GOTO 1025; return End
SETV D2 0; Case block AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int InFrontY(int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body Start
LOAD D2 0.0001; if() #486 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1046 ==; Test 'if'
LOAD D2 0; if() #487 Test AND if() #486 Body Start
COMPAREV D2 1
GOTOCMP 1041 <
LOAD D2 0
COMPAREV D2 511
GOTOCMP 1041 >
SETV D2 0
GOTO 1042
SETV D2 1
COMPAREV D2 0
GOTOCMP 1046 ==; Test 'if'
SETV D2 1; if() #487 Body Start
STORE D2 0.0001; if() #487 Body End
LOAD D2 0.0001; if() #486 Body End
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDeathEffect(eweapon, int, int)] Body End
SETR D4 SP2; Func[void SetEWeaponLifespan(eweapon, int, int)] Body Start
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 512
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponLifespan(eweapon, int, int)] Body End
SETR D4 SP2; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body Start
LOAD D2 0.0008; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
PUSHR D4
LOAD D2 0.0007; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0163; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0009
RETURNFUNC; Func[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Body End
PUSHARGSV 0 0.0003; Func[bool EZBE_CanWalk(int, int, int, int, bool)] Body Start
SETR D4 SP2
STOREV 8 0.0002
LOAD D2 0.0007
ADDV D2 15
STORE D2 0.0001
LOAD D2 0.0006
ADDV D2 15
STORE D2 0
LOAD D2 0.0003; if() #1191 Test
COMPAREV D2 0
GOTOCMP 1211 ==; Test 'if'
SETV D2 0; if() #1191 Body Start
STORE D2 0.0002; if() #1191 Body End
LOAD D2 0.0005; if() #615 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1283 ==; Test 'if'
LOAD D2 0.0006; return Start AND if() #615 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 1278 <
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1278 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1278 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1278 !=
SETV D2 0
GOTO 1279
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 1477; return End
GOTO 1476; if() #615 Body End
LOAD D2 0.0005; if() #616 Test AND if() #615 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1342 ==; Test 'if'
LOAD D2 0; return Start AND if() #616 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
COMPAREV D2 176
GOTOCMP 1337 >=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1337 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
ADDV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1337 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1337 !=
SETV D2 0
GOTO 1338
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 1477; return End
GOTO 1476; if() #616 Body End
LOAD D2 0.0005; if() #617 Test AND if() #616 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1410 ==; Test 'if'
LOAD D2 0.0007; return Start AND if() #617 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
COMPAREV D2 0
GOTOCMP 1405 <
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1405 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
ADDV D2 7
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1405 !=
PUSHR D4
LOAD D2 0.0007; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1405 !=
SETV D2 0
GOTO 1406
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 1477; return End
GOTO 1476; if() #617 Body End
LOAD D2 0.0005; if() #1192 Test AND if() #617 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1476 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #1192 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
COMPAREV D2 256
GOTOCMP 1472 >=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1472 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
ADDV D2 7
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1472 !=
PUSHR D4
LOAD D2 0.0001; UsrFunc[bool EZBE_isSolid(int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[bool EZBE_isSolid(int, int)] Params End
CALLFUNC 0.1479; UsrFunc[bool EZBE_isSolid(int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 1472 !=
SETV D2 0
GOTO 1473
SETV D2 1
COMPAREV D2 0
SETCMP D2 I==
GOTO 1477; return End AND if() #1192 Body End
SETV D2 0; if() #617 Else End AND if() #616 Else End AND if() #615 Else End AND return Start
POPARGS D5 0.0008; return End
RETURNFUNC; Func[bool EZBE_CanWalk(int, int, int, int, bool)] Body End
PUSHV 0; Func[bool EZBE_isSolid(int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0002; InlineFunc[int ComboAt(int, int)] Params Start
PUSHR D2
LOAD D2 0.0001
SETR D3 D2; InlineFunc[int ComboAt(int, int)] Params End
POP D2; InlineFunc[int ComboAt(int, int)] Body Start
COMBO_AT D2 D3; InlineFunc[int ComboAt(int, int)] Body End
PUSHR D2
POP D0
SETR D2 COMBOTD
STORE D2 0
LOAD D2 0; if() #1217 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1498 ==; Test 'if'
SETV D2 0; return Start AND if() #1217 Body Start
GOTO 1552; return End AND if() #1217 Body End
LOAD D2 0; if() #1218 Test
COMPAREV D2 63
GOTOCMP 1509 ==
LOAD D2 0
COMPAREV D2 42
GOTOCMP 1509 ==
LOAD D2 0
COMPAREV D2 20
GOTOCMP 1509 ==
SETV D2 0
GOTO 1510
SETV D2 1
COMPAREV D2 0
GOTOCMP 1514 ==; Test 'if'
SETV D2 0; return Start AND if() #1218 Body Start
GOTO 1552; return End AND if() #1218 Body End
LOAD D2 0; if() #1219 Test
COMPAREV D2 18
GOTOCMP 1525 ==
LOAD D2 0
COMPAREV D2 86
GOTOCMP 1523 <
LOAD D2 0
COMPAREV D2 88
GOTOCMP 1525 <=
SETV D2 0
GOTO 1526
SETV D2 1
COMPAREV D2 0
GOTOCMP 1530 ==; Test 'if'
SETV D2 0; return Start AND if() #1219 Body Start
GOTO 1552; return End AND if() #1219 Body End
LOAD D2 0; if() #1220 Test
COMPAREV D2 19
GOTOCMP 1541 ==
LOAD D2 0
COMPAREV D2 89
GOTOCMP 1539 <
LOAD D2 0
COMPAREV D2 91
GOTOCMP 1541 <=
SETV D2 0
GOTO 1542
SETV D2 1
COMPAREV D2 0
GOTOCMP 1546 ==; Test 'if'
SETV D2 0; return Start AND if() #1220 Body Start
GOTO 1552; return End AND if() #1220 Body End
LOAD D2 0.0002; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0001
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
POPARGS D5 0.0003; return End
RETURNFUNC; Func[bool EZBE_isSolid(int, int)] Body End
PUSHV 0; Func[void EZBE_DamageLink(int)] Body Start
SETR D4 SP2
PUSHR D4
PUSHV 40; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
PUSHR D4
SETV D2 0.0001; UsrFunc[int InFrontX(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 12; UsrFunc[int InFrontX(int, int)] Params End
CALLFUNC 0.0985; UsrFunc[int InFrontX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
PUSHR D4
SETV D2 0.0001; UsrFunc[int InFrontY(int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 12; UsrFunc[int InFrontY(int, int)] Params End
CALLFUNC 0.1006; UsrFunc[int InFrontY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHARGSV 0 0.0002
LOAD D2 0.0001
PUSHR D2
PUSHARGSV -1 0.0002
PUSHV 1; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0194; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_DIR
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params Start
PUSHR D2
PUSHARGSV 1 0.0002; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Params End
CALLFUNC 0.1091; UsrFunc[void SetEWeaponLifespan(eweapon, int, int)] Call
PEEK D4
LOAD D2 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params Start
PUSHR D2
PUSHV 1
PUSHV 0; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Params End
CALLFUNC 0.1027; UsrFunc[void SetEWeaponDeathEffect(eweapon, int, int)] Call
POP D4
POPARGS D5 0.0002
RETURNFUNC; Func[void EZBE_DamageLink(int)] Body End
PUSHARGSV 0 0.0002; Func[void EZBE_ExpandingCircle(int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 0 0
SETV D2 0; for() #402 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #402 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1699 ==; for() #402 TestFail?
LOAD D2 0.0003; for() #402 Body Start
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
MULTV D2 0.2000
STORE D2 0
PUSHV 4; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #402 Body End
LOAD D2 0.0001; for() #402 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 1639; for() #402 End
SETV D2 16; for() #403 setup
STORE D2 0.0001
LOAD D2 0.0001; for() #403 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1761 ==; for() #403 TestFail?
LOAD D2 0.0003; for() #403 Body Start
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
MULTV D2 0.2000
STORE D2 0
PUSHV 4; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
DIVV D2 16
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 1
PUSHV 128; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Params End
CIRCLER; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Circle(int, int, int, int, int, int, int, int, int, bool, int)] Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #403 Body End
LOAD D2 0.0001; for() #403 LoopIncrement
SUBV D2 1
STORE D2 0.0001
GOTO 1701; for() #403 End
POPARGS D5 0.0006; return (Void)
RETURNFUNC; Func[void EZBE_ExpandingCircle(int, int, int, int)] Body End
PUSHARGSV 0 0.0008; Func[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 1 0.0005
LOAD D2 0.0010; if() #1193 Test
COMPAREV D2 0
GOTOCMP 1788 !=
LOAD D2 0.0014
COMPAREV D2 132
GOTOCMP 1786 ==
LOAD D2 0.0014
COMPAREV D2 130
GOTOCMP 1786 ==
LOAD D2 0.0014
COMPAREV D2 134
GOTOCMP 1786 ==
LOAD D2 0.0014
COMPAREV D2 137
GOTOCMP 1786 ==
LOAD D2 0.0014
COMPAREV D2 138
GOTOCMP 1788 !=
SETV D2 1
GOTO 1789
SETV D2 0
COMPAREV D2 0
GOTOCMP 1794 ==; Test 'if'
LOAD D2 0.0005; if() #1193 Body Start
ORV D2 2
STORE D2 0.0005; if() #1193 Body End
LOAD D2 0.0010; if() #618 Test
COMPAREV D2 2000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1806 ==; Test 'if'
LOAD D2 0.0005; if() #618 Body Start
ORV D2 4
STORE D2 0.0005
LOAD D2 0.0010
SUBV D2 2000
STORE D2 0.0010
GOTO 1817; if() #618 Body End
LOAD D2 0.0010; if() #1194 Test AND if() #618 Else Start
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1817 ==; Test 'if'
LOAD D2 0.0005; if() #1194 Body Start
ORV D2 2
STORE D2 0.0005
LOAD D2 0.0010
SUBV D2 1000
STORE D2 0.0010; if() #1194 Body End
LOAD D2 0.0010; if() #618 Else End AND if() #1195 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1824 ==; Test 'if'
SETV D2 -1; if() #1195 Body Start
STORE D2 0.0010; if() #1195 Body End
ALLOCATEMEMV D2 16 0
STORE D2 0.0004
ALLOCATEMEMV D2 16 0
STORE D2 0.0003
ALLOCATEMEMV D2 16 0
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0009; if() #1196 Test
COMPAREV D2 0
GOTOCMP 1836 ==; Test 'if'
LOAD D2 0.0009; InlineFunc[void Game::PlaySound(int)] Params AND if() #1196 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1196 Body End
PUSHR D4
LOAD D2 0.0014; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 200
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0194; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 64
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 1
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
ADDV D2 1
STORE D2 0.0001
SETV D2 0; for() #404 setup AND while(true) #32 Body [Opt:AlwaysOn] Start
STORE D2 0.0007
LOAD D2 0.0007; for() #404 LoopTest
COMPAREV D2 16
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2175 ==; for() #404 TestFail?
LOAD D2 0.0004; InlineFunc[bool eweapon::isValid()] Params Start AND if() #1197 Test AND for() #404 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2; InlineFunc[bool eweapon::isValid()] Params End
ISVALIDEWPN D2; InlineFunc[bool eweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 2171 ==; Test 'if'
LOAD D2 0.0003; if() #1198 Test AND if() #1197 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 16
GOTOCMP 1917 >=
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 3
GOTOCMP 1917 >=
SETV D2 1
GOTO 1918
SETV D2 0
COMPAREV D2 0
GOTOCMP 1933 ==; Test 'if'
SETV D2 0; if() #1198 Body Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #1198 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0007
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0003; if() #1199 Test
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2171 ==; Test 'if'
LOAD D2 0.0002; if() #619 Test AND if() #1199 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2064 ==; Test 'if'
SETV D2 0; for() #405 setup AND if() #619 Body Start
STORE D2 0.0006
LOAD D2 0.0006; for() #405 LoopTest
COMPAREV D2 3
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2171 ==; for() #405 TestFail?
LOAD D2 0.0009; if() #1200 Test AND for() #405 Body Start
COMPAREV D2 0
GOTOCMP 1977 ==; Test 'if'
LOAD D2 0.0009; InlineFunc[void Game::PlaySound(int)] Params AND if() #1200 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1200 Body End
PUSHR D4
LOAD D2 0.0014; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0006; InlineFunc[int DegtoRad(int)] Params Start
MULTV D2 120
SETV D2 120
PUSHR D2
LOAD D2 0.0006
POP D3
MULTR D2 D3
ADDV D2 -90
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 200
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0194; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 56
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 2
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
ADDV D2 1
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2; for() #405 Body End
LOAD D2 0.0006; for() #405 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 1967; for() #405 End
GOTO 2171; if() #619 Body End
LOAD D2 0.0002; if() #1201 Test AND if() #619 Else Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2171 ==; Test 'if'
SETV D2 0; for() #406 setup AND if() #1201 Body Start
STORE D2 0.0006
LOAD D2 0.0006; for() #406 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2171 ==; for() #406 TestFail?
LOAD D2 0.0009; if() #1202 Test AND for() #406 Body Start
COMPAREV D2 0
GOTOCMP 2085 ==; Test 'if'
LOAD D2 0.0009; InlineFunc[void Game::PlaySound(int)] Params AND if() #1202 Body Start
PLAYSOUNDR D2; InlineFunc[void Game::PlaySound(int)] Body AND if() #1202 Body End
PUSHR D4
LOAD D2 0.0014; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0006; InlineFunc[int DegtoRad(int)] Params Start
MULTV D2 90
SETV D2 90
PUSHR D2
LOAD D2 0.0006
POP D3
MULTR D2 D3
ADDV D2 -45
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 200
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0194; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 56
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
SETV D2 3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0001
ADDV D2 1
STORE D2 0.0001
SETV D2 0
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2; for() #406 Body End
LOAD D2 0.0006; for() #406 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 2075; for() #406 End
LOAD D2 0.0007; if() #1201 Body End AND if() #619 Else End AND if() #1199 Body End AND if() #1197 Body End AND for() #404 Body End AND for() #404 LoopIncrement
ADDV D2 1
STORE D2 0.0007
GOTO 1888; for() #404 End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #32 Body [Opt:AlwaysOn] End
GOTO 1886; while() #32 End
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0004
DEALLOCATEMEMR D3; [Opt:NeverRet] AND Func[void EZBE_HelmasaurShot(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0010; Func[bool EZBE_Lightning(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0009
ALLOCATEMEMV D2 64 0
STORE D2 0.0008
ALLOCATEMEMV D2 64 0
STORE D2 0.0007
ALLOCATEMEMV D2 64 0
STORE D2 0.0006
ALLOCATEMEMV D2 64 0
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0008; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHV -64
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2486; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHV -32
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2486; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHARGSV 32 0.0002; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2486; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0016
PUSHR D2
LOAD D2 0.0015
PUSHR D2
PUSHV 32
LOAD D2 0.0014
PUSHR D2
PUSHV 64
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2486; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
POP D4
ALLOCATEMEMV D2 3 0
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0013
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0012
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0011
POP D0
WRITEPODARRAYVR 2 D2
POP D2
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETV D2 0; for() #407 setup
STORE D2 0.0009
LOAD D2 0.0009; for() #407 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2366 ==; for() #407 TestFail?
LOAD D2 0.0003; for() #407 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0009; if() #1203 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2300 ==; Test 'if'
LOAD D2 0.0002; if() #1203 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1203 Body End
PUSHR D4
LOAD D2 0.0008; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0009
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #407 Body End
LOAD D2 0.0009; for() #407 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 2268; for() #407 End
SETV D2 0; for() #408 setup
STORE D2 0.0009
LOAD D2 0.0009; for() #408 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2462 ==; for() #408 TestFail?
LOAD D2 0.0003; for() #408 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0009; if() #1204 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2400 ==; Test 'if'
LOAD D2 0.0002; if() #1204 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1204 Body End
PUSHR D4
LOAD D2 0.0008; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0007; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0006; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
PEEK D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0009
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #408 Body End
LOAD D2 0.0009; for() #408 LoopIncrement
ADDV D2 1
STORE D2 0.0009
GOTO 2368; for() #408 End
SETV D2 0; return Start
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0006
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 2484; return End
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0006
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0017
RETURNFUNC; Func[bool EZBE_Lightning(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZBF_LightningInit(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
PUSHR D4
PUSHV -40; UsrFunc[int Rand(int, int)] Params Start
PUSHV 40; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
STORE D2 0.0001
STOREV 0 0; for() #412 setup
LOAD D2 0; for() #412 LoopTest
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2684 ==; for() #412 TestFail?
LOAD D2 0; for() #412 Body Start
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
MULTV D2 320
SETV D2 320
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0004
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
STORE D2 0.0003
PUSHR D4
LOAD D2 0.0007; UsrFunc[int Rand(int, int)] Params Start
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int Rand(int, int)] Params End
CALLFUNC 0.0182; UsrFunc[int Rand(int, int)] Call
POP D4
MULTV D2 0.5000
STORE D2 0.0002
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0010
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0; if() #1221 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2573 ==; Test 'if'
SETV D2 0; if() #1221 Body Start
STORE D2 0.0002; if() #1221 Body End
LOAD D2 0.0012
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0006
LOAD D2 0.0011
PUSHR D2
PUSHR D4
LOAD D2 0.0004; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0003; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
PUSHR D2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0009
ADDV D2 90
PUSHR D2
LOAD D2 0.0001
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0005
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
ADDV D2 1
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for() #412 Body End
LOAD D2 0; for() #412 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 2500; for() #412 End
POPARGS D5 0.0014
RETURNFUNC; Func[void EZBF_LightningInit(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0009; Func[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
SETR D2 LINKHP; if() #1222 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3270 !=; Test 'if' AND return (Void) AND if() #1222 Body
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0015
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0008
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0; for() #413 setup
LOAD D2 0; for() #413 LoopTest
PUSHR D2
LOAD D2 0.0015
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3270 ==; for() #413 TestFail?
LOAD D2 0.0013; if() #624 Test AND for() #413 Body Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 2741 <=
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 2741 >=
SETV D2 1
GOTO 2742
SETV D2 0
COMPAREV D2 0
GOTOCMP 2925 ==; Test 'if'
LOAD D2 0.0016; if() #624 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0004
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0002
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0163; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0006
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0002
LOAD D2 0.0003
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0001
PUSHR D4
PUSHV 4; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
LOAD D2 0.0011
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 0.1137; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHR D4; if() #1223 Test
LOAD D2 0.0004; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 11
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 11
PUSHR D2
PUSHV 0; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3432; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3266 ==; Test 'if'
PUSHR D4; if() #1223 Body Start
LOAD D2 0.0009; UsrFunc[void EZBE_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZBE_DamageLink(int)] Params End
CALLFUNC 0.1554; UsrFunc[void EZBE_DamageLink(int)] Call
POP D4; if() #1223 Body End
GOTO 3266; if() #624 Body End
LOAD D2 0.0014; if() #625 Test AND if() #624 Else Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 2948 <=
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 2948 >=
SETV D2 1
GOTO 2949
SETV D2 0
COMPAREV D2 0
GOTOCMP 3132 ==; Test 'if'
LOAD D2 0.0016; if() #625 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0004
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0002
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
PUSHR D4
LOAD D2 0.0004; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0163; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0007
LOAD D2 0.0004; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0006
LOAD D2 0.0014
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0008
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0005
LOAD D2 0.0004
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorX(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0004
LOAD D2 0.0003
PUSHR D2
PUSHR D4
LOAD D2 0.0006; UsrFunc[int VectorY(int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0003
PUSHR D4
PUSHV 4; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
LOAD D2 0.0011
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 0.1137; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHR D4; if() #1224 Test
LOAD D2 0.0004; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 11
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 11
PUSHR D2
PUSHV 0; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3432; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3266 ==; Test 'if'
PUSHR D4; if() #1224 Body Start
LOAD D2 0.0009; UsrFunc[void EZBE_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZBE_DamageLink(int)] Params End
CALLFUNC 0.1554; UsrFunc[void EZBE_DamageLink(int)] Call
POP D4; if() #1224 Body End
GOTO 3266; if() #625 Body End
LOAD D2 0.0014; if() #1225 Test AND if() #625 Else Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 3155 >
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
ADDV D2 1
POP D3
MULTR D2 D3
POP D3
COMPARER D3 D2
GOTOCMP 3155 <
SETV D2 1
GOTO 3156
SETV D2 0
COMPAREV D2 0
GOTOCMP 3266 ==; Test 'if'
LOAD D2 0.0016; if() #1225 Body Start
PUSHR D2
LOAD D2 0
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0004
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0003
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
POP D0
READPODARRAYR D2 D2
STORE D2 0.0002
LOAD D2 0.0016
PUSHR D2
LOAD D2 0
ADDV D2 1
MULTV D2 2
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
PUSHR D4
PUSHV 4; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
PUSHV 1
LOAD D2 0.0011
PUSHR D2
PUSHV 1
PUSHV 128; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Params End
CALLFUNC 0.1137; UsrFunc[void EZB_DrawThickLine(int, int, int, int, int, int, int, bool, int)] Call
POP D4
PUSHV 4; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params Start
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0010
PUSHR D2
PUSHV 1
PUSHARGSV 0 0.0003
PUSHV 128; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Params End
LINER; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::Line(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHR D4; if() #1226 Test
LOAD D2 0.0004; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 4
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 11
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 11
PUSHR D2
PUSHV 0; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.3432; UsrFunc[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3266 ==; Test 'if'
PUSHR D4; if() #1226 Body Start
LOAD D2 0.0009; UsrFunc[void EZBE_DamageLink(int)] Params Start
PUSHR D2; UsrFunc[void EZBE_DamageLink(int)] Params End
CALLFUNC 0.1554; UsrFunc[void EZBE_DamageLink(int)] Call
POP D4; if() #1226 Body End
LOAD D2 0; if() #1225 Body End AND if() #625 Else End AND if() #624 Else End AND for() #413 Body End AND for() #413 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 2709; for() #413 End
POPARGS D5 0.0017
RETURNFUNC; Func[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0006
ALLOCATEMEMV D2 64 0
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0013
PUSHR D2
LOAD D2 0.0012
PUSHR D2
PUSHV 32
LOAD D2 0.0011
PUSHR D2
PUSHV 0
PUSHV 32; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2486; UsrFunc[void EZBF_LightningInit(int, int, int, int, int, int, int)] Call
POP D4
ALLOCATEMEMV D2 3 0
PUSHR D2
SETR D0 D2
PUSHR D0
LOAD D2 0.0010
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0009
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0008
POP D0
WRITEPODARRAYVR 2 D2
POP D2
STORE D2 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
STOREV 0 0
SETV D2 0; for() #409 setup
STORE D2 0.0006
LOAD D2 0.0006; for() #409 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3366 ==; for() #409 TestFail?
LOAD D2 0.0003; for() #409 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0006; if() #1205 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3345 ==; Test 'if'
LOAD D2 0.0002; if() #1205 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1205 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
PUSHV 0
LOAD D2 0.0006
PUSHR D2
PUSHV 20
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #409 Body End
LOAD D2 0.0006; for() #409 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 3313; for() #409 End
SETV D2 0; for() #410 setup
STORE D2 0.0006
LOAD D2 0.0006; for() #410 LoopTest
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3420 ==; for() #410 TestFail?
LOAD D2 0.0003; for() #410 Body Start
PUSHR D2
LOAD D2 0.0002
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0.0001
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
ADDV D2 1
MODV D2 3
POP D0
READPODARRAYR D2 D2
STORE D2 0
LOAD D2 0.0006; if() #1206 Test
MODV D2 3
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3400 ==; Test 'if'
LOAD D2 0.0002; if() #1206 Body Start
ADDV D2 1
STORE D2 0.0002
LOAD D2 0.0002
MODV D2 3
STORE D2 0.0002; if() #1206 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
PUSHV 32
LOAD D2 0.0006
PUSHR D2
PUSHARGSV 20 0.0002
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.2686; UsrFunc[void EZBF_LightningUpdate(int, int, int, int, int, int, int, int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND for() #410 Body End
LOAD D2 0.0006; for() #410 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 3368; for() #410 End
SETV D2 0; return Start
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
GOTO 3430; return End
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
POPARGS D5 0.0014
RETURNFUNC; Func[bool EZBE_LightningSingle(int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0004; Func[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
STORE D2 0.0008
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0006
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0005
LOAD D2 0.0010; if() #620 Test
PUSHR D2
LOAD D2 0.0012
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3635 ==; Test 'if'
LOAD D2 0.0008; if() #620 Body Start
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0003
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0010
PUSHR D2
LOAD D2 0.0012
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0011
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0009
PUSHR D2
LOAD D2 0.0011
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0008; InlineFunc[int Max(int, int)] Params Start AND if() #621 Test
PUSHVARGR D2
LOAD D2 0.0006
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0012; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0010
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3590 <
LOAD D2 0.0008; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0006
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0012; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0010
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3590 >
LOAD D2 0.0007; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0011; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3590 <
LOAD D2 0.0007; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0011; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0009
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3590 >
SETV D2 1
GOTO 3591
SETV D2 0
COMPAREV D2 0
GOTOCMP 3632 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int Min(int, int)] Params Start AND if() #622 Test AND if() #621 Body Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3623 >
LOAD D2 0.0007; InlineFunc[int Max(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0005
PUSHVARGR D2; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0
PUSHVARGR D2; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
POP D3
COMPARER D3 D2
GOTOCMP 3623 <
SETV D2 0
GOTO 3624
SETV D2 1
COMPAREV D2 0
GOTOCMP 3629 ==; Test 'if'
SETV D2 0; return Start AND if() #622 Body Start
GOTO 3700; return End
GOTO 3699; if() #622 Body End
SETV D2 1; return Start AND if() #622 Else Start
GOTO 3700; return End AND if() #622 Else End
GOTO 3699; if() #621 Body End
SETV D2 0; return Start AND if() #621 Else Start
GOTO 3700; return End AND if() #621 Else End
GOTO 3699; if() #620 Body End
LOAD D2 0.0012; if() #1207 Test AND if() #620 Else Start
PUSHR D2
LOAD D2 0.0008
POP D3
COMPARER D3 D2
GOTOCMP 3649 <
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0006
POP D3
COMPARER D3 D2
GOTOCMP 3649 >
SETV D2 1
GOTO 3650
SETV D2 0
COMPAREV D2 0
GOTOCMP 3699 ==; Test 'if'
LOAD D2 0.0011; if() #1207 Body Start
STORE D2 0.0003
LOAD D2 0.0009
STORE D2 0.0002
LOAD D2 0.0003; if() #1208 Test
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3668 ==; Test 'if'
LOAD D2 0.0009; if() #1208 Body Start
STORE D2 0.0003
LOAD D2 0.0011
STORE D2 0.0002; if() #1208 Body End
LOAD D2 0.0007; if() #1209 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 3680 <
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 3694 <=
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 3692 <
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 3694 <=
SETV D2 0
GOTO 3695
SETV D2 1
COMPAREV D2 0
GOTOCMP 3699 ==; Test 'if'
SETV D2 1; return Start AND if() #1209 Body Start
GOTO 3700; return End AND if() #1209 Body End
SETV D2 0; if() #1207 Body End AND if() #620 Else End AND return Start
POPARGS D5 0.0013; return End
RETURNFUNC; Func[bool EZBE_LineBoxCollision(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void EZBE_WallBounce(int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0.0006
STOREV 1 0.0005
LOAD D2 0.0008; if() #1210 Test
COMPAREV D2 0
GOTOCMP 3726 !=
LOAD D2 0.0013
COMPAREV D2 132
GOTOCMP 3724 ==
LOAD D2 0.0013
COMPAREV D2 130
GOTOCMP 3724 ==
LOAD D2 0.0013
COMPAREV D2 134
GOTOCMP 3724 ==
LOAD D2 0.0013
COMPAREV D2 137
GOTOCMP 3724 ==
LOAD D2 0.0013
COMPAREV D2 138
GOTOCMP 3726 !=
SETV D2 1
GOTO 3727
SETV D2 0
COMPAREV D2 0
GOTOCMP 3732 ==; Test 'if'
LOAD D2 0.0005; if() #1210 Body Start
ORV D2 2
STORE D2 0.0005; if() #1210 Body End
LOAD D2 0.0008; if() #623 Test
COMPAREV D2 2000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 3744 ==; Test 'if'
LOAD D2 0.0005; if() #623 Body Start
ORV D2 4
STORE D2 0.0005
LOAD D2 0.0008
SUBV D2 2000
STORE D2 0.0008
GOTO 3755; if() #623 Body End
LOAD D2 0.0008; if() #1211 Test AND if() #623 Else Start
COMPAREV D2 1000
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 3755 ==; Test 'if'
LOAD D2 0.0005; if() #1211 Body Start
ORV D2 2
STORE D2 0.0005
LOAD D2 0.0008
SUBV D2 1000
STORE D2 0.0008; if() #1211 Body End
LOAD D2 0.0008; if() #623 Else End AND if() #1212 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3762 ==; Test 'if'
SETV D2 -1; if() #1212 Body Start
STORE D2 0.0008; if() #1212 Body End
PUSHR D4
LOAD D2 0.0013; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0010; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
PUSHV 0
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0008
PUSHR D2
PUSHV 0
LOAD D2 0.0005
PUSHR D2; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.0194; UsrFunc[eweapon FireEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
STORE D2 0.0004
STOREV 10 0.0003
LOAD D2 0.0009
DIVV D2 100
STORE D2 0.0009
LOAD D2 0.0004; while() #33 Test AND InlineFunc[bool eweapon::isValid()] Params
ISVALIDEWPN D2; InlineFunc[bool eweapon::isValid()] Body
COMPAREV D2 0
GOTOCMP 4004 ==; Test 'while'
PUSHR D4; while() #33 Body Start
LOAD D2 0.0009; UsrFunc[int VectorX(int, int)] Params Start
DIVV D2 100
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
STORE D2 0.0002
PUSHR D4
LOAD D2 0.0009; UsrFunc[int VectorY(int, int)] Params Start
DIVV D2 100
PUSHR D2
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0006; for() #411 LoopTest
PUSHR D2
LOAD D2 0.0009
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3994 ==; for() #411 TestFail?
LOAD D2 0.0012; for() #411 Body Start
PUSHR D2
PUSHR D4
PUSHV 1; UsrFunc[int VectorX(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0965; UsrFunc[int VectorX(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0012
LOAD D2 0.0011
PUSHR D2
PUSHR D4
PUSHV 1; UsrFunc[int VectorY(int, int)] Params Start
LOAD D2 0.0010
PUSHR D2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0975; UsrFunc[int VectorY(int, int)] Call
POP D4
POP D3
ADDR D2 D3
STORE D2 0.0011
LOAD D2 0.0012
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0011
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0002; if() #1213 Test
COMPAREV D2 0
GOTOCMP 3877 >=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHV 2
PUSHARGSV 1 0.0002; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.1197; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3897 ==
LOAD D2 0.0002
COMPAREV D2 0
GOTOCMP 3895 <=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHV 3
PUSHARGSV 1 0.0002; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.1197; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3897 ==
SETV D2 0
GOTO 3898
SETV D2 1
COMPAREV D2 0
GOTOCMP 3905 ==; Test 'if'
LOAD D2 0.0002; if() #1213 Body Start
SUBV2 0 D2
STORE D2 0.0002
SETV D2 1
STORE D2 0; if() #1213 Body End
LOAD D2 0.0001; if() #1214 Test
COMPAREV D2 0
GOTOCMP 3923 >=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHV 0
PUSHARGSV 1 0.0002; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.1197; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3942 ==
LOAD D2 0.0001
COMPAREV D2 0
GOTOCMP 3940 <=
PUSHR D4
LOAD D2 0.0004; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
PUSHARGSV 1 0.0003; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.1197; UsrFunc[bool EZBE_CanWalk(int, int, int, int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 3942 ==
SETV D2 0
GOTO 3943
SETV D2 1
COMPAREV D2 0
GOTOCMP 3950 ==; Test 'if'
LOAD D2 0.0001; if() #1214 Body Start
SUBV2 0 D2
STORE D2 0.0001
SETV D2 1
STORE D2 0; if() #1214 Body End
LOAD D2 0; if() #1215 Test
COMPAREV D2 0
GOTOCMP 3990 ==; Test 'if'
PUSHR D4; if() #1215 Body Start
PUSHARGSV 0 0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0001
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0163; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0010
LOAD D2 0.0010; InlineFunc[int DegtoRad(int)] Params Start
SETR D3 D2; InlineFunc[int DegtoRad(int)] Params End
DEGTORAD D2 D3; InlineFunc[int DegtoRad(int)] Body
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0003
SUBV D2 1
STORE D2 0.0003
LOAD D2 0.0003; if() #1216 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3990 ==; Test 'if'
SETV D2 0; if() #1216 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2; if() #1216 Body End
LOAD D2 0.0006; if() #1215 Body End AND for() #411 Body End AND for() #411 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 3811; for() #411 End
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0009; InlineFunc[int Floor(int)] Params
FLOOR D2; InlineFunc[int Floor(int)] Body
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0006
WAITFRAME; InlineFunc[void Waitframe()] Body AND while() #33 Body End
GOTO 3788; while() #33 End
POPARGS D5 0.0014
RETURNFUNC; Func[void EZBE_WallBounce(int, int, int, int, int, int, int)] Body End


PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
SETR D4 SP2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #34 Body [Opt:AlwaysOn]
GOTO 11; while() #34 End AND [Opt:NeverRet] AND void run(int, int, int, int, int, int, int, int) Body End


PUSHR D0; void run(int, int, int, int, int, int, int, int) Params
PUSHR D1
PUSHR D2
PUSHR D3
PUSHR D4
PUSHR D5
PUSHR D6
PUSHR D7
PUSHR REFFFC; void run(int, int, int, int, int, int, int, int) Body Start
SETR D4 SP2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #35 Body [Opt:AlwaysOn]
GOTO 11; while() #35 End AND [Opt:NeverRet] AND void run(int, int, int, int, int, int, int, int) Body End


PUSHV 0; void run() Body Start
SETR D4 SP2
PUSHR D4
CALLFUNC 0.2416; UsrFunc[void StartGhostZH()] Call
POP D4
PUSHR D4; while(true) #8 Body [Opt:AlwaysOn] Start
CALLFUNC 0.8831; UsrFunc[void UpdateGhostZH1()] Call
POP D4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR D4
CALLFUNC 0.8893; UsrFunc[void UpdateGhostZH2()] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 6; while() #8 End AND [Opt:NeverRet] AND void run() Body End
SETR D4 SP2; Func[int RadianAngle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR D4 SP2; Func[int Randf(int)] Body Start
SETV D2 0; InlineFunc[long randgen::LRand(long)] Params Start AND return Start
PUSHR D2
LOAD D2 0; InlineFunc[long randgen::LRand(long)] Params End
POP REFRNG; InlineFunc[long randgen::LRand(long)] Body Start
RNGLRAND2 D2; InlineFunc[long randgen::LRand(long)] Body End
POP D5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR D4 SP2; Func[int Angle(int, int, int, int)] Body Start
LOAD D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR D2
LOAD D2 0.0003
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
SETR D3 D2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
POPARGS D5 0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0 0.0007; Func[void AutoGhost()] Body Start
SETR D4 SP2
SETR D2 GD26; if() #11 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
GOTOCMP 435 !=; Test 'if' AND return (Void) AND if() #11 Body
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
SETR D2 NPCCOUNT; for() #2 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #2 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 435 ==; for() #2 TestFail?
LOAD D2 0.0003; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #2 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
LOAD D2 0.0006; if() #12 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 20
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 431 !=; Test 'if' AND continue 1; AND if() #12 Body
LOAD D2 0.0006; if() #13 Test
PUSHR D2
POP REFNPC
SETR D2 NPCID
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 431 !=; Test 'if' AND continue 1; AND if() #13 Body
LOAD D2 0.0006; if() #14 Test AND if(false) #13 [Opt:AlwaysOff]
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
GOTOCMP 431 !=; Test 'if' AND continue 1; AND if() #14 Body
LOAD D2 0.0006; unless() #15 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 431 ==; Test 'unless' AND continue 1; AND unless() #15 Body
LOAD D2 0.0006; unless() #16 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
COMPAREV D2 0
GOTOCMP 431 ==; Test 'unless' AND continue 1; AND unless() #16 Body
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0006; if(false) #14 [Opt:AlwaysOff]
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0001
LOAD D2 0.0006
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFNPC
SETR D2 NPCDD
STORE D2 0.0002
LOAD D2 0.0002; if() #17 Test
COMPAREV D2 -1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 166 ==; Test 'if'
ALLOCATEMEMV D2 2 0; if() #17 Body Start
STORE D2 0
PUSHR D4
LOAD D2 0.0006; UsrFunc[int __AutoGhostParseName(npc, int[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; UsrFunc[int __AutoGhostParseName(npc, int[])] Params End
CALLFUNC 0.0437; UsrFunc[int __AutoGhostParseName(npc, int[])] Call
POP D4
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 0
STORE D2 0.0002
LOAD D3 0
DEALLOCATEMEMR D3; if() #17 Body End
LOAD D2 0.0002; if() #18 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 185 ==; Test 'if'
ALLOCATEMEMV D2 47 0; if() #18 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, script <= 0\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0737; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 431; continue 1; AND if() #18 Body End
LOAD D2 0.0002; if() #19 Test
COMPAREV D2 511
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 204 ==; Test 'if'
ALLOCATEMEMV D2 48 0; if() #19 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, script > 511\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0737; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 431; continue 1; AND if() #19 Body End
PUSHR D4
LOAD D2 0.0005; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR D2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.0788; UsrFunc[int FindUnusedFFC(int)] Call
POP D4
STORE D2 0.0005
LOAD D2 0.0005; unless() #20 Test
COMPAREV D2 0
GOTOCMP 227 !=; Test 'unless'
ALLOCATEMEMV D2 52 0; unless() #20 Body Start
STORE D2 0
WRITEPODSTRING D2 "ghost.zh: failed to create enemy, no ffc available\n"
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
LOAD D3 0
DEALLOCATEMEMR D3
PUSHR D4
LOAD D2 0.0006; UsrFunc[void __AutoGhostKill(npc)] Params Start
PUSHR D2; UsrFunc[void __AutoGhostKill(npc)] Params End
CALLFUNC 0.0737; UsrFunc[void __AutoGhostKill(npc)] Call
POP D4
GOTO 431; continue 1; AND unless() #20 Body End
LOAD D2 0.0005; InlineFunc[ffc screendata::LoadFFC(int)] Params
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0004
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_CSET
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_CSET D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
SETV D2 1
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0006
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR XD2 D2
SETV D2 0
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR YD2 D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0006
PUSHR D2
POP REFNPC
SETR D2 NPCID
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
SETV D2 1; if(true) #21 [Opt:AlwaysOn]
PUSHR D2
LOAD D2 0.0004
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFFLAGSD D2
LOAD D2 0.0001; if() #22 Test
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 401 ==; Test 'if'
LOAD D2 0.0001; if() #23 Test AND if() #22 Body Start
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 401 ==; Test 'if'
SETV D2 3; if() #23 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
SETV D2 1024
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #23 Body End
LOAD D2 0.0001; if() #22 Body End AND if() #15 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 419 ==; Test 'if'
SETV D2 1; if() #15 Body Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 431; if() #15 Body End
LOAD D2 0.0001; if() #15 Else Start
PUSHR D2
LOAD D2 0.0006
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #15 Else End
LOAD D2 0.0003; for() #2 Body End AND for() #2 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 73; for() #2 End
POPARGS D5 0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0 0.0009; Func[int __AutoGhostParseName(npc, int[])] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 64 0
STORE D2 0.0008
ALLOCATEMEMV D2 64 0
STORE D2 0.0007
SETV D2 1
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0010; InlineFunc[void npc::GetName(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008; InlineFunc[void npc::GetName(char32[])] Params End
POP REFNPC; InlineFunc[void npc::GetName(char32[])] Body Start
NPCNAME D2; InlineFunc[void npc::GetName(char32[])] Body End
STOREV 0 0.0006; for() #145 setup
LOAD D2 0.0006; for() #145 LoopTest
COMPAREV D2 63
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 675 ==; for() #145 TestFail?
LOAD D2 0.0008; if() #552 Test AND for() #145 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 64
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 671 ==; Test 'if'
LOAD D2 0.0008; if() #552 Body Start
PUSHR D2
LOAD D2 0.0006
ADDV D2 1
POP D0
READPODARRAYR D2 D2
STORE D2 0.0005
PUSHR D4; if() #288 Test
LOAD D2 0.0005; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.9015; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 578 ==; Test 'if'
STOREV 0 0.0004; if() #288 Body Start
LOAD D2 0.0006; for() #146 setup
ADDV D2 1
STORE D2 0.0006
PUSHR D4; for() #146 LoopTest
LOAD D2 0.0008; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.9015; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP D4
COMPAREV D2 0
GOTOCMP 520 ==; for() #146 TestFail?
LOAD D2 0.0008; for() #146 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #146 Body End
LOAD D2 0.0006; for() #146 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 488; for() #146 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int Game::GetFFCScript(char32[])] Params
GETFFCSCRIPT D2; InlineFunc[int Game::GetFFCScript(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006
LOAD D2 0.0009; if() #553 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 671 ==; Test 'if'
ALLOCATEMEMV D2 59 0; if() #553 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script does not exist.\n"
STORE D2 0.0002
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Script name: %s\n"
STORE D2 0
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 735; return End
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0002
DEALLOCATEMEMR D3; if() #553 Body End
GOTO 671; if() #288 Body End
LOAD D2 0.0005; if() #554 Test AND if() #288 Else Start
COMPAREV D2 48
GOTOCMP 584 <
LOAD D2 0.0005
COMPAREV D2 57
GOTOCMP 589 <=
LOAD D2 0.0005
COMPAREV D2 45
GOTOCMP 589 ==
SETV D2 0
GOTO 590
SETV D2 1
COMPAREV D2 0
GOTOCMP 671 ==; Test 'if'
STOREV 0 0.0004; if() #554 Body Start
LOAD D2 0.0005; if() #555 Test
COMPAREV D2 45
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 609 ==; Test 'if'
SETV D2 45; if() #555 Body Start
PUSHR D2
LOAD D2 0.0007
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 1
STORE D2 0.0004
LOAD D2 0.0006
ADDV D2 1
STORE D2 0.0006; if() #555 Body End
LOAD D2 0.0006; for() #147 setup
ADDV D2 1
STORE D2 0.0006
LOAD D2 0.0008; for() #147 LoopTest
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 48
GOTOCMP 628 <
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
COMPAREV D2 57
GOTOCMP 628 >
SETV D2 1
GOTO 629
SETV D2 0
COMPAREV D2 0
GOTOCMP 651 ==; for() #147 TestFail?
LOAD D2 0.0008; for() #147 Body Start
PUSHR D2
LOAD D2 0.0006
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0004
ADDV D2 1
STORE D2 0.0004; for() #147 Body End
LOAD D2 0.0006; for() #147 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 612; for() #147 End
SETV D2 0
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0004
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2
LOAD D2 0.0007; InlineFunc[int atoi(char32[])] Params Start
SETR D3 D2; InlineFunc[int atoi(char32[])] Params End
ATOI D2 D3; InlineFunc[int atoi(char32[])] Body
PUSHR D2
LOAD D2 0.0009
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
LOAD D2 0.0006
SUBV D2 1
STORE D2 0.0006; if() #554 Body End
LOAD D2 0.0006; if() #288 Else End AND if() #552 Body End AND for() #145 Body End AND for() #145 LoopIncrement
ADDV D2 1
STORE D2 0.0006
GOTO 455; for() #145 End
LOAD D2 0.0009; if() #557 Test AND unless(false) #556 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 0
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 725 ==; Test 'if'
ALLOCATEMEMV D2 54 0; if() #557 Body Start
WRITEPODSTRING D2 "ghost.zh: AutoGhost setup failed - script not found.\n"
STORE D2 0.0005
ALLOCATEMEMV D2 80 0
WRITEPODSTRING D2 "  Enemy name: %s\n"
STORE D2 0.0003
ALLOCATEMEMV D2 55 0
WRITEPODSTRING D2 "  Script name should start after this character: %c\n"
STORE D2 0.0001
LOAD D2 0.0005; InlineFunc[void printf(char32[])] Params Start
PUSHR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0008
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGV 64; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
SETV D2 0; return Start
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 735; return End
LOAD D3 0.0001
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3; if() #557 Body End
SETV D2 1; return Start
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
GOTO 735; return End
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
POPARGS D5 0.0011
RETURNFUNC; Func[int __AutoGhostParseName(npc, int[])] Body End
SETR D4 SP2; Func[void __AutoGhostKill(npc)] Body Start
SETV D2 65536
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
SETV D2 1024
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 -1000
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCHP D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFNPC
SETR NPCITEMSET D2
POP D5
RETURNFUNC; Func[void __AutoGhostKill(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR D4 SP2
STOREV 0 0.0001
LOAD D2 0.0002; InlineFunc[int Max(int, int)] Params Start AND for() #38 setup
ADDV D2 1
PUSHVARGR D2
PUSHVARGV 1; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
STORE D2 0
LOAD D2 0; for() #38 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 846 ==; for() #38 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #38 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #151 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 822 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 822 ==
SETV D2 0
GOTO 823
SETV D2 1
COMPAREV D2 0
GOTOCMP 842 ==; Test 'if'
LOAD D2 0.0001; unless() #152 Test AND if() #151 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 842 !=; Test 'unless'
LOAD D2 0.0001; unless() #153 Test AND unless() #152 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 842 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #153 Body Start
GOTO 847; return End AND unless() #153 Body End
LOAD D2 0; unless() #152 Body End AND if() #151 Body End AND for() #38 Body End AND for() #38 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 797; for() #38 End
SETV D2 0; return Start
POPARGS D5 0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR D4 SP2; Func[int CenterX(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterX(eweapon)] Body End
SETR D4 SP2; Func[int CenterY(eweapon)] Body Start
LOAD D2 0; return Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
POP D5; return End
RETURNFUNC; Func[int CenterY(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR D4 SP2
SETR D2 LINKHP; if() #66 Test
COMPAREV D2 0
GOTOCMP 903 >
GOTO 903
SETV D2 1
GOTO 904
SETV D2 0
COMPAREV D2 0
GOTOCMP 953 ==; Test 'if'
STOREV 0 0.0001; if() #66 Body Start
STOREV 1 0; for() #3 setup
LOAD D2 0; for() #3 LoopTest
COMPAREV D2 32
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 953 ==; for() #3 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #3 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
SETR D2 GD24; if() #67 Test
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
RSHIFTV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
ANDV D2 15
SETV D3 1
LSHIFTR D3 D2
SETR D2 D3
POP D3
ANDR D2 D3
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 949 ==; Test 'if'
SETV D2 0; if() #67 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2; if() #67 Body End
LOAD D2 0; for() #3 Body End AND for() #3 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 908; for() #3 End
POPARGS D5 0.0002; if() #66 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSV 0 0.0002; Func[void DrawEWeaponShadow(eweapon)] Body Start
SETR D4 SP2
PUSHR D4
LOAD D2 0.0002; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X_OFFSET
POP D3
ADDR D2 D3
STORE D2 0.0001
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
SUBV D2 1
MULTV D2 16
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y_OFFSET
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z_OFFSET
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0
PUSHV 1; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #34 [Opt:AlwaysOn]
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 27400
PUSHR D2
PUSHARGSV 1 0.0002
PUSHV 7
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0004
PUSHV 1
PUSHV 64; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS D5 0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(eweapon)] Body End
PUSHARGSV 0 0.0009; Func[void DrawGhostFFCs()] Body Start
SETR D4 SP2
SETV D2 1; if() #101 Test
PUSHR D2
POP D0
SETR D2 SCREENEFLAGSD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1037 ==; Test 'if'
PUSHR D4; unless() #102 Test AND if() #101 Body Start
CALLFUNC 0.1223; UsrFunc[bool __HaveAmulet()] Call
POP D4
COMPAREV D2 0
GOTOCMP 1221 ==; Test 'unless' AND return (Void) AND unless() #102 Body
STOREV 0 0.0008; if() #101 Body End
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
SETV D2 1; if() #36 Test AND if(true) #35 [Opt:AlwaysOn]
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1056 ==; Test 'if'
SETV D2 1; if() #36 Body Start
STORE D2 0.0003
GOTO 1058; if() #36 Body End
SETV D2 2; if() #36 Else Start
STORE D2 0.0003; if() #36 Else End
SETV D2 4
STORE D2 0.0002
STOREV 1 0.0001; for() #16 setup
LOAD D2 0.0001; for() #16 LoopTest
PUSHR D2
SETR D2 NPCCOUNT
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1221 ==; for() #16 TestFail?
LOAD D2 0.0001; InlineFunc[npc screendata::LoadNPC(int)] Params AND for() #16 Body Start
SUBV D2 1; InlineFunc[npc screendata::LoadNPC(int)] Body Start
LOADNPCR D2
SETR D2 REFNPC; InlineFunc[npc screendata::LoadNPC(int)] Body End
STORE D2 0.0006
PUSHR D4
LOAD D2 0.0006; UsrFunc[int[] __GetDrawingArray(npc)] Params Start
PUSHR D2; UsrFunc[int[] __GetDrawingArray(npc)] Params End
CALLFUNC 0.1242; UsrFunc[int[] __GetDrawingArray(npc)] Call
POP D4
STORE D2 0.0008
LOAD D2 0.0008; unless() #103 Test
COMPAREV D2 0
GOTOCMP 1217 ==; Test 'unless' AND continue 1; AND unless() #103 Body
SETR D2 GD26; if() #104 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1101 ==; Test 'if'
LOAD D2 0.0008; if() #105 Test AND if() #104 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1217 !=; Test 'if' AND continue 1; AND if() #105 Body
LOAD D2 0.0008; if() #104 Body End AND if() #37 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1113 ==; Test 'if'
SETV D2 64; if() #37 Body Start
STORE D2 0.0005
GOTO 1115; if() #37 Body End
SETV D2 128; if() #37 Else Start
STORE D2 0.0005; if() #37 Else End
LOAD D2 0.0008; if() #38 Test
PUSHR D2
POP D0
READPODARRAYV D2 2
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1127 ==; Test 'if'
LOAD D2 0.0002; if() #38 Body Start
STORE D2 0.0004
GOTO 1129; if() #38 Body End
LOAD D2 0.0003; if() #38 Else Start
STORE D2 0.0004; if() #38 Else End
SETV D2 3
STORE D2 0.0007
STOREV 0 0; for() #17 setup
LOAD D2 0; for() #17 LoopTest
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1217 ==; for() #17 TestFail?
LOAD D2 0.0008; if() #106 Test AND for() #17 Body Start
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 1
GOTOCMP 1159 ==
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
COMPAREV D2 0
GOTOCMP 1159 ==
SETV D2 1
GOTO 1160
SETV D2 0
COMPAREV D2 0
GOTOCMP 1210 ==; Test 'if'
LOAD D2 0.0004; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #106 Body Start
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 1
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 2
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 3
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
LOAD D2 0.0007
ADDV D2 4
POP D0
READPODARRAYR D2 D2
PUSHR D2
LOAD D2 0.0008
PUSHR D2
POP D0
READPODARRAYV D2 1
PUSHR D2
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
LOAD D2 0.0005
PUSHR D2; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #106 Body End
LOAD D2 0.0007
ADDV D2 6
STORE D2 0.0007; for() #17 Body End
LOAD D2 0; for() #17 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1132; for() #17 End
LOAD D2 0.0001; for() #16 Body End AND for() #16 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 1061; for() #16 End
POPARGS D5 0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR D4 SP2; Func[bool __HaveAmulet()] Body Start
SETV D2 50; if() #659 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1232 ==; Test 'if'
SETV D2 1; return Start AND if() #659 Body Start
GOTO 1241; return End AND if() #659 Body End
SETV D2 63; if() #660 Test
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1240 ==; Test 'if'
SETV D2 1; return Start AND if() #660 Body Start
GOTO 1241; return End AND if() #660 Body End
SETV D2 0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int[] __GetDrawingArray(npc)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #570 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65536
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1258 ==; Test 'if'
SETV D2 0; return Start AND if() #570 Body Start
GOTO 1278; return End AND if() #570 Body End
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 65535
STORE D2 0
LOAD D2 0; unless() #571 Test
COMPAREV D2 0
GOTOCMP 1272 !=; Test 'unless'
SETV D2 0; return Start AND unless() #571 Body Start
GOTO 1278; return End AND unless() #571 Body End
LOAD D2 0
PUSHR D2
POP D0
READPODARRAYV D2 23
STORE D2 0
LOAD D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int[] __GetDrawingArray(npc)] Body End
PUSHARGSV 0 0.0002; Func[int FindUnusedFFC()] Body Start
SETR D4 SP2
STOREV 0 0.0001
STOREV 1 0; for() #37 setup
LOAD D2 0; for() #37 LoopTest
PUSHR D2
SETR D2 MAX_FFC_ID
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1333 ==; for() #37 TestFail?
LOAD D2 0; InlineFunc[ffc screendata::LoadFFC(int)] Params AND for() #37 Body Start
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0001
LOAD D2 0.0001; if() #148 Test
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 0
GOTOCMP 1309 ==
LOAD D2 0.0001
PUSHR D2
POP REFFFC
SETR D2 DATA
COMPAREV D2 1
GOTOCMP 1309 ==
SETV D2 0
GOTO 1310
SETV D2 1
COMPAREV D2 0
GOTOCMP 1329 ==; Test 'if'
LOAD D2 0.0001; unless() #149 Test AND if() #148 Body Start
PUSHR D2
POP REFFFC
SETR D2 FFSCRIPT
COMPAREV D2 0
GOTOCMP 1329 !=; Test 'unless'
LOAD D2 0.0001; unless() #150 Test AND unless() #149 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFFFC
SETR D2 FFFLAGSD
COMPAREV D2 0
GOTOCMP 1329 !=; Test 'unless'
LOAD D2 0; return Start AND unless() #150 Body Start
GOTO 1334; return End AND unless() #150 Body End
LOAD D2 0; unless() #149 Body End AND if() #148 Body End AND for() #37 Body End AND for() #37 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1284; for() #37 End
SETV D2 0; return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #174 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1349 ==; Test 'if'
PUSHR D4; if() #174 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.1495; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP D4
STORE D2 0.0003; if() #174 Body End
LOAD D2 0.0002; if() #175 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1360 ==; Test 'if'
PUSHR D4; if() #175 Body Start
LOAD D2 0.0009; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR D2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.1655; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP D4
STORE D2 0.0002; if() #175 Body End
LOAD D2 0.0009; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0008
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001; if() #50 Test
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1430 ==; Test 'if'
PUSHR D4; if() #50 Body Start
LOAD D2 0.0006; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1983; UsrFunc[int __UnblockableDir(int)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
GOTO 1439; if() #50 Body End
LOAD D2 0.0006; if() #50 Else Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2; if() #50 Else End
LOAD D2 0.0003; if() #176 Test
COMPAREV D2 0
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1450 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #176 Body Start
PUSHR D2
LOAD D2 0.0003; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #176 Body End
LOAD D2 0.0001; if() #177 Test
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1466 ==; Test 'if'
SETV D2 0; if() #177 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #177 Body End
LOAD D2 0.0001; if() #178 Test
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1477 ==; Test 'if'
PUSHR D4; if() #178 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #178 Body End
LOAD D2 0.0001
ORV D2 512
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0002; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
LOAD D2 0; return Start
POPARGS D5 0.0010; return End
RETURNFUNC; Func[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0 0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR D4 SP2
LOAD D2 0.0003; if() #55 Test
COMPAREV D2 129
GOTOCMP 1505 ==
LOAD D2 0.0003
COMPAREV D2 145
GOTOCMP 1505 ==
SETV D2 0
GOTO 1506
SETV D2 1
COMPAREV D2 0
GOTOCMP 1510 ==; Test 'if'
SETV D2 17; return Start AND if() #55 Body Start
GOTO 1653; return End AND if() #55 Body End
LOAD D2 0.0003; if() #56 Test AND if() #55 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1517 ==; Test 'if'
SETV D2 18; return Start AND if() #56 Body Start
GOTO 1653; return End AND if() #56 Body End
LOAD D2 0.0003; if() #57 Test AND if() #56 Else Start
COMPAREV D2 130
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1524 ==; Test 'if'
SETV D2 19; return Start AND if() #57 Body Start
GOTO 1653; return End AND if() #57 Body End
LOAD D2 0.0003; if() #58 Test AND if() #57 Else Start
COMPAREV D2 140
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1531 ==; Test 'if'
SETV D2 35; return Start AND if() #58 Body Start
GOTO 1653; return End AND if() #58 Body End
LOAD D2 0.0003; if() #59 Test AND if() #58 Else Start
COMPAREV D2 142
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1538 ==; Test 'if'
SETV D2 81; return Start AND if() #59 Body Start
GOTO 1653; return End AND if() #59 Body End
LOAD D2 0.0003; if() #60 Test AND if() #59 Else Start
COMPAREV D2 139
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1545 ==; Test 'if'
SETV D2 80; return Start AND if() #60 Body Start
GOTO 1653; return End AND if() #60 Body End
LOAD D2 0.0003; if() #61 Test AND if() #60 Else Start
COMPAREV D2 134
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1552 ==; Test 'if'
SETV D2 21; return Start AND if() #61 Body Start
GOTO 1653; return End AND if() #61 Body End
LOAD D2 0.0003; if() #62 Test AND if() #61 Else Start
COMPAREV D2 132
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1559 ==; Test 'if'
SETV D2 20; return Start AND if() #62 Body Start
GOTO 1653; return End AND if() #62 Body End
LOAD D2 0.0003; if() #63 Test AND if() #62 Else Start
COMPAREV D2 141
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1566 ==; Test 'if'
SETV D2 36; return Start AND if() #63 Body Start
GOTO 1653; return End AND if() #63 Body End
LOAD D2 0.0003; if() #64 Test AND if() #63 Else Start
COMPAREV D2 137
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1573 ==; Test 'if'
SETV D2 76; return Start AND if() #64 Body Start
GOTO 1653; return End AND if() #64 Body End
LOAD D2 0.0003; if() #65 Test AND if() #64 Else Start
COMPAREV D2 138
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1580 ==; Test 'if'
SETV D2 77; return Start AND if() #65 Body Start
GOTO 1653; return End AND if() #65 Body End
LOAD D2 0.0003; if() #66 Test AND if() #65 Else Start
COMPAREV D2 131
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1652 ==; Test 'if'
STOREV 0 0.0002; if() #66 Body Start
STOREV 0 0.0001
STOREV 0 0; for() #43 setup
LOAD D2 0; for() #43 LoopTest
COMPAREV D2 256
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1636 ==; for() #43 TestFail?
LOAD D2 0; unless() #187 Test AND for() #43 Body Start
PUSHR D2
POP D0
SETR D2 LINKITEMD
COMPAREV D2 0
GOTOCMP 1632 ==; Test 'unless' AND continue 1; AND unless() #187 Body
LOAD D2 0; InlineFunc[itemdata Game::LoadItemData(int)] Params
LOADITEMDATAR D2; InlineFunc[itemdata Game::LoadItemData(int)] Body Start
SETR D2 REFITEMCLASS; InlineFunc[itemdata Game::LoadItemData(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #188 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATAFAMILY
COMPAREV D2 1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1632 !=; Test 'if' AND continue 1; AND if() #188 Body
LOAD D2 0.0001; if() #189 Test
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 1632 ==; Test 'if'
LOAD D2 0.0001; if() #189 Body Start
PUSHR D2
POP REFITEMCLASS
SETR D2 IDATALEVEL
STORE D2 0.0002
LOAD D2 0.0002; if() #190 Test
COMPAREV D2 3
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 1636 !=; Test 'if' AND break 1; AND if() #190 Body
LOAD D2 0; if() #189 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 1588; for() #43 End
LOAD D2 0.0002; if() #67 Test
COMPAREV D2 1
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1643 ==; Test 'if'
SETV D2 4; return Start AND if() #67 Body Start
GOTO 1653; return End AND if() #67 Body End
LOAD D2 0.0002; if() #68 Test AND if() #67 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1650 ==; Test 'if'
SETV D2 5; return Start AND if() #68 Body Start
GOTO 1653; return End AND if() #68 Body End
SETV D2 6; return Start AND if() #68 Else Start
GOTO 1653; return End AND if() #68 Else End AND if() #67 Else End AND if() #66 Body End
SETV D2 0; return Start AND if() #66 Else Start
POPARGS D5 0.0004; return End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End AND if() #57 Else End AND if() #56 Else End AND if() #55 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR D4 SP2; Func[int GetDefaultEWeaponSound(int)] Body Start
LOAD D2 0; if() #51 Test
COMPAREV D2 129
GOTOCMP 1664 ==
LOAD D2 0
COMPAREV D2 145
GOTOCMP 1664 ==
SETV D2 0
GOTO 1665
SETV D2 1
COMPAREV D2 0
GOTOCMP 1669 ==; Test 'if'
SETV D2 40; return Start AND if() #51 Body Start
GOTO 1706; return End AND if() #51 Body End
LOAD D2 0; if() #52 Test AND if() #51 Else Start
COMPAREV D2 134
GOTOCMP 1677 ==
LOAD D2 0
COMPAREV D2 141
GOTOCMP 1677 ==
SETV D2 0
GOTO 1678
SETV D2 1
COMPAREV D2 0
GOTOCMP 1682 ==; Test 'if'
SETV D2 32; return Start AND if() #52 Body Start
GOTO 1706; return End AND if() #52 Body End
LOAD D2 0; if() #53 Test AND if() #52 Else Start
COMPAREV D2 140
GOTOCMP 1693 ==
LOAD D2 0
COMPAREV D2 142
GOTOCMP 1693 ==
LOAD D2 0
COMPAREV D2 139
GOTOCMP 1693 ==
SETV D2 0
GOTO 1694
SETV D2 1
COMPAREV D2 0
GOTOCMP 1698 ==; Test 'if'
SETV D2 13; return Start AND if() #53 Body Start
GOTO 1706; return End AND if() #53 Body End
LOAD D2 0; if() #54 Test AND if() #53 Else Start
COMPAREV D2 133
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1705 ==; Test 'if'
SETV D2 51; return Start AND if() #54 Body Start
GOTO 1706; return End AND if() #54 Body End
SETV D2 0; return Start AND if() #54 Else Start
POP D5; return End AND if() #54 Else End AND if() #53 Else End AND if() #52 Else End AND if() #51 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0 0.0002; Func[void SetEWeaponDir(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0001
STOREV 0 0
LOAD D2 0.0001; if() #488 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1725 ==; Test 'if'
LOAD D2 0.0001; if() #488 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #488 Body End
LOAD D2 0.0001; if() #186 Test
COMPAREV D2 0.3927
GOTOCMP 1733 <
LOAD D2 0.0001
COMPAREV D2 5.8905
GOTOCMP 1733 >
SETV D2 0
GOTO 1734
SETV D2 1
COMPAREV D2 0
GOTOCMP 1739 ==; Test 'if'
SETV D2 3; if() #186 Body Start
STORE D2 0
GOTO 1789; if() #186 Body End
LOAD D2 0.0001; if() #187 Test AND if() #186 Else Start
COMPAREV D2 1.1781
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1747 ==; Test 'if'
SETV D2 7; if() #187 Body Start
STORE D2 0
GOTO 1789; if() #187 Body End
LOAD D2 0.0001; if() #188 Test AND if() #187 Else Start
COMPAREV D2 1.9635
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1755 ==; Test 'if'
SETV D2 1; if() #188 Body Start
STORE D2 0
GOTO 1789; if() #188 Body End
LOAD D2 0.0001; if() #189 Test AND if() #188 Else Start
COMPAREV D2 2.7489
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1763 ==; Test 'if'
SETV D2 6; if() #189 Body Start
STORE D2 0
GOTO 1789; if() #189 Body End
LOAD D2 0.0001; if() #190 Test AND if() #189 Else Start
COMPAREV D2 3.5343
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1771 ==; Test 'if'
SETV D2 2; if() #190 Body Start
STORE D2 0
GOTO 1789; if() #190 Body End
LOAD D2 0.0001; if() #191 Test AND if() #190 Else Start
COMPAREV D2 4.3197
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1779 ==; Test 'if'
SETV D2 4; if() #191 Body Start
STORE D2 0
GOTO 1789; if() #191 Body End
LOAD D2 0.0001; if() #192 Test AND if() #191 Else Start
COMPAREV D2 5.1051
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1787 ==; Test 'if'
SETV D2 0; if() #192 Body Start
STORE D2 0
GOTO 1789; if() #192 Body End
SETV D2 5; if() #192 Else Start
STORE D2 0; if() #192 Else End
LOAD D2 0.0002; if() #191 Else End AND if() #190 Else End AND if() #189 Else End AND if() #188 Else End AND if() #187 Else End AND if() #186 Else End AND if() #489 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 1807 ==; Test 'if'
PUSHR D4; if() #489 Body Start
LOAD D2 0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR D2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1983; UsrFunc[int __UnblockableDir(int)] Call
POP D4
STORE D2 0; if() #489 Body End
LOAD D2 0
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_DIR D2
POPARGS D5 0.0003
RETURNFUNC; Func[void SetEWeaponDir(eweapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #210 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 1901 ==; Test 'if'
LOAD D2 0.0001; if() #210 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0
LOAD D2 0; if() #494 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1840 ==; Test 'if'
LOAD D2 0; if() #494 Body Start
ADDV D2 6.2832
STORE D2 0; if() #494 Body End
LOAD D2 0; if() #211 Test
COMPAREV D2 0.7854
GOTOCMP 1848 <
LOAD D2 0
COMPAREV D2 5.4978
GOTOCMP 1848 >
SETV D2 0
GOTO 1849
SETV D2 1
COMPAREV D2 0
GOTOCMP 1861 ==; Test 'if'
SETV D2 4; if() #211 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1981; if() #211 Body End
LOAD D2 0; if() #212 Test AND if() #211 Else Start
COMPAREV D2 2.3562
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 1876 ==; Test 'if'
SETV D2 3; if() #212 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1981; if() #212 Body End
LOAD D2 0; if() #213 Test AND if() #212 Else Start
COMPAREV D2 3.9270
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 1891 ==; Test 'if'
SETV D2 7; if() #213 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1981; if() #213 Body End
SETV D2 0; if() #213 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #213 Else End
GOTO 1981; if() #212 Else End AND if() #211 Else End AND if() #210 Body End
PUSHR D4; if() #210 Else Start
LOAD D2 0.0001; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2043; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #214 Test
COMPAREV D2 0
GOTOCMP 1920 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 1920 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 1920 ==
SETV D2 0
GOTO 1921
SETV D2 1
COMPAREV D2 0
GOTOCMP 1933 ==; Test 'if'
SETV D2 0; if() #214 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1981; if() #214 Body End
LOAD D2 0; if() #215 Test AND if() #214 Else Start
COMPAREV D2 1
GOTOCMP 1944 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 1944 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 1944 ==
SETV D2 0
GOTO 1945
SETV D2 1
COMPAREV D2 0
GOTOCMP 1957 ==; Test 'if'
SETV D2 3; if() #215 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1981; if() #215 Body End
LOAD D2 0; if() #216 Test AND if() #215 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1972 ==; Test 'if'
SETV D2 7; if() #216 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 1981; if() #216 Body End
SETV D2 4; if() #216 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #216 Else End
POPARGS D5 0.0002; if() #215 Else End AND if() #214 Else End AND if() #210 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon)] Body End
SETR D4 SP2; Func[int __UnblockableDir(int)] Body Start
LOAD D2 0; if() #683 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1991 ==; Test 'if'
SETV D2 8; return Start AND if() #683 Body Start
GOTO 2041; return End AND if() #683 Body End
LOAD D2 0; if() #684 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 1998 ==; Test 'if'
SETV D2 12; return Start AND if() #684 Body Start
GOTO 2041; return End AND if() #684 Body End
LOAD D2 0; if() #685 Test
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2005 ==; Test 'if'
SETV D2 14; return Start AND if() #685 Body Start
GOTO 2041; return End AND if() #685 Body End
LOAD D2 0; if() #686 Test
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2012 ==; Test 'if'
SETV D2 10; return Start AND if() #686 Body Start
GOTO 2041; return End AND if() #686 Body End
LOAD D2 0; if() #687 Test
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2019 ==; Test 'if'
SETV D2 15; return Start AND if() #687 Body Start
GOTO 2041; return End AND if() #687 Body End
LOAD D2 0; if() #688 Test
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2026 ==; Test 'if'
SETV D2 9; return Start AND if() #688 Body Start
GOTO 2041; return End AND if() #688 Body End
LOAD D2 0; if() #689 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2033 ==; Test 'if'
SETV D2 13; return Start AND if() #689 Body Start
GOTO 2041; return End AND if() #689 Body End
LOAD D2 0; if() #690 Test
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2040 ==; Test 'if'
SETV D2 11; return Start AND if() #690 Body Start
GOTO 2041; return End AND if() #690 Body End
LOAD D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR D4 SP2; Func[int __NormalizeDir(int)] Body Start
LOAD D2 0; if() #669 Test
COMPAREV D2 0
GOTOCMP 2052 <
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2052 >
SETV D2 1
GOTO 2053
SETV D2 0
COMPAREV D2 0
GOTOCMP 2057 ==; Test 'if'
LOAD D2 0; return Start AND if() #669 Body Start
GOTO 2114; return End AND if() #669 Body End
LOAD D2 0; if() #670 Test
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2064 ==; Test 'if'
SETV D2 0; return Start AND if() #670 Body Start
GOTO 2114; return End AND if() #670 Body End
LOAD D2 0; if() #671 Test
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2071 ==; Test 'if'
SETV D2 5; return Start AND if() #671 Body Start
GOTO 2114; return End AND if() #671 Body End
LOAD D2 0; if() #672 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2078 ==; Test 'if'
SETV D2 3; return Start AND if() #672 Body Start
GOTO 2114; return End AND if() #672 Body End
LOAD D2 0; if() #673 Test
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2085 ==; Test 'if'
SETV D2 7; return Start AND if() #673 Body Start
GOTO 2114; return End AND if() #673 Body End
LOAD D2 0; if() #674 Test
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2092 ==; Test 'if'
SETV D2 1; return Start AND if() #674 Body Start
GOTO 2114; return End AND if() #674 Body End
LOAD D2 0; if() #675 Test
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2099 ==; Test 'if'
SETV D2 6; return Start AND if() #675 Body Start
GOTO 2114; return End AND if() #675 Body End
LOAD D2 0; if() #676 Test
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2106 ==; Test 'if'
SETV D2 2; return Start AND if() #676 Body Start
GOTO 2114; return End AND if() #676 Body End
LOAD D2 0; if() #677 Test
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2113 ==; Test 'if'
SETV D2 4; return Start AND if() #677 Body Start
GOTO 2114; return End AND if() #677 Body End
SETV D2 0; return Start
POP D5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR D4 SP2; Func[bool IsSideview()] Body Start
SETV D2 0; return Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
PUSHR D2
SETR D2 CURDMAP; InlineFunc[dmapdata Game::LoadDMapData(int)] Params
LOADDMAPDATAR D2; InlineFunc[dmapdata Game::LoadDMapData(int)] Body Start
SETR D2 REFDMAPDATA; InlineFunc[dmapdata Game::LoadDMapData(int)] Body End
PUSHR D2
POP REFDMAPDATA
SETR D2 DMAPDATASIDEVIEW
POP D3
COMPARER D3 D2
SETCMP D2 BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR D4 SP2; Func[void InitializeGhostZHData()] Body Start
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETV D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
SETR D4 SP2; Func[void KillEWeapon(eweapon)] Body Start
LOAD D2 0
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 128
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POP D5
RETURNFUNC; Func[void KillEWeapon(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[int __GetEWeaponThrowHeight(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0005
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
STORE D2 0.0004
LOAD D2 0.0004; if() #572 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2214 ==; Test 'if'
SETV D2 1; return Start AND if() #572 Body Start
GOTO 2315; return End AND if() #572 Body End
LOAD D2 0.0005; InlineFunc[int Distance(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_WIDTH
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0005
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_HIT_HEIGHT
DIVV D2 2
POP D3
ADDR D2 D3
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
STORE D2 0.0003
LOAD D2 0.0003; if() #573 Test
COMPAREV D2 1
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2263 ==; Test 'if'
SETV D2 1; return Start AND if() #573 Body Start
GOTO 2315; return End AND if() #573 Body End
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
STORE D2 0.0002
STOREV 0 0.0001
LOAD D2 0.0001; while() #5 Test
COMPAREV D2 3.2000
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2290 ==; Test 'while'
LOAD D2 0.0001; while() #5 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002
LOAD D2 0.0002; if() #574 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2271 ==; Test 'if'
LOAD D2 0.0001; return Start AND if() #574 Body Start
GOTO 2315; return End AND if() #574 Body End
GOTO 2271; while() #5 Body End AND while() #5 End
STOREV 0 0
LOAD D2 0.0002; while() #6 Test
PUSHR D2
LOAD D2 0
DIVV D2 3.2000
POP D3
COMPARER D3 D2
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2314 ==; Test 'while'
LOAD D2 0.0001; while() #6 Body Start
ADDV D2 0.1600
STORE D2 0.0001
LOAD D2 0
PUSHR D2
LOAD D2 0.0001
SUBV D2 3.2000
POP D3
ADDR D2 D3
STORE D2 0
LOAD D2 0.0002
SUBV D2 2
STORE D2 0.0002; while() #6 Body End
GOTO 2291; while() #6 End
LOAD D2 0.0001; return Start
POPARGS D5 0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(eweapon)] Body End
SETR D4 SP2; Func[void SetEWeaponRotation(eweapon, int)] Body Start
PUSHR D4
LOAD D2 0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2043; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #217 Test
COMPAREV D2 0
GOTOCMP 2335 ==
LOAD D2 0
COMPAREV D2 5
GOTOCMP 2335 ==
LOAD D2 0
COMPAREV D2 4
GOTOCMP 2335 ==
SETV D2 0
GOTO 2336
SETV D2 1
COMPAREV D2 0
GOTOCMP 2348 ==; Test 'if'
SETV D2 0; if() #217 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2396; if() #217 Body End
LOAD D2 0; if() #218 Test AND if() #217 Else Start
COMPAREV D2 1
GOTOCMP 2359 ==
LOAD D2 0
COMPAREV D2 7
GOTOCMP 2359 ==
LOAD D2 0
COMPAREV D2 6
GOTOCMP 2359 ==
SETV D2 0
GOTO 2360
SETV D2 1
COMPAREV D2 0
GOTOCMP 2372 ==; Test 'if'
SETV D2 3; if() #218 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2396; if() #218 Body End
LOAD D2 0; if() #219 Test AND if() #218 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2387 ==; Test 'if'
SETV D2 7; if() #219 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2
GOTO 2396; if() #219 Body End
SETV D2 4; if() #219 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_FLIP D2; if() #219 Else End
POPARGS D5 0.0002; if() #218 Else End AND if() #217 Else End
RETURNFUNC; Func[void SetEWeaponRotation(eweapon, int)] Body End
SETR D4 SP2; Func[int Sign(int)] Body Start
LOAD D2 0; if() #235 Test
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 2406 ==; Test 'if'
SETV D2 1; return Start AND if() #235 Body Start
GOTO 2414; return End AND if() #235 Body End
LOAD D2 0; if() #236 Test AND if() #235 Else Start
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2413 ==; Test 'if'
SETV D2 -1; return Start AND if() #236 Body Start
GOTO 2414; return End AND if() #236 Body End
SETV D2 0; return Start AND if() #236 Else Start
POP D5; return End AND if() #236 Else End AND if() #235 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR D4 SP2; Func[void StartGhostZH()] Body Start
PUSHR D4
CALLFUNC 0.2133; UsrFunc[void InitializeGhostZHData()] Call
POP D4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0 0.0007; Func[void UpdateEWeapon(eweapon)] Body Start
SETR D4 SP2
SETR D2 GD26; if() #525 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3565 !=; Test 'if' AND return (Void) AND if() #525 Body
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
STORE D2 0.0005
STOREV 1 0.0004
LOAD D2 0.0007; if() #245 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 128
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2836 ==; Test 'if'
LOAD D2 0.0007; if() #526 Test AND if() #245 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 2678 ==; Test 'if'
LOAD D2 0.0007; if() #246 Test AND if() #526 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 6
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 2551 ==; Test 'if'
LOAD D2 0.0007; if() #247 Test AND if() #246 Body Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2494 ==; Test 'if'
PUSHR D4; if() #247 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMSineWave(eweapon)] Params End
CALLFUNC 0.3567; UsrFunc[void __UpdateEWMSineWave(eweapon)] Call
POP D4
GOTO 2678; if() #247 Body End
LOAD D2 0.0007; if() #248 Test AND if() #247 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2511 ==; Test 'if'
PUSHR D4; if() #248 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHoming(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHoming(eweapon)] Params End
CALLFUNC 0.3749; UsrFunc[void __UpdateEWMHoming(eweapon)] Call
POP D4
GOTO 2678; if() #248 Body End
LOAD D2 0.0007; if() #249 Test AND if() #248 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2528 ==; Test 'if'
PUSHR D4; if() #249 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Params End
CALLFUNC 0.3961; UsrFunc[void __UpdateEWMHomingReaim(eweapon)] Call
POP D4
GOTO 2678; if() #249 Body End
LOAD D2 0.0007; if() #250 Test AND if() #249 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2545 ==; Test 'if'
PUSHR D4; if() #250 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandom(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandom(eweapon)] Params End
CALLFUNC 0.4302; UsrFunc[void __UpdateEWMRandom(eweapon)] Call
POP D4
GOTO 2678; if() #250 Body End
PUSHR D4; if() #250 Else Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Params End
CALLFUNC 0.4422; UsrFunc[void __UpdateEWMRandomReaim(eweapon)] Call
POP D4; if() #250 Else End
GOTO 2678; if() #249 Else End AND if() #248 Else End AND if() #247 Else End AND if() #246 Body End
LOAD D2 0.0007; if() #251 Test AND if() #246 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2586 ==; Test 'if'
LOAD D2 0.0007; if() #251 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMVeer(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMVeer(eweapon)] Params End
CALLFUNC 0.4734; UsrFunc[void __UpdateEWMVeer(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 2678; if() #251 Body End
LOAD D2 0.0007; if() #252 Test AND if() #251 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2603 ==; Test 'if'
PUSHR D4; if() #252 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMThrow(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMThrow(eweapon)] Params End
CALLFUNC 0.5266; UsrFunc[void __UpdateEWMThrow(eweapon)] Call
POP D4
GOTO 2678; if() #252 Body End
LOAD D2 0.0007; if() #253 Test AND if() #252 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 19
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2620 ==; Test 'if'
PUSHR D4; if() #253 Body Start
LOAD D2 0.0007; UsrFunc[void __UpdateEWMFall(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMFall(eweapon)] Params End
CALLFUNC 0.5576; UsrFunc[void __UpdateEWMFall(eweapon)] Call
POP D4
GOTO 2678; if() #253 Body End
LOAD D2 0.0007; if() #254 Test AND if() #253 Else Start
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 20
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2655 ==; Test 'if'
LOAD D2 0.0007; if() #254 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDrift(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDrift(eweapon)] Params End
CALLFUNC 0.5842; UsrFunc[void __UpdateEWMDrift(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004
GOTO 2678; if() #254 Body End
LOAD D2 0.0007; if() #254 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0006
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0007; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Params End
CALLFUNC 0.6346; UsrFunc[void __UpdateEWMDriftWait(eweapon)] Call
POP D4
SETV D2 0
STORE D2 0.0004; if() #254 Else End
LOAD D2 0.0007; if() #253 Else End AND if() #252 Else End AND if() #251 Else End AND if() #246 Else End AND if() #526 Body End AND if() #527 Test
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
LOAD D2 0.0007; if() #255 Test AND if() #527 Body Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2736 ==; Test 'if'
LOAD D2 0.0007; if() #255 Body Start
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0007; if() #528 Test
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
PUSHR D4; if() #528 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #528 Body End
GOTO 3146; if() #255 Body End
LOAD D2 0.0007; if() #256 Test AND if() #255 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2786 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int Distance(int, int, int, int)] Params Start AND if() #529 Test AND if() #256 Body Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y; InlineFunc[int Distance(int, int, int, int)] Params End
POP D1; InlineFunc[int Distance(int, int, int, int)] Body Start
POP D0
POP D6
SETR D2 DISTANCE; InlineFunc[int Distance(int, int, int, int)] Body End
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
PUSHR D4; if() #529 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #529 Body End
GOTO 3146; if() #256 Body End
LOAD D2 0.0007; if() #530 Test AND if() #256 Else Start
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params Start AND if() #530 Body Start
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
PUSHR D2
LOAD D2 0.0007
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
PUSHVARGR D3; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0007; if() #531 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
PUSHR D4; if() #531 Body Start
LOAD D2 0.0007; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #531 Body End
GOTO 3146; if() #530 Body End AND if() #256 Else End AND if() #255 Else End AND if() #527 Body End AND if() #245 Body End
LOAD D2 0.0007; if() #532 Test AND if() #245 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 2857 ==
LOAD D2 0.0007
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1024
COMPAREV D2 0
GOTOCMP 2857 !=
SETV D2 1
GOTO 2858
SETV D2 0
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
LOAD D2 0.0007; if() #257 Test AND if() #532 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 2877 ==; Test 'if'
PUSHR D4; if() #257 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Params End
CALLFUNC 0.6881; UsrFunc[void __DoEWeaponDeathPrototype(eweapon)] Call
POP D4
GOTO 3146; if() #257 Body End
LOAD D2 0.0007; if() #258 Test AND if() #257 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3011 ==; Test 'if'
LOAD D2 0.0007; if() #259 Test AND if() #258 Body Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2909 ==; Test 'if'
SETV D2 0; if() #259 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 3146; if() #259 Body End
LOAD D2 0.0007; if() #260 Test AND if() #259 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2926 ==; Test 'if'
PUSHR D4; if() #260 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Params End
CALLFUNC 0.7292; UsrFunc[void __DoEWeaponDeathAimAtLink(eweapon)] Call
POP D4
GOTO 3146; if() #260 Body End
LOAD D2 0.0007; if() #261 Test AND if() #260 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2943 ==; Test 'if'
PUSHR D4; if() #261 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Params End
CALLFUNC 0.7465; UsrFunc[void __DoEWeaponDeathExplode(eweapon)] Call
POP D4
GOTO 3146; if() #261 Body End
LOAD D2 0.0007; if() #262 Test AND if() #261 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2960 ==; Test 'if'
PUSHR D4; if() #262 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Params End
CALLFUNC 0.7509; UsrFunc[void __DoEWeaponDeathSBombExplode(eweapon)] Call
POP D4
GOTO 3146; if() #262 Body End
LOAD D2 0.0007; if() #263 Test AND if() #262 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2977 ==; Test 'if'
PUSHR D4; if() #263 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Params End
CALLFUNC 0.7553; UsrFunc[void __DoEWeaponDeath4FireballsHV(eweapon)] Call
POP D4
GOTO 3146; if() #263 Body End
LOAD D2 0.0007; if() #264 Test AND if() #263 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 2994 ==; Test 'if'
PUSHR D4; if() #264 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Params End
CALLFUNC 0.7611; UsrFunc[void __DoEWeaponDeath4FireballsDiag(eweapon)] Call
POP D4
GOTO 3146; if() #264 Body End
LOAD D2 0.0007; if() #533 Test AND if() #264 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
PUSHR D4; if() #533 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Params End
CALLFUNC 0.7669; UsrFunc[void __DoEWeaponDeath4FireballsRand(eweapon)] Call
POP D4; if() #533 Body End
GOTO 3146; if() #264 Else End AND if() #263 Else End AND if() #262 Else End AND if() #261 Else End AND if() #260 Else End AND if() #259 Else End AND if() #258 Body End
LOAD D2 0.0007; if() #265 Test AND if() #258 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 8
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3028 ==; Test 'if'
PUSHR D4; if() #265 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Params End
CALLFUNC 0.7779; UsrFunc[void __DoEWeaponDeath8Fireballs(eweapon)] Call
POP D4
GOTO 3146; if() #265 Body End
LOAD D2 0.0007; if() #266 Test AND if() #265 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 9
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3045 ==; Test 'if'
PUSHR D4; if() #266 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Params End
CALLFUNC 0.7837; UsrFunc[void __DoEWeaponDeath4FiresHV(eweapon)] Call
POP D4
GOTO 3146; if() #266 Body End
LOAD D2 0.0007; if() #267 Test AND if() #266 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3062 ==; Test 'if'
PUSHR D4; if() #267 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Params End
CALLFUNC 0.7897; UsrFunc[void __DoEWeaponDeath4FiresDiag(eweapon)] Call
POP D4
GOTO 3146; if() #267 Body End
LOAD D2 0.0007; if() #268 Test AND if() #267 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 11
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3079 ==; Test 'if'
PUSHR D4; if() #268 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Params End
CALLFUNC 0.7957; UsrFunc[void __DoEWeaponDeath4FiresRand(eweapon)] Call
POP D4
GOTO 3146; if() #268 Body End
LOAD D2 0.0007; if() #269 Test AND if() #268 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 12
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3096 ==; Test 'if'
PUSHR D4; if() #269 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Params End
CALLFUNC 0.8069; UsrFunc[void __DoEWeaponDeath8Fires(eweapon)] Call
POP D4
GOTO 3146; if() #269 Body End
LOAD D2 0.0007; if() #270 Test AND if() #269 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 13
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3113 ==; Test 'if'
PUSHR D4; if() #270 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Params End
CALLFUNC 0.8174; UsrFunc[void __DoEWeaponDeathSpawnNPC(eweapon)] Call
POP D4
GOTO 3146; if() #270 Body End
LOAD D2 0.0007; if() #271 Test AND if() #270 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 14
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3130 ==; Test 'if'
PUSHR D4; if() #271 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Params End
CALLFUNC 0.8221; UsrFunc[void __DoEWeaponDeathSingleFire(eweapon)] Call
POP D4
GOTO 3146; if() #271 Body End
LOAD D2 0.0007; if() #534 Test AND if() #271 Else Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3146 ==; Test 'if'
PUSHR D4; if() #534 Body Start
LOAD D2 0.0007; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params Start
PUSHR D2; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Params End
CALLFUNC 0.8272; UsrFunc[void __DoEWeaponDeathRunScript(eweapon)] Call
POP D4; if() #534 Body End
LOAD D2 0.0007; if() #271 Else End AND if() #270 Else End AND if() #269 Else End AND if() #268 Else End AND if() #267 Else End AND if() #266 Else End AND if() #265 Else End AND if() #258 Else End AND if() #257 Else End AND if() #532 Body End AND if() #245 Else End AND if() #535 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3171 ==; Test 'if'
LOAD D2 0.0007; if() #536 Test AND if() #535 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3171 ==; Test 'if'
PUSHR D4; if() #536 Body Start
LOAD D2 0.0007; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.0955; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #536 Body End
LOAD D2 0.0007; if() #535 Body End AND if() #272 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3454 ==; Test 'if'
SETV D2 1000; if() #272 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
SETR D2 LINKHP; if() #537 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3565 !=; Test 'if' AND return (Void) AND if() #537 Body
LOAD D2 0.0007; if() #538 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 3216 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 3216 ==
SETV D2 1
GOTO 3217
SETV D2 0
COMPAREV D2 0
GOTOCMP 3565 !=; Test 'if' AND return (Void) AND if() #538 Body
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
LOAD D2 0.0007; if() #273 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 3235 ==; Test 'if'
LOAD D2 0.0007; InlineFunc[int RadtoDeg(int)] Params Start AND if() #273 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 3301; if() #273 Body End
PUSHR D4; if() #273 Else Start
LOAD D2 0.0007; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2043; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #274 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3251 ==; Test 'if'
SETV D2 -90; if() #274 Body Start
STORE D2 0.0001
GOTO 3301; if() #274 Body End
LOAD D2 0; if() #275 Test AND if() #274 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3259 ==; Test 'if'
SETV D2 -45; if() #275 Body Start
STORE D2 0.0001
GOTO 3301; if() #275 Body End
LOAD D2 0; if() #276 Test AND if() #275 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3267 ==; Test 'if'
SETV D2 0; if() #276 Body Start
STORE D2 0.0001
GOTO 3301; if() #276 Body End
LOAD D2 0; if() #277 Test AND if() #276 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3275 ==; Test 'if'
SETV D2 45; if() #277 Body Start
STORE D2 0.0001
GOTO 3301; if() #277 Body End
LOAD D2 0; if() #278 Test AND if() #277 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3283 ==; Test 'if'
SETV D2 90; if() #278 Body Start
STORE D2 0.0001
GOTO 3301; if() #278 Body End
LOAD D2 0; if() #279 Test AND if() #278 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3291 ==; Test 'if'
SETV D2 135; if() #279 Body Start
STORE D2 0.0001
GOTO 3301; if() #279 Body End
LOAD D2 0; if() #280 Test AND if() #279 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3299 ==; Test 'if'
SETV D2 180; if() #280 Body Start
STORE D2 0.0001
GOTO 3301; if() #280 Body End
SETV D2 -135; if() #280 Else Start
STORE D2 0.0001; if() #280 Else End
LOAD D2 0.0004; if() #279 Else End AND if() #278 Else End AND if() #277 Else End AND if() #276 Else End AND if() #275 Else End AND if() #274 Else End AND if() #273 Else End AND if() #281 Test
COMPAREV D2 0
GOTOCMP 3343 ==; Test 'if'
LOAD D2 0.0007; if() #281 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Cos(int)] Params Start
SETR D3 D2; InlineFunc[int Cos(int)] Params End
COSR D2 D3; InlineFunc[int Cos(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
SETR D3 D2; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0002
GOTO 3359; if() #281 Body End
LOAD D2 0.0007; if() #281 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0003
LOAD D2 0.0007
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0.0002; if() #281 Else End
LOAD D2 0.0006; unless() #539 Test
PUSHR D2
LOAD D2 0.0003
POP D3
COMPARER D3 D2
GOTOCMP 3373 !=
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0002
POP D3
COMPARER D3 D2
GOTOCMP 3373 !=
SETV D2 1
GOTO 3374
SETV D2 0
COMPAREV D2 0
GOTOCMP 3388 !=; Test 'unless'
PUSHR D4; unless() #539 Body Start
LOAD D2 0.0006; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0040; UsrFunc[int Angle(int, int, int, int)] Call
POP D4
STORE D2 0.0001; unless() #539 Body End
STOREV 0 0
LOAD D2 0.0001; if() #282 Test
COMPAREV D2 0
GOTOCMP 3397 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 3397 >=
SETV D2 1
GOTO 3398
SETV D2 0
COMPAREV D2 0
GOTOCMP 3403 ==; Test 'if'
SETV D2 0; if() #282 Body Start
STORE D2 0
GOTO 3405; if() #282 Body End
SETV D2 2; if() #282 Else Start
STORE D2 0; if() #282 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE_W
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE_H
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 3511; if() #272 Body End
LOAD D2 0.0007; if() #540 Test AND if() #272 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3494 ==; Test 'if'
SETR D2 GD26; if() #283 Test AND if() #540 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3485 ==; Test 'if'
SETV D2 1000; if() #283 Body Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
GOTO 3494; if() #283 Body End
SETV D2 0; if() #283 Else Start
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #283 Else End
LOAD D2 0.0007; if() #540 Body End AND if() #541 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 3511 ==; Test 'if'
PUSHR D4; if() #541 Body Start
LOAD D2 0.0007; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #541 Body End
LOAD D2 0.0007; if() #272 Else End AND if() #542 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 64
COMPAREV D2 0
GOTOCMP 3523 !=
SETV D2 0
GOTO 3524
SETV D2 1
COMPAREV D2 0
GOTOCMP 3565 ==; Test 'if'
LOAD D2 0.0007; if() #542 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z_OFFSET D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
LOAD D2 0.0007
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
SUBV2 0 D2
PUSHR D2
LOAD D2 0.0007
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; if() #542 Body End
POPARGS D5 0.0008
RETURNFUNC; Func[void UpdateEWeapon(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001; InlineFunc[int Sin(int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D3 SPRITE_MISCD; InlineFunc[int Sin(int)] Params End
SINR D2 D3; InlineFunc[int Sin(int)] Body
POP D3
MULTR D2 D3
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 1.5708
SETR D3 D2; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(eweapon)] Body End
PUSHARGSV 0 0.0003; Func[void __UpdateEWMHoming(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0003
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
MODV D2 6.2832
STORE D2 0.0002
LOAD D2 0.0002; if() #694 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3765 ==; Test 'if'
LOAD D2 0.0002; if() #694 Body Start
ADDV D2 6.2832
STORE D2 0.0002; if() #694 Body End
PUSHR D4
LOAD D2 0.0003; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0003
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
STORE D2 0.0001
LOAD D2 0.0001; if() #695 Test
COMPAREV D2 0
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 3793 ==; Test 'if'
LOAD D2 0.0001; if() #695 Body Start
ADDV D2 6.2832
STORE D2 0.0001; if() #695 Body End
LOAD D2 0.0002; InlineFunc[int Abs(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
SETR D2 D3; InlineFunc[int Abs(int)] Params End
ABS D2; InlineFunc[int Abs(int)] Body
STORE D2 0
LOAD D2 0; if() #372 Test
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
COMPARER D3 D2
GOTOCMP 3828 <
LOAD D2 0
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 6.2832 D2
POP D3
COMPARER D3 D2
GOTOCMP 3828 >
SETV D2 0
GOTO 3829
SETV D2 1
COMPAREV D2 0
GOTOCMP 3841 ==; Test 'if'
LOAD D2 0.0001; if() #372 Body Start
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 3908; if() #372 Body End
PUSHR D4; if() #373 Test AND if() #372 Else Start
LOAD D2 0.0002; UsrFunc[int Sign(int)] Params Start
PUSHR D2
LOAD D2 0.0001
POP D3
SUBR D3 D2
PUSHR D3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2398; UsrFunc[int Sign(int)] Call
POP D4
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Sign(int)] Params Start
SUBV D2 3.1416
PUSHR D2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2398; UsrFunc[int Sign(int)] Call
POP D4
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3885 ==; Test 'if'
LOAD D2 0.0003; if() #373 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 3908; if() #373 Body End
LOAD D2 0.0003; if() #373 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
LOAD D2 0.0003
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2; if() #373 Else End
PUSHR D4; if() #372 Else End
LOAD D2 0.0003; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0003; if() #696 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 3959 ==; Test 'if'
LOAD D2 0.0003; if() #696 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0003; if() #697 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 3959 ==; Test 'if'
PUSHR D4; if() #697 Body Start
LOAD D2 0.0003; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #697 Body End
POPARGS D5 0.0004; if() #696 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #698 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 3992 ==; Test 'if'
LOAD D2 0.0001; if() #698 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #698 Body End
LOAD D2 0.0001; if() #374 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4091 ==; Test 'if'
LOAD D2 0.0001; if() #374 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #699 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4300 ==; Test 'if'
LOAD D2 0.0001; if() #375 Test AND if() #699 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4050 ==; Test 'if'
PUSHR D4; if() #375 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 4300; if() #375 Body End
LOAD D2 0.0001; if() #375 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #375 Else End
GOTO 4300; if() #699 Body End AND if() #374 Body End
LOAD D2 0.0001; if() #374 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #700 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4197 ==; Test 'if'
SETV D2 45; if() #700 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #701 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4197 ==; Test 'if'
PUSHR D4; if() #701 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #701 Body End
LOAD D2 0.0001; if() #700 Body End AND if() #376 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4223 ==; Test 'if'
LOAD D2 0.0001; if() #376 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 4300; if() #376 Body End
LOAD D2 0.0001; if() #702 Test AND if() #376 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4300 ==; Test 'if'
LOAD D2 0.0001; if() #702 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.2000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #377 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4270 ==; Test 'if'
PUSHR D4; if() #377 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4300; if() #377 Body End
LOAD D2 0; if() #378 Test AND if() #377 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4282 ==; Test 'if'
PUSHR D4; if() #378 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4300; if() #378 Body End
LOAD D2 0; if() #379 Test AND if() #378 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4294 ==; Test 'if'
PUSHR D4; if() #379 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4300; if() #379 Body End
PUSHR D4; if() #379 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #379 Else End
POPARGS D5 0.0002; if() #378 Else End AND if() #377 Else End AND if() #702 Body End AND if() #376 Else End AND if() #374 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(eweapon)] Body End
SETR D4 SP2; Func[void __UpdateEWMRandom(eweapon)] Body Start
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int Randf(int)] Params Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 2
SETV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
MULTR D2 D3
PUSHR D2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.0032; UsrFunc[int Randf(int)] Call
POP D4
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0; if() #703 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4374 ==; Test 'if'
PUSHR D4; if() #703 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #703 Body End
LOAD D2 0; if() #704 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4420 ==; Test 'if'
LOAD D2 0; if() #704 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #705 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4420 ==; Test 'if'
PUSHR D4; if() #705 Body Start
LOAD D2 0; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4; if() #705 Body End
POP D5; if() #704 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #706 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4453 ==; Test 'if'
LOAD D2 0.0001; if() #706 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #706 Body End
LOAD D2 0.0001; if() #380 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 4552 ==; Test 'if'
LOAD D2 0.0001; if() #380 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #707 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4732 ==; Test 'if'
LOAD D2 0.0001; if() #381 Test AND if() #707 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 4511 ==; Test 'if'
PUSHR D4; if() #381 Body Start
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 4732; if() #381 Body End
LOAD D2 0.0001; if() #381 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 -20
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #381 Else End
GOTO 4732; if() #707 Body End AND if() #380 Body End
LOAD D2 0.0001; if() #380 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #708 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4642 ==; Test 'if'
SETV D2 45; if() #708 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D3 62832; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
MULTV D2 0.0001
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0.0001; if() #709 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4642 ==; Test 'if'
PUSHR D4; if() #709 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #709 Body End
LOAD D2 0.0001; if() #708 Body End AND if() #382 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4668 ==; Test 'if'
LOAD D2 0.0001; if() #382 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
GOTO 4732; if() #382 Body End
LOAD D2 0.0001; if() #710 Test AND if() #382 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 4732 ==; Test 'if'
LOAD D2 0.0001; if() #710 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV2 0 D2
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #383 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4702 ==; Test 'if'
PUSHR D4; if() #383 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4732; if() #383 Body End
LOAD D2 0; if() #384 Test AND if() #383 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4714 ==; Test 'if'
PUSHR D4; if() #384 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4732; if() #384 Body End
LOAD D2 0; if() #385 Test AND if() #384 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4726 ==; Test 'if'
PUSHR D4; if() #385 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 4732; if() #385 Body End
PUSHR D4; if() #385 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #385 Else End
POPARGS D5 0.0002; if() #384 Else End AND if() #383 Else End AND if() #710 Body End AND if() #382 Else End AND if() #380 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #393 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4849 ==; Test 'if'
LOAD D2 0.0001; if() #393 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #393 Body End
LOAD D2 0; if() #394 Test AND if() #393 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4883 ==; Test 'if'
LOAD D2 0.0001; if() #394 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #394 Body End
LOAD D2 0; if() #395 Test AND if() #394 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4918 ==; Test 'if'
LOAD D2 0.0001; if() #395 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #395 Body End
LOAD D2 0; if() #396 Test AND if() #395 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 4952 ==; Test 'if'
LOAD D2 0.0001; if() #396 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #396 Body End
LOAD D2 0; if() #397 Test AND if() #396 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5018 ==; Test 'if'
LOAD D2 0.0001; if() #397 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #397 Body End
LOAD D2 0; if() #398 Test AND if() #397 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5083 ==; Test 'if'
LOAD D2 0.0001; if() #398 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #398 Body End
LOAD D2 0; if() #399 Test AND if() #398 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5148 ==; Test 'if'
LOAD D2 0.0001; if() #399 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 5206; if() #399 Body End
LOAD D2 0.0001; if() #399 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #399 Else End
LOAD D2 0.0001; if() #398 Else End AND if() #397 Else End AND if() #396 Else End AND if() #395 Else End AND if() #394 Else End AND if() #393 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
LOAD D2 0.0001; if() #711 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 5297 !=
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
GOTOCMP 5297 ==
SETV D2 1
GOTO 5298
SETV D2 0
COMPAREV D2 0
GOTOCMP 5330 ==; Test 'if'
LOAD D2 0.0001; if() #711 Body Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #711 Body End
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHVARGR D2
PUSHVARGV 0; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4; unless() #387 Test AND if(true) #386 [Opt:AlwaysOn]
CALLFUNC 0.2116; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 5382 !=; Test 'unless'
LOAD D2 0.0001; unless() #387 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 5402; unless() #387 Body End
SETR D2 REGION_HEIGHT; unless() #387 Else Start
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; unless() #387 Else End
LOAD D2 0.0001; if() #388 Test
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 5465 ==; Test 'if'
PUSHR D4; unless() #712 Test AND if(true) #389 [Opt:AlwaysOn] AND if() #388 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9560; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5574 !=; Test 'unless'
LOAD D2 0.0001; InlineFunc[int Max(int, int)] Params Start AND unless() #712 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 0.1600
PUSHVARGR D2
PUSHVARGV -3.2000; InlineFunc[int Max(int, int)] Params End
MAXVARG; InlineFunc[int Max(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; unless() #712 Body End
GOTO 5574; if() #388 Body End
STOREV 0 0; if() #388 Else Start
LOAD D2 0.0001; if() #390 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
GOTOCMP 5523 ==; Test 'if'
LOAD D2 0.0001; if() #391 Test AND if() #390 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5520 ==; Test 'if'
LOAD D2 0.0001; if() #391 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 5525; if() #391 Body End
SETV D2 1; if() #391 Else Start
STORE D2 0; if() #391 Else End
GOTO 5525; if() #390 Body End
SETV D2 1; if() #390 Else Start
STORE D2 0; if() #390 Else End
LOAD D2 0; if() #713 Test
COMPAREV D2 0
GOTOCMP 5574 ==; Test 'if'
LOAD D2 0.0001; if() #392 Test AND if() #713 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 5553 ==; Test 'if'
SETV D2 0; if() #392 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 5574; if() #392 Body End
SETV D2 0; if() #392 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #392 Else End
POPARGS D5 0.0002; if() #713 Body End AND if() #388 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_JUMP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 7
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
PUSHR D4; unless() #367 Test AND if(true) #366 [Opt:AlwaysOn]
CALLFUNC 0.2116; UsrFunc[bool IsSideview()] Call
POP D4
COMPAREV D2 0
GOTOCMP 5637 !=; Test 'unless'
LOAD D2 0.0001; unless() #367 Body Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
GOTO 5667; unless() #367 Body End
LOAD D2 0.0001; unless() #367 Else Start
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_OFFSET_Y D2
LOAD D2 0.0001
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y_OFFSET D2; unless() #367 Else End
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 0.1600
PUSHVARGR D2
PUSHVARGV 3.2000; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #691 Test AND if(true) #368 [Opt:AlwaysOn]
PUSHR D2
SETV D2 7
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 5840 ==; Test 'if'
PUSHR D4; unless() #692 Test AND if() #691 Body Start
LOAD D2 0.0001; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_OFFSET_Y
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_HEIGHT
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_HIT_WIDTH; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9560; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP D4
COMPAREV D2 0
GOTOCMP 5840 !=; Test 'unless'
STOREV 0 0; unless() #692 Body Start
LOAD D2 0.0001; if() #369 Test
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 5789 ==; Test 'if'
LOAD D2 0.0001; if() #370 Test AND if() #369 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -0.5000
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 5786 ==; Test 'if'
LOAD D2 0.0001; if() #370 Body Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 -0.5000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
MULTV D2 0.7500
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
GOTO 5791; if() #370 Body End
SETV D2 1; if() #370 Else Start
STORE D2 0; if() #370 Else End
GOTO 5791; if() #369 Body End
SETV D2 1; if() #369 Else Start
STORE D2 0; if() #369 Else End
LOAD D2 0; if() #693 Test
COMPAREV D2 0
GOTOCMP 5840 ==; Test 'if'
LOAD D2 0.0001; if() #371 Test AND if() #693 Body Start
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 1
COMPAREV D2 0
GOTOCMP 5819 ==; Test 'if'
SETV D2 0; if() #371 Body Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Z D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void KillEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void KillEWeapon(eweapon)] Params End
CALLFUNC 0.2177; UsrFunc[void KillEWeapon(eweapon)] Call
POP D4
GOTO 5840; if() #371 Body End
SETV D2 0; if() #371 Else Start
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2; if() #371 Else End
POPARGS D5 0.0002; if() #693 Body End AND unless() #692 Body End AND if() #691 Body End
RETURNFUNC; Func[void __UpdateEWMFall(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #351 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5957 ==; Test 'if'
LOAD D2 0.0001; if() #351 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #351 Body End
LOAD D2 0; if() #352 Test AND if() #351 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 5991 ==; Test 'if'
LOAD D2 0.0001; if() #352 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #352 Body End
LOAD D2 0; if() #353 Test AND if() #352 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6026 ==; Test 'if'
LOAD D2 0.0001; if() #353 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #353 Body End
LOAD D2 0; if() #354 Test AND if() #353 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6060 ==; Test 'if'
LOAD D2 0.0001; if() #354 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #354 Body End
LOAD D2 0; if() #355 Test AND if() #354 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6126 ==; Test 'if'
LOAD D2 0.0001; if() #355 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #355 Body End
LOAD D2 0; if() #356 Test AND if() #355 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6191 ==; Test 'if'
LOAD D2 0.0001; if() #356 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #356 Body End
LOAD D2 0; if() #357 Test AND if() #356 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6256 ==; Test 'if'
LOAD D2 0.0001; if() #357 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6314; if() #357 Body End
LOAD D2 0.0001; if() #357 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #357 Else End
LOAD D2 0.0001; if() #356 Else End AND if() #355 Else End AND if() #354 Else End AND if() #353 Else End AND if() #352 Else End AND if() #351 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(eweapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
STORE D2 0
LOAD D2 0.0001; if() #358 Test
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 16
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 6438 ==; Test 'if'
LOAD D2 0.0001; if() #358 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianCos(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR D2 D3; InlineFunc[int RadianCos(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNSTEP
DIVV D2 100
PUSHR D2
LOAD D2 0.0001; InlineFunc[int RadianSin(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV D3 57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR D2 D3; InlineFunc[int RadianSin(int)] Body End
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6457; if() #358 Body End
LOAD D2 0.0001; if() #358 Else Start
PUSHR D2
SETV D2 6
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ADDV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 6
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #358 Else End
LOAD D2 0; if() #359 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6492 ==; Test 'if'
LOAD D2 0.0001; if() #359 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #359 Body End
LOAD D2 0; if() #360 Test AND if() #359 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6526 ==; Test 'if'
LOAD D2 0.0001; if() #360 Body Start
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #360 Body End
LOAD D2 0; if() #361 Test AND if() #360 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6561 ==; Test 'if'
LOAD D2 0.0001; if() #361 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #361 Body End
LOAD D2 0; if() #362 Test AND if() #361 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6595 ==; Test 'if'
LOAD D2 0.0001; if() #362 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #362 Body End
LOAD D2 0; if() #363 Test AND if() #362 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6661 ==; Test 'if'
LOAD D2 0.0001; if() #363 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #363 Body End
LOAD D2 0; if() #364 Test AND if() #363 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6726 ==; Test 'if'
LOAD D2 0.0001; if() #364 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #364 Body End
LOAD D2 0; if() #365 Test AND if() #364 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6791 ==; Test 'if'
LOAD D2 0.0001; if() #365 Body Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 6849; if() #365 Body End
LOAD D2 0.0001; if() #365 Else Start
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MULTV D2 0.7071
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #365 Else End
LOAD D2 0.0001; if() #364 Else End AND if() #363 Else End AND if() #362 Else End AND if() #361 Else End AND if() #360 Else End AND if() #359 Else End
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(eweapon)] Body End
PUSHARGSV 0 0.0011; Func[void __DoEWeaponDeathPrototype(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0010
STOREV 0 0.0009
STOREV 0 0.0008
STOREV 0 0.0007
STOREV 0 0.0006
STOREV 0 0.0005
STOREV 0 0.0004
STOREV 0 0.0003
LOAD D2 0.0011; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR D2; InlineFunc[untyped Floor(untyped)] Body
STORE D2 0.0010
SETR D2 EWPNCOUNT; for() #159 setup
STORE D2 0.0003
LOAD D2 0.0003; for() #159 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 6942 ==; for() #159 TestFail?
LOAD D2 0.0003; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #159 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0009
LOAD D2 0.0009; if() #562 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 768
COMPAREV D2 768
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 6938 !=; Test 'if' AND continue 1; AND if() #562 Body
LOAD D2 0.0009; if() #563 Test
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0010
POP D3
COMPARER D3 D2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6942 !=; Test 'if' AND break 1; AND if() #563 Body
LOAD D2 0.0003; for() #159 Body End AND for() #159 LoopIncrement
SUBV D2 1
STORE D2 0.0003
GOTO 6902; for() #159 End
LOAD D2 0.0003; if() #564 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 6968 ==; Test 'if'
ALLOCATEMEMV D2 43 0; if() #564 Body Start
WRITEPODSTRING D2 "ghost.zh: Failed to find prototype eweapon"
STORE D2 0
LOAD D2 0; InlineFunc[void TraceS(char32[])] Params Start
SETR D3 D2; InlineFunc[void TraceS(char32[])] Params End
TRACE6 D3; InlineFunc[void TraceS(char32[])] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
LOAD D3 0
DEALLOCATEMEMR D3
GOTO 7290; return (Void)
LOAD D3 0
DEALLOCATEMEMR D3; if() #564 Body End
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
MODV D2 10
SUBV D2 6.2832
STORE D2 0.0005
LOAD D2 0.0011
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0010
POP D3
SUBR D3 D2
SETR D2 D3
MULTV D2 10000
STORE D2 0.0004
LOAD D2 0.0011
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0005
POP D3
SUBR D3 D2
SETR D2 D3
DIVV D2 100
RSHIFTV D2 0
STORE D2 0.0008
LOAD D2 0.0011; if() #298 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7058 ==; Test 'if'
LOAD D2 0.0011; if() #298 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
POP D3
ADDR D2 D3
STORE D2 0.0006
GOTO 7070; if() #298 Body End
LOAD D2 0.0011; if() #298 Else Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
STORE D2 0.0007
LOAD D2 0.0011
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
STORE D2 0.0006; if() #298 Else End
LOAD D2 0.0008; if() #299 Test
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7123 ==; Test 'if'
STOREV 0 0.0001; for() #160 setup AND if() #299 Body Start
LOAD D2 0.0001; for() #160 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7114 ==; for() #160 TestFail?
PUSHR D4; for() #160 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0001
MULTV D2 6.2832
SETV D2 6.2832
PUSHR D2
LOAD D2 0.0001
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.9065; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #160 Body End
LOAD D2 0.0001; for() #160 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 7076; for() #160 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 7281; if() #299 Body End
LOAD D2 0.0008; if() #300 Test AND if() #299 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7163 ==; Test 'if'
STOREV 0 0.0001; for() #161 setup AND if() #300 Body Start
LOAD D2 0.0001; for() #161 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7154 ==; for() #161 TestFail?
PUSHR D4; for() #161 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D3 31416; InlineFunc[int Rand(int)] Params
RNDR D2 D3; InlineFunc[int Rand(int)] Body
DIVV D2 5000
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.9065; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #161 Body End
LOAD D2 0.0001; for() #161 LoopIncrement
ADDV D2 1
STORE D2 0.0001
GOTO 7129; for() #161 End
LOAD D2 0.0009; InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
GOTO 7281; if() #300 Body End
LOAD D2 0.0004; if() #301 Test AND if() #300 Else Start
COMPAREV D2 1
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 7236 ==; Test 'if'
SETV D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start AND if() #301 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2
LOAD D2 0.0005
DIVV D2 2
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0001
STOREV 0 0; for() #162 setup
LOAD D2 0; for() #162 LoopTest
PUSHR D2
LOAD D2 0.0004
POP D3
COMPARER D3 D2
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7273 ==; for() #162 TestFail?
PUSHR D4; for() #162 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0.0004
SUBV D2 1
POP D3
DIVR D3 D2
SETR D2 D3
POP D3
ADDR D2 D3
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.9065; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; for() #162 Body End
LOAD D2 0; for() #162 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7198; for() #162 End
GOTO 7273; if() #301 Body End
LOAD D2 0.0004; if() #565 Test AND if() #301 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7273 ==; Test 'if'
PUSHR D4; if() #565 Body Start
LOAD D2 0.0009; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params Start
PUSHR D2
LOAD D2 0.0007
PUSHR D2
LOAD D2 0.0006
PUSHR D2
SETV D2 0.0001; InlineFunc[int ArcTan(int, int)] Params Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
ADDV D2 8
PUSHR D2
LOAD D2 0.0007
POP D3
SUBR D3 D2
PUSHR D3
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
ADDV D2 8
PUSHR D2
LOAD D2 0.0006
POP D3
SUBR D3 D2
SETR D1 D3; InlineFunc[int ArcTan(int, int)] Params End
POP D0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR D2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR D2; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Params End
CALLFUNC 0.9065; UsrFunc[void __CopyEWeapon(eweapon, int, int, int)] Call
POP D4; if() #565 Body End
LOAD D2 0.0009; if() #301 Else End AND InlineFunc[void Audio::PlaySound(int)] Params Start
PUSHR D2
SETV D2 2
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void Audio::PlaySound(int)] Params End
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body AND if() #300 Else End
SETV D2 0; if() #299 Else End
PUSHR D2
LOAD D2 0.0011
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body Start
SETR D4 SP2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
SUBV D2 1
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0001; if() #293 Test
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 7387 ==; Test 'if'
PUSHR D4; if() #293 Body Start
LOAD D2 0.0001; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
SETV D2 0.0001
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_Y; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0015; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP D4
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
SETV D2 300
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 7463; if() #293 Body End
LOAD D2 0.0001; if() #294 Test AND if() #293 Else Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 7412 ==; Test 'if'
LOAD D2 0.0001; if() #294 Body Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGLE
ADDV D2 0.3000
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
GOTO 7463; if() #294 Body End
LOAD D2 0.0001; if() #294 Else Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 6
STORE D2 0
LOAD D2 0; if() #295 Test
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7433 ==; Test 'if'
PUSHR D4; if() #295 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 0; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7463; if() #295 Body End
LOAD D2 0; if() #296 Test AND if() #295 Else Start
COMPAREV D2 4
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7445 ==; Test 'if'
PUSHR D4; if() #296 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 3; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7463; if() #296 Body End
LOAD D2 0; if() #297 Test AND if() #296 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7457 ==; Test 'if'
PUSHR D4; if() #297 Body Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 1; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4
GOTO 7463; if() #297 Body End
PUSHR D4; if() #297 Else Start
LOAD D2 0.0001; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params Start
PUSHR D2
PUSHV 2; UsrFunc[void SetEWeaponRotation(eweapon, int)] Params End
CALLFUNC 0.2317; UsrFunc[void SetEWeaponRotation(eweapon, int)] Call
POP D4; if() #297 Else End
POPARGS D5 0.0002; if() #296 Else End AND if() #295 Else End AND if() #294 Else End AND if() #293 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathExplode(eweapon)] Body Start
PUSHR D4
PUSHV 135; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body Start
PUSHR D4
PUSHV 136; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHV -1
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #149 setup
LOAD D2 0; for() #149 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7600 ==; for() #149 TestFail?
PUSHR D4; for() #149 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #149 Body End
LOAD D2 0; for() #149 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7556; for() #149 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #148 setup
LOAD D2 0; for() #148 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7658 ==; for() #148 TestFail?
PUSHR D4; for() #148 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #148 Body End
LOAD D2 0; for() #148 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7614; for() #148 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #291 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 7723 ==; Test 'if'
STOREV 0 0; for() #150 setup AND if() #291 Body Start
LOAD D2 0; for() #150 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7768 ==; for() #150 TestFail?
PUSHR D4; for() #150 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #150 Body End
LOAD D2 0; for() #150 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7678; for() #150 End
GOTO 7768; if() #291 Body End
STOREV 4 0; for() #151 setup AND if() #291 Else Start
LOAD D2 0; for() #151 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7768 ==; for() #151 TestFail?
PUSHR D4; for() #151 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #151 Body End
LOAD D2 0; for() #151 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7724; for() #151 End
SETV D2 0; if() #291 Else End
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #156 setup
LOAD D2 0; for() #156 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7826 ==; for() #156 TestFail?
PUSHR D4; for() #156 Body Start
PUSHV 129; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 200
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #156 Body End
LOAD D2 0; for() #156 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7782; for() #156 End
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #153 setup
LOAD D2 0; for() #153 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7884 ==; for() #153 TestFail?
PUSHR D4; for() #153 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #153 Body End
LOAD D2 0; for() #153 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7840; for() #153 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body Start
SETR D4 SP2
STOREV 4 0; for() #152 setup
LOAD D2 0; for() #152 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 7944 ==; for() #152 TestFail?
PUSHR D4; for() #152 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #152 Body End
LOAD D2 0; for() #152 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7900; for() #152 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body Start
SETR D4 SP2
SETV D3 2; InlineFunc[int Rand(int)] Params AND if() #292 Test
RNDR D2 D3; InlineFunc[int Rand(int)] Body
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8011 ==; Test 'if'
STOREV 0 0; for() #154 setup AND if() #292 Body Start
LOAD D2 0; for() #154 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8056 ==; for() #154 TestFail?
PUSHR D4; for() #154 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #154 Body End
LOAD D2 0; for() #154 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 7966; for() #154 End
GOTO 8056; if() #292 Body End
STOREV 4 0; for() #155 setup AND if() #292 Else Start
LOAD D2 0; for() #155 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8056 ==; for() #155 TestFail?
PUSHR D4; for() #155 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #155 Body End
LOAD D2 0; for() #155 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 8012; for() #155 End
SETV D2 13; if() #292 Else End AND InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0; for() #157 setup
LOAD D2 0; for() #157 LoopTest
COMPAREV D2 4
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8116 ==; for() #157 TestFail?
PUSHR D4; for() #157 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 100
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #157 Body End
LOAD D2 0; for() #157 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 8072; for() #157 End
STOREV 4 0; for() #158 setup
LOAD D2 0; for() #158 LoopTest
COMPAREV D2 8
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 8161 ==; for() #158 TestFail?
PUSHR D4; for() #158 Body Start
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0.0001; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 71
LOAD D2 0.0001
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0.0001
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4; for() #158 Body End
LOAD D2 0; for() #158 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 8117; for() #158 End
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(eweapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0001; InlineFunc[npc screendata::CreateNPC(int)] Params Start
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[npc screendata::CreateNPC(int)] Params End
CREATENPCR D2; InlineFunc[npc screendata::CreateNPC(int)] Body Start
SETR D2 REFNPC; InlineFunc[npc screendata::CreateNPC(int)] Body End
STORE D2 0
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0001
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
SETV D2 0
PUSHR D2
LOAD D2 0.0001
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POPARGS D5 0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(eweapon)] Body End
SETR D4 SP2; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body Start
PUSHR D4
PUSHV 140; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR D4
LOAD D2 0; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
PUSHR D4
LOAD D2 0; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR
PUSHV 0
LOAD D2 0
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
DIVV D2 2
PUSHR D2
LOAD D2 0
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
PUSHR SPRITE_MISCD
PUSHARGSV 0 0.0002; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1336; UsrFunc[eweapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP D4
SETV D2 13; InlineFunc[void Audio::PlaySound(int)] Params
PLAYSOUNDR D2; InlineFunc[void Audio::PlaySound(int)] Body
SETV D2 0
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
POP D5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(eweapon)] Body End
PUSHARGSV 0 0.0005; Func[void __DoEWeaponDeathRunScript(eweapon)] Body Start
SETR D4 SP2
STOREV 0 0.0004
STOREV 0 0.0003
STOREV 0 0.0002
STOREV 0 0.0001
PUSHR D4
CALLFUNC 0.1280; UsrFunc[int FindUnusedFFC()] Call
POP D4
STORE D2 0.0004
LOAD D2 0.0004; if() #566 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8297 ==; Test 'if'
SETV D2 0; if() #566 Body Start
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNDEAD D2
GOTO 8436; return (Void) AND if() #566 Body End
LOAD D2 0.0004; InlineFunc[ffc screendata::LoadFFC(int)] Params
LOAD_FFC D2; InlineFunc[ffc screendata::LoadFFC(int)] Body
STORE D2 0.0003
SETR D2 EWPNCOUNT; for() #163 setup
STORE D2 0
LOAD D2 0; for() #163 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8339 ==; for() #163 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #163 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0002
LOAD D2 0.0002; if() #567 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 768
COMPAREV D2 512
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8335 !=; Test 'if' AND continue 1; AND if() #567 Body
LOAD D2 0.0001; InlineFunc[int Min(int, int)] Params Start
PUSHVARGR D2
LOAD D2 0.0002
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
POP REFSPRITE
PUSHVARGR SPRITE_MISCD; InlineFunc[int Min(int, int)] Params End
MINVARG; InlineFunc[int Min(int, int)] Body
STORE D2 0.0001; for() #163 Body End
LOAD D2 0; for() #163 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8302; for() #163 End
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 3
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0005
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ORV D2 1024
PUSHR D2
LOAD D2 0.0005
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
SETV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR DATA D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterX(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterX(eweapon)] Params End
CALLFUNC 0.0849; UsrFunc[int CenterX(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
PUSHR D4
LOAD D2 0.0005; UsrFunc[int CenterY(eweapon)] Params Start
PUSHR D2; UsrFunc[int CenterY(eweapon)] Params End
CALLFUNC 0.0872; UsrFunc[int CenterY(eweapon)] Call
POP D4
SUBV D2 8
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
LOAD D2 0.0005
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFFFC
SETR FFSCRIPT D2
LOAD D2 0.0001
SUBV D2 1
PUSHR D2
LOAD D2 0.0003
POP D3
PUSHR D2
PUSHR D3
SETV D2 0
PUSHR D2
POP D0
POP D2
POP REFFFC
SETR FFINITDD D2
POPARGS D5 0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(eweapon)] Body End
PUSHARGSV 0 0.0002; Func[void UpdateEWeapons()] Body Start
SETR D4 SP2
STOREV 0 0.0001
SETR D2 LINKACTION; unless() #284 Test
COMPAREV D2 4
GOTOCMP 8455 ==
SETR D2 LINKACTION
COMPAREV D2 5
GOTOCMP 8455 ==
SETR D2 LINKACTION
COMPAREV D2 14
GOTOCMP 8455 ==
SETR D2 LINKACTION
COMPAREV D2 15
GOTOCMP 8455 ==
SETV D2 0
GOTO 8456
SETV D2 1
COMPAREV D2 0
GOTOCMP 8505 !=; Test 'unless'
SETR D2 EWPNCOUNT; for() #143 setup AND unless() #284 Body Start
STORE D2 0
LOAD D2 0; for() #143 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8551 ==; for() #143 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #143 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #543 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 8492 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 8492 !=
SETV D2 0
GOTO 8493
SETV D2 1
COMPAREV D2 0
GOTOCMP 8500 !=; Test 'if' AND continue 1; AND if() #543 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void UpdateEWeapon(eweapon)] Params Start
PUSHR D2; UsrFunc[void UpdateEWeapon(eweapon)] Params End
CALLFUNC 0.2421; UsrFunc[void UpdateEWeapon(eweapon)] Call
POP D4; for() #143 Body End
LOAD D2 0; for() #143 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8460; for() #143 End
GOTO 8551; unless() #284 Body End
SETR D2 EWPNCOUNT; for() #144 setup AND unless() #284 Else Start
STORE D2 0
LOAD D2 0; for() #144 LoopTest
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8551 ==; for() #144 TestFail?
LOAD D2 0; InlineFunc[eweapon screendata::LoadEWeapon(int)] Params AND for() #144 Body Start
SUBV D2 1; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body Start
LOADEWEAPONR D2
SETR D2 REFEWPN; InlineFunc[eweapon screendata::LoadEWeapon(int)] Body End
STORE D2 0.0001
LOAD D2 0.0001; if() #544 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 512
COMPAREV D2 0
GOTOCMP 8539 ==
LOAD D2 0.0001
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 256
COMPAREV D2 0
GOTOCMP 8539 !=
SETV D2 0
GOTO 8540
SETV D2 1
COMPAREV D2 0
GOTOCMP 8547 !=; Test 'if' AND continue 1; AND if() #544 Body
PUSHR D4
LOAD D2 0.0001; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params Start
PUSHR D2; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Params End
CALLFUNC 0.8553; UsrFunc[void __UpdateEWeaponVisualFlags(eweapon)] Call
POP D4; for() #144 Body End
LOAD D2 0; for() #144 LoopIncrement
SUBV D2 1
STORE D2 0
GOTO 8507; for() #144 End
POPARGS D5 0.0002; unless() #284 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0 0.0002; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body Start
SETR D4 SP2
LOAD D2 0.0002; if() #714 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 8
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8580 ==; Test 'if'
LOAD D2 0.0002; if() #715 Test AND if() #714 Body Start
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8580 ==; Test 'if'
PUSHR D4; if() #715 Body Start
LOAD D2 0.0002; UsrFunc[void DrawEWeaponShadow(eweapon)] Params Start
PUSHR D2; UsrFunc[void DrawEWeaponShadow(eweapon)] Params End
CALLFUNC 0.0955; UsrFunc[void DrawEWeaponShadow(eweapon)] Call
POP D4; if() #715 Body End
LOAD D2 0.0002; if() #714 Body End AND if() #400 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 4
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8772 ==; Test 'if'
SETV D2 1000; if() #400 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
LOAD D2 0.0002; if() #716 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
GOTOCMP 8620 ==
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
GOTOCMP 8620 ==
SETV D2 1
GOTO 8621
SETV D2 0
COMPAREV D2 0
GOTOCMP 8829 !=; Test 'if' AND return (Void) AND if() #716 Body
STOREV 0 0.0001
LOAD D2 0.0002; if() #401 Test
PUSHR D2
POP REFEWPN
SETR D2 EWPNANGULAR
COMPAREV D2 0
GOTOCMP 8637 ==; Test 'if'
LOAD D2 0.0002; InlineFunc[int RadtoDeg(int)] Params Start AND if() #401 Body Start
PUSHR D2
POP REFEWPN
SETR D3 EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG D2 D3; InlineFunc[int RadtoDeg(int)] Body
STORE D2 0.0001
GOTO 8703; if() #401 Body End
PUSHR D4; if() #401 Else Start
LOAD D2 0.0002; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_DIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2043; UsrFunc[int __NormalizeDir(int)] Call
POP D4
STORE D2 0
LOAD D2 0; if() #402 Test
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8653 ==; Test 'if'
SETV D2 -90; if() #402 Body Start
STORE D2 0.0001
GOTO 8703; if() #402 Body End
LOAD D2 0; if() #403 Test AND if() #402 Else Start
COMPAREV D2 5
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8661 ==; Test 'if'
SETV D2 -45; if() #403 Body Start
STORE D2 0.0001
GOTO 8703; if() #403 Body End
LOAD D2 0; if() #404 Test AND if() #403 Else Start
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8669 ==; Test 'if'
SETV D2 0; if() #404 Body Start
STORE D2 0.0001
GOTO 8703; if() #404 Body End
LOAD D2 0; if() #405 Test AND if() #404 Else Start
COMPAREV D2 7
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8677 ==; Test 'if'
SETV D2 45; if() #405 Body Start
STORE D2 0.0001
GOTO 8703; if() #405 Body End
LOAD D2 0; if() #406 Test AND if() #405 Else Start
COMPAREV D2 1
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8685 ==; Test 'if'
SETV D2 90; if() #406 Body Start
STORE D2 0.0001
GOTO 8703; if() #406 Body End
LOAD D2 0; if() #407 Test AND if() #406 Else Start
COMPAREV D2 6
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8693 ==; Test 'if'
SETV D2 135; if() #407 Body Start
STORE D2 0.0001
GOTO 8703; if() #407 Body End
LOAD D2 0; if() #408 Test AND if() #407 Else Start
COMPAREV D2 2
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8701 ==; Test 'if'
SETV D2 180; if() #408 Body Start
STORE D2 0.0001
GOTO 8703; if() #408 Body End
SETV D2 -135; if() #408 Else Start
STORE D2 0.0001; if() #408 Else End
STOREV 0 0; if() #407 Else End AND if() #406 Else End AND if() #405 Else End AND if() #404 Else End AND if() #403 Else End AND if() #402 Else End AND if() #401 Else End
LOAD D2 0.0001; if() #409 Test
COMPAREV D2 0
GOTOCMP 8712 <
LOAD D2 0.0001
COMPAREV D2 180
GOTOCMP 8712 >=
SETV D2 1
GOTO 8713
SETV D2 0
COMPAREV D2 0
GOTOCMP 8718 ==; Test 'if'
SETV D2 0; if() #409 Body Start
STORE D2 0
GOTO 8720; if() #409 Body End
SETV D2 2; if() #409 Else Start
STORE D2 0; if() #409 Else End
PUSHV 4; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_TILE
PUSHARGSV 1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_CSET
PUSHARGSV -1 0.0002
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
PUSHR SPRITE_X
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0.0002
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Z
POP D3
SUBR D3 D2
PUSHR D3
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
PUSHR D2
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILER; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0015; InlineFunc[void screendata::DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 8829; if() #400 Body End
LOAD D2 0.0002; if() #717 Test AND if() #400 Else Start
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 16
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8812 ==; Test 'if'
SETR D2 GD26; if() #410 Test AND if() #717 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8803 ==; Test 'if'
SETV D2 1000; if() #410 Body Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2
GOTO 8812; if() #410 Body End
SETV D2 0; if() #410 Else Start
PUSHR D2
LOAD D2 0.0002
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X_OFFSET D2; if() #410 Else End
LOAD D2 0.0002; if() #717 Body End AND if() #718 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8829 ==; Test 'if'
PUSHR D4; if() #718 Body Start
LOAD D2 0.0002; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #718 Body End
POPARGS D5 0.0003; if() #400 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(eweapon)] Body End
SETR D4 SP2; Func[void UpdateGhostZH1()] Body Start
PUSHR D4
CALLFUNC 0.8438; UsrFunc[void UpdateEWeapons()] Call
PEEK D4
CALLFUNC 0.0895; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK D4
CALLFUNC 0.8840; UsrFunc[void UpdateGhostZHData1()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR D4 SP2
SETR D2 CURDMAP
LSHIFTV D2 8
PUSHR D2
SETR D2 CURDSCR
POP D3
ADDR D2 D3
STORE D2 0
SETR D2 GD26; if() #285 Test
PUSHR D2
POP D0
READPODARRAYV D2 7
PUSHR D2
LOAD D2 0
POP D3
COMPARER D3 D2
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 8873 ==; Test 'if'
SETV D2 0; if() #285 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
LOAD D2 0
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 7 D2
GOTO 8891; if() #285 Body End
SETR D2 GD26; if() #545 Test AND if() #285 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 6
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 8891 ==; Test 'if'
SETR D2 GD26; if() #545 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 6
SUBV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #545 Body End
POP D5; if() #285 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR D4 SP2; Func[void UpdateGhostZH2()] Body Start
PUSHR D4
CALLFUNC 0.1021; UsrFunc[void DrawGhostFFCs()] Call
PEEK D4
CALLFUNC 0.0059; UsrFunc[void AutoGhost()] Call
PEEK D4
CALLFUNC 0.8902; UsrFunc[void UpdateGhostZHData2()] Call
POP D4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR D4 SP2; Func[void UpdateGhostZHData2()] Body Start
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 1
ADDV D2 1
MODV D2 8
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 1 D2
SETR D2 GD26; if() #286 Test
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 1
COMPAREV D2 0
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 8934 ==; Test 'if'
SETR D2 GD26; if() #286 Body Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ORV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
GOTO 8944; if() #286 Body End
SETR D2 GD26; if() #286 Else Start
PUSHR D2
POP D0
READPODARRAYV D2 0
ANDV D2 -2
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2; if() #286 Else End
SETR D2 GD26; if(true) #546 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 3
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26; if() #547 Test
PUSHR D2
POP D0
READPODARRAYV D2 3
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 8979 ==; Test 'if'
SETV D2 0; if() #547 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 3 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 2
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 2 D2; if() #547 Body End
SETR D2 GD26; if(true) #548 [Opt:AlwaysOn]
PUSHR D2
POP D0
READPODARRAYV D2 5
ADDV D2 1
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26; if() #549 Test
PUSHR D2
POP D0
READPODARRAYV D2 5
COMPAREV D2 8
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 9014 ==; Test 'if'
SETV D2 0; if() #549 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 5 D2
SETR D2 GD26
PUSHR D2
POP D0
READPODARRAYV D2 4
ADDV D2 1
MODV D2 4
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 4 D2; if() #549 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR D4 SP2; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOAD D2 0.0001; if() #661 Test
COMPAREV D2 97
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 9028 ==; Test 'if'
LOAD D2 0.0001; if() #662 Test AND if() #661 Body Start
COMPAREV D2 122
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9028 ==; Test 'if'
SETV D2 1; return Start AND if() #662 Body Start
GOTO 9063; return End AND if() #662 Body End
LOAD D2 0.0001; if() #661 Body End AND if() #663 Test
COMPAREV D2 65
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 9040 ==; Test 'if'
LOAD D2 0.0001; if() #664 Test AND if() #663 Body Start
COMPAREV D2 90
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9040 ==; Test 'if'
SETV D2 1; return Start AND if() #664 Body Start
GOTO 9063; return End AND if() #664 Body End
LOAD D2 0.0001; if() #663 Body End AND if() #665 Test
COMPAREV D2 95
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9047 ==; Test 'if'
SETV D2 1; return Start AND if() #665 Body Start
GOTO 9063; return End AND if() #665 Body End
LOAD D2 0; unless() #666 Test
COMPAREV D2 0
GOTOCMP 9062 !=; Test 'unless'
LOAD D2 0.0001; if() #667 Test AND unless() #666 Body Start
COMPAREV D2 48
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 9062 ==; Test 'if'
LOAD D2 0.0001; if() #668 Test AND if() #667 Body Start
COMPAREV D2 57
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9062 ==; Test 'if'
SETV D2 1; return Start AND if() #668 Body Start
GOTO 9063; return End AND if() #668 Body End
SETV D2 0; if() #667 Body End AND unless() #666 Body End AND return Start
POPARGS D5 0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(eweapon, int, int, int)] Body Start
SETR D4 SP2
LOAD D2 0.0004; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params Start
PUSHR D2
POP REFEWPN
SETR D2 EWPNID; InlineFunc[eweapon screendata::CreateEWeapon(int)] Params End
CREATEEWEAPONR D2; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body Start
SETR D2 REFEWPN; InlineFunc[eweapon screendata::CreateEWeapon(int)] Body End
STORE D2 0
LOAD D2 0.0004; if() #558 Test
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 0
SETCMP D2 I>
COMPAREV D2 0
GOTOCMP 9097 ==; Test 'if'
LOAD D2 0; InlineFunc[void eweapon::UseSprite(int)] Params Start AND if() #558 Body Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2
SETV D2 5
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD; InlineFunc[void eweapon::UseSprite(int)] Params End
POP D3; InlineFunc[void eweapon::UseSprite(int)] Body Start
SETR REFEWPN D3
EWPNUSESPRITER D2; InlineFunc[void eweapon::UseSprite(int)] Body End AND if() #558 Body End
LOAD D2 0.0004; if() #289 Test
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_EXTEND
COMPAREV D2 3
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 9233 ==; Test 'if'
SETV D2 3; if() #289 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_EXTEND D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_W D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_TILE_H D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_WIDTH D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
MULTV D2 16
SETV D2 16
PUSHR D2
LOAD D2 0.0004
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_H
POP D3
MULTR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_HIT_HEIGHT D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
MULTV D2 8
SETV D2 8
PUSHR D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_TILE_W
POP D3
MULTR D2 D3
POP D3
SUBR D3 D2
SETR D2 D3
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2
GOTO 9253; if() #289 Body End
LOAD D2 0.0003; if() #289 Else Start
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_X D2
LOAD D2 0.0002
SUBV D2 8
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFSPRITE
SETR SPRITE_Y D2; if() #289 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 4
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNSTEP D2
LOAD D2 0.0004
PUSHR D2
POP REFEWPN
SETR D2 EWPNPOWER
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNPOWER D2
SETV D2 1
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNANGULAR D2
LOAD D2 0.0001
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
POP REFEWPN
SETR EWPNANGLE D2
PUSHR D4
LOAD D2 0; UsrFunc[void SetEWeaponDir(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponDir(eweapon)] Params End
CALLFUNC 0.1708; UsrFunc[void SetEWeaponDir(eweapon)] Call
POP D4
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_X
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 4
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0
PUSHR D2
POP REFSPRITE
SETR D2 SPRITE_Y
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 5
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 8
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 10
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 10
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004; if() #290 Test
PUSHR D2
SETV D2 8
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 15
GOTOCMP 9390 !=
LOAD D2 0.0004
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
COMPAREV D2 -1
GOTOCMP 9390 !=
SETV D2 1
GOTO 9391
SETV D2 0
COMPAREV D2 0
GOTOCMP 9410 ==; Test 'if'
PUSHR D4; if() #290 Body Start
LOAD D2 0; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params Start
PUSHR D2; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Params End
CALLFUNC 0.2199; UsrFunc[int __GetEWeaponThrowHeight(eweapon)] Call
POP D4
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
GOTO 9428; if() #290 Body End
LOAD D2 0.0004; if() #290 Else Start
PUSHR D2
SETV D2 9
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 9
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2; if() #290 Else End
LOAD D2 0.0004
PUSHR D2
SETV D2 11
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 11
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 12
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 12
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 13
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 13
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 14
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 14
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0.0004
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 -257
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
SETV D2 15
PUSHR D2
POP D0
POP D2
POP REFSPRITE
SETR SPRITE_MISCD D2
LOAD D2 0; if() #559 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 32
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9541 ==; Test 'if'
SETV D2 0; if() #559 Body Start
PUSHR D2
LOAD D2 0
POP D3
PUSHR D2
PUSHR D3
POP D2
CASTBOOLI D2
POP REFEWPN
SETR EWPNCOLLDET D2; if() #559 Body End
LOAD D2 0; if() #560 Test
PUSHR D2
SETV D2 15
PUSHR D2
POP D0
POP REFSPRITE
SETR D2 SPRITE_MISCD
ANDV D2 2
COMPAREV D2 0
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 9558 ==; Test 'if'
PUSHR D4; if() #560 Body Start
LOAD D2 0; UsrFunc[void SetEWeaponRotation(eweapon)] Params Start
PUSHR D2; UsrFunc[void SetEWeaponRotation(eweapon)] Params End
CALLFUNC 0.1818; UsrFunc[void SetEWeaponRotation(eweapon)] Call
POP D4; if() #560 Body End
POPARGS D5 0.0005
RETURNFUNC; Func[void __CopyEWeapon(eweapon, int, int, int)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR D4 SP2
STOREV 0 0; for() #183 setup
LOAD D2 0; for() #183 LoopTest
PUSHR D2
LOAD D2 0.0001
SUBV D2 1
POP D3
COMPARER D3 D2
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 9609 ==; for() #183 TestFail?
LOAD D2 0.0006; InlineFunc[bool screendata::isSolid(int, int)] Params Start AND if() #729 Test AND for() #183 Body Start
PUSHR D2
LOAD D2 0.0004
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SETR D1 D2; InlineFunc[bool screendata::isSolid(int, int)] Params End
POP D0; InlineFunc[bool screendata::isSolid(int, int)] Body Start
ISSOLID D2; InlineFunc[bool screendata::isSolid(int, int)] Body End
COMPAREV D2 0
GOTOCMP 9605 ==; Test 'if'
SETV D2 0; if() #730 Test AND if() #729 Body Start
PUSHR D2
POP D0
SETR D2 SCREENFLAGSD
ANDV D2 4
COMPAREV D2 0
GOTOCMP 9605 ==; Test 'if'
SETV D2 1; return Start AND if() #730 Body Start
GOTO 9610; return End AND if() #730 Body End
LOAD D2 0; if() #729 Body End AND for() #183 Body End AND for() #183 LoopIncrement
ADDV D2 1
STORE D2 0
GOTO 9563; for() #183 End
SETV D2 0; return Start
POPARGS D5 0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End


PUSHR D0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR D4 SP2
LOAD D2 0.0001; if() #437 Test
COMPAREV D2 0
SETCMP D2 I<=
COMPAREV D2 0
GOTOCMP 16 ==; Test 'if'
SETV D2 -1; if() #437 Body Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2
GOTO 22; if() #437 Body End
LOAD D2 0.0001; if() #437 Else Start
PUSHR D2
SETR D2 GD26
SETR D0 D2
POP D2
WRITEPODARRAYVR 6 D2; if() #437 Else End
POPARGS D5 0.0002
QUIT; void run(int) Body End


SETV GD8 0; void run() Body Start
SETV GD9 0
SETV GD11 0
SETV GD10 0
SETV GD4 0
SETV GD14 0
SETV GD5 0
SETV GD13 0
SETV GD12 0
SETV GD6 0
SETV GD7 0
SETV GD1 0
SETV GD2 0
SETV GD3 0
ALLOCATEGMEMV D2 25 0
SETR GD25 D2
SETV GD15 0
SETV GD16 0
SETV GD20 0
SETV GD17 0
SETV GD21 0
SETV GD18 0
SETV GD19 0
ALLOCATEGMEMV D2 32 0
SETR GD24 D2
SETV GD22 0
SETV GD23 0
ALLOCATEGMEMV D2 8 0
SETR GD26 D2
ALLOCATEGMEMV D2 1000 0
SETR GD27 D2
QUIT; void run() Body End
