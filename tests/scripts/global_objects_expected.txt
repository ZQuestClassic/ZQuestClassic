stderr:

Compiling 'global_objects.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 11,
    "symbols": 20,
    "identifiers": 78,
    "elided": true
  }
}

zasm:

PUSHR REFFFC; void run() Body Start
PUSHARGSV 0 0.0005
SETR D4 SP2
SETR D2 GD1; unless() #447 Test
COMPAREV D2 0
GOTOCMP 81 !=; Test 'unless'
SETV D2 0; ProtoFunc[Thing Thing::Thing()] Set Destructor AND unless() #447 Body Start
ZCLASS_CONSTRUCT D2 {0.0003,0.0005}
ZCLASS_MARK_TYPE {0.0001,0.0001,0.0002,0.0008,0,0.0008,0.0003,0.0008}; ProtoFunc[Thing Thing::Thing()] Default Construct
SET_OBJECT GD1 D2
SETV D2 0; ProtoFunc[Thing Thing::Thing()] Set Destructor
ZCLASS_CONSTRUCT D2 {0.0003,0.0005}
ZCLASS_MARK_TYPE {0.0001,0.0001,0.0002,0.0008,0,0.0008,0.0003,0.0008}; ProtoFunc[Thing Thing::Thing()] Default Construct
PUSHR D2
SETR D2 GD1
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0
SETV D2 0; ProtoFunc[Counter Counter::Counter()] Set Destructor
ZCLASS_CONSTRUCT D2 {0.0001}; ProtoFunc[Counter Counter::Counter()] Default Construct
PUSHR D2
SETR D2 GD1
ZCLASS_READ D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETV D2 0; ProtoFunc[Counter Counter::Counter()] Set Destructor
ZCLASS_CONSTRUCT D2 {0.0001}; ProtoFunc[Counter Counter::Counter()] Default Construct
PUSHR D2
SETR D2 GD1
ZCLASS_READ D2 0
ZCLASS_READ D2 0.0003
SETR D0 D2
POP D2
WRITEPODARRAYVR 0 D2
SETR D2 GD1; InlineFunc[void GlobalObject(untyped)] Params
ZCLASS_GLOBALIZE D2; InlineFunc[void GlobalObject(untyped)] Body
SETR D2 GD1; InlineFunc[void GlobalObject(untyped)] Params Start
ZCLASS_READ D2 0; InlineFunc[void GlobalObject(untyped)] Params End
ZCLASS_GLOBALIZE D2; InlineFunc[void GlobalObject(untyped)] Body
SETR D2 GD1; InlineFunc[void GlobalObject(untyped)] Params Start
ZCLASS_READ D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[void GlobalObject(untyped)] Params End
ZCLASS_GLOBALIZE D2; InlineFunc[void GlobalObject(untyped)] Body
SETR D2 GD1; InlineFunc[void GlobalObject(untyped)] Params Start
ZCLASS_READ D2 0
ZCLASS_READ D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 0; InlineFunc[void GlobalObject(untyped)] Params End
ZCLASS_GLOBALIZE D2; InlineFunc[void GlobalObject(untyped)] Body
PUSHV 256; InlineFunc[bitmap Game::CreateBitmap(int, int)] Params Start
SETV D1 256; InlineFunc[bitmap Game::CreateBitmap(int, int)] Params End
POP D0; InlineFunc[bitmap Game::CreateBitmap(int, int)] Body Start
SETR D2 CREATEBITMAP; InlineFunc[bitmap Game::CreateBitmap(int, int)] Body End
PUSHR D2
SETR D2 GD1
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0.0001
SETV D2 0; ProtoFunc[Counter Counter::Counter()] Set Destructor
ZCLASS_CONSTRUCT D2 {0.0001}; ProtoFunc[Counter Counter::Counter()] Default Construct
PUSHR D2
SETR D2 GD1
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0.0002
SETV D2 1337
PUSHR D2
SETR D2 GD1
ZCLASS_READ D2 0.0002
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0
SETV D2 0; ProtoFunc[Thing Thing::Thing()] Set Destructor
ZCLASS_CONSTRUCT D2 {0.0003,0.0005}
ZCLASS_MARK_TYPE {0.0001,0.0001,0.0002,0.0008,0,0.0008,0.0003,0.0008}; ProtoFunc[Thing Thing::Thing()] Default Construct
SET_OBJECT GD2 D2; unless() #447 Body End
SETR D2 GD1
ZCLASS_READ D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 0
ZCLASS_READ D2 0
ADDV D2 1
PUSHR D2
SETR D2 GD1
ZCLASS_READ D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0
SETR D2 GD1
ZCLASS_READ D2 0
ZCLASS_READ D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 0
ZCLASS_READ D2 0
SUBV D2 1
PUSHR D2
SETR D2 GD1
ZCLASS_READ D2 0
ZCLASS_READ D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 0
SETR D3 D2
POP D2
ZCLASS_WRITE D3 0
ALLOCATEMEMV D2 40 0
STORE D2 0.0004
WRITEPODSTRING D2 "globalThing->someCounters[0]->field %d\n"
LOAD D2 0.0004; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD1
ZCLASS_READ D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 0
ZCLASS_READ D2 0
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0004
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 52 0
STORE D2 0.0003
WRITEPODSTRING D2 "globalThing->otherThing->someCounters[0]->field %d\n"
LOAD D2 0.0003; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD1
ZCLASS_READ D2 0
ZCLASS_READ D2 0.0003
PUSHR D2
POP D0
READPODARRAYV D2 0
ZCLASS_READ D2 0
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0003
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 41 0
STORE D2 0.0002
WRITEPODSTRING D2 "globalThing->a_bitmap->isAllocated() %d\n"
LOAD D2 0.0002; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD1; InlineFunc[bool bitmap::isAllocated()] Params Start
ZCLASS_READ D2 0.0001; InlineFunc[bool bitmap::isAllocated()] Params End
ISALLOCATEDBITMAP D2; InlineFunc[bool bitmap::isAllocated()] Body
COMPAREV D2 0
GOTOCMP 160 ==
SETV D2 1
GOTO 161
SETV D2 0
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0002
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 39 0
STORE D2 0.0001
WRITEPODSTRING D2 "globalThing->not_globalized->field %d\n"
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD1
ZCLASS_READ D2 0.0002
COMPAREV D2 0
GOTOCMP 179 ==
SETR D2 GD1
ZCLASS_READ D2 0.0002
ZCLASS_READ D2 0
GOTO 180
SETV D2 0
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0001
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 23 0
STORE D2 0
WRITEPODSTRING D2 "thingNotGlobalized %d\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETR D2 GD2
COMPAREV D2 0
GOTOCMP 195 ==
SETV D2 1
GOTO 196
SETV D2 0
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
POPARGS D5 0.0006
QUIT; void run() Body End


MARK_TYPE_REG GD1 0.0008; void run() Body Start
SETV GD1 0
MARK_TYPE_REG GD2 0.0008
SETV GD2 0
QUIT; void run() Body End
