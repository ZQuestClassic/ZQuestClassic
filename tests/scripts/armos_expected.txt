Compiling 'armos.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR d0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0,0.0003
SETR d4,SP
PUSHR d4
LOADD d2,3; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params End
CALLFUNC 0.4206; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Call
POP d4
STORED d2,2
PUSHR d4
PUSHV 89; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3144; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 3; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3144; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3144; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4
LOADD d2,2; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
PUSHR d4
LOADD d2,3; UsrFunc[void SpawnAnimation(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[void SpawnAnimation(FFC, NPC)] Params End
CALLFUNC 0.5698; UsrFunc[void SpawnAnimation(FFC, NPC)] Call
POP d4
LOADD d2,2
PUSHR d2
POP REFNPC
SETR d2,NPCSTEP
DIVV d2,100
STORED d2,1
LOADD d2,2
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,0
SETR d2,gd4; if() #954 Test AND while(true) #15 Body [Opt:AlwaysOn] Start
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 60
SETR d2,gd6
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 68; Test 'if'
SETV d2,1.5000; if() #954 Body Start
SETR gd6,d2
LOADD d2,0; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #954 Body End
PUSHR d4
LOADD d2,1; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params End
CALLFUNC 0.4371; UsrFunc[void Ghost_MoveTowardLink(int, int)] Call
PEEK d4
LOADD d2,3; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params End
CALLFUNC 0.4438; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Call
POP d4; while(true) #15 Body [Opt:AlwaysOn] End
GOTO 52; while() #15 End AND [Opt:NeverRet] AND void run(int) Body End
SETR d4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR d4,SP; Func[int AngleDir8(int)] Body Start
LOADD d2,0; if() #7 Test
COMPAREV d2,157.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 110
LOADD d2,0
COMPAREV d2,112.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 116; Test 'if'
SETV d2,6; return Start AND if() #7 Body Start
GOTO 201; return End AND if() #7 Body End
LOADD d2,0; if() #8 Test AND if() #7 Else Start
COMPAREV d2,112.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 124
LOADD d2,0
COMPAREV d2,67.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 130; Test 'if'
SETV d2,1; return Start AND if() #8 Body Start
GOTO 201; return End AND if() #8 Body End
LOADD d2,0; if() #9 Test AND if() #8 Else Start
COMPAREV d2,67.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 138
LOADD d2,0
COMPAREV d2,22.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 144; Test 'if'
SETV d2,7; return Start AND if() #9 Body Start
GOTO 201; return End AND if() #9 Body End
LOADD d2,0; if() #10 Test AND if() #9 Else Start
COMPAREV d2,22.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 152
LOADD d2,0
COMPAREV d2,-22.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 158; Test 'if'
SETV d2,3; return Start AND if() #10 Body Start
GOTO 201; return End AND if() #10 Body End
LOADD d2,0; if() #11 Test AND if() #10 Else Start
COMPAREV d2,-22.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 166
LOADD d2,0
COMPAREV d2,-67.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 172; Test 'if'
SETV d2,5; return Start AND if() #11 Body Start
GOTO 201; return End AND if() #11 Body End
LOADD d2,0; if() #12 Test AND if() #11 Else Start
COMPAREV d2,-67.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 180
LOADD d2,0
COMPAREV d2,-112.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 186; Test 'if'
SETV d2,0; return Start AND if() #12 Body Start
GOTO 201; return End AND if() #12 Body End
LOADD d2,0; if() #13 Test AND if() #12 Else Start
COMPAREV d2,-112.5000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 194
LOADD d2,0
COMPAREV d2,-157.5000
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 200; Test 'if'
SETV d2,4; return Start AND if() #13 Body Start
GOTO 201; return End AND if() #13 Body End
SETV d2,2; return Start AND if() #13 Else Start
POP d5; return End AND if() #13 Else End AND if() #12 Else End AND if() #11 Else End AND if() #10 Else End AND if() #9 Else End AND if() #8 Else End AND if() #7 Else End
RETURNFUNC; Func[int AngleDir8(int)] Body End
SETR d4,SP; Func[int Clamp(int, int, int)] Body Start
LOADD d2,2; if() #20 Test
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 215; Test 'if'
LOADD d2,1; if() #20 Body Start
STORED d2,2
GOTO 225; if() #20 Body End
LOADD d2,2; if() #85 Test AND if() #20 Else Start
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 225; Test 'if'
LOADD d2,0; if() #85 Body Start
STORED d2,2; if() #85 Body End
LOADD d2,2; if() #20 Else End AND return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
SETR d4,SP; Func[bool ClockIsActive()] Body Start
SETR d2,gd27; return Start
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETCMP d2,0.0011
RETURNFUNC; return End AND Func[bool ClockIsActive()] Body End
PUSHARGSV 0,0.0004; Func[int ComboAt(int, int)] Body Start
SETR d4,SP
SETR d2,REGION_ID; if() #29 Test
COMPAREV d2,0
GOTOTRUE 296; Test 'if'
PUSHR d4; if() #29 Body Start
LOADD d2,5; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
SETR d2,REGION_WIDTH
SUBV d2,1
PUSHR d2
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0320; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,5
PUSHR d4
LOADD d2,4; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
SETR d2,REGION_HEIGHT
SUBV d2,1
PUSHR d2
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0320; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,4
LOADD d2,5; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,256; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,3
LOADD d2,4; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,176; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
SETR d2,REGIONSCREENWIDTH
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
MULTV d2,176
STORED d2,1
LOADD d2,4
MODV d2,176
ANDV d2,240
PUSHR d2
LOADD d2,5
MODV d2,256
RSHIFTV d2,4
POP d3
ADDR d2,d3
STORED d2,0
LOADD d2,1; return Start
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
GOTO 318; return End AND if() #29 Body End
PUSHR d4; if() #29 Else Start
LOADD d2,5; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 255
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0320; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,5
PUSHR d4
LOADD d2,4; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 175
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0320; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,4; return Start
ANDV d2,240
PUSHR d2
LOADD d2,5
RSHIFTV d2,4
POP d3
ADDR d2,d3
POPARGS d5,0.0006; return End AND if() #29 Else End
RETURNFUNC; Func[int ComboAt(int, int)] Body End
SETR d4,SP; Func[int VBound(int, int, int)] Body Start
LOADD d2,2; if() #351 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 332; Test 'if'
LOADD d2,0; if() #351 Body Start
STORED d2,2
GOTO 342; if() #351 Body End
LOADD d2,2; if() #581 Test AND if() #351 Else Start
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 342; Test 'if'
LOADD d2,1; if() #581 Body Start
STORED d2,2; if() #581 Body End
LOADD d2,2; if() #351 Else End AND return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int VBound(int, int, int)] Body End
PUSHV 0; Func[bool IsWater(int)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP d0
SETR d2,COMBOTD
STORED d2,0; if() #371 Test
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 358; Test 'if'
SETV d2,1; return Start AND if() #371 Body Start
GOTO 387; return End AND if() #371 Body End
LOADD d2,0; if() #372 Test
COMPAREV d2,18
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 365; Test 'if'
SETV d2,1; return Start AND if() #372 Body Start
GOTO 387; return End AND if() #372 Body End
LOADD d2,0; if() #373 Test
COMPAREV d2,19
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 372; Test 'if'
SETV d2,1; return Start AND if() #373 Body Start
GOTO 387; return End AND if() #373 Body End
LOADD d2,0; if() #374 Test
COMPAREV d2,86
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 380
LOADD d2,0
COMPAREV d2,91
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 386; Test 'if'
SETV d2,1; return Start AND if() #374 Body Start
GOTO 387; return End AND if() #374 Body End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool IsWater(int)] Body End
SETR d4,SP; Func[bool __IsPit(int)] Body Start
PUSHR d4; return Start
LOADD d2,0; UsrFunc[bool IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool IsPit(int)] Params End
CALLFUNC 0.5646; UsrFunc[bool IsPit(int)] Call
POP d4
POP d5; return End
RETURNFUNC; Func[bool __IsPit(int)] Body End
SETR d4,SP; Func[bool Ghost_CanMove(int, int, int)] Body Start
PUSHR d4; return Start
LOADD d2,2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd4
COMPAREV d2,0
SETCMP d2,0.0009
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0413; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
POPARGS d5,0.0003; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int)] Body End
SETR d4,SP; Func[bool Ghost_CanMove(int, int, int, bool)] Body Start
LOADD d2,2; if() #241 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 421; Test 'if'
SETV d2,1; return Start AND if() #241 Body Start
GOTO 471; return End AND if() #241 Body End
LOADD d2,3; if() #242 Test
COMPAREV d2,4
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 429; Test 'if'
LOADD d2,2; if() #242 Body Start
MULTV d2,0.7071
STORED d2,2; if() #242 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.0473; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,3
LOADD d2,2; while() #1 Test
COMPAREV d2,8
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 460; Test 'while'
PUSHR d4; unless() #243 Test AND while() #1 Body Start
LOADD d2,3; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
SUBV d2,8
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0547; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 456; Test 'unless'
SETV d2,0; return Start AND unless() #243 Body Start
GOTO 471; return End AND unless() #243 Body End
LOADD d2,2
SUBV d2,8
STORED d2,2; while() #1 Body End
GOTO 435; while() #1 End
PUSHR d4; return Start
LOADD d2,3; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0547; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
POPARGS d5,0.0004; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int, bool)] Body End
SETR d4,SP; Func[int __NormalizeDir(int)] Body Start
LOADD d2,0; if() #701 Test
COMPAREV d2,0
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 482
LOADD d2,0
COMPAREV d2,7
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 488; Test 'if'
LOADD d2,0; return Start AND if() #701 Body Start
GOTO 545; return End AND if() #701 Body End
LOADD d2,0; if() #702 Test
COMPAREV d2,8
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 495; Test 'if'
SETV d2,0; return Start AND if() #702 Body Start
GOTO 545; return End AND if() #702 Body End
LOADD d2,0; if() #703 Test
COMPAREV d2,9
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 502; Test 'if'
SETV d2,5; return Start AND if() #703 Body Start
GOTO 545; return End AND if() #703 Body End
LOADD d2,0; if() #704 Test
COMPAREV d2,10
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 509; Test 'if'
SETV d2,3; return Start AND if() #704 Body Start
GOTO 545; return End AND if() #704 Body End
LOADD d2,0; if() #705 Test
COMPAREV d2,11
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 516; Test 'if'
SETV d2,7; return Start AND if() #705 Body Start
GOTO 545; return End AND if() #705 Body End
LOADD d2,0; if() #706 Test
COMPAREV d2,12
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 523; Test 'if'
SETV d2,1; return Start AND if() #706 Body Start
GOTO 545; return End AND if() #706 Body End
LOADD d2,0; if() #707 Test
COMPAREV d2,13
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 530; Test 'if'
SETV d2,6; return Start AND if() #707 Body Start
GOTO 545; return End AND if() #707 Body End
LOADD d2,0; if() #708 Test
COMPAREV d2,14
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 537; Test 'if'
SETV d2,2; return Start AND if() #708 Body Start
GOTO 545; return End AND if() #708 Body End
LOADD d2,0; if() #709 Test
COMPAREV d2,15
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 544; Test 'if'
SETV d2,4; return Start AND if() #709 Body Start
GOTO 545; return End AND if() #709 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
PUSHARGSV 0,0.0006; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body Start
SETR d4,SP
LOADD d2,9; if() #366 Test
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 671; Test 'if'
SETR d2,gd14; if() #366 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #171 setup
STORED d2,5
LOADD d2,5; for() #171 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 629; for() #171 TestFail?
PUSHR d4; unless() #610 Test AND for() #171 Body Start
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1322; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 625; Test 'unless'
SETV d2,0; return Start AND unless() #610 Body Start
GOTO 1320; return End AND unless() #610 Body End
LOADD d2,5; for() #171 Body End AND for() #171 LoopIncrement
ADDV d2,1
STORED d2,5
GOTO 599; for() #171 End
PUSHR d4; unless() #611 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1322; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 646; Test 'unless'
SETV d2,0; return Start AND unless() #611 Body Start
GOTO 1320; return End AND unless() #611 Body End
PUSHR d4; unless() #612 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1322; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 669; Test 'unless'
SETV d2,0; return Start AND unless() #612 Body Start
GOTO 1320; return End AND unless() #612 Body End
SETV d2,1; return Start
GOTO 1320; return End AND if() #366 Body End
LOADD d2,9; if() #367 Test AND if() #366 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 804; Test 'if'
SETR d2,gd14; if() #367 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd2
PUSHR d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
STORED d2,4
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #172 setup
STORED d2,5
LOADD d2,5; for() #172 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 762; for() #172 TestFail?
PUSHR d4; unless() #613 Test AND for() #172 Body Start
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1322; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 758; Test 'unless'
SETV d2,0; return Start AND unless() #613 Body Start
GOTO 1320; return End AND unless() #613 Body End
LOADD d2,5; for() #172 Body End AND for() #172 LoopIncrement
ADDV d2,1
STORED d2,5
GOTO 732; for() #172 End
PUSHR d4; unless() #614 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1322; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 779; Test 'unless'
SETV d2,0; return Start AND unless() #614 Body Start
GOTO 1320; return End AND unless() #614 Body End
PUSHR d4; unless() #615 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1322; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 802; Test 'unless'
SETV d2,0; return Start AND unless() #615 Body Start
GOTO 1320; return End AND unless() #615 Body End
SETV d2,1; return Start
GOTO 1320; return End AND if() #367 Body End
LOADD d2,9; if() #368 Test AND if() #367 Else Start
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 943; Test 'if'
PUSHR d4; if() #616 Test AND if() #368 Body Start
CALLFUNC 0.4419; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOTRUE 820
PUSHR d4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 826; Test 'if'
SETV d2,0; return Start AND if() #616 Body Start
GOTO 1320; return End AND if() #616 Body End
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #173 setup
STORED d2,5
LOADD d2,5; for() #173 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 901; for() #173 TestFail?
PUSHR d4; unless() #617 Test AND for() #173 Body Start
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1322; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 897; Test 'unless'
SETV d2,0; return Start AND unless() #617 Body Start
GOTO 1320; return End AND unless() #617 Body End
LOADD d2,5; for() #173 Body End AND for() #173 LoopIncrement
ADDV d2,1
STORED d2,5
GOTO 871; for() #173 End
PUSHR d4; unless() #618 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1322; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 918; Test 'unless'
SETV d2,0; return Start AND unless() #618 Body Start
GOTO 1320; return End AND unless() #618 Body End
PUSHR d4; unless() #619 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1322; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 941; Test 'unless'
SETV d2,0; return Start AND unless() #619 Body Start
GOTO 1320; return End AND unless() #619 Body End
SETV d2,1; return Start
GOTO 1320; return End AND if() #368 Body End
LOADD d2,9; if() #369 Test AND if() #368 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1076; Test 'if'
SETR d2,gd13; if() #369 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
STORED d2,4
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #174 setup
STORED d2,5
LOADD d2,5; for() #174 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 1034; for() #174 TestFail?
PUSHR d4; unless() #620 Test AND for() #174 Body Start
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1322; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1030; Test 'unless'
SETV d2,0; return Start AND unless() #620 Body Start
GOTO 1320; return End AND unless() #620 Body End
LOADD d2,5; for() #174 Body End AND for() #174 LoopIncrement
ADDV d2,1
STORED d2,5
GOTO 1004; for() #174 End
PUSHR d4; unless() #621 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1322; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1051; Test 'unless'
SETV d2,0; return Start AND unless() #621 Body Start
GOTO 1320; return End AND unless() #621 Body End
PUSHR d4; unless() #622 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1322; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1074; Test 'unless'
SETV d2,0; return Start AND unless() #622 Body Start
GOTO 1320; return End AND unless() #622 Body End
SETV d2,1; return Start
GOTO 1320; return End AND if() #369 Body End
LOADD d2,9; if() #370 Test AND if() #369 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1136; Test 'if'
SETR d2,gd2; if() #370 Body Start
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0413; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #623 Test
COMPAREV d2,0
GOTOFALSE 1110; Test 'unless'
SETV d2,0; return Start AND unless() #623 Body Start
GOTO 1320; return End AND unless() #623 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0413; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1320; return End AND if() #370 Body End
LOADD d2,9; if() #371 Test AND if() #370 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1197; Test 'if'
STOREDV 0,0; if() #371 Body Start
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0413; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #624 Test
COMPAREV d2,0
GOTOFALSE 1171; Test 'unless'
SETV d2,0; return Start AND unless() #624 Body Start
GOTO 1320; return End AND unless() #624 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0413; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1320; return End AND if() #371 Body End
LOADD d2,9; if() #372 Test AND if() #371 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1258; Test 'if'
STOREDV 0,0; if() #372 Body Start
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0413; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #625 Test
COMPAREV d2,0
GOTOFALSE 1232; Test 'unless'
SETV d2,0; return Start AND unless() #625 Body Start
GOTO 1320; return End AND unless() #625 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0413; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1320; return End AND if() #372 Body End
LOADD d2,9; if() #373 Test AND if() #372 Else Start
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1319; Test 'if'
STOREDV 0,0; if() #373 Body Start
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0413; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #626 Test
COMPAREV d2,0
GOTOFALSE 1293; Test 'unless'
SETV d2,0; return Start AND unless() #626 Body Start
GOTO 1320; return End AND unless() #626 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0413; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1320; return End AND if() #373 Body End
SETV d2,0; return Start AND if() #373 Else Start
POPARGS d5,0.0010; return End AND if() #373 Else End AND if() #372 Else End AND if() #371 Else End AND if() #370 Else End AND if() #369 Else End AND if() #368 Else End AND if() #367 Else End AND if() #366 Else End
RETURNFUNC; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body End
PUSHV 0; Func[bool Ghost_CanMovePixel(int, int, bool)] Body Start
SETR d4,SP
LOADD d2,3; if() #244 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 1333
LOADD d2,3
COMPAREV d2,255
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1340
LOADD d2,2
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1347
LOADD d2,2
COMPAREV d2,175
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1355; Test 'if'
PUSHR d4; return Start AND if() #244 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1548; return End AND if() #244 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0236; UsrFunc[int ComboAt(int, int)] Call
POP d4
STORED d2,0
PUSHR d4; unless() #245 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1460; Test 'unless'
LOADD d2,0; if() #246 Test AND unless() #245 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,110
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1379; Test 'if'
SETV d2,0; return Start AND if() #246 Body Start
GOTO 1548; return End AND if() #246 Body End
LOADD d2,0; if() #247 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,96
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1389; Test 'if'
SETV d2,0; return Start AND if() #247 Body Start
GOTO 1548; return End AND if() #247 Body End
LOADD d2,0; if() #248 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,96
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1399; Test 'if'
SETV d2,0; return Start AND if() #248 Body Start
GOTO 1548; return End AND if() #248 Body End
PUSHR d4; if() #83 Test
PUSHV 65536; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1416; Test 'if'
LOADD d2,0; if() #249 Test AND if() #83 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,44
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1415; Test 'if'
SETV d2,0; return Start AND if() #249 Body Start
GOTO 1548; return End AND if() #249 Body End
GOTO 1460; if() #83 Body End
LOADD d2,1; if() #84 Test AND if() #83 Else Start
COMPAREV d2,0
GOTOTRUE 1430; Test 'if'
LOADD d2,0; if() #250 Test AND if() #84 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,54
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1429; Test 'if'
SETV d2,0; return Start AND if() #250 Body Start
GOTO 1548; return End AND if() #250 Body End
GOTO 1460; if() #84 Body End
LOADD d2,0; if() #251 Test AND if() #84 Else Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,128
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1440; Test 'if'
SETV d2,0; return Start AND if() #251 Body Start
GOTO 1548; return End AND if() #251 Body End
LOADD d2,0; if() #252 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,97
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1450; Test 'if'
SETV d2,0; return Start AND if() #252 Body Start
GOTO 1548; return End AND if() #252 Body End
LOADD d2,0; if() #253 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,97
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1460; Test 'if'
SETV d2,0; return Start AND if() #253 Body Start
GOTO 1548; return End AND if() #253 Body End
PUSHR d4; if() #84 Else End AND if() #83 Else End AND unless() #245 Body End AND if() #254 Test
PUSHV 65539; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1472; Test 'if'
PUSHR d4; return Start AND if() #254 Body Start
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0345; UsrFunc[bool IsWater(int)] Call
POP d4
GOTO 1548; return End AND if() #254 Body End
PUSHR d4; if() #255 Test
PUSHV 65538; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1494; Test 'if'
PUSHR d4; return Start AND if() #255 Body Start
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0345; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1492
LOADD d2,0
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,58
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
GOTO 1548; return End AND if() #255 Body End
PUSHR d4; if() #256 Test
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0345; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1506; Test 'if'
PUSHR d4; return Start AND if() #256 Body Start
PUSHV 2048; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1548; return End AND if() #256 Body End
PUSHR d4; if() #257 Test
LOADD d2,0; UsrFunc[bool __IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool __IsPit(int)] Params End
CALLFUNC 0.0389; UsrFunc[bool __IsPit(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1518; Test 'if'
PUSHR d4; return Start AND if() #257 Body Start
PUSHV 4096; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1548; return End AND if() #257 Body End
PUSHR d4; if() #85 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1526; Test 'if'
SETV d2,1; return Start AND if() #85 Body Start
GOTO 1548; return End AND if() #85 Body End
PUSHR d4; if() #86 Test AND if() #85 Else Start
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1540; Test 'if'
PUSHR d4; return Start AND if() #86 Body Start
LOADD d2,3; UsrFunc[bool __FullTileWalkable(int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[bool __FullTileWalkable(int, int)] Params End
CALLFUNC 0.1581; UsrFunc[bool __FullTileWalkable(int, int)] Call
POP d4
GOTO 1548; return End AND if() #86 Body End
LOADD d2,3; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND return Start AND if() #86 Else Start
PUSHR d2
LOADD d2,2
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0012
POPARGS d5,0.0004; return End AND if() #86 Else End AND if() #85 Else End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int, bool)] Body End
SETR d4,SP; Func[bool Ghost_FlagIsSet(int)] Body Start
LOADD d2,0; if() #119 Test
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1569; Test 'if'
SETR d2,gd17; return Start AND if() #119 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETCMP d2,0.0011
GOTO 1579; return End AND if() #119 Body End
SETR d2,gd16; return Start AND if() #119 Else Start
PUSHR d2
LOADD d2,0
POP d3
ANDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
POP d5; return End AND if() #119 Else End
RETURNFUNC; Func[bool Ghost_FlagIsSet(int)] Body End
SETR d4,SP; Func[bool __FullTileWalkable(int, int)] Body Start
LOADD d2,1; if() #600 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 1591
LOADD d2,0
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1598
LOADD d2,1
COMPAREV d2,256
SETCMP d2,0.0013
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1605
LOADD d2,0
COMPAREV d2,176
SETCMP d2,0.0013
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1613; Test 'if'
PUSHR d4; return Start AND if() #600 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1674; return End AND if() #600 Body End
LOADD d2,1
PUSHR d2
LOADD d2,1
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
LOADD d2,0
PUSHR d2
LOADD d2,0
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #601 Test
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOFALSE 1645
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1656
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1668
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1673; Test 'if'
SETV d2,0; return Start AND if() #601 Body Start
GOTO 1674; return End AND if() #601 Body End
SETV d2,1; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool __FullTileWalkable(int, int)] Body End
PUSHARGSV 0,0.0004; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body Start
SETR d4,SP
PUSHR d4; if() #258 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1687
PUSHR d4
CALLFUNC 0.0228; UsrFunc[bool ClockIsActive()] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 1706
PUSHR d4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1703
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1938; Test 'if'
LOADD d2,5; if() #258 Body Start
PUSHR d2
POP REFFFC
SETR d2,XD
STORED d2,3
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,YD
STORED d2,2
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,XD2
STORED d2,1
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,YD2
STORED d2,0
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETR d2,gd18
ORV d2,2
SETR gd18,d2
PUSHR d4; while() #2 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1777
PUSHR d4
CALLFUNC 0.0228; UsrFunc[bool ClockIsActive()] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 1796
PUSHR d4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1793
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1902; Test 'while'
PUSHR d4; while() #2 Body Start
LOADD d2,5; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
CALLFUNC 0.1941; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
CALLFUNC 0.2023; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2192; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND unless() #87 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 1823; Test 'unless'
SETV d2,0; return Start AND unless() #87 Body Start
GOTO 1939; return End
GOTO 1833; unless() #87 Body End
LOADD d2,4; if() #259 Test AND unless() #87 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 1833; Test 'if'
SETV d2,0; return Start AND if() #259 Body Start
GOTO 1939; return End AND if() #259 Body End
PUSHR d4; unless() #87 Else End
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2590; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1862; Test 'if'
SETR d2,gd11; if() #88 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0473; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 1894; if() #88 Body End
PUSHR d4; if() #89 Test AND if() #88 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1885; Test 'if'
SETR d2,gd11; if() #89 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0473; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 1894; if() #89 Body End
SETR d2,gd11; if() #89 Else Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #89 Else End
PUSHR d4; if() #88 Else End
LOADD d2,5; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
CALLFUNC 0.2723; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
POP d4; while() #2 Body End
GOTO 1768; while() #2 End
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
LOADD d2,2
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
LOADD d2,1
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
LOADD d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2; if() #258 Body End
SETV d2,1; return Start
POPARGS d5,0.0006; return End
RETURNFUNC; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body End
PUSHV 0; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body Start
SETR d4,SP
SETR d2,gd21; if() #667 Test
COMPAREV d2,1
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 1958; Test 'if'
SETR d2,gd21; if() #667 Body Start
SUBV d2,1
SETR gd21,d2
SETR d2,gd21; if() #668 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1958; Test 'if'
SETV d2,1; if() #668 Body Start
STORED d2,0; if() #668 Body End
SETR d2,gd18; if() #667 Body End AND if() #669 Test
ANDV d2,8
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2021; Test 'if'
SETR d2,gd21; if() #402 Test AND if() #669 Body Start
COMPAREV d2,0
SETCMP d2,0.0009
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 1985; Test 'if'
SETR d2,gd27; if() #402 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
RSHIFTV d2,1
SUBV2 9,d2
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 2021; if() #402 Body End
LOADD d2,1; if() #403 Test AND if() #402 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,64
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2009; Test 'if'
SETR d2,gd27; if() #403 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
ANDV d2,3
ADDV d2,6
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 2021; if() #403 Body End
LOADD d2,0; if() #670 Test AND if() #403 Else Start
COMPAREV d2,0
GOTOTRUE 2021; Test 'if'
SETR d2,gd12; if() #670 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #670 Body End
POPARGS d5,0.0003; if() #403 Else End AND if() #402 Else End AND if() #669 Body End
RETURNFUNC; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body End
PUSHARGSV 0,0.0004; Func[void __Ghost_DrawShadow(NPC)] Body Start
SETR d4,SP
SETR d2,gd4; if() #627 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2031; Test 'if'
GOTO 2190; return (Void) AND if() #627 Body
PUSHR d4; unless() #628 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLI d2
COMPAREV d2,0
GOTOFALSE 2045
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCEXTEND
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2055
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCTYPE
COMPAREV d2,40
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2059; Test 'unless'
GOTO 2190; return (Void) AND unless() #628 Body
SETR d2,gd13; if() #374 Test
COMPAREV d2,3
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 2068
SETR d2,gd14
COMPAREV d2,3
SETCMP d2,0.0010
COMPAREV d2,0
SETCMP d2,0.0003
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 2118; Test 'if'
SETR d2,gd2; if() #374 Body Start
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
SETV d2,1
STORED d2,0
PUSHR d4; if() #375 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2111; Test 'if'
SETV d2,27400; if() #375 Body Start
STORED d2,1
GOTO 2117; if() #375 Body End
SETR d2,gd27; if() #375 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
STORED d2,1; if() #375 Else End
GOTO 2172; if() #374 Body End
SETR d2,gd2; if() #374 Else Start
PUSHR d2
SETR d2,gd13
SUBV d2,2
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,2
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
SETV d2,2
STORED d2,0
PUSHR d4; if() #376 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2157; Test 'if'
SETV d2,27392; if() #376 Body Start
STORED d2,1
GOTO 2172; if() #376 Body End
SETR d2,gd27; if() #376 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,4
MULTV d2,2
SETV d2,2
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
POP d3
MULTR d2,d3
ADDV d2,27392
STORED d2,1; if() #376 Else End
PUSHV 1; if() #374 Else End AND InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #377 [Opt:AlwaysOn]
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_DrawShadow(NPC)] Body End
PUSHARGSV 0,0.0004; Func[void Ghost_WaitframeLight(FFC, NPC)] Body Start
SETR d4,SP
ALLOCATEMEMV d2,24
STORED d2,2
SETR d0,d2
PUSHR d0
SETR d2,gd2
POP d0
WRITEPODARRAYVR 0,d2
PUSHR d0
SETR d2,gd3
POP d0
WRITEPODARRAYVR 1,d2
PUSHR d0
SETR d2,gd4
POP d0
WRITEPODARRAYVR 2,d2
PUSHR d0
SETR d2,gd6
POP d0
WRITEPODARRAYVR 3,d2
PUSHR d0
SETR d2,gd7
POP d0
WRITEPODARRAYVR 4,d2
PUSHR d0
SETR d2,gd8
POP d0
WRITEPODARRAYVR 5,d2
PUSHR d0
SETR d2,gd9
POP d0
WRITEPODARRAYVR 6,d2
PUSHR d0
SETR d2,gd10
POP d0
WRITEPODARRAYVR 7,d2
PUSHR d0
SETR d2,gd19
POP d0
WRITEPODARRAYVR 8,d2
PUSHR d0
SETR d2,gd20
POP d0
WRITEPODARRAYVR 9,d2
PUSHR d0
SETR d2,gd12
POP d0
WRITEPODARRAYVR 10,d2
PUSHR d0
SETR d2,gd5
POP d0
WRITEPODARRAYVR 11,d2
PUSHR d0
SETR d2,gd11
POP d0
WRITEPODARRAYVR 12,d2
PUSHR d0
SETR d2,gd13
POP d0
WRITEPODARRAYVR 13,d2
PUSHR d0
SETR d2,gd14
POP d0
WRITEPODARRAYVR 14,d2
PUSHR d0
SETR d2,gd16
POP d0
WRITEPODARRAYVR 15,d2
PUSHR d0
SETR d2,gd17
POP d0
WRITEPODARRAYVR 16,d2
PUSHR d0
SETR d2,gd18
POP d0
WRITEPODARRAYVR 17,d2
PUSHR d0
SETR d2,gd21
POP d0
WRITEPODARRAYVR 18,d2
PUSHR d0
SETR d2,gd22
POP d0
WRITEPODARRAYVR 19,d2
PUSHR d0
SETR d2,gd15
POP d0
WRITEPODARRAYVR 20,d2
PUSHR d0
SETR d2,gd23
POP d0
WRITEPODARRAYVR 21,d2
PUSHR d0
SETR d2,gd24
POP d0
WRITEPODARRAYVR 22,d2
ALLOCATEMEMV d2,21
STORED d2,1
SETR d2,gd26; if() #355 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2321; Test 'if'
LOADD d2,0; for() #67 LoopTest AND if() #355 Body Start
COMPAREV d2,21
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2321; for() #67 TestFail?
SETR d2,gd26; for() #67 Body Start
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #67 Body End
LOADD d2,0; for() #67 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 2299; for() #67 End
LOADD d2,4; if() #355 Body End AND InlineFunc[bool NPC->isValid()] Params AND if() #356 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2338; Test 'if'
LOADD d2,2; if() #356 Body Start
ORV d2,65536
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #356 Body End
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND if() #168 Test AND do-while() #2 Body Start
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2400; Test 'if'
SETR d2,gd26; if() #170 Test AND if(true) #169 [Opt:AlwaysOn] AND if() #168 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2375; Test 'if'
ALLOCATEMEMV d2,34; if() #170 Body Start
STORED d2,0
PUSHR d4
LOADD d2,5; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
CALLFUNC 0.5345; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
LOADD d2,2
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5618; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOADD d3,0
DEALLOCATEMEMR d3
GOTO 2399; if() #170 Body End
ALLOCATEMEMV d2,10; if() #170 Else Start
STORED d2,0
PUSHR d4
LOADD d2,5; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
CALLFUNC 0.5345; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
LOADD d2,2
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5618; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOADD d3,0
DEALLOCATEMEMR d3; if() #170 Else End
GOTO 2405; if() #168 Body End
PUSHR d4; if() #168 Else Start
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5618; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4; if() #168 Else End
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,0
SETR gd2,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,1
SETR gd3,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,2
SETR gd4,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,3
SETR gd6,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,4
SETR gd7,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,5
SETR gd8,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,6
SETR gd9,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,7
SETR gd10,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,8
SETR gd19,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,9
SETR gd20,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,10
SETR gd12,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,11
SETR gd5,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,12
SETR gd11,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,13
SETR gd13,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,14
SETR gd14,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,15
SETR gd16,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,16
SETR gd17,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,17
SETR gd18,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,18
SETR gd21,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,19
SETR gd22,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,20
SETR gd15,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,21
SETR gd23,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,22
SETR gd24,d2
LOADD d2,1; if() #171 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2552; Test 'if'
STOREDV 0,0; for() #68 setup AND if() #171 Body Start
LOADD d2,0; for() #68 LoopTest
COMPAREV d2,21
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2551; for() #68 TestFail?
LOADD d2,1; for() #68 Body Start
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #68 Body End
LOADD d2,0; for() #68 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 2529; for() #68 End
GOTO 2558; if() #171 Body End
SETV d2,0; if() #171 Else Start
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #171 Else End
SETR d2,gd27; do-while() #2 Body End AND do-while() #2 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2568; Test 'while'
GOTO 2338
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND if() #357 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2584; Test 'if'
SETV d2,65536; if() #357 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #357 Body End
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
POPARGS d5,0.0006
RETURNFUNC; Func[void Ghost_WaitframeLight(FFC, NPC)] Body End
SETR d4,SP; Func[void Ghost_SetPosition(FFC, NPC)] Body Start
LOADD d2,0; InlineFunc[bool NPC->isValid()] Params AND unless() #324 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 2596; Test 'unless'
GOTO 2721; return (Void) AND unless() #324 Body
PUSHR d4; if() #162 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0012
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 2633; Test 'if'
SETR d2,gd2; if() #162 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
GOTO 2665; if() #162 Body End
SETR d2,gd2; if() #162 Else Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2; if() #162 Else End
PUSHR d4
SETR d2,gd2; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
PUSHR d2
PUSHV -64
PUSHV 256; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0203; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
SETR d2,gd3; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
SUBR d3,d2
PUSHR d3
PUSHV -64
PUSHV 176; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0203; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void Ghost_SetPosition(FFC, NPC)] Body End
PUSHARGSV 0,0.0005; Func[void Ghost_CheckHit(FFC, NPC)] Body Start
SETR d4,SP
LOADD d2,5; if() #260 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
PUSHR d2
SETR d2,gd15
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2910; Test 'if'
SETR d2,gd18; if() #260 Body Start
ORV d2,1
SETR gd18,d2
LOADD d2,5
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETR d2,gd21; if() #261 Test
COMPAREV d2,32
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2751; Test 'if'
SETV d2,32; if() #261 Body Start
SETR gd21,d2; if() #261 Body End
PUSHR d4; if() #262 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2910; Test 'if'
SETR d2,LINKX; if() #262 Body Start
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,LINKY
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
LOADD d2,4; InlineFunc[int Abs(int)] Params AND if() #90 Test
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd13
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2791
LOADD d2,3; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd14
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2825; Test 'if'
SETR d2,LINKDIR; if() #263 Test AND if() #90 Body Start
ANDV d2,2
PUSHR d2
SETR d2,gd5
ANDV d2,2
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 2809
SETR d2,gd5
COMPAREV d2,3
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2817
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 2824; Test 'if'
SETR d2,LINKDIR; if() #263 Body Start
LSHIFTV d2,12
ORV d2,16
SETR gd22,d2; if() #263 Body End
GOTO 2910; if() #90 Body End
LOADD d2,4; InlineFunc[int Abs(int)] Params AND if() #91 Test AND if() #90 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,3; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2873; Test 'if'
SETR d2,gd5; if() #264 Test AND if() #91 Body Start
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 2844
SETR d2,gd5
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2851
SETR d2,gd5
COMPAREV d2,3
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2859
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 2872; Test 'if'
LOADD d2,3; if() #92 Test AND if() #264 Body Start
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2870; Test 'if'
SETV d2,16; if() #92 Body Start
SETR gd22,d2
GOTO 2872; if() #92 Body End
SETV d2,4112; if() #92 Else Start
SETR gd22,d2; if() #92 Else End
GOTO 2910; if() #264 Body End AND if() #91 Body End
SETR d2,gd5; if() #265 Test AND if() #91 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 2882
SETR d2,gd5
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2889
SETR d2,gd5
COMPAREV d2,3
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2897
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 2910; Test 'if'
LOADD d2,4; if() #93 Test AND if() #265 Body Start
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2908; Test 'if'
SETV d2,8208; if() #93 Body Start
SETR gd22,d2
GOTO 2910; if() #93 Body End
SETV d2,12304; if() #93 Else Start
SETR gd22,d2; if() #93 Else End
SETR d2,gd22; if() #265 Body End AND if() #91 Else End AND if() #90 Else End AND if() #262 Body End AND if() #260 Body End AND if() #266 Test
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3134; Test 'if'
SETR d2,gd22; if() #266 Body Start
RSHIFTV d2,12
STORED d2,4
SETR d2,gd22
ANDV d2,4095
STORED d2,3
STOREDV 4,2
PUSHR d4; if() #267 Test
PUSHV 5; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2931; Test 'if'
LOADD d2,2; if() #267 Body Start
DIVV d2,2
STORED d2,2; if() #267 Body End
PUSHR d4; if() #94 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0397; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3036; Test 'if'
LOADD d2,3; if() #94 Body Start
SUBV d2,1
STORED d2,3; if() #95 Test
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2956; Test 'if'
LOADD d2,4; if() #95 Body Start
LSHIFTV d2,12
PUSHR d2
LOADD d2,3
POP d3
ORR d2,d3
SETR gd22,d2
GOTO 2958; if() #95 Body End
SETV d2,0; if() #95 Else Start
SETR gd22,d2; if() #95 Else End
LOADD d2,4; if() #96 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2967; Test 'if'
LOADD d2,2; if() #96 Body Start
SUBV2 0,d2
STORED d2,0
GOTO 2986; if() #96 Body End
LOADD d2,4; if() #97 Test AND if() #96 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2975; Test 'if'
LOADD d2,2; if() #97 Body Start
STORED d2,0
GOTO 2986; if() #97 Body End
LOADD d2,4; if() #98 Test AND if() #97 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2984; Test 'if'
LOADD d2,2; if() #98 Body Start
SUBV2 0,d2
STORED d2,1
GOTO 2986; if() #98 Body End
LOADD d2,2; if() #98 Else Start
STORED d2,1; if() #98 Else End
LOADD d2,1; if() #97 Else End AND if() #96 Else End AND if() #99 Test
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3011; Test 'if'
SETR d2,gd2; if() #99 Body Start
PUSHR d2
LOADD d2,1
POP d3
ADDR d2,d3
SETR gd2,d2
SETR d2,gd19
PUSHR d2
LOADD d2,1
POP d3
ADDR d2,d3
SETR gd19,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2590; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 3035; if() #99 Body End
LOADD d2,0; if() #268 Test AND if() #99 Else Start
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3035; Test 'if'
SETR d2,gd3; if() #268 Body Start
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
SETR gd3,d2
SETR d2,gd20
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
SETR gd20,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2590; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #268 Body End
GOTO 3134; if() #99 Else End AND if() #94 Body End
STOREDV -1,1; if() #94 Else Start
STOREDV -1,0
SETV d2,0
SETR gd22,d2
SETR d2,gd18
ORV d2,16
SETR gd18,d2
LOADD d2,4; if() #100 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3054; Test 'if'
SETR d2,gd3; InlineFunc[untyped Floor(untyped)] Params Start AND if() #100 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORED d2,0
GOTO 3083; if() #100 Body End
LOADD d2,4; if() #101 Test AND if() #100 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3066; Test 'if'
SETR d2,gd3; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #101 Body Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORED d2,0
GOTO 3083; if() #101 Body End
LOADD d2,4; if() #102 Test AND if() #101 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3077; Test 'if'
SETR d2,gd2; InlineFunc[untyped Floor(untyped)] Params Start AND if() #102 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORED d2,1
GOTO 3083; if() #102 Body End
SETR d2,gd2; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #102 Else Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORED d2,1; if() #102 Else End
LOADD d2,1; if() #101 Else End AND if() #100 Else End AND if() #103 Test
COMPAREV d2,-1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3109; Test 'if'
SETR d2,gd19; if() #103 Body Start
PUSHR d2
LOADD d2,1
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd19,d2
LOADD d2,1
SETR gd2,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2590; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 3134; if() #103 Body End
LOADD d2,0; if() #269 Test AND if() #103 Else Start
COMPAREV d2,-1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3134; Test 'if'
SETR d2,gd20; if() #269 Body Start
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd20,d2
LOADD d2,0
SETR gd3,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2590; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #269 Body End
POPARGS d5,0.0007; if() #103 Else End AND if() #94 Else End AND if() #266 Body End
RETURNFUNC; Func[void Ghost_CheckHit(FFC, NPC)] Body End
SETR d4,SP; Func[void Ghost_ClearCombos()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
RETURNFUNC; Func[void Ghost_ClearCombos()] Body End
SETR d4,SP; Func[void Ghost_SetFlag(int)] Body Start
LOADD d2,0; if() #161 Test
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3162; Test 'if'
SETR d2,gd17; if() #161 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ORR d2,d3
SETR gd17,d2
GOTO 3168; if() #161 Body End
SETR d2,gd16; if() #161 Else Start
PUSHR d2
LOADD d2,0
POP d3
ORR d2,d3
SETR gd16,d2; if() #161 Else End
POP d5
RETURNFUNC; Func[void Ghost_SetFlag(int)] Body End
SETR d4,SP; Func[void Ghost_UnsetFlag(int)] Body Start
LOADD d2,0; if() #163 Test
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3188; Test 'if'
SETR d2,gd17; if() #163 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,-2
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
SETR gd17,d2
GOTO 3195; if() #163 Body End
SETR d2,gd16; if() #163 Else Start
PUSHR d2
LOADD d2,0
BITNOT d2
POP d3
ANDR d2,d3
SETR gd16,d2; if() #163 Else End
POP d5
RETURNFUNC; Func[void Ghost_UnsetFlag(int)] Body End
PUSHARGSV 0,0.0004; Func[void Ghost_MoveXY(int, int, int)] Body Start
SETR d4,SP
LOADD d2,5; if() #316 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3207
PUSHR d4
CALLFUNC 0.4419; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3217
PUSHR d4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3223; Test 'if'
SETV d2,0; if() #316 Body Start
STORED d2,5; if() #316 Body End
LOADD d2,6; while() #3 Test AND InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
SETCMP d2,0.0009
COMPAREV d2,0
GOTOFALSE 3234
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 3301; Test 'while'
LOADD d2,6; InlineFunc[int Abs(int)] Params AND if() #144 Test AND while() #3 Body Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 3274; Test 'if'
LOADD d2,6; if() #145 Test AND if() #144 Body Start
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 3263; Test 'if'
PUSHR d4; if() #145 Body Start
PUSHV 8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3197; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,6
SUBV d2,8
STORED d2,6
GOTO 3273; if() #145 Body End
PUSHR d4; if() #145 Else Start
PUSHV -8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3197; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,6
ADDV d2,8
STORED d2,6; if() #145 Else End
GOTO 3300; if() #144 Body End
LOADD d2,5; if() #146 Test AND if() #144 Else Start
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 3290; Test 'if'
PUSHR d4; if() #146 Body Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 8
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3197; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,5
SUBV d2,8
STORED d2,5
GOTO 3300; if() #146 Body End
PUSHR d4; if() #146 Else Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV -8
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3197; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,5
ADDV d2,8
STORED d2,5; if() #146 Else End
GOTO 3223; if() #144 Else End AND while() #3 Body End AND while() #3 End
LOADD d2,6; if() #147 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3371; Test 'if'
SETR d2,gd23; if() #147 Body Start
RSHIFTV d2,8
STORED d2,2
SETR d2,gd2
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #148 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3341; Test 'if'
LOADD d2,3; if() #148 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3363; if() #148 Body End
PUSHR d4; if() #149 Test AND if() #148 Else Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,6
SUBV2 0,d2
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0397; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3359; Test 'if'
LOADD d2,3; if() #149 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3363; if() #149 Body End
LOADD d2,3; if() #149 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORED d2,3; if() #149 Else End
LOADD d2,3; if() #148 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
GOTO 3453; if() #147 Body End
LOADD d2,6; if() #317 Test AND if() #147 Else Start
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 3453; Test 'if'
SETR d2,gd13; if() #317 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORED d2,2
SETR d2,gd2
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #150 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3423; Test 'if'
LOADD d2,3; if() #150 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3446; if() #150 Body End
PUSHR d4; if() #151 Test AND if() #150 Else Start
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,6
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0397; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3440; Test 'if'
LOADD d2,3; if() #151 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3446; if() #151 Body End
LOADD d2,3; if() #151 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORED d2,3; if() #151 Else End
LOADD d2,3; if() #150 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2; if() #317 Body End
LOADD d2,5; if() #147 Else End AND if() #152 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3523; Test 'if'
SETR d2,gd24; if() #152 Body Start
RSHIFTV d2,8
STORED d2,2
SETR d2,gd3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #153 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3493; Test 'if'
LOADD d2,3; if() #153 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3515; if() #153 Body End
PUSHR d4; if() #154 Test AND if() #153 Else Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,5
SUBV2 0,d2
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0397; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3511; Test 'if'
LOADD d2,3; if() #154 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3515; if() #154 Body End
LOADD d2,3; if() #154 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORED d2,3; if() #154 Else End
LOADD d2,3; if() #153 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
GOTO 3605; if() #152 Body End
LOADD d2,5; if() #318 Test AND if() #152 Else Start
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 3605; Test 'if'
SETR d2,gd14; if() #318 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORED d2,2
SETR d2,gd3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #155 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3575; Test 'if'
LOADD d2,3; if() #155 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3598; if() #155 Body End
PUSHR d4; if() #156 Test AND if() #155 Else Start
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,5
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0397; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3592; Test 'if'
LOADD d2,3; if() #156 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3598; if() #156 Body End
LOADD d2,3; if() #156 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORED d2,3; if() #156 Else End
LOADD d2,3; if() #155 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2; if() #318 Body End
PUSHR d4; if() #152 Else End AND if() #319 Test
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3615
SETR d2,gd18
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3674; Test 'if'
PUSHR d4; if() #157 Test AND if() #319 Body Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3639; Test 'if'
PUSHR d4; if() #157 Body Start
LOADD d2,6; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOADD d2,5
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0101; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 3670; if() #157 Body End
LOADD d2,6; InlineFunc[int Abs(int)] Params AND if() #158 Test AND if() #157 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3660; Test 'if'
LOADD d2,5; if() #159 Test AND if() #158 Body Start
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3657; Test 'if'
SETV d2,0; if() #159 Body Start
SETR gd5,d2
GOTO 3659; if() #159 Body End
SETV d2,1; if() #159 Else Start
SETR gd5,d2; if() #159 Else End
GOTO 3670; if() #158 Body End
LOADD d2,6; if() #160 Test AND if() #158 Else Start
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3668; Test 'if'
SETV d2,2; if() #160 Body Start
SETR gd5,d2
GOTO 3670; if() #160 Body End
SETV d2,3; if() #160 Else Start
SETR gd5,d2; if() #160 Else End
SETR d2,gd2; if() #158 Else End AND if() #157 Else End
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2; if() #319 Body End
POPARGS d5,0.0007
RETURNFUNC; Func[void Ghost_MoveXY(int, int, int)] Body End
PUSHV 0; Func[void __GhCleanUp(FFC)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
SETV d2,16
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCWIDTH,d2
SETV d2,16
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCHEIGHT,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DELAY,d2
LOADD d2,0; for() #170 LoopTest
COMPAREV d2,11
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3807; for() #170 TestFail?
SETV d2,0; for() #170 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
LOADD d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; for() #170 Body End
LOADD d2,0; for() #170 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 3786; for() #170 End
POPARGS d5,0.0002
RETURNFUNC; Func[void __GhCleanUp(FFC)] Body End
SETR d4,SP; Func[void Ghost_ForceDir(int)] Body Start
LOADD d2,0
SETR gd5,d2
SETR d2,gd18
ORV d2,4
SETR gd18,d2
POP d5
RETURNFUNC; Func[void Ghost_ForceDir(int)] Body End
PUSHARGSV 0,0.0002; Func[void Ghost_Move(int, int, int)] Body Start
SETR d4,SP
LOADD d2,4; if() #136 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3828; Test 'if'
LOADD d2,3; if() #136 Body Start
SUBV2 0,d2
STORED d2,0
GOTO 3906; if() #136 Body End
LOADD d2,4; if() #137 Test AND if() #136 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3836; Test 'if'
LOADD d2,3; if() #137 Body Start
STORED d2,0
GOTO 3906; if() #137 Body End
LOADD d2,4; if() #138 Test AND if() #137 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3845; Test 'if'
LOADD d2,3; if() #138 Body Start
SUBV2 0,d2
STORED d2,1
GOTO 3906; if() #138 Body End
LOADD d2,4; if() #139 Test AND if() #138 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3853; Test 'if'
LOADD d2,3; if() #139 Body Start
STORED d2,1
GOTO 3906; if() #139 Body End
LOADD d2,4; if() #140 Test AND if() #139 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3867; Test 'if'
LOADD d2,3; if() #140 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,0
GOTO 3906; if() #140 Body End
LOADD d2,4; if() #141 Test AND if() #140 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3880; Test 'if'
LOADD d2,3; if() #141 Body Start
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,0
GOTO 3906; if() #141 Body End
LOADD d2,4; if() #142 Test AND if() #141 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3893; Test 'if'
LOADD d2,3; if() #142 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
MULTV d2,0.7071
STORED d2,0
GOTO 3906; if() #142 Body End
LOADD d2,4; if() #143 Test AND if() #142 Else Start
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3905; Test 'if'
LOADD d2,3; if() #143 Body Start
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
MULTV d2,0.7071
STORED d2,0
GOTO 3906; if() #143 Body End
GOTO 3915; return (Void) AND if() #143 Else
PUSHR d4; if() #142 Else End AND if() #141 Else End AND if() #140 Else End AND if() #139 Else End AND if() #138 Else End AND if() #137 Else End AND if() #136 Else End
LOADD d2,1; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3197; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0005
RETURNFUNC; Func[void Ghost_Move(int, int, int)] Body End
SETR d4,SP; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body Start
LOADD d2,1; if() #634 Test
COMPAREV d2,-1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 3927
LOADD d2,1
COMPAREV d2,-2
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 3932; Test 'if'
SETV d2,1; if() #634 Body Start
STORED d2,1; if() #634 Body End
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,1
SETR gd11,d2
LOADD d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
LOADD d2,0
SETR gd12,d2
LOADD d2,2; if() #380 Test
COMPAREV d2,0
GOTOTRUE 3978; Test 'if'
LOADD d2,3; if() #380 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCX
SETR gd2,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCY
SETR gd3,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCZ
SETR gd4,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCJUMP
SETR gd6,d2
GOTO 4010; if() #380 Body End
LOADD d2,4; if() #380 Else Start
PUSHR d2
POP REFFFC
SETR d2,X
SETR gd2,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,Y
SETR gd3,d2
SETV d2,0
SETR gd4,d2
SETV d2,0
SETR gd6,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2; if() #380 Else End
PUSHR d4
LOADD d2,4; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2590; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
SETV d2,0
SETR gd7,d2
SETV d2,0
SETR gd8,d2
SETV d2,0
SETR gd9,d2
SETV d2,0
SETR gd10,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
SETR gd13,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
SETR gd14,d2
SETV d2,0
SETR gd23,d2
SETV d2,0
SETR gd24,d2
LOADD d2,1; if() #635 Test
COMPAREV d2,1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4128; Test 'if'
SETV d2,3; if(true) #381 [Opt:AlwaysOn] AND if() #635 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,65456
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCOTILE,d2
SETV d2,65456; if(true) #636 [Opt:AlwaysOn]
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTILE,d2
SETR d2,gd13
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd14
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2; if() #635 Body End
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
LOADD d2,3; if() #382 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,32
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4159; Test 'if'
SETV d2,1; if() #382 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 4171; if() #382 Body End
SETV d2,0; if() #382 Else Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #382 Else End
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETV d2,0
SETR gd16,d2
SETV d2,0
SETR gd17,d2
SETV d2,0
SETR gd21,d2
SETV d2,0
SETR gd22,d2
SETV d2,0
SETR gd18,d2
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,65536
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body End
PUSHARGSV 0,0.0008; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body Start
SETR d4,SP
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #55 setup
STORED d2,5
LOADD d2,5; for() #55 LoopTest
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4304; for() #55 TestFail?
LOADD d2,5; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #55 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,7; if() #134 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOADD d2,8
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4234; Test 'if'
SETV d2,0; if() #134 Body Start
STORED d2,6
GOTO 4300; continue 1;
GOTO 4236; if() #134 Body End
SETV d2,1; if() #134 Else Start
STORED d2,6; if() #134 Else End
LOADD d2,7; if() #308 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4251; Test 'if'
SETV d2,0; if() #308 Body Start
STORED d2,6
GOTO 4300; continue 1; AND if() #308 Body End
LOADD d2,6; if() #135 Test
COMPAREV d2,0
GOTOTRUE 4299; Test 'if'
PUSHR d4; if() #135 Body Start
LOADD d2,9; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
PUSHV 1
LOADD d2,7
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
PUSHR NPCCSET; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params End
CALLFUNC 0.3917; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Call
POP d4
LOADD d2,7; if() #309 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,256
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4296; Test 'if'
SETV d2,1; if() #309 Body Start
PUSHR d2
LOADD d2,9
POP d3
PUSHR d2
PUSHR d3
SETV d2,1
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #309 Body End
LOADD d2,7; return Start
GOTO 4349; return End
GOTO 4300; if() #135 Body End
GOTO 4304; break 1; AND if() #135 Else
LOADD d2,5; for() #55 Body End AND for() #55 LoopIncrement
SUBV d2,1
STORED d2,5
GOTO 4210; for() #55 End
ALLOCATEMEMV d2,60
STORED d2,4
WRITEPODSTRING d2,"ghost.zh: AutoGhost initialization failed - enemy missing.\n"
ALLOCATEMEMV d2,30
STORED d2,2
WRITEPODSTRING d2,"  DMap %d, screen %X\n"
ALLOCATEMEMV d2,30
STORED d2,0
WRITEPODSTRING d2,"  Script %d, enemy ID %d\n"
LOADD d2,4; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,2; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGR CURDMAP
PUSHVARGR CURDSCR; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,9
PUSHR d2
POP REFFFC
PUSHVARGR FFSCRIPT
LOADD d2,8
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0
PUSHR d2
LOADD d2,9
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
QUIT; InlineFunc[void Quit()] Body
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
LOADD d3,4
DEALLOCATEMEMR d3
POPARGS d5,0.0010
RETURNFUNC; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body End
SETR d4,SP; Func[int VectorX(int, int)] Body Start
LOADD d2,0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR d4,SP; Func[int VectorY(int, int)] Body Start
LOADD d2,0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
PUSHV 0; Func[void Ghost_MoveTowardLink(int, int)] Body Start
SETR d4,SP
PUSHR d4
SETR d2,gd2; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
SETR d2,gd13
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0082; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,0
PUSHARGSR d4,0.0002; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
LOADD d2,2; UsrFunc[int VectorX(int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.4351; UsrFunc[int VectorX(int, int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,2; UsrFunc[int VectorY(int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.4361; UsrFunc[int VectorY(int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3197; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0003
RETURNFUNC; Func[void Ghost_MoveTowardLink(int, int)] Body End
SETR d4,SP; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
CASTBOOLF d2
CASTBOOLF d3
COMPARER d3,d2
SETCMP d2,0.0011
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
PUSHV 0; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2
PUSHR d4; unless() #346 Test
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 4596; Test 'unless'
PUSHR d4; if() #164 Test AND unless() #346 Body Start
CALLFUNC 0.4419; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4558; Test 'if'
SETR d2,gd6; if() #347 Test AND if() #164 Body Start
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 4471
PUSHR d4
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0397; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 4557; Test 'if'
PUSHR d4; if() #347 Body Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
STORED d2,0
PUSHR d4
PUSHV 64; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3170; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
SETR d2,gd6; if() #165 Test
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4527; Test 'if'
PUSHR d4; if() #165 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3144; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR gd6
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.3817; UsrFunc[void Ghost_Move(int, int, int)] Call
POP d4
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
SETR d2,gd6; if() #348 Test
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4516
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0397; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4522; Test 'if'
SETV d2,0; if() #348 Body Start
SETR gd6,d2; if() #348 Body End
PUSHR d4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3170; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
GOTO 4550; if() #165 Body End
PUSHR d4; if() #165 Else Start
PUSHV 1; UsrFunc[void Ghost_Move(int, int, int)] Params Start
SETR d2,gd6
SUBV2 0,d2
PUSHR d2
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.3817; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK d4
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0397; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4548; Test 'if'
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #166 Body Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
GOTO 4550; if() #166 Body End
SETV d2,0; if() #166 Else Start
SETR gd6,d2; if() #166 Else End
LOADD d2,0; if() #165 Else End AND if() #349 Test
COMPAREV d2,0
GOTOTRUE 4557; Test 'if'
PUSHR d4; if() #349 Body Start
PUSHV 64; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3144; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4; if() #349 Body End
GOTO 4596; if() #347 Body End AND if() #164 Body End
SETR d2,gd6; if() #350 Test AND if() #164 Else Start
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 4567
SETR d2,gd4
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 4596; Test 'if'
SETR d2,gd4; if() #167 Test AND if() #350 Body Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 4584; Test 'if'
SETV d2,0; if() #167 Body Start
SETR gd4,d2
SETV d2,0
SETR gd6,d2
GOTO 4596; if() #167 Body End
SETR d2,gd4; if() #167 Else Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
SETR gd4,d2
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2; if() #167 Else End
SETR d2,gd7; if() #350 Body End AND if() #164 Else End AND unless() #346 Body End AND if() #351 Test
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 4605
SETR d2,gd8
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 4612
SETR d2,gd9
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 4619
SETR d2,gd10
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 4643; Test 'if'
SETR d2,gd7; if() #351 Body Start
PUSHR d2
SETR d2,gd9
POP d3
ADDR d2,d3
SETR gd7,d2
SETR d2,gd8
PUSHR d2
SETR d2,gd10
POP d3
ADDR d2,d3
SETR gd8,d2
PUSHR d4
PUSHR gd7; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR gd8
PUSHV 2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3197; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
PEEK d4
PUSHR gd5; UsrFunc[void Ghost_ForceDir(int)] Params
CALLFUNC 0.3809; UsrFunc[void Ghost_ForceDir(int)] Call
POP d4; if() #351 Body End
PUSHR d4
LOADD d2,4; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2590; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2
PUSHV 0; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params End
CALLFUNC 0.4685; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
CALLFUNC 0.1941; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2192; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
SETR d2,gd18
ANDV d2,32
SETR gd18,d2
PUSHR d4; return Start
LOADD d2,4; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params End
CALLFUNC 0.5193; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Call
POP d4
POPARGS d5,0.0005; return End
RETURNFUNC; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body End
PUSHARGSV 0,0.0002; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body Start
SETR d4,SP
SETR d2,gd18; if() #404 Test
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4703; Test 'if'
SETR d2,gd5; if() #404 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
GOTO 4803; if() #404 Body End
LOADD d2,2; if() #405 Test AND if() #404 Else Start
COMPAREV d2,0
GOTOTRUE 4712; Test 'if'
LOADD d2,3; if() #405 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
GOTO 4803; if() #405 Body End
PUSHR d4; if() #671 Test AND if() #405 Else Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4734
SETR d2,gd19
PUSHR d2
SETR d2,gd2
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 4733
SETR d2,gd20
PUSHR d2
SETR d2,gd3
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4803; Test 'if'
SETR d2,gd2; if() #671 Body Start
PUSHR d2
SETR d2,gd19
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
SETR d2,gd3
PUSHR d2
SETR d2,gd20
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
PUSHR d4; if() #406 Test
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4772; Test 'if'
PUSHR d4; if() #406 Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0101; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 4803; if() #406 Body End
LOADD d2,1; InlineFunc[int Abs(int)] Params AND if() #407 Test AND if() #406 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,0; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4793; Test 'if'
LOADD d2,1; if() #408 Test AND if() #407 Body Start
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 4790; Test 'if'
SETV d2,2; if() #408 Body Start
SETR gd5,d2
GOTO 4792; if() #408 Body End
SETV d2,3; if() #408 Else Start
SETR gd5,d2; if() #408 Else End
GOTO 4803; if() #407 Body End
LOADD d2,0; if() #409 Test AND if() #407 Else Start
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 4801; Test 'if'
SETV d2,0; if() #409 Body Start
SETR gd5,d2
GOTO 4803; if() #409 Body End
SETV d2,1; if() #409 Else Start
SETR gd5,d2; if() #409 Else End
SETR d2,gd5; if() #407 Else End AND if() #406 Else End AND if() #671 Body End AND if() #405 Else End AND if() #404 Else End
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
SETR d2,gd11; if() #410 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 4825
SETR d2,gd11
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 4849; Test 'if'
LOADD d2,4; if() #672 Test AND if() #410 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4848; Test 'if'
SETR d2,gd11; if() #672 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #672 Body End
GOTO 4945; if() #410 Body End
PUSHR d4; if() #411 Test AND if() #410 Else Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4887; Test 'if'
LOADD d2,4; if() #673 Test AND if() #411 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4886; Test 'if'
SETR d2,gd11; if() #673 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0473; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #673 Body End
GOTO 4945; if() #411 Body End
PUSHR d4; if() #412 Test AND if() #411 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4925; Test 'if'
LOADD d2,4; if() #674 Test AND if() #412 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4924; Test 'if'
SETR d2,gd11; if() #674 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0473; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #674 Body End
GOTO 4945; if() #412 Body End
LOADD d2,4; if() #675 Test AND if() #412 Else Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4945; Test 'if'
SETR d2,gd11; if() #675 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #675 Body End
LOADD d2,4; if() #412 Else End AND if() #411 Else End AND if() #410 Else End AND if() #676 Test
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4965; Test 'if'
SETR d2,gd13; if() #676 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2; if() #676 Body End
LOADD d2,3; if() #677 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTXSZ
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5009; Test 'if'
SETR d2,gd13; if() #677 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXOFS,d2; if() #677 Body End
LOADD d2,4; if() #678 Test
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5029; Test 'if'
SETR d2,gd14; if() #678 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2; if() #678 Body End
LOADD d2,3; if() #679 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTYSZ
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5073; Test 'if'
SETR d2,gd14; if() #679 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYOFS,d2; if() #679 Body End
PUSHR d4; if() #680 Test
PUSHV 128; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1550; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5138; Test 'if'
SETR d2,gd4; if() #413 Test AND if() #680 Body Start
COMPAREV d2,32
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 5093
LOADD d2,4
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5110; Test 'if'
SETV d2,1; if() #413 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 5138; if() #413 Body End
SETR d2,gd4; if() #681 Test AND if() #413 Else Start
COMPAREV d2,32
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 5122
LOADD d2,4
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5138; Test 'if'
SETV d2,0; if() #681 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #681 Body End
SETR d2,gd15; if() #413 Else End AND if() #680 Body End
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETR d2,gd12
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCCSET,d2
SETR d2,gd18; if() #414 Test
ANDV d2,8
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5172; Test 'if'
SETR d2,gd12; if() #414 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 5186; if() #414 Body End
SETR d2,gd21; if() #682 Test AND if() #414 Else Start
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 5186; Test 'if'
SETR d2,gd12; if() #682 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #682 Body End
PUSHR d4; if() #414 Else End
LOADD d2,3; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
CALLFUNC 0.2023; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
POP d4
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body End
PUSHV 0; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body Start
SETR d4,SP
LOADD d2,3; InlineFunc[bool NPC->isValid()] Params AND unless() #683 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 5220; Test 'unless'
LOADD d2,2; if() #684 Test AND unless() #683 Body Start
COMPAREV d2,0
GOTOTRUE 5212; Test 'if'
PUSHR d4; if() #684 Body Start
LOADD d2,4; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
CALLFUNC 0.3676; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2
PUSHR d4
CALLFUNC 0.3136; UsrFunc[void Ghost_ClearCombos()] Call
POP d4; if() #684 Body End
LOADD d2,1; if() #685 Test
COMPAREV d2,0
GOTOTRUE 5216; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #685 Body
SETV d2,0
SETR gd15,d2
SETV d2,0; return Start
GOTO 5343; return End AND unless() #683 Body End
LOADD d2,3; if() #686 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 5230; Test 'if'
SETV d2,1; if() #686 Body Start
STORED d2,0; if() #686 Body End
LOADD d2,0; unless() #687 Test
COMPAREV d2,0
GOTOFALSE 5249; Test 'unless'
PUSHR d4; unless() #687 Body Start
LOADD d2,4; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
CALLFUNC 0.2723; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params End
CALLFUNC 0.1676; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Call
POP d4
COMPAREV d2,0
SETCMP d2,0.0012
STORED d2,0; unless() #687 Body End
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
LOADD d2,0; if() #688 Test
COMPAREV d2,0
GOTOTRUE 5342; Test 'if'
LOADD d2,2; if() #689 Test AND if() #688 Body Start
COMPAREV d2,0
GOTOTRUE 5336; Test 'if'
SETV d2,1; if() #689 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd2
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
PUSHR d4
LOADD d2,4; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
CALLFUNC 0.3676; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2; if() #689 Body End
LOADD d2,1; if() #690 Test
COMPAREV d2,0
GOTOTRUE 5340; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #690 Body
SETV d2,0; return Start
GOTO 5343; return End AND if() #688 Body End
SETV d2,1; return Start
POPARGS d5,0.0005; return End
RETURNFUNC; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body End
PUSHARGSV 0,0.0006; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body Start
SETR d4,SP
LOADD d2,8; if() #710 Test
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOTRUE 5359; Test 'if'
LOADD d2,5; if() #710 Body Start
ORV d2,4
STORED d2,5; if() #710 Body End
LOADD d2,8; if() #711 Test
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOTRUE 5371; Test 'if'
LOADD d2,5; if() #711 Body Start
ORV d2,1
STORED d2,5; if() #711 Body End
PUSHR d4; if() #712 Test
LOADD d2,7; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params Start
PUSHR d2; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params End
CALLFUNC 0.5683; UsrFunc[bool __Ghost_IsFlickering(NPC)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5381; Test 'if'
LOADD d2,5; if() #712 Body Start
ORV d2,2
STORED d2,5; if() #712 Body End
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,CSET
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,5
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
STOREDV 3,4
SETR d2,gd2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd4
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
ADDR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,2
SETR d2,gd26; if() #713 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 5548; Test 'if'
STOREDV 1,1; if() #713 Body Start
LOADD d2,0; for() #182 LoopTest
PUSHR d2
SETR d2,gd26
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 5548; for() #182 TestFail?
SETR d2,gd26; for() #182 Body Start
PUSHR d2
LOADD d2,1
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,3
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,1
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,2
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,2
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,6
STORED d2,4
LOADD d2,1
ADDV d2,6
STORED d2,1
LOADD d2,6
PUSHR d2
POP d0
READPODARRAYV d2,0
ADDV d2,1
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; for() #182 Body End
LOADD d2,0; for() #182 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 5436; for() #182 End
LOADD d2,8; if() #713 Body End AND if(true) #714 [Opt:AlwaysOn]
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,6
PUSHR d2
POP d0
READPODARRAYV d2,0
ADDV d2,1
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
POPARGS d5,0.0009
RETURNFUNC; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body End
PUSHV 0; Func[void __HideFFCAndWait(FFC)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,0
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
WAITFRAME; InlineFunc[void Waitframe()] Body
LOADD d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __HideFFCAndWait(FFC)] Body End
PUSHV 0; Func[bool IsPit(int)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP d0
SETR d2,COMBOTD
STORED d2,0; if() #368 Test
COMPAREV d2,41
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5659; Test 'if'
SETV d2,1; return Start AND if() #368 Body Start
GOTO 5681; return End AND if() #368 Body End
LOADD d2,0; if() #369 Test
COMPAREV d2,93
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5666; Test 'if'
SETV d2,1; return Start AND if() #369 Body Start
GOTO 5681; return End AND if() #369 Body End
LOADD d2,0; if() #370 Test
COMPAREV d2,80
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 5674
LOADD d2,0
COMPAREV d2,82
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5680; Test 'if'
SETV d2,1; return Start AND if() #370 Body Start
GOTO 5681; return End AND if() #370 Body End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool IsPit(int)] Body End
SETR d4,SP; Func[bool __Ghost_IsFlickering(NPC)] Body Start
LOADD d2,0; if() #638 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,128
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5695; Test 'if'
SETV d2,1; return Start AND if() #638 Body Start
GOTO 5696; return End AND if() #638 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[bool __Ghost_IsFlickering(NPC)] Body End
PUSHARGSV 0,0.0004; Func[void SpawnAnimation(FFC, NPC)] Body Start
SETR d4,SP
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,3
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCCOLLDET
STORED d2,2
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
STORED d2,1
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2590; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
LOADD d2,0; for() #257 LoopTest
COMPAREV d2,32
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 5842; for() #257 TestFail?
SETV d2,0; for() #257 Body Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,32768
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2590; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2192; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2590; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2192; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,0; if() #953 Test
COMPAREV d2,29
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5838; Test 'if'
SETR d2,UNDERCOMBO; if() #953 Body Start
PUSHR d2
PUSHR d4
LOADD d2,5; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOADD d2,5
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0236; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBODD,d2
SETR d2,UNDERCSET
PUSHR d2
PUSHR d4
LOADD d2,5; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOADD d2,5
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0236; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBOCD,d2; if() #953 Body End
LOADD d2,0; for() #257 Body End AND for() #257 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 5732; for() #257 End
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,2
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
POPARGS d5,0.0006
RETURNFUNC; Func[void SpawnAnimation(FFC, NPC)] Body End


PUSHV 0; void run() Body Start
SETR d4,SP
PUSHR d4
CALLFUNC 0.2402; UsrFunc[void StartGhostZH()] Call
POP d4
PUSHR d4; while(true) #14 Body [Opt:AlwaysOn] Start
CALLFUNC 0.8761; UsrFunc[void UpdateGhostZH1()] Call
POP d4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR d4
CALLFUNC 0.8823; UsrFunc[void UpdateGhostZH2()] Call
POP d4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #14 Body [Opt:AlwaysOn] End
GOTO 6; while() #14 End AND [Opt:NeverRet] AND void run() Body End
POP d2; Func[int Distance(int, int, int, int)] Body Start
POP d1
POP d0
POP d6
SETR d2,DISTANCE
RETURNFUNC; Func[int Distance(int, int, int, int)] Body End
SETR d4,SP; Func[int RadianAngle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR d4,SP; Func[int Randf(int)] Body Start
SETV d2,0; InlineFunc[long RNG->LRand(long)] Params Start AND return Start
PUSHR d2
LOADD d2,0; InlineFunc[long RNG->LRand(long)] Params End
POP REFRNG; InlineFunc[long RNG->LRand(long)] Body Start
RNGLRAND2 d2; InlineFunc[long RNG->LRand(long)] Body End
POP d5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR d4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0,0.0007; Func[void AutoGhost()] Body Start
SETR d4,SP
SETR d2,gd27; if() #29 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
GOTOTRUE 75; Test 'if'
GOTO 415; return (Void) AND if() #29 Body
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #2 setup
STORED d2,3
LOADD d2,3; for() #2 LoopTest
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 415; for() #2 TestFail?
LOADD d2,3; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #2 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,6; if() #30 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,20
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 95; Test 'if'
GOTO 411; continue 1; AND if() #30 Body
LOADD d2,6; if() #31 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,511
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 104; Test 'if'
GOTO 411; continue 1; AND if() #31 Body
LOADD d2,6; if() #32 Test AND if(false) #16 [Opt:AlwaysOff]
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
GOTOTRUE 115; Test 'if'
GOTO 411; continue 1; AND if() #32 Body
LOADD d2,6; unless() #33 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOFALSE 125; Test 'unless'
GOTO 411; continue 1; AND unless() #33 Body
LOADD d2,6; unless() #34 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOFALSE 135; Test 'unless'
GOTO 411; continue 1; AND unless() #34 Body
LOADD d2,6; if(false) #17 [Opt:AlwaysOff]
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,1
LOADD d2,6
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,2; if() #35 Test
COMPAREV d2,-1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 171; Test 'if'
ALLOCATEMEMV d2,2; if() #35 Body Start
STORED d2,0
PUSHR d4
LOADD d2,6; UsrFunc[int __AutoGhostParseName(NPC, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int __AutoGhostParseName(NPC, int)] Params End
CALLFUNC 0.0417; UsrFunc[int __AutoGhostParseName(NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,0
STORED d2,2
LOADD d3,0
DEALLOCATEMEMR d3; if() #35 Body End
LOADD d2,2; if() #36 Test
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 182; Test 'if'
PUSHR d4; if() #36 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0721; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 411; continue 1; AND if() #36 Body End
LOADD d2,2; if() #37 Test
COMPAREV d2,511
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 193; Test 'if'
PUSHR d4; if() #37 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0721; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 411; continue 1; AND if() #37 Body End
PUSHR d4
LOADD d2,5; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR d2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.0772; UsrFunc[int FindUnusedFFC(int)] Call
POP d4
STORED d2,5; unless() #38 Test
COMPAREV d2,0
GOTOFALSE 207; Test 'unless'
PUSHR d4; unless() #38 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0721; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 411; continue 1; AND unless() #38 Body End
LOADD d2,5; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,4
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCCSET
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCX
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCY
PUSHR d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCZ
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
LOADD d2,2
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
SETV d2,1; if(true) #39 [Opt:AlwaysOn]
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
LOADD d2,1; if() #40 Test
COMPAREV d2,1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 381; Test 'if'
LOADD d2,1; if() #41 Test AND if() #40 Body Start
COMPAREV d2,-1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 381; Test 'if'
SETV d2,3; if() #41 Body Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,1024
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2; if() #41 Body End
LOADD d2,1; if() #40 Body End AND if() #18 Test
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 399; Test 'if'
SETV d2,1; if() #18 Body Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
GOTO 411; if() #18 Body End
LOADD d2,1; if() #18 Else Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #18 Else End
LOADD d2,3; for() #2 Body End AND for() #2 LoopIncrement
SUBV d2,1
STORED d2,3
GOTO 77; for() #2 End
POPARGS d5,0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0,0.0009; Func[int __AutoGhostParseName(NPC, int)] Body Start
SETR d4,SP
ALLOCATEMEMV d2,64
STORED d2,8
ALLOCATEMEMV d2,64
STORED d2,7
SETV d2,1
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,10; InlineFunc[void NPC->GetName(int)] Params Start
PUSHR d2
LOADD d2,8; InlineFunc[void NPC->GetName(int)] Params End
POP REFNPC; InlineFunc[void NPC->GetName(int)] Body Start
NPCNAME d2; InlineFunc[void NPC->GetName(int)] Body End
LOADD d2,6; for() #151 LoopTest
COMPAREV d2,63
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 659; for() #151 TestFail?
LOADD d2,8; if() #584 Test AND for() #151 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,64
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 655; Test 'if'
LOADD d2,8; if() #584 Body Start
PUSHR d2
LOADD d2,6
ADDV d2,1
POP d0
READPODARRAYR d2,d2
STORED d2,5
PUSHR d4; if() #352 Test
LOADD d2,5; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8945; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 556; Test 'if'
LOADD d2,6; for() #152 setup AND if() #352 Body Start
ADDV d2,1
STORED d2,6
PUSHR d4; for() #152 LoopTest
LOADD d2,8; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8945; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 498; for() #152 TestFail?
LOADD d2,8; for() #152 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,1
STORED d2,4; for() #152 Body End
LOADD d2,6; for() #152 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 466; for() #152 End
SETV d2,0
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,7; InlineFunc[int Game->GetFFCScript(int)] Params
GETFFCSCRIPT d2; InlineFunc[int Game->GetFFCScript(int)] Body
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
LOADD d2,6
SUBV d2,1
STORED d2,6
LOADD d2,9; if() #585 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 555; Test 'if'
ALLOCATEMEMV d2,59; if() #585 Body Start
STORED d2,2
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script does not exist.\n"
ALLOCATEMEMV d2,80
STORED d2,0
WRITEPODSTRING d2,"  Script name: %s\n"
LOADD d2,2; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,7
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 719; return End
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3; if() #585 Body End
GOTO 655; if() #352 Body End
LOADD d2,5; if() #586 Test AND if() #352 Else Start
COMPAREV d2,48
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 564
LOADD d2,5
COMPAREV d2,57
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 572
LOADD d2,5
COMPAREV d2,45
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 655; Test 'if'
STOREDV 0,4; if() #586 Body Start
LOADD d2,5; if() #587 Test
COMPAREV d2,45
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 592; Test 'if'
SETV d2,45; if() #587 Body Start
PUSHR d2
LOADD d2,7
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,1
STORED d2,4
LOADD d2,6
ADDV d2,1
STORED d2,6; if() #587 Body End
LOADD d2,6; for() #153 setup
ADDV d2,1
STORED d2,6
LOADD d2,8; for() #153 LoopTest
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,48
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 611
LOADD d2,8
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,57
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 635; for() #153 TestFail?
LOADD d2,8; for() #153 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,1
STORED d2,4; for() #153 Body End
LOADD d2,6; for() #153 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 595; for() #153 End
SETV d2,0
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,7; InlineFunc[int atoi(int)] Params Start
SETR d3,d2; InlineFunc[int atoi(int)] Params End
ATOI d2,d3; InlineFunc[int atoi(int)] Body
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,6
SUBV d2,1
STORED d2,6; if() #586 Body End
LOADD d2,6; if() #352 Else End AND if() #584 Body End AND for() #151 Body End AND for() #151 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 434; for() #151 End
LOADD d2,9; if() #589 Test AND unless(false) #588 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 709; Test 'if'
ALLOCATEMEMV d2,54; if() #589 Body Start
STORED d2,5
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script not found.\n"
ALLOCATEMEMV d2,80
STORED d2,3
WRITEPODSTRING d2,"  Enemy name: %s\n"
ALLOCATEMEMV d2,55
STORED d2,1
WRITEPODSTRING d2,"  Script name should start after this character: %c\n"
LOADD d2,5; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,3; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,8
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,1; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGV 64; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,3
DEALLOCATEMEMR d3
LOADD d3,5
DEALLOCATEMEMR d3
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 719; return End
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,3
DEALLOCATEMEMR d3
LOADD d3,5
DEALLOCATEMEMR d3; if() #589 Body End
SETV d2,1; return Start
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 719; return End
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
POPARGS d5,0.0011
RETURNFUNC; Func[int __AutoGhostParseName(NPC, int)] Body End
SETR d4,SP; Func[void __AutoGhostKill(NPC)] Body Start
SETV d2,65536
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
SETV d2,1024
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETV d2,1024
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,-1000
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCITEMSET,d2
POP d5
RETURNFUNC; Func[void __AutoGhostKill(NPC)] Body End
PUSHARGSV 0,0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR d4,SP
LOADD d2,2; InlineFunc[untyped Max(untyped, untyped)] Params Start AND for() #43 setup
ADDV d2,1
PUSHVARGR d2
PUSHVARGV 1; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
STORED d2,0
LOADD d2,0; for() #43 LoopTest
COMPAREV d2,32
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 826; for() #43 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #43 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1; if() #175 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 802
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 822; Test 'if'
LOADD d2,1; unless() #176 Test AND if() #175 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOFALSE 822; Test 'unless'
LOADD d2,1; unless() #177 Test AND unless() #176 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOFALSE 822; Test 'unless'
LOADD d2,0; return Start AND unless() #177 Body Start
GOTO 827; return End AND unless() #177 Body End
LOADD d2,0; unless() #176 Body End AND if() #175 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 780; for() #43 End
SETV d2,0; return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR d4,SP; Func[int CenterX(EWeapon)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterX(EWeapon)] Body End
SETR d4,SP; Func[int CenterY(EWeapon)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterY(EWeapon)] Body End
PUSHARGSV 0,0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR d4,SP
SETR d2,LINKHP; if() #86 Test
COMPAREV d2,0
SETCMP d2,0.0014
SETV d2,0
COMPAREV d2,0
GOTOTRUE 929; Test 'if'
STOREDV 1,0; for() #3 setup AND if() #86 Body Start
LOADD d2,0; for() #3 LoopTest
COMPAREV d2,32
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 929; for() #3 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #3 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1
SETR d2,gd25; if() #87 Test
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
RSHIFTV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
ANDV d2,15
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 925; Test 'if'
SETV d2,0; if() #87 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #87 Body End
LOADD d2,0; for() #3 Body End AND for() #3 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 884; for() #3 End
POPARGS d5,0.0002; if() #86 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSV 0,0.0002; Func[void DrawEWeaponShadow(EWeapon)] Body Start
SETR d4,SP
PUSHR d4
LOADD d2,2; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNXOFS
POP d3
ADDR d2,d3
STORED d2,1
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
SUBV d2,1
MULTV d2,16
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZOFS
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
PUSHV 1; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #38 [Opt:AlwaysOn]
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
PUSHR d2
PUSHARGSV 1,0.0002
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(EWeapon)] Body End
PUSHARGSV 0,0.0009; Func[void DrawGhostFFCs()] Body Start
SETR d4,SP
SETV d2,1; if() #125 Test
PUSHR d2
POP d0
SETR d2,SCREENEFLAGSD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1014; Test 'if'
PUSHR d4; unless() #126 Test AND if() #125 Body Start
CALLFUNC 0.1196; UsrFunc[bool __HaveAmulet()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1014; Test 'unless'
GOTO 1194; return (Void) AND unless() #126 Body
SETV d2,1; if() #125 Body End AND if() #40 Test AND if(true) #39 [Opt:AlwaysOn]
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1026; Test 'if'
SETV d2,1; if() #40 Body Start
STORED d2,3
GOTO 1028; if() #40 Body End
SETV d2,2; if() #40 Else Start
STORED d2,3; if() #40 Else End
SETV d2,4
STORED d2,2
STOREDV 1,1; for() #20 setup
LOADD d2,1; for() #20 LoopTest
PUSHR d2
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body
POP d3
COMPARER d3,d2
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 1194; for() #20 TestFail?
LOADD d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #20 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,6
PUSHR d4
LOADD d2,6; UsrFunc[int __GetDrawingArray(NPC)] Params Start
PUSHR d2; UsrFunc[int __GetDrawingArray(NPC)] Params End
CALLFUNC 0.1215; UsrFunc[int __GetDrawingArray(NPC)] Call
POP d4
STORED d2,8; if() #127 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1055; Test 'if'
GOTO 1190; continue 1; AND if() #127 Body
SETR d2,gd27; if() #128 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1074; Test 'if'
LOADD d2,8; if() #129 Test AND if() #128 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1074; Test 'if'
GOTO 1190; continue 1; AND if() #129 Body
LOADD d2,8; if() #128 Body End AND if() #41 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1086; Test 'if'
SETV d2,64; if() #41 Body Start
STORED d2,5
GOTO 1088; if() #41 Body End
SETV d2,128; if() #41 Else Start
STORED d2,5; if() #41 Else End
LOADD d2,8; if() #42 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1100; Test 'if'
LOADD d2,2; if() #42 Body Start
STORED d2,4
GOTO 1102; if() #42 Body End
LOADD d2,3; if() #42 Else Start
STORED d2,4; if() #42 Else End
SETV d2,3
STORED d2,7
LOADD d2,0; for() #21 LoopTest
PUSHR d2
LOADD d2,8
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1190; for() #21 TestFail?
LOADD d2,8; if() #130 Test AND for() #21 Body Start
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
COMPAREV d2,1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1131
LOADD d2,8
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1183; Test 'if'
LOADD d2,4; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #130 Body Start
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,1
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,2
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
POP d0
READPODARRAYV d2,1
PUSHR d2
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0005
PUSHV 1
LOADD d2,5
PUSHR d2; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBO; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0016; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #130 Body End
LOADD d2,7
ADDV d2,6
STORED d2,7; for() #21 Body End
LOADD d2,0; for() #21 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 1104; for() #21 End
LOADD d2,1; for() #20 Body End AND for() #20 LoopIncrement
ADDV d2,1
STORED d2,1
GOTO 1031; for() #20 End
POPARGS d5,0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR d4,SP; Func[bool __HaveAmulet()] Body Start
SETV d2,50; if() #691 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOTRUE 1205; Test 'if'
SETV d2,1; return Start AND if() #691 Body Start
GOTO 1214; return End AND if() #691 Body End
SETV d2,63; if() #692 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOTRUE 1213; Test 'if'
SETV d2,1; return Start AND if() #692 Body Start
GOTO 1214; return End AND if() #692 Body End
SETV d2,0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int __GetDrawingArray(NPC)] Body Start
SETR d4,SP
LOADD d2,1; if() #602 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1231; Test 'if'
SETV d2,0; return Start AND if() #602 Body Start
GOTO 1251; return End AND if() #602 Body End
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
STORED d2,0; if() #603 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1246; Test 'if'
SETV d2,0; return Start AND if() #603 Body Start
GOTO 1251; return End AND if() #603 Body End
LOADD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,23
STORED d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int __GetDrawingArray(NPC)] Body End
PUSHARGSV 0,0.0002; Func[int FindUnusedFFC()] Body Start
SETR d4,SP
STOREDV 1,0; for() #42 setup
LOADD d2,0; for() #42 LoopTest
COMPAREV d2,33
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1302; for() #42 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #42 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1; if() #172 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1278
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1298; Test 'if'
LOADD d2,1; unless() #173 Test AND if() #172 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOFALSE 1298; Test 'unless'
LOADD d2,1; unless() #174 Test AND unless() #173 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOFALSE 1298; Test 'unless'
LOADD d2,0; return Start AND unless() #174 Body Start
GOTO 1303; return End AND unless() #174 Body End
LOADD d2,0; unless() #173 Body End AND if() #172 Body End AND for() #42 Body End AND for() #42 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 1256; for() #42 End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR d4,SP
LOADD d2,3; if() #198 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1318; Test 'if'
PUSHR d4; if() #198 Body Start
LOADD d2,9; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.1464; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP d4
STORED d2,3; if() #198 Body End
LOADD d2,2; if() #199 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1329; Test 'if'
PUSHR d4; if() #199 Body Start
LOADD d2,9; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.1625; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP d4
STORED d2,2; if() #199 Body End
LOADD d2,9; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORED d2,0
LOADD d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,7
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOADD d2,5
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOADD d2,1; if() #54 Test
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1399; Test 'if'
PUSHR d4; if() #54 Body Start
LOADD d2,6; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1968; UsrFunc[int __UnblockableDir(int)] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
GOTO 1408; if() #54 Body End
LOADD d2,6; if() #54 Else Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2; if() #54 Else End
LOADD d2,3; if() #200 Test
COMPAREV d2,0
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 1419; Test 'if'
LOADD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #200 Body Start
PUSHR d2
LOADD d2,3; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #200 Body End
LOADD d2,1; if() #201 Test
ANDV d2,32
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1435; Test 'if'
SETV d2,0; if() #201 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #201 Body End
LOADD d2,1; if() #202 Test
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1446; Test 'if'
PUSHR d4; if() #202 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1794; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #202 Body End
LOADD d2,1
ORV d2,512
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,2; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
LOADD d2,0; return Start
POPARGS d5,0.0010; return End
RETURNFUNC; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0,0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR d4,SP
LOADD d2,3; if() #61 Test
COMPAREV d2,129
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1475
LOADD d2,3
COMPAREV d2,145
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1480; Test 'if'
SETV d2,17; return Start AND if() #61 Body Start
GOTO 1623; return End AND if() #61 Body End
LOADD d2,3; if() #62 Test AND if() #61 Else Start
COMPAREV d2,133
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1487; Test 'if'
SETV d2,18; return Start AND if() #62 Body Start
GOTO 1623; return End AND if() #62 Body End
LOADD d2,3; if() #63 Test AND if() #62 Else Start
COMPAREV d2,130
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1494; Test 'if'
SETV d2,19; return Start AND if() #63 Body Start
GOTO 1623; return End AND if() #63 Body End
LOADD d2,3; if() #64 Test AND if() #63 Else Start
COMPAREV d2,140
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1501; Test 'if'
SETV d2,35; return Start AND if() #64 Body Start
GOTO 1623; return End AND if() #64 Body End
LOADD d2,3; if() #65 Test AND if() #64 Else Start
COMPAREV d2,142
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1508; Test 'if'
SETV d2,81; return Start AND if() #65 Body Start
GOTO 1623; return End AND if() #65 Body End
LOADD d2,3; if() #66 Test AND if() #65 Else Start
COMPAREV d2,139
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1515; Test 'if'
SETV d2,80; return Start AND if() #66 Body Start
GOTO 1623; return End AND if() #66 Body End
LOADD d2,3; if() #67 Test AND if() #66 Else Start
COMPAREV d2,134
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1522; Test 'if'
SETV d2,21; return Start AND if() #67 Body Start
GOTO 1623; return End AND if() #67 Body End
LOADD d2,3; if() #68 Test AND if() #67 Else Start
COMPAREV d2,132
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1529; Test 'if'
SETV d2,20; return Start AND if() #68 Body Start
GOTO 1623; return End AND if() #68 Body End
LOADD d2,3; if() #69 Test AND if() #68 Else Start
COMPAREV d2,141
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1536; Test 'if'
SETV d2,36; return Start AND if() #69 Body Start
GOTO 1623; return End AND if() #69 Body End
LOADD d2,3; if() #70 Test AND if() #69 Else Start
COMPAREV d2,137
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1543; Test 'if'
SETV d2,76; return Start AND if() #70 Body Start
GOTO 1623; return End AND if() #70 Body End
LOADD d2,3; if() #71 Test AND if() #70 Else Start
COMPAREV d2,138
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1550; Test 'if'
SETV d2,77; return Start AND if() #71 Body Start
GOTO 1623; return End AND if() #71 Body End
LOADD d2,3; if() #72 Test AND if() #71 Else Start
COMPAREV d2,131
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1622; Test 'if'
LOADD d2,0; for() #48 LoopTest AND if() #72 Body Start
COMPAREV d2,256
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1604; for() #48 TestFail?
LOADD d2,0; unless() #211 Test AND for() #48 Body Start
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOFALSE 1567; Test 'unless'
GOTO 1600; continue 1; AND unless() #211 Body
LOADD d2,0; InlineFunc[ItemData Game->LoadItemData(int)] Params
LOADITEMDATAR d2; InlineFunc[ItemData Game->LoadItemData(int)] Body Start
SETR d2,REFITEMCLASS; InlineFunc[ItemData Game->LoadItemData(int)] Body End
STORED d2,1; if() #212 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATAFAMILY
COMPAREV d2,1
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1579; Test 'if'
GOTO 1600; continue 1; AND if() #212 Body
LOADD d2,1; if() #213 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
PUSHR d2
LOADD d2,2
POP d3
COMPARER d3,d2
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 1600; Test 'if'
LOADD d2,1; if() #213 Body Start
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
STORED d2,2; if() #214 Test
COMPAREV d2,3
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 1600; Test 'if'
GOTO 1604; break 1; AND if() #214 Body
LOADD d2,0; if() #213 Body End AND for() #48 Body End AND for() #48 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 1555; for() #48 End
LOADD d2,2; if() #73 Test
COMPAREV d2,1
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 1612; Test 'if'
SETV d2,4; return Start AND if() #73 Body Start
GOTO 1623; return End
GOTO 1621; if() #73 Body End
LOADD d2,2; if() #74 Test AND if() #73 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1620; Test 'if'
SETV d2,5; return Start AND if() #74 Body Start
GOTO 1623; return End
GOTO 1621; if() #74 Body End
SETV d2,6; return Start AND if() #74 Else Start
GOTO 1623; return End AND if() #74 Else End AND if() #73 Else End AND if() #72 Body End
SETV d2,0; return Start AND if() #72 Else Start
POPARGS d5,0.0004; return End AND if() #72 Else End AND if() #71 Else End AND if() #70 Else End AND if() #69 Else End AND if() #68 Else End AND if() #67 Else End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR d4,SP; Func[int GetDefaultEWeaponSound(int)] Body Start
LOADD d2,0; if() #57 Test
COMPAREV d2,129
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1635
LOADD d2,0
COMPAREV d2,145
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1640; Test 'if'
SETV d2,40; return Start AND if() #57 Body Start
GOTO 1683; return End AND if() #57 Body End
LOADD d2,0; if() #58 Test AND if() #57 Else Start
COMPAREV d2,134
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1649
LOADD d2,0
COMPAREV d2,141
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1654; Test 'if'
SETV d2,32; return Start AND if() #58 Body Start
GOTO 1683; return End AND if() #58 Body End
LOADD d2,0; if() #59 Test AND if() #58 Else Start
COMPAREV d2,140
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1663
LOADD d2,0
COMPAREV d2,142
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1670
LOADD d2,0
COMPAREV d2,139
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1675; Test 'if'
SETV d2,13; return Start AND if() #59 Body Start
GOTO 1683; return End AND if() #59 Body End
LOADD d2,0; if() #60 Test AND if() #59 Else Start
COMPAREV d2,133
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1682; Test 'if'
SETV d2,51; return Start AND if() #60 Body Start
GOTO 1683; return End AND if() #60 Body End
SETV d2,0; return Start AND if() #60 Else Start
POP d5; return End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End AND if() #57 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0,0.0002; Func[void SetEWeaponDir(EWeapon)] Body Start
SETR d4,SP
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,1; if() #518 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1700; Test 'if'
LOADD d2,1; if() #518 Body Start
ADDV d2,6.2832
STORED d2,1; if() #518 Body End
LOADD d2,1; if() #250 Test
COMPAREV d2,0.3927
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 1709
LOADD d2,1
COMPAREV d2,5.8905
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1715; Test 'if'
SETV d2,3; if() #250 Body Start
STORED d2,0
GOTO 1765; if() #250 Body End
LOADD d2,1; if() #251 Test AND if() #250 Else Start
COMPAREV d2,1.1781
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1723; Test 'if'
SETV d2,7; if() #251 Body Start
STORED d2,0
GOTO 1765; if() #251 Body End
LOADD d2,1; if() #252 Test AND if() #251 Else Start
COMPAREV d2,1.9635
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1731; Test 'if'
SETV d2,1; if() #252 Body Start
STORED d2,0
GOTO 1765; if() #252 Body End
LOADD d2,1; if() #253 Test AND if() #252 Else Start
COMPAREV d2,2.7489
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1739; Test 'if'
SETV d2,6; if() #253 Body Start
STORED d2,0
GOTO 1765; if() #253 Body End
LOADD d2,1; if() #254 Test AND if() #253 Else Start
COMPAREV d2,3.5343
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1747; Test 'if'
SETV d2,2; if() #254 Body Start
STORED d2,0
GOTO 1765; if() #254 Body End
LOADD d2,1; if() #255 Test AND if() #254 Else Start
COMPAREV d2,4.3197
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1755; Test 'if'
SETV d2,4; if() #255 Body Start
STORED d2,0
GOTO 1765; if() #255 Body End
LOADD d2,1; if() #256 Test AND if() #255 Else Start
COMPAREV d2,5.1051
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1763; Test 'if'
SETV d2,0; if() #256 Body Start
STORED d2,0
GOTO 1765; if() #256 Body End
SETV d2,5; if() #256 Else Start
STORED d2,0; if() #256 Else End
LOADD d2,2; if() #255 Else End AND if() #254 Else End AND if() #253 Else End AND if() #252 Else End AND if() #251 Else End AND if() #250 Else End AND if() #519 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 1783; Test 'if'
PUSHR d4; if() #519 Body Start
LOADD d2,0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1968; UsrFunc[int __UnblockableDir(int)] Call
POP d4
STORED d2,0; if() #519 Body End
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
POPARGS d5,0.0003
RETURNFUNC; Func[void SetEWeaponDir(EWeapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #274 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 1877; Test 'if'
LOADD d2,1; if() #274 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,0; if() #524 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1815; Test 'if'
LOADD d2,0; if() #524 Body Start
ADDV d2,6.2832
STORED d2,0; if() #524 Body End
LOADD d2,0; if() #275 Test
COMPAREV d2,0.7854
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 1824
LOADD d2,0
COMPAREV d2,5.4978
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1837; Test 'if'
SETV d2,4; if() #275 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1876; if() #275 Body End
LOADD d2,0; if() #276 Test AND if() #275 Else Start
COMPAREV d2,2.3562
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 1852; Test 'if'
SETV d2,3; if() #276 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1876; if() #276 Body End
LOADD d2,0; if() #277 Test AND if() #276 Else Start
COMPAREV d2,3.9270
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 1867; Test 'if'
SETV d2,7; if() #277 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1876; if() #277 Body End
SETV d2,0; if() #277 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #277 Else End
GOTO 1966; if() #276 Else End AND if() #275 Else End AND if() #274 Body End
PUSHR d4; if() #274 Else Start
LOADD d2,1; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2028; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0; if() #278 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1893
LOADD d2,0
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1900
LOADD d2,0
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1913; Test 'if'
SETV d2,0; if() #278 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1966; if() #278 Body End
LOADD d2,0; if() #279 Test AND if() #278 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 1922
LOADD d2,0
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 1929
LOADD d2,0
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 1942; Test 'if'
SETV d2,3; if() #279 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1966; if() #279 Body End
LOADD d2,0; if() #280 Test AND if() #279 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1957; Test 'if'
SETV d2,7; if() #280 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1966; if() #280 Body End
SETV d2,4; if() #280 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #280 Else End
POPARGS d5,0.0002; if() #279 Else End AND if() #278 Else End AND if() #274 Else End
RETURNFUNC; Func[void SetEWeaponRotation(EWeapon)] Body End
SETR d4,SP; Func[int __UnblockableDir(int)] Body Start
LOADD d2,0; if() #715 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1976; Test 'if'
SETV d2,8; return Start AND if() #715 Body Start
GOTO 2026; return End AND if() #715 Body End
LOADD d2,0; if() #716 Test
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1983; Test 'if'
SETV d2,12; return Start AND if() #716 Body Start
GOTO 2026; return End AND if() #716 Body End
LOADD d2,0; if() #717 Test
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1990; Test 'if'
SETV d2,14; return Start AND if() #717 Body Start
GOTO 2026; return End AND if() #717 Body End
LOADD d2,0; if() #718 Test
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 1997; Test 'if'
SETV d2,10; return Start AND if() #718 Body Start
GOTO 2026; return End AND if() #718 Body End
LOADD d2,0; if() #719 Test
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2004; Test 'if'
SETV d2,15; return Start AND if() #719 Body Start
GOTO 2026; return End AND if() #719 Body End
LOADD d2,0; if() #720 Test
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2011; Test 'if'
SETV d2,9; return Start AND if() #720 Body Start
GOTO 2026; return End AND if() #720 Body End
LOADD d2,0; if() #721 Test
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2018; Test 'if'
SETV d2,13; return Start AND if() #721 Body Start
GOTO 2026; return End AND if() #721 Body End
LOADD d2,0; if() #722 Test
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2025; Test 'if'
SETV d2,11; return Start AND if() #722 Body Start
GOTO 2026; return End AND if() #722 Body End
LOADD d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR d4,SP; Func[int __NormalizeDir(int)] Body Start
LOADD d2,0; if() #701 Test
COMPAREV d2,0
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 2037
LOADD d2,0
COMPAREV d2,7
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2043; Test 'if'
LOADD d2,0; return Start AND if() #701 Body Start
GOTO 2100; return End AND if() #701 Body End
LOADD d2,0; if() #702 Test
COMPAREV d2,8
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2050; Test 'if'
SETV d2,0; return Start AND if() #702 Body Start
GOTO 2100; return End AND if() #702 Body End
LOADD d2,0; if() #703 Test
COMPAREV d2,9
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2057; Test 'if'
SETV d2,5; return Start AND if() #703 Body Start
GOTO 2100; return End AND if() #703 Body End
LOADD d2,0; if() #704 Test
COMPAREV d2,10
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2064; Test 'if'
SETV d2,3; return Start AND if() #704 Body Start
GOTO 2100; return End AND if() #704 Body End
LOADD d2,0; if() #705 Test
COMPAREV d2,11
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2071; Test 'if'
SETV d2,7; return Start AND if() #705 Body Start
GOTO 2100; return End AND if() #705 Body End
LOADD d2,0; if() #706 Test
COMPAREV d2,12
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2078; Test 'if'
SETV d2,1; return Start AND if() #706 Body Start
GOTO 2100; return End AND if() #706 Body End
LOADD d2,0; if() #707 Test
COMPAREV d2,13
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2085; Test 'if'
SETV d2,6; return Start AND if() #707 Body Start
GOTO 2100; return End AND if() #707 Body End
LOADD d2,0; if() #708 Test
COMPAREV d2,14
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2092; Test 'if'
SETV d2,2; return Start AND if() #708 Body Start
GOTO 2100; return End AND if() #708 Body End
LOADD d2,0; if() #709 Test
COMPAREV d2,15
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2099; Test 'if'
SETV d2,4; return Start AND if() #709 Body Start
GOTO 2100; return End AND if() #709 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR d4,SP; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
CASTBOOLF d2
CASTBOOLF d3
COMPARER d3,d2
SETCMP d2,0.0011
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR d4,SP; Func[void InitializeGhostZHData()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
SETR d4,SP; Func[void KillEWeapon(EWeapon)] Body Start
LOADD d2,0
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,128
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d5
RETURNFUNC; Func[void KillEWeapon(EWeapon)] Body End
PUSHARGSV 0,0.0005; Func[int __GetEWeaponThrowHeight(EWeapon)] Body Start
SETR d4,SP
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
STORED d2,4; if() #604 Test
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 2201; Test 'if'
SETV d2,1; return Start AND if() #604 Body Start
GOTO 2292; return End AND if() #604 Body End
PUSHR d4
LOADD d2,5; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNHXSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNHYSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0015; Int.Func[int Distance(int, int, int, int)] Call
POP d4
STORED d2,3; if() #605 Test
COMPAREV d2,1
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2243; Test 'if'
SETV d2,1; return Start AND if() #605 Body Start
GOTO 2292; return End AND if() #605 Body End
LOADD d2,3
PUSHR d2
LOADD d2,4
POP d3
DIVR d3,d2
SETR d2,d3
STORED d2,2
LOADD d2,1; while() #5 Test
COMPAREV d2,3.2000
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 2268; Test 'while'
LOADD d2,1; while() #5 Body Start
ADDV d2,0.1600
STORED d2,1
LOADD d2,2
SUBV d2,2
STORED d2,2; if() #606 Test
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 2267; Test 'if'
LOADD d2,1; return Start AND if() #606 Body Start
GOTO 2292; return End AND if() #606 Body End
GOTO 2250; while() #5 Body End AND while() #5 End
LOADD d2,2; while() #6 Test
PUSHR d2
LOADD d2,0
DIVV d2,3.2000
POP d3
COMPARER d3,d2
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2291; Test 'while'
LOADD d2,1; while() #6 Body Start
ADDV d2,0.1600
STORED d2,1
LOADD d2,0
PUSHR d2
LOADD d2,1
SUBV d2,3.2000
POP d3
ADDR d2,d3
STORED d2,0
LOADD d2,2
SUBV d2,2
STORED d2,2; while() #6 Body End
GOTO 2268; while() #6 End
LOADD d2,1; return Start
POPARGS d5,0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(EWeapon)] Body End
SETR d4,SP; Func[void SetEWeaponRotation(EWeapon, int)] Body Start
PUSHR d4
LOADD d2,0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2028; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0; if() #281 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 2309
LOADD d2,0
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2316
LOADD d2,0
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 2329; Test 'if'
SETV d2,0; if() #281 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2382; if() #281 Body End
LOADD d2,0; if() #282 Test AND if() #281 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 2338
LOADD d2,0
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 2345
LOADD d2,0
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 2358; Test 'if'
SETV d2,3; if() #282 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2382; if() #282 Body End
LOADD d2,0; if() #283 Test AND if() #282 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2373; Test 'if'
SETV d2,7; if() #283 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2382; if() #283 Body End
SETV d2,4; if() #283 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #283 Else End
POPARGS d5,0.0002; if() #282 Else End AND if() #281 Else End
RETURNFUNC; Func[void SetEWeaponRotation(EWeapon, int)] Body End
SETR d4,SP; Func[int Sign(int)] Body Start
LOADD d2,0; if() #299 Test
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 2392; Test 'if'
SETV d2,1; return Start AND if() #299 Body Start
GOTO 2400; return End AND if() #299 Body End
LOADD d2,0; if() #300 Test AND if() #299 Else Start
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2399; Test 'if'
SETV d2,-1; return Start AND if() #300 Body Start
GOTO 2400; return End AND if() #300 Body End
SETV d2,0; return Start AND if() #300 Else Start
POP d5; return End AND if() #300 Else End AND if() #299 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR d4,SP; Func[void StartGhostZH()] Body Start
PUSHR d4
CALLFUNC 0.2121; UsrFunc[void InitializeGhostZHData()] Call
POP d4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0,0.0007; Func[void UpdateEWeapon(EWeapon)] Body Start
SETR d4,SP
SETR d2,gd27; if() #555 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2419; Test 'if'
GOTO 3545; return (Void) AND if() #555 Body
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
STORED d2,6
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
STORED d2,5
STOREDV 1,4
LOADD d2,7; if() #309 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,128
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2816; Test 'if'
LOADD d2,7; if() #556 Test AND if() #309 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2665; Test 'if'
LOADD d2,7; if() #310 Test AND if() #556 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 2538; Test 'if'
LOADD d2,7; if() #311 Test AND if() #310 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2481; Test 'if'
PUSHR d4; if() #311 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params End
CALLFUNC 0.3547; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Call
POP d4
GOTO 2537; if() #311 Body End
LOADD d2,7; if() #312 Test AND if() #311 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2498; Test 'if'
PUSHR d4; if() #312 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params End
CALLFUNC 0.3728; UsrFunc[void __UpdateEWMHoming(EWeapon)] Call
POP d4
GOTO 2537; if() #312 Body End
LOADD d2,7; if() #313 Test AND if() #312 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2515; Test 'if'
PUSHR d4; if() #313 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params End
CALLFUNC 0.3932; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Call
POP d4
GOTO 2537; if() #313 Body End
LOADD d2,7; if() #314 Test AND if() #313 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2532; Test 'if'
PUSHR d4; if() #314 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params End
CALLFUNC 0.4266; UsrFunc[void __UpdateEWMRandom(EWeapon)] Call
POP d4
GOTO 2537; if() #314 Body End
PUSHR d4; if() #314 Else Start
LOADD d2,7; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params End
CALLFUNC 0.4386; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Call
POP d4; if() #314 Else End
GOTO 2665; if() #313 Else End AND if() #312 Else End AND if() #311 Else End AND if() #310 Body End
LOADD d2,7; if() #315 Test AND if() #310 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2573; Test 'if'
LOADD d2,7; if() #315 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params End
CALLFUNC 0.4697; UsrFunc[void __UpdateEWMVeer(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4
GOTO 2665; if() #315 Body End
LOADD d2,7; if() #316 Test AND if() #315 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2590; Test 'if'
PUSHR d4; if() #316 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params End
CALLFUNC 0.5229; UsrFunc[void __UpdateEWMThrow(EWeapon)] Call
POP d4
GOTO 2665; if() #316 Body End
LOADD d2,7; if() #317 Test AND if() #316 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,19
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2607; Test 'if'
PUSHR d4; if() #317 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMFall(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMFall(EWeapon)] Params End
CALLFUNC 0.5535; UsrFunc[void __UpdateEWMFall(EWeapon)] Call
POP d4
GOTO 2665; if() #317 Body End
LOADD d2,7; if() #318 Test AND if() #317 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,20
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2642; Test 'if'
LOADD d2,7; if() #318 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params End
CALLFUNC 0.5800; UsrFunc[void __UpdateEWMDrift(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4
GOTO 2665; if() #318 Body End
LOADD d2,7; if() #318 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params End
CALLFUNC 0.6304; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4; if() #318 Else End
LOADD d2,7; if() #317 Else End AND if() #316 Else End AND if() #315 Else End AND if() #310 Else End AND if() #556 Body End AND if() #557 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2815; Test 'if'
LOADD d2,7; if() #319 Test AND if() #557 Body Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2723; Test 'if'
LOADD d2,7; if() #319 Body Start
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,7; if() #558 Test
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 2722; Test 'if'
PUSHR d4; if() #558 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2165; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #558 Body End
GOTO 2815; if() #319 Body End
LOADD d2,7; if() #320 Test AND if() #319 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2766; Test 'if'
PUSHR d4; if() #559 Test AND if() #320 Body Start
LOADD d2,7; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0015; Int.Func[int Distance(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,7
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2765; Test 'if'
PUSHR d4; if() #559 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2165; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #559 Body End
GOTO 2815; if() #320 Body End
LOADD d2,7; if() #560 Test AND if() #320 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2815; Test 'if'
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #560 Body Start
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
PUSHR d2
LOADD d2,7
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
PUSHVARGR d3; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,7; if() #561 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 2815; Test 'if'
PUSHR d4; if() #561 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2165; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #561 Body End
GOTO 3127; if() #560 Body End AND if() #320 Else End AND if() #319 Else End AND if() #557 Body End AND if() #309 Body End
LOADD d2,7; if() #562 Test AND if() #309 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 2837
LOADD d2,7
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1024
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3127; Test 'if'
LOADD d2,7; if() #321 Test AND if() #562 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2858; Test 'if'
PUSHR d4; if() #321 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params End
CALLFUNC 0.6839; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Call
POP d4
GOTO 3127; if() #321 Body End
LOADD d2,7; if() #322 Test AND if() #321 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 2992; Test 'if'
LOADD d2,7; if() #323 Test AND if() #322 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2890; Test 'if'
SETV d2,0; if() #323 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 2991; if() #323 Body End
LOADD d2,7; if() #324 Test AND if() #323 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2907; Test 'if'
PUSHR d4; if() #324 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params End
CALLFUNC 0.7229; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Call
POP d4
GOTO 2991; if() #324 Body End
LOADD d2,7; if() #325 Test AND if() #324 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2924; Test 'if'
PUSHR d4; if() #325 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params End
CALLFUNC 0.7395; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Call
POP d4
GOTO 2991; if() #325 Body End
LOADD d2,7; if() #326 Test AND if() #325 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2941; Test 'if'
PUSHR d4; if() #326 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params End
CALLFUNC 0.7439; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Call
POP d4
GOTO 2991; if() #326 Body End
LOADD d2,7; if() #327 Test AND if() #326 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2958; Test 'if'
PUSHR d4; if() #327 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params End
CALLFUNC 0.7483; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Call
POP d4
GOTO 2991; if() #327 Body End
LOADD d2,7; if() #328 Test AND if() #327 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2975; Test 'if'
PUSHR d4; if() #328 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params End
CALLFUNC 0.7540; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Call
POP d4
GOTO 2991; if() #328 Body End
LOADD d2,7; if() #563 Test AND if() #328 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 2991; Test 'if'
PUSHR d4; if() #563 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params End
CALLFUNC 0.7598; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Call
POP d4; if() #563 Body End
GOTO 3127; if() #328 Else End AND if() #327 Else End AND if() #326 Else End AND if() #325 Else End AND if() #324 Else End AND if() #323 Else End AND if() #322 Body End
LOADD d2,7; if() #329 Test AND if() #322 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3009; Test 'if'
PUSHR d4; if() #329 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params End
CALLFUNC 0.7707; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Call
POP d4
GOTO 3127; if() #329 Body End
LOADD d2,7; if() #330 Test AND if() #329 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,9
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3026; Test 'if'
PUSHR d4; if() #330 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params End
CALLFUNC 0.7764; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Call
POP d4
GOTO 3127; if() #330 Body End
LOADD d2,7; if() #331 Test AND if() #330 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,10
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3043; Test 'if'
PUSHR d4; if() #331 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params End
CALLFUNC 0.7823; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Call
POP d4
GOTO 3127; if() #331 Body End
LOADD d2,7; if() #332 Test AND if() #331 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,11
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3060; Test 'if'
PUSHR d4; if() #332 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params End
CALLFUNC 0.7883; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Call
POP d4
GOTO 3127; if() #332 Body End
LOADD d2,7; if() #333 Test AND if() #332 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,12
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3077; Test 'if'
PUSHR d4; if() #333 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params End
CALLFUNC 0.7994; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Call
POP d4
GOTO 3127; if() #333 Body End
LOADD d2,7; if() #334 Test AND if() #333 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,13
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3094; Test 'if'
PUSHR d4; if() #334 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params End
CALLFUNC 0.8098; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Call
POP d4
GOTO 3127; if() #334 Body End
LOADD d2,7; if() #335 Test AND if() #334 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,14
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3111; Test 'if'
PUSHR d4; if() #335 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params End
CALLFUNC 0.8145; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Call
POP d4
GOTO 3127; if() #335 Body End
LOADD d2,7; if() #564 Test AND if() #335 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3127; Test 'if'
PUSHR d4; if() #564 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params End
CALLFUNC 0.8196; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Call
POP d4; if() #564 Body End
LOADD d2,7; if() #335 Else End AND if() #334 Else End AND if() #333 Else End AND if() #332 Else End AND if() #331 Else End AND if() #330 Else End AND if() #329 Else End AND if() #322 Else End AND if() #321 Else End AND if() #562 Body End AND if() #309 Else End AND if() #565 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3152; Test 'if'
LOADD d2,7; if() #566 Test AND if() #565 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 3152; Test 'if'
PUSHR d4; if() #566 Body Start
LOADD d2,7; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
CALLFUNC 0.0931; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #566 Body End
LOADD d2,7; if() #565 Body End AND if() #336 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3436; Test 'if'
SETV d2,1000; if() #336 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
SETR d2,LINKHP; if() #567 Test
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 3179; Test 'if'
GOTO 3545; return (Void) AND if() #567 Body
LOADD d2,7; if() #568 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3198
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3203; Test 'if'
GOTO 3545; return (Void) AND if() #568 Body
LOADD d2,7; if() #337 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 3216; Test 'if'
LOADD d2,7; InlineFunc[int RadtoDeg(int)] Params Start AND if() #337 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORED d2,1
GOTO 3281; if() #337 Body End
PUSHR d4; if() #337 Else Start
LOADD d2,7; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2028; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0; if() #338 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3231; Test 'if'
SETV d2,-90; if() #338 Body Start
STORED d2,1
GOTO 3281; if() #338 Body End
LOADD d2,0; if() #339 Test AND if() #338 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3239; Test 'if'
SETV d2,-45; if() #339 Body Start
STORED d2,1
GOTO 3281; if() #339 Body End
LOADD d2,0; if() #340 Test AND if() #339 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3247; Test 'if'
SETV d2,0; if() #340 Body Start
STORED d2,1
GOTO 3281; if() #340 Body End
LOADD d2,0; if() #341 Test AND if() #340 Else Start
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3255; Test 'if'
SETV d2,45; if() #341 Body Start
STORED d2,1
GOTO 3281; if() #341 Body End
LOADD d2,0; if() #342 Test AND if() #341 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3263; Test 'if'
SETV d2,90; if() #342 Body Start
STORED d2,1
GOTO 3281; if() #342 Body End
LOADD d2,0; if() #343 Test AND if() #342 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3271; Test 'if'
SETV d2,135; if() #343 Body Start
STORED d2,1
GOTO 3281; if() #343 Body End
LOADD d2,0; if() #344 Test AND if() #343 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3279; Test 'if'
SETV d2,180; if() #344 Body Start
STORED d2,1
GOTO 3281; if() #344 Body End
SETV d2,-135; if() #344 Else Start
STORED d2,1; if() #344 Else End
LOADD d2,4; if() #343 Else End AND if() #342 Else End AND if() #341 Else End AND if() #340 Else End AND if() #339 Else End AND if() #338 Else End AND if() #337 Else End AND if() #345 Test
COMPAREV d2,0
GOTOTRUE 3323; Test 'if'
LOADD d2,7; if() #345 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int Cos(int)] Params Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int Sin(int)] Params Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
GOTO 3339; if() #345 Body End
LOADD d2,7; if() #345 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,3
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,2; if() #345 Else End
LOADD d2,6; unless() #569 Test
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3353
LOADD d2,5
PUSHR d2
LOADD d2,2
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOFALSE 3369; Test 'unless'
PUSHR d4; unless() #569 Body Start
LOADD d2,6; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0046; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,1; unless() #569 Body End
STOREDV 0,0
LOADD d2,1; if() #346 Test
COMPAREV d2,0
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 3378
LOADD d2,1
COMPAREV d2,180
SETCMP d2,0.0010
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3385; Test 'if'
SETV d2,0; if() #346 Body Start
STORED d2,0
GOTO 3387; if() #346 Body End
SETV d2,2; if() #346 Else Start
STORED d2,0; if() #346 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTXSZ
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTYSZ
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 3493; if() #336 Body End
LOADD d2,7; if() #570 Test AND if() #336 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3476; Test 'if'
SETR d2,gd27; if() #347 Test AND if() #570 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3467; Test 'if'
SETV d2,1000; if() #347 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 3476; if() #347 Body End
SETV d2,0; if() #347 Else Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #347 Else End
LOADD d2,7; if() #570 Body End AND if() #571 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 3493; Test 'if'
PUSHR d4; if() #571 Body Start
LOADD d2,7; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1794; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #571 Body End
LOADD d2,7; if() #336 Else End AND if() #572 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,64
COMPAREV d2,0
SETCMP d2,0.0011
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 3545; Test 'if'
LOADD d2,7; if() #572 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZOFS,d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; if() #572 Body End
POPARGS d5,0.0008
RETURNFUNC; Func[void UpdateEWeapon(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1; InlineFunc[int Sin(int)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d3,EWPNMISCD; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(EWeapon)] Body End
PUSHARGSV 0,0.0003; Func[void __UpdateEWMHoming(EWeapon)] Body Start
SETR d4,SP
LOADD d2,3
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,2; if() #726 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3743; Test 'if'
LOADD d2,2; if() #726 Body Start
ADDV d2,6.2832
STORED d2,2; if() #726 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,3
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
STORED d2,1; if() #727 Test
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 3764; Test 'if'
LOADD d2,1; if() #727 Body Start
ADDV d2,6.2832
STORED d2,1; if() #727 Body End
LOADD d2,2; InlineFunc[int Abs(int)] Params Start
PUSHR d2
LOADD d2,1
POP d3
SUBR d3,d2
SETR d2,d3; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
STORED d2,0; if() #436 Test
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 3799
LOADD d2,0
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 6.2832,d2
POP d3
COMPARER d3,d2
SETCMP d2,0.0009
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 3812; Test 'if'
LOADD d2,1; if() #436 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 3879; if() #436 Body End
PUSHR d4; if() #437 Test AND if() #436 Else Start
LOADD d2,2; UsrFunc[int Sign(int)] Params Start
PUSHR d2
LOADD d2,1
POP d3
SUBR d3,d2
PUSHR d3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2384; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int Sign(int)] Params Start
SUBV d2,3.1416
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2384; UsrFunc[int Sign(int)] Call
POP d4
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3856; Test 'if'
LOADD d2,3; if() #437 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 3879; if() #437 Body End
LOADD d2,3; if() #437 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2; if() #437 Else End
PUSHR d4; if() #436 Else End
LOADD d2,3; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1685; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,3; if() #728 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 3930; Test 'if'
LOADD d2,3; if() #728 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,3; if() #729 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 3930; Test 'if'
PUSHR d4; if() #729 Body Start
LOADD d2,3; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2165; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #729 Body End
POPARGS d5,0.0004; if() #728 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #730 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 3963; Test 'if'
LOADD d2,1; if() #730 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #730 Body End
LOADD d2,1; if() #438 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4062; Test 'if'
LOADD d2,1; if() #438 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #731 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4061; Test 'if'
LOADD d2,1; if() #439 Test AND if() #731 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 4021; Test 'if'
PUSHR d4; if() #439 Body Start
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2165; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4061; if() #439 Body End
LOADD d2,1; if() #439 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #439 Else End
GOTO 4264; if() #731 Body End AND if() #438 Body End
LOADD d2,1; if() #438 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #732 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4162; Test 'if'
SETV d2,45; if() #732 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4
LOADD d2,1; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1685; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,1; if() #733 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4162; Test 'if'
PUSHR d4; if() #733 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1794; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #733 Body End
LOADD d2,1; if() #732 Body End AND if() #440 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4188; Test 'if'
LOADD d2,1; if() #440 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4264; if() #440 Body End
LOADD d2,1; if() #734 Test AND if() #440 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4264; Test 'if'
LOADD d2,1; if() #734 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.2000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORED d2,0; if() #441 Test
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4234; Test 'if'
PUSHR d4; if() #441 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2294; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4264; if() #441 Body End
LOADD d2,0; if() #442 Test AND if() #441 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4246; Test 'if'
PUSHR d4; if() #442 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2294; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4264; if() #442 Body End
LOADD d2,0; if() #443 Test AND if() #442 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4258; Test 'if'
PUSHR d4; if() #443 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2294; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4264; if() #443 Body End
PUSHR d4; if() #443 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2294; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #443 Else End
POPARGS d5,0.0002; if() #442 Else End AND if() #441 Else End AND if() #734 Body End AND if() #440 Else End AND if() #438 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(EWeapon)] Body End
SETR d4,SP; Func[void __UpdateEWMRandom(EWeapon)] Body Start
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int Randf(int)] Params Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,2
SETV d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
MULTR d2,d3
PUSHR d2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.0038; UsrFunc[int Randf(int)] Call
POP d4
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1685; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,0; if() #735 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4338; Test 'if'
PUSHR d4; if() #735 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1794; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #735 Body End
LOADD d2,0; if() #736 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4384; Test 'if'
LOADD d2,0; if() #736 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #737 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 4384; Test 'if'
PUSHR d4; if() #737 Body Start
LOADD d2,0; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2165; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #737 Body End
POP d5; if() #736 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #738 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4417; Test 'if'
LOADD d2,1; if() #738 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #738 Body End
LOADD d2,1; if() #444 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 4516; Test 'if'
LOADD d2,1; if() #444 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #739 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4515; Test 'if'
LOADD d2,1; if() #445 Test AND if() #739 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 4475; Test 'if'
PUSHR d4; if() #445 Body Start
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2165; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4515; if() #445 Body End
LOADD d2,1; if() #445 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #445 Else End
GOTO 4695; if() #739 Body End AND if() #444 Body End
LOADD d2,1; if() #444 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #740 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4606; Test 'if'
SETV d2,45; if() #740 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d3,62832; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
MULTV d2,0.0001
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1685; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,1; if() #741 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4606; Test 'if'
PUSHR d4; if() #741 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1794; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #741 Body End
LOADD d2,1; if() #740 Body End AND if() #446 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4632; Test 'if'
LOADD d2,1; if() #446 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4695; if() #446 Body End
LOADD d2,1; if() #742 Test AND if() #446 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 4695; Test 'if'
LOADD d2,1; if() #742 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORED d2,0; if() #447 Test
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4665; Test 'if'
PUSHR d4; if() #447 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2294; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4695; if() #447 Body End
LOADD d2,0; if() #448 Test AND if() #447 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4677; Test 'if'
PUSHR d4; if() #448 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2294; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4695; if() #448 Body End
LOADD d2,0; if() #449 Test AND if() #448 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4689; Test 'if'
PUSHR d4; if() #449 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2294; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4695; if() #449 Body End
PUSHR d4; if() #449 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2294; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #449 Else End
POPARGS d5,0.0002; if() #448 Else End AND if() #447 Else End AND if() #742 Body End AND if() #446 Else End AND if() #444 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #457 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4812; Test 'if'
LOADD d2,1; if() #457 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5169; if() #457 Body End
LOADD d2,0; if() #458 Test AND if() #457 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4846; Test 'if'
LOADD d2,1; if() #458 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5169; if() #458 Body End
LOADD d2,0; if() #459 Test AND if() #458 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4881; Test 'if'
LOADD d2,1; if() #459 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5169; if() #459 Body End
LOADD d2,0; if() #460 Test AND if() #459 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4915; Test 'if'
LOADD d2,1; if() #460 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5169; if() #460 Body End
LOADD d2,0; if() #461 Test AND if() #460 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 4981; Test 'if'
LOADD d2,1; if() #461 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5169; if() #461 Body End
LOADD d2,0; if() #462 Test AND if() #461 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5046; Test 'if'
LOADD d2,1; if() #462 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5169; if() #462 Body End
LOADD d2,0; if() #463 Test AND if() #462 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5111; Test 'if'
LOADD d2,1; if() #463 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5169; if() #463 Body End
LOADD d2,1; if() #463 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #463 Else End
LOADD d2,1; if() #462 Else End AND if() #461 Else End AND if() #460 Else End AND if() #459 Else End AND if() #458 Else End AND if() #457 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOADD d2,1; if() #743 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5260
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5294; Test 'if'
LOADD d2,1; if() #743 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #743 Body End
LOADD d2,1; InlineFunc[untyped Max(untyped, untyped)] Params Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHVARGR d2
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #451 Test AND if(true) #450 [Opt:AlwaysOn]
CALLFUNC 0.2102; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5346; Test 'unless'
LOADD d2,1; unless() #451 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5362; unless() #451 Body End
LOADD d2,1; unless() #451 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 176,d2
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; unless() #451 Else End
LOADD d2,1; if() #452 Test
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 5425; Test 'if'
PUSHR d4; unless() #744 Test AND if(true) #453 [Opt:AlwaysOn] AND if() #452 Body Start
LOADD d2,1; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9491; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5424; Test 'unless'
LOADD d2,1; InlineFunc[untyped Max(untyped, untyped)] Params Start AND unless() #744 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; unless() #744 Body End
GOTO 5533; if() #452 Body End
LOADD d2,1; if() #454 Test AND if() #452 Else Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
GOTOTRUE 5482; Test 'if'
LOADD d2,1; if() #455 Test AND if() #454 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 5479; Test 'if'
LOADD d2,1; if() #455 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 5481; if() #455 Body End
SETV d2,1; if() #455 Else Start
STORED d2,0; if() #455 Else End
GOTO 5484; if() #454 Body End
SETV d2,1; if() #454 Else Start
STORED d2,0; if() #454 Else End
LOADD d2,0; if() #745 Test
COMPAREV d2,0
GOTOTRUE 5533; Test 'if'
LOADD d2,1; if() #456 Test AND if() #745 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOTRUE 5512; Test 'if'
SETV d2,0; if() #456 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2165; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 5533; if() #456 Body End
SETV d2,0; if() #456 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #456 Else End
POPARGS d5,0.0002; if() #745 Body End AND if() #452 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #431 Test AND if(true) #430 [Opt:AlwaysOn]
CALLFUNC 0.2102; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5596; Test 'unless'
LOADD d2,1; unless() #431 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5626; unless() #431 Body End
LOADD d2,1; unless() #431 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; unless() #431 Else End
LOADD d2,1; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,0.1600
PUSHVARGR d2
PUSHVARGV 3.2000; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #723 Test AND if(true) #432 [Opt:AlwaysOn]
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 5798; Test 'if'
PUSHR d4; unless() #724 Test AND if() #723 Body Start
LOADD d2,1; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9491; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5798; Test 'unless'
LOADD d2,1; if() #433 Test AND unless() #724 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 5747; Test 'if'
LOADD d2,1; if() #434 Test AND if() #433 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 5744; Test 'if'
LOADD d2,1; if() #434 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 5746; if() #434 Body End
SETV d2,1; if() #434 Else Start
STORED d2,0; if() #434 Else End
GOTO 5749; if() #433 Body End
SETV d2,1; if() #433 Else Start
STORED d2,0; if() #433 Else End
LOADD d2,0; if() #725 Test
COMPAREV d2,0
GOTOTRUE 5798; Test 'if'
LOADD d2,1; if() #435 Test AND if() #725 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOTRUE 5777; Test 'if'
SETV d2,0; if() #435 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2165; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 5798; if() #435 Body End
SETV d2,0; if() #435 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #435 Else End
POPARGS d5,0.0002; if() #725 Body End AND unless() #724 Body End AND if() #723 Body End
RETURNFUNC; Func[void __UpdateEWMFall(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #415 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5915; Test 'if'
LOADD d2,1; if() #415 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6272; if() #415 Body End
LOADD d2,0; if() #416 Test AND if() #415 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5949; Test 'if'
LOADD d2,1; if() #416 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6272; if() #416 Body End
LOADD d2,0; if() #417 Test AND if() #416 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 5984; Test 'if'
LOADD d2,1; if() #417 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6272; if() #417 Body End
LOADD d2,0; if() #418 Test AND if() #417 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6018; Test 'if'
LOADD d2,1; if() #418 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6272; if() #418 Body End
LOADD d2,0; if() #419 Test AND if() #418 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6084; Test 'if'
LOADD d2,1; if() #419 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6272; if() #419 Body End
LOADD d2,0; if() #420 Test AND if() #419 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6149; Test 'if'
LOADD d2,1; if() #420 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6272; if() #420 Body End
LOADD d2,0; if() #421 Test AND if() #420 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6214; Test 'if'
LOADD d2,1; if() #421 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6272; if() #421 Body End
LOADD d2,1; if() #421 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #421 Else End
LOADD d2,1; if() #420 Else End AND if() #419 Else End AND if() #418 Else End AND if() #417 Else End AND if() #416 Else End AND if() #415 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1; if() #422 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,16
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 6396; Test 'if'
LOADD d2,1; if() #422 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6415; if() #422 Body End
LOADD d2,1; if() #422 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #422 Else End
LOADD d2,0; if() #423 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6450; Test 'if'
LOADD d2,1; if() #423 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6807; if() #423 Body End
LOADD d2,0; if() #424 Test AND if() #423 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6484; Test 'if'
LOADD d2,1; if() #424 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6807; if() #424 Body End
LOADD d2,0; if() #425 Test AND if() #424 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6519; Test 'if'
LOADD d2,1; if() #425 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6807; if() #425 Body End
LOADD d2,0; if() #426 Test AND if() #425 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6553; Test 'if'
LOADD d2,1; if() #426 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6807; if() #426 Body End
LOADD d2,0; if() #427 Test AND if() #426 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6619; Test 'if'
LOADD d2,1; if() #427 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6807; if() #427 Body End
LOADD d2,0; if() #428 Test AND if() #427 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6684; Test 'if'
LOADD d2,1; if() #428 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6807; if() #428 Body End
LOADD d2,0; if() #429 Test AND if() #428 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6749; Test 'if'
LOADD d2,1; if() #429 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6807; if() #429 Body End
LOADD d2,1; if() #429 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #429 Else End
LOADD d2,1; if() #428 Else End AND if() #427 Else End AND if() #426 Else End AND if() #425 Else End AND if() #424 Else End AND if() #423 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(EWeapon)] Body End
PUSHARGSV 0,0.0011; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body Start
SETR d4,SP
LOADD d2,11; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,10
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #165 setup
STORED d2,3
LOADD d2,3; for() #165 LoopTest
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 6893; for() #165 TestFail?
LOADD d2,3; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #165 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,9; if() #594 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,768
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 6874; Test 'if'
GOTO 6889; continue 1; AND if() #594 Body
LOADD d2,9; if() #595 Test
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,10
POP d3
COMPARER d3,d2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6889; Test 'if'
GOTO 6893; break 1; AND if() #595 Body
LOADD d2,3; for() #165 Body End AND for() #165 LoopIncrement
SUBV d2,1
STORED d2,3
GOTO 6852; for() #165 End
LOADD d2,3; if() #596 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 6919; Test 'if'
ALLOCATEMEMV d2,43; if() #596 Body Start
STORED d2,0
WRITEPODSTRING d2,"ghost.zh: Failed to find prototype eweapon"
LOADD d2,0; InlineFunc[void TraceS(int)] Params Start
SETR d0,d2; InlineFunc[void TraceS(int)] Params End
TRACE6 d3; InlineFunc[void TraceS(int)] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV d2,0
PUSHR d2
LOADD d2,11
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
LOADD d3,0
DEALLOCATEMEMR d3
GOTO 7227; return (Void)
LOADD d3,0
DEALLOCATEMEMR d3; if() #596 Body End
LOADD d2,11
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MODV d2,10
SUBV d2,6.2832
STORED d2,5
LOADD d2,11
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,10
POP d3
SUBR d3,d2
SETR d2,d3
MULTV d2,10000
STORED d2,4
LOADD d2,11
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d2,d3
DIVV d2,100
RSHIFTV d2,0
STORED d2,8
LOADD d2,11; if() #362 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7009; Test 'if'
LOADD d2,11; if() #362 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,7
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,6
GOTO 7021; if() #362 Body End
LOADD d2,11; if() #362 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
ADDV d2,8
STORED d2,7
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
ADDV d2,8
STORED d2,6; if() #362 Else End
LOADD d2,8; if() #363 Test
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7073; Test 'if'
LOADD d2,1; for() #166 LoopTest AND if() #363 Body Start
PUSHR d2
LOADD d2,4
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7064; for() #166 TestFail?
PUSHR d4; for() #166 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,1
MULTV d2,6.2832
SETV d2,6.2832
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,4
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.8995; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #166 Body End
LOADD d2,1; for() #166 LoopIncrement
ADDV d2,1
STORED d2,1
GOTO 7026; for() #166 End
LOADD d2,9; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7218; if() #363 Body End
LOADD d2,8; if() #364 Test AND if() #363 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7113; Test 'if'
STOREDV 0,1; for() #167 setup AND if() #364 Body Start
LOADD d2,1; for() #167 LoopTest
PUSHR d2
LOADD d2,4
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7104; for() #167 TestFail?
PUSHR d4; for() #167 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2
SETV d3,31416; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
DIVV d2,5000
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.8995; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #167 Body End
LOADD d2,1; for() #167 LoopIncrement
ADDV d2,1
STORED d2,1
GOTO 7079; for() #167 End
LOADD d2,9; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7218; if() #364 Body End
LOADD d2,4; if() #365 Test AND if() #364 Else Start
COMPAREV d2,1
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 7179; Test 'if'
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start AND if() #365 Body Start
ADDV d2,8
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOADD d2,6
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2
LOADD d2,5
DIVV d2,2
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
LOADD d2,0; for() #168 LoopTest
PUSHR d2
LOADD d2,4
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7178; for() #168 TestFail?
PUSHR d4; for() #168 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,0
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,4
SUBV d2,1
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.8995; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #168 Body End
LOADD d2,0; for() #168 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7141; for() #168 End
GOTO 7210; if() #365 Body End
LOADD d2,4; if() #597 Test AND if() #365 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7210; Test 'if'
PUSHR d4; if() #597 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOADD d2,6
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.8995; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; if() #597 Body End
LOADD d2,9; if() #365 Else End AND InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #364 Else End
SETV d2,0; if() #363 Else End
PUSHR d2
LOADD d2,11
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #357 Test
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 7318; Test 'if'
PUSHR d4; if() #357 Body Start
LOADD d2,1; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1685; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
SETV d2,300
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7393; if() #357 Body End
LOADD d2,1; if() #358 Test AND if() #357 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 7343; Test 'if'
LOADD d2,1; if() #358 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1685; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
GOTO 7393; if() #358 Body End
LOADD d2,1; if() #358 Else Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,6
STORED d2,0; if() #359 Test
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7363; Test 'if'
PUSHR d4; if() #359 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2294; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7393; if() #359 Body End
LOADD d2,0; if() #360 Test AND if() #359 Else Start
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7375; Test 'if'
PUSHR d4; if() #360 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2294; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7393; if() #360 Body End
LOADD d2,0; if() #361 Test AND if() #360 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7387; Test 'if'
PUSHR d4; if() #361 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2294; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7393; if() #361 Body End
PUSHR d4; if() #361 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2294; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #361 Else End
POPARGS d5,0.0002; if() #360 Else End AND if() #359 Else End AND if() #358 Else End AND if() #357 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 135; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 136; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body Start
SETR d4,SP
LOADD d2,0; for() #155 LoopTest
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7529; for() #155 TestFail?
PUSHR d4; for() #155 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #155 Body End
LOADD d2,0; for() #155 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7485; for() #155 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body Start
SETR d4,SP
STOREDV 4,0; for() #154 setup
LOADD d2,0; for() #154 LoopTest
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7587; for() #154 TestFail?
PUSHR d4; for() #154 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #154 Body End
LOADD d2,0; for() #154 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7543; for() #154 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body Start
SETR d4,SP
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #355 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7651; Test 'if'
LOADD d2,0; for() #156 LoopTest AND if() #355 Body Start
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7650; for() #156 TestFail?
PUSHR d4; for() #156 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #156 Body End
LOADD d2,0; for() #156 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7606; for() #156 End
GOTO 7696; if() #355 Body End
STOREDV 4,0; for() #157 setup AND if() #355 Else Start
LOADD d2,0; for() #157 LoopTest
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7696; for() #157 TestFail?
PUSHR d4; for() #157 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #157 Body End
LOADD d2,0; for() #157 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7652; for() #157 End
SETV d2,0; if() #355 Else End
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body Start
SETR d4,SP
LOADD d2,0; for() #162 LoopTest
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7753; for() #162 TestFail?
PUSHR d4; for() #162 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #162 Body End
LOADD d2,0; for() #162 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7709; for() #162 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body Start
SETR d4,SP
LOADD d2,0; for() #159 LoopTest
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7810; for() #159 TestFail?
PUSHR d4; for() #159 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #159 Body End
LOADD d2,0; for() #159 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7766; for() #159 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body Start
SETR d4,SP
STOREDV 4,0; for() #158 setup
LOADD d2,0; for() #158 LoopTest
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7870; for() #158 TestFail?
PUSHR d4; for() #158 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #158 Body End
LOADD d2,0; for() #158 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7826; for() #158 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body Start
SETR d4,SP
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #356 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 7936; Test 'if'
LOADD d2,0; for() #160 LoopTest AND if() #356 Body Start
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7935; for() #160 TestFail?
PUSHR d4; for() #160 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #160 Body End
LOADD d2,0; for() #160 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7891; for() #160 End
GOTO 7981; if() #356 Body End
STOREDV 4,0; for() #161 setup AND if() #356 Else Start
LOADD d2,0; for() #161 LoopTest
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 7981; for() #161 TestFail?
PUSHR d4; for() #161 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #161 Body End
LOADD d2,0; for() #161 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7937; for() #161 End
SETV d2,13; if() #356 Else End AND InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body Start
SETR d4,SP
LOADD d2,0; for() #163 LoopTest
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 8040; for() #163 TestFail?
PUSHR d4; for() #163 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #163 Body End
LOADD d2,0; for() #163 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7996; for() #163 End
STOREDV 4,0; for() #164 setup
LOADD d2,0; for() #164 LoopTest
COMPAREV d2,8
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 8085; for() #164 TestFail?
PUSHR d4; for() #164 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #164 Body End
LOADD d2,0; for() #164 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 8041; for() #164 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; InlineFunc[NPC Screen->CreateNPC(int)] Params Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[NPC Screen->CreateNPC(int)] Params End
CREATENPCR d2; InlineFunc[NPC Screen->CreateNPC(int)] Body Start
SETR d2,REFNPC; InlineFunc[NPC Screen->CreateNPC(int)] Body End
STORED d2,0
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body Start
PUSHR d4
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1305; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body End
PUSHARGSV 0,0.0005; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body Start
SETR d4,SP
PUSHR d4
CALLFUNC 0.1253; UsrFunc[int FindUnusedFFC()] Call
POP d4
STORED d2,4; if() #598 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8216; Test 'if'
SETV d2,0; if() #598 Body Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 8355; return (Void) AND if() #598 Body End
LOADD d2,4; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,3
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #169 setup
STORED d2,0
LOADD d2,0; for() #169 LoopTest
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 8258; for() #169 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #169 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,2; if() #599 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,512
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8243; Test 'if'
GOTO 8254; continue 1; AND if() #599 Body
LOADD d2,1; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHVARGR d2
LOADD d2,2
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
PUSHVARGR EWPNMISCD; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
STORED d2,1; for() #169 Body End
LOADD d2,0; for() #169 LoopIncrement
SUBV d2,1
STORED d2,0
GOTO 8221; for() #169 End
LOADD d2,1
SUBV d2,1
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
SETV d2,3
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,5
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,1024
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
PUSHR d4
LOADD d2,5; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0829; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
LOADD d2,5; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0852; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
LOADD d2,5
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOADD d2,1
SUBV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
POPARGS d5,0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body End
PUSHARGSV 0,0.0002; Func[void UpdateEWeapons()] Body Start
SETR d4,SP
SETR d2,LINKACTION; unless() #348 Test
COMPAREV d2,4
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 8368
SETR d2,LINKACTION
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 8375
SETR d2,LINKACTION
COMPAREV d2,14
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 8382
SETR d2,LINKACTION
COMPAREV d2,15
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 8433; Test 'unless'
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #149 setup AND unless() #348 Body Start
STORED d2,0
LOADD d2,0; for() #149 LoopTest
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 8432; for() #149 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #149 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,1; if() #573 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 8419
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 8423; Test 'if'
GOTO 8428; continue 1; AND if() #573 Body
PUSHR d4
LOADD d2,1; UsrFunc[void UpdateEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void UpdateEWeapon(EWeapon)] Params End
CALLFUNC 0.2407; UsrFunc[void UpdateEWeapon(EWeapon)] Call
POP d4; for() #149 Body End
LOADD d2,0; for() #149 LoopIncrement
SUBV d2,1
STORED d2,0
GOTO 8387; for() #149 End
GOTO 8480; unless() #348 Body End
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #150 setup AND unless() #348 Else Start
STORED d2,0
LOADD d2,0; for() #150 LoopTest
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 8480; for() #150 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #150 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,1; if() #574 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOFALSE 8467
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOTRUE 8471; Test 'if'
GOTO 8476; continue 1; AND if() #574 Body
PUSHR d4
LOADD d2,1; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params End
CALLFUNC 0.8482; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Call
POP d4; for() #150 Body End
LOADD d2,0; for() #150 LoopIncrement
SUBV d2,1
STORED d2,0
GOTO 8435; for() #150 End
POPARGS d5,0.0002; unless() #348 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0,0.0002; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body Start
SETR d4,SP
LOADD d2,2; if() #746 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8509; Test 'if'
LOADD d2,2; if() #747 Test AND if() #746 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 8509; Test 'if'
PUSHR d4; if() #747 Body Start
LOADD d2,2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
CALLFUNC 0.0931; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #747 Body End
LOADD d2,2; if() #746 Body End AND if() #464 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8702; Test 'if'
SETV d2,1000; if() #464 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
LOADD d2,2; if() #748 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8549
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8554; Test 'if'
GOTO 8759; return (Void) AND if() #748 Body
LOADD d2,2; if() #465 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 8567; Test 'if'
LOADD d2,2; InlineFunc[int RadtoDeg(int)] Params Start AND if() #465 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORED d2,1
GOTO 8632; if() #465 Body End
PUSHR d4; if() #465 Else Start
LOADD d2,2; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2028; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0; if() #466 Test
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8582; Test 'if'
SETV d2,-90; if() #466 Body Start
STORED d2,1
GOTO 8632; if() #466 Body End
LOADD d2,0; if() #467 Test AND if() #466 Else Start
COMPAREV d2,5
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8590; Test 'if'
SETV d2,-45; if() #467 Body Start
STORED d2,1
GOTO 8632; if() #467 Body End
LOADD d2,0; if() #468 Test AND if() #467 Else Start
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8598; Test 'if'
SETV d2,0; if() #468 Body Start
STORED d2,1
GOTO 8632; if() #468 Body End
LOADD d2,0; if() #469 Test AND if() #468 Else Start
COMPAREV d2,7
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8606; Test 'if'
SETV d2,45; if() #469 Body Start
STORED d2,1
GOTO 8632; if() #469 Body End
LOADD d2,0; if() #470 Test AND if() #469 Else Start
COMPAREV d2,1
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8614; Test 'if'
SETV d2,90; if() #470 Body Start
STORED d2,1
GOTO 8632; if() #470 Body End
LOADD d2,0; if() #471 Test AND if() #470 Else Start
COMPAREV d2,6
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8622; Test 'if'
SETV d2,135; if() #471 Body Start
STORED d2,1
GOTO 8632; if() #471 Body End
LOADD d2,0; if() #472 Test AND if() #471 Else Start
COMPAREV d2,2
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8630; Test 'if'
SETV d2,180; if() #472 Body Start
STORED d2,1
GOTO 8632; if() #472 Body End
SETV d2,-135; if() #472 Else Start
STORED d2,1; if() #472 Else End
STOREDV 0,0; if() #471 Else End AND if() #470 Else End AND if() #469 Else End AND if() #468 Else End AND if() #467 Else End AND if() #466 Else End AND if() #465 Else End
LOADD d2,1; if() #473 Test
COMPAREV d2,0
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 8641
LOADD d2,1
COMPAREV d2,180
SETCMP d2,0.0010
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8648; Test 'if'
SETV d2,0; if() #473 Body Start
STORED d2,0
GOTO 8650; if() #473 Body End
SETV d2,2; if() #473 Else Start
STORED d2,0; if() #473 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
PUSHARGSV 1,0.0002
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 8759; if() #464 Body End
LOADD d2,2; if() #749 Test AND if() #464 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8742; Test 'if'
SETR d2,gd27; if() #474 Test AND if() #749 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8733; Test 'if'
SETV d2,1000; if() #474 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 8742; if() #474 Body End
SETV d2,0; if() #474 Else Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #474 Else End
LOADD d2,2; if() #749 Body End AND if() #750 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8759; Test 'if'
PUSHR d4; if() #750 Body Start
LOADD d2,2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1794; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #750 Body End
POPARGS d5,0.0003; if() #464 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body End
SETR d4,SP; Func[void UpdateGhostZH1()] Body Start
PUSHR d4
CALLFUNC 0.8357; UsrFunc[void UpdateEWeapons()] Call
PEEK d4
CALLFUNC 0.0875; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK d4
CALLFUNC 0.8770; UsrFunc[void UpdateGhostZHData1()] Call
POP d4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR d4,SP
SETR d2,CURDMAP; InlineFunc[int Game->GetCurDMap()] Body
LSHIFTV d2,8
PUSHR d2
SETR d2,CURDSCR; InlineFunc[int Game->GetCurDMapScreen()] Body
POP d3
ADDR d2,d3
STORED d2,0
SETR d2,gd27; if() #349 Test
PUSHR d2
POP d0
READPODARRAYV d2,7
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 8803; Test 'if'
SETV d2,0; if() #349 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
LOADD d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 7,d2
GOTO 8821; if() #349 Body End
SETR d2,gd27; if() #575 Test AND if() #349 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 8821; Test 'if'
SETR d2,gd27; if() #575 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,6
SUBV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2; if() #575 Body End
POP d5; if() #349 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR d4,SP; Func[void UpdateGhostZH2()] Body Start
PUSHR d4
CALLFUNC 0.0997; UsrFunc[void DrawGhostFFCs()] Call
PEEK d4
CALLFUNC 0.0065; UsrFunc[void AutoGhost()] Call
PEEK d4
CALLFUNC 0.8832; UsrFunc[void UpdateGhostZHData2()] Call
POP d4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR d4,SP; Func[void UpdateGhostZHData2()] Body Start
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,1
ADDV d2,1
MODV d2,8
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETR d2,gd27; if() #350 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8864; Test 'if'
SETR d2,gd27; if() #350 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ORV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
GOTO 8874; if() #350 Body End
SETR d2,gd27; if() #350 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,-2
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #350 Else End
SETR d2,gd27; if(true) #576 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,3
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETR d2,gd27; if() #577 Test
PUSHR d2
POP d0
READPODARRAYV d2,3
COMPAREV d2,8
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 8909; Test 'if'
SETV d2,0; if() #577 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2; if() #577 Body End
SETR d2,gd27; if(true) #578 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,5
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETR d2,gd27; if() #579 Test
PUSHR d2
POP d0
READPODARRAYV d2,5
COMPAREV d2,8
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 8944; Test 'if'
SETV d2,0; if() #579 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2; if() #579 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR d4,SP; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOADD d2,1; if() #693 Test
COMPAREV d2,97
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 8958; Test 'if'
LOADD d2,1; if() #694 Test AND if() #693 Body Start
COMPAREV d2,122
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 8958; Test 'if'
SETV d2,1; return Start AND if() #694 Body Start
GOTO 8993; return End AND if() #694 Body End
LOADD d2,1; if() #693 Body End AND if() #695 Test
COMPAREV d2,65
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 8970; Test 'if'
LOADD d2,1; if() #696 Test AND if() #695 Body Start
COMPAREV d2,90
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 8970; Test 'if'
SETV d2,1; return Start AND if() #696 Body Start
GOTO 8993; return End AND if() #696 Body End
LOADD d2,1; if() #695 Body End AND if() #697 Test
COMPAREV d2,95
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 8977; Test 'if'
SETV d2,1; return Start AND if() #697 Body Start
GOTO 8993; return End AND if() #697 Body End
LOADD d2,0; unless() #698 Test
COMPAREV d2,0
GOTOFALSE 8992; Test 'unless'
LOADD d2,1; if() #699 Test AND unless() #698 Body Start
COMPAREV d2,48
SETCMP d2,0.0013
COMPAREV d2,0
GOTOTRUE 8992; Test 'if'
LOADD d2,1; if() #700 Test AND if() #699 Body Start
COMPAREV d2,57
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 8992; Test 'if'
SETV d2,1; return Start AND if() #700 Body Start
GOTO 8993; return End AND if() #700 Body End
SETV d2,0; if() #699 Body End AND unless() #698 Body End AND return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body Start
SETR d4,SP
LOADD d2,4; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNID; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params End
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORED d2,0
LOADD d2,4; if() #590 Test
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 9027; Test 'if'
LOADD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #590 Body Start
PUSHR d2
LOADD d2,4
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #590 Body End
LOADD d2,4; if() #353 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 9163; Test 'if'
SETV d2,3; if() #353 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNEXTEND,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTXSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTYSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHXSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYSZ,d2
LOADD d2,3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
GOTO 9183; if() #353 Body End
LOADD d2,3; if() #353 Else Start
SUBV d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,2
SUBV d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; if() #353 Else End
LOADD d2,4
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOADD d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1685; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4; if() #354 Test
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 9320
LOADD d2,4
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-1
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 9341; Test 'if'
PUSHR d4; if() #354 Body Start
LOADD d2,0; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params Start
PUSHR d2; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params End
CALLFUNC 0.2187; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 9359; if() #354 Body End
LOADD d2,4; if() #354 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #354 Else End
LOADD d2,4
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,11
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,-257
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #591 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,32
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 9472; Test 'if'
SETV d2,0; if() #591 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #591 Body End
LOADD d2,0; if() #592 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 9489; Test 'if'
PUSHR d4; if() #592 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1794; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #592 Body End
POPARGS d5,0.0005
RETURNFUNC; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR d4,SP
LOADD d2,0; for() #189 LoopTest
PUSHR d2
LOADD d2,1
SUBV d2,1
POP d3
COMPARER d3,d2
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 9539; for() #189 TestFail?
LOADD d2,6; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #761 Test AND for() #189 Body Start
PUSHR d2
LOADD d2,4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOTRUE 9535; Test 'if'
SETV d2,0; if() #762 Test AND if() #761 Body Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
COMPAREV d2,0
GOTOTRUE 9535; Test 'if'
SETV d2,1; return Start AND if() #762 Body Start
GOTO 9540; return End AND if() #762 Body End
LOADD d2,0; if() #761 Body End AND for() #189 Body End AND for() #189 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 9493; for() #189 End
SETV d2,0; return Start
POPARGS d5,0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End


PUSHR d0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR d4,SP
LOADD d2,1; if() #527 Test
COMPAREV d2,0
SETCMP d2,0.0014
COMPAREV d2,0
GOTOTRUE 16; Test 'if'
SETV d2,-1; if() #527 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
GOTO 22; if() #527 Body End
LOADD d2,1; if() #527 Else Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2; if() #527 Else End
POPARGS d5,0.0002
QUIT; void run(int) Body End


SETV gd9,0; void run() Body Start
SETV gd10,0
SETV gd12,0
SETV gd11,0
SETV gd5,0
SETV gd15,0
SETV gd6,0
SETV gd14,0
SETV gd13,0
SETV gd7,0
SETV gd8,0
SETV gd2,0
SETV gd3,0
SETV gd4,0
ALLOCATEGMEMV d2,25
SETR gd26,d2
SETV gd16,0
SETV gd17,0
SETV gd21,0
SETV gd18,0
SETV gd22,0
SETV gd19,0
SETV gd20,0
ALLOCATEGMEMV d2,32
SETR gd25,d2
SETV gd23,0
SETV gd24,0
ALLOCATEGMEMV d2,8
SETR gd27,d2
ALLOCATEGMEMV d2,1000
SETR gd28,d2
ALLOCATEGMEMV d2,4096
SETR gd1,d2
QUIT; void run() Body End