Compiling 'armos.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR d0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0,0.0003
SETR d4,SP
PUSHR d4
LOADD d2,3; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params End
CALLFUNC 0.4145; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Call
POP d4
STORED d2,2
PUSHR d4
PUSHV 89; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3087; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 3; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3087; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3087; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4
LOADD d2,2; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
PUSHR d4
LOADD d2,3; UsrFunc[void SpawnAnimation(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[void SpawnAnimation(FFC, NPC)] Params End
CALLFUNC 0.5620; UsrFunc[void SpawnAnimation(FFC, NPC)] Call
POP d4
LOADD d2,2
PUSHR d2
POP REFNPC
SETR d2,NPCSTEP
DIVV d2,100
STORED d2,1
LOADD d2,2
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,0
SETR d2,gd4; if() #954 Test AND while(true) #15 Body [Opt:AlwaysOn] Start
COMPAREV d2,0
GOTOCMP 60,!=
SETR d2,gd6
COMPAREV d2,0
GOTOCMP 60,>
SETV d2,1
GOTO 61
SETV d2,0
COMPAREV d2,0
GOTOCMP 67,==; Test 'if'
SETV d2,1.5000; if() #954 Body Start
SETR gd6,d2
LOADD d2,0; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #954 Body End
PUSHR d4
LOADD d2,1; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params End
CALLFUNC 0.4310; UsrFunc[void Ghost_MoveTowardLink(int, int)] Call
PEEK d4
LOADD d2,3; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params End
CALLFUNC 0.4375; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Call
POP d4; while(true) #15 Body [Opt:AlwaysOn] End
GOTO 52; while() #15 End AND [Opt:NeverRet] AND void run(int) Body End
SETR d4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR d4,SP; Func[int AngleDir8(int)] Body Start
LOADD d2,0; if() #7 Test
COMPAREV d2,157.5000
GOTOCMP 109,>
LOADD d2,0
COMPAREV d2,112.5000
GOTOCMP 109,<=
SETV d2,1
GOTO 110
SETV d2,0
COMPAREV d2,0
GOTOCMP 114,==; Test 'if'
SETV d2,6; return Start AND if() #7 Body Start
GOTO 193; return End AND if() #7 Body End
LOADD d2,0; if() #8 Test AND if() #7 Else Start
COMPAREV d2,112.5000
GOTOCMP 122,>
LOADD d2,0
COMPAREV d2,67.5000
GOTOCMP 122,<=
SETV d2,1
GOTO 123
SETV d2,0
COMPAREV d2,0
GOTOCMP 127,==; Test 'if'
SETV d2,1; return Start AND if() #8 Body Start
GOTO 193; return End AND if() #8 Body End
LOADD d2,0; if() #9 Test AND if() #8 Else Start
COMPAREV d2,67.5000
GOTOCMP 135,>
LOADD d2,0
COMPAREV d2,22.5000
GOTOCMP 135,<=
SETV d2,1
GOTO 136
SETV d2,0
COMPAREV d2,0
GOTOCMP 140,==; Test 'if'
SETV d2,7; return Start AND if() #9 Body Start
GOTO 193; return End AND if() #9 Body End
LOADD d2,0; if() #10 Test AND if() #9 Else Start
COMPAREV d2,22.5000
GOTOCMP 148,>
LOADD d2,0
COMPAREV d2,-22.5000
GOTOCMP 148,<=
SETV d2,1
GOTO 149
SETV d2,0
COMPAREV d2,0
GOTOCMP 153,==; Test 'if'
SETV d2,3; return Start AND if() #10 Body Start
GOTO 193; return End AND if() #10 Body End
LOADD d2,0; if() #11 Test AND if() #10 Else Start
COMPAREV d2,-22.5000
GOTOCMP 161,>
LOADD d2,0
COMPAREV d2,-67.5000
GOTOCMP 161,<=
SETV d2,1
GOTO 162
SETV d2,0
COMPAREV d2,0
GOTOCMP 166,==; Test 'if'
SETV d2,5; return Start AND if() #11 Body Start
GOTO 193; return End AND if() #11 Body End
LOADD d2,0; if() #12 Test AND if() #11 Else Start
COMPAREV d2,-67.5000
GOTOCMP 174,>
LOADD d2,0
COMPAREV d2,-112.5000
GOTOCMP 174,<=
SETV d2,1
GOTO 175
SETV d2,0
COMPAREV d2,0
GOTOCMP 179,==; Test 'if'
SETV d2,0; return Start AND if() #12 Body Start
GOTO 193; return End AND if() #12 Body End
LOADD d2,0; if() #13 Test AND if() #12 Else Start
COMPAREV d2,-112.5000
GOTOCMP 187,>
LOADD d2,0
COMPAREV d2,-157.5000
GOTOCMP 187,<=
SETV d2,1
GOTO 188
SETV d2,0
COMPAREV d2,0
GOTOCMP 192,==; Test 'if'
SETV d2,4; return Start AND if() #13 Body Start
GOTO 193; return End AND if() #13 Body End
SETV d2,2; return Start AND if() #13 Else Start
POP d5; return End AND if() #13 Else End AND if() #12 Else End AND if() #11 Else End AND if() #10 Else End AND if() #9 Else End AND if() #8 Else End AND if() #7 Else End
RETURNFUNC; Func[int AngleDir8(int)] Body End
SETR d4,SP; Func[int Clamp(int, int, int)] Body Start
LOADD d2,2; if() #20 Test
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 207,==; Test 'if'
LOADD d2,1; if() #20 Body Start
STORED d2,2
GOTO 217; if() #20 Body End
LOADD d2,2; if() #85 Test AND if() #20 Else Start
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 217,==; Test 'if'
LOADD d2,0; if() #85 Body Start
STORED d2,2; if() #85 Body End
LOADD d2,2; if() #20 Else End AND return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
SETR d4,SP; Func[bool ClockIsActive()] Body Start
SETR d2,gd27; return Start
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETCMP d2,I!=
RETURNFUNC; return End AND Func[bool ClockIsActive()] Body End
PUSHARGSV 0,0.0004; Func[int ComboAt(int, int)] Body Start
SETR d4,SP
SETR d2,REGION_ID; if() #29 Test
COMPAREV d2,0
GOTOCMP 288,==; Test 'if'
PUSHR d4; if() #29 Body Start
LOADD d2,5; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
SETR d2,REGION_WIDTH
SUBV d2,1
PUSHR d2
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0312; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,5
PUSHR d4
LOADD d2,4; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
SETR d2,REGION_HEIGHT
SUBV d2,1
PUSHR d2
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0312; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,4
LOADD d2,5; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,256; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,3
LOADD d2,4; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,176; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
SETR d2,REGIONSCREENWIDTH
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
MULTV d2,176
STORED d2,1
LOADD d2,4
MODV d2,176
ANDV d2,240
PUSHR d2
LOADD d2,5
MODV d2,256
RSHIFTV d2,4
POP d3
ADDR d2,d3
STORED d2,0
LOADD d2,1; return Start
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
GOTO 310; return End AND if() #29 Body End
PUSHR d4; if() #29 Else Start
LOADD d2,5; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 255
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0312; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,5
PUSHR d4
LOADD d2,4; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 175
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0312; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,4; return Start
ANDV d2,240
PUSHR d2
LOADD d2,5
RSHIFTV d2,4
POP d3
ADDR d2,d3
POPARGS d5,0.0006; return End AND if() #29 Else End
RETURNFUNC; Func[int ComboAt(int, int)] Body End
SETR d4,SP; Func[int VBound(int, int, int)] Body Start
LOADD d2,2; if() #351 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 324,==; Test 'if'
LOADD d2,0; if() #351 Body Start
STORED d2,2
GOTO 334; if() #351 Body End
LOADD d2,2; if() #581 Test AND if() #351 Else Start
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 334,==; Test 'if'
LOADD d2,1; if() #581 Body Start
STORED d2,2; if() #581 Body End
LOADD d2,2; if() #351 Else End AND return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int VBound(int, int, int)] Body End
PUSHV 0; Func[bool IsWater(int)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP d0
SETR d2,COMBOTD
STORED d2,0; if() #371 Test
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 350,==; Test 'if'
SETV d2,1; return Start AND if() #371 Body Start
GOTO 378; return End AND if() #371 Body End
LOADD d2,0; if() #372 Test
COMPAREV d2,18
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 357,==; Test 'if'
SETV d2,1; return Start AND if() #372 Body Start
GOTO 378; return End AND if() #372 Body End
LOADD d2,0; if() #373 Test
COMPAREV d2,19
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 364,==; Test 'if'
SETV d2,1; return Start AND if() #373 Body Start
GOTO 378; return End AND if() #373 Body End
LOADD d2,0; if() #374 Test
COMPAREV d2,86
GOTOCMP 372,<
LOADD d2,0
COMPAREV d2,91
GOTOCMP 372,>
SETV d2,1
GOTO 373
SETV d2,0
COMPAREV d2,0
GOTOCMP 377,==; Test 'if'
SETV d2,1; return Start AND if() #374 Body Start
GOTO 378; return End AND if() #374 Body End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool IsWater(int)] Body End
SETR d4,SP; Func[bool __IsPit(int)] Body Start
PUSHR d4; return Start
LOADD d2,0; UsrFunc[bool IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool IsPit(int)] Params End
CALLFUNC 0.5569; UsrFunc[bool IsPit(int)] Call
POP d4
POP d5; return End
RETURNFUNC; Func[bool __IsPit(int)] Body End
SETR d4,SP; Func[bool Ghost_CanMove(int, int, int)] Body Start
PUSHR d4; return Start
LOADD d2,2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd4
COMPAREV d2,0
SETCMP d2,I>
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0404; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
POPARGS d5,0.0003; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int)] Body End
SETR d4,SP; Func[bool Ghost_CanMove(int, int, int, bool)] Body Start
LOADD d2,2; if() #241 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 412,==; Test 'if'
SETV d2,1; return Start AND if() #241 Body Start
GOTO 462; return End AND if() #241 Body End
LOADD d2,3; if() #242 Test
COMPAREV d2,4
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 420,==; Test 'if'
LOADD d2,2; if() #242 Body Start
MULTV d2,0.7071
STORED d2,2; if() #242 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.0464; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,3
LOADD d2,2; while() #1 Test
COMPAREV d2,8
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 451,==; Test 'while'
PUSHR d4; unless() #243 Test AND while() #1 Body Start
LOADD d2,3; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
SUBV d2,8
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0537; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 447,!=; Test 'unless'
SETV d2,0; return Start AND unless() #243 Body Start
GOTO 462; return End AND unless() #243 Body End
LOADD d2,2
SUBV d2,8
STORED d2,2; while() #1 Body End
GOTO 426; while() #1 End
PUSHR d4; return Start
LOADD d2,3; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0537; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
POPARGS d5,0.0004; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int, bool)] Body End
SETR d4,SP; Func[int __NormalizeDir(int)] Body Start
LOADD d2,0; if() #701 Test
COMPAREV d2,0
GOTOCMP 473,<
LOADD d2,0
COMPAREV d2,7
GOTOCMP 473,>
SETV d2,1
GOTO 474
SETV d2,0
COMPAREV d2,0
GOTOCMP 478,==; Test 'if'
LOADD d2,0; return Start AND if() #701 Body Start
GOTO 535; return End AND if() #701 Body End
LOADD d2,0; if() #702 Test
COMPAREV d2,8
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 485,==; Test 'if'
SETV d2,0; return Start AND if() #702 Body Start
GOTO 535; return End AND if() #702 Body End
LOADD d2,0; if() #703 Test
COMPAREV d2,9
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 492,==; Test 'if'
SETV d2,5; return Start AND if() #703 Body Start
GOTO 535; return End AND if() #703 Body End
LOADD d2,0; if() #704 Test
COMPAREV d2,10
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 499,==; Test 'if'
SETV d2,3; return Start AND if() #704 Body Start
GOTO 535; return End AND if() #704 Body End
LOADD d2,0; if() #705 Test
COMPAREV d2,11
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 506,==; Test 'if'
SETV d2,7; return Start AND if() #705 Body Start
GOTO 535; return End AND if() #705 Body End
LOADD d2,0; if() #706 Test
COMPAREV d2,12
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 513,==; Test 'if'
SETV d2,1; return Start AND if() #706 Body Start
GOTO 535; return End AND if() #706 Body End
LOADD d2,0; if() #707 Test
COMPAREV d2,13
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 520,==; Test 'if'
SETV d2,6; return Start AND if() #707 Body Start
GOTO 535; return End AND if() #707 Body End
LOADD d2,0; if() #708 Test
COMPAREV d2,14
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 527,==; Test 'if'
SETV d2,2; return Start AND if() #708 Body Start
GOTO 535; return End AND if() #708 Body End
LOADD d2,0; if() #709 Test
COMPAREV d2,15
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 534,==; Test 'if'
SETV d2,4; return Start AND if() #709 Body Start
GOTO 535; return End AND if() #709 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
PUSHARGSV 0,0.0006; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body Start
SETR d4,SP
LOADD d2,9; if() #366 Test
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 661,==; Test 'if'
SETR d2,gd14; if() #366 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #171 setup
STORED d2,5
LOADD d2,5; for() #171 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 619,==; for() #171 TestFail?
PUSHR d4; unless() #610 Test AND for() #171 Body Start
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1313; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 615,!=; Test 'unless'
SETV d2,0; return Start AND unless() #610 Body Start
GOTO 1311; return End AND unless() #610 Body End
LOADD d2,5; for() #171 Body End AND for() #171 LoopIncrement
ADDV d2,1
STORED d2,5
GOTO 589; for() #171 End
PUSHR d4; unless() #611 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1313; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 636,!=; Test 'unless'
SETV d2,0; return Start AND unless() #611 Body Start
GOTO 1311; return End AND unless() #611 Body End
PUSHR d4; unless() #612 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1313; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 659,!=; Test 'unless'
SETV d2,0; return Start AND unless() #612 Body Start
GOTO 1311; return End AND unless() #612 Body End
SETV d2,1; return Start
GOTO 1311; return End AND if() #366 Body End
LOADD d2,9; if() #367 Test AND if() #366 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 794,==; Test 'if'
SETR d2,gd14; if() #367 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd2
PUSHR d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
STORED d2,4
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #172 setup
STORED d2,5
LOADD d2,5; for() #172 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 752,==; for() #172 TestFail?
PUSHR d4; unless() #613 Test AND for() #172 Body Start
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1313; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 748,!=; Test 'unless'
SETV d2,0; return Start AND unless() #613 Body Start
GOTO 1311; return End AND unless() #613 Body End
LOADD d2,5; for() #172 Body End AND for() #172 LoopIncrement
ADDV d2,1
STORED d2,5
GOTO 722; for() #172 End
PUSHR d4; unless() #614 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1313; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 769,!=; Test 'unless'
SETV d2,0; return Start AND unless() #614 Body Start
GOTO 1311; return End AND unless() #614 Body End
PUSHR d4; unless() #615 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1313; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 792,!=; Test 'unless'
SETV d2,0; return Start AND unless() #615 Body Start
GOTO 1311; return End AND unless() #615 Body End
SETV d2,1; return Start
GOTO 1311; return End AND if() #367 Body End
LOADD d2,9; if() #368 Test AND if() #367 Else Start
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 934,==; Test 'if'
PUSHR d4; if() #616 Test AND if() #368 Body Start
CALLFUNC 0.4358; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOCMP 812,==
PUSHR d4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 812,!=
SETV d2,1
GOTO 813
SETV d2,0
COMPAREV d2,0
GOTOCMP 817,==; Test 'if'
SETV d2,0; return Start AND if() #616 Body Start
GOTO 1311; return End AND if() #616 Body End
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #173 setup
STORED d2,5
LOADD d2,5; for() #173 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 892,==; for() #173 TestFail?
PUSHR d4; unless() #617 Test AND for() #173 Body Start
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1313; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 888,!=; Test 'unless'
SETV d2,0; return Start AND unless() #617 Body Start
GOTO 1311; return End AND unless() #617 Body End
LOADD d2,5; for() #173 Body End AND for() #173 LoopIncrement
ADDV d2,1
STORED d2,5
GOTO 862; for() #173 End
PUSHR d4; unless() #618 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1313; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 909,!=; Test 'unless'
SETV d2,0; return Start AND unless() #618 Body Start
GOTO 1311; return End AND unless() #618 Body End
PUSHR d4; unless() #619 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1313; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 932,!=; Test 'unless'
SETV d2,0; return Start AND unless() #619 Body Start
GOTO 1311; return End AND unless() #619 Body End
SETV d2,1; return Start
GOTO 1311; return End AND if() #368 Body End
LOADD d2,9; if() #369 Test AND if() #368 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1067,==; Test 'if'
SETR d2,gd13; if() #369 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
STORED d2,4
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #174 setup
STORED d2,5
LOADD d2,5; for() #174 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 1025,==; for() #174 TestFail?
PUSHR d4; unless() #620 Test AND for() #174 Body Start
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1313; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1021,!=; Test 'unless'
SETV d2,0; return Start AND unless() #620 Body Start
GOTO 1311; return End AND unless() #620 Body End
LOADD d2,5; for() #174 Body End AND for() #174 LoopIncrement
ADDV d2,1
STORED d2,5
GOTO 995; for() #174 End
PUSHR d4; unless() #621 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1313; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1042,!=; Test 'unless'
SETV d2,0; return Start AND unless() #621 Body Start
GOTO 1311; return End AND unless() #621 Body End
PUSHR d4; unless() #622 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1313; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1065,!=; Test 'unless'
SETV d2,0; return Start AND unless() #622 Body Start
GOTO 1311; return End AND unless() #622 Body End
SETV d2,1; return Start
GOTO 1311; return End AND if() #369 Body End
LOADD d2,9; if() #370 Test AND if() #369 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1127,==; Test 'if'
SETR d2,gd2; if() #370 Body Start
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0404; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #623 Test
COMPAREV d2,0
GOTOCMP 1101,!=; Test 'unless'
SETV d2,0; return Start AND unless() #623 Body Start
GOTO 1311; return End AND unless() #623 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0404; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1311; return End AND if() #370 Body End
LOADD d2,9; if() #371 Test AND if() #370 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1188,==; Test 'if'
STOREDV 0,0; if() #371 Body Start
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0404; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #624 Test
COMPAREV d2,0
GOTOCMP 1162,!=; Test 'unless'
SETV d2,0; return Start AND unless() #624 Body Start
GOTO 1311; return End AND unless() #624 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0404; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1311; return End AND if() #371 Body End
LOADD d2,9; if() #372 Test AND if() #371 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1249,==; Test 'if'
STOREDV 0,0; if() #372 Body Start
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0404; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #625 Test
COMPAREV d2,0
GOTOCMP 1223,!=; Test 'unless'
SETV d2,0; return Start AND unless() #625 Body Start
GOTO 1311; return End AND unless() #625 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0404; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1311; return End AND if() #372 Body End
LOADD d2,9; if() #373 Test AND if() #372 Else Start
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1310,==; Test 'if'
STOREDV 0,0; if() #373 Body Start
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0404; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #626 Test
COMPAREV d2,0
GOTOCMP 1284,!=; Test 'unless'
SETV d2,0; return Start AND unless() #626 Body Start
GOTO 1311; return End AND unless() #626 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0404; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1311; return End AND if() #373 Body End
SETV d2,0; return Start AND if() #373 Else Start
POPARGS d5,0.0010; return End AND if() #373 Else End AND if() #372 Else End AND if() #371 Else End AND if() #370 Else End AND if() #369 Else End AND if() #368 Else End AND if() #367 Else End AND if() #366 Else End
RETURNFUNC; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body End
PUSHV 0; Func[bool Ghost_CanMovePixel(int, int, bool)] Body Start
SETR d4,SP
LOADD d2,3; if() #244 Test
COMPAREV d2,0
GOTOCMP 1329,<
LOADD d2,3
COMPAREV d2,255
GOTOCMP 1329,>
LOADD d2,2
COMPAREV d2,0
GOTOCMP 1329,<
LOADD d2,2
COMPAREV d2,175
GOTOCMP 1329,>
SETV d2,0
GOTO 1330
SETV d2,1
COMPAREV d2,0
GOTOCMP 1337,==; Test 'if'
PUSHR d4; return Start AND if() #244 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1531; return End AND if() #244 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0228; UsrFunc[int ComboAt(int, int)] Call
POP d4
STORED d2,0
PUSHR d4; unless() #245 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1442,!=; Test 'unless'
LOADD d2,0; if() #246 Test AND unless() #245 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,110
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1361,==; Test 'if'
SETV d2,0; return Start AND if() #246 Body Start
GOTO 1531; return End AND if() #246 Body End
LOADD d2,0; if() #247 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,96
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1371,==; Test 'if'
SETV d2,0; return Start AND if() #247 Body Start
GOTO 1531; return End AND if() #247 Body End
LOADD d2,0; if() #248 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,96
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1381,==; Test 'if'
SETV d2,0; return Start AND if() #248 Body Start
GOTO 1531; return End AND if() #248 Body End
PUSHR d4; if() #83 Test
PUSHV 65536; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1398,==; Test 'if'
LOADD d2,0; if() #249 Test AND if() #83 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,44
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1442,==; Test 'if'
SETV d2,0; return Start AND if() #249 Body Start
GOTO 1531; return End AND if() #249 Body End
GOTO 1442; if() #83 Body End
LOADD d2,1; if() #84 Test AND if() #83 Else Start
COMPAREV d2,0
GOTOCMP 1412,==; Test 'if'
LOADD d2,0; if() #250 Test AND if() #84 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,54
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1442,==; Test 'if'
SETV d2,0; return Start AND if() #250 Body Start
GOTO 1531; return End AND if() #250 Body End
GOTO 1442; if() #84 Body End
LOADD d2,0; if() #251 Test AND if() #84 Else Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,128
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1422,==; Test 'if'
SETV d2,0; return Start AND if() #251 Body Start
GOTO 1531; return End AND if() #251 Body End
LOADD d2,0; if() #252 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,97
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1432,==; Test 'if'
SETV d2,0; return Start AND if() #252 Body Start
GOTO 1531; return End AND if() #252 Body End
LOADD d2,0; if() #253 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,97
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1442,==; Test 'if'
SETV d2,0; return Start AND if() #253 Body Start
GOTO 1531; return End AND if() #253 Body End
PUSHR d4; if() #84 Else End AND if() #83 Else End AND unless() #245 Body End AND if() #254 Test
PUSHV 65539; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1454,==; Test 'if'
PUSHR d4; return Start AND if() #254 Body Start
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0337; UsrFunc[bool IsWater(int)] Call
POP d4
GOTO 1531; return End AND if() #254 Body End
PUSHR d4; if() #255 Test
PUSHV 65538; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1477,==; Test 'if'
PUSHR d4; return Start AND if() #255 Body Start
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0337; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1475,!=
LOADD d2,0
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,58
GOTOCMP 1475,==
SETV d2,0
GOTO 1531
SETV d2,1
GOTO 1531; return End AND if() #255 Body End
PUSHR d4; if() #256 Test
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0337; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1489,==; Test 'if'
PUSHR d4; return Start AND if() #256 Body Start
PUSHV 2048; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1531; return End AND if() #256 Body End
PUSHR d4; if() #257 Test
LOADD d2,0; UsrFunc[bool __IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool __IsPit(int)] Params End
CALLFUNC 0.0380; UsrFunc[bool __IsPit(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1501,==; Test 'if'
PUSHR d4; return Start AND if() #257 Body Start
PUSHV 4096; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1531; return End AND if() #257 Body End
PUSHR d4; if() #85 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1509,==; Test 'if'
SETV d2,1; return Start AND if() #85 Body Start
GOTO 1531; return End AND if() #85 Body End
PUSHR d4; if() #86 Test AND if() #85 Else Start
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1523,==; Test 'if'
PUSHR d4; return Start AND if() #86 Body Start
LOADD d2,3; UsrFunc[bool __FullTileWalkable(int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[bool __FullTileWalkable(int, int)] Params End
CALLFUNC 0.1564; UsrFunc[bool __FullTileWalkable(int, int)] Call
POP d4
GOTO 1531; return End AND if() #86 Body End
LOADD d2,3; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND return Start AND if() #86 Else Start
PUSHR d2
LOADD d2,2
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,I==
POPARGS d5,0.0004; return End AND if() #86 Else End AND if() #85 Else End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int, bool)] Body End
SETR d4,SP; Func[bool Ghost_FlagIsSet(int)] Body Start
LOADD d2,0; if() #119 Test
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1552,==; Test 'if'
SETR d2,gd17; return Start AND if() #119 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETCMP d2,I!=
GOTO 1562; return End AND if() #119 Body End
SETR d2,gd16; return Start AND if() #119 Else Start
PUSHR d2
LOADD d2,0
POP d3
ANDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I==
POP d5; return End AND if() #119 Else End
RETURNFUNC; Func[bool Ghost_FlagIsSet(int)] Body End
SETR d4,SP; Func[bool __FullTileWalkable(int, int)] Body Start
LOADD d2,1; if() #600 Test
COMPAREV d2,0
GOTOCMP 1579,<
LOADD d2,0
COMPAREV d2,0
GOTOCMP 1579,<
LOADD d2,1
COMPAREV d2,256
GOTOCMP 1579,>=
LOADD d2,0
COMPAREV d2,176
GOTOCMP 1579,>=
SETV d2,0
GOTO 1580
SETV d2,1
COMPAREV d2,0
GOTOCMP 1587,==; Test 'if'
PUSHR d4; return Start AND if() #600 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1647; return End AND if() #600 Body End
LOADD d2,1
PUSHR d2
LOADD d2,1
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
LOADD d2,0
PUSHR d2
LOADD d2,0
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #601 Test
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOCMP 1641,!=
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOCMP 1641,!=
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOCMP 1641,!=
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOCMP 1641,!=
SETV d2,0
GOTO 1642
SETV d2,1
COMPAREV d2,0
GOTOCMP 1646,==; Test 'if'
SETV d2,0; return Start AND if() #601 Body Start
GOTO 1647; return End AND if() #601 Body End
SETV d2,1; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool __FullTileWalkable(int, int)] Body End
PUSHARGSV 0,0.0004; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body Start
SETR d4,SP
PUSHR d4; if() #258 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1662,==
PUSHR d4
CALLFUNC 0.0220; UsrFunc[bool ClockIsActive()] Call
POP d4
COMPAREV d2,0
GOTOCMP 1676,!=
PUSHR d4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1674,==
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
GOTOCMP 1676,>
SETV d2,0
GOTO 1677
SETV d2,1
COMPAREV d2,0
GOTOCMP 1905,==; Test 'if'
LOADD d2,5; if() #258 Body Start
PUSHR d2
POP REFFFC
SETR d2,XD
STORED d2,3
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,YD
STORED d2,2
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,XD2
STORED d2,1
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,YD2
STORED d2,0
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETR d2,gd18
ORV d2,2
SETR gd18,d2
PUSHR d4; while() #2 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1749,==
PUSHR d4
CALLFUNC 0.0220; UsrFunc[bool ClockIsActive()] Call
POP d4
COMPAREV d2,0
GOTOCMP 1763,!=
PUSHR d4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1761,==
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
GOTOCMP 1763,>
SETV d2,0
GOTO 1764
SETV d2,1
COMPAREV d2,0
GOTOCMP 1869,==; Test 'while'
PUSHR d4; while() #2 Body Start
LOADD d2,5; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
CALLFUNC 0.1908; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
CALLFUNC 0.1992; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2153; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND unless() #87 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOCMP 1790,!=; Test 'unless'
SETV d2,0; return Start AND unless() #87 Body Start
GOTO 1906; return End
GOTO 1800; unless() #87 Body End
LOADD d2,4; if() #259 Test AND unless() #87 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 1800,==; Test 'if'
SETV d2,0; return Start AND if() #259 Body Start
GOTO 1906; return End AND if() #259 Body End
PUSHR d4; unless() #87 Else End
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2550; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1829,==; Test 'if'
SETR d2,gd11; if() #88 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0464; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 1861; if() #88 Body End
PUSHR d4; if() #89 Test AND if() #88 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 1852,==; Test 'if'
SETR d2,gd11; if() #89 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0464; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 1861; if() #89 Body End
SETR d2,gd11; if() #89 Else Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #89 Else End
PUSHR d4; if() #88 Else End
LOADD d2,5; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
CALLFUNC 0.2684; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
POP d4; while() #2 Body End
GOTO 1738; while() #2 End
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
LOADD d2,2
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
LOADD d2,1
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
LOADD d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2; if() #258 Body End
SETV d2,1; return Start
POPARGS d5,0.0006; return End
RETURNFUNC; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body End
PUSHV 0; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body Start
SETR d4,SP
SETR d2,gd21; if() #667 Test
COMPAREV d2,1
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 1925,==; Test 'if'
SETR d2,gd21; if() #667 Body Start
SUBV d2,1
SETR gd21,d2
SETR d2,gd21; if() #668 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1925,==; Test 'if'
SETV d2,1; if() #668 Body Start
STORED d2,0; if() #668 Body End
SETR d2,gd18; if() #667 Body End AND if() #669 Test
ANDV d2,8
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1990,==; Test 'if'
SETR d2,gd21; if() #402 Test AND if() #669 Body Start
COMPAREV d2,0
GOTOCMP 1936,<=
SETV d2,1
GOTO 1937
SETV d2,0
COMPAREV d2,0
GOTOCMP 1954,==; Test 'if'
SETR d2,gd27; if() #402 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
RSHIFTV d2,1
SUBV2 9,d2
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 1990; if() #402 Body End
LOADD d2,1; if() #403 Test AND if() #402 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,64
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1978,==; Test 'if'
SETR d2,gd27; if() #403 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
ANDV d2,3
ADDV d2,6
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 1990; if() #403 Body End
LOADD d2,0; if() #670 Test AND if() #403 Else Start
COMPAREV d2,0
GOTOCMP 1990,==; Test 'if'
SETR d2,gd12; if() #670 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #670 Body End
POPARGS d5,0.0003; if() #403 Else End AND if() #402 Else End AND if() #669 Body End
RETURNFUNC; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body End
PUSHARGSV 0,0.0004; Func[void __Ghost_DrawShadow(NPC)] Body Start
SETR d4,SP
SETR d2,gd4; if() #627 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2151,!=; Test 'if' AND return (Void) AND if() #627 Body
PUSHR d4; unless() #628 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2019,!=
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCEXTEND
COMPAREV d2,4
GOTOCMP 2019,==
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCTYPE
COMPAREV d2,40
GOTOCMP 2019,==
SETV d2,0
GOTO 2020
SETV d2,1
COMPAREV d2,0
GOTOCMP 2151,==; Test 'unless' AND return (Void) AND unless() #628 Body
SETR d2,gd13; if() #374 Test
COMPAREV d2,3
GOTOCMP 2030,<
SETR d2,gd14
COMPAREV d2,3
GOTOCMP 2030,<
SETV d2,0
GOTO 2031
SETV d2,1
COMPAREV d2,0
GOTOCMP 2079,==; Test 'if'
SETR d2,gd2; if() #374 Body Start
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
SETV d2,1
STORED d2,0
PUSHR d4; if() #375 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2072,==; Test 'if'
SETV d2,27400; if() #375 Body Start
STORED d2,1
GOTO 2133; if() #375 Body End
SETR d2,gd27; if() #375 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
STORED d2,1; if() #375 Else End
GOTO 2133; if() #374 Body End
SETR d2,gd2; if() #374 Else Start
PUSHR d2
SETR d2,gd13
SUBV d2,2
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,2
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
SETV d2,2
STORED d2,0
PUSHR d4; if() #376 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2118,==; Test 'if'
SETV d2,27392; if() #376 Body Start
STORED d2,1
GOTO 2133; if() #376 Body End
SETR d2,gd27; if() #376 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,4
MULTV d2,2
SETV d2,2
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
POP d3
MULTR d2,d3
ADDV d2,27392
STORED d2,1; if() #376 Else End
PUSHV 1; if() #374 Else End AND InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #377 [Opt:AlwaysOn]
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_DrawShadow(NPC)] Body End
PUSHARGSV 0,0.0004; Func[void Ghost_WaitframeLight(FFC, NPC)] Body Start
SETR d4,SP
ALLOCATEMEMV d2,24
STORED d2,2
SETR d0,d2
PUSHR d0
SETR d2,gd2
POP d0
WRITEPODARRAYVR 0,d2
PUSHR d0
SETR d2,gd3
POP d0
WRITEPODARRAYVR 1,d2
PUSHR d0
SETR d2,gd4
POP d0
WRITEPODARRAYVR 2,d2
PUSHR d0
SETR d2,gd6
POP d0
WRITEPODARRAYVR 3,d2
PUSHR d0
SETR d2,gd7
POP d0
WRITEPODARRAYVR 4,d2
PUSHR d0
SETR d2,gd8
POP d0
WRITEPODARRAYVR 5,d2
PUSHR d0
SETR d2,gd9
POP d0
WRITEPODARRAYVR 6,d2
PUSHR d0
SETR d2,gd10
POP d0
WRITEPODARRAYVR 7,d2
PUSHR d0
SETR d2,gd19
POP d0
WRITEPODARRAYVR 8,d2
PUSHR d0
SETR d2,gd20
POP d0
WRITEPODARRAYVR 9,d2
PUSHR d0
SETR d2,gd12
POP d0
WRITEPODARRAYVR 10,d2
PUSHR d0
SETR d2,gd5
POP d0
WRITEPODARRAYVR 11,d2
PUSHR d0
SETR d2,gd11
POP d0
WRITEPODARRAYVR 12,d2
PUSHR d0
SETR d2,gd13
POP d0
WRITEPODARRAYVR 13,d2
PUSHR d0
SETR d2,gd14
POP d0
WRITEPODARRAYVR 14,d2
PUSHR d0
SETR d2,gd16
POP d0
WRITEPODARRAYVR 15,d2
PUSHR d0
SETR d2,gd17
POP d0
WRITEPODARRAYVR 16,d2
PUSHR d0
SETR d2,gd18
POP d0
WRITEPODARRAYVR 17,d2
PUSHR d0
SETR d2,gd21
POP d0
WRITEPODARRAYVR 18,d2
PUSHR d0
SETR d2,gd22
POP d0
WRITEPODARRAYVR 19,d2
PUSHR d0
SETR d2,gd15
POP d0
WRITEPODARRAYVR 20,d2
PUSHR d0
SETR d2,gd23
POP d0
WRITEPODARRAYVR 21,d2
PUSHR d0
SETR d2,gd24
POP d0
WRITEPODARRAYVR 22,d2
ALLOCATEMEMV d2,21
STORED d2,1
SETR d2,gd26; if() #355 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2282,==; Test 'if'
LOADD d2,0; for() #67 LoopTest AND if() #355 Body Start
COMPAREV d2,21
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2282,==; for() #67 TestFail?
SETR d2,gd26; for() #67 Body Start
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #67 Body End
LOADD d2,0; for() #67 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 2260; for() #67 End
LOADD d2,4; if() #355 Body End AND InlineFunc[bool NPC->isValid()] Params AND if() #356 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOCMP 2299,==; Test 'if'
LOADD d2,2; if() #356 Body Start
ORV d2,65536
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #356 Body End
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND if() #168 Test AND do-while() #2 Body Start
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOCMP 2361,==; Test 'if'
SETR d2,gd26; if() #170 Test AND if(true) #169 [Opt:AlwaysOn] AND if() #168 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2336,==; Test 'if'
ALLOCATEMEMV d2,34; if() #170 Body Start
STORED d2,0
PUSHR d4
LOADD d2,5; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
CALLFUNC 0.5268; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
LOADD d2,2
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5541; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOADD d3,0
DEALLOCATEMEMR d3
GOTO 2366; if() #170 Body End
ALLOCATEMEMV d2,10; if() #170 Else Start
STORED d2,0
PUSHR d4
LOADD d2,5; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
CALLFUNC 0.5268; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
LOADD d2,2
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5541; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOADD d3,0
DEALLOCATEMEMR d3; if() #170 Else End
GOTO 2366; if() #168 Body End
PUSHR d4; if() #168 Else Start
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5541; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4; if() #168 Else End
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,0
SETR gd2,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,1
SETR gd3,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,2
SETR gd4,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,3
SETR gd6,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,4
SETR gd7,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,5
SETR gd8,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,6
SETR gd9,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,7
SETR gd10,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,8
SETR gd19,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,9
SETR gd20,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,10
SETR gd12,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,11
SETR gd5,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,12
SETR gd11,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,13
SETR gd13,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,14
SETR gd14,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,15
SETR gd16,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,16
SETR gd17,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,17
SETR gd18,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,18
SETR gd21,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,19
SETR gd22,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,20
SETR gd15,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,21
SETR gd23,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,22
SETR gd24,d2
LOADD d2,1; if() #171 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2513,==; Test 'if'
STOREDV 0,0; for() #68 setup AND if() #171 Body Start
LOADD d2,0; for() #68 LoopTest
COMPAREV d2,21
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2519,==; for() #68 TestFail?
LOADD d2,1; for() #68 Body Start
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #68 Body End
LOADD d2,0; for() #68 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 2490; for() #68 End
GOTO 2519; if() #171 Body End
SETV d2,0; if() #171 Else Start
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #171 Else End
SETR d2,gd27; do-while() #2 Body End AND do-while() #2 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 2299,!=; Test 'while'
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND if() #357 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOCMP 2544,==; Test 'if'
SETV d2,65536; if() #357 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #357 Body End
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
POPARGS d5,0.0006
RETURNFUNC; Func[void Ghost_WaitframeLight(FFC, NPC)] Body End
SETR d4,SP; Func[void Ghost_SetPosition(FFC, NPC)] Body Start
LOADD d2,0; InlineFunc[bool NPC->isValid()] Params AND unless() #324 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOCMP 2682,==; Test 'unless' AND return (Void) AND unless() #324 Body
PUSHR d4; if() #162 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2563,!=
SETV d2,1
GOTO 2564
SETV d2,0
COMPAREV d2,0
GOTOCMP 2594,==; Test 'if'
SETR d2,gd2; if() #162 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
GOTO 2626; if() #162 Body End
SETR d2,gd2; if() #162 Else Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2; if() #162 Else End
PUSHR d4
SETR d2,gd2; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
PUSHR d2
PUSHV -64
PUSHV 256; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0195; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
SETR d2,gd3; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
SUBR d3,d2
PUSHR d3
PUSHV -64
PUSHV 176; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0195; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void Ghost_SetPosition(FFC, NPC)] Body End
PUSHARGSV 0,0.0005; Func[void Ghost_CheckHit(FFC, NPC)] Body Start
SETR d4,SP
LOADD d2,5; if() #260 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
PUSHR d2
SETR d2,gd15
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2853,==; Test 'if'
SETR d2,gd18; if() #260 Body Start
ORV d2,1
SETR gd18,d2
LOADD d2,5
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETR d2,gd21; if() #261 Test
COMPAREV d2,32
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2712,==; Test 'if'
SETV d2,32; if() #261 Body Start
SETR gd21,d2; if() #261 Body End
PUSHR d4; if() #262 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2853,==; Test 'if'
SETR d2,LINKX; if() #262 Body Start
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,LINKY
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
LOADD d2,4; InlineFunc[int Abs(int)] Params AND if() #90 Test
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd13
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
GOTOCMP 2752,>=
LOADD d2,3; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd14
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
GOTOCMP 2752,>=
SETV d2,1
GOTO 2753
SETV d2,0
COMPAREV d2,0
GOTOCMP 2782,==; Test 'if'
SETR d2,LINKDIR; if() #263 Test AND if() #90 Body Start
ANDV d2,2
PUSHR d2
SETR d2,gd5
ANDV d2,2
POP d3
COMPARER d3,d2
GOTOCMP 2774,==
SETR d2,gd5
COMPAREV d2,3
GOTOCMP 2774,>
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2774,!=
SETV d2,0
GOTO 2775
SETV d2,1
COMPAREV d2,0
GOTOCMP 2853,==; Test 'if'
SETR d2,LINKDIR; if() #263 Body Start
LSHIFTV d2,12
ORV d2,16
SETR gd22,d2; if() #263 Body End
GOTO 2853; if() #90 Body End
LOADD d2,4; InlineFunc[int Abs(int)] Params AND if() #91 Test AND if() #90 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,3; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2823,==; Test 'if'
SETR d2,gd5; if() #264 Test AND if() #91 Body Start
COMPAREV d2,0
GOTOCMP 2809,==
SETR d2,gd5
COMPAREV d2,1
GOTOCMP 2809,==
SETR d2,gd5
COMPAREV d2,3
GOTOCMP 2809,>
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2809,!=
SETV d2,0
GOTO 2810
SETV d2,1
COMPAREV d2,0
GOTOCMP 2853,==; Test 'if'
LOADD d2,3; if() #92 Test AND if() #264 Body Start
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2820,==; Test 'if'
SETV d2,16; if() #92 Body Start
SETR gd22,d2
GOTO 2853; if() #92 Body End
SETV d2,4112; if() #92 Else Start
SETR gd22,d2; if() #92 Else End
GOTO 2853; if() #264 Body End AND if() #91 Body End
SETR d2,gd5; if() #265 Test AND if() #91 Else Start
COMPAREV d2,2
GOTOCMP 2840,==
SETR d2,gd5
COMPAREV d2,3
GOTOCMP 2840,==
SETR d2,gd5
COMPAREV d2,3
GOTOCMP 2840,>
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2840,!=
SETV d2,0
GOTO 2841
SETV d2,1
COMPAREV d2,0
GOTOCMP 2853,==; Test 'if'
LOADD d2,4; if() #93 Test AND if() #265 Body Start
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2851,==; Test 'if'
SETV d2,8208; if() #93 Body Start
SETR gd22,d2
GOTO 2853; if() #93 Body End
SETV d2,12304; if() #93 Else Start
SETR gd22,d2; if() #93 Else End
SETR d2,gd22; if() #265 Body End AND if() #91 Else End AND if() #90 Else End AND if() #262 Body End AND if() #260 Body End AND if() #266 Test
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3077,==; Test 'if'
SETR d2,gd22; if() #266 Body Start
RSHIFTV d2,12
STORED d2,4
SETR d2,gd22
ANDV d2,4095
STORED d2,3
STOREDV 4,2
PUSHR d4; if() #267 Test
PUSHV 5; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2874,==; Test 'if'
LOADD d2,2; if() #267 Body Start
DIVV d2,2
STORED d2,2; if() #267 Body End
PUSHR d4; if() #94 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0388; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 2979,==; Test 'if'
LOADD d2,3; if() #94 Body Start
SUBV d2,1
STORED d2,3; if() #95 Test
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2899,==; Test 'if'
LOADD d2,4; if() #95 Body Start
LSHIFTV d2,12
PUSHR d2
LOADD d2,3
POP d3
ORR d2,d3
SETR gd22,d2
GOTO 2901; if() #95 Body End
SETV d2,0; if() #95 Else Start
SETR gd22,d2; if() #95 Else End
LOADD d2,4; if() #96 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2910,==; Test 'if'
LOADD d2,2; if() #96 Body Start
SUBV2 0,d2
STORED d2,0
GOTO 2929; if() #96 Body End
LOADD d2,4; if() #97 Test AND if() #96 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2918,==; Test 'if'
LOADD d2,2; if() #97 Body Start
STORED d2,0
GOTO 2929; if() #97 Body End
LOADD d2,4; if() #98 Test AND if() #97 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2927,==; Test 'if'
LOADD d2,2; if() #98 Body Start
SUBV2 0,d2
STORED d2,1
GOTO 2929; if() #98 Body End
LOADD d2,2; if() #98 Else Start
STORED d2,1; if() #98 Else End
LOADD d2,1; if() #97 Else End AND if() #96 Else End AND if() #99 Test
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 2954,==; Test 'if'
SETR d2,gd2; if() #99 Body Start
PUSHR d2
LOADD d2,1
POP d3
ADDR d2,d3
SETR gd2,d2
SETR d2,gd19
PUSHR d2
LOADD d2,1
POP d3
ADDR d2,d3
SETR gd19,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2550; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 3077; if() #99 Body End
LOADD d2,0; if() #268 Test AND if() #99 Else Start
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3077,==; Test 'if'
SETR d2,gd3; if() #268 Body Start
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
SETR gd3,d2
SETR d2,gd20
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
SETR gd20,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2550; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #268 Body End
GOTO 3077; if() #99 Else End AND if() #94 Body End
STOREDV -1,1; if() #94 Else Start
STOREDV -1,0
SETV d2,0
SETR gd22,d2
SETR d2,gd18
ORV d2,16
SETR gd18,d2
LOADD d2,4; if() #100 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2997,==; Test 'if'
SETR d2,gd3; InlineFunc[untyped Floor(untyped)] Params Start AND if() #100 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORED d2,0
GOTO 3026; if() #100 Body End
LOADD d2,4; if() #101 Test AND if() #100 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3009,==; Test 'if'
SETR d2,gd3; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #101 Body Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORED d2,0
GOTO 3026; if() #101 Body End
LOADD d2,4; if() #102 Test AND if() #101 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3020,==; Test 'if'
SETR d2,gd2; InlineFunc[untyped Floor(untyped)] Params Start AND if() #102 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORED d2,1
GOTO 3026; if() #102 Body End
SETR d2,gd2; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #102 Else Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORED d2,1; if() #102 Else End
LOADD d2,1; if() #101 Else End AND if() #100 Else End AND if() #103 Test
COMPAREV d2,-1
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3052,==; Test 'if'
SETR d2,gd19; if() #103 Body Start
PUSHR d2
LOADD d2,1
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd19,d2
LOADD d2,1
SETR gd2,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2550; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 3077; if() #103 Body End
LOADD d2,0; if() #269 Test AND if() #103 Else Start
COMPAREV d2,-1
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3077,==; Test 'if'
SETR d2,gd20; if() #269 Body Start
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd20,d2
LOADD d2,0
SETR gd3,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2550; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #269 Body End
POPARGS d5,0.0007; if() #103 Else End AND if() #94 Else End AND if() #266 Body End
RETURNFUNC; Func[void Ghost_CheckHit(FFC, NPC)] Body End
SETR d4,SP; Func[void Ghost_ClearCombos()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
RETURNFUNC; Func[void Ghost_ClearCombos()] Body End
SETR d4,SP; Func[void Ghost_SetFlag(int)] Body Start
LOADD d2,0; if() #161 Test
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3105,==; Test 'if'
SETR d2,gd17; if() #161 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ORR d2,d3
SETR gd17,d2
GOTO 3111; if() #161 Body End
SETR d2,gd16; if() #161 Else Start
PUSHR d2
LOADD d2,0
POP d3
ORR d2,d3
SETR gd16,d2; if() #161 Else End
POP d5
RETURNFUNC; Func[void Ghost_SetFlag(int)] Body End
SETR d4,SP; Func[void Ghost_UnsetFlag(int)] Body Start
LOADD d2,0; if() #163 Test
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3131,==; Test 'if'
SETR d2,gd17; if() #163 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,-2
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
SETR gd17,d2
GOTO 3138; if() #163 Body End
SETR d2,gd16; if() #163 Else Start
PUSHR d2
LOADD d2,0
BITNOT d2
POP d3
ANDR d2,d3
SETR gd16,d2; if() #163 Else End
POP d5
RETURNFUNC; Func[void Ghost_UnsetFlag(int)] Body End
PUSHARGSV 0,0.0004; Func[void Ghost_MoveXY(int, int, int)] Body Start
SETR d4,SP
LOADD d2,5; if() #316 Test
COMPAREV d2,0
GOTOCMP 3158,>=
PUSHR d4
CALLFUNC 0.4358; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOCMP 3158,==
PUSHR d4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3158,!=
SETV d2,1
GOTO 3159
SETV d2,0
COMPAREV d2,0
GOTOCMP 3163,==; Test 'if'
SETV d2,0; if() #316 Body Start
STORED d2,5; if() #316 Body End
LOADD d2,6; while() #3 Test AND InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
GOTOCMP 3173,>
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
GOTOCMP 3173,>
SETV d2,0
GOTO 3174
SETV d2,1
COMPAREV d2,0
GOTOCMP 3240,==; Test 'while'
LOADD d2,6; InlineFunc[int Abs(int)] Params AND if() #144 Test AND while() #3 Body Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 3213,==; Test 'if'
LOADD d2,6; if() #145 Test AND if() #144 Body Start
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 3202,==; Test 'if'
PUSHR d4; if() #145 Body Start
PUSHV 8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3140; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,6
SUBV d2,8
STORED d2,6
GOTO 3163; if() #145 Body End
PUSHR d4; if() #145 Else Start
PUSHV -8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3140; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,6
ADDV d2,8
STORED d2,6; if() #145 Else End
GOTO 3163; if() #144 Body End
LOADD d2,5; if() #146 Test AND if() #144 Else Start
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 3229,==; Test 'if'
PUSHR d4; if() #146 Body Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 8
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3140; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,5
SUBV d2,8
STORED d2,5
GOTO 3163; if() #146 Body End
PUSHR d4; if() #146 Else Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV -8
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3140; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,5
ADDV d2,8
STORED d2,5; if() #146 Else End
GOTO 3163; if() #144 Else End AND while() #3 Body End AND while() #3 End
LOADD d2,6; if() #147 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3310,==; Test 'if'
SETR d2,gd23; if() #147 Body Start
RSHIFTV d2,8
STORED d2,2
SETR d2,gd2
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #148 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3280,==; Test 'if'
LOADD d2,3; if() #148 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3302; if() #148 Body End
PUSHR d4; if() #149 Test AND if() #148 Else Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,6
SUBV2 0,d2
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0388; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3298,==; Test 'if'
LOADD d2,3; if() #149 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3302; if() #149 Body End
LOADD d2,3; if() #149 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORED d2,3; if() #149 Else End
LOADD d2,3; if() #148 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
GOTO 3392; if() #147 Body End
LOADD d2,6; if() #317 Test AND if() #147 Else Start
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 3392,==; Test 'if'
SETR d2,gd13; if() #317 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORED d2,2
SETR d2,gd2
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #150 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3362,==; Test 'if'
LOADD d2,3; if() #150 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3385; if() #150 Body End
PUSHR d4; if() #151 Test AND if() #150 Else Start
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,6
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0388; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3379,==; Test 'if'
LOADD d2,3; if() #151 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3385; if() #151 Body End
LOADD d2,3; if() #151 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORED d2,3; if() #151 Else End
LOADD d2,3; if() #150 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2; if() #317 Body End
LOADD d2,5; if() #147 Else End AND if() #152 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3462,==; Test 'if'
SETR d2,gd24; if() #152 Body Start
RSHIFTV d2,8
STORED d2,2
SETR d2,gd3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #153 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3432,==; Test 'if'
LOADD d2,3; if() #153 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3454; if() #153 Body End
PUSHR d4; if() #154 Test AND if() #153 Else Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,5
SUBV2 0,d2
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0388; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3450,==; Test 'if'
LOADD d2,3; if() #154 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3454; if() #154 Body End
LOADD d2,3; if() #154 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORED d2,3; if() #154 Else End
LOADD d2,3; if() #153 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
GOTO 3544; if() #152 Body End
LOADD d2,5; if() #318 Test AND if() #152 Else Start
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 3544,==; Test 'if'
SETR d2,gd14; if() #318 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORED d2,2
SETR d2,gd3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #155 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3514,==; Test 'if'
LOADD d2,3; if() #155 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3537; if() #155 Body End
PUSHR d4; if() #156 Test AND if() #155 Else Start
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,5
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0388; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3531,==; Test 'if'
LOADD d2,3; if() #156 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3537; if() #156 Body End
LOADD d2,3; if() #156 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORED d2,3; if() #156 Else End
LOADD d2,3; if() #155 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2; if() #318 Body End
PUSHR d4; if() #152 Else End AND if() #319 Test
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3556,==
SETR d2,gd18
ANDV d2,4
COMPAREV d2,0
GOTOCMP 3556,!=
SETV d2,1
GOTO 3557
SETV d2,0
COMPAREV d2,0
GOTOCMP 3614,==; Test 'if'
PUSHR d4; if() #157 Test AND if() #319 Body Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 3579,==; Test 'if'
PUSHR d4; if() #157 Body Start
LOADD d2,6; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOADD d2,5
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0100; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 3610; if() #157 Body End
LOADD d2,6; InlineFunc[int Abs(int)] Params AND if() #158 Test AND if() #157 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3600,==; Test 'if'
LOADD d2,5; if() #159 Test AND if() #158 Body Start
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3597,==; Test 'if'
SETV d2,0; if() #159 Body Start
SETR gd5,d2
GOTO 3610; if() #159 Body End
SETV d2,1; if() #159 Else Start
SETR gd5,d2; if() #159 Else End
GOTO 3610; if() #158 Body End
LOADD d2,6; if() #160 Test AND if() #158 Else Start
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3608,==; Test 'if'
SETV d2,2; if() #160 Body Start
SETR gd5,d2
GOTO 3610; if() #160 Body End
SETV d2,3; if() #160 Else Start
SETR gd5,d2; if() #160 Else End
SETR d2,gd2; if() #158 Else End AND if() #157 Else End
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2; if() #319 Body End
POPARGS d5,0.0007
RETURNFUNC; Func[void Ghost_MoveXY(int, int, int)] Body End
PUSHV 0; Func[void __GhCleanUp(FFC)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
SETV d2,16
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCWIDTH,d2
SETV d2,16
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCHEIGHT,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DELAY,d2
LOADD d2,0; for() #170 LoopTest
COMPAREV d2,11
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3747,==; for() #170 TestFail?
SETV d2,0; for() #170 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
LOADD d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; for() #170 Body End
LOADD d2,0; for() #170 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 3726; for() #170 End
POPARGS d5,0.0002
RETURNFUNC; Func[void __GhCleanUp(FFC)] Body End
SETR d4,SP; Func[void Ghost_ForceDir(int)] Body Start
LOADD d2,0
SETR gd5,d2
SETR d2,gd18
ORV d2,4
SETR gd18,d2
POP d5
RETURNFUNC; Func[void Ghost_ForceDir(int)] Body End
PUSHARGSV 0,0.0002; Func[void Ghost_Move(int, int, int)] Body Start
SETR d4,SP
LOADD d2,4; if() #136 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3768,==; Test 'if'
LOADD d2,3; if() #136 Body Start
SUBV2 0,d2
STORED d2,0
GOTO 3846; if() #136 Body End
LOADD d2,4; if() #137 Test AND if() #136 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3776,==; Test 'if'
LOADD d2,3; if() #137 Body Start
STORED d2,0
GOTO 3846; if() #137 Body End
LOADD d2,4; if() #138 Test AND if() #137 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3785,==; Test 'if'
LOADD d2,3; if() #138 Body Start
SUBV2 0,d2
STORED d2,1
GOTO 3846; if() #138 Body End
LOADD d2,4; if() #139 Test AND if() #138 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3793,==; Test 'if'
LOADD d2,3; if() #139 Body Start
STORED d2,1
GOTO 3846; if() #139 Body End
LOADD d2,4; if() #140 Test AND if() #139 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3807,==; Test 'if'
LOADD d2,3; if() #140 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,0
GOTO 3846; if() #140 Body End
LOADD d2,4; if() #141 Test AND if() #140 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3820,==; Test 'if'
LOADD d2,3; if() #141 Body Start
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,0
GOTO 3846; if() #141 Body End
LOADD d2,4; if() #142 Test AND if() #141 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3833,==; Test 'if'
LOADD d2,3; if() #142 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
MULTV d2,0.7071
STORED d2,0
GOTO 3846; if() #142 Body End
LOADD d2,4; if() #143 Test AND if() #142 Else Start
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3855,==; Test 'if'
LOADD d2,3; if() #143 Body Start
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
MULTV d2,0.7071
STORED d2,0
GOTO 3846; if() #143 Body End
GOTO 3855; return (Void) AND if() #143 Else
PUSHR d4; if() #142 Else End AND if() #141 Else End AND if() #140 Else End AND if() #139 Else End AND if() #138 Else End AND if() #137 Else End AND if() #136 Else End
LOADD d2,1; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3140; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0005
RETURNFUNC; Func[void Ghost_Move(int, int, int)] Body End
SETR d4,SP; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body Start
LOADD d2,1; if() #634 Test
COMPAREV d2,-1
GOTOCMP 3866,==
LOADD d2,1
COMPAREV d2,-2
GOTOCMP 3866,==
SETV d2,0
GOTO 3867
SETV d2,1
COMPAREV d2,0
GOTOCMP 3871,==; Test 'if'
SETV d2,1; if() #634 Body Start
STORED d2,1; if() #634 Body End
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,1
SETR gd11,d2
LOADD d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
LOADD d2,0
SETR gd12,d2
LOADD d2,2; if() #380 Test
COMPAREV d2,0
GOTOCMP 3917,==; Test 'if'
LOADD d2,3; if() #380 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCX
SETR gd2,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCY
SETR gd3,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCZ
SETR gd4,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCJUMP
SETR gd6,d2
GOTO 3949; if() #380 Body End
LOADD d2,4; if() #380 Else Start
PUSHR d2
POP REFFFC
SETR d2,X
SETR gd2,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,Y
SETR gd3,d2
SETV d2,0
SETR gd4,d2
SETV d2,0
SETR gd6,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2; if() #380 Else End
PUSHR d4
LOADD d2,4; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2550; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
SETV d2,0
SETR gd7,d2
SETV d2,0
SETR gd8,d2
SETV d2,0
SETR gd9,d2
SETV d2,0
SETR gd10,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
SETR gd13,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
SETR gd14,d2
SETV d2,0
SETR gd23,d2
SETV d2,0
SETR gd24,d2
LOADD d2,1; if() #635 Test
COMPAREV d2,1
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4067,==; Test 'if'
SETV d2,3; if(true) #381 [Opt:AlwaysOn] AND if() #635 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,65456
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCOTILE,d2
SETV d2,65456; if(true) #636 [Opt:AlwaysOn]
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTILE,d2
SETR d2,gd13
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd14
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2; if() #635 Body End
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
LOADD d2,3; if() #382 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,32
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4098,==; Test 'if'
SETV d2,1; if() #382 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 4110; if() #382 Body End
SETV d2,0; if() #382 Else Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #382 Else End
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETV d2,0
SETR gd16,d2
SETV d2,0
SETR gd17,d2
SETV d2,0
SETR gd21,d2
SETV d2,0
SETR gd22,d2
SETV d2,0
SETR gd18,d2
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,65536
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body End
PUSHARGSV 0,0.0008; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body Start
SETR d4,SP
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #55 setup
STORED d2,5
LOADD d2,5; for() #55 LoopTest
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 4243,==; for() #55 TestFail?
LOADD d2,5; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #55 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,7; if() #134 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOADD d2,8
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4173,==; Test 'if'
SETV d2,0; if() #134 Body Start
STORED d2,6
GOTO 4239; continue 1;
GOTO 4175; if() #134 Body End
SETV d2,1; if() #134 Else Start
STORED d2,6; if() #134 Else End
LOADD d2,7; if() #308 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4190,==; Test 'if'
SETV d2,0; if() #308 Body Start
STORED d2,6
GOTO 4239; continue 1; AND if() #308 Body End
LOADD d2,6; if() #135 Test
COMPAREV d2,0
GOTOCMP 4243,==; Test 'if'
PUSHR d4; if() #135 Body Start
LOADD d2,9; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
PUSHV 1
LOADD d2,7
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
PUSHR NPCCSET; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params End
CALLFUNC 0.3857; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Call
POP d4
LOADD d2,7; if() #309 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,256
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4235,==; Test 'if'
SETV d2,1; if() #309 Body Start
PUSHR d2
LOADD d2,9
POP d3
PUSHR d2
PUSHR d3
SETV d2,1
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #309 Body End
LOADD d2,7; return Start
GOTO 4288; return End
GOTO 4239; if() #135 Body End
GOTO 4243; break 1; AND if() #135 Else
LOADD d2,5; for() #55 Body End AND for() #55 LoopIncrement
SUBV d2,1
STORED d2,5
GOTO 4149; for() #55 End
ALLOCATEMEMV d2,60
STORED d2,4
WRITEPODSTRING d2,"ghost.zh: AutoGhost initialization failed - enemy missing.\n"
ALLOCATEMEMV d2,30
STORED d2,2
WRITEPODSTRING d2,"  DMap %d, screen %X\n"
ALLOCATEMEMV d2,30
STORED d2,0
WRITEPODSTRING d2,"  Script %d, enemy ID %d\n"
LOADD d2,4; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,2; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGR CURDMAP
PUSHVARGR CURDSCR; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,9
PUSHR d2
POP REFFFC
PUSHVARGR FFSCRIPT
LOADD d2,8
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0
PUSHR d2
LOADD d2,9
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
QUIT; InlineFunc[void Quit()] Body
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
LOADD d3,4
DEALLOCATEMEMR d3
POPARGS d5,0.0010
RETURNFUNC; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body End
SETR d4,SP; Func[int VectorX(int, int)] Body Start
LOADD d2,0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR d4,SP; Func[int VectorY(int, int)] Body Start
LOADD d2,0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
PUSHV 0; Func[void Ghost_MoveTowardLink(int, int)] Body Start
SETR d4,SP
PUSHR d4
SETR d2,gd2; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
SETR d2,gd13
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0081; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,0
PUSHARGSR d4,0.0002; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
LOADD d2,2; UsrFunc[int VectorX(int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.4290; UsrFunc[int VectorX(int, int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,2; UsrFunc[int VectorY(int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.4300; UsrFunc[int VectorY(int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3140; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0003
RETURNFUNC; Func[void Ghost_MoveTowardLink(int, int)] Body End
SETR d4,SP; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
COMPARER d3,d2
SETCMP d2,BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
PUSHV 0; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2
PUSHR d4; unless() #346 Test
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4532,!=; Test 'unless'
PUSHR d4; if() #164 Test AND unless() #346 Body Start
CALLFUNC 0.4358; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOCMP 4495,==; Test 'if'
SETR d2,gd6; if() #347 Test AND if() #164 Body Start
COMPAREV d2,0
GOTOCMP 4409,!=
PUSHR d4
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0388; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4409,!=
SETV d2,0
GOTO 4410
SETV d2,1
COMPAREV d2,0
GOTOCMP 4532,==; Test 'if'
PUSHR d4; if() #347 Body Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
STORED d2,0
PUSHR d4
PUSHV 64; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3113; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
SETR d2,gd6; if() #165 Test
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 4464,==; Test 'if'
PUSHR d4; if() #165 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3087; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR gd6
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.3757; UsrFunc[void Ghost_Move(int, int, int)] Call
POP d4
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
SETR d2,gd6; if() #348 Test
COMPAREV d2,0
GOTOCMP 4454,<=
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0388; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4454,!=
SETV d2,1
GOTO 4455
SETV d2,0
COMPAREV d2,0
GOTOCMP 4459,==; Test 'if'
SETV d2,0; if() #348 Body Start
SETR gd6,d2; if() #348 Body End
PUSHR d4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3113; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
GOTO 4487; if() #165 Body End
PUSHR d4; if() #165 Else Start
PUSHV 1; UsrFunc[void Ghost_Move(int, int, int)] Params Start
SETR d2,gd6
SUBV2 0,d2
PUSHR d2
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.3757; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK d4
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0388; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4485,==; Test 'if'
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #166 Body Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
GOTO 4487; if() #166 Body End
SETV d2,0; if() #166 Else Start
SETR gd6,d2; if() #166 Else End
LOADD d2,0; if() #165 Else End AND if() #349 Test
COMPAREV d2,0
GOTOCMP 4532,==; Test 'if'
PUSHR d4; if() #349 Body Start
PUSHV 64; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3087; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4; if() #349 Body End
GOTO 4532; if() #347 Body End AND if() #164 Body End
SETR d2,gd6; if() #350 Test AND if() #164 Else Start
COMPAREV d2,0
GOTOCMP 4503,!=
SETR d2,gd4
COMPAREV d2,0
GOTOCMP 4503,>
SETV d2,0
GOTO 4504
SETV d2,1
COMPAREV d2,0
GOTOCMP 4532,==; Test 'if'
SETR d2,gd4; if() #167 Test AND if() #350 Body Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 4520,==; Test 'if'
SETV d2,0; if() #167 Body Start
SETR gd4,d2
SETV d2,0
SETR gd6,d2
GOTO 4532; if() #167 Body End
SETR d2,gd4; if() #167 Else Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
SETR gd4,d2
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2; if() #167 Else End
SETR d2,gd7; if() #350 Body End AND if() #164 Else End AND unless() #346 Body End AND if() #351 Test
COMPAREV d2,0
GOTOCMP 4546,!=
SETR d2,gd8
COMPAREV d2,0
GOTOCMP 4546,!=
SETR d2,gd9
COMPAREV d2,0
GOTOCMP 4546,!=
SETR d2,gd10
COMPAREV d2,0
GOTOCMP 4546,!=
SETV d2,0
GOTO 4547
SETV d2,1
COMPAREV d2,0
GOTOCMP 4570,==; Test 'if'
SETR d2,gd7; if() #351 Body Start
PUSHR d2
SETR d2,gd9
POP d3
ADDR d2,d3
SETR gd7,d2
SETR d2,gd8
PUSHR d2
SETR d2,gd10
POP d3
ADDR d2,d3
SETR gd8,d2
PUSHR d4
PUSHR gd7; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR gd8
PUSHV 2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3140; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
PEEK d4
PUSHR gd5; UsrFunc[void Ghost_ForceDir(int)] Params
CALLFUNC 0.3749; UsrFunc[void Ghost_ForceDir(int)] Call
POP d4; if() #351 Body End
PUSHR d4
LOADD d2,4; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2550; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2
PUSHV 0; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params End
CALLFUNC 0.4612; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
CALLFUNC 0.1908; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2153; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
SETR d2,gd18
ANDV d2,32
SETR gd18,d2
PUSHR d4; return Start
LOADD d2,4; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params End
CALLFUNC 0.5116; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Call
POP d4
POPARGS d5,0.0005; return End
RETURNFUNC; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body End
PUSHARGSV 0,0.0002; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body Start
SETR d4,SP
SETR d2,gd18; if() #404 Test
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4630,==; Test 'if'
SETR d2,gd5; if() #404 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
GOTO 4727; if() #404 Body End
LOADD d2,2; if() #405 Test AND if() #404 Else Start
COMPAREV d2,0
GOTOCMP 4639,==; Test 'if'
LOADD d2,3; if() #405 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
GOTO 4727; if() #405 Body End
PUSHR d4; if() #671 Test AND if() #405 Else Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4659,==
SETR d2,gd19
PUSHR d2
SETR d2,gd2
POP d3
COMPARER d3,d2
GOTOCMP 4657,!=
SETR d2,gd20
PUSHR d2
SETR d2,gd3
POP d3
COMPARER d3,d2
GOTOCMP 4659,==
SETV d2,1
GOTO 4660
SETV d2,0
COMPAREV d2,0
GOTOCMP 4727,==; Test 'if'
SETR d2,gd2; if() #671 Body Start
PUSHR d2
SETR d2,gd19
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
SETR d2,gd3
PUSHR d2
SETR d2,gd20
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
PUSHR d4; if() #406 Test
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4696,==; Test 'if'
PUSHR d4; if() #406 Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0100; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 4727; if() #406 Body End
LOADD d2,1; InlineFunc[int Abs(int)] Params AND if() #407 Test AND if() #406 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,0; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 4717,==; Test 'if'
LOADD d2,1; if() #408 Test AND if() #407 Body Start
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 4714,==; Test 'if'
SETV d2,2; if() #408 Body Start
SETR gd5,d2
GOTO 4727; if() #408 Body End
SETV d2,3; if() #408 Else Start
SETR gd5,d2; if() #408 Else End
GOTO 4727; if() #407 Body End
LOADD d2,0; if() #409 Test AND if() #407 Else Start
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 4725,==; Test 'if'
SETV d2,0; if() #409 Body Start
SETR gd5,d2
GOTO 4727; if() #409 Body End
SETV d2,1; if() #409 Else Start
SETR gd5,d2; if() #409 Else End
SETR d2,gd5; if() #407 Else End AND if() #406 Else End AND if() #671 Body End AND if() #405 Else End AND if() #404 Else End
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
SETR d2,gd11; if() #410 Test
COMPAREV d2,0
GOTOCMP 4748,==
SETR d2,gd11
COMPAREV d2,1
GOTOCMP 4748,==
SETV d2,0
GOTO 4749
SETV d2,1
COMPAREV d2,0
GOTOCMP 4772,==; Test 'if'
LOADD d2,4; if() #672 Test AND if() #410 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4868,==; Test 'if'
SETR d2,gd11; if() #672 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #672 Body End
GOTO 4868; if() #410 Body End
PUSHR d4; if() #411 Test AND if() #410 Else Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4810,==; Test 'if'
LOADD d2,4; if() #673 Test AND if() #411 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4868,==; Test 'if'
SETR d2,gd11; if() #673 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0464; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #673 Body End
GOTO 4868; if() #411 Body End
PUSHR d4; if() #412 Test AND if() #411 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 4848,==; Test 'if'
LOADD d2,4; if() #674 Test AND if() #412 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4868,==; Test 'if'
SETR d2,gd11; if() #674 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0464; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #674 Body End
GOTO 4868; if() #412 Body End
LOADD d2,4; if() #675 Test AND if() #412 Else Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4868,==; Test 'if'
SETR d2,gd11; if() #675 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #675 Body End
LOADD d2,4; if() #412 Else End AND if() #411 Else End AND if() #410 Else End AND if() #676 Test
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4888,==; Test 'if'
SETR d2,gd13; if() #676 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2; if() #676 Body End
LOADD d2,3; if() #677 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTXSZ
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4932,==; Test 'if'
SETR d2,gd13; if() #677 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXOFS,d2; if() #677 Body End
LOADD d2,4; if() #678 Test
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4952,==; Test 'if'
SETR d2,gd14; if() #678 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2; if() #678 Body End
LOADD d2,3; if() #679 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTYSZ
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4996,==; Test 'if'
SETR d2,gd14; if() #679 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYOFS,d2; if() #679 Body End
PUSHR d4; if() #680 Test
PUSHV 128; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1533; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 5061,==; Test 'if'
SETR d2,gd4; if() #413 Test AND if() #680 Body Start
COMPAREV d2,32
GOTOCMP 5016,<
LOADD d2,4
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOCMP 5016,!=
SETV d2,1
GOTO 5017
SETV d2,0
COMPAREV d2,0
GOTOCMP 5032,==; Test 'if'
SETV d2,1; if() #413 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 5061; if() #413 Body End
SETR d2,gd4; if() #681 Test AND if() #413 Else Start
COMPAREV d2,32
GOTOCMP 5046,>=
LOADD d2,4
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOCMP 5046,==
SETV d2,1
GOTO 5047
SETV d2,0
COMPAREV d2,0
GOTOCMP 5061,==; Test 'if'
SETV d2,0; if() #681 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #681 Body End
SETR d2,gd15; if() #413 Else End AND if() #680 Body End
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETR d2,gd12
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCCSET,d2
SETR d2,gd18; if() #414 Test
ANDV d2,8
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 5095,==; Test 'if'
SETR d2,gd12; if() #414 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 5109; if() #414 Body End
SETR d2,gd21; if() #682 Test AND if() #414 Else Start
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 5109,==; Test 'if'
SETR d2,gd12; if() #682 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #682 Body End
PUSHR d4; if() #414 Else End
LOADD d2,3; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
CALLFUNC 0.1992; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
POP d4
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body End
PUSHV 0; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body Start
SETR d4,SP
LOADD d2,3; InlineFunc[bool NPC->isValid()] Params AND unless() #683 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOCMP 5143,!=; Test 'unless'
LOADD d2,2; if() #684 Test AND unless() #683 Body Start
COMPAREV d2,0
GOTOCMP 5135,==; Test 'if'
PUSHR d4; if() #684 Body Start
LOADD d2,4; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
CALLFUNC 0.3616; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2
PUSHR d4
CALLFUNC 0.3079; UsrFunc[void Ghost_ClearCombos()] Call
POP d4; if() #684 Body End
LOADD d2,1; if() #685 Test
COMPAREV d2,0
GOTOCMP 5139,==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #685 Body
SETV d2,0
SETR gd15,d2
SETV d2,0; return Start
GOTO 5266; return End AND unless() #683 Body End
LOADD d2,3; if() #686 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 5153,==; Test 'if'
SETV d2,1; if() #686 Body Start
STORED d2,0; if() #686 Body End
LOADD d2,0; unless() #687 Test
COMPAREV d2,0
GOTOCMP 5172,!=; Test 'unless'
PUSHR d4; unless() #687 Body Start
LOADD d2,4; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
CALLFUNC 0.2684; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params End
CALLFUNC 0.1649; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Call
POP d4
COMPAREV d2,0
SETCMP d2,I==
STORED d2,0; unless() #687 Body End
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
LOADD d2,0; if() #688 Test
COMPAREV d2,0
GOTOCMP 5265,==; Test 'if'
LOADD d2,2; if() #689 Test AND if() #688 Body Start
COMPAREV d2,0
GOTOCMP 5259,==; Test 'if'
SETV d2,1; if() #689 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd2
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
PUSHR d4
LOADD d2,4; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
CALLFUNC 0.3616; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2; if() #689 Body End
LOADD d2,1; if() #690 Test
COMPAREV d2,0
GOTOCMP 5263,==; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #690 Body
SETV d2,0; return Start
GOTO 5266; return End AND if() #688 Body End
SETV d2,1; return Start
POPARGS d5,0.0005; return End
RETURNFUNC; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body End
PUSHARGSV 0,0.0006; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body Start
SETR d4,SP
LOADD d2,8; if() #710 Test
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOCMP 5282,==; Test 'if'
LOADD d2,5; if() #710 Body Start
ORV d2,4
STORED d2,5; if() #710 Body End
LOADD d2,8; if() #711 Test
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOCMP 5294,==; Test 'if'
LOADD d2,5; if() #711 Body Start
ORV d2,1
STORED d2,5; if() #711 Body End
PUSHR d4; if() #712 Test
LOADD d2,7; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params Start
PUSHR d2; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params End
CALLFUNC 0.5605; UsrFunc[bool __Ghost_IsFlickering(NPC)] Call
POP d4
COMPAREV d2,0
GOTOCMP 5304,==; Test 'if'
LOADD d2,5; if() #712 Body Start
ORV d2,2
STORED d2,5; if() #712 Body End
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,CSET
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,5
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
STOREDV 3,4
SETR d2,gd2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd4
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
ADDR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,2
SETR d2,gd26; if() #713 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 5471,==; Test 'if'
STOREDV 1,1; if() #713 Body Start
LOADD d2,0; for() #182 LoopTest
PUSHR d2
SETR d2,gd26
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 5471,==; for() #182 TestFail?
SETR d2,gd26; for() #182 Body Start
PUSHR d2
LOADD d2,1
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,3
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,1
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,2
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,2
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,6
STORED d2,4
LOADD d2,1
ADDV d2,6
STORED d2,1
LOADD d2,6
PUSHR d2
POP d0
READPODARRAYV d2,0
ADDV d2,1
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; for() #182 Body End
LOADD d2,0; for() #182 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 5359; for() #182 End
LOADD d2,8; if() #713 Body End AND if(true) #714 [Opt:AlwaysOn]
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,6
PUSHR d2
POP d0
READPODARRAYV d2,0
ADDV d2,1
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
POPARGS d5,0.0009
RETURNFUNC; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body End
PUSHV 0; Func[void __HideFFCAndWait(FFC)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,0
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
WAITFRAME; InlineFunc[void Waitframe()] Body
LOADD d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __HideFFCAndWait(FFC)] Body End
PUSHV 0; Func[bool IsPit(int)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP d0
SETR d2,COMBOTD
STORED d2,0; if() #368 Test
COMPAREV d2,41
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5582,==; Test 'if'
SETV d2,1; return Start AND if() #368 Body Start
GOTO 5603; return End AND if() #368 Body End
LOADD d2,0; if() #369 Test
COMPAREV d2,93
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5589,==; Test 'if'
SETV d2,1; return Start AND if() #369 Body Start
GOTO 5603; return End AND if() #369 Body End
LOADD d2,0; if() #370 Test
COMPAREV d2,80
GOTOCMP 5597,<
LOADD d2,0
COMPAREV d2,82
GOTOCMP 5597,>
SETV d2,1
GOTO 5598
SETV d2,0
COMPAREV d2,0
GOTOCMP 5602,==; Test 'if'
SETV d2,1; return Start AND if() #370 Body Start
GOTO 5603; return End AND if() #370 Body End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool IsPit(int)] Body End
SETR d4,SP; Func[bool __Ghost_IsFlickering(NPC)] Body Start
LOADD d2,0; if() #638 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,128
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 5617,==; Test 'if'
SETV d2,1; return Start AND if() #638 Body Start
GOTO 5618; return End AND if() #638 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[bool __Ghost_IsFlickering(NPC)] Body End
PUSHARGSV 0,0.0004; Func[void SpawnAnimation(FFC, NPC)] Body Start
SETR d4,SP
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,3
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCCOLLDET
STORED d2,2
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
STORED d2,1
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2550; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
LOADD d2,0; for() #257 LoopTest
COMPAREV d2,32
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 5764,==; for() #257 TestFail?
SETV d2,0; for() #257 Body Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,32768
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2550; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2153; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2550; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2153; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,0; if() #953 Test
COMPAREV d2,29
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5760,==; Test 'if'
SETR d2,UNDERCOMBO; if() #953 Body Start
PUSHR d2
PUSHR d4
LOADD d2,5; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOADD d2,5
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0228; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBODD,d2
SETR d2,UNDERCSET
PUSHR d2
PUSHR d4
LOADD d2,5; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOADD d2,5
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0228; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBOCD,d2; if() #953 Body End
LOADD d2,0; for() #257 Body End AND for() #257 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 5654; for() #257 End
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,2
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
POPARGS d5,0.0006
RETURNFUNC; Func[void SpawnAnimation(FFC, NPC)] Body End


PUSHV 0; void run() Body Start
SETR d4,SP
PUSHR d4
CALLFUNC 0.2353; UsrFunc[void StartGhostZH()] Call
POP d4
PUSHR d4; while(true) #14 Body [Opt:AlwaysOn] Start
CALLFUNC 0.8686; UsrFunc[void UpdateGhostZH1()] Call
POP d4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR d4
CALLFUNC 0.8748; UsrFunc[void UpdateGhostZH2()] Call
POP d4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #14 Body [Opt:AlwaysOn] End
GOTO 6; while() #14 End AND [Opt:NeverRet] AND void run() Body End
POP d2; Func[int Distance(int, int, int, int)] Body Start
POP d1
POP d0
POP d6
SETR d2,DISTANCE
RETURNFUNC; Func[int Distance(int, int, int, int)] Body End
SETR d4,SP; Func[int RadianAngle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR d4,SP; Func[int Randf(int)] Body Start
SETV d2,0; InlineFunc[long RNG->LRand(long)] Params Start AND return Start
PUSHR d2
LOADD d2,0; InlineFunc[long RNG->LRand(long)] Params End
POP REFRNG; InlineFunc[long RNG->LRand(long)] Body Start
RNGLRAND2 d2; InlineFunc[long RNG->LRand(long)] Body End
POP d5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR d4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0,0.0007; Func[void AutoGhost()] Body Start
SETR d4,SP
SETR d2,gd27; if() #29 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
GOTOCMP 411,!=; Test 'if' AND return (Void) AND if() #29 Body
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #2 setup
STORED d2,3
LOADD d2,3; for() #2 LoopTest
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 411,==; for() #2 TestFail?
LOADD d2,3; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #2 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,6; if() #30 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,20
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 407,!=; Test 'if' AND continue 1; AND if() #30 Body
LOADD d2,6; if() #31 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,511
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 407,!=; Test 'if' AND continue 1; AND if() #31 Body
LOADD d2,6; if() #32 Test AND if(false) #16 [Opt:AlwaysOff]
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
GOTOCMP 407,!=; Test 'if' AND continue 1; AND if() #32 Body
LOADD d2,6; unless() #33 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOCMP 407,==; Test 'unless' AND continue 1; AND unless() #33 Body
LOADD d2,6; unless() #34 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOCMP 407,==; Test 'unless' AND continue 1; AND unless() #34 Body
STOREDV 0,2
STOREDV 0,1
LOADD d2,6; if(false) #17 [Opt:AlwaysOff]
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,1
LOADD d2,6
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,2; if() #35 Test
COMPAREV d2,-1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 167,==; Test 'if'
ALLOCATEMEMV d2,2; if() #35 Body Start
STORED d2,0
PUSHR d4
LOADD d2,6; UsrFunc[int __AutoGhostParseName(NPC, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int __AutoGhostParseName(NPC, int)] Params End
CALLFUNC 0.0413; UsrFunc[int __AutoGhostParseName(NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,0
STORED d2,2
LOADD d3,0
DEALLOCATEMEMR d3; if() #35 Body End
LOADD d2,2; if() #36 Test
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 178,==; Test 'if'
PUSHR d4; if() #36 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0712; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 407; continue 1; AND if() #36 Body End
LOADD d2,2; if() #37 Test
COMPAREV d2,511
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 189,==; Test 'if'
PUSHR d4; if() #37 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0712; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 407; continue 1; AND if() #37 Body End
PUSHR d4
LOADD d2,5; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR d2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.0763; UsrFunc[int FindUnusedFFC(int)] Call
POP d4
STORED d2,5; unless() #38 Test
COMPAREV d2,0
GOTOCMP 203,!=; Test 'unless'
PUSHR d4; unless() #38 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0712; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 407; continue 1; AND unless() #38 Body End
LOADD d2,5; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,4
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCCSET
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCX
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCY
PUSHR d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCZ
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
LOADD d2,2
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
SETV d2,1; if(true) #39 [Opt:AlwaysOn]
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
LOADD d2,1; if() #40 Test
COMPAREV d2,1
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 377,==; Test 'if'
LOADD d2,1; if() #41 Test AND if() #40 Body Start
COMPAREV d2,-1
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 377,==; Test 'if'
SETV d2,3; if() #41 Body Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,1024
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2; if() #41 Body End
LOADD d2,1; if() #40 Body End AND if() #18 Test
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 395,==; Test 'if'
SETV d2,1; if() #18 Body Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
GOTO 407; if() #18 Body End
LOADD d2,1; if() #18 Else Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #18 Else End
LOADD d2,3; for() #2 Body End AND for() #2 LoopIncrement
SUBV d2,1
STORED d2,3
GOTO 76; for() #2 End
POPARGS d5,0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0,0.0009; Func[int __AutoGhostParseName(NPC, int)] Body Start
SETR d4,SP
ALLOCATEMEMV d2,64
STORED d2,8
ALLOCATEMEMV d2,64
STORED d2,7
SETV d2,1
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,10; InlineFunc[void NPC->GetName(int)] Params Start
PUSHR d2
LOADD d2,8; InlineFunc[void NPC->GetName(int)] Params End
POP REFNPC; InlineFunc[void NPC->GetName(int)] Body Start
NPCNAME d2; InlineFunc[void NPC->GetName(int)] Body End
LOADD d2,6; for() #151 LoopTest
COMPAREV d2,63
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 650,==; for() #151 TestFail?
LOADD d2,8; if() #584 Test AND for() #151 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,64
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 646,==; Test 'if'
LOADD d2,8; if() #584 Body Start
PUSHR d2
LOADD d2,6
ADDV d2,1
POP d0
READPODARRAYR d2,d2
STORED d2,5
PUSHR d4; if() #352 Test
LOADD d2,5; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8870; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 553,==; Test 'if'
STOREDV 0,4; if() #352 Body Start
LOADD d2,6; for() #152 setup
ADDV d2,1
STORED d2,6
PUSHR d4; for() #152 LoopTest
LOADD d2,8; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.8870; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOCMP 495,==; for() #152 TestFail?
LOADD d2,8; for() #152 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,1
STORED d2,4; for() #152 Body End
LOADD d2,6; for() #152 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 463; for() #152 End
SETV d2,0
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,7; InlineFunc[int Game->GetFFCScript(int)] Params
GETFFCSCRIPT d2; InlineFunc[int Game->GetFFCScript(int)] Body
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
LOADD d2,6
SUBV d2,1
STORED d2,6
LOADD d2,9; if() #585 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 646,==; Test 'if'
ALLOCATEMEMV d2,59; if() #585 Body Start
STORED d2,2
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script does not exist.\n"
ALLOCATEMEMV d2,80
STORED d2,0
WRITEPODSTRING d2,"  Script name: %s\n"
LOADD d2,2; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,7
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 710; return End
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3; if() #585 Body End
GOTO 646; if() #352 Body End
LOADD d2,5; if() #586 Test AND if() #352 Else Start
COMPAREV d2,48
GOTOCMP 559,<
LOADD d2,5
COMPAREV d2,57
GOTOCMP 564,<=
LOADD d2,5
COMPAREV d2,45
GOTOCMP 564,==
SETV d2,0
GOTO 565
SETV d2,1
COMPAREV d2,0
GOTOCMP 646,==; Test 'if'
STOREDV 0,4; if() #586 Body Start
LOADD d2,5; if() #587 Test
COMPAREV d2,45
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 584,==; Test 'if'
SETV d2,45; if() #587 Body Start
PUSHR d2
LOADD d2,7
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,1
STORED d2,4
LOADD d2,6
ADDV d2,1
STORED d2,6; if() #587 Body End
LOADD d2,6; for() #153 setup
ADDV d2,1
STORED d2,6
LOADD d2,8; for() #153 LoopTest
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,48
GOTOCMP 603,<
LOADD d2,8
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,57
GOTOCMP 603,>
SETV d2,1
GOTO 604
SETV d2,0
COMPAREV d2,0
GOTOCMP 626,==; for() #153 TestFail?
LOADD d2,8; for() #153 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,1
STORED d2,4; for() #153 Body End
LOADD d2,6; for() #153 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 587; for() #153 End
SETV d2,0
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,7; InlineFunc[int atoi(int)] Params Start
SETR d3,d2; InlineFunc[int atoi(int)] Params End
ATOI d2,d3; InlineFunc[int atoi(int)] Body
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,6
SUBV d2,1
STORED d2,6; if() #586 Body End
LOADD d2,6; if() #352 Else End AND if() #584 Body End AND for() #151 Body End AND for() #151 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 430; for() #151 End
LOADD d2,9; if() #589 Test AND unless(false) #588 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 700,==; Test 'if'
ALLOCATEMEMV d2,54; if() #589 Body Start
STORED d2,5
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script not found.\n"
ALLOCATEMEMV d2,80
STORED d2,3
WRITEPODSTRING d2,"  Enemy name: %s\n"
ALLOCATEMEMV d2,55
STORED d2,1
WRITEPODSTRING d2,"  Script name should start after this character: %c\n"
LOADD d2,5; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,3; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,8
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,1; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGV 64; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,3
DEALLOCATEMEMR d3
LOADD d3,5
DEALLOCATEMEMR d3
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 710; return End
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,3
DEALLOCATEMEMR d3
LOADD d3,5
DEALLOCATEMEMR d3; if() #589 Body End
SETV d2,1; return Start
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 710; return End
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
POPARGS d5,0.0011
RETURNFUNC; Func[int __AutoGhostParseName(NPC, int)] Body End
SETR d4,SP; Func[void __AutoGhostKill(NPC)] Body Start
SETV d2,65536
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
SETV d2,1024
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETV d2,1024
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,-1000
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCITEMSET,d2
POP d5
RETURNFUNC; Func[void __AutoGhostKill(NPC)] Body End
PUSHARGSV 0,0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR d4,SP
LOADD d2,2; InlineFunc[untyped Max(untyped, untyped)] Params Start AND for() #43 setup
ADDV d2,1
PUSHVARGR d2
PUSHVARGV 1; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
STORED d2,0
LOADD d2,0; for() #43 LoopTest
COMPAREV d2,32
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 816,==; for() #43 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #43 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1; if() #175 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
GOTOCMP 792,==
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
GOTOCMP 792,==
SETV d2,0
GOTO 793
SETV d2,1
COMPAREV d2,0
GOTOCMP 812,==; Test 'if'
LOADD d2,1; unless() #176 Test AND if() #175 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOCMP 812,!=; Test 'unless'
LOADD d2,1; unless() #177 Test AND unless() #176 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOCMP 812,!=; Test 'unless'
LOADD d2,0; return Start AND unless() #177 Body Start
GOTO 817; return End AND unless() #177 Body End
LOADD d2,0; unless() #176 Body End AND if() #175 Body End AND for() #43 Body End AND for() #43 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 771; for() #43 End
SETV d2,0; return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR d4,SP; Func[int CenterX(EWeapon)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterX(EWeapon)] Body End
SETR d4,SP; Func[int CenterY(EWeapon)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterY(EWeapon)] Body End
PUSHARGSV 0,0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR d4,SP
SETR d2,LINKHP; if() #86 Test
COMPAREV d2,0
GOTOCMP 873,>
GOTO 873
SETV d2,1
GOTO 874
SETV d2,0
COMPAREV d2,0
GOTOCMP 922,==; Test 'if'
STOREDV 1,0; for() #3 setup AND if() #86 Body Start
LOADD d2,0; for() #3 LoopTest
COMPAREV d2,32
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 922,==; for() #3 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #3 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1
SETR d2,gd25; if() #87 Test
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
RSHIFTV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
ANDV d2,15
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 918,==; Test 'if'
SETV d2,0; if() #87 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #87 Body End
LOADD d2,0; for() #3 Body End AND for() #3 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 877; for() #3 End
POPARGS d5,0.0002; if() #86 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSV 0,0.0002; Func[void DrawEWeaponShadow(EWeapon)] Body Start
SETR d4,SP
PUSHR d4
LOADD d2,2; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNXOFS
POP d3
ADDR d2,d3
STORED d2,1
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
SUBV d2,1
MULTV d2,16
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZOFS
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
PUSHV 1; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #38 [Opt:AlwaysOn]
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
PUSHR d2
PUSHARGSV 1,0.0002
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(EWeapon)] Body End
PUSHARGSV 0,0.0009; Func[void DrawGhostFFCs()] Body Start
SETR d4,SP
SETV d2,1; if() #125 Test
PUSHR d2
POP d0
SETR d2,SCREENEFLAGSD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1006,==; Test 'if'
PUSHR d4; unless() #126 Test AND if() #125 Body Start
CALLFUNC 0.1186; UsrFunc[bool __HaveAmulet()] Call
POP d4
COMPAREV d2,0
GOTOCMP 1184,==; Test 'unless' AND return (Void) AND unless() #126 Body
SETV d2,1; if() #125 Body End AND if() #40 Test AND if(true) #39 [Opt:AlwaysOn]
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1018,==; Test 'if'
SETV d2,1; if() #40 Body Start
STORED d2,3
GOTO 1020; if() #40 Body End
SETV d2,2; if() #40 Else Start
STORED d2,3; if() #40 Else End
SETV d2,4
STORED d2,2
STOREDV 1,1; for() #20 setup
LOADD d2,1; for() #20 LoopTest
PUSHR d2
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body
POP d3
COMPARER d3,d2
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 1184,==; for() #20 TestFail?
LOADD d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #20 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,6
PUSHR d4
LOADD d2,6; UsrFunc[int __GetDrawingArray(NPC)] Params Start
PUSHR d2; UsrFunc[int __GetDrawingArray(NPC)] Params End
CALLFUNC 0.1205; UsrFunc[int __GetDrawingArray(NPC)] Call
POP d4
STORED d2,8; if() #127 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1180,!=; Test 'if' AND continue 1; AND if() #127 Body
SETR d2,gd27; if() #128 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1064,==; Test 'if'
LOADD d2,8; if() #129 Test AND if() #128 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1180,!=; Test 'if' AND continue 1; AND if() #129 Body
LOADD d2,8; if() #128 Body End AND if() #41 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1076,==; Test 'if'
SETV d2,64; if() #41 Body Start
STORED d2,5
GOTO 1078; if() #41 Body End
SETV d2,128; if() #41 Else Start
STORED d2,5; if() #41 Else End
LOADD d2,8; if() #42 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1090,==; Test 'if'
LOADD d2,2; if() #42 Body Start
STORED d2,4
GOTO 1092; if() #42 Body End
LOADD d2,3; if() #42 Else Start
STORED d2,4; if() #42 Else End
SETV d2,3
STORED d2,7
STOREDV 0,0; for() #21 setup
LOADD d2,0; for() #21 LoopTest
PUSHR d2
LOADD d2,8
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1180,==; for() #21 TestFail?
LOADD d2,8; if() #130 Test AND for() #21 Body Start
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
COMPAREV d2,1
GOTOCMP 1122,==
LOADD d2,8
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
COMPAREV d2,0
GOTOCMP 1122,==
SETV d2,1
GOTO 1123
SETV d2,0
COMPAREV d2,0
GOTOCMP 1173,==; Test 'if'
LOADD d2,4; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #130 Body Start
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,1
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,2
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
POP d0
READPODARRAYV d2,1
PUSHR d2
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0005
PUSHV 1
LOADD d2,5
PUSHR d2; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBO; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0016; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #130 Body End
LOADD d2,7
ADDV d2,6
STORED d2,7; for() #21 Body End
LOADD d2,0; for() #21 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 1095; for() #21 End
LOADD d2,1; for() #20 Body End AND for() #20 LoopIncrement
ADDV d2,1
STORED d2,1
GOTO 1023; for() #20 End
POPARGS d5,0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR d4,SP; Func[bool __HaveAmulet()] Body Start
SETV d2,50; if() #691 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOCMP 1195,==; Test 'if'
SETV d2,1; return Start AND if() #691 Body Start
GOTO 1204; return End AND if() #691 Body End
SETV d2,63; if() #692 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOCMP 1203,==; Test 'if'
SETV d2,1; return Start AND if() #692 Body Start
GOTO 1204; return End AND if() #692 Body End
SETV d2,0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int __GetDrawingArray(NPC)] Body Start
SETR d4,SP
LOADD d2,1; if() #602 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1221,==; Test 'if'
SETV d2,0; return Start AND if() #602 Body Start
GOTO 1241; return End AND if() #602 Body End
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
STORED d2,0; if() #603 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1236,==; Test 'if'
SETV d2,0; return Start AND if() #603 Body Start
GOTO 1241; return End AND if() #603 Body End
LOADD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,23
STORED d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int __GetDrawingArray(NPC)] Body End
PUSHARGSV 0,0.0002; Func[int FindUnusedFFC()] Body Start
SETR d4,SP
STOREDV 1,0; for() #42 setup
LOADD d2,0; for() #42 LoopTest
COMPAREV d2,33
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1291,==; for() #42 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #42 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1; if() #172 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
GOTOCMP 1267,==
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
GOTOCMP 1267,==
SETV d2,0
GOTO 1268
SETV d2,1
COMPAREV d2,0
GOTOCMP 1287,==; Test 'if'
LOADD d2,1; unless() #173 Test AND if() #172 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOCMP 1287,!=; Test 'unless'
LOADD d2,1; unless() #174 Test AND unless() #173 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOCMP 1287,!=; Test 'unless'
LOADD d2,0; return Start AND unless() #174 Body Start
GOTO 1292; return End AND unless() #174 Body End
LOADD d2,0; unless() #173 Body End AND if() #172 Body End AND for() #42 Body End AND for() #42 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 1246; for() #42 End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR d4,SP
LOADD d2,3; if() #198 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1307,==; Test 'if'
PUSHR d4; if() #198 Body Start
LOADD d2,9; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.1453; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP d4
STORED d2,3; if() #198 Body End
LOADD d2,2; if() #199 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1318,==; Test 'if'
PUSHR d4; if() #199 Body Start
LOADD d2,9; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.1608; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP d4
STORED d2,2; if() #199 Body End
LOADD d2,9; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORED d2,0
LOADD d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,7
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOADD d2,5
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOADD d2,1; if() #54 Test
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1388,==; Test 'if'
PUSHR d4; if() #54 Body Start
LOADD d2,6; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1932; UsrFunc[int __UnblockableDir(int)] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
GOTO 1397; if() #54 Body End
LOADD d2,6; if() #54 Else Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2; if() #54 Else End
LOADD d2,3; if() #200 Test
COMPAREV d2,0
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 1408,==; Test 'if'
LOADD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #200 Body Start
PUSHR d2
LOADD d2,3; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #200 Body End
LOADD d2,1; if() #201 Test
ANDV d2,32
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1424,==; Test 'if'
SETV d2,0; if() #201 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #201 Body End
LOADD d2,1; if() #202 Test
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1435,==; Test 'if'
PUSHR d4; if() #202 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1769; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #202 Body End
LOADD d2,1
ORV d2,512
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,2; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
LOADD d2,0; return Start
POPARGS d5,0.0010; return End
RETURNFUNC; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0,0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR d4,SP
LOADD d2,3; if() #61 Test
COMPAREV d2,129
GOTOCMP 1463,==
LOADD d2,3
COMPAREV d2,145
GOTOCMP 1463,==
SETV d2,0
GOTO 1464
SETV d2,1
COMPAREV d2,0
GOTOCMP 1468,==; Test 'if'
SETV d2,17; return Start AND if() #61 Body Start
GOTO 1606; return End AND if() #61 Body End
LOADD d2,3; if() #62 Test AND if() #61 Else Start
COMPAREV d2,133
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1475,==; Test 'if'
SETV d2,18; return Start AND if() #62 Body Start
GOTO 1606; return End AND if() #62 Body End
LOADD d2,3; if() #63 Test AND if() #62 Else Start
COMPAREV d2,130
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1482,==; Test 'if'
SETV d2,19; return Start AND if() #63 Body Start
GOTO 1606; return End AND if() #63 Body End
LOADD d2,3; if() #64 Test AND if() #63 Else Start
COMPAREV d2,140
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1489,==; Test 'if'
SETV d2,35; return Start AND if() #64 Body Start
GOTO 1606; return End AND if() #64 Body End
LOADD d2,3; if() #65 Test AND if() #64 Else Start
COMPAREV d2,142
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1496,==; Test 'if'
SETV d2,81; return Start AND if() #65 Body Start
GOTO 1606; return End AND if() #65 Body End
LOADD d2,3; if() #66 Test AND if() #65 Else Start
COMPAREV d2,139
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1503,==; Test 'if'
SETV d2,80; return Start AND if() #66 Body Start
GOTO 1606; return End AND if() #66 Body End
LOADD d2,3; if() #67 Test AND if() #66 Else Start
COMPAREV d2,134
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1510,==; Test 'if'
SETV d2,21; return Start AND if() #67 Body Start
GOTO 1606; return End AND if() #67 Body End
LOADD d2,3; if() #68 Test AND if() #67 Else Start
COMPAREV d2,132
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1517,==; Test 'if'
SETV d2,20; return Start AND if() #68 Body Start
GOTO 1606; return End AND if() #68 Body End
LOADD d2,3; if() #69 Test AND if() #68 Else Start
COMPAREV d2,141
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1524,==; Test 'if'
SETV d2,36; return Start AND if() #69 Body Start
GOTO 1606; return End AND if() #69 Body End
LOADD d2,3; if() #70 Test AND if() #69 Else Start
COMPAREV d2,137
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1531,==; Test 'if'
SETV d2,76; return Start AND if() #70 Body Start
GOTO 1606; return End AND if() #70 Body End
LOADD d2,3; if() #71 Test AND if() #70 Else Start
COMPAREV d2,138
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1538,==; Test 'if'
SETV d2,77; return Start AND if() #71 Body Start
GOTO 1606; return End AND if() #71 Body End
LOADD d2,3; if() #72 Test AND if() #71 Else Start
COMPAREV d2,131
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1605,==; Test 'if'
LOADD d2,0; for() #48 LoopTest AND if() #72 Body Start
COMPAREV d2,256
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1589,==; for() #48 TestFail?
LOADD d2,0; unless() #211 Test AND for() #48 Body Start
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOCMP 1585,==; Test 'unless' AND continue 1; AND unless() #211 Body
LOADD d2,0; InlineFunc[ItemData Game->LoadItemData(int)] Params
LOADITEMDATAR d2; InlineFunc[ItemData Game->LoadItemData(int)] Body Start
SETR d2,REFITEMCLASS; InlineFunc[ItemData Game->LoadItemData(int)] Body End
STORED d2,1; if() #212 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATAFAMILY
COMPAREV d2,1
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1585,!=; Test 'if' AND continue 1; AND if() #212 Body
LOADD d2,1; if() #213 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
PUSHR d2
LOADD d2,2
POP d3
COMPARER d3,d2
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 1585,==; Test 'if'
LOADD d2,1; if() #213 Body Start
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
STORED d2,2; if() #214 Test
COMPAREV d2,3
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 1589,!=; Test 'if' AND break 1; AND if() #214 Body
LOADD d2,0; if() #213 Body End AND for() #48 Body End AND for() #48 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 1543; for() #48 End
LOADD d2,2; if() #73 Test
COMPAREV d2,1
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 1596,==; Test 'if'
SETV d2,4; return Start AND if() #73 Body Start
GOTO 1606; return End AND if() #73 Body End
LOADD d2,2; if() #74 Test AND if() #73 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1603,==; Test 'if'
SETV d2,5; return Start AND if() #74 Body Start
GOTO 1606; return End AND if() #74 Body End
SETV d2,6; return Start AND if() #74 Else Start
GOTO 1606; return End AND if() #74 Else End AND if() #73 Else End AND if() #72 Body End
SETV d2,0; return Start AND if() #72 Else Start
POPARGS d5,0.0004; return End AND if() #72 Else End AND if() #71 Else End AND if() #70 Else End AND if() #69 Else End AND if() #68 Else End AND if() #67 Else End AND if() #66 Else End AND if() #65 Else End AND if() #64 Else End AND if() #63 Else End AND if() #62 Else End AND if() #61 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR d4,SP; Func[int GetDefaultEWeaponSound(int)] Body Start
LOADD d2,0; if() #57 Test
COMPAREV d2,129
GOTOCMP 1617,==
LOADD d2,0
COMPAREV d2,145
GOTOCMP 1617,==
SETV d2,0
GOTO 1618
SETV d2,1
COMPAREV d2,0
GOTOCMP 1622,==; Test 'if'
SETV d2,40; return Start AND if() #57 Body Start
GOTO 1659; return End AND if() #57 Body End
LOADD d2,0; if() #58 Test AND if() #57 Else Start
COMPAREV d2,134
GOTOCMP 1630,==
LOADD d2,0
COMPAREV d2,141
GOTOCMP 1630,==
SETV d2,0
GOTO 1631
SETV d2,1
COMPAREV d2,0
GOTOCMP 1635,==; Test 'if'
SETV d2,32; return Start AND if() #58 Body Start
GOTO 1659; return End AND if() #58 Body End
LOADD d2,0; if() #59 Test AND if() #58 Else Start
COMPAREV d2,140
GOTOCMP 1646,==
LOADD d2,0
COMPAREV d2,142
GOTOCMP 1646,==
LOADD d2,0
COMPAREV d2,139
GOTOCMP 1646,==
SETV d2,0
GOTO 1647
SETV d2,1
COMPAREV d2,0
GOTOCMP 1651,==; Test 'if'
SETV d2,13; return Start AND if() #59 Body Start
GOTO 1659; return End AND if() #59 Body End
LOADD d2,0; if() #60 Test AND if() #59 Else Start
COMPAREV d2,133
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1658,==; Test 'if'
SETV d2,51; return Start AND if() #60 Body Start
GOTO 1659; return End AND if() #60 Body End
SETV d2,0; return Start AND if() #60 Else Start
POP d5; return End AND if() #60 Else End AND if() #59 Else End AND if() #58 Else End AND if() #57 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0,0.0002; Func[void SetEWeaponDir(EWeapon)] Body Start
SETR d4,SP
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,1; if() #518 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1676,==; Test 'if'
LOADD d2,1; if() #518 Body Start
ADDV d2,6.2832
STORED d2,1; if() #518 Body End
LOADD d2,1; if() #250 Test
COMPAREV d2,0.3927
GOTOCMP 1684,<
LOADD d2,1
COMPAREV d2,5.8905
GOTOCMP 1684,>
SETV d2,0
GOTO 1685
SETV d2,1
COMPAREV d2,0
GOTOCMP 1690,==; Test 'if'
SETV d2,3; if() #250 Body Start
STORED d2,0
GOTO 1740; if() #250 Body End
LOADD d2,1; if() #251 Test AND if() #250 Else Start
COMPAREV d2,1.1781
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1698,==; Test 'if'
SETV d2,7; if() #251 Body Start
STORED d2,0
GOTO 1740; if() #251 Body End
LOADD d2,1; if() #252 Test AND if() #251 Else Start
COMPAREV d2,1.9635
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1706,==; Test 'if'
SETV d2,1; if() #252 Body Start
STORED d2,0
GOTO 1740; if() #252 Body End
LOADD d2,1; if() #253 Test AND if() #252 Else Start
COMPAREV d2,2.7489
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1714,==; Test 'if'
SETV d2,6; if() #253 Body Start
STORED d2,0
GOTO 1740; if() #253 Body End
LOADD d2,1; if() #254 Test AND if() #253 Else Start
COMPAREV d2,3.5343
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1722,==; Test 'if'
SETV d2,2; if() #254 Body Start
STORED d2,0
GOTO 1740; if() #254 Body End
LOADD d2,1; if() #255 Test AND if() #254 Else Start
COMPAREV d2,4.3197
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1730,==; Test 'if'
SETV d2,4; if() #255 Body Start
STORED d2,0
GOTO 1740; if() #255 Body End
LOADD d2,1; if() #256 Test AND if() #255 Else Start
COMPAREV d2,5.1051
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1738,==; Test 'if'
SETV d2,0; if() #256 Body Start
STORED d2,0
GOTO 1740; if() #256 Body End
SETV d2,5; if() #256 Else Start
STORED d2,0; if() #256 Else End
LOADD d2,2; if() #255 Else End AND if() #254 Else End AND if() #253 Else End AND if() #252 Else End AND if() #251 Else End AND if() #250 Else End AND if() #519 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 1758,==; Test 'if'
PUSHR d4; if() #519 Body Start
LOADD d2,0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.1932; UsrFunc[int __UnblockableDir(int)] Call
POP d4
STORED d2,0; if() #519 Body End
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
POPARGS d5,0.0003
RETURNFUNC; Func[void SetEWeaponDir(EWeapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #274 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOCMP 1851,==; Test 'if'
LOADD d2,1; if() #274 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,0; if() #524 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1790,==; Test 'if'
LOADD d2,0; if() #524 Body Start
ADDV d2,6.2832
STORED d2,0; if() #524 Body End
LOADD d2,0; if() #275 Test
COMPAREV d2,0.7854
GOTOCMP 1798,<
LOADD d2,0
COMPAREV d2,5.4978
GOTOCMP 1798,>
SETV d2,0
GOTO 1799
SETV d2,1
COMPAREV d2,0
GOTOCMP 1811,==; Test 'if'
SETV d2,4; if() #275 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1930; if() #275 Body End
LOADD d2,0; if() #276 Test AND if() #275 Else Start
COMPAREV d2,2.3562
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 1826,==; Test 'if'
SETV d2,3; if() #276 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1930; if() #276 Body End
LOADD d2,0; if() #277 Test AND if() #276 Else Start
COMPAREV d2,3.9270
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 1841,==; Test 'if'
SETV d2,7; if() #277 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1930; if() #277 Body End
SETV d2,0; if() #277 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #277 Else End
GOTO 1930; if() #276 Else End AND if() #275 Else End AND if() #274 Body End
PUSHR d4; if() #274 Else Start
LOADD d2,1; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.1992; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0; if() #278 Test
COMPAREV d2,0
GOTOCMP 1869,==
LOADD d2,0
COMPAREV d2,5
GOTOCMP 1869,==
LOADD d2,0
COMPAREV d2,4
GOTOCMP 1869,==
SETV d2,0
GOTO 1870
SETV d2,1
COMPAREV d2,0
GOTOCMP 1882,==; Test 'if'
SETV d2,0; if() #278 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1930; if() #278 Body End
LOADD d2,0; if() #279 Test AND if() #278 Else Start
COMPAREV d2,1
GOTOCMP 1893,==
LOADD d2,0
COMPAREV d2,7
GOTOCMP 1893,==
LOADD d2,0
COMPAREV d2,6
GOTOCMP 1893,==
SETV d2,0
GOTO 1894
SETV d2,1
COMPAREV d2,0
GOTOCMP 1906,==; Test 'if'
SETV d2,3; if() #279 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1930; if() #279 Body End
LOADD d2,0; if() #280 Test AND if() #279 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1921,==; Test 'if'
SETV d2,7; if() #280 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 1930; if() #280 Body End
SETV d2,4; if() #280 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #280 Else End
POPARGS d5,0.0002; if() #279 Else End AND if() #278 Else End AND if() #274 Else End
RETURNFUNC; Func[void SetEWeaponRotation(EWeapon)] Body End
SETR d4,SP; Func[int __UnblockableDir(int)] Body Start
LOADD d2,0; if() #715 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1940,==; Test 'if'
SETV d2,8; return Start AND if() #715 Body Start
GOTO 1990; return End AND if() #715 Body End
LOADD d2,0; if() #716 Test
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1947,==; Test 'if'
SETV d2,12; return Start AND if() #716 Body Start
GOTO 1990; return End AND if() #716 Body End
LOADD d2,0; if() #717 Test
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1954,==; Test 'if'
SETV d2,14; return Start AND if() #717 Body Start
GOTO 1990; return End AND if() #717 Body End
LOADD d2,0; if() #718 Test
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1961,==; Test 'if'
SETV d2,10; return Start AND if() #718 Body Start
GOTO 1990; return End AND if() #718 Body End
LOADD d2,0; if() #719 Test
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1968,==; Test 'if'
SETV d2,15; return Start AND if() #719 Body Start
GOTO 1990; return End AND if() #719 Body End
LOADD d2,0; if() #720 Test
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1975,==; Test 'if'
SETV d2,9; return Start AND if() #720 Body Start
GOTO 1990; return End AND if() #720 Body End
LOADD d2,0; if() #721 Test
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1982,==; Test 'if'
SETV d2,13; return Start AND if() #721 Body Start
GOTO 1990; return End AND if() #721 Body End
LOADD d2,0; if() #722 Test
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 1989,==; Test 'if'
SETV d2,11; return Start AND if() #722 Body Start
GOTO 1990; return End AND if() #722 Body End
LOADD d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR d4,SP; Func[int __NormalizeDir(int)] Body Start
LOADD d2,0; if() #701 Test
COMPAREV d2,0
GOTOCMP 2001,<
LOADD d2,0
COMPAREV d2,7
GOTOCMP 2001,>
SETV d2,1
GOTO 2002
SETV d2,0
COMPAREV d2,0
GOTOCMP 2006,==; Test 'if'
LOADD d2,0; return Start AND if() #701 Body Start
GOTO 2063; return End AND if() #701 Body End
LOADD d2,0; if() #702 Test
COMPAREV d2,8
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2013,==; Test 'if'
SETV d2,0; return Start AND if() #702 Body Start
GOTO 2063; return End AND if() #702 Body End
LOADD d2,0; if() #703 Test
COMPAREV d2,9
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2020,==; Test 'if'
SETV d2,5; return Start AND if() #703 Body Start
GOTO 2063; return End AND if() #703 Body End
LOADD d2,0; if() #704 Test
COMPAREV d2,10
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2027,==; Test 'if'
SETV d2,3; return Start AND if() #704 Body Start
GOTO 2063; return End AND if() #704 Body End
LOADD d2,0; if() #705 Test
COMPAREV d2,11
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2034,==; Test 'if'
SETV d2,7; return Start AND if() #705 Body Start
GOTO 2063; return End AND if() #705 Body End
LOADD d2,0; if() #706 Test
COMPAREV d2,12
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2041,==; Test 'if'
SETV d2,1; return Start AND if() #706 Body Start
GOTO 2063; return End AND if() #706 Body End
LOADD d2,0; if() #707 Test
COMPAREV d2,13
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2048,==; Test 'if'
SETV d2,6; return Start AND if() #707 Body Start
GOTO 2063; return End AND if() #707 Body End
LOADD d2,0; if() #708 Test
COMPAREV d2,14
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2055,==; Test 'if'
SETV d2,2; return Start AND if() #708 Body Start
GOTO 2063; return End AND if() #708 Body End
LOADD d2,0; if() #709 Test
COMPAREV d2,15
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2062,==; Test 'if'
SETV d2,4; return Start AND if() #709 Body Start
GOTO 2063; return End AND if() #709 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR d4,SP; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
COMPARER d3,d2
SETCMP d2,BI!=
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR d4,SP; Func[void InitializeGhostZHData()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
SETR d4,SP; Func[void KillEWeapon(EWeapon)] Body Start
LOADD d2,0
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,128
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d5
RETURNFUNC; Func[void KillEWeapon(EWeapon)] Body End
PUSHARGSV 0,0.0005; Func[int __GetEWeaponThrowHeight(EWeapon)] Body Start
SETR d4,SP
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
STORED d2,4; if() #604 Test
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 2162,==; Test 'if'
SETV d2,1; return Start AND if() #604 Body Start
GOTO 2253; return End AND if() #604 Body End
PUSHR d4
LOADD d2,5; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNHXSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNHYSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0015; Int.Func[int Distance(int, int, int, int)] Call
POP d4
STORED d2,3; if() #605 Test
COMPAREV d2,1
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2204,==; Test 'if'
SETV d2,1; return Start AND if() #605 Body Start
GOTO 2253; return End AND if() #605 Body End
LOADD d2,3
PUSHR d2
LOADD d2,4
POP d3
DIVR d3,d2
SETR d2,d3
STORED d2,2
LOADD d2,1; while() #5 Test
COMPAREV d2,3.2000
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 2229,==; Test 'while'
LOADD d2,1; while() #5 Body Start
ADDV d2,0.1600
STORED d2,1
LOADD d2,2
SUBV d2,2
STORED d2,2; if() #606 Test
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 2211,==; Test 'if'
LOADD d2,1; return Start AND if() #606 Body Start
GOTO 2253; return End AND if() #606 Body End
GOTO 2211; while() #5 Body End AND while() #5 End
LOADD d2,2; while() #6 Test
PUSHR d2
LOADD d2,0
DIVV d2,3.2000
POP d3
COMPARER d3,d2
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2252,==; Test 'while'
LOADD d2,1; while() #6 Body Start
ADDV d2,0.1600
STORED d2,1
LOADD d2,0
PUSHR d2
LOADD d2,1
SUBV d2,3.2000
POP d3
ADDR d2,d3
STORED d2,0
LOADD d2,2
SUBV d2,2
STORED d2,2; while() #6 Body End
GOTO 2229; while() #6 End
LOADD d2,1; return Start
POPARGS d5,0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(EWeapon)] Body End
SETR d4,SP; Func[void SetEWeaponRotation(EWeapon, int)] Body Start
PUSHR d4
LOADD d2,0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.1992; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0; if() #281 Test
COMPAREV d2,0
GOTOCMP 2272,==
LOADD d2,0
COMPAREV d2,5
GOTOCMP 2272,==
LOADD d2,0
COMPAREV d2,4
GOTOCMP 2272,==
SETV d2,0
GOTO 2273
SETV d2,1
COMPAREV d2,0
GOTOCMP 2285,==; Test 'if'
SETV d2,0; if() #281 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2333; if() #281 Body End
LOADD d2,0; if() #282 Test AND if() #281 Else Start
COMPAREV d2,1
GOTOCMP 2296,==
LOADD d2,0
COMPAREV d2,7
GOTOCMP 2296,==
LOADD d2,0
COMPAREV d2,6
GOTOCMP 2296,==
SETV d2,0
GOTO 2297
SETV d2,1
COMPAREV d2,0
GOTOCMP 2309,==; Test 'if'
SETV d2,3; if() #282 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2333; if() #282 Body End
LOADD d2,0; if() #283 Test AND if() #282 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2324,==; Test 'if'
SETV d2,7; if() #283 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2333; if() #283 Body End
SETV d2,4; if() #283 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #283 Else End
POPARGS d5,0.0002; if() #282 Else End AND if() #281 Else End
RETURNFUNC; Func[void SetEWeaponRotation(EWeapon, int)] Body End
SETR d4,SP; Func[int Sign(int)] Body Start
LOADD d2,0; if() #299 Test
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 2343,==; Test 'if'
SETV d2,1; return Start AND if() #299 Body Start
GOTO 2351; return End AND if() #299 Body End
LOADD d2,0; if() #300 Test AND if() #299 Else Start
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2350,==; Test 'if'
SETV d2,-1; return Start AND if() #300 Body Start
GOTO 2351; return End AND if() #300 Body End
SETV d2,0; return Start AND if() #300 Else Start
POP d5; return End AND if() #300 Else End AND if() #299 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR d4,SP; Func[void StartGhostZH()] Body Start
PUSHR d4
CALLFUNC 0.2082; UsrFunc[void InitializeGhostZHData()] Call
POP d4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0,0.0007; Func[void UpdateEWeapon(EWeapon)] Body Start
SETR d4,SP
SETR d2,gd27; if() #555 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3491,!=; Test 'if' AND return (Void) AND if() #555 Body
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
STORED d2,6
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
STORED d2,5
STOREDV 1,4
LOADD d2,7; if() #309 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,128
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2766,==; Test 'if'
LOADD d2,7; if() #556 Test AND if() #309 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 2615,==; Test 'if'
LOADD d2,7; if() #310 Test AND if() #556 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 2488,==; Test 'if'
LOADD d2,7; if() #311 Test AND if() #310 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2431,==; Test 'if'
PUSHR d4; if() #311 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params End
CALLFUNC 0.3493; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Call
POP d4
GOTO 2615; if() #311 Body End
LOADD d2,7; if() #312 Test AND if() #311 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2448,==; Test 'if'
PUSHR d4; if() #312 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params End
CALLFUNC 0.3674; UsrFunc[void __UpdateEWMHoming(EWeapon)] Call
POP d4
GOTO 2615; if() #312 Body End
LOADD d2,7; if() #313 Test AND if() #312 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2465,==; Test 'if'
PUSHR d4; if() #313 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params End
CALLFUNC 0.3877; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Call
POP d4
GOTO 2615; if() #313 Body End
LOADD d2,7; if() #314 Test AND if() #313 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2482,==; Test 'if'
PUSHR d4; if() #314 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params End
CALLFUNC 0.4211; UsrFunc[void __UpdateEWMRandom(EWeapon)] Call
POP d4
GOTO 2615; if() #314 Body End
PUSHR d4; if() #314 Else Start
LOADD d2,7; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params End
CALLFUNC 0.4331; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Call
POP d4; if() #314 Else End
GOTO 2615; if() #313 Else End AND if() #312 Else End AND if() #311 Else End AND if() #310 Body End
LOADD d2,7; if() #315 Test AND if() #310 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2523,==; Test 'if'
LOADD d2,7; if() #315 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params End
CALLFUNC 0.4642; UsrFunc[void __UpdateEWMVeer(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4
GOTO 2615; if() #315 Body End
LOADD d2,7; if() #316 Test AND if() #315 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2540,==; Test 'if'
PUSHR d4; if() #316 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params End
CALLFUNC 0.5174; UsrFunc[void __UpdateEWMThrow(EWeapon)] Call
POP d4
GOTO 2615; if() #316 Body End
LOADD d2,7; if() #317 Test AND if() #316 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,19
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2557,==; Test 'if'
PUSHR d4; if() #317 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMFall(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMFall(EWeapon)] Params End
CALLFUNC 0.5479; UsrFunc[void __UpdateEWMFall(EWeapon)] Call
POP d4
GOTO 2615; if() #317 Body End
LOADD d2,7; if() #318 Test AND if() #317 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,20
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2592,==; Test 'if'
LOADD d2,7; if() #318 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params End
CALLFUNC 0.5744; UsrFunc[void __UpdateEWMDrift(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4
GOTO 2615; if() #318 Body End
LOADD d2,7; if() #318 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params End
CALLFUNC 0.6248; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4; if() #318 Else End
LOADD d2,7; if() #317 Else End AND if() #316 Else End AND if() #315 Else End AND if() #310 Else End AND if() #556 Body End AND if() #557 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3076,==; Test 'if'
LOADD d2,7; if() #319 Test AND if() #557 Body Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2673,==; Test 'if'
LOADD d2,7; if() #319 Body Start
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,7; if() #558 Test
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 3076,==; Test 'if'
PUSHR d4; if() #558 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2126; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #558 Body End
GOTO 3076; if() #319 Body End
LOADD d2,7; if() #320 Test AND if() #319 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2716,==; Test 'if'
PUSHR d4; if() #559 Test AND if() #320 Body Start
LOADD d2,7; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0015; Int.Func[int Distance(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,7
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3076,==; Test 'if'
PUSHR d4; if() #559 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2126; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #559 Body End
GOTO 3076; if() #320 Body End
LOADD d2,7; if() #560 Test AND if() #320 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3076,==; Test 'if'
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #560 Body Start
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
PUSHR d2
LOADD d2,7
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
PUSHVARGR d3; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,7; if() #561 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 3076,==; Test 'if'
PUSHR d4; if() #561 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2126; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #561 Body End
GOTO 3076; if() #560 Body End AND if() #320 Else End AND if() #319 Else End AND if() #557 Body End AND if() #309 Body End
LOADD d2,7; if() #562 Test AND if() #309 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
GOTOCMP 2787,==
LOADD d2,7
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1024
COMPAREV d2,0
GOTOCMP 2787,!=
SETV d2,1
GOTO 2788
SETV d2,0
COMPAREV d2,0
GOTOCMP 3076,==; Test 'if'
LOADD d2,7; if() #321 Test AND if() #562 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2807,==; Test 'if'
PUSHR d4; if() #321 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params End
CALLFUNC 0.6783; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Call
POP d4
GOTO 3076; if() #321 Body End
LOADD d2,7; if() #322 Test AND if() #321 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 2941,==; Test 'if'
LOADD d2,7; if() #323 Test AND if() #322 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2839,==; Test 'if'
SETV d2,0; if() #323 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 3076; if() #323 Body End
LOADD d2,7; if() #324 Test AND if() #323 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2856,==; Test 'if'
PUSHR d4; if() #324 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params End
CALLFUNC 0.7171; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Call
POP d4
GOTO 3076; if() #324 Body End
LOADD d2,7; if() #325 Test AND if() #324 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2873,==; Test 'if'
PUSHR d4; if() #325 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params End
CALLFUNC 0.7337; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Call
POP d4
GOTO 3076; if() #325 Body End
LOADD d2,7; if() #326 Test AND if() #325 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2890,==; Test 'if'
PUSHR d4; if() #326 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params End
CALLFUNC 0.7381; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Call
POP d4
GOTO 3076; if() #326 Body End
LOADD d2,7; if() #327 Test AND if() #326 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2907,==; Test 'if'
PUSHR d4; if() #327 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params End
CALLFUNC 0.7425; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Call
POP d4
GOTO 3076; if() #327 Body End
LOADD d2,7; if() #328 Test AND if() #327 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2924,==; Test 'if'
PUSHR d4; if() #328 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params End
CALLFUNC 0.7482; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Call
POP d4
GOTO 3076; if() #328 Body End
LOADD d2,7; if() #563 Test AND if() #328 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3076,==; Test 'if'
PUSHR d4; if() #563 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params End
CALLFUNC 0.7540; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Call
POP d4; if() #563 Body End
GOTO 3076; if() #328 Else End AND if() #327 Else End AND if() #326 Else End AND if() #325 Else End AND if() #324 Else End AND if() #323 Else End AND if() #322 Body End
LOADD d2,7; if() #329 Test AND if() #322 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2958,==; Test 'if'
PUSHR d4; if() #329 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params End
CALLFUNC 0.7649; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Call
POP d4
GOTO 3076; if() #329 Body End
LOADD d2,7; if() #330 Test AND if() #329 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,9
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2975,==; Test 'if'
PUSHR d4; if() #330 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params End
CALLFUNC 0.7706; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Call
POP d4
GOTO 3076; if() #330 Body End
LOADD d2,7; if() #331 Test AND if() #330 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,10
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 2992,==; Test 'if'
PUSHR d4; if() #331 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params End
CALLFUNC 0.7765; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Call
POP d4
GOTO 3076; if() #331 Body End
LOADD d2,7; if() #332 Test AND if() #331 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,11
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3009,==; Test 'if'
PUSHR d4; if() #332 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params End
CALLFUNC 0.7825; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Call
POP d4
GOTO 3076; if() #332 Body End
LOADD d2,7; if() #333 Test AND if() #332 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,12
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3026,==; Test 'if'
PUSHR d4; if() #333 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params End
CALLFUNC 0.7936; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Call
POP d4
GOTO 3076; if() #333 Body End
LOADD d2,7; if() #334 Test AND if() #333 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,13
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3043,==; Test 'if'
PUSHR d4; if() #334 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params End
CALLFUNC 0.8040; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Call
POP d4
GOTO 3076; if() #334 Body End
LOADD d2,7; if() #335 Test AND if() #334 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,14
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3060,==; Test 'if'
PUSHR d4; if() #335 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params End
CALLFUNC 0.8087; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Call
POP d4
GOTO 3076; if() #335 Body End
LOADD d2,7; if() #564 Test AND if() #335 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3076,==; Test 'if'
PUSHR d4; if() #564 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params End
CALLFUNC 0.8138; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Call
POP d4; if() #564 Body End
LOADD d2,7; if() #335 Else End AND if() #334 Else End AND if() #333 Else End AND if() #332 Else End AND if() #331 Else End AND if() #330 Else End AND if() #329 Else End AND if() #322 Else End AND if() #321 Else End AND if() #562 Body End AND if() #309 Else End AND if() #565 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3101,==; Test 'if'
LOADD d2,7; if() #566 Test AND if() #565 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 3101,==; Test 'if'
PUSHR d4; if() #566 Body Start
LOADD d2,7; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
CALLFUNC 0.0924; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #566 Body End
LOADD d2,7; if() #565 Body End AND if() #336 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3380,==; Test 'if'
SETV d2,1000; if() #336 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
SETR d2,LINKHP; if() #567 Test
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 3491,!=; Test 'if' AND return (Void) AND if() #567 Body
LOADD d2,7; if() #568 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
GOTOCMP 3146,==
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
GOTOCMP 3146,==
SETV d2,1
GOTO 3147
SETV d2,0
COMPAREV d2,0
GOTOCMP 3491,!=; Test 'if' AND return (Void) AND if() #568 Body
LOADD d2,7; if() #337 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOCMP 3162,==; Test 'if'
LOADD d2,7; InlineFunc[int RadtoDeg(int)] Params Start AND if() #337 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORED d2,1
GOTO 3227; if() #337 Body End
PUSHR d4; if() #337 Else Start
LOADD d2,7; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.1992; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0; if() #338 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3177,==; Test 'if'
SETV d2,-90; if() #338 Body Start
STORED d2,1
GOTO 3227; if() #338 Body End
LOADD d2,0; if() #339 Test AND if() #338 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3185,==; Test 'if'
SETV d2,-45; if() #339 Body Start
STORED d2,1
GOTO 3227; if() #339 Body End
LOADD d2,0; if() #340 Test AND if() #339 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3193,==; Test 'if'
SETV d2,0; if() #340 Body Start
STORED d2,1
GOTO 3227; if() #340 Body End
LOADD d2,0; if() #341 Test AND if() #340 Else Start
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3201,==; Test 'if'
SETV d2,45; if() #341 Body Start
STORED d2,1
GOTO 3227; if() #341 Body End
LOADD d2,0; if() #342 Test AND if() #341 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3209,==; Test 'if'
SETV d2,90; if() #342 Body Start
STORED d2,1
GOTO 3227; if() #342 Body End
LOADD d2,0; if() #343 Test AND if() #342 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3217,==; Test 'if'
SETV d2,135; if() #343 Body Start
STORED d2,1
GOTO 3227; if() #343 Body End
LOADD d2,0; if() #344 Test AND if() #343 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3225,==; Test 'if'
SETV d2,180; if() #344 Body Start
STORED d2,1
GOTO 3227; if() #344 Body End
SETV d2,-135; if() #344 Else Start
STORED d2,1; if() #344 Else End
LOADD d2,4; if() #343 Else End AND if() #342 Else End AND if() #341 Else End AND if() #340 Else End AND if() #339 Else End AND if() #338 Else End AND if() #337 Else End AND if() #345 Test
COMPAREV d2,0
GOTOCMP 3269,==; Test 'if'
LOADD d2,7; if() #345 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int Cos(int)] Params Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int Sin(int)] Params Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
GOTO 3285; if() #345 Body End
LOADD d2,7; if() #345 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,3
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,2; if() #345 Else End
LOADD d2,6; unless() #569 Test
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
GOTOCMP 3299,!=
LOADD d2,5
PUSHR d2
LOADD d2,2
POP d3
COMPARER d3,d2
GOTOCMP 3299,!=
SETV d2,1
GOTO 3300
SETV d2,0
COMPAREV d2,0
GOTOCMP 3314,!=; Test 'unless'
PUSHR d4; unless() #569 Body Start
LOADD d2,6; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0046; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,1; unless() #569 Body End
STOREDV 0,0
LOADD d2,1; if() #346 Test
COMPAREV d2,0
GOTOCMP 3323,<
LOADD d2,1
COMPAREV d2,180
GOTOCMP 3323,>=
SETV d2,1
GOTO 3324
SETV d2,0
COMPAREV d2,0
GOTOCMP 3329,==; Test 'if'
SETV d2,0; if() #346 Body Start
STORED d2,0
GOTO 3331; if() #346 Body End
SETV d2,2; if() #346 Else Start
STORED d2,0; if() #346 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTXSZ
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTYSZ
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 3437; if() #336 Body End
LOADD d2,7; if() #570 Test AND if() #336 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3420,==; Test 'if'
SETR d2,gd27; if() #347 Test AND if() #570 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3411,==; Test 'if'
SETV d2,1000; if() #347 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 3420; if() #347 Body End
SETV d2,0; if() #347 Else Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #347 Else End
LOADD d2,7; if() #570 Body End AND if() #571 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 3437,==; Test 'if'
PUSHR d4; if() #571 Body Start
LOADD d2,7; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1769; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #571 Body End
LOADD d2,7; if() #336 Else End AND if() #572 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,64
COMPAREV d2,0
GOTOCMP 3449,!=
SETV d2,0
GOTO 3450
SETV d2,1
COMPAREV d2,0
GOTOCMP 3491,==; Test 'if'
LOADD d2,7; if() #572 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZOFS,d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; if() #572 Body End
POPARGS d5,0.0008
RETURNFUNC; Func[void UpdateEWeapon(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1; InlineFunc[int Sin(int)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d3,EWPNMISCD; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(EWeapon)] Body End
PUSHARGSV 0,0.0003; Func[void __UpdateEWMHoming(EWeapon)] Body Start
SETR d4,SP
LOADD d2,3
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,2; if() #726 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3689,==; Test 'if'
LOADD d2,2; if() #726 Body Start
ADDV d2,6.2832
STORED d2,2; if() #726 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,3
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
STORED d2,1; if() #727 Test
COMPAREV d2,0
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 3710,==; Test 'if'
LOADD d2,1; if() #727 Body Start
ADDV d2,6.2832
STORED d2,1; if() #727 Body End
LOADD d2,2; InlineFunc[int Abs(int)] Params Start
PUSHR d2
LOADD d2,1
POP d3
SUBR d3,d2
SETR d2,d3; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
STORED d2,0; if() #436 Test
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
GOTOCMP 3744,<
LOADD d2,0
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 6.2832,d2
POP d3
COMPARER d3,d2
GOTOCMP 3744,>
SETV d2,0
GOTO 3745
SETV d2,1
COMPAREV d2,0
GOTOCMP 3757,==; Test 'if'
LOADD d2,1; if() #436 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 3824; if() #436 Body End
PUSHR d4; if() #437 Test AND if() #436 Else Start
LOADD d2,2; UsrFunc[int Sign(int)] Params Start
PUSHR d2
LOADD d2,1
POP d3
SUBR d3,d2
PUSHR d3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2335; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int Sign(int)] Params Start
SUBV d2,3.1416
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2335; UsrFunc[int Sign(int)] Call
POP d4
POP d3
COMPARER d3,d2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3801,==; Test 'if'
LOADD d2,3; if() #437 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 3824; if() #437 Body End
LOADD d2,3; if() #437 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2; if() #437 Else End
PUSHR d4; if() #436 Else End
LOADD d2,3; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1661; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,3; if() #728 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 3875,==; Test 'if'
LOADD d2,3; if() #728 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,3; if() #729 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 3875,==; Test 'if'
PUSHR d4; if() #729 Body Start
LOADD d2,3; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2126; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #729 Body End
POPARGS d5,0.0004; if() #728 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #730 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 3908,==; Test 'if'
LOADD d2,1; if() #730 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #730 Body End
LOADD d2,1; if() #438 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 4007,==; Test 'if'
LOADD d2,1; if() #438 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #731 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4209,==; Test 'if'
LOADD d2,1; if() #439 Test AND if() #731 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 3966,==; Test 'if'
PUSHR d4; if() #439 Body Start
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2126; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4209; if() #439 Body End
LOADD d2,1; if() #439 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #439 Else End
GOTO 4209; if() #731 Body End AND if() #438 Body End
LOADD d2,1; if() #438 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #732 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4107,==; Test 'if'
SETV d2,45; if() #732 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4
LOADD d2,1; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1661; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,1; if() #733 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4107,==; Test 'if'
PUSHR d4; if() #733 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1769; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #733 Body End
LOADD d2,1; if() #732 Body End AND if() #440 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4133,==; Test 'if'
LOADD d2,1; if() #440 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4209; if() #440 Body End
LOADD d2,1; if() #734 Test AND if() #440 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4209,==; Test 'if'
LOADD d2,1; if() #734 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.2000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORED d2,0; if() #441 Test
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4179,==; Test 'if'
PUSHR d4; if() #441 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2255; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4209; if() #441 Body End
LOADD d2,0; if() #442 Test AND if() #441 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4191,==; Test 'if'
PUSHR d4; if() #442 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2255; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4209; if() #442 Body End
LOADD d2,0; if() #443 Test AND if() #442 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4203,==; Test 'if'
PUSHR d4; if() #443 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2255; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4209; if() #443 Body End
PUSHR d4; if() #443 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2255; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #443 Else End
POPARGS d5,0.0002; if() #442 Else End AND if() #441 Else End AND if() #734 Body End AND if() #440 Else End AND if() #438 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(EWeapon)] Body End
SETR d4,SP; Func[void __UpdateEWMRandom(EWeapon)] Body Start
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int Randf(int)] Params Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,2
SETV d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
MULTR d2,d3
PUSHR d2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.0038; UsrFunc[int Randf(int)] Call
POP d4
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1661; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,0; if() #735 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4283,==; Test 'if'
PUSHR d4; if() #735 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1769; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #735 Body End
LOADD d2,0; if() #736 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 4329,==; Test 'if'
LOADD d2,0; if() #736 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #737 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 4329,==; Test 'if'
PUSHR d4; if() #737 Body Start
LOADD d2,0; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2126; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #737 Body End
POP d5; if() #736 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #738 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4362,==; Test 'if'
LOADD d2,1; if() #738 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #738 Body End
LOADD d2,1; if() #444 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 4461,==; Test 'if'
LOADD d2,1; if() #444 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #739 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4640,==; Test 'if'
LOADD d2,1; if() #445 Test AND if() #739 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 4420,==; Test 'if'
PUSHR d4; if() #445 Body Start
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2126; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4640; if() #445 Body End
LOADD d2,1; if() #445 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #445 Else End
GOTO 4640; if() #739 Body End AND if() #444 Body End
LOADD d2,1; if() #444 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #740 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4551,==; Test 'if'
SETV d2,45; if() #740 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d3,62832; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
MULTV d2,0.0001
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1661; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,1; if() #741 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4551,==; Test 'if'
PUSHR d4; if() #741 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1769; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #741 Body End
LOADD d2,1; if() #740 Body End AND if() #446 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4577,==; Test 'if'
LOADD d2,1; if() #446 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4640; if() #446 Body End
LOADD d2,1; if() #742 Test AND if() #446 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 4640,==; Test 'if'
LOADD d2,1; if() #742 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORED d2,0; if() #447 Test
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4610,==; Test 'if'
PUSHR d4; if() #447 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2255; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4640; if() #447 Body End
LOADD d2,0; if() #448 Test AND if() #447 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4622,==; Test 'if'
PUSHR d4; if() #448 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2255; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4640; if() #448 Body End
LOADD d2,0; if() #449 Test AND if() #448 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4634,==; Test 'if'
PUSHR d4; if() #449 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2255; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4640; if() #449 Body End
PUSHR d4; if() #449 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2255; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #449 Else End
POPARGS d5,0.0002; if() #448 Else End AND if() #447 Else End AND if() #742 Body End AND if() #446 Else End AND if() #444 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #457 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4757,==; Test 'if'
LOADD d2,1; if() #457 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5114; if() #457 Body End
LOADD d2,0; if() #458 Test AND if() #457 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4791,==; Test 'if'
LOADD d2,1; if() #458 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5114; if() #458 Body End
LOADD d2,0; if() #459 Test AND if() #458 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4826,==; Test 'if'
LOADD d2,1; if() #459 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5114; if() #459 Body End
LOADD d2,0; if() #460 Test AND if() #459 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4860,==; Test 'if'
LOADD d2,1; if() #460 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5114; if() #460 Body End
LOADD d2,0; if() #461 Test AND if() #460 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4926,==; Test 'if'
LOADD d2,1; if() #461 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5114; if() #461 Body End
LOADD d2,0; if() #462 Test AND if() #461 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 4991,==; Test 'if'
LOADD d2,1; if() #462 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5114; if() #462 Body End
LOADD d2,0; if() #463 Test AND if() #462 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5056,==; Test 'if'
LOADD d2,1; if() #463 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5114; if() #463 Body End
LOADD d2,1; if() #463 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #463 Else End
LOADD d2,1; if() #462 Else End AND if() #461 Else End AND if() #460 Else End AND if() #459 Else End AND if() #458 Else End AND if() #457 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOADD d2,1; if() #743 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
GOTOCMP 5205,!=
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
GOTOCMP 5205,==
SETV d2,1
GOTO 5206
SETV d2,0
COMPAREV d2,0
GOTOCMP 5238,==; Test 'if'
LOADD d2,1; if() #743 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #743 Body End
LOADD d2,1; InlineFunc[untyped Max(untyped, untyped)] Params Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHVARGR d2
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #451 Test AND if(true) #450 [Opt:AlwaysOn]
CALLFUNC 0.2065; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOCMP 5290,!=; Test 'unless'
LOADD d2,1; unless() #451 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5306; unless() #451 Body End
LOADD d2,1; unless() #451 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 176,d2
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; unless() #451 Else End
LOADD d2,1; if() #452 Test
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 5369,==; Test 'if'
PUSHR d4; unless() #744 Test AND if(true) #453 [Opt:AlwaysOn] AND if() #452 Body Start
LOADD d2,1; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9415; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 5477,!=; Test 'unless'
LOADD d2,1; InlineFunc[untyped Max(untyped, untyped)] Params Start AND unless() #744 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; unless() #744 Body End
GOTO 5477; if() #452 Body End
LOADD d2,1; if() #454 Test AND if() #452 Else Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
GOTOCMP 5426,==; Test 'if'
LOADD d2,1; if() #455 Test AND if() #454 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 5423,==; Test 'if'
LOADD d2,1; if() #455 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 5428; if() #455 Body End
SETV d2,1; if() #455 Else Start
STORED d2,0; if() #455 Else End
GOTO 5428; if() #454 Body End
SETV d2,1; if() #454 Else Start
STORED d2,0; if() #454 Else End
LOADD d2,0; if() #745 Test
COMPAREV d2,0
GOTOCMP 5477,==; Test 'if'
LOADD d2,1; if() #456 Test AND if() #745 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOCMP 5456,==; Test 'if'
SETV d2,0; if() #456 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2126; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 5477; if() #456 Body End
SETV d2,0; if() #456 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #456 Else End
POPARGS d5,0.0002; if() #745 Body End AND if() #452 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #431 Test AND if(true) #430 [Opt:AlwaysOn]
CALLFUNC 0.2065; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOCMP 5540,!=; Test 'unless'
LOADD d2,1; unless() #431 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5570; unless() #431 Body End
LOADD d2,1; unless() #431 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; unless() #431 Else End
LOADD d2,1; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,0.1600
PUSHVARGR d2
PUSHVARGV 3.2000; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #723 Test AND if(true) #432 [Opt:AlwaysOn]
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 5742,==; Test 'if'
PUSHR d4; unless() #724 Test AND if() #723 Body Start
LOADD d2,1; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9415; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOCMP 5742,!=; Test 'unless'
LOADD d2,1; if() #433 Test AND unless() #724 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 5691,==; Test 'if'
LOADD d2,1; if() #434 Test AND if() #433 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 5688,==; Test 'if'
LOADD d2,1; if() #434 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 5693; if() #434 Body End
SETV d2,1; if() #434 Else Start
STORED d2,0; if() #434 Else End
GOTO 5693; if() #433 Body End
SETV d2,1; if() #433 Else Start
STORED d2,0; if() #433 Else End
LOADD d2,0; if() #725 Test
COMPAREV d2,0
GOTOCMP 5742,==; Test 'if'
LOADD d2,1; if() #435 Test AND if() #725 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOCMP 5721,==; Test 'if'
SETV d2,0; if() #435 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2126; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 5742; if() #435 Body End
SETV d2,0; if() #435 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #435 Else End
POPARGS d5,0.0002; if() #725 Body End AND unless() #724 Body End AND if() #723 Body End
RETURNFUNC; Func[void __UpdateEWMFall(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #415 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5859,==; Test 'if'
LOADD d2,1; if() #415 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6216; if() #415 Body End
LOADD d2,0; if() #416 Test AND if() #415 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5893,==; Test 'if'
LOADD d2,1; if() #416 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6216; if() #416 Body End
LOADD d2,0; if() #417 Test AND if() #416 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5928,==; Test 'if'
LOADD d2,1; if() #417 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6216; if() #417 Body End
LOADD d2,0; if() #418 Test AND if() #417 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 5962,==; Test 'if'
LOADD d2,1; if() #418 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6216; if() #418 Body End
LOADD d2,0; if() #419 Test AND if() #418 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6028,==; Test 'if'
LOADD d2,1; if() #419 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6216; if() #419 Body End
LOADD d2,0; if() #420 Test AND if() #419 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6093,==; Test 'if'
LOADD d2,1; if() #420 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6216; if() #420 Body End
LOADD d2,0; if() #421 Test AND if() #420 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6158,==; Test 'if'
LOADD d2,1; if() #421 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6216; if() #421 Body End
LOADD d2,1; if() #421 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #421 Else End
LOADD d2,1; if() #420 Else End AND if() #419 Else End AND if() #418 Else End AND if() #417 Else End AND if() #416 Else End AND if() #415 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1; if() #422 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,16
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 6340,==; Test 'if'
LOADD d2,1; if() #422 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6359; if() #422 Body End
LOADD d2,1; if() #422 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #422 Else End
LOADD d2,0; if() #423 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6394,==; Test 'if'
LOADD d2,1; if() #423 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6751; if() #423 Body End
LOADD d2,0; if() #424 Test AND if() #423 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6428,==; Test 'if'
LOADD d2,1; if() #424 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6751; if() #424 Body End
LOADD d2,0; if() #425 Test AND if() #424 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6463,==; Test 'if'
LOADD d2,1; if() #425 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6751; if() #425 Body End
LOADD d2,0; if() #426 Test AND if() #425 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6497,==; Test 'if'
LOADD d2,1; if() #426 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6751; if() #426 Body End
LOADD d2,0; if() #427 Test AND if() #426 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6563,==; Test 'if'
LOADD d2,1; if() #427 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6751; if() #427 Body End
LOADD d2,0; if() #428 Test AND if() #427 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6628,==; Test 'if'
LOADD d2,1; if() #428 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6751; if() #428 Body End
LOADD d2,0; if() #429 Test AND if() #428 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6693,==; Test 'if'
LOADD d2,1; if() #429 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6751; if() #429 Body End
LOADD d2,1; if() #429 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #429 Else End
LOADD d2,1; if() #428 Else End AND if() #427 Else End AND if() #426 Else End AND if() #425 Else End AND if() #424 Else End AND if() #423 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(EWeapon)] Body End
PUSHARGSV 0,0.0011; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body Start
SETR d4,SP
LOADD d2,11; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,10
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #165 setup
STORED d2,3
LOADD d2,3; for() #165 LoopTest
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 6835,==; for() #165 TestFail?
LOADD d2,3; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #165 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,9; if() #594 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,768
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 6831,!=; Test 'if' AND continue 1; AND if() #594 Body
LOADD d2,9; if() #595 Test
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,10
POP d3
COMPARER d3,d2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6835,!=; Test 'if' AND break 1; AND if() #595 Body
LOADD d2,3; for() #165 Body End AND for() #165 LoopIncrement
SUBV d2,1
STORED d2,3
GOTO 6796; for() #165 End
LOADD d2,3; if() #596 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6861,==; Test 'if'
ALLOCATEMEMV d2,43; if() #596 Body Start
STORED d2,0
WRITEPODSTRING d2,"ghost.zh: Failed to find prototype eweapon"
LOADD d2,0; InlineFunc[void TraceS(int)] Params Start
SETR d0,d2; InlineFunc[void TraceS(int)] Params End
TRACE6 d3; InlineFunc[void TraceS(int)] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV d2,0
PUSHR d2
LOADD d2,11
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
LOADD d3,0
DEALLOCATEMEMR d3
GOTO 7169; return (Void)
LOADD d3,0
DEALLOCATEMEMR d3; if() #596 Body End
LOADD d2,11
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MODV d2,10
SUBV d2,6.2832
STORED d2,5
LOADD d2,11
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,10
POP d3
SUBR d3,d2
SETR d2,d3
MULTV d2,10000
STORED d2,4
LOADD d2,11
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d2,d3
DIVV d2,100
RSHIFTV d2,0
STORED d2,8
LOADD d2,11; if() #362 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 6951,==; Test 'if'
LOADD d2,11; if() #362 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,7
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,6
GOTO 6963; if() #362 Body End
LOADD d2,11; if() #362 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
ADDV d2,8
STORED d2,7
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
ADDV d2,8
STORED d2,6; if() #362 Else End
LOADD d2,8; if() #363 Test
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7015,==; Test 'if'
LOADD d2,1; for() #166 LoopTest AND if() #363 Body Start
PUSHR d2
LOADD d2,4
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7006,==; for() #166 TestFail?
PUSHR d4; for() #166 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,1
MULTV d2,6.2832
SETV d2,6.2832
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,4
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.8920; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #166 Body End
LOADD d2,1; for() #166 LoopIncrement
ADDV d2,1
STORED d2,1
GOTO 6968; for() #166 End
LOADD d2,9; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7160; if() #363 Body End
LOADD d2,8; if() #364 Test AND if() #363 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7055,==; Test 'if'
STOREDV 0,1; for() #167 setup AND if() #364 Body Start
LOADD d2,1; for() #167 LoopTest
PUSHR d2
LOADD d2,4
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7046,==; for() #167 TestFail?
PUSHR d4; for() #167 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2
SETV d3,31416; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
DIVV d2,5000
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.8920; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #167 Body End
LOADD d2,1; for() #167 LoopIncrement
ADDV d2,1
STORED d2,1
GOTO 7021; for() #167 End
LOADD d2,9; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7160; if() #364 Body End
LOADD d2,4; if() #365 Test AND if() #364 Else Start
COMPAREV d2,1
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 7121,==; Test 'if'
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start AND if() #365 Body Start
ADDV d2,8
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOADD d2,6
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2
LOADD d2,5
DIVV d2,2
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
LOADD d2,0; for() #168 LoopTest
PUSHR d2
LOADD d2,4
POP d3
COMPARER d3,d2
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7152,==; for() #168 TestFail?
PUSHR d4; for() #168 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,0
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,4
SUBV d2,1
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.8920; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #168 Body End
LOADD d2,0; for() #168 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7083; for() #168 End
GOTO 7152; if() #365 Body End
LOADD d2,4; if() #597 Test AND if() #365 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7152,==; Test 'if'
PUSHR d4; if() #597 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOADD d2,6
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.8920; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; if() #597 Body End
LOADD d2,9; if() #365 Else End AND InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #364 Else End
SETV d2,0; if() #363 Else End
PUSHR d2
LOADD d2,11
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #357 Test
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 7260,==; Test 'if'
PUSHR d4; if() #357 Body Start
LOADD d2,1; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1661; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
SETV d2,300
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7335; if() #357 Body End
LOADD d2,1; if() #358 Test AND if() #357 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOCMP 7285,==; Test 'if'
LOADD d2,1; if() #358 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1661; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
GOTO 7335; if() #358 Body End
LOADD d2,1; if() #358 Else Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,6
STORED d2,0; if() #359 Test
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7305,==; Test 'if'
PUSHR d4; if() #359 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2255; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7335; if() #359 Body End
LOADD d2,0; if() #360 Test AND if() #359 Else Start
COMPAREV d2,4
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7317,==; Test 'if'
PUSHR d4; if() #360 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2255; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7335; if() #360 Body End
LOADD d2,0; if() #361 Test AND if() #360 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7329,==; Test 'if'
PUSHR d4; if() #361 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2255; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7335; if() #361 Body End
PUSHR d4; if() #361 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2255; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #361 Else End
POPARGS d5,0.0002; if() #360 Else End AND if() #359 Else End AND if() #358 Else End AND if() #357 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 135; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 136; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body Start
SETR d4,SP
LOADD d2,0; for() #155 LoopTest
COMPAREV d2,4
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7471,==; for() #155 TestFail?
PUSHR d4; for() #155 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #155 Body End
LOADD d2,0; for() #155 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7427; for() #155 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body Start
SETR d4,SP
STOREDV 4,0; for() #154 setup
LOADD d2,0; for() #154 LoopTest
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7529,==; for() #154 TestFail?
PUSHR d4; for() #154 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #154 Body End
LOADD d2,0; for() #154 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7485; for() #154 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body Start
SETR d4,SP
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #355 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7593,==; Test 'if'
LOADD d2,0; for() #156 LoopTest AND if() #355 Body Start
COMPAREV d2,4
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7638,==; for() #156 TestFail?
PUSHR d4; for() #156 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #156 Body End
LOADD d2,0; for() #156 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7548; for() #156 End
GOTO 7638; if() #355 Body End
STOREDV 4,0; for() #157 setup AND if() #355 Else Start
LOADD d2,0; for() #157 LoopTest
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7638,==; for() #157 TestFail?
PUSHR d4; for() #157 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #157 Body End
LOADD d2,0; for() #157 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7594; for() #157 End
SETV d2,0; if() #355 Else End
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body Start
SETR d4,SP
LOADD d2,0; for() #162 LoopTest
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7695,==; for() #162 TestFail?
PUSHR d4; for() #162 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #162 Body End
LOADD d2,0; for() #162 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7651; for() #162 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body Start
SETR d4,SP
LOADD d2,0; for() #159 LoopTest
COMPAREV d2,4
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7752,==; for() #159 TestFail?
PUSHR d4; for() #159 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #159 Body End
LOADD d2,0; for() #159 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7708; for() #159 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body Start
SETR d4,SP
STOREDV 4,0; for() #158 setup
LOADD d2,0; for() #158 LoopTest
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7812,==; for() #158 TestFail?
PUSHR d4; for() #158 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #158 Body End
LOADD d2,0; for() #158 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7768; for() #158 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body Start
SETR d4,SP
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #356 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 7878,==; Test 'if'
LOADD d2,0; for() #160 LoopTest AND if() #356 Body Start
COMPAREV d2,4
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7923,==; for() #160 TestFail?
PUSHR d4; for() #160 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #160 Body End
LOADD d2,0; for() #160 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7833; for() #160 End
GOTO 7923; if() #356 Body End
STOREDV 4,0; for() #161 setup AND if() #356 Else Start
LOADD d2,0; for() #161 LoopTest
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7923,==; for() #161 TestFail?
PUSHR d4; for() #161 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #161 Body End
LOADD d2,0; for() #161 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7879; for() #161 End
SETV d2,13; if() #356 Else End AND InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body Start
SETR d4,SP
LOADD d2,0; for() #163 LoopTest
COMPAREV d2,4
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 7982,==; for() #163 TestFail?
PUSHR d4; for() #163 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #163 Body End
LOADD d2,0; for() #163 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7938; for() #163 End
STOREDV 4,0; for() #164 setup
LOADD d2,0; for() #164 LoopTest
COMPAREV d2,8
SETCMP d2,I<
COMPAREV d2,0
GOTOCMP 8027,==; for() #164 TestFail?
PUSHR d4; for() #164 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #164 Body End
LOADD d2,0; for() #164 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 7983; for() #164 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; InlineFunc[NPC Screen->CreateNPC(int)] Params Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[NPC Screen->CreateNPC(int)] Params End
CREATENPCR d2; InlineFunc[NPC Screen->CreateNPC(int)] Body Start
SETR d2,REFNPC; InlineFunc[NPC Screen->CreateNPC(int)] Body End
STORED d2,0
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body Start
PUSHR d4
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1294; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body End
PUSHARGSV 0,0.0005; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body Start
SETR d4,SP
PUSHR d4
CALLFUNC 0.1243; UsrFunc[int FindUnusedFFC()] Call
POP d4
STORED d2,4; if() #598 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8158,==; Test 'if'
SETV d2,0; if() #598 Body Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 8296; return (Void) AND if() #598 Body End
LOADD d2,4; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,3
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #169 setup
STORED d2,0
LOADD d2,0; for() #169 LoopTest
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 8199,==; for() #169 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #169 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,2; if() #599 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,512
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8195,!=; Test 'if' AND continue 1; AND if() #599 Body
LOADD d2,1; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHVARGR d2
LOADD d2,2
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
PUSHVARGR EWPNMISCD; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
STORED d2,1; for() #169 Body End
LOADD d2,0; for() #169 LoopIncrement
SUBV d2,1
STORED d2,0
GOTO 8163; for() #169 End
LOADD d2,1
SUBV d2,1
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
SETV d2,3
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,5
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,1024
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
PUSHR d4
LOADD d2,5; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0819; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
LOADD d2,5; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0842; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
LOADD d2,5
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOADD d2,1
SUBV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
POPARGS d5,0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body End
PUSHARGSV 0,0.0002; Func[void UpdateEWeapons()] Body Start
SETR d4,SP
SETR d2,LINKACTION; unless() #348 Test
COMPAREV d2,4
GOTOCMP 8314,==
SETR d2,LINKACTION
COMPAREV d2,5
GOTOCMP 8314,==
SETR d2,LINKACTION
COMPAREV d2,14
GOTOCMP 8314,==
SETR d2,LINKACTION
COMPAREV d2,15
GOTOCMP 8314,==
SETV d2,0
GOTO 8315
SETV d2,1
COMPAREV d2,0
GOTOCMP 8363,!=; Test 'unless'
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #149 setup AND unless() #348 Body Start
STORED d2,0
LOADD d2,0; for() #149 LoopTest
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 8408,==; for() #149 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #149 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,1; if() #573 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
GOTOCMP 8350,==
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
GOTOCMP 8350,!=
SETV d2,0
GOTO 8351
SETV d2,1
COMPAREV d2,0
GOTOCMP 8358,!=; Test 'if' AND continue 1; AND if() #573 Body
PUSHR d4
LOADD d2,1; UsrFunc[void UpdateEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void UpdateEWeapon(EWeapon)] Params End
CALLFUNC 0.2358; UsrFunc[void UpdateEWeapon(EWeapon)] Call
POP d4; for() #149 Body End
LOADD d2,0; for() #149 LoopIncrement
SUBV d2,1
STORED d2,0
GOTO 8319; for() #149 End
GOTO 8408; unless() #348 Body End
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #150 setup AND unless() #348 Else Start
STORED d2,0
LOADD d2,0; for() #150 LoopTest
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 8408,==; for() #150 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #150 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,1; if() #574 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
GOTOCMP 8396,==
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
GOTOCMP 8396,!=
SETV d2,0
GOTO 8397
SETV d2,1
COMPAREV d2,0
GOTOCMP 8404,!=; Test 'if' AND continue 1; AND if() #574 Body
PUSHR d4
LOADD d2,1; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params End
CALLFUNC 0.8410; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Call
POP d4; for() #150 Body End
LOADD d2,0; for() #150 LoopIncrement
SUBV d2,1
STORED d2,0
GOTO 8365; for() #150 End
POPARGS d5,0.0002; unless() #348 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0,0.0002; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body Start
SETR d4,SP
LOADD d2,2; if() #746 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8437,==; Test 'if'
LOADD d2,2; if() #747 Test AND if() #746 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 8437,==; Test 'if'
PUSHR d4; if() #747 Body Start
LOADD d2,2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
CALLFUNC 0.0924; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #747 Body End
LOADD d2,2; if() #746 Body End AND if() #464 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8627,==; Test 'if'
SETV d2,1000; if() #464 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
LOADD d2,2; if() #748 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
GOTOCMP 8477,==
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
GOTOCMP 8477,==
SETV d2,1
GOTO 8478
SETV d2,0
COMPAREV d2,0
GOTOCMP 8684,!=; Test 'if' AND return (Void) AND if() #748 Body
LOADD d2,2; if() #465 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOCMP 8493,==; Test 'if'
LOADD d2,2; InlineFunc[int RadtoDeg(int)] Params Start AND if() #465 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORED d2,1
GOTO 8558; if() #465 Body End
PUSHR d4; if() #465 Else Start
LOADD d2,2; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.1992; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0; if() #466 Test
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8508,==; Test 'if'
SETV d2,-90; if() #466 Body Start
STORED d2,1
GOTO 8558; if() #466 Body End
LOADD d2,0; if() #467 Test AND if() #466 Else Start
COMPAREV d2,5
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8516,==; Test 'if'
SETV d2,-45; if() #467 Body Start
STORED d2,1
GOTO 8558; if() #467 Body End
LOADD d2,0; if() #468 Test AND if() #467 Else Start
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8524,==; Test 'if'
SETV d2,0; if() #468 Body Start
STORED d2,1
GOTO 8558; if() #468 Body End
LOADD d2,0; if() #469 Test AND if() #468 Else Start
COMPAREV d2,7
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8532,==; Test 'if'
SETV d2,45; if() #469 Body Start
STORED d2,1
GOTO 8558; if() #469 Body End
LOADD d2,0; if() #470 Test AND if() #469 Else Start
COMPAREV d2,1
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8540,==; Test 'if'
SETV d2,90; if() #470 Body Start
STORED d2,1
GOTO 8558; if() #470 Body End
LOADD d2,0; if() #471 Test AND if() #470 Else Start
COMPAREV d2,6
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8548,==; Test 'if'
SETV d2,135; if() #471 Body Start
STORED d2,1
GOTO 8558; if() #471 Body End
LOADD d2,0; if() #472 Test AND if() #471 Else Start
COMPAREV d2,2
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8556,==; Test 'if'
SETV d2,180; if() #472 Body Start
STORED d2,1
GOTO 8558; if() #472 Body End
SETV d2,-135; if() #472 Else Start
STORED d2,1; if() #472 Else End
STOREDV 0,0; if() #471 Else End AND if() #470 Else End AND if() #469 Else End AND if() #468 Else End AND if() #467 Else End AND if() #466 Else End AND if() #465 Else End
LOADD d2,1; if() #473 Test
COMPAREV d2,0
GOTOCMP 8567,<
LOADD d2,1
COMPAREV d2,180
GOTOCMP 8567,>=
SETV d2,1
GOTO 8568
SETV d2,0
COMPAREV d2,0
GOTOCMP 8573,==; Test 'if'
SETV d2,0; if() #473 Body Start
STORED d2,0
GOTO 8575; if() #473 Body End
SETV d2,2; if() #473 Else Start
STORED d2,0; if() #473 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
PUSHARGSV 1,0.0002
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 8684; if() #464 Body End
LOADD d2,2; if() #749 Test AND if() #464 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8667,==; Test 'if'
SETR d2,gd27; if() #474 Test AND if() #749 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8658,==; Test 'if'
SETV d2,1000; if() #474 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 8667; if() #474 Body End
SETV d2,0; if() #474 Else Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #474 Else End
LOADD d2,2; if() #749 Body End AND if() #750 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8684,==; Test 'if'
PUSHR d4; if() #750 Body Start
LOADD d2,2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1769; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #750 Body End
POPARGS d5,0.0003; if() #464 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body End
SETR d4,SP; Func[void UpdateGhostZH1()] Body Start
PUSHR d4
CALLFUNC 0.8298; UsrFunc[void UpdateEWeapons()] Call
PEEK d4
CALLFUNC 0.0865; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK d4
CALLFUNC 0.8695; UsrFunc[void UpdateGhostZHData1()] Call
POP d4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR d4,SP
SETR d2,CURDMAP; InlineFunc[int Game->GetCurDMap()] Body
LSHIFTV d2,8
PUSHR d2
SETR d2,CURDSCR; InlineFunc[int Game->GetCurDMapScreen()] Body
POP d3
ADDR d2,d3
STORED d2,0
SETR d2,gd27; if() #349 Test
PUSHR d2
POP d0
READPODARRAYV d2,7
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 8728,==; Test 'if'
SETV d2,0; if() #349 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
LOADD d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 7,d2
GOTO 8746; if() #349 Body End
SETR d2,gd27; if() #575 Test AND if() #349 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 8746,==; Test 'if'
SETR d2,gd27; if() #575 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,6
SUBV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2; if() #575 Body End
POP d5; if() #349 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR d4,SP; Func[void UpdateGhostZH2()] Body Start
PUSHR d4
CALLFUNC 0.0990; UsrFunc[void DrawGhostFFCs()] Call
PEEK d4
CALLFUNC 0.0065; UsrFunc[void AutoGhost()] Call
PEEK d4
CALLFUNC 0.8757; UsrFunc[void UpdateGhostZHData2()] Call
POP d4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR d4,SP; Func[void UpdateGhostZHData2()] Body Start
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,1
ADDV d2,1
MODV d2,8
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETR d2,gd27; if() #350 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8789,==; Test 'if'
SETR d2,gd27; if() #350 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ORV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
GOTO 8799; if() #350 Body End
SETR d2,gd27; if() #350 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,-2
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #350 Else End
SETR d2,gd27; if(true) #576 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,3
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETR d2,gd27; if() #577 Test
PUSHR d2
POP d0
READPODARRAYV d2,3
COMPAREV d2,8
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 8834,==; Test 'if'
SETV d2,0; if() #577 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2; if() #577 Body End
SETR d2,gd27; if(true) #578 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,5
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETR d2,gd27; if() #579 Test
PUSHR d2
POP d0
READPODARRAYV d2,5
COMPAREV d2,8
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 8869,==; Test 'if'
SETV d2,0; if() #579 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2; if() #579 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR d4,SP; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOADD d2,1; if() #693 Test
COMPAREV d2,97
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 8883,==; Test 'if'
LOADD d2,1; if() #694 Test AND if() #693 Body Start
COMPAREV d2,122
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 8883,==; Test 'if'
SETV d2,1; return Start AND if() #694 Body Start
GOTO 8918; return End AND if() #694 Body End
LOADD d2,1; if() #693 Body End AND if() #695 Test
COMPAREV d2,65
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 8895,==; Test 'if'
LOADD d2,1; if() #696 Test AND if() #695 Body Start
COMPAREV d2,90
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 8895,==; Test 'if'
SETV d2,1; return Start AND if() #696 Body Start
GOTO 8918; return End AND if() #696 Body End
LOADD d2,1; if() #695 Body End AND if() #697 Test
COMPAREV d2,95
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 8902,==; Test 'if'
SETV d2,1; return Start AND if() #697 Body Start
GOTO 8918; return End AND if() #697 Body End
LOADD d2,0; unless() #698 Test
COMPAREV d2,0
GOTOCMP 8917,!=; Test 'unless'
LOADD d2,1; if() #699 Test AND unless() #698 Body Start
COMPAREV d2,48
SETCMP d2,I>=
COMPAREV d2,0
GOTOCMP 8917,==; Test 'if'
LOADD d2,1; if() #700 Test AND if() #699 Body Start
COMPAREV d2,57
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 8917,==; Test 'if'
SETV d2,1; return Start AND if() #700 Body Start
GOTO 8918; return End AND if() #700 Body End
SETV d2,0; if() #699 Body End AND unless() #698 Body End AND return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body Start
SETR d4,SP
LOADD d2,4; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNID; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params End
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORED d2,0
LOADD d2,4; if() #590 Test
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETCMP d2,I>
COMPAREV d2,0
GOTOCMP 8952,==; Test 'if'
LOADD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #590 Body Start
PUSHR d2
LOADD d2,4
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #590 Body End
LOADD d2,4; if() #353 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETCMP d2,I==
COMPAREV d2,0
GOTOCMP 9088,==; Test 'if'
SETV d2,3; if() #353 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNEXTEND,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTXSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTYSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHXSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYSZ,d2
LOADD d2,3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
GOTO 9108; if() #353 Body End
LOADD d2,3; if() #353 Else Start
SUBV d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,2
SUBV d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; if() #353 Else End
LOADD d2,4
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOADD d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1661; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4; if() #354 Test
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
GOTOCMP 9245,!=
LOADD d2,4
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-1
GOTOCMP 9245,!=
SETV d2,1
GOTO 9246
SETV d2,0
COMPAREV d2,0
GOTOCMP 9265,==; Test 'if'
PUSHR d4; if() #354 Body Start
LOADD d2,0; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params Start
PUSHR d2; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params End
CALLFUNC 0.2148; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 9283; if() #354 Body End
LOADD d2,4; if() #354 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #354 Else End
LOADD d2,4
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,11
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,-257
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #591 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,32
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 9396,==; Test 'if'
SETV d2,0; if() #591 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #591 Body End
LOADD d2,0; if() #592 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 9413,==; Test 'if'
PUSHR d4; if() #592 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1769; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #592 Body End
POPARGS d5,0.0005
RETURNFUNC; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR d4,SP
LOADD d2,0; for() #189 LoopTest
PUSHR d2
LOADD d2,1
SUBV d2,1
POP d3
COMPARER d3,d2
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 9463,==; for() #189 TestFail?
LOADD d2,6; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #761 Test AND for() #189 Body Start
PUSHR d2
LOADD d2,4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOCMP 9459,==; Test 'if'
SETV d2,0; if() #762 Test AND if() #761 Body Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
COMPAREV d2,0
GOTOCMP 9459,==; Test 'if'
SETV d2,1; return Start AND if() #762 Body Start
GOTO 9464; return End AND if() #762 Body End
LOADD d2,0; if() #761 Body End AND for() #189 Body End AND for() #189 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 9417; for() #189 End
SETV d2,0; return Start
POPARGS d5,0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End


PUSHR d0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR d4,SP
LOADD d2,1; if() #527 Test
COMPAREV d2,0
SETCMP d2,I<=
COMPAREV d2,0
GOTOCMP 16,==; Test 'if'
SETV d2,-1; if() #527 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
GOTO 22; if() #527 Body End
LOADD d2,1; if() #527 Else Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2; if() #527 Else End
POPARGS d5,0.0002
QUIT; void run(int) Body End


SETV gd9,0; void run() Body Start
SETV gd10,0
SETV gd12,0
SETV gd11,0
SETV gd5,0
SETV gd15,0
SETV gd6,0
SETV gd14,0
SETV gd13,0
SETV gd7,0
SETV gd8,0
SETV gd2,0
SETV gd3,0
SETV gd4,0
ALLOCATEGMEMV d2,25
SETR gd26,d2
SETV gd16,0
SETV gd17,0
SETV gd21,0
SETV gd18,0
SETV gd22,0
SETV gd19,0
SETV gd20,0
ALLOCATEGMEMV d2,32
SETR gd25,d2
SETV gd23,0
SETV gd24,0
ALLOCATEGMEMV d2,8
SETR gd27,d2
ALLOCATEGMEMV d2,1000
SETR gd28,d2
ALLOCATEGMEMV d2,4096
SETR gd1,d2
QUIT; void run() Body End