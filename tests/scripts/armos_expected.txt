Compiling 'armos.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR d0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0,0.0003
SETR d4,SP
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
SETV d2,0
STORED d2,0
PUSHR d4
LOADD d2,3; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params End
CALLFUNC 0.4436; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Call
POP d4
STORED d2,2
PUSHR d4
PUSHV 89; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3323; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 3; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3323; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3323; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4
LOADD d2,2; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
PUSHR d4
LOADD d2,3; UsrFunc[void SpawnAnimation(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[void SpawnAnimation(FFC, NPC)] Params End
CALLFUNC 0.5980; UsrFunc[void SpawnAnimation(FFC, NPC)] Call
POP d4
LOADD d2,2
PUSHR d2
POP REFNPC
SETR d2,NPCSTEP
DIVV d2,100
STORED d2,1
LOADD d2,2
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,0
SETR d2,gd4; if() #11122 Test AND while(true) #11120 Body [Opt:AlwaysOn] Start
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 67
SETR d2,gd6
COMPAREV d2,0
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 75; Test 'if'
SETV d2,1.5000; if() #11122 Body Start
SETR gd6,d2
LOADD d2,0; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #11122 Body End
PUSHR d4
LOADD d2,1; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params End
CALLFUNC 0.4608; UsrFunc[void Ghost_MoveTowardLink(int, int)] Call
PEEK d4
LOADD d2,3; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params End
CALLFUNC 0.4675; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Call
POP d4; while(true) #11120 Body [Opt:AlwaysOn] End
GOTO 58; while() #11120 End
SETR d4,SP; [Opt:NeverRet] AND void run(int) Body End AND Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR d4,SP; Func[int AngleDir8(int)] Body Start
LOADD d2,0; if() #3592 Test
COMPAREV d2,157.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 120
LOADD d2,0
COMPAREV d2,112.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 126; Test 'if'
SETV d2,6; return Start AND if() #3592 Body Start
GOTO 229; return End AND if() #3592 Body End
LOADD d2,0; if() #3595 Test AND if() #3592 Else Start
COMPAREV d2,112.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 137
LOADD d2,0
COMPAREV d2,67.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 143; Test 'if'
SETV d2,1; return Start AND if() #3595 Body Start
GOTO 229; return End AND if() #3595 Body End
LOADD d2,0; if() #3598 Test AND if() #3595 Else Start
COMPAREV d2,67.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 154
LOADD d2,0
COMPAREV d2,22.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 160; Test 'if'
SETV d2,7; return Start AND if() #3598 Body Start
GOTO 229; return End AND if() #3598 Body End
LOADD d2,0; if() #3601 Test AND if() #3598 Else Start
COMPAREV d2,22.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 171
LOADD d2,0
COMPAREV d2,-22.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 177; Test 'if'
SETV d2,3; return Start AND if() #3601 Body Start
GOTO 229; return End AND if() #3601 Body End
LOADD d2,0; if() #3604 Test AND if() #3601 Else Start
COMPAREV d2,-22.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 188
LOADD d2,0
COMPAREV d2,-67.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 194; Test 'if'
SETV d2,5; return Start AND if() #3604 Body Start
GOTO 229; return End AND if() #3604 Body End
LOADD d2,0; if() #3607 Test AND if() #3604 Else Start
COMPAREV d2,-67.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 205
LOADD d2,0
COMPAREV d2,-112.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 211; Test 'if'
SETV d2,0; return Start AND if() #3607 Body Start
GOTO 229; return End AND if() #3607 Body End
LOADD d2,0; if() #3610 Test AND if() #3607 Else Start
COMPAREV d2,-112.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 222
LOADD d2,0
COMPAREV d2,-157.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 228; Test 'if'
SETV d2,4; return Start AND if() #3610 Body Start
GOTO 229; return End AND if() #3610 Body End
SETV d2,2; return Start AND if() #3610 Else Start
POP d5; return End AND if() #3610 Else End AND if() #3607 Else End AND if() #3604 Else End AND if() #3601 Else End AND if() #3598 Else End AND if() #3595 Else End AND if() #3592 Else End
RETURNFUNC; Func[int AngleDir8(int)] Body End
SETR d4,SP; Func[int Clamp(int, int, int)] Body Start
LOADD d2,2; if() #3901 Test
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 245; Test 'if'
LOADD d2,1; if() #3901 Body Start
STORED d2,2
GOTO 257; if() #3901 Body End
LOADD d2,2; if() #3903 Test AND if() #3901 Else Start
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 257; Test 'if'
LOADD d2,0; if() #3903 Body Start
STORED d2,2; if() #3903 Body End
LOADD d2,2; if() #3901 Else End AND return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
SETR d4,SP; Func[bool ClockIsActive()] Body Start
SETR d2,gd27; return Start
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETFALSEI d2
RETURNFUNC; return End AND Func[bool ClockIsActive()] Body End
PUSHARGSV 0,0.0004; Func[int ComboAt(int, int)] Body Start
SETR d4,SP
SETR d2,REGION_ID; if() #4134 Test
COMPAREV d2,0
GOTOTRUE 328; Test 'if'
PUSHR d4; if() #4134 Body Start
LOADD d2,5; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
SETR d2,REGION_WIDTH
SUBV d2,1
PUSHR d2
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0353; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,5
PUSHR d4
LOADD d2,4; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
SETR d2,REGION_HEIGHT
SUBV d2,1
PUSHR d2
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0353; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,4
LOADD d2,5; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,256; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,3
LOADD d2,4; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,176; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
SETR d2,REGIONSCREENWIDTH
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
MULTV d2,176
STORED d2,1
LOADD d2,4
MODV d2,176
ANDV d2,240
PUSHR d2
LOADD d2,5
MODV d2,256
RSHIFTV d2,4
POP d3
ADDR d2,d3
STORED d2,0
LOADD d2,1; return Start
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
GOTO 351; return End AND if() #4134 Body End
PUSHR d4; if() #4134 Else Start
LOADD d2,5; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 255
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0353; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,5
PUSHR d4
LOADD d2,4; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 175
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0353; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,4
LOADD d2,4; return Start
ANDV d2,240
PUSHR d2
LOADD d2,5
RSHIFTV d2,4
POP d3
ADDR d2,d3
POPARGS d5,0.0006; return End AND if() #4134 Else End
RETURNFUNC; Func[int ComboAt(int, int)] Body End
SETR d4,SP; Func[int VBound(int, int, int)] Body Start
LOADD d2,2; if() #8843 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 367; Test 'if'
LOADD d2,0; if() #8843 Body Start
STORED d2,2
GOTO 379; if() #8843 Body End
LOADD d2,2; if() #8845 Test AND if() #8843 Else Start
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 379; Test 'if'
LOADD d2,1; if() #8845 Body Start
STORED d2,2; if() #8845 Body End
LOADD d2,2; if() #8843 Else End AND return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int VBound(int, int, int)] Body End
PUSHV 0; Func[bool IsWater(int)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP d0
SETR d2,COMBOTD
STORED d2,0
LOADD d2,0; if() #6314 Test
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 396; Test 'if'
SETV d2,1; return Start AND if() #6314 Body Start
GOTO 426; return End AND if() #6314 Body End
LOADD d2,0; if() #6315 Test
COMPAREV d2,18
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 403; Test 'if'
SETV d2,1; return Start AND if() #6315 Body Start
GOTO 426; return End AND if() #6315 Body End
LOADD d2,0; if() #6316 Test
COMPAREV d2,19
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 410; Test 'if'
SETV d2,1; return Start AND if() #6316 Body Start
GOTO 426; return End AND if() #6316 Body End
LOADD d2,0; if() #6317 Test
COMPAREV d2,86
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 419
LOADD d2,0
COMPAREV d2,91
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 425; Test 'if'
SETV d2,1; return Start AND if() #6317 Body Start
GOTO 426; return End AND if() #6317 Body End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool IsWater(int)] Body End
SETR d4,SP; Func[bool __IsPit(int)] Body Start
PUSHR d4; return Start
LOADD d2,0; UsrFunc[bool IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool IsPit(int)] Params End
CALLFUNC 0.5926; UsrFunc[bool IsPit(int)] Call
POP d4
POP d5; return End
RETURNFUNC; Func[bool __IsPit(int)] Body End
SETR d4,SP; Func[bool Ghost_CanMove(int, int, int)] Body Start
PUSHR d4; return Start
LOADD d2,2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd4
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0454; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
POPARGS d5,0.0003; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int)] Body End
SETR d4,SP; Func[bool Ghost_CanMove(int, int, int, bool)] Body Start
LOADD d2,2; if() #5343 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 462; Test 'if'
SETV d2,1; return Start AND if() #5343 Body Start
GOTO 514; return End AND if() #5343 Body End
LOADD d2,3; if() #5344 Test
COMPAREV d2,4
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 470; Test 'if'
LOADD d2,2; if() #5344 Body Start
MULTV d2,0.7071
STORED d2,2; if() #5344 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.0516; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,3
LOADD d2,2; while() #5346 Test
COMPAREV d2,8
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 503; Test 'while'
PUSHR d4; unless() #5348 Test AND while() #5346 Body Start
LOADD d2,3; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
SUBV d2,8
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0591; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 499; Test 'unless'
SETV d2,0; return Start AND unless() #5348 Body Start
GOTO 514; return End AND unless() #5348 Body End
LOADD d2,2
SUBV d2,8
STORED d2,2; while() #5346 Body End
GOTO 476; while() #5346 End
PUSHR d4; return Start
LOADD d2,3; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0591; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
POPARGS d5,0.0004; return End
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int, bool)] Body End
SETR d4,SP; Func[int __NormalizeDir(int)] Body Start
LOADD d2,0; if() #9321 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 526
LOADD d2,0
COMPAREV d2,7
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 532; Test 'if'
LOADD d2,0; return Start AND if() #9321 Body Start
GOTO 589; return End AND if() #9321 Body End
LOADD d2,0; if() #9323 Test
COMPAREV d2,8
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 539; Test 'if'
SETV d2,0; return Start AND if() #9323 Body Start
GOTO 589; return End AND if() #9323 Body End
LOADD d2,0; if() #9324 Test
COMPAREV d2,9
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 546; Test 'if'
SETV d2,5; return Start AND if() #9324 Body Start
GOTO 589; return End AND if() #9324 Body End
LOADD d2,0; if() #9325 Test
COMPAREV d2,10
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 553; Test 'if'
SETV d2,3; return Start AND if() #9325 Body Start
GOTO 589; return End AND if() #9325 Body End
LOADD d2,0; if() #9326 Test
COMPAREV d2,11
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 560; Test 'if'
SETV d2,7; return Start AND if() #9326 Body Start
GOTO 589; return End AND if() #9326 Body End
LOADD d2,0; if() #9327 Test
COMPAREV d2,12
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 567; Test 'if'
SETV d2,1; return Start AND if() #9327 Body Start
GOTO 589; return End AND if() #9327 Body End
LOADD d2,0; if() #9328 Test
COMPAREV d2,13
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 574; Test 'if'
SETV d2,6; return Start AND if() #9328 Body Start
GOTO 589; return End AND if() #9328 Body End
LOADD d2,0; if() #9329 Test
COMPAREV d2,14
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 581; Test 'if'
SETV d2,2; return Start AND if() #9329 Body Start
GOTO 589; return End AND if() #9329 Body End
LOADD d2,0; if() #9330 Test
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 588; Test 'if'
SETV d2,4; return Start AND if() #9330 Body Start
GOTO 589; return End AND if() #9330 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
PUSHARGSV 0,0.0006; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,5
SETV d2,0
STORED d2,4
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
LOADD d2,9; if() #9069 Test
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 727; Test 'if'
SETR d2,gd14; if() #9069 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #9071 setup
STORED d2,5
LOADD d2,5; for() #9071 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 685; for() #9071 TestFail?
PUSHR d4; unless() #9074 Test AND for() #9071 Body Start
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1390; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 679; Test 'unless'
SETV d2,0; return Start AND unless() #9074 Body Start
GOTO 1388; return End AND unless() #9074 Body End
LOADD d2,5; for() #9071 Body End AND for() #9071 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,5
POP d2
GOTO 653; for() #9071 End
PUSHR d4; unless() #9075 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1390; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 702; Test 'unless'
SETV d2,0; return Start AND unless() #9075 Body Start
GOTO 1388; return End AND unless() #9075 Body End
PUSHR d4; unless() #9076 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1390; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 725; Test 'unless'
SETV d2,0; return Start AND unless() #9076 Body Start
GOTO 1388; return End AND unless() #9076 Body End
SETV d2,1; return Start
GOTO 1388; return End AND if() #9069 Body End
LOADD d2,9; if() #9077 Test AND if() #9069 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 862; Test 'if'
SETR d2,gd14; if() #9077 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd2
PUSHR d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
STORED d2,4
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #9079 setup
STORED d2,5
LOADD d2,5; for() #9079 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 820; for() #9079 TestFail?
PUSHR d4; unless() #9082 Test AND for() #9079 Body Start
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1390; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 814; Test 'unless'
SETV d2,0; return Start AND unless() #9082 Body Start
GOTO 1388; return End AND unless() #9082 Body End
LOADD d2,5; for() #9079 Body End AND for() #9079 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,5
POP d2
GOTO 788; for() #9079 End
PUSHR d4; unless() #9083 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1390; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 837; Test 'unless'
SETV d2,0; return Start AND unless() #9083 Body Start
GOTO 1388; return End AND unless() #9083 Body End
PUSHR d4; unless() #9084 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1390; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 860; Test 'unless'
SETV d2,0; return Start AND unless() #9084 Body Start
GOTO 1388; return End AND unless() #9084 Body End
SETV d2,1; return Start
GOTO 1388; return End AND if() #9077 Body End
LOADD d2,9; if() #9085 Test AND if() #9077 Else Start
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1004; Test 'if'
PUSHR d4; if() #9087 Test AND if() #9085 Body Start
CALLFUNC 0.4656; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOTRUE 879
PUSHR d4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 885; Test 'if'
SETV d2,0; return Start AND if() #9087 Body Start
GOTO 1388; return End AND if() #9087 Body End
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #9089 setup
STORED d2,5
LOADD d2,5; for() #9089 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 962; for() #9089 TestFail?
PUSHR d4; unless() #9092 Test AND for() #9089 Body Start
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1390; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 956; Test 'unless'
SETV d2,0; return Start AND unless() #9092 Body Start
GOTO 1388; return End AND unless() #9092 Body End
LOADD d2,5; for() #9089 Body End AND for() #9089 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,5
POP d2
GOTO 930; for() #9089 End
PUSHR d4; unless() #9093 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1390; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 979; Test 'unless'
SETV d2,0; return Start AND unless() #9093 Body Start
GOTO 1388; return End AND unless() #9093 Body End
PUSHR d4; unless() #9094 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1390; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1002; Test 'unless'
SETV d2,0; return Start AND unless() #9094 Body Start
GOTO 1388; return End AND unless() #9094 Body End
SETV d2,1; return Start
GOTO 1388; return End AND if() #9085 Body End
LOADD d2,9; if() #9095 Test AND if() #9085 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1139; Test 'if'
SETR d2,gd13; if() #9095 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
STORED d2,4
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #9097 setup
STORED d2,5
LOADD d2,5; for() #9097 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1097; for() #9097 TestFail?
PUSHR d4; unless() #9100 Test AND for() #9097 Body Start
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1390; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1091; Test 'unless'
SETV d2,0; return Start AND unless() #9100 Body Start
GOTO 1388; return End AND unless() #9100 Body End
LOADD d2,5; for() #9097 Body End AND for() #9097 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,5
POP d2
GOTO 1065; for() #9097 End
PUSHR d4; unless() #9101 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1390; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1114; Test 'unless'
SETV d2,0; return Start AND unless() #9101 Body Start
GOTO 1388; return End AND unless() #9101 Body End
PUSHR d4; unless() #9102 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1390; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1137; Test 'unless'
SETV d2,0; return Start AND unless() #9102 Body Start
GOTO 1388; return End AND unless() #9102 Body End
SETV d2,1; return Start
GOTO 1388; return End AND if() #9095 Body End
LOADD d2,9; if() #9103 Test AND if() #9095 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1201; Test 'if'
SETV d2,0; if() #9103 Body Start
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0454; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #9105 Test
COMPAREV d2,0
GOTOFALSE 1175; Test 'unless'
SETV d2,0; return Start AND unless() #9105 Body Start
GOTO 1388; return End AND unless() #9105 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0454; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1388; return End AND if() #9103 Body End
LOADD d2,9; if() #9106 Test AND if() #9103 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1263; Test 'if'
SETV d2,0; if() #9106 Body Start
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0454; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #9108 Test
COMPAREV d2,0
GOTOFALSE 1237; Test 'unless'
SETV d2,0; return Start AND unless() #9108 Body Start
GOTO 1388; return End AND unless() #9108 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0454; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1388; return End AND if() #9106 Body End
LOADD d2,9; if() #9109 Test AND if() #9106 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1325; Test 'if'
SETV d2,0; if() #9109 Body Start
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0454; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #9111 Test
COMPAREV d2,0
GOTOFALSE 1299; Test 'unless'
SETV d2,0; return Start AND unless() #9111 Body Start
GOTO 1388; return End AND unless() #9111 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0454; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1388; return End AND if() #9109 Body End
LOADD d2,9; if() #9112 Test AND if() #9109 Else Start
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1387; Test 'if'
SETV d2,0; if() #9112 Body Start
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0454; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #9114 Test
COMPAREV d2,0
GOTOFALSE 1361; Test 'unless'
SETV d2,0; return Start AND unless() #9114 Body Start
GOTO 1388; return End AND unless() #9114 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0454; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1388; return End AND if() #9112 Body End
SETV d2,0; return Start AND if() #9112 Else Start
POPARGS d5,0.0010; return End AND if() #9112 Else End AND if() #9109 Else End AND if() #9106 Else End AND if() #9103 Else End AND if() #9095 Else End AND if() #9085 Else End AND if() #9077 Else End AND if() #9069 Else End
RETURNFUNC; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body End
PUSHV 0; Func[bool Ghost_CanMovePixel(int, int, bool)] Body Start
SETR d4,SP
LOADD d2,3; if() #5354 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1406
LOADD d2,3
COMPAREV d2,255
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1416
LOADD d2,2
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1426
LOADD d2,2
COMPAREV d2,175
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1434; Test 'if'
PUSHR d4; return Start AND if() #5354 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1628; return End AND if() #5354 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0268; UsrFunc[int ComboAt(int, int)] Call
POP d4
STORED d2,0
PUSHR d4; unless() #5359 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1539; Test 'unless'
LOADD d2,0; if() #5360 Test AND unless() #5359 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,110
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1458; Test 'if'
SETV d2,0; return Start AND if() #5360 Body Start
GOTO 1628; return End AND if() #5360 Body End
LOADD d2,0; if() #5361 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,96
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1468; Test 'if'
SETV d2,0; return Start AND if() #5361 Body Start
GOTO 1628; return End AND if() #5361 Body End
LOADD d2,0; if() #5362 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,96
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1478; Test 'if'
SETV d2,0; return Start AND if() #5362 Body Start
GOTO 1628; return End AND if() #5362 Body End
PUSHR d4; if() #5363 Test
PUSHV 65536; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1495; Test 'if'
LOADD d2,0; if() #5365 Test AND if() #5363 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,44
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1494; Test 'if'
SETV d2,0; return Start AND if() #5365 Body Start
GOTO 1628; return End AND if() #5365 Body End
GOTO 1539; if() #5363 Body End
LOADD d2,1; if() #5366 Test AND if() #5363 Else Start
COMPAREV d2,0
GOTOTRUE 1509; Test 'if'
LOADD d2,0; if() #5368 Test AND if() #5366 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,54
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1508; Test 'if'
SETV d2,0; return Start AND if() #5368 Body Start
GOTO 1628; return End AND if() #5368 Body End
GOTO 1539; if() #5366 Body End
LOADD d2,0; if() #5369 Test AND if() #5366 Else Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,128
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1519; Test 'if'
SETV d2,0; return Start AND if() #5369 Body Start
GOTO 1628; return End AND if() #5369 Body End
LOADD d2,0; if() #5370 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,97
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1529; Test 'if'
SETV d2,0; return Start AND if() #5370 Body Start
GOTO 1628; return End AND if() #5370 Body End
LOADD d2,0; if() #5371 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,97
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1539; Test 'if'
SETV d2,0; return Start AND if() #5371 Body Start
GOTO 1628; return End AND if() #5371 Body End
PUSHR d4; if() #5366 Else End AND if() #5363 Else End AND unless() #5359 Body End AND if() #5372 Test
PUSHV 65539; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1551; Test 'if'
PUSHR d4; return Start AND if() #5372 Body Start
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0382; UsrFunc[bool IsWater(int)] Call
POP d4
GOTO 1628; return End AND if() #5372 Body End
PUSHR d4; if() #5373 Test
PUSHV 65538; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1574; Test 'if'
PUSHR d4; return Start AND if() #5373 Body Start
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0382; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0.0001
GOTOMORE 1572
LOADD d2,0
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,58
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
GOTO 1628; return End AND if() #5373 Body End
PUSHR d4; if() #5375 Test
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0382; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1586; Test 'if'
PUSHR d4; return Start AND if() #5375 Body Start
PUSHV 2048; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1628; return End AND if() #5375 Body End
PUSHR d4; if() #5376 Test
LOADD d2,0; UsrFunc[bool __IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool __IsPit(int)] Params End
CALLFUNC 0.0428; UsrFunc[bool __IsPit(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1598; Test 'if'
PUSHR d4; return Start AND if() #5376 Body Start
PUSHV 4096; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1628; return End AND if() #5376 Body End
PUSHR d4; if() #5377 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1606; Test 'if'
SETV d2,1; return Start AND if() #5377 Body Start
GOTO 1628; return End AND if() #5377 Body End
PUSHR d4; if() #5379 Test AND if() #5377 Else Start
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1620; Test 'if'
PUSHR d4; return Start AND if() #5379 Body Start
LOADD d2,3; UsrFunc[bool __FullTileWalkable(int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[bool __FullTileWalkable(int, int)] Params End
CALLFUNC 0.1661; UsrFunc[bool __FullTileWalkable(int, int)] Call
POP d4
GOTO 1628; return End AND if() #5379 Body End
LOADD d2,3; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND return Start AND if() #5379 Else Start
PUSHR d2
LOADD d2,2
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETTRUEI d2
POPARGS d5,0.0004; return End AND if() #5379 Else End AND if() #5377 Else End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int, bool)] Body End
SETR d4,SP; Func[bool Ghost_FlagIsSet(int)] Body Start
LOADD d2,0; if() #5537 Test
ANDV d2,65536
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1649; Test 'if'
SETR d2,gd17; return Start AND if() #5537 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETFALSEI d2
GOTO 1659; return End AND if() #5537 Body End
SETR d2,gd16; return Start AND if() #5537 Else Start
PUSHR d2
LOADD d2,0
POP d3
ANDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
POP d5; return End AND if() #5537 Else End
RETURNFUNC; Func[bool Ghost_FlagIsSet(int)] Body End
SETR d4,SP; Func[bool __FullTileWalkable(int, int)] Body Start
LOADD d2,1; if() #9039 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1676
LOADD d2,0
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1684
LOADD d2,1
COMPAREV d2,256
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1692
LOADD d2,0
COMPAREV d2,176
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1700; Test 'if'
PUSHR d4; return Start AND if() #9039 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1764; return End AND if() #9039 Body End
LOADD d2,1
PUSHR d2
LOADD d2,1
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
LOADD d2,0
PUSHR d2
LOADD d2,0
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #9043 Test
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0.0001
GOTOMORE 1733
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1745
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1758
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1763; Test 'if'
SETV d2,0; return Start AND if() #9043 Body Start
GOTO 1764; return End AND if() #9043 Body End
SETV d2,1; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool __FullTileWalkable(int, int)] Body End
PUSHARGSV 0,0.0004; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body Start
SETR d4,SP
PUSHR d4; if() #5384 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1778
PUSHR d4
CALLFUNC 0.0260; UsrFunc[bool ClockIsActive()] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1801
PUSHR d4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1797
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2038; Test 'if'
LOADD d2,5; if() #5384 Body Start
PUSHR d2
POP REFFFC
SETR d2,XD
STORED d2,3
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,YD
STORED d2,2
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,XD2
STORED d2,1
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,YD2
STORED d2,0
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETR d2,gd18
ORV d2,2
SETR gd18,d2
PUSHR d4; while() #5388 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1873
PUSHR d4
CALLFUNC 0.0260; UsrFunc[bool ClockIsActive()] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1896
PUSHR d4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1892
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2002; Test 'while'
PUSHR d4; while() #5388 Body Start
LOADD d2,5; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
CALLFUNC 0.2041; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
CALLFUNC 0.2129; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2313; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND unless() #5396 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 1923; Test 'unless'
SETV d2,0; return Start AND unless() #5396 Body Start
GOTO 2039; return End
GOTO 1933; unless() #5396 Body End
LOADD d2,4; if() #5398 Test AND unless() #5396 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1933; Test 'if'
SETV d2,0; return Start AND if() #5398 Body Start
GOTO 2039; return End AND if() #5398 Body End
PUSHR d4; unless() #5396 Else End
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2728; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1962; Test 'if'
SETR d2,gd11; if() #5400 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0516; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 1994; if() #5400 Body End
PUSHR d4; if() #5402 Test AND if() #5400 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1985; Test 'if'
SETR d2,gd11; if() #5402 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0516; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 1994; if() #5402 Body End
SETR d2,gd11; if() #5402 Else Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #5402 Else End
PUSHR d4; if() #5400 Else End
LOADD d2,5; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
CALLFUNC 0.2861; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
POP d4; while() #5388 Body End
GOTO 1863; while() #5388 End
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
LOADD d2,2
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
LOADD d2,1
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
LOADD d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2; if() #5384 Body End
SETV d2,1; return Start
POPARGS d5,0.0006; return End
RETURNFUNC; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body End
PUSHV 0; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,0
SETR d2,gd21; if() #9249 Test
COMPAREV d2,1
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2062; Test 'if'
SETR d2,gd21; if() #9249 Body Start
PUSHR d2
SUBV d2,1
SETR gd21,d2
POP d2
SETR d2,gd21; if() #9250 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2062; Test 'if'
SETV d2,1; if() #9250 Body Start
STORED d2,0; if() #9250 Body End
SETR d2,gd18; if() #9249 Body End AND if() #9251 Test
ANDV d2,8
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2127; Test 'if'
SETR d2,gd21; if() #9252 Test AND if() #9251 Body Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 2091; Test 'if'
SETR d2,gd27; if() #9252 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
RSHIFTV d2,1
SUBV2 9,d2
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 2127; if() #9252 Body End
LOADD d2,1; if() #9254 Test AND if() #9252 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,64
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2115; Test 'if'
SETR d2,gd27; if() #9254 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
ANDV d2,3
ADDV d2,6
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 2127; if() #9254 Body End
LOADD d2,0; if() #9256 Test AND if() #9254 Else Start
COMPAREV d2,0
GOTOTRUE 2127; Test 'if'
SETR d2,gd12; if() #9256 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #9256 Body End
POPARGS d5,0.0003; if() #9254 Else End AND if() #9252 Else End AND if() #9251 Body End
RETURNFUNC; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body End
PUSHARGSV 0,0.0004; Func[void __Ghost_DrawShadow(NPC)] Body Start
SETR d4,SP
SETR d2,gd4; if() #9116 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2137; Test 'if'
GOTO 2311; return (Void) AND if() #9116 Body
PUSHR d4; unless() #9117 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLI d2
COMPAREV d2,0.0001
GOTOMORE 2152
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCEXTEND
COMPAREV d2,4
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2163
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCTYPE
COMPAREV d2,40
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOFALSE 2167; Test 'unless'
GOTO 2311; return (Void) AND unless() #9117 Body
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
SETV d2,0
STORED d2,0
SETR d2,gd13; if() #9121 Test
COMPAREV d2,3
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2189
SETR d2,gd14
COMPAREV d2,3
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 2239; Test 'if'
SETR d2,gd2; if() #9121 Body Start
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
SETV d2,1
STORED d2,0
PUSHR d4; if() #9124 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2232; Test 'if'
SETV d2,27400; if() #9124 Body Start
STORED d2,1
GOTO 2238; if() #9124 Body End
SETR d2,gd27; if() #9124 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
STORED d2,1; if() #9124 Else End
GOTO 2293; if() #9121 Body End
SETR d2,gd2; if() #9121 Else Start
PUSHR d2
SETR d2,gd13
SUBV d2,2
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,2
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
SETV d2,2
STORED d2,0
PUSHR d4; if() #9126 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2278; Test 'if'
SETV d2,27392; if() #9126 Body Start
STORED d2,1
GOTO 2293; if() #9126 Body End
SETR d2,gd27; if() #9126 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,4
MULTV d2,2
SETV d2,2
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
POP d3
MULTR d2,d3
ADDV d2,27392
STORED d2,1; if() #9126 Else End
PUSHV 1; if() #9121 Else End AND InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #9128 [Opt:AlwaysOn]
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_DrawShadow(NPC)] Body End
PUSHARGSV 0,0.0004; Func[void Ghost_WaitframeLight(FFC, NPC)] Body Start
SETR d4,SP
ALLOCATEMEMV d2,24
STORED d2,2
SETR d0,d2
PUSHR d0
SETR d2,gd2
POP d0
WRITEPODARRAYVR 0,d2
PUSHR d0
SETR d2,gd3
POP d0
WRITEPODARRAYVR 1,d2
PUSHR d0
SETR d2,gd4
POP d0
WRITEPODARRAYVR 2,d2
PUSHR d0
SETR d2,gd6
POP d0
WRITEPODARRAYVR 3,d2
PUSHR d0
SETR d2,gd7
POP d0
WRITEPODARRAYVR 4,d2
PUSHR d0
SETR d2,gd8
POP d0
WRITEPODARRAYVR 5,d2
PUSHR d0
SETR d2,gd9
POP d0
WRITEPODARRAYVR 6,d2
PUSHR d0
SETR d2,gd10
POP d0
WRITEPODARRAYVR 7,d2
PUSHR d0
SETR d2,gd19
POP d0
WRITEPODARRAYVR 8,d2
PUSHR d0
SETR d2,gd20
POP d0
WRITEPODARRAYVR 9,d2
PUSHR d0
SETR d2,gd12
POP d0
WRITEPODARRAYVR 10,d2
PUSHR d0
SETR d2,gd5
POP d0
WRITEPODARRAYVR 11,d2
PUSHR d0
SETR d2,gd11
POP d0
WRITEPODARRAYVR 12,d2
PUSHR d0
SETR d2,gd13
POP d0
WRITEPODARRAYVR 13,d2
PUSHR d0
SETR d2,gd14
POP d0
WRITEPODARRAYVR 14,d2
PUSHR d0
SETR d2,gd16
POP d0
WRITEPODARRAYVR 15,d2
PUSHR d0
SETR d2,gd17
POP d0
WRITEPODARRAYVR 16,d2
PUSHR d0
SETR d2,gd18
POP d0
WRITEPODARRAYVR 17,d2
PUSHR d0
SETR d2,gd21
POP d0
WRITEPODARRAYVR 18,d2
PUSHR d0
SETR d2,gd22
POP d0
WRITEPODARRAYVR 19,d2
PUSHR d0
SETR d2,gd15
POP d0
WRITEPODARRAYVR 20,d2
PUSHR d0
SETR d2,gd23
POP d0
WRITEPODARRAYVR 21,d2
PUSHR d0
SETR d2,gd24
POP d0
WRITEPODARRAYVR 22,d2
ALLOCATEMEMV d2,21
STORED d2,1
SETR d2,gd26; if() #5877 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2450; Test 'if'
SETV d2,0; for() #5878 setup AND if() #5877 Body Start
STORED d2,0
LOADD d2,0; for() #5878 LoopTest
COMPAREV d2,21
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2450; for() #5878 TestFail?
SETR d2,gd26; for() #5878 Body Start
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #5878 Body End
LOADD d2,0; for() #5878 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 2424; for() #5878 End
LOADD d2,4; if() #5877 Body End AND InlineFunc[bool NPC->isValid()] Params AND if() #5881 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2467; Test 'if'
LOADD d2,2; if() #5881 Body Start
ORV d2,65536
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #5881 Body End
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND if() #5885 Test AND do-while() #5882 Body Start
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2531; Test 'if'
SETR d2,gd26; if() #5888 Test AND if(true) #5887 [Opt:AlwaysOn] AND if() #5885 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2506; Test 'if'
ALLOCATEMEMV d2,34; if() #5888 Body Start
STORED d2,0
PUSHR d4
LOADD d2,5; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
CALLFUNC 0.5609; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
LOADD d2,2
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5898; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOADD d3,0
DEALLOCATEMEMR d3
GOTO 2530; if() #5888 Body End
ALLOCATEMEMV d2,10; if() #5888 Else Start
STORED d2,0
PUSHR d4
LOADD d2,5; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
CALLFUNC 0.5609; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
LOADD d2,2
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5898; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOADD d3,0
DEALLOCATEMEMR d3; if() #5888 Else End
GOTO 2536; if() #5885 Body End
PUSHR d4; if() #5885 Else Start
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5898; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4; if() #5885 Else End
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,0
SETR gd2,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,1
SETR gd3,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,2
SETR gd4,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,3
SETR gd6,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,4
SETR gd7,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,5
SETR gd8,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,6
SETR gd9,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,7
SETR gd10,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,8
SETR gd19,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,9
SETR gd20,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,10
SETR gd12,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,11
SETR gd5,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,12
SETR gd11,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,13
SETR gd13,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,14
SETR gd14,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,15
SETR gd16,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,16
SETR gd17,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,17
SETR gd18,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,18
SETR gd21,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,19
SETR gd22,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,20
SETR gd15,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,21
SETR gd23,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,22
SETR gd24,d2
LOADD d2,1; if() #5892 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2690; Test 'if'
SETV d2,0; for() #5894 setup AND if() #5892 Body Start
STORED d2,0
LOADD d2,0; for() #5894 LoopTest
COMPAREV d2,21
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2689; for() #5894 TestFail?
LOADD d2,1; for() #5894 Body Start
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #5894 Body End
LOADD d2,0; for() #5894 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 2663; for() #5894 End
GOTO 2696; if() #5892 Body End
SETV d2,0; if() #5892 Else Start
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #5892 Else End
SETR d2,gd27; do-while() #5882 Body End AND do-while() #5882 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2706; Test 'while'
GOTO 2467
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND if() #5897 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2722; Test 'if'
SETV d2,65536; if() #5897 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #5897 Body End
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
POPARGS d5,0.0006
RETURNFUNC; Func[void Ghost_WaitframeLight(FFC, NPC)] Body End
SETR d4,SP; Func[void Ghost_SetPosition(FFC, NPC)] Body Start
LOADD d2,0; InlineFunc[bool NPC->isValid()] Params AND unless() #5769 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 2734; Test 'unless'
GOTO 2859; return (Void) AND unless() #5769 Body
PUSHR d4; if() #5770 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 2771; Test 'if'
SETR d2,gd2; if() #5770 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
GOTO 2803; if() #5770 Body End
SETR d2,gd2; if() #5770 Else Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2; if() #5770 Else End
PUSHR d4
SETR d2,gd2; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
PUSHR d2
PUSHV -64
PUSHV 256; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0231; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
SETR d2,gd3; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
SUBR d3,d2
PUSHR d3
PUSHV -64
PUSHV 176; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0231; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void Ghost_SetPosition(FFC, NPC)] Body End
PUSHARGSV 0,0.0005; Func[void Ghost_CheckHit(FFC, NPC)] Body Start
SETR d4,SP
LOADD d2,5; if() #5406 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
PUSHR d2
SETR d2,gd15
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3077; Test 'if'
SETR d2,gd18; if() #5406 Body Start
ORV d2,1
SETR gd18,d2
LOADD d2,5
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETR d2,gd21; if() #5407 Test
COMPAREV d2,32
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2893; Test 'if'
SETV d2,32; if() #5407 Body Start
SETR gd21,d2; if() #5407 Body End
PUSHR d4; if() #5408 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3077; Test 'if'
SETR d2,LINKX; if() #5408 Body Start
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,LINKY
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
LOADD d2,4; InlineFunc[int Abs(int)] Params AND if() #5409 Test
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd13
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2938
LOADD d2,3; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd14
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2976; Test 'if'
SETR d2,LINKDIR; if() #5412 Test AND if() #5409 Body Start
ANDV d2,2
PUSHR d2
SETR d2,gd5
ANDV d2,2
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2959
SETR d2,gd5
COMPAREV d2,3
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2968
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2975; Test 'if'
SETR d2,LINKDIR; if() #5412 Body Start
LSHIFTV d2,12
ORV d2,16
SETR gd22,d2; if() #5412 Body End
GOTO 3077; if() #5409 Body End
LOADD d2,4; InlineFunc[int Abs(int)] Params AND if() #5415 Test AND if() #5409 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,3; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3033; Test 'if'
SETR d2,gd5; if() #5417 Test AND if() #5415 Body Start
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2998
SETR d2,gd5
COMPAREV d2,1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 3008
SETR d2,gd5
COMPAREV d2,3
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 3017
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3032; Test 'if'
LOADD d2,3; if() #5421 Test AND if() #5417 Body Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3030; Test 'if'
SETV d2,16; if() #5421 Body Start
SETR gd22,d2
GOTO 3032; if() #5421 Body End
SETV d2,4112; if() #5421 Else Start
SETR gd22,d2; if() #5421 Else End
GOTO 3077; if() #5417 Body End AND if() #5415 Body End
SETR d2,gd5; if() #5423 Test AND if() #5415 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 3043
SETR d2,gd5
COMPAREV d2,3
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 3053
SETR d2,gd5
COMPAREV d2,3
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 3062
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3077; Test 'if'
LOADD d2,4; if() #5427 Test AND if() #5423 Body Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3075; Test 'if'
SETV d2,8208; if() #5427 Body Start
SETR gd22,d2
GOTO 3077; if() #5427 Body End
SETV d2,12304; if() #5427 Else Start
SETR gd22,d2; if() #5427 Else End
SETR d2,gd22; if() #5423 Body End AND if() #5415 Else End AND if() #5409 Else End AND if() #5408 Body End AND if() #5406 Body End AND if() #5429 Test
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3313; Test 'if'
SETR d2,gd22; if() #5429 Body Start
RSHIFTV d2,12
STORED d2,4
SETR d2,gd22
ANDV d2,4095
STORED d2,3
SETV d2,4
STORED d2,2
PUSHR d4; if() #5430 Test
PUSHV 5; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3099; Test 'if'
LOADD d2,2; if() #5430 Body Start
DIVV d2,2
STORED d2,2; if() #5430 Body End
PUSHR d4; if() #5431 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0436; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3213; Test 'if'
SETV d2,0; if() #5431 Body Start
STORED d2,1
SETV d2,0
STORED d2,0
LOADD d2,3
PUSHR d2
SUBV d2,1
STORED d2,3
POP d2
LOADD d2,3; if() #5433 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3133; Test 'if'
LOADD d2,4; if() #5433 Body Start
LSHIFTV d2,12
PUSHR d2
LOADD d2,3
POP d3
ORR d2,d3
SETR gd22,d2
GOTO 3135; if() #5433 Body End
SETV d2,0; if() #5433 Else Start
SETR gd22,d2; if() #5433 Else End
LOADD d2,4; if() #5435 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3144; Test 'if'
LOADD d2,2; if() #5435 Body Start
SUBV2 0,d2
STORED d2,0
GOTO 3163; if() #5435 Body End
LOADD d2,4; if() #5437 Test AND if() #5435 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3152; Test 'if'
LOADD d2,2; if() #5437 Body Start
STORED d2,0
GOTO 3163; if() #5437 Body End
LOADD d2,4; if() #5439 Test AND if() #5437 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3161; Test 'if'
LOADD d2,2; if() #5439 Body Start
SUBV2 0,d2
STORED d2,1
GOTO 3163; if() #5439 Body End
LOADD d2,2; if() #5439 Else Start
STORED d2,1; if() #5439 Else End
LOADD d2,1; if() #5437 Else End AND if() #5435 Else End AND if() #5441 Test
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3188; Test 'if'
SETR d2,gd2; if() #5441 Body Start
PUSHR d2
LOADD d2,1
POP d3
ADDR d2,d3
SETR gd2,d2
SETR d2,gd19
PUSHR d2
LOADD d2,1
POP d3
ADDR d2,d3
SETR gd19,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2728; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 3212; if() #5441 Body End
LOADD d2,0; if() #5443 Test AND if() #5441 Else Start
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3212; Test 'if'
SETR d2,gd3; if() #5443 Body Start
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
SETR gd3,d2
SETR d2,gd20
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
SETR gd20,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2728; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #5443 Body End
GOTO 3313; if() #5441 Else End AND if() #5431 Body End
SETV d2,-1; if() #5431 Else Start
STORED d2,1
SETV d2,-1
STORED d2,0
SETV d2,0
SETR gd22,d2
SETR d2,gd18
ORV d2,16
SETR gd18,d2
LOADD d2,4; if() #5444 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3233; Test 'if'
SETR d2,gd3; InlineFunc[untyped Floor(untyped)] Params Start AND if() #5444 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORED d2,0
GOTO 3262; if() #5444 Body End
LOADD d2,4; if() #5446 Test AND if() #5444 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3245; Test 'if'
SETR d2,gd3; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #5446 Body Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORED d2,0
GOTO 3262; if() #5446 Body End
LOADD d2,4; if() #5448 Test AND if() #5446 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3256; Test 'if'
SETR d2,gd2; InlineFunc[untyped Floor(untyped)] Params Start AND if() #5448 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORED d2,1
GOTO 3262; if() #5448 Body End
SETR d2,gd2; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #5448 Else Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORED d2,1; if() #5448 Else End
LOADD d2,1; if() #5446 Else End AND if() #5444 Else End AND if() #5450 Test
COMPAREV d2,-1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3288; Test 'if'
SETR d2,gd19; if() #5450 Body Start
PUSHR d2
LOADD d2,1
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd19,d2
LOADD d2,1
SETR gd2,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2728; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 3313; if() #5450 Body End
LOADD d2,0; if() #5452 Test AND if() #5450 Else Start
COMPAREV d2,-1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3313; Test 'if'
SETR d2,gd20; if() #5452 Body Start
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd20,d2
LOADD d2,0
SETR gd3,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2728; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #5452 Body End
POPARGS d5,0.0007; if() #5450 Else End AND if() #5431 Else End AND if() #5429 Body End
RETURNFUNC; Func[void Ghost_CheckHit(FFC, NPC)] Body End
SETR d4,SP; Func[void Ghost_ClearCombos()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
RETURNFUNC; Func[void Ghost_ClearCombos()] Body End
SETR d4,SP; Func[void Ghost_SetFlag(int)] Body Start
LOADD d2,0; if() #5754 Test
ANDV d2,65536
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3341; Test 'if'
SETR d2,gd17; if() #5754 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ORR d2,d3
SETR gd17,d2
GOTO 3347; if() #5754 Body End
SETR d2,gd16; if() #5754 Else Start
PUSHR d2
LOADD d2,0
POP d3
ORR d2,d3
SETR gd16,d2; if() #5754 Else End
POP d5
RETURNFUNC; Func[void Ghost_SetFlag(int)] Body End
SETR d4,SP; Func[void Ghost_UnsetFlag(int)] Body Start
LOADD d2,0; if() #5826 Test
ANDV d2,65536
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3367; Test 'if'
SETR d2,gd17; if() #5826 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,-2
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
SETR gd17,d2
GOTO 3374; if() #5826 Body End
SETR d2,gd16; if() #5826 Else Start
PUSHR d2
LOADD d2,0
BITNOT d2
POP d3
ANDR d2,d3
SETR gd16,d2; if() #5826 Else End
POP d5
RETURNFUNC; Func[void Ghost_UnsetFlag(int)] Body End
PUSHARGSV 0,0.0004; Func[void Ghost_MoveXY(int, int, int)] Body Start
SETR d4,SP
LOADD d2,5; if() #5695 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3389
PUSHR d4
CALLFUNC 0.4656; UsrFunc[bool IsSideview()] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3400
PUSHR d4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3406; Test 'if'
SETV d2,0; if() #5695 Body Start
STORED d2,5; if() #5695 Body End
LOADD d2,6; while() #5699 Test AND InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 3422
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3493; Test 'while'
LOADD d2,6; InlineFunc[int Abs(int)] Params AND if() #5702 Test AND while() #5699 Body Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3464; Test 'if'
LOADD d2,6; if() #5704 Test AND if() #5702 Body Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3453; Test 'if'
PUSHR d4; if() #5704 Body Start
PUSHV 8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3376; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,6
SUBV d2,8
STORED d2,6
GOTO 3463; if() #5704 Body End
PUSHR d4; if() #5704 Else Start
PUSHV -8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3376; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,6
ADDV d2,8
STORED d2,6; if() #5704 Else End
GOTO 3492; if() #5702 Body End
LOADD d2,5; if() #5706 Test AND if() #5702 Else Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3482; Test 'if'
PUSHR d4; if() #5706 Body Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 8
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3376; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,5
SUBV d2,8
STORED d2,5
GOTO 3492; if() #5706 Body End
PUSHR d4; if() #5706 Else Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV -8
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3376; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,5
ADDV d2,8
STORED d2,5; if() #5706 Else End
GOTO 3406; if() #5702 Else End AND while() #5699 Body End AND while() #5699 End
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
SETV d2,0
STORED d2,0
LOADD d2,6; if() #5708 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3574; Test 'if'
SETR d2,gd23; if() #5708 Body Start
RSHIFTV d2,8
STORED d2,2
SETR d2,gd2
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #5710 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3544; Test 'if'
LOADD d2,3; if() #5710 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3566; if() #5710 Body End
PUSHR d4; if() #5712 Test AND if() #5710 Else Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,6
SUBV2 0,d2
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0436; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3562; Test 'if'
LOADD d2,3; if() #5712 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3566; if() #5712 Body End
LOADD d2,3; if() #5712 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORED d2,3; if() #5712 Else End
LOADD d2,3; if() #5710 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
GOTO 3659; if() #5708 Body End
LOADD d2,6; if() #5714 Test AND if() #5708 Else Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3659; Test 'if'
SETR d2,gd13; if() #5714 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORED d2,2
SETR d2,gd2
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #5715 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3629; Test 'if'
LOADD d2,3; if() #5715 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3652; if() #5715 Body End
PUSHR d4; if() #5717 Test AND if() #5715 Else Start
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,6
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0436; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3646; Test 'if'
LOADD d2,3; if() #5717 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3652; if() #5717 Body End
LOADD d2,3; if() #5717 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORED d2,3; if() #5717 Else End
LOADD d2,3; if() #5715 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2; if() #5714 Body End
LOADD d2,5; if() #5708 Else End AND if() #5719 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3732; Test 'if'
SETR d2,gd24; if() #5719 Body Start
RSHIFTV d2,8
STORED d2,2
SETR d2,gd3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #5721 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3702; Test 'if'
LOADD d2,3; if() #5721 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3724; if() #5721 Body End
PUSHR d4; if() #5723 Test AND if() #5721 Else Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,5
SUBV2 0,d2
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0436; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3720; Test 'if'
LOADD d2,3; if() #5723 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3724; if() #5723 Body End
LOADD d2,3; if() #5723 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORED d2,3; if() #5723 Else End
LOADD d2,3; if() #5721 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
GOTO 3817; if() #5719 Body End
LOADD d2,5; if() #5725 Test AND if() #5719 Else Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3817; Test 'if'
SETR d2,gd14; if() #5725 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORED d2,2
SETR d2,gd3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #5726 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3787; Test 'if'
LOADD d2,3; if() #5726 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3810; if() #5726 Body End
PUSHR d4; if() #5728 Test AND if() #5726 Else Start
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,5
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0436; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3804; Test 'if'
LOADD d2,3; if() #5728 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3810; if() #5728 Body End
LOADD d2,3; if() #5728 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORED d2,3; if() #5728 Else End
LOADD d2,3; if() #5726 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2; if() #5725 Body End
PUSHR d4; if() #5719 Else End AND if() #5730 Test
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3828
SETR d2,gd18
ANDV d2,4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3893; Test 'if'
PUSHR d4; if() #5732 Test AND if() #5730 Body Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3852; Test 'if'
PUSHR d4; if() #5732 Body Start
LOADD d2,6; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOADD d2,5
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0108; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 3889; if() #5732 Body End
LOADD d2,6; InlineFunc[int Abs(int)] Params AND if() #5734 Test AND if() #5732 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3877; Test 'if'
LOADD d2,5; if() #5736 Test AND if() #5734 Body Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3874; Test 'if'
SETV d2,0; if() #5736 Body Start
SETR gd5,d2
GOTO 3876; if() #5736 Body End
SETV d2,1; if() #5736 Else Start
SETR gd5,d2; if() #5736 Else End
GOTO 3889; if() #5734 Body End
LOADD d2,6; if() #5738 Test AND if() #5734 Else Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3887; Test 'if'
SETV d2,2; if() #5738 Body Start
SETR gd5,d2
GOTO 3889; if() #5738 Body End
SETV d2,3; if() #5738 Else Start
SETR gd5,d2; if() #5738 Else End
SETR d2,gd2; if() #5734 Else End AND if() #5732 Else End
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2; if() #5730 Body End
POPARGS d5,0.0007
RETURNFUNC; Func[void Ghost_MoveXY(int, int, int)] Body End
PUSHV 0; Func[void __GhCleanUp(FFC)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
SETV d2,16
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCWIDTH,d2
SETV d2,16
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCHEIGHT,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DELAY,d2
SETV d2,0; for() #9060 setup
STORED d2,0
LOADD d2,0; for() #9060 LoopTest
COMPAREV d2,11
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4032; for() #9060 TestFail?
SETV d2,0; for() #9060 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
LOADD d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; for() #9060 Body End
LOADD d2,0; for() #9060 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 4007; for() #9060 End
POPARGS d5,0.0002
RETURNFUNC; Func[void __GhCleanUp(FFC)] Body End
SETR d4,SP; Func[void Ghost_ForceDir(int)] Body Start
LOADD d2,0
SETR gd5,d2
SETR d2,gd18
ORV d2,4
SETR gd18,d2
POP d5
RETURNFUNC; Func[void Ghost_ForceDir(int)] Body End
PUSHARGSV 0,0.0002; Func[void Ghost_Move(int, int, int)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,1
SETV d2,0
STORED d2,0
LOADD d2,4; if() #5672 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4057; Test 'if'
LOADD d2,3; if() #5672 Body Start
SUBV2 0,d2
STORED d2,0
GOTO 4135; if() #5672 Body End
LOADD d2,4; if() #5674 Test AND if() #5672 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4065; Test 'if'
LOADD d2,3; if() #5674 Body Start
STORED d2,0
GOTO 4135; if() #5674 Body End
LOADD d2,4; if() #5676 Test AND if() #5674 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4074; Test 'if'
LOADD d2,3; if() #5676 Body Start
SUBV2 0,d2
STORED d2,1
GOTO 4135; if() #5676 Body End
LOADD d2,4; if() #5678 Test AND if() #5676 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4082; Test 'if'
LOADD d2,3; if() #5678 Body Start
STORED d2,1
GOTO 4135; if() #5678 Body End
LOADD d2,4; if() #5680 Test AND if() #5678 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4096; Test 'if'
LOADD d2,3; if() #5680 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,0
GOTO 4135; if() #5680 Body End
LOADD d2,4; if() #5682 Test AND if() #5680 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4109; Test 'if'
LOADD d2,3; if() #5682 Body Start
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,0
GOTO 4135; if() #5682 Body End
LOADD d2,4; if() #5684 Test AND if() #5682 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4122; Test 'if'
LOADD d2,3; if() #5684 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
MULTV d2,0.7071
STORED d2,0
GOTO 4135; if() #5684 Body End
LOADD d2,4; if() #5686 Test AND if() #5684 Else Start
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4134; Test 'if'
LOADD d2,3; if() #5686 Body Start
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
MULTV d2,0.7071
STORED d2,0
GOTO 4135; if() #5686 Body End
GOTO 4144; return (Void) AND if() #5686 Else
PUSHR d4; if() #5684 Else End AND if() #5682 Else End AND if() #5680 Else End AND if() #5678 Else End AND if() #5676 Else End AND if() #5674 Else End AND if() #5672 Else End
LOADD d2,1; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3376; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0005
RETURNFUNC; Func[void Ghost_Move(int, int, int)] Body End
SETR d4,SP; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body Start
LOADD d2,1; if() #9146 Test
COMPAREV d2,-1
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 4157
LOADD d2,1
COMPAREV d2,-2
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4162; Test 'if'
SETV d2,1; if() #9146 Body Start
STORED d2,1; if() #9146 Body End
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,1
SETR gd11,d2
LOADD d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
LOADD d2,0
SETR gd12,d2
LOADD d2,2; if() #9148 Test
COMPAREV d2,0
GOTOTRUE 4208; Test 'if'
LOADD d2,3; if() #9148 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCX
SETR gd2,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCY
SETR gd3,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCZ
SETR gd4,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCJUMP
SETR gd6,d2
GOTO 4240; if() #9148 Body End
LOADD d2,4; if() #9148 Else Start
PUSHR d2
POP REFFFC
SETR d2,X
SETR gd2,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,Y
SETR gd3,d2
SETV d2,0
SETR gd4,d2
SETV d2,0
SETR gd6,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2; if() #9148 Else End
PUSHR d4
LOADD d2,4; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2728; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
SETV d2,0
SETR gd7,d2
SETV d2,0
SETR gd8,d2
SETV d2,0
SETR gd9,d2
SETV d2,0
SETR gd10,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
SETR gd13,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
SETR gd14,d2
SETV d2,0
SETR gd23,d2
SETV d2,0
SETR gd24,d2
LOADD d2,1; if() #9150 Test
COMPAREV d2,1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4358; Test 'if'
SETV d2,3; if(true) #9151 [Opt:AlwaysOn] AND if() #9150 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,65456
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCOTILE,d2
SETV d2,65456; if(true) #9152 [Opt:AlwaysOn]
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTILE,d2
SETR d2,gd13
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd14
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2; if() #9150 Body End
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
LOADD d2,3; if() #9153 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,32
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4389; Test 'if'
SETV d2,1; if() #9153 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 4401; if() #9153 Body End
SETV d2,0; if() #9153 Else Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #9153 Else End
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETV d2,0
SETR gd16,d2
SETV d2,0
SETR gd17,d2
SETV d2,0
SETR gd21,d2
SETV d2,0
SETR gd22,d2
SETV d2,0
SETR gd18,d2
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,65536
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body End
PUSHARGSV 0,0.0008; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,7
SETV d2,0
STORED d2,6
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #5620 setup
STORED d2,5
LOADD d2,5; for() #5620 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4541; for() #5620 TestFail?
LOADD d2,5; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #5620 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,7
LOADD d2,7; if() #5623 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOADD d2,8
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4471; Test 'if'
SETV d2,0; if() #5623 Body Start
STORED d2,6
GOTO 4537; continue #5622
GOTO 4473; if() #5623 Body End
SETV d2,1; if() #5623 Else Start
STORED d2,6; if() #5623 Else End
LOADD d2,7; if() #5625 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4488; Test 'if'
SETV d2,0; if() #5625 Body Start
STORED d2,6
GOTO 4537; continue #5622 AND if() #5625 Body End
LOADD d2,6; if() #5626 Test
COMPAREV d2,0
GOTOTRUE 4536; Test 'if'
PUSHR d4; if() #5626 Body Start
LOADD d2,9; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
PUSHV 1
LOADD d2,7
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
PUSHR NPCCSET; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params End
CALLFUNC 0.4146; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Call
POP d4
LOADD d2,7; if() #5628 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,256
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4533; Test 'if'
SETV d2,1; if() #5628 Body Start
PUSHR d2
LOADD d2,9
POP d3
PUSHR d2
PUSHR d3
SETV d2,1
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #5628 Body End
LOADD d2,7; return Start
GOTO 4586; return End
GOTO 4537; if() #5626 Body End
GOTO 4541; break #5621 AND if() #5626 Else
LOADD d2,5; for() #5620 Body End AND for() #5620 LoopIncrement
SUBV d2,1
STORED d2,5
GOTO 4444; for() #5620 End
ALLOCATEMEMV d2,60
STORED d2,4
WRITEPODSTRING d2,"ghost.zh: AutoGhost initialization failed - enemy missing.\n"
ALLOCATEMEMV d2,30
STORED d2,2
WRITEPODSTRING d2,"  DMap %d, screen %X\n"
ALLOCATEMEMV d2,30
STORED d2,0
WRITEPODSTRING d2,"  Script %d, enemy ID %d\n"
LOADD d2,4; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,2; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGR CURDMAP
PUSHVARGR CURDSCR; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,9
PUSHR d2
POP REFFFC
PUSHVARGR FFSCRIPT
LOADD d2,8
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0
PUSHR d2
LOADD d2,9
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
QUIT; InlineFunc[void Quit()] Body
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
LOADD d3,4
DEALLOCATEMEMR d3
POPARGS d5,0.0010
RETURNFUNC; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body End
SETR d4,SP; Func[int VectorX(int, int)] Body Start
LOADD d2,0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR d4,SP; Func[int VectorY(int, int)] Body Start
LOADD d2,0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
PUSHV 0; Func[void Ghost_MoveTowardLink(int, int)] Body Start
SETR d4,SP
PUSHR d4
SETR d2,gd2; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
SETR d2,gd13
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0089; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,0
PUSHARGSR d4,0.0002; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
LOADD d2,2; UsrFunc[int VectorX(int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.4588; UsrFunc[int VectorX(int, int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,2; UsrFunc[int VectorY(int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.4598; UsrFunc[int VectorY(int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3376; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0003
RETURNFUNC; Func[void Ghost_MoveTowardLink(int, int)] Body End
SETR d4,SP; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
CASTBOOLF d2
CASTBOOLF d3
COMPARER d3,d2
SETFALSEI d2
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
PUSHV 0; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2
PUSHR d4; unless() #5840 Test
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 4842; Test 'unless'
PUSHR d4; if() #5841 Test AND unless() #5840 Body Start
CALLFUNC 0.4656; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4801; Test 'if'
SETR d2,gd6; if() #5843 Test AND if() #5841 Body Start
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0.0001
GOTOMORE 4709
PUSHR d4
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0436; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4800; Test 'if'
PUSHR d4; if() #5843 Body Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
STORED d2,0
PUSHR d4
PUSHV 64; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3349; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
SETR d2,gd6; if() #5845 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4770; Test 'if'
PUSHR d4; if() #5845 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3323; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR gd6
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.4042; UsrFunc[void Ghost_Move(int, int, int)] Call
POP d4
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
SETR d2,gd6; if() #5847 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4759
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0436; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4765; Test 'if'
SETV d2,0; if() #5847 Body Start
SETR gd6,d2; if() #5847 Body End
PUSHR d4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3349; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
GOTO 4793; if() #5845 Body End
PUSHR d4; if() #5845 Else Start
PUSHV 1; UsrFunc[void Ghost_Move(int, int, int)] Params Start
SETR d2,gd6
SUBV2 0,d2
PUSHR d2
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.4042; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK d4
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0436; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4791; Test 'if'
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #5849 Body Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
GOTO 4793; if() #5849 Body End
SETV d2,0; if() #5849 Else Start
SETR gd6,d2; if() #5849 Else End
LOADD d2,0; if() #5845 Else End AND if() #5851 Test
COMPAREV d2,0
GOTOTRUE 4800; Test 'if'
PUSHR d4; if() #5851 Body Start
PUSHV 64; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3323; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4; if() #5851 Body End
GOTO 4842; if() #5843 Body End AND if() #5841 Body End
SETR d2,gd6; if() #5852 Test AND if() #5841 Else Start
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0.0001
GOTOMORE 4813
SETR d2,gd4
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4842; Test 'if'
SETR d2,gd4; if() #5854 Test AND if() #5852 Body Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4830; Test 'if'
SETV d2,0; if() #5854 Body Start
SETR gd4,d2
SETV d2,0
SETR gd6,d2
GOTO 4842; if() #5854 Body End
SETR d2,gd4; if() #5854 Else Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
SETR gd4,d2
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2; if() #5854 Else End
SETR d2,gd7; if() #5852 Body End AND if() #5841 Else End AND unless() #5840 Body End AND if() #5856 Test
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0.0001
GOTOMORE 4852
SETR d2,gd8
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 4860
SETR d2,gd9
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 4868
SETR d2,gd10
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4892; Test 'if'
SETR d2,gd7; if() #5856 Body Start
PUSHR d2
SETR d2,gd9
POP d3
ADDR d2,d3
SETR gd7,d2
SETR d2,gd8
PUSHR d2
SETR d2,gd10
POP d3
ADDR d2,d3
SETR gd8,d2
PUSHR d4
PUSHR gd7; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR gd8
PUSHV 2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3376; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
PEEK d4
PUSHR gd5; UsrFunc[void Ghost_ForceDir(int)] Params
CALLFUNC 0.4034; UsrFunc[void Ghost_ForceDir(int)] Call
POP d4; if() #5856 Body End
PUSHR d4
LOADD d2,4; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2728; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2
PUSHV 0; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params End
CALLFUNC 0.4934; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
CALLFUNC 0.2041; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2313; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
SETR d2,gd18
ANDV d2,32
SETR gd18,d2
PUSHR d4; return Start
LOADD d2,4; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params End
CALLFUNC 0.5455; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Call
POP d4
POPARGS d5,0.0005; return End
RETURNFUNC; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body End
PUSHARGSV 0,0.0002; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body Start
SETR d4,SP
SETR d2,gd18; if() #9258 Test
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4952; Test 'if'
SETR d2,gd5; if() #9258 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
GOTO 5060; if() #9258 Body End
LOADD d2,2; if() #9260 Test AND if() #9258 Else Start
COMPAREV d2,0
GOTOTRUE 4961; Test 'if'
LOADD d2,3; if() #9260 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
GOTO 5060; if() #9260 Body End
PUSHR d4; if() #9262 Test AND if() #9260 Else Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4985
SETR d2,gd19
PUSHR d2
SETR d2,gd2
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0.0001
GOTOMORE 4983
SETR d2,gd20
PUSHR d2
SETR d2,gd3
POP d3
COMPARER d3,d2
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5060; Test 'if'
SETR d2,gd2; if() #9262 Body Start
PUSHR d2
SETR d2,gd19
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
SETR d2,gd3
PUSHR d2
SETR d2,gd20
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
PUSHR d4; if() #9265 Test
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5023; Test 'if'
PUSHR d4; if() #9265 Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0108; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 5060; if() #9265 Body End
LOADD d2,1; InlineFunc[int Abs(int)] Params AND if() #9267 Test AND if() #9265 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,0; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5048; Test 'if'
LOADD d2,1; if() #9269 Test AND if() #9267 Body Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5045; Test 'if'
SETV d2,2; if() #9269 Body Start
SETR gd5,d2
GOTO 5047; if() #9269 Body End
SETV d2,3; if() #9269 Else Start
SETR gd5,d2; if() #9269 Else End
GOTO 5060; if() #9267 Body End
LOADD d2,0; if() #9271 Test AND if() #9267 Else Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5058; Test 'if'
SETV d2,0; if() #9271 Body Start
SETR gd5,d2
GOTO 5060; if() #9271 Body End
SETV d2,1; if() #9271 Else Start
SETR gd5,d2; if() #9271 Else End
SETR d2,gd5; if() #9267 Else End AND if() #9265 Else End AND if() #9262 Body End AND if() #9260 Else End AND if() #9258 Else End
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
SETR d2,gd11; if() #9273 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 5083
SETR d2,gd11
COMPAREV d2,1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5107; Test 'if'
LOADD d2,4; if() #9276 Test AND if() #9273 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5106; Test 'if'
SETR d2,gd11; if() #9276 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #9276 Body End
GOTO 5203; if() #9273 Body End
PUSHR d4; if() #9277 Test AND if() #9273 Else Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5145; Test 'if'
LOADD d2,4; if() #9279 Test AND if() #9277 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5144; Test 'if'
SETR d2,gd11; if() #9279 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0516; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #9279 Body End
GOTO 5203; if() #9277 Body End
PUSHR d4; if() #9280 Test AND if() #9277 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5183; Test 'if'
LOADD d2,4; if() #9282 Test AND if() #9280 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5182; Test 'if'
SETR d2,gd11; if() #9282 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0516; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #9282 Body End
GOTO 5203; if() #9280 Body End
LOADD d2,4; if() #9283 Test AND if() #9280 Else Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5203; Test 'if'
SETR d2,gd11; if() #9283 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #9283 Body End
LOADD d2,4; if() #9280 Else End AND if() #9277 Else End AND if() #9273 Else End AND if() #9284 Test
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5223; Test 'if'
SETR d2,gd13; if() #9284 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2; if() #9284 Body End
LOADD d2,3; if() #9285 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTXSZ
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5267; Test 'if'
SETR d2,gd13; if() #9285 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXOFS,d2; if() #9285 Body End
LOADD d2,4; if() #9286 Test
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5287; Test 'if'
SETR d2,gd14; if() #9286 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2; if() #9286 Body End
LOADD d2,3; if() #9287 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTYSZ
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5331; Test 'if'
SETR d2,gd14; if() #9287 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYOFS,d2; if() #9287 Body End
PUSHR d4; if() #9288 Test
PUSHV 128; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1630; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5400; Test 'if'
SETR d2,gd4; if() #9289 Test AND if() #9288 Body Start
COMPAREV d2,32
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5352
LOADD d2,4
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5369; Test 'if'
SETV d2,1; if() #9289 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 5400; if() #9289 Body End
SETR d2,gd4; if() #9292 Test AND if() #9289 Else Start
COMPAREV d2,32
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5384
LOADD d2,4
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5400; Test 'if'
SETV d2,0; if() #9292 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #9292 Body End
SETR d2,gd15; if() #9289 Else End AND if() #9288 Body End
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETR d2,gd12
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCCSET,d2
SETR d2,gd18; if() #9294 Test
ANDV d2,8
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5434; Test 'if'
SETR d2,gd12; if() #9294 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 5448; if() #9294 Body End
SETR d2,gd21; if() #9296 Test AND if() #9294 Else Start
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 5448; Test 'if'
SETR d2,gd12; if() #9296 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #9296 Body End
PUSHR d4; if() #9294 Else End
LOADD d2,3; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
CALLFUNC 0.2129; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
POP d4
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body End
PUSHV 0; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body Start
SETR d4,SP
LOADD d2,3; InlineFunc[bool NPC->isValid()] Params AND unless() #9298 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 5482; Test 'unless'
LOADD d2,2; if() #9299 Test AND unless() #9298 Body Start
COMPAREV d2,0
GOTOTRUE 5474; Test 'if'
PUSHR d4; if() #9299 Body Start
LOADD d2,4; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
CALLFUNC 0.3895; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2
PUSHR d4
CALLFUNC 0.3315; UsrFunc[void Ghost_ClearCombos()] Call
POP d4; if() #9299 Body End
LOADD d2,1; if() #9300 Test
COMPAREV d2,0
GOTOTRUE 5478; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #9300 Body
SETV d2,0
SETR gd15,d2
SETV d2,0; return Start
GOTO 5607; return End AND unless() #9298 Body End
SETV d2,0
STORED d2,0
LOADD d2,3; if() #9301 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 5494; Test 'if'
SETV d2,1; if() #9301 Body Start
STORED d2,0; if() #9301 Body End
LOADD d2,0; unless() #9302 Test
COMPAREV d2,0
GOTOFALSE 5513; Test 'unless'
PUSHR d4; unless() #9302 Body Start
LOADD d2,4; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
CALLFUNC 0.2861; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params End
CALLFUNC 0.1766; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
STORED d2,0; unless() #9302 Body End
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
LOADD d2,0; if() #9303 Test
COMPAREV d2,0
GOTOTRUE 5606; Test 'if'
LOADD d2,2; if() #9304 Test AND if() #9303 Body Start
COMPAREV d2,0
GOTOTRUE 5600; Test 'if'
SETV d2,1; if() #9304 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd2
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
PUSHR d4
LOADD d2,4; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
CALLFUNC 0.3895; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2; if() #9304 Body End
LOADD d2,1; if() #9305 Test
COMPAREV d2,0
GOTOTRUE 5604; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #9305 Body
SETV d2,0; return Start
GOTO 5607; return End AND if() #9303 Body End
SETV d2,1; return Start
POPARGS d5,0.0005; return End
RETURNFUNC; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body End
PUSHARGSV 0,0.0006; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,5
LOADD d2,8; if() #9332 Test
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOTRUE 5625; Test 'if'
LOADD d2,5; if() #9332 Body Start
ORV d2,4
STORED d2,5; if() #9332 Body End
LOADD d2,8; if() #9333 Test
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOTRUE 5637; Test 'if'
LOADD d2,5; if() #9333 Body Start
ORV d2,1
STORED d2,5; if() #9333 Body End
PUSHR d4; if() #9334 Test
LOADD d2,7; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params Start
PUSHR d2; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params End
CALLFUNC 0.5965; UsrFunc[bool __Ghost_IsFlickering(NPC)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5647; Test 'if'
LOADD d2,5; if() #9334 Body Start
ORV d2,2
STORED d2,5; if() #9334 Body End
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,CSET
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,5
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
SETV d2,3
STORED d2,4
SETR d2,gd2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd4
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
ADDR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,2
SETR d2,gd26; if() #9335 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5826; Test 'if'
SETV d2,1; if() #9335 Body Start
STORED d2,1
SETV d2,0; for() #9336 setup
STORED d2,0
LOADD d2,0; for() #9336 LoopTest
PUSHR d2
SETR d2,gd26
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5826; for() #9336 TestFail?
SETR d2,gd26; for() #9336 Body Start
PUSHR d2
LOADD d2,1
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,3
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,1
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,2
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,2
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,6
STORED d2,4
LOADD d2,1
ADDV d2,6
STORED d2,1
LOADD d2,6
PUSHR d2
POP d0
READPODARRAYV d2,0
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
POP d2; for() #9336 Body End
LOADD d2,0; for() #9336 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 5708; for() #9336 End
LOADD d2,8; if() #9335 Body End AND if(true) #9339 [Opt:AlwaysOn]
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,6
PUSHR d2
POP d0
READPODARRAYV d2,0
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
POP d2
POPARGS d5,0.0009
RETURNFUNC; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body End
PUSHV 0; Func[void __HideFFCAndWait(FFC)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,0
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
WAITFRAME; InlineFunc[void Waitframe()] Body
LOADD d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __HideFFCAndWait(FFC)] Body End
PUSHV 0; Func[bool IsPit(int)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP d0
SETR d2,COMBOTD
STORED d2,0
LOADD d2,0; if() #6308 Test
COMPAREV d2,41
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5940; Test 'if'
SETV d2,1; return Start AND if() #6308 Body Start
GOTO 5963; return End AND if() #6308 Body End
LOADD d2,0; if() #6309 Test
COMPAREV d2,93
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5947; Test 'if'
SETV d2,1; return Start AND if() #6309 Body Start
GOTO 5963; return End AND if() #6309 Body End
LOADD d2,0; if() #6310 Test
COMPAREV d2,80
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5956
LOADD d2,0
COMPAREV d2,82
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5962; Test 'if'
SETV d2,1; return Start AND if() #6310 Body Start
GOTO 5963; return End AND if() #6310 Body End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool IsPit(int)] Body End
SETR d4,SP; Func[bool __Ghost_IsFlickering(NPC)] Body Start
LOADD d2,0; if() #9158 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,128
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5977; Test 'if'
SETV d2,1; return Start AND if() #9158 Body Start
GOTO 5978; return End AND if() #9158 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[bool __Ghost_IsFlickering(NPC)] Body End
PUSHARGSV 0,0.0004; Func[void SpawnAnimation(FFC, NPC)] Body Start
SETR d4,SP
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,3
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCCOLLDET
STORED d2,2
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
STORED d2,1
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2728; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
SETV d2,0; for() #11114 setup
STORED d2,0
LOADD d2,0; for() #11114 LoopTest
COMPAREV d2,32
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6130; for() #11114 TestFail?
SETV d2,0; for() #11114 Body Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,32768
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2728; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2313; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2728; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2313; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,0; if() #11117 Test
COMPAREV d2,29
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6124; Test 'if'
SETR d2,UNDERCOMBO; if() #11117 Body Start
PUSHR d2
PUSHR d4
LOADD d2,5; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOADD d2,5
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0268; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBODD,d2
SETR d2,UNDERCSET
PUSHR d2
PUSHR d4
LOADD d2,5; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOADD d2,5
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0268; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBOCD,d2; if() #11117 Body End
LOADD d2,0; for() #11114 Body End AND for() #11114 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 6016; for() #11114 End
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,2
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
POPARGS d5,0.0006
RETURNFUNC; Func[void SpawnAnimation(FFC, NPC)] Body End


PUSHV 0; void run() Body Start
SETR d4,SP
PUSHR d4
CALLFUNC 0.2557; UsrFunc[void StartGhostZH()] Call
POP d4
PUSHR d4; while(true) #11106 Body [Opt:AlwaysOn] Start
CALLFUNC 0.9137; UsrFunc[void UpdateGhostZH1()] Call
POP d4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR d4
CALLFUNC 0.9203; UsrFunc[void UpdateGhostZH2()] Call
POP d4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #11106 Body [Opt:AlwaysOn] End
GOTO 6; while() #11106 End
POP d2; [Opt:NeverRet] AND void run() Body End AND Func[int Distance(int, int, int, int)] Body Start
POP d1
POP d0
POP d6
SETR d2,DISTANCE
RETURNFUNC; Func[int Distance(int, int, int, int)] Body End
SETR d4,SP; Func[int RadianAngle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR d4,SP; Func[int Randf(int)] Body Start
SETV d2,0; InlineFunc[long RNG->LRand(long)] Params Start AND return Start
PUSHR d2
LOADD d2,0; InlineFunc[long RNG->LRand(long)] Params End
POP REFRNG; InlineFunc[long RNG->LRand(long)] Body Start
RNGLRAND2 d2; InlineFunc[long RNG->LRand(long)] Body End
POP d5; return End
RETURNFUNC; Func[int Randf(int)] Body End
SETR d4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0,0.0007; Func[void AutoGhost()] Body Start
SETR d4,SP
SETR d2,gd27; if() #3627 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
GOTOTRUE 75; Test 'if'
GOTO 436; return (Void) AND if() #3627 Body
SETV d2,0
STORED d2,6
SETV d2,0
STORED d2,5
SETV d2,0
STORED d2,4
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #3628 setup
STORED d2,3
LOADD d2,3; for() #3628 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 436; for() #3628 TestFail?
LOADD d2,3; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #3628 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,6
LOADD d2,6; if() #3631 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,20
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 106; Test 'if'
GOTO 432; continue #3630 AND if() #3631 Body
LOADD d2,6; if() #3632 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,511
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 117; Test 'if'
GOTO 432; continue #3630 AND if() #3632 Body
LOADD d2,6; if() #3634 Test AND if(false) #3633 [Opt:AlwaysOff]
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
GOTOTRUE 128; Test 'if'
GOTO 432; continue #3630 AND if() #3634 Body
LOADD d2,6; unless() #3635 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOFALSE 138; Test 'unless'
GOTO 432; continue #3630 AND unless() #3635 Body
LOADD d2,6; unless() #3636 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOFALSE 148; Test 'unless'
GOTO 432; continue #3630 AND unless() #3636 Body
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
LOADD d2,6; if(false) #3637 [Opt:AlwaysOff]
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,1
LOADD d2,6
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,2
LOADD d2,2; if() #3638 Test
COMPAREV d2,-1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 189; Test 'if'
ALLOCATEMEMV d2,2; if() #3638 Body Start
STORED d2,0
PUSHR d4
LOADD d2,6; UsrFunc[int __AutoGhostParseName(NPC, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int __AutoGhostParseName(NPC, int)] Params End
CALLFUNC 0.0438; UsrFunc[int __AutoGhostParseName(NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,0
STORED d2,2
LOADD d3,0
DEALLOCATEMEMR d3; if() #3638 Body End
LOADD d2,2; if() #3640 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 200; Test 'if'
PUSHR d4; if() #3640 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0752; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 432; continue #3630 AND if() #3640 Body End
LOADD d2,2; if() #3642 Test
COMPAREV d2,511
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 213; Test 'if'
PUSHR d4; if() #3642 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0752; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 432; continue #3630 AND if() #3642 Body End
PUSHR d4
LOADD d2,5; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR d2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.0803; UsrFunc[int FindUnusedFFC(int)] Call
POP d4
STORED d2,5
LOADD d2,5; unless() #3644 Test
COMPAREV d2,0
GOTOFALSE 228; Test 'unless'
PUSHR d4; unless() #3644 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0752; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 432; continue #3630 AND unless() #3644 Body End
LOADD d2,5; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,4
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCCSET
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCX
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCY
PUSHR d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCZ
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
LOADD d2,2
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
SETV d2,1; if(true) #3645 [Opt:AlwaysOn]
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
LOADD d2,1; if() #3646 Test
COMPAREV d2,1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 402; Test 'if'
LOADD d2,1; if() #3647 Test AND if() #3646 Body Start
COMPAREV d2,-1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 402; Test 'if'
SETV d2,3; if() #3647 Body Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,1024
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2; if() #3647 Body End
LOADD d2,1; if() #3646 Body End AND if() #3648 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 420; Test 'if'
SETV d2,1; if() #3648 Body Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
GOTO 432; if() #3648 Body End
LOADD d2,1; if() #3648 Else Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #3648 Else End
LOADD d2,3; for() #3628 Body End AND for() #3628 LoopIncrement
SUBV d2,1
STORED d2,3
GOTO 83; for() #3628 End
POPARGS d5,0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSV 0,0.0009; Func[int __AutoGhostParseName(NPC, int)] Body Start
SETR d4,SP
ALLOCATEMEMV d2,64
STORED d2,8
ALLOCATEMEMV d2,64
STORED d2,7
SETV d2,1
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,10; InlineFunc[void NPC->GetName(int)] Params Start
PUSHR d2
LOADD d2,8; InlineFunc[void NPC->GetName(int)] Params End
POP REFNPC; InlineFunc[void NPC->GetName(int)] Body Start
NPCNAME d2; InlineFunc[void NPC->GetName(int)] Body End
SETV d2,0; for() #8909 setup
STORED d2,6
LOADD d2,6; for() #8909 LoopTest
COMPAREV d2,63
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 690; for() #8909 TestFail?
LOADD d2,8; if() #8912 Test AND for() #8909 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,64
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 686; Test 'if'
LOADD d2,8; if() #8912 Body Start
PUSHR d2
LOADD d2,6
ADDV d2,1
POP d0
READPODARRAYR d2,d2
STORED d2,5
PUSHR d4; if() #8913 Test
LOADD d2,5; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.9329; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 583; Test 'if'
SETV d2,0; if() #8913 Body Start
STORED d2,4
LOADD d2,6; for() #8916 setup
ADDV d2,1
STORED d2,6
PUSHR d4; for() #8916 LoopTest
LOADD d2,8; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.9329; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 525; for() #8916 TestFail?
LOADD d2,8; for() #8916 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,1
STORED d2,4; for() #8916 Body End
LOADD d2,6; for() #8916 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 493; for() #8916 End
SETV d2,0
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,7; InlineFunc[int Game->GetFFCScript(int)] Params
GETFFCSCRIPT d2; InlineFunc[int Game->GetFFCScript(int)] Body
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
LOADD d2,6
SUBV d2,1
STORED d2,6
LOADD d2,9; if() #8919 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 582; Test 'if'
ALLOCATEMEMV d2,59; if() #8919 Body Start
STORED d2,2
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script does not exist.\n"
ALLOCATEMEMV d2,80
STORED d2,0
WRITEPODSTRING d2,"  Script name: %s\n"
LOADD d2,2; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,7
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 750; return End
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3; if() #8919 Body End
GOTO 686; if() #8913 Body End
LOADD d2,5; if() #8920 Test AND if() #8913 Else Start
COMPAREV d2,48
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 592
LOADD d2,5
COMPAREV d2,57
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 601
LOADD d2,5
COMPAREV d2,45
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 686; Test 'if'
SETV d2,0; if() #8920 Body Start
STORED d2,4
LOADD d2,5; if() #8923 Test
COMPAREV d2,45
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 622; Test 'if'
SETV d2,45; if() #8923 Body Start
PUSHR d2
LOADD d2,7
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,1
STORED d2,4
LOADD d2,6
ADDV d2,1
STORED d2,6; if() #8923 Body End
LOADD d2,6; for() #8924 setup
ADDV d2,1
STORED d2,6
LOADD d2,8; for() #8924 LoopTest
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,48
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 642
LOADD d2,8
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,57
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 666; for() #8924 TestFail?
LOADD d2,8; for() #8924 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,1
STORED d2,4; for() #8924 Body End
LOADD d2,6; for() #8924 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 625; for() #8924 End
SETV d2,0
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,7; InlineFunc[int atoi(int)] Params Start
SETR d3,d2; InlineFunc[int atoi(int)] Params End
ATOI d2,d3; InlineFunc[int atoi(int)] Body
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,6
SUBV d2,1
STORED d2,6; if() #8920 Body End
LOADD d2,6; if() #8913 Else End AND if() #8912 Body End AND for() #8909 Body End AND for() #8909 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 457; for() #8909 End
LOADD d2,9; if() #8929 Test AND unless(false) #8928 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 740; Test 'if'
ALLOCATEMEMV d2,54; if() #8929 Body Start
STORED d2,5
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script not found.\n"
ALLOCATEMEMV d2,80
STORED d2,3
WRITEPODSTRING d2,"  Enemy name: %s\n"
ALLOCATEMEMV d2,55
STORED d2,1
WRITEPODSTRING d2,"  Script name should start after this character: %c\n"
LOADD d2,5; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,3; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,8
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,1; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGV 64; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,3
DEALLOCATEMEMR d3
LOADD d3,5
DEALLOCATEMEMR d3
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 750; return End
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,3
DEALLOCATEMEMR d3
LOADD d3,5
DEALLOCATEMEMR d3; if() #8929 Body End
SETV d2,1; return Start
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 750; return End
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
POPARGS d5,0.0011
RETURNFUNC; Func[int __AutoGhostParseName(NPC, int)] Body End
SETR d4,SP; Func[void __AutoGhostKill(NPC)] Body Start
SETV d2,65536
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
SETV d2,1024
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETV d2,1024
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,-1000
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCITEMSET,d2
POP d5
RETURNFUNC; Func[void __AutoGhostKill(NPC)] Body End
PUSHARGSV 0,0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,1
LOADD d2,2; InlineFunc[untyped Max(untyped, untyped)] Params Start AND for() #4898 setup
ADDV d2,1
PUSHVARGR d2
PUSHVARGV 1; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
STORED d2,0
LOADD d2,0; for() #4898 LoopTest
COMPAREV d2,32
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 861; for() #4898 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #4898 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1
LOADD d2,1; if() #4901 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 837
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 857; Test 'if'
LOADD d2,1; unless() #4903 Test AND if() #4901 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOFALSE 857; Test 'unless'
LOADD d2,1; unless() #4904 Test AND unless() #4903 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOFALSE 857; Test 'unless'
LOADD d2,0; return Start AND unless() #4904 Body Start
GOTO 862; return End AND unless() #4904 Body End
LOADD d2,0; unless() #4903 Body End AND if() #4901 Body End AND for() #4898 Body End AND for() #4898 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 813; for() #4898 End
SETV d2,0; return Start
POPARGS d5,0.0003; return End
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR d4,SP; Func[int CenterX(EWeapon)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterX(EWeapon)] Body End
SETR d4,SP; Func[int CenterY(EWeapon)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterY(EWeapon)] Body End
PUSHARGSV 0,0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR d4,SP
SETR d2,LINKHP; if() #3906 Test
COMPAREV d2,0
SETLESSI d2
SETV d2,0
COMPAREV d2,0
GOTOTRUE 969; Test 'if'
SETV d2,0; if() #3906 Body Start
STORED d2,1
SETV d2,1; for() #3907 setup
STORED d2,0
LOADD d2,0; for() #3907 LoopTest
COMPAREV d2,32
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 969; for() #3907 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #3907 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1
SETR d2,gd25; if() #3910 Test
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
RSHIFTV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
ANDV d2,15
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 963; Test 'if'
SETV d2,0; if() #3910 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #3910 Body End
LOADD d2,0; for() #3907 Body End AND for() #3907 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 922; for() #3907 End
POPARGS d5,0.0002; if() #3906 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSV 0,0.0002; Func[void DrawEWeaponShadow(EWeapon)] Body Start
SETR d4,SP
PUSHR d4
LOADD d2,2; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNXOFS
POP d3
ADDR d2,d3
STORED d2,1
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
SUBV d2,1
MULTV d2,16
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZOFS
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
PUSHV 1; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #4636 [Opt:AlwaysOn]
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
PUSHR d2
PUSHARGSV 1,0.0002
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(EWeapon)] Body End
PUSHARGSV 0,0.0009; Func[void DrawGhostFFCs()] Body Start
SETR d4,SP
SETV d2,1; if() #4639 Test
PUSHR d2
POP d0
SETR d2,SCREENEFLAGSD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1054; Test 'if'
PUSHR d4; unless() #4640 Test AND if() #4639 Body Start
CALLFUNC 0.1261; UsrFunc[bool __HaveAmulet()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1054; Test 'unless'
GOTO 1259; return (Void) AND unless() #4640 Body
SETV d2,0; if() #4639 Body End
STORED d2,8
SETV d2,0
STORED d2,7
SETV d2,0
STORED d2,6
SETV d2,0
STORED d2,5
SETV d2,0
STORED d2,4
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,1; if() #4643 Test AND if(true) #4642 [Opt:AlwaysOn]
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1080; Test 'if'
SETV d2,1; if() #4643 Body Start
STORED d2,3
GOTO 1082; if() #4643 Body End
SETV d2,2; if() #4643 Else Start
STORED d2,3; if() #4643 Else End
SETV d2,4
STORED d2,2
SETV d2,1; for() #4645 setup
STORED d2,1
LOADD d2,1; for() #4645 LoopTest
PUSHR d2
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1259; for() #4645 TestFail?
LOADD d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #4645 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,6
PUSHR d4
LOADD d2,6; UsrFunc[int __GetDrawingArray(NPC)] Params Start
PUSHR d2; UsrFunc[int __GetDrawingArray(NPC)] Params End
CALLFUNC 0.1280; UsrFunc[int __GetDrawingArray(NPC)] Call
POP d4
STORED d2,8
LOADD d2,8; if() #4649 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1111; Test 'if'
GOTO 1253; continue #4647 AND if() #4649 Body
SETR d2,gd27; if() #4650 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1130; Test 'if'
LOADD d2,8; if() #4651 Test AND if() #4650 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1130; Test 'if'
GOTO 1253; continue #4647 AND if() #4651 Body
LOADD d2,8; if() #4650 Body End AND if() #4652 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1142; Test 'if'
SETV d2,64; if() #4652 Body Start
STORED d2,5
GOTO 1144; if() #4652 Body End
SETV d2,128; if() #4652 Else Start
STORED d2,5; if() #4652 Else End
LOADD d2,8; if() #4654 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1156; Test 'if'
LOADD d2,2; if() #4654 Body Start
STORED d2,4
GOTO 1158; if() #4654 Body End
LOADD d2,3; if() #4654 Else Start
STORED d2,4; if() #4654 Else End
SETV d2,3
STORED d2,7
SETV d2,0; for() #4656 setup
STORED d2,0
LOADD d2,0; for() #4656 LoopTest
PUSHR d2
LOADD d2,8
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1253; for() #4656 TestFail?
LOADD d2,8; if() #4659 Test AND for() #4656 Body Start
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
COMPAREV d2,1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1192
LOADD d2,8
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1244; Test 'if'
LOADD d2,4; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #4659 Body Start
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,1
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,2
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
POP d0
READPODARRAYV d2,1
PUSHR d2
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0005
PUSHV 1
LOADD d2,5
PUSHR d2; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBO; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0016; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #4659 Body End
LOADD d2,7
ADDV d2,6
STORED d2,7; for() #4656 Body End
LOADD d2,0; for() #4656 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 1162; for() #4656 End
LOADD d2,1; for() #4645 Body End AND for() #4645 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,1
POP d2
GOTO 1086; for() #4645 End
POPARGS d5,0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR d4,SP; Func[bool __HaveAmulet()] Body Start
SETV d2,50; if() #9307 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOTRUE 1270; Test 'if'
SETV d2,1; return Start AND if() #9307 Body Start
GOTO 1279; return End AND if() #9307 Body End
SETV d2,63; if() #9308 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOTRUE 1278; Test 'if'
SETV d2,1; return Start AND if() #9308 Body Start
GOTO 1279; return End AND if() #9308 Body End
SETV d2,0; return Start
RETURNFUNC; return End AND Func[bool __HaveAmulet()] Body End
PUSHV 0; Func[int __GetDrawingArray(NPC)] Body Start
SETR d4,SP
LOADD d2,1; if() #9048 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1296; Test 'if'
SETV d2,0; return Start AND if() #9048 Body Start
GOTO 1318; return End AND if() #9048 Body End
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
STORED d2,0
LOADD d2,0; if() #9049 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1312; Test 'if'
SETV d2,0; return Start AND if() #9049 Body Start
GOTO 1318; return End AND if() #9049 Body End
LOADD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,23
STORED d2,0
LOADD d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int __GetDrawingArray(NPC)] Body End
PUSHARGSV 0,0.0002; Func[int FindUnusedFFC()] Body Start
SETR d4,SP
SETV d2,0
STORED d2,1
SETV d2,1; for() #4890 setup
STORED d2,0
LOADD d2,0; for() #4890 LoopTest
COMPAREV d2,33
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1376; for() #4890 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #4890 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1
LOADD d2,1; if() #4893 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1352
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1372; Test 'if'
LOADD d2,1; unless() #4895 Test AND if() #4893 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOFALSE 1372; Test 'unless'
LOADD d2,1; unless() #4896 Test AND unless() #4895 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOFALSE 1372; Test 'unless'
LOADD d2,0; return Start AND unless() #4896 Body Start
GOTO 1377; return End AND unless() #4896 Body End
LOADD d2,0; unless() #4895 Body End AND if() #4893 Body End AND for() #4890 Body End AND for() #4890 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 1326; for() #4890 End
SETV d2,0; return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHV 0; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR d4,SP
LOADD d2,3; if() #4971 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1394; Test 'if'
PUSHR d4; if() #4971 Body Start
LOADD d2,9; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.1542; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP d4
STORED d2,3; if() #4971 Body End
LOADD d2,2; if() #4972 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1407; Test 'if'
PUSHR d4; if() #4972 Body Start
LOADD d2,9; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.1718; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP d4
STORED d2,2; if() #4972 Body End
LOADD d2,9; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORED d2,0
LOADD d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,7
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOADD d2,5
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOADD d2,1; if() #4973 Test
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1477; Test 'if'
PUSHR d4; if() #4973 Body Start
LOADD d2,6; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.2102; UsrFunc[int __UnblockableDir(int)] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
GOTO 1486; if() #4973 Body End
LOADD d2,6; if() #4973 Else Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2; if() #4973 Else End
LOADD d2,3; if() #4976 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1497; Test 'if'
LOADD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #4976 Body Start
PUSHR d2
LOADD d2,3; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #4976 Body End
LOADD d2,1; if() #4977 Test
ANDV d2,32
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1513; Test 'if'
SETV d2,0; if() #4977 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #4977 Body End
LOADD d2,1; if() #4978 Test
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1524; Test 'if'
PUSHR d4; if() #4978 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1913; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #4978 Body End
LOADD d2,1
ORV d2,512
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,2; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
LOADD d2,0; return Start
POPARGS d5,0.0010; return End
RETURNFUNC; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSV 0,0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR d4,SP
LOADD d2,3; if() #5042 Test
COMPAREV d2,129
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1554
LOADD d2,3
COMPAREV d2,145
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1559; Test 'if'
SETV d2,17; return Start AND if() #5042 Body Start
GOTO 1716; return End AND if() #5042 Body End
LOADD d2,3; if() #5045 Test AND if() #5042 Else Start
COMPAREV d2,133
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1566; Test 'if'
SETV d2,18; return Start AND if() #5045 Body Start
GOTO 1716; return End AND if() #5045 Body End
LOADD d2,3; if() #5047 Test AND if() #5045 Else Start
COMPAREV d2,130
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1573; Test 'if'
SETV d2,19; return Start AND if() #5047 Body Start
GOTO 1716; return End AND if() #5047 Body End
LOADD d2,3; if() #5049 Test AND if() #5047 Else Start
COMPAREV d2,140
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1580; Test 'if'
SETV d2,35; return Start AND if() #5049 Body Start
GOTO 1716; return End AND if() #5049 Body End
LOADD d2,3; if() #5051 Test AND if() #5049 Else Start
COMPAREV d2,142
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1587; Test 'if'
SETV d2,81; return Start AND if() #5051 Body Start
GOTO 1716; return End AND if() #5051 Body End
LOADD d2,3; if() #5053 Test AND if() #5051 Else Start
COMPAREV d2,139
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1594; Test 'if'
SETV d2,80; return Start AND if() #5053 Body Start
GOTO 1716; return End AND if() #5053 Body End
LOADD d2,3; if() #5055 Test AND if() #5053 Else Start
COMPAREV d2,134
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1601; Test 'if'
SETV d2,21; return Start AND if() #5055 Body Start
GOTO 1716; return End AND if() #5055 Body End
LOADD d2,3; if() #5057 Test AND if() #5055 Else Start
COMPAREV d2,132
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1608; Test 'if'
SETV d2,20; return Start AND if() #5057 Body Start
GOTO 1716; return End AND if() #5057 Body End
LOADD d2,3; if() #5059 Test AND if() #5057 Else Start
COMPAREV d2,141
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1615; Test 'if'
SETV d2,36; return Start AND if() #5059 Body Start
GOTO 1716; return End AND if() #5059 Body End
LOADD d2,3; if() #5061 Test AND if() #5059 Else Start
COMPAREV d2,137
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1622; Test 'if'
SETV d2,76; return Start AND if() #5061 Body Start
GOTO 1716; return End AND if() #5061 Body End
LOADD d2,3; if() #5063 Test AND if() #5061 Else Start
COMPAREV d2,138
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1629; Test 'if'
SETV d2,77; return Start AND if() #5063 Body Start
GOTO 1716; return End AND if() #5063 Body End
LOADD d2,3; if() #5065 Test AND if() #5063 Else Start
COMPAREV d2,131
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1715; Test 'if'
SETV d2,0; if() #5065 Body Start
STORED d2,2
SETV d2,0
STORED d2,1
SETV d2,0; for() #5067 setup
STORED d2,0
LOADD d2,0; for() #5067 LoopTest
COMPAREV d2,256
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1697; for() #5067 TestFail?
LOADD d2,0; unless() #5070 Test AND for() #5067 Body Start
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOFALSE 1654; Test 'unless'
GOTO 1691; continue #5069 AND unless() #5070 Body
LOADD d2,0; InlineFunc[ItemData Game->LoadItemData(int)] Params
LOADITEMDATAR d2; InlineFunc[ItemData Game->LoadItemData(int)] Body Start
SETR d2,REFITEMCLASS; InlineFunc[ItemData Game->LoadItemData(int)] Body End
STORED d2,1
LOADD d2,1; if() #5071 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATAFAMILY
COMPAREV d2,1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1667; Test 'if'
GOTO 1691; continue #5069 AND if() #5071 Body
LOADD d2,1; if() #5072 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
PUSHR d2
LOADD d2,2
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1691; Test 'if'
LOADD d2,1; if() #5072 Body Start
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
STORED d2,2
LOADD d2,2; if() #5073 Test
COMPAREV d2,3
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1691; Test 'if'
GOTO 1697; break #5068 AND if() #5073 Body
LOADD d2,0; if() #5072 Body End AND for() #5067 Body End AND for() #5067 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 1640; for() #5067 End
LOADD d2,2; if() #5074 Test
COMPAREV d2,1
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1705; Test 'if'
SETV d2,4; return Start AND if() #5074 Body Start
GOTO 1716; return End
GOTO 1714; if() #5074 Body End
LOADD d2,2; if() #5076 Test AND if() #5074 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1713; Test 'if'
SETV d2,5; return Start AND if() #5076 Body Start
GOTO 1716; return End
GOTO 1714; if() #5076 Body End
SETV d2,6; return Start AND if() #5076 Else Start
GOTO 1716; return End AND if() #5076 Else End AND if() #5074 Else End AND if() #5065 Body End
SETV d2,0; return Start AND if() #5065 Else Start
POPARGS d5,0.0004; return End AND if() #5065 Else End AND if() #5063 Else End AND if() #5061 Else End AND if() #5059 Else End AND if() #5057 Else End AND if() #5055 Else End AND if() #5053 Else End AND if() #5051 Else End AND if() #5049 Else End AND if() #5047 Else End AND if() #5045 Else End AND if() #5042 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR d4,SP; Func[int GetDefaultEWeaponSound(int)] Body Start
LOADD d2,0; if() #5029 Test
COMPAREV d2,129
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1729
LOADD d2,0
COMPAREV d2,145
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1734; Test 'if'
SETV d2,40; return Start AND if() #5029 Body Start
GOTO 1780; return End AND if() #5029 Body End
LOADD d2,0; if() #5032 Test AND if() #5029 Else Start
COMPAREV d2,134
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1744
LOADD d2,0
COMPAREV d2,141
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1749; Test 'if'
SETV d2,32; return Start AND if() #5032 Body Start
GOTO 1780; return End AND if() #5032 Body End
LOADD d2,0; if() #5035 Test AND if() #5032 Else Start
COMPAREV d2,140
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1759
LOADD d2,0
COMPAREV d2,142
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1767
LOADD d2,0
COMPAREV d2,139
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1772; Test 'if'
SETV d2,13; return Start AND if() #5035 Body Start
GOTO 1780; return End AND if() #5035 Body End
LOADD d2,0; if() #5039 Test AND if() #5035 Else Start
COMPAREV d2,133
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1779; Test 'if'
SETV d2,51; return Start AND if() #5039 Body Start
GOTO 1780; return End AND if() #5039 Body End
SETV d2,0; return Start AND if() #5039 Else Start
POP d5; return End AND if() #5039 Else End AND if() #5035 Else End AND if() #5032 Else End AND if() #5029 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSV 0,0.0002; Func[void SetEWeaponDir(EWeapon)] Body Start
SETR d4,SP
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,1
SETV d2,0
STORED d2,0
LOADD d2,1; if() #7981 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1802; Test 'if'
LOADD d2,1; if() #7981 Body Start
ADDV d2,6.2832
STORED d2,1; if() #7981 Body End
LOADD d2,1; if() #7982 Test
COMPAREV d2,0.3927
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1816
LOADD d2,1
COMPAREV d2,5.8905
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1822; Test 'if'
SETV d2,3; if() #7982 Body Start
STORED d2,0
GOTO 1884; if() #7982 Body End
LOADD d2,1; if() #7985 Test AND if() #7982 Else Start
COMPAREV d2,1.1781
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1832; Test 'if'
SETV d2,7; if() #7985 Body Start
STORED d2,0
GOTO 1884; if() #7985 Body End
LOADD d2,1; if() #7987 Test AND if() #7985 Else Start
COMPAREV d2,1.9635
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1842; Test 'if'
SETV d2,1; if() #7987 Body Start
STORED d2,0
GOTO 1884; if() #7987 Body End
LOADD d2,1; if() #7989 Test AND if() #7987 Else Start
COMPAREV d2,2.7489
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1852; Test 'if'
SETV d2,6; if() #7989 Body Start
STORED d2,0
GOTO 1884; if() #7989 Body End
LOADD d2,1; if() #7991 Test AND if() #7989 Else Start
COMPAREV d2,3.5343
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1862; Test 'if'
SETV d2,2; if() #7991 Body Start
STORED d2,0
GOTO 1884; if() #7991 Body End
LOADD d2,1; if() #7993 Test AND if() #7991 Else Start
COMPAREV d2,4.3197
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1872; Test 'if'
SETV d2,4; if() #7993 Body Start
STORED d2,0
GOTO 1884; if() #7993 Body End
LOADD d2,1; if() #7995 Test AND if() #7993 Else Start
COMPAREV d2,5.1051
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1882; Test 'if'
SETV d2,0; if() #7995 Body Start
STORED d2,0
GOTO 1884; if() #7995 Body End
SETV d2,5; if() #7995 Else Start
STORED d2,0; if() #7995 Else End
LOADD d2,2; if() #7993 Else End AND if() #7991 Else End AND if() #7989 Else End AND if() #7987 Else End AND if() #7985 Else End AND if() #7982 Else End AND if() #7997 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1902; Test 'if'
PUSHR d4; if() #7997 Body Start
LOADD d2,0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.2102; UsrFunc[int __UnblockableDir(int)] Call
POP d4
STORED d2,0; if() #7997 Body End
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
POPARGS d5,0.0003
RETURNFUNC; Func[void SetEWeaponDir(EWeapon)] Body End
PUSHV 0; Func[void SetEWeaponRotation(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #8048 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 2006; Test 'if'
LOADD d2,1; if() #8048 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,0
LOADD d2,0; if() #8050 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1937; Test 'if'
LOADD d2,0; if() #8050 Body Start
ADDV d2,6.2832
STORED d2,0; if() #8050 Body End
LOADD d2,0; if() #8051 Test
COMPAREV d2,0.7854
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1951
LOADD d2,0
COMPAREV d2,5.4978
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1964; Test 'if'
SETV d2,4; if() #8051 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2005; if() #8051 Body End
LOADD d2,0; if() #8054 Test AND if() #8051 Else Start
COMPAREV d2,2.3562
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1979; Test 'if'
SETV d2,3; if() #8054 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2005; if() #8054 Body End
LOADD d2,0; if() #8056 Test AND if() #8054 Else Start
COMPAREV d2,3.9270
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1996; Test 'if'
SETV d2,7; if() #8056 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2005; if() #8056 Body End
SETV d2,0; if() #8056 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #8056 Else End
GOTO 2100; if() #8054 Else End AND if() #8051 Else End AND if() #8048 Body End
PUSHR d4; if() #8048 Else Start
LOADD d2,1; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2162; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0
LOADD d2,0; if() #8058 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2024
LOADD d2,0
COMPAREV d2,5
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2032
LOADD d2,0
COMPAREV d2,4
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2045; Test 'if'
SETV d2,0; if() #8058 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2100; if() #8058 Body End
LOADD d2,0; if() #8062 Test AND if() #8058 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2055
LOADD d2,0
COMPAREV d2,7
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2063
LOADD d2,0
COMPAREV d2,6
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2076; Test 'if'
SETV d2,3; if() #8062 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2100; if() #8062 Body End
LOADD d2,0; if() #8066 Test AND if() #8062 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2091; Test 'if'
SETV d2,7; if() #8066 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2100; if() #8066 Body End
SETV d2,4; if() #8066 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #8066 Else End
POPARGS d5,0.0002; if() #8062 Else End AND if() #8058 Else End AND if() #8048 Else End
RETURNFUNC; Func[void SetEWeaponRotation(EWeapon)] Body End
SETR d4,SP; Func[int __UnblockableDir(int)] Body Start
LOADD d2,0; if() #9341 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2110; Test 'if'
SETV d2,8; return Start AND if() #9341 Body Start
GOTO 2160; return End AND if() #9341 Body End
LOADD d2,0; if() #9342 Test
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2117; Test 'if'
SETV d2,12; return Start AND if() #9342 Body Start
GOTO 2160; return End AND if() #9342 Body End
LOADD d2,0; if() #9343 Test
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2124; Test 'if'
SETV d2,14; return Start AND if() #9343 Body Start
GOTO 2160; return End AND if() #9343 Body End
LOADD d2,0; if() #9344 Test
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2131; Test 'if'
SETV d2,10; return Start AND if() #9344 Body Start
GOTO 2160; return End AND if() #9344 Body End
LOADD d2,0; if() #9345 Test
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2138; Test 'if'
SETV d2,15; return Start AND if() #9345 Body Start
GOTO 2160; return End AND if() #9345 Body End
LOADD d2,0; if() #9346 Test
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2145; Test 'if'
SETV d2,9; return Start AND if() #9346 Body Start
GOTO 2160; return End AND if() #9346 Body End
LOADD d2,0; if() #9347 Test
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2152; Test 'if'
SETV d2,13; return Start AND if() #9347 Body Start
GOTO 2160; return End AND if() #9347 Body End
LOADD d2,0; if() #9348 Test
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2159; Test 'if'
SETV d2,11; return Start AND if() #9348 Body Start
GOTO 2160; return End AND if() #9348 Body End
LOADD d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR d4,SP; Func[int __NormalizeDir(int)] Body Start
LOADD d2,0; if() #9321 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2172
LOADD d2,0
COMPAREV d2,7
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2178; Test 'if'
LOADD d2,0; return Start AND if() #9321 Body Start
GOTO 2235; return End AND if() #9321 Body End
LOADD d2,0; if() #9323 Test
COMPAREV d2,8
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2185; Test 'if'
SETV d2,0; return Start AND if() #9323 Body Start
GOTO 2235; return End AND if() #9323 Body End
LOADD d2,0; if() #9324 Test
COMPAREV d2,9
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2192; Test 'if'
SETV d2,5; return Start AND if() #9324 Body Start
GOTO 2235; return End AND if() #9324 Body End
LOADD d2,0; if() #9325 Test
COMPAREV d2,10
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2199; Test 'if'
SETV d2,3; return Start AND if() #9325 Body Start
GOTO 2235; return End AND if() #9325 Body End
LOADD d2,0; if() #9326 Test
COMPAREV d2,11
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2206; Test 'if'
SETV d2,7; return Start AND if() #9326 Body Start
GOTO 2235; return End AND if() #9326 Body End
LOADD d2,0; if() #9327 Test
COMPAREV d2,12
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2213; Test 'if'
SETV d2,1; return Start AND if() #9327 Body Start
GOTO 2235; return End AND if() #9327 Body End
LOADD d2,0; if() #9328 Test
COMPAREV d2,13
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2220; Test 'if'
SETV d2,6; return Start AND if() #9328 Body Start
GOTO 2235; return End AND if() #9328 Body End
LOADD d2,0; if() #9329 Test
COMPAREV d2,14
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2227; Test 'if'
SETV d2,2; return Start AND if() #9329 Body Start
GOTO 2235; return End AND if() #9329 Body End
LOADD d2,0; if() #9330 Test
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2234; Test 'if'
SETV d2,4; return Start AND if() #9330 Body Start
GOTO 2235; return End AND if() #9330 Body End
SETV d2,0; return Start
POP d5; return End
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR d4,SP; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
CASTBOOLF d2
CASTBOOLF d3
COMPARER d3,d2
SETFALSEI d2
RETURNFUNC; return End AND Func[bool IsSideview()] Body End
SETR d4,SP; Func[void InitializeGhostZHData()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
SETR d4,SP; Func[void KillEWeapon(EWeapon)] Body Start
LOADD d2,0
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,128
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d5
RETURNFUNC; Func[void KillEWeapon(EWeapon)] Body End
PUSHARGSV 0,0.0005; Func[int __GetEWeaponThrowHeight(EWeapon)] Body Start
SETR d4,SP
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
STORED d2,4
LOADD d2,4; if() #9051 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2337; Test 'if'
SETV d2,1; return Start AND if() #9051 Body Start
GOTO 2438; return End AND if() #9051 Body End
PUSHR d4
LOADD d2,5; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNHXSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNHYSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0015; Int.Func[int Distance(int, int, int, int)] Call
POP d4
STORED d2,3
LOADD d2,3; if() #9052 Test
COMPAREV d2,1
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2382; Test 'if'
SETV d2,1; return Start AND if() #9052 Body Start
GOTO 2438; return End AND if() #9052 Body End
LOADD d2,3
PUSHR d2
LOADD d2,4
POP d3
DIVR d3,d2
SETR d2,d3
STORED d2,2
SETV d2,0
STORED d2,1
LOADD d2,1; while() #9053 Test
COMPAREV d2,3.2000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2410; Test 'while'
LOADD d2,1; while() #9053 Body Start
ADDV d2,0.1600
STORED d2,1
LOADD d2,2
SUBV d2,2
STORED d2,2
LOADD d2,2; if() #9055 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2409; Test 'if'
LOADD d2,1; return Start AND if() #9055 Body Start
GOTO 2438; return End AND if() #9055 Body End
GOTO 2391; while() #9053 Body End AND while() #9053 End
SETV d2,0
STORED d2,0
LOADD d2,2; while() #9056 Test
PUSHR d2
LOADD d2,0
DIVV d2,3.2000
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2437; Test 'while'
LOADD d2,1; while() #9056 Body Start
ADDV d2,0.1600
STORED d2,1
LOADD d2,0
PUSHR d2
LOADD d2,1
SUBV d2,3.2000
POP d3
ADDR d2,d3
STORED d2,0
LOADD d2,2
SUBV d2,2
STORED d2,2; while() #9056 Body End
GOTO 2412; while() #9056 End
LOADD d2,1; return Start
POPARGS d5,0.0006; return End
RETURNFUNC; Func[int __GetEWeaponThrowHeight(EWeapon)] Body End
SETR d4,SP; Func[void SetEWeaponRotation(EWeapon, int)] Body Start
PUSHR d4
LOADD d2,0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2162; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0
LOADD d2,0; if() #8070 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2457
LOADD d2,0
COMPAREV d2,5
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2465
LOADD d2,0
COMPAREV d2,4
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2478; Test 'if'
SETV d2,0; if() #8070 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2533; if() #8070 Body End
LOADD d2,0; if() #8074 Test AND if() #8070 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2488
LOADD d2,0
COMPAREV d2,7
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2496
LOADD d2,0
COMPAREV d2,6
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2509; Test 'if'
SETV d2,3; if() #8074 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2533; if() #8074 Body End
LOADD d2,0; if() #8078 Test AND if() #8074 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2524; Test 'if'
SETV d2,7; if() #8078 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2533; if() #8078 Body End
SETV d2,4; if() #8078 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #8078 Else End
POPARGS d5,0.0002; if() #8074 Else End AND if() #8070 Else End
RETURNFUNC; Func[void SetEWeaponRotation(EWeapon, int)] Body End
SETR d4,SP; Func[int Sign(int)] Body Start
LOADD d2,0; if() #8542 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2545; Test 'if'
SETV d2,1; return Start AND if() #8542 Body Start
GOTO 2555; return End AND if() #8542 Body End
LOADD d2,0; if() #8544 Test AND if() #8542 Else Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2554; Test 'if'
SETV d2,-1; return Start AND if() #8544 Body Start
GOTO 2555; return End AND if() #8544 Body End
SETV d2,0; return Start AND if() #8544 Else Start
POP d5; return End AND if() #8544 Else End AND if() #8542 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR d4,SP; Func[void StartGhostZH()] Body Start
PUSHR d4
CALLFUNC 0.2256; UsrFunc[void InitializeGhostZHData()] Call
POP d4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSV 0,0.0007; Func[void UpdateEWeapon(EWeapon)] Body Start
SETR d4,SP
SETR d2,gd27; if() #8667 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2574; Test 'if'
GOTO 3723; return (Void) AND if() #8667 Body
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
STORED d2,6
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
STORED d2,5
SETV d2,1
STORED d2,4
LOADD d2,7; if() #8668 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,128
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2974; Test 'if'
LOADD d2,7; if() #8670 Test AND if() #8668 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2821; Test 'if'
LOADD d2,7; if() #8671 Test AND if() #8670 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2694; Test 'if'
LOADD d2,7; if() #8673 Test AND if() #8671 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2637; Test 'if'
PUSHR d4; if() #8673 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params End
CALLFUNC 0.3725; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Call
POP d4
GOTO 2693; if() #8673 Body End
LOADD d2,7; if() #8676 Test AND if() #8673 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2654; Test 'if'
PUSHR d4; if() #8676 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params End
CALLFUNC 0.3908; UsrFunc[void __UpdateEWMHoming(EWeapon)] Call
POP d4
GOTO 2693; if() #8676 Body End
LOADD d2,7; if() #8679 Test AND if() #8676 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2671; Test 'if'
PUSHR d4; if() #8679 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params End
CALLFUNC 0.4128; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Call
POP d4
GOTO 2693; if() #8679 Body End
LOADD d2,7; if() #8682 Test AND if() #8679 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2688; Test 'if'
PUSHR d4; if() #8682 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params End
CALLFUNC 0.4471; UsrFunc[void __UpdateEWMRandom(EWeapon)] Call
POP d4
GOTO 2693; if() #8682 Body End
PUSHR d4; if() #8682 Else Start
LOADD d2,7; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params End
CALLFUNC 0.4595; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Call
POP d4; if() #8682 Else End
GOTO 2821; if() #8679 Else End AND if() #8676 Else End AND if() #8673 Else End AND if() #8671 Body End
LOADD d2,7; if() #8686 Test AND if() #8671 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2729; Test 'if'
LOADD d2,7; if() #8686 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params End
CALLFUNC 0.4915; UsrFunc[void __UpdateEWMVeer(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4
GOTO 2821; if() #8686 Body End
LOADD d2,7; if() #8689 Test AND if() #8686 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2746; Test 'if'
PUSHR d4; if() #8689 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params End
CALLFUNC 0.5447; UsrFunc[void __UpdateEWMThrow(EWeapon)] Call
POP d4
GOTO 2821; if() #8689 Body End
LOADD d2,7; if() #8692 Test AND if() #8689 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,19
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2763; Test 'if'
PUSHR d4; if() #8692 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMFall(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMFall(EWeapon)] Params End
CALLFUNC 0.5760; UsrFunc[void __UpdateEWMFall(EWeapon)] Call
POP d4
GOTO 2821; if() #8692 Body End
LOADD d2,7; if() #8695 Test AND if() #8692 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,20
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2798; Test 'if'
LOADD d2,7; if() #8695 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params End
CALLFUNC 0.6029; UsrFunc[void __UpdateEWMDrift(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4
GOTO 2821; if() #8695 Body End
LOADD d2,7; if() #8695 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params End
CALLFUNC 0.6533; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4; if() #8695 Else End
LOADD d2,7; if() #8692 Else End AND if() #8689 Else End AND if() #8686 Else End AND if() #8671 Else End AND if() #8670 Body End AND if() #8699 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2973; Test 'if'
LOADD d2,7; if() #8700 Test AND if() #8699 Body Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2879; Test 'if'
LOADD d2,7; if() #8700 Body Start
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,7; if() #8702 Test
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2878; Test 'if'
PUSHR d4; if() #8702 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2300; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #8702 Body End
GOTO 2973; if() #8700 Body End
LOADD d2,7; if() #8703 Test AND if() #8700 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2924; Test 'if'
PUSHR d4; if() #8705 Test AND if() #8703 Body Start
LOADD d2,7; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0015; Int.Func[int Distance(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,7
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2923; Test 'if'
PUSHR d4; if() #8705 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2300; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #8705 Body End
GOTO 2973; if() #8703 Body End
LOADD d2,7; if() #8706 Test AND if() #8703 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2973; Test 'if'
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #8706 Body Start
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
PUSHR d2
LOADD d2,7
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
PUSHVARGR d3; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,7; if() #8707 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2973; Test 'if'
PUSHR d4; if() #8707 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2300; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #8707 Body End
GOTO 3290; if() #8706 Body End AND if() #8703 Else End AND if() #8700 Else End AND if() #8699 Body End AND if() #8668 Body End
LOADD d2,7; if() #8708 Test AND if() #8668 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2996
LOADD d2,7
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1024
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3290; Test 'if'
LOADD d2,7; if() #8710 Test AND if() #8708 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3019; Test 'if'
PUSHR d4; if() #8710 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params End
CALLFUNC 0.7070; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Call
POP d4
GOTO 3290; if() #8710 Body End
LOADD d2,7; if() #8713 Test AND if() #8710 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3155; Test 'if'
LOADD d2,7; if() #8715 Test AND if() #8713 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3053; Test 'if'
SETV d2,0; if() #8715 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 3154; if() #8715 Body End
LOADD d2,7; if() #8717 Test AND if() #8715 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3070; Test 'if'
PUSHR d4; if() #8717 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params End
CALLFUNC 0.7502; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Call
POP d4
GOTO 3154; if() #8717 Body End
LOADD d2,7; if() #8720 Test AND if() #8717 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3087; Test 'if'
PUSHR d4; if() #8720 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params End
CALLFUNC 0.7669; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Call
POP d4
GOTO 3154; if() #8720 Body End
LOADD d2,7; if() #8723 Test AND if() #8720 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3104; Test 'if'
PUSHR d4; if() #8723 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params End
CALLFUNC 0.7713; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Call
POP d4
GOTO 3154; if() #8723 Body End
LOADD d2,7; if() #8726 Test AND if() #8723 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3121; Test 'if'
PUSHR d4; if() #8726 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params End
CALLFUNC 0.7757; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Call
POP d4
GOTO 3154; if() #8726 Body End
LOADD d2,7; if() #8729 Test AND if() #8726 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3138; Test 'if'
PUSHR d4; if() #8729 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params End
CALLFUNC 0.7820; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Call
POP d4
GOTO 3154; if() #8729 Body End
LOADD d2,7; if() #8732 Test AND if() #8729 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3154; Test 'if'
PUSHR d4; if() #8732 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params End
CALLFUNC 0.7883; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Call
POP d4; if() #8732 Body End
GOTO 3290; if() #8729 Else End AND if() #8726 Else End AND if() #8723 Else End AND if() #8720 Else End AND if() #8717 Else End AND if() #8715 Else End AND if() #8713 Body End
LOADD d2,7; if() #8734 Test AND if() #8713 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3172; Test 'if'
PUSHR d4; if() #8734 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params End
CALLFUNC 0.8003; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Call
POP d4
GOTO 3290; if() #8734 Body End
LOADD d2,7; if() #8737 Test AND if() #8734 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,9
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3189; Test 'if'
PUSHR d4; if() #8737 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params End
CALLFUNC 0.8066; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Call
POP d4
GOTO 3290; if() #8737 Body End
LOADD d2,7; if() #8740 Test AND if() #8737 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,10
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3206; Test 'if'
PUSHR d4; if() #8740 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params End
CALLFUNC 0.8131; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Call
POP d4
GOTO 3290; if() #8740 Body End
LOADD d2,7; if() #8743 Test AND if() #8740 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,11
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3223; Test 'if'
PUSHR d4; if() #8743 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params End
CALLFUNC 0.8196; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Call
POP d4
GOTO 3290; if() #8743 Body End
LOADD d2,7; if() #8746 Test AND if() #8743 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,12
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3240; Test 'if'
PUSHR d4; if() #8746 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params End
CALLFUNC 0.8318; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Call
POP d4
GOTO 3290; if() #8746 Body End
LOADD d2,7; if() #8749 Test AND if() #8746 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,13
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3257; Test 'if'
PUSHR d4; if() #8749 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params End
CALLFUNC 0.8433; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Call
POP d4
GOTO 3290; if() #8749 Body End
LOADD d2,7; if() #8752 Test AND if() #8749 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,14
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3274; Test 'if'
PUSHR d4; if() #8752 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params End
CALLFUNC 0.8480; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Call
POP d4
GOTO 3290; if() #8752 Body End
LOADD d2,7; if() #8755 Test AND if() #8752 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3290; Test 'if'
PUSHR d4; if() #8755 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params End
CALLFUNC 0.8531; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Call
POP d4; if() #8755 Body End
LOADD d2,7; if() #8752 Else End AND if() #8749 Else End AND if() #8746 Else End AND if() #8743 Else End AND if() #8740 Else End AND if() #8737 Else End AND if() #8734 Else End AND if() #8713 Else End AND if() #8710 Else End AND if() #8708 Body End AND if() #8668 Else End AND if() #8757 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3317; Test 'if'
LOADD d2,7; if() #8758 Test AND if() #8757 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3317; Test 'if'
PUSHR d4; if() #8758 Body Start
LOADD d2,7; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
CALLFUNC 0.0971; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #8758 Body End
LOADD d2,7; if() #8757 Body End AND if() #8759 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3614; Test 'if'
SETV d2,1000; if() #8759 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
SETR d2,LINKHP; if() #8761 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 3344; Test 'if'
GOTO 3723; return (Void) AND if() #8761 Body
LOADD d2,7; if() #8762 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3364
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3369; Test 'if'
GOTO 3723; return (Void) AND if() #8762 Body
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
LOADD d2,7; if() #8764 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 3388; Test 'if'
LOADD d2,7; InlineFunc[int RadtoDeg(int)] Params Start AND if() #8764 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORED d2,1
GOTO 3454; if() #8764 Body End
PUSHR d4; if() #8764 Else Start
LOADD d2,7; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2162; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0
LOADD d2,0; if() #8766 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3404; Test 'if'
SETV d2,-90; if() #8766 Body Start
STORED d2,1
GOTO 3454; if() #8766 Body End
LOADD d2,0; if() #8768 Test AND if() #8766 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3412; Test 'if'
SETV d2,-45; if() #8768 Body Start
STORED d2,1
GOTO 3454; if() #8768 Body End
LOADD d2,0; if() #8770 Test AND if() #8768 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3420; Test 'if'
SETV d2,0; if() #8770 Body Start
STORED d2,1
GOTO 3454; if() #8770 Body End
LOADD d2,0; if() #8772 Test AND if() #8770 Else Start
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3428; Test 'if'
SETV d2,45; if() #8772 Body Start
STORED d2,1
GOTO 3454; if() #8772 Body End
LOADD d2,0; if() #8774 Test AND if() #8772 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3436; Test 'if'
SETV d2,90; if() #8774 Body Start
STORED d2,1
GOTO 3454; if() #8774 Body End
LOADD d2,0; if() #8776 Test AND if() #8774 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3444; Test 'if'
SETV d2,135; if() #8776 Body Start
STORED d2,1
GOTO 3454; if() #8776 Body End
LOADD d2,0; if() #8778 Test AND if() #8776 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3452; Test 'if'
SETV d2,180; if() #8778 Body Start
STORED d2,1
GOTO 3454; if() #8778 Body End
SETV d2,-135; if() #8778 Else Start
STORED d2,1; if() #8778 Else End
LOADD d2,4; if() #8776 Else End AND if() #8774 Else End AND if() #8772 Else End AND if() #8770 Else End AND if() #8768 Else End AND if() #8766 Else End AND if() #8764 Else End AND if() #8780 Test
COMPAREV d2,0
GOTOTRUE 3496; Test 'if'
LOADD d2,7; if() #8780 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int Cos(int)] Params Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int Sin(int)] Params Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
GOTO 3512; if() #8780 Body End
LOADD d2,7; if() #8780 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,3
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,2; if() #8780 Else End
LOADD d2,6; unless() #8782 Test
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3527
LOADD d2,5
PUSHR d2
LOADD d2,2
POP d3
COMPARER d3,d2
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOFALSE 3543; Test 'unless'
PUSHR d4; unless() #8782 Body Start
LOADD d2,6; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0046; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,1; unless() #8782 Body End
SETV d2,0
STORED d2,0
LOADD d2,1; if() #8784 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3556
LOADD d2,1
COMPAREV d2,180
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3563; Test 'if'
SETV d2,0; if() #8784 Body Start
STORED d2,0
GOTO 3565; if() #8784 Body End
SETV d2,2; if() #8784 Else Start
STORED d2,0; if() #8784 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTXSZ
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTYSZ
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 3671; if() #8759 Body End
LOADD d2,7; if() #8787 Test AND if() #8759 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3654; Test 'if'
SETR d2,gd27; if() #8788 Test AND if() #8787 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3645; Test 'if'
SETV d2,1000; if() #8788 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 3654; if() #8788 Body End
SETV d2,0; if() #8788 Else Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #8788 Else End
LOADD d2,7; if() #8787 Body End AND if() #8790 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3671; Test 'if'
PUSHR d4; if() #8790 Body Start
LOADD d2,7; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1913; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #8790 Body End
LOADD d2,7; if() #8759 Else End AND if() #8791 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,64
COMPAREV d2,0
SETFALSEI d2
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 3723; Test 'if'
LOADD d2,7; if() #8791 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZOFS,d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; if() #8791 Body End
POPARGS d5,0.0008
RETURNFUNC; Func[void UpdateEWeapon(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMSineWave(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1; InlineFunc[int Sin(int)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d3,EWPNMISCD; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(EWeapon)] Body End
PUSHARGSV 0,0.0003; Func[void __UpdateEWMHoming(EWeapon)] Body Start
SETR d4,SP
LOADD d2,3
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,2
LOADD d2,2; if() #9397 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3926; Test 'if'
LOADD d2,2; if() #9397 Body Start
ADDV d2,6.2832
STORED d2,2; if() #9397 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,3
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
STORED d2,1
LOADD d2,1; if() #9398 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3950; Test 'if'
LOADD d2,1; if() #9398 Body Start
ADDV d2,6.2832
STORED d2,1; if() #9398 Body End
LOADD d2,2; InlineFunc[int Abs(int)] Params Start
PUSHR d2
LOADD d2,1
POP d3
SUBR d3,d2
SETR d2,d3; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
STORED d2,0
LOADD d2,0; if() #9399 Test
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 3991
LOADD d2,0
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 6.2832,d2
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4004; Test 'if'
LOADD d2,1; if() #9399 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4071; if() #9399 Body End
PUSHR d4; if() #9402 Test AND if() #9399 Else Start
LOADD d2,2; UsrFunc[int Sign(int)] Params Start
PUSHR d2
LOADD d2,1
POP d3
SUBR d3,d2
PUSHR d3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2535; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int Sign(int)] Params Start
SUBV d2,3.1416
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2535; UsrFunc[int Sign(int)] Call
POP d4
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4048; Test 'if'
LOADD d2,3; if() #9402 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4071; if() #9402 Body End
LOADD d2,3; if() #9402 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2; if() #9402 Else End
PUSHR d4; if() #9399 Else End
LOADD d2,3; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1782; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,3; if() #9404 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4126; Test 'if'
LOADD d2,3; if() #9404 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,3; if() #9405 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4126; Test 'if'
PUSHR d4; if() #9405 Body Start
LOADD d2,3; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2300; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #9405 Body End
POPARGS d5,0.0004; if() #9404 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMHomingReaim(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #9407 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4159; Test 'if'
LOADD d2,1; if() #9407 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9407 Body End
LOADD d2,1; if() #9408 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4264; Test 'if'
LOADD d2,1; if() #9408 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,1; if() #9410 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4263; Test 'if'
LOADD d2,1; if() #9411 Test AND if() #9410 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4221; Test 'if'
PUSHR d4; if() #9411 Body Start
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2300; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4263; if() #9411 Body End
LOADD d2,1; if() #9411 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9411 Else End
GOTO 4469; if() #9410 Body End AND if() #9408 Body End
LOADD d2,1; if() #9408 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,1; if() #9413 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4366; Test 'if'
SETV d2,45; if() #9413 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4
LOADD d2,1; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1782; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,1; if() #9414 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4366; Test 'if'
PUSHR d4; if() #9414 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1913; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #9414 Body End
LOADD d2,1; if() #9413 Body End AND if() #9415 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4392; Test 'if'
LOADD d2,1; if() #9415 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4469; if() #9415 Body End
LOADD d2,1; if() #9417 Test AND if() #9415 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4469; Test 'if'
LOADD d2,1; if() #9417 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.2000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORED d2,0
LOADD d2,0; if() #9418 Test
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4439; Test 'if'
PUSHR d4; if() #9418 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2440; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4469; if() #9418 Body End
LOADD d2,0; if() #9420 Test AND if() #9418 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4451; Test 'if'
PUSHR d4; if() #9420 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2440; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4469; if() #9420 Body End
LOADD d2,0; if() #9422 Test AND if() #9420 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4463; Test 'if'
PUSHR d4; if() #9422 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2440; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4469; if() #9422 Body End
PUSHR d4; if() #9422 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2440; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #9422 Else End
POPARGS d5,0.0002; if() #9420 Else End AND if() #9418 Else End AND if() #9417 Body End AND if() #9415 Else End AND if() #9408 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(EWeapon)] Body End
SETR d4,SP; Func[void __UpdateEWMRandom(EWeapon)] Body Start
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int Randf(int)] Params Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,2
SETV d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
MULTR d2,d3
PUSHR d2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.0038; UsrFunc[int Randf(int)] Call
POP d4
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1782; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,0; if() #9425 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4543; Test 'if'
PUSHR d4; if() #9425 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1913; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #9425 Body End
LOADD d2,0; if() #9426 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4593; Test 'if'
LOADD d2,0; if() #9426 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,0; if() #9427 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4593; Test 'if'
PUSHR d4; if() #9427 Body Start
LOADD d2,0; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2300; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #9427 Body End
POP d5; if() #9426 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMRandomReaim(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #9429 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4626; Test 'if'
LOADD d2,1; if() #9429 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9429 Body End
LOADD d2,1; if() #9430 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4731; Test 'if'
LOADD d2,1; if() #9430 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,1; if() #9432 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4730; Test 'if'
LOADD d2,1; if() #9433 Test AND if() #9432 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4688; Test 'if'
PUSHR d4; if() #9433 Body Start
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2300; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4730; if() #9433 Body End
LOADD d2,1; if() #9433 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9433 Else End
GOTO 4913; if() #9432 Body End AND if() #9430 Body End
LOADD d2,1; if() #9430 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,1; if() #9435 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4823; Test 'if'
SETV d2,45; if() #9435 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d3,62832; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
MULTV d2,0.0001
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1782; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,1; if() #9436 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4823; Test 'if'
PUSHR d4; if() #9436 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1913; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #9436 Body End
LOADD d2,1; if() #9435 Body End AND if() #9437 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4849; Test 'if'
LOADD d2,1; if() #9437 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4913; if() #9437 Body End
LOADD d2,1; if() #9439 Test AND if() #9437 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4913; Test 'if'
LOADD d2,1; if() #9439 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORED d2,0
LOADD d2,0; if() #9440 Test
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4883; Test 'if'
PUSHR d4; if() #9440 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2440; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4913; if() #9440 Body End
LOADD d2,0; if() #9442 Test AND if() #9440 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4895; Test 'if'
PUSHR d4; if() #9442 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2440; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4913; if() #9442 Body End
LOADD d2,0; if() #9444 Test AND if() #9442 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4907; Test 'if'
PUSHR d4; if() #9444 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2440; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4913; if() #9444 Body End
PUSHR d4; if() #9444 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2440; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #9444 Else End
POPARGS d5,0.0002; if() #9442 Else End AND if() #9440 Else End AND if() #9439 Body End AND if() #9437 Else End AND if() #9430 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMVeer(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #9465 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5030; Test 'if'
LOADD d2,1; if() #9465 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5387; if() #9465 Body End
LOADD d2,0; if() #9467 Test AND if() #9465 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5064; Test 'if'
LOADD d2,1; if() #9467 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5387; if() #9467 Body End
LOADD d2,0; if() #9469 Test AND if() #9467 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5099; Test 'if'
LOADD d2,1; if() #9469 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5387; if() #9469 Body End
LOADD d2,0; if() #9471 Test AND if() #9469 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5133; Test 'if'
LOADD d2,1; if() #9471 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5387; if() #9471 Body End
LOADD d2,0; if() #9473 Test AND if() #9471 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5199; Test 'if'
LOADD d2,1; if() #9473 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5387; if() #9473 Body End
LOADD d2,0; if() #9475 Test AND if() #9473 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5264; Test 'if'
LOADD d2,1; if() #9475 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5387; if() #9475 Body End
LOADD d2,0; if() #9477 Test AND if() #9475 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5329; Test 'if'
LOADD d2,1; if() #9477 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5387; if() #9477 Body End
LOADD d2,1; if() #9477 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9477 Else End
LOADD d2,1; if() #9475 Else End AND if() #9473 Else End AND if() #9471 Else End AND if() #9469 Else End AND if() #9467 Else End AND if() #9465 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMThrow(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOADD d2,1; if() #9448 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5479
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5513; Test 'if'
LOADD d2,1; if() #9448 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9448 Body End
LOADD d2,1; InlineFunc[untyped Max(untyped, untyped)] Params Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHVARGR d2
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #9451 Test AND if(true) #9450 [Opt:AlwaysOn]
CALLFUNC 0.2237; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5565; Test 'unless'
LOADD d2,1; unless() #9451 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5581; unless() #9451 Body End
LOADD d2,1; unless() #9451 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 176,d2
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; unless() #9451 Else End
LOADD d2,1; if() #9453 Test
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5646; Test 'if'
PUSHR d4; unless() #9456 Test AND if(true) #9455 [Opt:AlwaysOn] AND if() #9453 Body Start
LOADD d2,1; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9878; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5645; Test 'unless'
LOADD d2,1; InlineFunc[untyped Max(untyped, untyped)] Params Start AND unless() #9456 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; unless() #9456 Body End
GOTO 5758; if() #9453 Body End
SETV d2,0; if() #9453 Else Start
STORED d2,0
LOADD d2,1; if() #9457 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
GOTOTRUE 5707; Test 'if'
LOADD d2,1; if() #9459 Test AND if() #9457 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5704; Test 'if'
LOADD d2,1; if() #9459 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 5706; if() #9459 Body End
SETV d2,1; if() #9459 Else Start
STORED d2,0; if() #9459 Else End
GOTO 5709; if() #9457 Body End
SETV d2,1; if() #9457 Else Start
STORED d2,0; if() #9457 Else End
LOADD d2,0; if() #9461 Test
COMPAREV d2,0
GOTOTRUE 5758; Test 'if'
LOADD d2,1; if() #9462 Test AND if() #9461 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOTRUE 5737; Test 'if'
SETV d2,0; if() #9462 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2300; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 5758; if() #9462 Body End
SETV d2,0; if() #9462 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #9462 Else End
POPARGS d5,0.0002; if() #9461 Body End AND if() #9453 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMFall(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #9383 Test AND if(true) #9382 [Opt:AlwaysOn]
CALLFUNC 0.2237; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5821; Test 'unless'
LOADD d2,1; unless() #9383 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5851; unless() #9383 Body End
LOADD d2,1; unless() #9383 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; unless() #9383 Else End
LOADD d2,1; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,0.1600
PUSHVARGR d2
PUSHVARGV 3.2000; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #9386 Test AND if(true) #9385 [Opt:AlwaysOn]
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 6027; Test 'if'
PUSHR d4; unless() #9387 Test AND if() #9386 Body Start
LOADD d2,1; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9878; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 6027; Test 'unless'
SETV d2,0; unless() #9387 Body Start
STORED d2,0
LOADD d2,1; if() #9389 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5976; Test 'if'
LOADD d2,1; if() #9391 Test AND if() #9389 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5973; Test 'if'
LOADD d2,1; if() #9391 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 5975; if() #9391 Body End
SETV d2,1; if() #9391 Else Start
STORED d2,0; if() #9391 Else End
GOTO 5978; if() #9389 Body End
SETV d2,1; if() #9389 Else Start
STORED d2,0; if() #9389 Else End
LOADD d2,0; if() #9393 Test
COMPAREV d2,0
GOTOTRUE 6027; Test 'if'
LOADD d2,1; if() #9394 Test AND if() #9393 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOTRUE 6006; Test 'if'
SETV d2,0; if() #9394 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2300; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 6027; if() #9394 Body End
SETV d2,0; if() #9394 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #9394 Else End
POPARGS d5,0.0002; if() #9393 Body End AND unless() #9387 Body End AND if() #9386 Body End
RETURNFUNC; Func[void __UpdateEWMFall(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMDrift(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #9350 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6144; Test 'if'
LOADD d2,1; if() #9350 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6501; if() #9350 Body End
LOADD d2,0; if() #9352 Test AND if() #9350 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6178; Test 'if'
LOADD d2,1; if() #9352 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6501; if() #9352 Body End
LOADD d2,0; if() #9354 Test AND if() #9352 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6213; Test 'if'
LOADD d2,1; if() #9354 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6501; if() #9354 Body End
LOADD d2,0; if() #9356 Test AND if() #9354 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6247; Test 'if'
LOADD d2,1; if() #9356 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6501; if() #9356 Body End
LOADD d2,0; if() #9358 Test AND if() #9356 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6313; Test 'if'
LOADD d2,1; if() #9358 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6501; if() #9358 Body End
LOADD d2,0; if() #9360 Test AND if() #9358 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6378; Test 'if'
LOADD d2,1; if() #9360 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6501; if() #9360 Body End
LOADD d2,0; if() #9362 Test AND if() #9360 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6443; Test 'if'
LOADD d2,1; if() #9362 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6501; if() #9362 Body End
LOADD d2,1; if() #9362 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9362 Else End
LOADD d2,1; if() #9360 Else End AND if() #9358 Else End AND if() #9356 Else End AND if() #9354 Else End AND if() #9352 Else End AND if() #9350 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(EWeapon)] Body End
PUSHV 0; Func[void __UpdateEWMDriftWait(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1; if() #9365 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,16
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 6625; Test 'if'
LOADD d2,1; if() #9365 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6646; if() #9365 Body End
LOADD d2,1; if() #9365 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2; if() #9365 Else End
LOADD d2,0; if() #9367 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6681; Test 'if'
LOADD d2,1; if() #9367 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7038; if() #9367 Body End
LOADD d2,0; if() #9369 Test AND if() #9367 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6715; Test 'if'
LOADD d2,1; if() #9369 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7038; if() #9369 Body End
LOADD d2,0; if() #9371 Test AND if() #9369 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6750; Test 'if'
LOADD d2,1; if() #9371 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7038; if() #9371 Body End
LOADD d2,0; if() #9373 Test AND if() #9371 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6784; Test 'if'
LOADD d2,1; if() #9373 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7038; if() #9373 Body End
LOADD d2,0; if() #9375 Test AND if() #9373 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6850; Test 'if'
LOADD d2,1; if() #9375 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7038; if() #9375 Body End
LOADD d2,0; if() #9377 Test AND if() #9375 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6915; Test 'if'
LOADD d2,1; if() #9377 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7038; if() #9377 Body End
LOADD d2,0; if() #9379 Test AND if() #9377 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6980; Test 'if'
LOADD d2,1; if() #9379 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7038; if() #9379 Body End
LOADD d2,1; if() #9379 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9379 Else End
LOADD d2,1; if() #9377 Else End AND if() #9375 Else End AND if() #9373 Else End AND if() #9371 Else End AND if() #9369 Else End AND if() #9367 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(EWeapon)] Body End
PUSHARGSV 0,0.0011; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,10
SETV d2,0
STORED d2,9
SETV d2,0
STORED d2,8
SETV d2,0
STORED d2,7
SETV d2,0
STORED d2,6
SETV d2,0
STORED d2,5
SETV d2,0
STORED d2,4
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
LOADD d2,11; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,10
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #9005 setup
STORED d2,2
LOADD d2,2; for() #9005 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7147; for() #9005 TestFail?
LOADD d2,2; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #9005 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,9
LOADD d2,9; if() #9008 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,768
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 7126; Test 'if'
GOTO 7141; continue #9007 AND if() #9008 Body
LOADD d2,9; if() #9009 Test
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,10
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7141; Test 'if'
GOTO 7147; break #9006 AND if() #9009 Body
LOADD d2,2; for() #9005 Body End AND for() #9005 LoopIncrement
PUSHR d2
SUBV d2,1
STORED d2,2
POP d2
GOTO 7101; for() #9005 End
LOADD d2,2; if() #9010 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7173; Test 'if'
ALLOCATEMEMV d2,43; if() #9010 Body Start
STORED d2,0
WRITEPODSTRING d2,"ghost.zh: Failed to find prototype eweapon"
LOADD d2,0; InlineFunc[void TraceS(int)] Params Start
SETR d0,d2; InlineFunc[void TraceS(int)] Params End
TRACE6 d3; InlineFunc[void TraceS(int)] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV d2,0
PUSHR d2
LOADD d2,11
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
LOADD d3,0
DEALLOCATEMEMR d3
GOTO 7500; return (Void)
LOADD d3,0
DEALLOCATEMEMR d3; if() #9010 Body End
LOADD d2,11
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MODV d2,10
SUBV d2,6.2832
STORED d2,4
LOADD d2,11
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,10
POP d3
SUBR d3,d2
SETR d2,d3
MULTV d2,10000
STORED d2,3
LOADD d2,11
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,4
POP d3
SUBR d3,d2
SETR d2,d3
DIVV d2,100
RSHIFTV d2,0
STORED d2,7
LOADD d2,11; if() #9011 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7263; Test 'if'
LOADD d2,11; if() #9011 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,6
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,5
GOTO 7275; if() #9011 Body End
LOADD d2,11; if() #9011 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
ADDV d2,8
STORED d2,6
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
ADDV d2,8
STORED d2,5; if() #9011 Else End
LOADD d2,7; if() #9013 Test
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7333; Test 'if'
SETV d2,0; for() #9015 setup AND if() #9013 Body Start
STORED d2,1
LOADD d2,1; for() #9015 LoopTest
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7324; for() #9015 TestFail?
PUSHR d4; for() #9015 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,1
MULTV d2,6.2832
SETV d2,6.2832
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.9379; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #9015 Body End
LOADD d2,1; for() #9015 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,1
POP d2
GOTO 7282; for() #9015 End
LOADD d2,9; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7491; if() #9013 Body End
LOADD d2,7; if() #9018 Test AND if() #9013 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7378; Test 'if'
SETV d2,0; for() #9020 setup AND if() #9018 Body Start
STORED d2,1
LOADD d2,1; for() #9020 LoopTest
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7369; for() #9020 TestFail?
PUSHR d4; for() #9020 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
SETV d3,31416; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
DIVV d2,5000
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.9379; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #9020 Body End
LOADD d2,1; for() #9020 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,1
POP d2
GOTO 7340; for() #9020 End
LOADD d2,9; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7491; if() #9018 Body End
LOADD d2,3; if() #9023 Test AND if() #9018 Else Start
COMPAREV d2,1
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7452; Test 'if'
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start AND if() #9023 Body Start
ADDV d2,8
PUSHR d2
LOADD d2,6
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2
LOADD d2,4
DIVV d2,2
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
SETV d2,0; for() #9025 setup
STORED d2,0
LOADD d2,0; for() #9025 LoopTest
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7451; for() #9025 TestFail?
PUSHR d4; for() #9025 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
SUBV d2,1
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.9379; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #9025 Body End
LOADD d2,0; for() #9025 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7410; for() #9025 End
GOTO 7483; if() #9023 Body End
LOADD d2,3; if() #9028 Test AND if() #9023 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7483; Test 'if'
PUSHR d4; if() #9028 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,6
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.9379; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; if() #9028 Body End
LOADD d2,9; if() #9023 Else End AND InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #9018 Else End
SETV d2,0; if() #9013 Else End
PUSHR d2
LOADD d2,11
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #8993 Test
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 7591; Test 'if'
PUSHR d4; if() #8993 Body Start
LOADD d2,1; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0021; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1782; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
SETV d2,300
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7667; if() #8993 Body End
LOADD d2,1; if() #8995 Test AND if() #8993 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 7616; Test 'if'
LOADD d2,1; if() #8995 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1782; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
GOTO 7667; if() #8995 Body End
LOADD d2,1; if() #8995 Else Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,6
STORED d2,0
LOADD d2,0; if() #8997 Test
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7637; Test 'if'
PUSHR d4; if() #8997 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2440; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7667; if() #8997 Body End
LOADD d2,0; if() #8999 Test AND if() #8997 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7649; Test 'if'
PUSHR d4; if() #8999 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2440; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7667; if() #8999 Body End
LOADD d2,0; if() #9001 Test AND if() #8999 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7661; Test 'if'
PUSHR d4; if() #9001 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2440; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7667; if() #9001 Body End
PUSHR d4; if() #9001 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2440; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #9001 Else End
POPARGS d5,0.0002; if() #8999 Else End AND if() #8997 Else End AND if() #8995 Else End AND if() #8993 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 135; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathExplode(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 136; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body Start
SETR d4,SP
SETV d2,0; for() #8952 setup
STORED d2,0
LOADD d2,0; for() #8952 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7809; for() #8952 TestFail?
PUSHR d4; for() #8952 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8952 Body End
LOADD d2,0; for() #8952 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7761; for() #8952 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body Start
SETR d4,SP
SETV d2,4; for() #8948 setup
STORED d2,0
LOADD d2,0; for() #8948 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7872; for() #8948 TestFail?
PUSHR d4; for() #8948 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8948 Body End
LOADD d2,0; for() #8948 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7824; for() #8948 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body Start
SETR d4,SP
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #8956 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7942; Test 'if'
SETV d2,0; for() #8958 setup AND if() #8956 Body Start
STORED d2,0
LOADD d2,0; for() #8958 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7941; for() #8958 TestFail?
PUSHR d4; for() #8958 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8958 Body End
LOADD d2,0; for() #8958 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7893; for() #8958 End
GOTO 7992; if() #8956 Body End
SETV d2,4; for() #8961 setup AND if() #8956 Else Start
STORED d2,0
LOADD d2,0; for() #8961 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7992; for() #8961 TestFail?
PUSHR d4; for() #8961 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8961 Body End
LOADD d2,0; for() #8961 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7944; for() #8961 End
SETV d2,0; if() #8956 Else End
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body Start
SETR d4,SP
SETV d2,0; for() #8982 setup
STORED d2,0
LOADD d2,0; for() #8982 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8055; for() #8982 TestFail?
PUSHR d4; for() #8982 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8982 Body End
LOADD d2,0; for() #8982 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8007; for() #8982 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body Start
SETR d4,SP
SETV d2,0; for() #8969 setup
STORED d2,0
LOADD d2,0; for() #8969 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8118; for() #8969 TestFail?
PUSHR d4; for() #8969 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8969 Body End
LOADD d2,0; for() #8969 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8070; for() #8969 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body Start
SETR d4,SP
SETV d2,4; for() #8965 setup
STORED d2,0
LOADD d2,0; for() #8965 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8183; for() #8965 TestFail?
PUSHR d4; for() #8965 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8965 Body End
LOADD d2,0; for() #8965 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8135; for() #8965 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body Start
SETR d4,SP
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #8973 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8255; Test 'if'
SETV d2,0; for() #8975 setup AND if() #8973 Body Start
STORED d2,0
LOADD d2,0; for() #8975 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8254; for() #8975 TestFail?
PUSHR d4; for() #8975 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8975 Body End
LOADD d2,0; for() #8975 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8206; for() #8975 End
GOTO 8305; if() #8973 Body End
SETV d2,4; for() #8978 setup AND if() #8973 Else Start
STORED d2,0
LOADD d2,0; for() #8978 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8305; for() #8978 TestFail?
PUSHR d4; for() #8978 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8978 Body End
LOADD d2,0; for() #8978 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8257; for() #8978 End
SETV d2,13; if() #8973 Else End AND InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body Start
SETR d4,SP
SETV d2,0; for() #8986 setup
STORED d2,0
LOADD d2,0; for() #8986 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8370; for() #8986 TestFail?
PUSHR d4; for() #8986 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8986 Body End
LOADD d2,0; for() #8986 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8322; for() #8986 End
SETV d2,4; for() #8989 setup
STORED d2,0
LOADD d2,0; for() #8989 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8420; for() #8989 TestFail?
PUSHR d4; for() #8989 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8989 Body End
LOADD d2,0; for() #8989 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8372; for() #8989 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body End
PUSHV 0; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; InlineFunc[NPC Screen->CreateNPC(int)] Params Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[NPC Screen->CreateNPC(int)] Params End
CREATENPCR d2; InlineFunc[NPC Screen->CreateNPC(int)] Body Start
SETR d2,REFNPC; InlineFunc[NPC Screen->CreateNPC(int)] Body End
STORED d2,0
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body Start
PUSHR d4
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1379; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POP d5
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body End
PUSHARGSV 0,0.0005; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,4
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
PUSHR d4
CALLFUNC 0.1320; UsrFunc[int FindUnusedFFC()] Call
POP d4
STORED d2,4
LOADD d2,4; if() #9030 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8560; Test 'if'
SETV d2,0; if() #9030 Body Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 8704; return (Void) AND if() #9030 Body End
LOADD d2,4; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,3
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #9031 setup
STORED d2,0
LOADD d2,0; for() #9031 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8607; for() #9031 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #9031 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,2
LOADD d2,2; if() #9034 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,512
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 8590; Test 'if'
GOTO 8601; continue #9033 AND if() #9034 Body
LOADD d2,1; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHVARGR d2
LOADD d2,2
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
PUSHVARGR EWPNMISCD; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
STORED d2,1; for() #9031 Body End
LOADD d2,0; for() #9031 LoopIncrement
PUSHR d2
SUBV d2,1
STORED d2,0
POP d2
GOTO 8565; for() #9031 End
LOADD d2,1
SUBV d2,1
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
SETV d2,3
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,5
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,1024
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
PUSHR d4
LOADD d2,5; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0864; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
LOADD d2,5; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0887; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
LOADD d2,5
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOADD d2,1
SUBV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
POPARGS d5,0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body End
PUSHARGSV 0,0.0002; Func[void UpdateEWeapons()] Body Start
SETR d4,SP
SETV d2,0
STORED d2,1
SETR d2,LINKACTION; unless() #8794 Test
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 8720
SETR d2,LINKACTION
COMPAREV d2,5
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 8728
SETR d2,LINKACTION
COMPAREV d2,14
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 8736
SETR d2,LINKACTION
COMPAREV d2,15
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOFALSE 8793; Test 'unless'
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #8799 setup AND unless() #8794 Body Start
STORED d2,0
LOADD d2,0; for() #8799 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8792; for() #8799 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #8799 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,1
LOADD d2,1; if() #8802 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 8777
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 8781; Test 'if'
GOTO 8786; continue #8801 AND if() #8802 Body
PUSHR d4
LOADD d2,1; UsrFunc[void UpdateEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void UpdateEWeapon(EWeapon)] Params End
CALLFUNC 0.2562; UsrFunc[void UpdateEWeapon(EWeapon)] Call
POP d4; for() #8799 Body End
LOADD d2,0; for() #8799 LoopIncrement
PUSHR d2
SUBV d2,1
STORED d2,0
POP d2
GOTO 8741; for() #8799 End
GOTO 8846; unless() #8794 Body End
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #8804 setup AND unless() #8794 Else Start
STORED d2,0
LOADD d2,0; for() #8804 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8846; for() #8804 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #8804 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,1
LOADD d2,1; if() #8807 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 8831
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 8835; Test 'if'
GOTO 8840; continue #8806 AND if() #8807 Body
PUSHR d4
LOADD d2,1; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params End
CALLFUNC 0.8848; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Call
POP d4; for() #8804 Body End
LOADD d2,0; for() #8804 LoopIncrement
PUSHR d2
SUBV d2,1
STORED d2,0
POP d2
GOTO 8795; for() #8804 End
POPARGS d5,0.0002; unless() #8794 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSV 0,0.0002; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body Start
SETR d4,SP
LOADD d2,2; if() #9480 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 8877; Test 'if'
LOADD d2,2; if() #9481 Test AND if() #9480 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8877; Test 'if'
PUSHR d4; if() #9481 Body Start
LOADD d2,2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
CALLFUNC 0.0971; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #9481 Body End
LOADD d2,2; if() #9480 Body End AND if() #9482 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9078; Test 'if'
SETV d2,1000; if() #9482 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
LOADD d2,2; if() #9484 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 8918
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 8923; Test 'if'
GOTO 9135; return (Void) AND if() #9484 Body
SETV d2,0
STORED d2,1
LOADD d2,2; if() #9486 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 8938; Test 'if'
LOADD d2,2; InlineFunc[int RadtoDeg(int)] Params Start AND if() #9486 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORED d2,1
GOTO 9004; if() #9486 Body End
PUSHR d4; if() #9486 Else Start
LOADD d2,2; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2162; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0
LOADD d2,0; if() #9488 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8954; Test 'if'
SETV d2,-90; if() #9488 Body Start
STORED d2,1
GOTO 9004; if() #9488 Body End
LOADD d2,0; if() #9490 Test AND if() #9488 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8962; Test 'if'
SETV d2,-45; if() #9490 Body Start
STORED d2,1
GOTO 9004; if() #9490 Body End
LOADD d2,0; if() #9492 Test AND if() #9490 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8970; Test 'if'
SETV d2,0; if() #9492 Body Start
STORED d2,1
GOTO 9004; if() #9492 Body End
LOADD d2,0; if() #9494 Test AND if() #9492 Else Start
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8978; Test 'if'
SETV d2,45; if() #9494 Body Start
STORED d2,1
GOTO 9004; if() #9494 Body End
LOADD d2,0; if() #9496 Test AND if() #9494 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8986; Test 'if'
SETV d2,90; if() #9496 Body Start
STORED d2,1
GOTO 9004; if() #9496 Body End
LOADD d2,0; if() #9498 Test AND if() #9496 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8994; Test 'if'
SETV d2,135; if() #9498 Body Start
STORED d2,1
GOTO 9004; if() #9498 Body End
LOADD d2,0; if() #9500 Test AND if() #9498 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9002; Test 'if'
SETV d2,180; if() #9500 Body Start
STORED d2,1
GOTO 9004; if() #9500 Body End
SETV d2,-135; if() #9500 Else Start
STORED d2,1; if() #9500 Else End
SETV d2,0; if() #9498 Else End AND if() #9496 Else End AND if() #9494 Else End AND if() #9492 Else End AND if() #9490 Else End AND if() #9488 Else End AND if() #9486 Else End
STORED d2,0
LOADD d2,1; if() #9502 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9017
LOADD d2,1
COMPAREV d2,180
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9024; Test 'if'
SETV d2,0; if() #9502 Body Start
STORED d2,0
GOTO 9026; if() #9502 Body End
SETV d2,2; if() #9502 Else Start
STORED d2,0; if() #9502 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
PUSHARGSV 1,0.0002
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 9135; if() #9482 Body End
LOADD d2,2; if() #9505 Test AND if() #9482 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9118; Test 'if'
SETR d2,gd27; if() #9506 Test AND if() #9505 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9109; Test 'if'
SETV d2,1000; if() #9506 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 9118; if() #9506 Body End
SETV d2,0; if() #9506 Else Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #9506 Else End
LOADD d2,2; if() #9505 Body End AND if() #9508 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9135; Test 'if'
PUSHR d4; if() #9508 Body Start
LOADD d2,2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1913; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #9508 Body End
POPARGS d5,0.0003; if() #9482 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body End
SETR d4,SP; Func[void UpdateGhostZH1()] Body Start
PUSHR d4
CALLFUNC 0.8706; UsrFunc[void UpdateEWeapons()] Call
PEEK d4
CALLFUNC 0.0910; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK d4
CALLFUNC 0.9146; UsrFunc[void UpdateGhostZHData1()] Call
POP d4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHV 0; Func[void UpdateGhostZHData1()] Body Start
SETR d4,SP
SETR d2,CURDMAP; InlineFunc[int Game->GetCurDMap()] Body
LSHIFTV d2,8
PUSHR d2
SETR d2,CURDSCR; InlineFunc[int Game->GetCurDMapScreen()] Body
POP d3
ADDR d2,d3
STORED d2,0
SETR d2,gd27; if() #8818 Test
PUSHR d2
POP d0
READPODARRAYV d2,7
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9179; Test 'if'
SETV d2,0; if() #8818 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
LOADD d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 7,d2
GOTO 9201; if() #8818 Body End
SETR d2,gd27; if() #8820 Test AND if() #8818 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9201; Test 'if'
SETR d2,gd27; if() #8820 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,6
PUSHR d2
SUBV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
POP d2; if() #8820 Body End
POP d5; if() #8818 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR d4,SP; Func[void UpdateGhostZH2()] Body Start
PUSHR d4
CALLFUNC 0.1037; UsrFunc[void DrawGhostFFCs()] Call
PEEK d4
CALLFUNC 0.0065; UsrFunc[void AutoGhost()] Call
PEEK d4
CALLFUNC 0.9212; UsrFunc[void UpdateGhostZHData2()] Call
POP d4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR d4,SP; Func[void UpdateGhostZHData2()] Body Start
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,1
ADDV d2,1
MODV d2,8
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETR d2,gd27; if() #8822 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9244; Test 'if'
SETR d2,gd27; if() #8822 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ORV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
GOTO 9254; if() #8822 Body End
SETR d2,gd27; if() #8822 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,-2
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #8822 Else End
SETR d2,gd27; if(true) #8824 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,3
PUSHR d2
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
POP d2
SETR d2,gd27; if() #8825 Test
PUSHR d2
POP d0
READPODARRAYV d2,3
COMPAREV d2,8
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9291; Test 'if'
SETV d2,0; if() #8825 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2; if() #8825 Body End
SETR d2,gd27; if(true) #8826 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,5
PUSHR d2
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
POP d2
SETR d2,gd27; if() #8827 Test
PUSHR d2
POP d0
READPODARRAYV d2,5
COMPAREV d2,8
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9328; Test 'if'
SETV d2,0; if() #8827 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2; if() #8827 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR d4,SP; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOADD d2,1; if() #9312 Test
COMPAREV d2,97
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9342; Test 'if'
LOADD d2,1; if() #9313 Test AND if() #9312 Body Start
COMPAREV d2,122
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 9342; Test 'if'
SETV d2,1; return Start AND if() #9313 Body Start
GOTO 9377; return End AND if() #9313 Body End
LOADD d2,1; if() #9312 Body End AND if() #9314 Test
COMPAREV d2,65
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9354; Test 'if'
LOADD d2,1; if() #9315 Test AND if() #9314 Body Start
COMPAREV d2,90
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 9354; Test 'if'
SETV d2,1; return Start AND if() #9315 Body Start
GOTO 9377; return End AND if() #9315 Body End
LOADD d2,1; if() #9314 Body End AND if() #9316 Test
COMPAREV d2,95
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9361; Test 'if'
SETV d2,1; return Start AND if() #9316 Body Start
GOTO 9377; return End AND if() #9316 Body End
LOADD d2,0; unless() #9317 Test
COMPAREV d2,0
GOTOFALSE 9376; Test 'unless'
LOADD d2,1; if() #9318 Test AND unless() #9317 Body Start
COMPAREV d2,48
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9376; Test 'if'
LOADD d2,1; if() #9319 Test AND if() #9318 Body Start
COMPAREV d2,57
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 9376; Test 'if'
SETV d2,1; return Start AND if() #9319 Body Start
GOTO 9377; return End AND if() #9319 Body End
SETV d2,0; if() #9318 Body End AND unless() #9317 Body End AND return Start
POPARGS d5,0.0002; return End
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHV 0; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body Start
SETR d4,SP
LOADD d2,4; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNID; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params End
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORED d2,0
LOADD d2,4; if() #8932 Test
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9413; Test 'if'
LOADD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #8932 Body Start
PUSHR d2
LOADD d2,4
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #8932 Body End
LOADD d2,4; if() #8933 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9549; Test 'if'
SETV d2,3; if() #8933 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNEXTEND,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTXSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTYSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHXSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYSZ,d2
LOADD d2,3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
GOTO 9569; if() #8933 Body End
LOADD d2,3; if() #8933 Else Start
SUBV d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,2
SUBV d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; if() #8933 Else End
LOADD d2,4
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOADD d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1782; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4; if() #8935 Test
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9707
LOADD d2,4
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9728; Test 'if'
PUSHR d4; if() #8935 Body Start
LOADD d2,0; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params Start
PUSHR d2; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params End
CALLFUNC 0.2322; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 9746; if() #8935 Body End
LOADD d2,4; if() #8935 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #8935 Else End
LOADD d2,4
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,11
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,-257
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #8938 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,32
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9859; Test 'if'
SETV d2,0; if() #8938 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #8938 Body End
LOADD d2,0; if() #8939 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9876; Test 'if'
PUSHR d4; if() #8939 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1913; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #8939 Body End
POPARGS d5,0.0005
RETURNFUNC; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body End
PUSHV 0; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR d4,SP
SETV d2,0; for() #9674 setup
STORED d2,0
LOADD d2,0; for() #9674 LoopTest
PUSHR d2
LOADD d2,1
SUBV d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 9928; for() #9674 TestFail?
LOADD d2,6; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #9677 Test AND for() #9674 Body Start
PUSHR d2
LOADD d2,4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOTRUE 9924; Test 'if'
SETV d2,0; if() #9678 Test AND if() #9677 Body Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
COMPAREV d2,0
GOTOTRUE 9924; Test 'if'
SETV d2,1; return Start AND if() #9678 Body Start
GOTO 9929; return End AND if() #9678 Body End
LOADD d2,0; if() #9677 Body End AND for() #9674 Body End AND for() #9674 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 9882; for() #9674 End
SETV d2,0; return Start
POPARGS d5,0.0007; return End
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End


PUSHR d0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR d4,SP
LOADD d2,1; if() #11110 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 16; Test 'if'
SETV d2,-1; if() #11110 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
GOTO 22; if() #11110 Body End
LOADD d2,1; if() #11110 Else Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2; if() #11110 Else End
POPARGS d5,0.0002
QUIT; void run(int) Body End


SETV gd9,0; void run() Body Start
SETV gd10,0
SETV gd12,0
SETV gd11,0
SETV gd5,0
SETV gd15,0
SETV gd6,0
SETV gd14,0
SETV gd13,0
SETV gd7,0
SETV gd8,0
SETV gd2,0
SETV gd3,0
SETV gd4,0
ALLOCATEGMEMV d2,25
SETR gd26,d2
SETV gd16,0
SETV gd17,0
SETV gd21,0
SETV gd18,0
SETV gd22,0
SETV gd19,0
SETV gd20,0
ALLOCATEGMEMV d2,32
SETR gd25,d2
SETV gd23,0
SETV gd24,0
ALLOCATEGMEMV d2,8
SETR gd27,d2
ALLOCATEGMEMV d2,1000
SETR gd28,d2
ALLOCATEGMEMV d2,4096
SETR gd1,d2
QUIT; void run() Body End