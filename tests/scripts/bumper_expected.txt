Compiling 'bumper.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR d0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSV 0,0.0007
SETR d4,SP
LOADD d2,7
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,6
SETV d2,0
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
PUSHARGSR d4,0.0002; if() #558 Test AND while(true) #8 Body [Opt:AlwaysOn] Start AND Int.Func[int Distance(int, int, int, int)] Params Start
LOADD d2,7; UsrFunc[int CenterX(FFC)] Params Start
PUSHR d2; UsrFunc[int CenterX(FFC)] Params End
CALLFUNC 0.0768; UsrFunc[int CenterX(FFC)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,7; UsrFunc[int CenterY(FFC)] Params Start
PUSHR d2; UsrFunc[int CenterY(FFC)] Params End
CALLFUNC 0.0791; UsrFunc[int CenterY(FFC)] Call
POP d4
PUSHR d2
PUSHR d4
CALLFUNC 0.0760; UsrFunc[int CenterLinkX()] Call
POP d4
PUSHR d2
PUSHR d4
CALLFUNC 0.0764; UsrFunc[int CenterLinkY()] Call
POP d4
PUSHR d2; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0411; Int.Func[int Distance(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
MULTV d2,8
ADDV d2,2
POP d3
COMPARER d3,d2
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 59
SETR d2,LINKZ
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 106; Test 'if'
LOADD d2,7; if() #559 Test AND if() #558 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFINITDD
COMPAREV d2,0
SETCMP d2,0.0012
COMPAREV d2,0
GOTOTRUE 103; Test 'if'
SETV d2,76; InlineFunc[void Game->PlaySound(int)] Params AND if() #559 Body Start
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
PUSHARGSR d4,0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOADD d2,7; UsrFunc[int CenterX(FFC)] Params Start
PUSHR d2; UsrFunc[int CenterX(FFC)] Params End
CALLFUNC 0.0768; UsrFunc[int CenterX(FFC)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,7; UsrFunc[int CenterY(FFC)] Params Start
PUSHR d2; UsrFunc[int CenterY(FFC)] Params End
CALLFUNC 0.0791; UsrFunc[int CenterY(FFC)] Call
POP d4
PUSHR d2
PUSHR d4
CALLFUNC 0.0760; UsrFunc[int CenterLinkX()] Call
POP d4
PUSHR d2
PUSHR d4
CALLFUNC 0.0764; UsrFunc[int CenterLinkY()] Call
POP d4
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0456; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,5
LOADD d2,8
STORED d2,4
SETV d2,16
STORED d2,3; if() #559 Body End
PUSHR d4
CALLFUNC 0.0814; UsrFunc[void NoAction()] Call
POP d4; if() #558 Body End
LOADD d2,4; if() #560 Test
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 136; Test 'if'
LOADD d2,2; if() #560 Body Start
PUSHR d2
PUSHR d4
PUSHV 3; UsrFunc[int VectorX(int, int)] Params Start
LOADD d2,5
PUSHR d2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0855; UsrFunc[int VectorX(int, int)] Call
POP d4
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,1
PUSHR d2
PUSHR d4
PUSHV 3; UsrFunc[int VectorY(int, int)] Params Start
LOADD d2,5
PUSHR d2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0865; UsrFunc[int VectorY(int, int)] Call
POP d4
POP d3
ADDR d2,d3
STORED d2,1
LOADD d2,4
SUBV d2,1
STORED d2,4; if() #560 Body End
LOADD d2,2; InlineFunc[int Abs(int)] Params AND if() #561 Test
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 261; Test 'if'
LOADD d2,0; for() #187 LoopTest AND if() #561 Body Start
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 150
LOADD d2,2
COMPAREV d2,-1
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 201; for() #187 TestFail?
PUSHR d4; if() #189 Test AND for() #187 Body Start
PUSHR LINKX; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR LINKY
PUSHV 2
PUSHV 1
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0475; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 173; Test 'if'
SETR d2,LINKX; if() #189 Body Start
SUBV d2,1
PUSHR d2
POP d2
SETR LINKX,d2
LOADD d2,2
ADDV d2,1
STORED d2,2
GOTO 197; if() #189 Body End
LOADD d2,1; InlineFunc[int Abs(int)] Params AND if() #562 Test AND if() #189 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 195; Test 'if'
LOADD d2,1; if() #562 Body Start
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int Sign(int)] Params Start
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0875; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
LOADD d2,2; InlineFunc[int Abs(int)] Params Start
DIVV d2,2; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,1; if() #562 Body End
SETV d2,0
STORED d2,2; if() #189 Else End
LOADD d2,0; for() #187 Body End AND for() #187 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 142; for() #187 End
STOREDV 0,0; for() #188 setup
LOADD d2,0; for() #188 LoopTest
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 210
LOADD d2,2
COMPAREV d2,1
SETCMP d2,0.0013
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 261; for() #188 TestFail?
PUSHR d4; if() #190 Test AND for() #188 Body Start
PUSHR LINKX; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR LINKY
PUSHV 3
PUSHV 1
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0475; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 233; Test 'if'
SETR d2,LINKX; if() #190 Body Start
ADDV d2,1
PUSHR d2
POP d2
SETR LINKX,d2
LOADD d2,2
SUBV d2,1
STORED d2,2
GOTO 257; if() #190 Body End
LOADD d2,1; InlineFunc[int Abs(int)] Params AND if() #563 Test AND if() #190 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 255; Test 'if'
LOADD d2,1; if() #563 Body Start
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int Sign(int)] Params Start
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0875; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
LOADD d2,2; InlineFunc[int Abs(int)] Params Start
DIVV d2,2; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,1; if() #563 Body End
SETV d2,0
STORED d2,2; if() #190 Else End
LOADD d2,0; for() #188 Body End AND for() #188 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 202; for() #188 End
LOADD d2,1; if() #561 Body End AND InlineFunc[int Abs(int)] Params AND if() #564 Test
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 386; Test 'if'
STOREDV 0,0; for() #189 setup AND if() #564 Body Start
LOADD d2,0; for() #189 LoopTest
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 276
LOADD d2,1
COMPAREV d2,-1
SETCMP d2,0.0014
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 327; for() #189 TestFail?
PUSHR d4; if() #191 Test AND for() #189 Body Start
PUSHR LINKX; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR LINKY
PUSHV 0
PUSHV 1
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0475; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 299; Test 'if'
SETR d2,LINKY; if() #191 Body Start
SUBV d2,1
PUSHR d2
POP d2
SETR LINKY,d2
LOADD d2,1
ADDV d2,1
STORED d2,1
GOTO 323; if() #191 Body End
LOADD d2,2; InlineFunc[int Abs(int)] Params AND if() #565 Test AND if() #191 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 321; Test 'if'
LOADD d2,2; if() #565 Body Start
PUSHR d2
PUSHR d4
LOADD d2,2; UsrFunc[int Sign(int)] Params Start
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0875; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
LOADD d2,1; InlineFunc[int Abs(int)] Params Start
DIVV d2,2; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2; if() #565 Body End
SETV d2,0
STORED d2,1; if() #191 Else End
LOADD d2,0; for() #189 Body End AND for() #189 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 268; for() #189 End
STOREDV 0,0; for() #190 setup
LOADD d2,0; for() #190 LoopTest
COMPAREV d2,4
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 336
LOADD d2,1
COMPAREV d2,1
SETCMP d2,0.0013
COMPAREV d2,0
SETCMP d2,0.0011
COMPAREV d2,0
GOTOTRUE 386; for() #190 TestFail?
PUSHR d4; if() #192 Test AND for() #190 Body Start
PUSHR LINKX; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR LINKY
PUSHARGSV 1,0.0002
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0475; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 358; Test 'if'
SETR d2,LINKY; if() #192 Body Start
ADDV d2,1
PUSHR d2
POP d2
SETR LINKY,d2
LOADD d2,1
SUBV d2,1
STORED d2,1
GOTO 382; if() #192 Body End
LOADD d2,2; InlineFunc[int Abs(int)] Params AND if() #566 Test AND if() #192 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 380; Test 'if'
LOADD d2,2; if() #566 Body Start
PUSHR d2
PUSHR d4
LOADD d2,2; UsrFunc[int Sign(int)] Params Start
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0875; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
LOADD d2,1; InlineFunc[int Abs(int)] Params Start
DIVV d2,2; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2; if() #566 Body End
SETV d2,0
STORED d2,1; if() #192 Else End
LOADD d2,0; for() #190 Body End AND for() #190 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 328; for() #190 End
LOADD d2,3; if() #564 Body End AND if() #567 Test
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 394; Test 'if'
LOADD d2,3; if() #567 Body Start
SUBV d2,1
STORED d2,3; if() #567 Body End
LOADD d2,6
PUSHR d2
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,4; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 22; while() #8 End AND [Opt:NeverRet] AND void run(int) Body End
POP d2; Func[int Distance(int, int, int, int)] Body Start
POP d1
POP d0
POP d6
SETR d2,DISTANCE
RETURNFUNC; Func[int Distance(int, int, int, int)] Body End
SETR d4,SP; Func[int DirNormal(int)] Body Start
LOADD d2,0; switch() #15 Key
SETR SWITCHKEY,d2; Store key
COMPAREV SWITCHKEY,8
GOTOTRUE 437; case '80000'
COMPAREV SWITCHKEY,9
GOTOTRUE 439; case '90000'
COMPAREV SWITCHKEY,10
GOTOTRUE 441; case '100000'
COMPAREV SWITCHKEY,11
GOTOTRUE 443; case '110000'
COMPAREV SWITCHKEY,12
GOTOTRUE 445; case '120000'
COMPAREV SWITCHKEY,13
GOTOTRUE 447; case '130000'
COMPAREV SWITCHKEY,14
GOTOTRUE 449; case '140000'
COMPAREV SWITCHKEY,15
GOTOTRUE 451; case '150000'
GOTO 453; switch() #15 NoMatch
SETV d2,0; Case block AND return Start
GOTO 454; return End
SETV d2,5; Case block AND return Start
GOTO 454; return End
SETV d2,3; Case block AND return Start
GOTO 454; return End
SETV d2,7; Case block AND return Start
GOTO 454; return End
SETV d2,1; Case block AND return Start
GOTO 454; return End
SETV d2,6; Case block AND return Start
GOTO 454; return End
SETV d2,2; Case block AND return Start
GOTO 454; return End
SETV d2,4; Case block AND return Start
GOTO 454; return End
LOADD d2,0; Case block AND return Start
POP d5; return End
RETURNFUNC; Func[int DirNormal(int)] Body End
SETR d4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
POPARGS d5,0.0004; return End
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSV 0,0.0004; Func[bool CanWalk(int, int, int, int, bool)] Body Start
SETR d4,SP
STOREDV 8,3
LOADD d2,8
ADDV d2,15
STORED d2,2
LOADD d2,7
ADDV d2,15
STORED d2,1
LOADD d2,4; if() #29 Test
COMPAREV d2,0
GOTOTRUE 489; Test 'if'
SETV d2,0; if() #29 Body Start
STORED d2,3; if() #29 Body End
PUSHR d4; switch() #4 Key
LOADD d2,6; UsrFunc[int DirNormal(int)] Params Start
PUSHR d2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 0.0417; UsrFunc[int DirNormal(int)] Call
POP d4
SETR SWITCHKEY,d2; Store key
COMPAREV SWITCHKEY,0
GOTOTRUE 504; case '0'
COMPAREV SWITCHKEY,1
GOTOTRUE 570; case '10000'
COMPAREV SWITCHKEY,2
GOTOTRUE 623; case '20000'
COMPAREV SWITCHKEY,3
GOTOTRUE 685; case '30000'
GOTO 746; switch() #4 NoMatch
LOADD d2,7; Case block AND return Start
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d2,d3
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 529
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 548
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 566
LOADD d2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
SETCMP d2,0.0012
GOTO 758; return End
LOADD d2,1; Case block AND return Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
COMPAREV d2,176
SETCMP d2,0.0013
COMPAREV d2,0
GOTOFALSE 590
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 605
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 619
LOADD d2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
SETCMP d2,0.0012
GOTO 758; return End
LOADD d2,8; Case block AND return Start
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d2,d3
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOFALSE 648
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 667
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
ADDV d2,7
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 681
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
SETCMP d2,0.0012
GOTO 758; return End
LOADD d2,2; Case block AND return Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
COMPAREV d2,256
SETCMP d2,0.0013
COMPAREV d2,0
GOTOFALSE 709
LOADD d2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 728
LOADD d2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
ADDV d2,7
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
GOTOFALSE 742
LOADD d2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETCMP d2,0.0003
COMPAREV d2,0
SETCMP d2,0.0012
GOTO 758; return End
ALLOCATEMEMV d2,60; Case block
STORED d2,0
WRITEPODSTRING d2,"Invalid direction %d passed to CanWalk(x,y,dir,step,bool) \n"
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,6
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d3,0
DEALLOCATEMEMR d3
SETV d2,0; return Start
POPARGS d5,0.0009; return End
RETURNFUNC; Func[bool CanWalk(int, int, int, int, bool)] Body End
SETR d4,SP; Func[int CenterLinkX()] Body Start
SETR d2,LINKX; return Start
ADDV d2,8
RETURNFUNC; return End AND Func[int CenterLinkX()] Body End
SETR d4,SP; Func[int CenterLinkY()] Body Start
SETR d2,LINKY; return Start
ADDV d2,8
RETURNFUNC; return End AND Func[int CenterLinkY()] Body End
SETR d4,SP; Func[int CenterX(FFC)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFFFC
SETR d2,X
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterX(FFC)] Body End
SETR d4,SP; Func[int CenterY(FFC)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFFFC
SETR d2,Y
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
POP d5; return End
RETURNFUNC; Func[int CenterY(FFC)] Body End
PUSHV 0; Func[void NoAction()] Body Start
SETR d4,SP
LOADD d2,0; for() #74 LoopTest
COMPAREV d2,14
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 853; for() #74 TestFail?
LOADD d2,0; if() #249 Test AND for() #74 Body Start
COMPAREV d2,9
SETCMP d2,0.0012
SETV d2,0
COMPAREV d2,0
GOTOTRUE 828; Test 'if'
GOTO 849; continue 1; AND if() #249 Body
LOADD d2,0; if() #250 Test
COMPAREV d2,6
SETCMP d2,0.0012
SETV d2,0
COMPAREV d2,0
GOTOTRUE 835; Test 'if'
GOTO 849; continue 1; AND if() #250 Body
SETV d2,0
PUSHR d2
LOADD d2,0
PUSHR d2
POP d0
POP d2
SETR BUTTONINPUT,d2
SETV d2,0
PUSHR d2
LOADD d2,0
PUSHR d2
POP d0
POP d2
SETR BUTTONPRESS,d2; for() #74 Body End
LOADD d2,0; for() #74 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 816; for() #74 End
POP d5
RETURNFUNC; Func[void NoAction()] Body End
SETR d4,SP; Func[int VectorX(int, int)] Body Start
LOADD d2,0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR d4,SP; Func[int VectorY(int, int)] Body Start
LOADD d2,0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
POPARGS d5,0.0002; return End
RETURNFUNC; Func[int VectorY(int, int)] Body End
SETR d4,SP; Func[int Sign(int)] Body Start
LOADD d2,0; if() #126 Test
COMPAREV d2,0
SETCMP d2,0.0009
COMPAREV d2,0
GOTOTRUE 883; Test 'if'
SETV d2,1; return Start AND if() #126 Body Start
GOTO 891; return End AND if() #126 Body End
LOADD d2,0; if() #127 Test AND if() #126 Else Start
COMPAREV d2,0
SETCMP d2,0.0010
COMPAREV d2,0
GOTOTRUE 890; Test 'if'
SETV d2,-1; return Start AND if() #127 Body Start
GOTO 891; return End AND if() #127 Body End
SETV d2,0; return Start AND if() #127 Else Start
POP d5; return End AND if() #127 Else End AND if() #126 Else End
RETURNFUNC; Func[int Sign(int)] Body End


ALLOCATEGMEMV d2,4096; void run() Body Start
SETR gd1,d2
QUIT; void run() Body End