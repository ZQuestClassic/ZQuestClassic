stderr:

Compiling 'array_template.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 30,
    "symbols": 37,
    "identifiers": 59,
    "elided": true
  }
}

zasm:

PUSHR REFFFC; void run() Body Start
PUSHARGSV 0 0.0016
SETR D4 SP2
ALLOCATEMEMV D2 3 0
STORE D2 0.0014
WRITEPODARRAY D2 {1,2,3}
ALLOCATEMEMV D2 3 0
STORE D2 0.0012
WRITEPODARRAY D2 {4,5,6}
ALLOCATEMEMV D2 3 0
STORE D2 0.0010
WRITEPODARRAY D2 {7,8,9}
ALLOCATEMEMV D2 3 0
STORE D2 0.0008
SETR D0 D2
PUSHR D0
LOAD D2 0.0014
POP D0
WRITEPODARRAYVR 0 D2
PUSHR D0
LOAD D2 0.0012
POP D0
WRITEPODARRAYVR 1 D2
PUSHR D0
LOAD D2 0.0010
POP D0
WRITEPODARRAYVR 2 D2
PUSHR D4
LOAD D2 0.0008; UsrFunc[void print(int[][])] Params Start
PUSHR D2; UsrFunc[void print(int[][])] Params End
CALLFUNC 0.0129; UsrFunc[void print(int[][])] Call
POP D4
ALLOCATEMEMV D2 0 0
STORE D2 0.0007
LOAD D2 0.0008; for(each) #1 ArrDecl
STORE D2 0.0005
STOREV 0 0.0006; for(each) #1 IndxDecl
STOREV 0 0.0004; for(each) #1 ValDecl
LOAD D0 0.0005; for(each) #1 EndArrayCheck
ARRAYSIZE D0
LOAD D3 0.0006
COMPARER D3 D2
GOTOCMP 56 >=; for(each) #1 to Else
READPODARRAYR D2 D3; for(each) #1 Next Index
STORE D2 0.0004
ADDV D3 1
STORE D3 0.0006
PUSHR D4; for(each) #1 Body Start
LOAD D2 0.0007; UsrFunc[void arraycat(int[], int[])] Params Start
PUSHR D2
LOAD D2 0.0004
PUSHR D2; UsrFunc[void arraycat(int[], int[])] Params End
CALLFUNC 0.0144; UsrFunc[void arraycat(int[], int[])] Call
POP D4; for(each) #1 Body End
GOTO 39; for(each) #1 End
PUSHR D4
LOAD D2 0.0007; UsrFunc[void print(int[])] Params Start
PUSHR D2; UsrFunc[void print(int[])] Params End
CALLFUNC 0.0189; UsrFunc[void print(int[])] Call
POP D4
STOREV -1 0.0006; loop() #1 ValDecl
PUSHR D4; loop() #1 Body Start
LOAD D2 0.0007; UsrFunc[void append(int[], int)] Params Start
PUSHR D2
LOAD D2 0.0006
PUSHR D2; UsrFunc[void append(int[], int)] Params End
CALLFUNC 0.0204; UsrFunc[void append(int[], int)] Call
POP D4; loop() #1 Body End
LOAD D3 0.0006; loop() #1 Incr
ADDV D3 -1
STORE D3 0.0006
COMPAREV D3 -9.9999; loop() #1 Test
GOTOCMP 62 >=; >= start, keep looping
POPARGS D5 0
PUSHR D4
LOAD D2 0.0007; UsrFunc[void print(int[])] Params Start
PUSHR D2; UsrFunc[void print(int[])] Params End
CALLFUNC 0.0189; UsrFunc[void print(int[])] Call
POP D4
ALLOCATEMEMV D2 3 0
STORE D2 0.0005
WRITEPODARRAY D2 {10,11,12}
STORE D2 0.0005
PUSHR D4
LOAD D2 0.0008; UsrFunc[void append(int[][], int[])] Params Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2; UsrFunc[void append(int[][], int[])] Params End
CALLFUNC 0.0214; UsrFunc[void append(int[][], int[])] Call
PEEK D4
LOAD D2 0.0008; UsrFunc[void print(int[][])] Params Start
PUSHR D2; UsrFunc[void print(int[][])] Params End
CALLFUNC 0.0129; UsrFunc[void print(int[][])] Call
POP D4
ALLOCATEMEMV D2 3 0
STORE D2 0.0003
WRITEPODARRAY D2 {1,2,3}
SETV D2 65536
STORE D2 0.0002
ALLOCATEMEMV D2 4 0
STORE D2 0
WRITEPODARRAY D2 {1,0,0.0002,99}
SETR D0 D2
PUSHR D0
LOAD D2 0.0002
PUSHR D2
POP D0
READPODARRAYV D2 0
POP D0
WRITEPODARRAYVR 1 D2
LOAD D3 0
DEALLOCATEMEMR D3
LOAD D3 0.0003
DEALLOCATEMEMR D3
LOAD D3 0.0005
DEALLOCATEMEMR D3
LOAD D3 0.0007
DEALLOCATEMEMR D3
LOAD D3 0.0008
DEALLOCATEMEMR D3
LOAD D3 0.0010
DEALLOCATEMEMR D3
LOAD D3 0.0012
DEALLOCATEMEMR D3
LOAD D3 0.0014
DEALLOCATEMEMR D3
POPARGS D5 0.0017
QUIT; void run() Body End
PUSHV 0; Func[void print(int[][])] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 15 0
STORE D2 0
WRITEPODSTRING D2 "Arr[][]: %aad\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
POPARGS D5 0.0002
RETURNFUNC; Func[void print(int[][])] Body End
PUSHARGSV 0 0.0004; Func[void arraycat(int[], int[])] Body Start
SETR D4 SP2
LOAD D2 0.0005; InlineFunc[int SizeOfArray(int[])] Params
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
STORE D2 0.0003
LOAD D2 0.0005; InlineFunc[void ResizeArray(int[], int)] Params Start
PUSHR D2
LOAD D2 0.0003
PUSHR D2
LOAD D2 0.0004; InlineFunc[int SizeOfArray(int[])] Params
ARRAYSIZE D2; InlineFunc[int SizeOfArray(int[])] Body
POP D3
ADDR D2 D3
SETR D3 D2; InlineFunc[void ResizeArray(int[], int)] Params End
POP D2; InlineFunc[void ResizeArray(int[], int)] Body Start
RESIZEARRAYR D2 D3; InlineFunc[void ResizeArray(int[], int)] Body End
LOAD D2 0.0004; for(each) #2 ArrDecl
STORE D2 0.0001
STOREV 0 0.0002; for(each) #2 IndxDecl
STOREV 0 0; for(each) #2 ValDecl
LOAD D0 0.0001; for(each) #2 EndArrayCheck
ARRAYSIZE D0
LOAD D3 0.0002
COMPARER D3 D2
GOTOCMP 187 >=; for(each) #2 to Else
READPODARRAYR D2 D3; for(each) #2 Next Index
STORE D2 0
ADDV D3 1
STORE D3 0.0002
LOAD D2 0; for(each) #2 Body Start
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
PUSHR D2
ADDV D2 1
STORE D2 0.0003
POP D2
SETR D3 D2
POP D0
POP D2
WRITEPODARRAYRR D3 D2; for(each) #2 Body End
GOTO 164; for(each) #2 End
POPARGS D5 0.0006
RETURNFUNC; Func[void arraycat(int[], int[])] Body End
PUSHV 0; Func[void print(int[])] Body Start
SETR D4 SP2
ALLOCATEMEMV D2 12 0
STORE D2 0
WRITEPODSTRING D2 "Arr[]: %ad\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
LOAD D2 0.0001
PUSHVARGR D2; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3
POPARGS D5 0.0002
RETURNFUNC; Func[void print(int[])] Body End
SETR D4 SP2; Func[void append(int[], int)] Body Start
LOAD D2 0.0001; InlineFunc[bool ArrayPushBack(int[], int)] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; InlineFunc[bool ArrayPushBack(int[], int)] Params End
PUSHV -1; InlineFunc[bool ArrayPushBack(int[], int)] Body Start
ARRAYPUSH
POPARGS D5 0.0003; InlineFunc[bool ArrayPushBack(int[], int)] Body End
POPARGS D5 0.0002
RETURNFUNC; Func[void append(int[], int)] Body End
SETR D4 SP2; Func[void append(int[][], int[])] Body Start
LOAD D2 0.0001; InlineFunc[bool ArrayPushBack(int[][], int[])] Params Start
PUSHR D2
LOAD D2 0
PUSHR D2; InlineFunc[bool ArrayPushBack(int[][], int[])] Params End
PUSHV -1; InlineFunc[bool ArrayPushBack(int[][], int[])] Body Start
ARRAYPUSH
POPARGS D5 0.0003; InlineFunc[bool ArrayPushBack(int[][], int[])] Body End
POPARGS D5 0.0002
RETURNFUNC; Func[void append(int[][], int[])] Body End


QUIT; void run() Body
