stderr:

Compiling 'control_flow.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 10,
    "symbols": 21,
    "identifiers": 80,
    "elided": true
  }
}

zasm:

QUIT; void run() Body
PUSHR D0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
SETR D4 SP2
PUSHR D4; while(true) #1 Body [Opt:AlwaysOn] Start
LOAD D2 0.0001; UsrFunc[void fn_1(int)] Params Start
PUSHR D2; UsrFunc[void fn_1(int)] Params End
CALLFUNC 0.0040; UsrFunc[void fn_1(int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void fn_2(int)] Params Start
PUSHR D2; UsrFunc[void fn_2(int)] Params End
CALLFUNC 0.0050; UsrFunc[void fn_2(int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void fn_3(int)] Params Start
PUSHR D2; UsrFunc[void fn_3(int)] Params End
CALLFUNC 0.0062; UsrFunc[void fn_3(int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void fn_4(int)] Params Start
PUSHR D2; UsrFunc[void fn_4(int)] Params End
CALLFUNC 0.0079; UsrFunc[void fn_4(int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void fn_5(int)] Params Start
PUSHR D2; UsrFunc[void fn_5(int)] Params End
CALLFUNC 0.0098; UsrFunc[void fn_5(int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void fn_6(int)] Params Start
PUSHR D2; UsrFunc[void fn_6(int)] Params End
CALLFUNC 0.0124; UsrFunc[void fn_6(int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void fn_7(int)] Params Start
PUSHR D2; UsrFunc[void fn_7(int)] Params End
CALLFUNC 0.0146; UsrFunc[void fn_7(int)] Call
PEEK D4
LOAD D2 0.0001; UsrFunc[void fn_8(int)] Params Start
PUSHR D2; UsrFunc[void fn_8(int)] Params End
CALLFUNC 0.0181; UsrFunc[void fn_8(int)] Call
POP D4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #1 Body [Opt:AlwaysOn] End
GOTO 5; while() #1 End AND [Opt:NeverRet] AND void run(int) Body End
SETR D4 SP2; Func[void fn_1(int)] Body Start
LOAD D2 0; if() #8 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 47 ==; Test 'if'
TRACEV 1; InlineFunc[void Trace(untyped)] Params AND if() #8 Body Start AND InlineFunc[void Trace(untyped)] Body AND if() #8 Body End
TRACEV 0; InlineFunc[void Trace(untyped)] Params AND InlineFunc[void Trace(untyped)] Body
POP D5
RETURNFUNC; Func[void fn_1(int)] Body End
SETR D4 SP2; Func[void fn_2(int)] Body Start
LOAD D2 0; if() #1 Test
COMPAREV D2 10
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 58 ==; Test 'if'
TRACEV 1; InlineFunc[void Trace(untyped)] Params AND if() #1 Body Start AND InlineFunc[void Trace(untyped)] Body
GOTO 59; if() #1 Body End
TRACEV 2; InlineFunc[void Trace(untyped)] Params AND if() #1 Else Start AND InlineFunc[void Trace(untyped)] Body AND if() #1 Else End
TRACEV 0; InlineFunc[void Trace(untyped)] Params AND InlineFunc[void Trace(untyped)] Body
POP D5
RETURNFUNC; Func[void fn_2(int)] Body End
SETR D4 SP2; Func[void fn_3(int)] Body Start
LOAD D2 0; if() #2 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 70 ==; Test 'if'
TRACEV 1; InlineFunc[void Trace(untyped)] Params AND if() #2 Body Start AND InlineFunc[void Trace(untyped)] Body
GOTO 76; if() #2 Body End
LOAD D2 0; if() #9 Test AND if() #2 Else Start
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 76 ==; Test 'if'
TRACEV 2; InlineFunc[void Trace(untyped)] Params AND if() #9 Body Start AND InlineFunc[void Trace(untyped)] Body AND if() #9 Body End
TRACEV 0; if() #2 Else End AND InlineFunc[void Trace(untyped)] Params AND InlineFunc[void Trace(untyped)] Body
POP D5
RETURNFUNC; Func[void fn_3(int)] Body End
SETR D4 SP2; Func[void fn_4(int)] Body Start
LOAD D2 0; if() #3 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 87 ==; Test 'if'
TRACEV 1; InlineFunc[void Trace(untyped)] Params AND if() #3 Body Start AND InlineFunc[void Trace(untyped)] Body
GOTO 95; if() #3 Body End
LOAD D2 0; if() #4 Test AND if() #3 Else Start
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 94 ==; Test 'if'
TRACEV 2; InlineFunc[void Trace(untyped)] Params AND if() #4 Body Start AND InlineFunc[void Trace(untyped)] Body
GOTO 95; if() #4 Body End
TRACEV 3; InlineFunc[void Trace(untyped)] Params AND if() #4 Else Start AND InlineFunc[void Trace(untyped)] Body AND if() #4 Else End
TRACEV 0; if() #3 Else End AND InlineFunc[void Trace(untyped)] Params AND InlineFunc[void Trace(untyped)] Body
POP D5
RETURNFUNC; Func[void fn_4(int)] Body End
SETR D4 SP2; Func[void fn_5(int)] Body Start
LOAD D2 0; if() #5 Test
COMPAREV D2 10
SETCMP D2 I>=
COMPAREV D2 0
GOTOCMP 106 ==; Test 'if'
TRACEV 1; InlineFunc[void Trace(untyped)] Params AND if() #5 Body Start AND InlineFunc[void Trace(untyped)] Body
GOTO 121; if() #5 Body End
LOAD D2 0; if() #6 Test AND if() #5 Else Start
COMPAREV D2 10
SETCMP D2 I<
COMPAREV D2 0
GOTOCMP 113 ==; Test 'if'
TRACEV 2; InlineFunc[void Trace(untyped)] Params AND if() #6 Body Start AND InlineFunc[void Trace(untyped)] Body
GOTO 121; if() #6 Body End
LOAD D2 0; if() #7 Test AND if() #6 Else Start
COMPAREV D2 15
SETCMP D2 I==
COMPAREV D2 0
GOTOCMP 120 ==; Test 'if'
TRACEV 3; InlineFunc[void Trace(untyped)] Params AND if() #7 Body Start AND InlineFunc[void Trace(untyped)] Body
GOTO 121; if() #7 Body End
TRACEV 4; InlineFunc[void Trace(untyped)] Params AND if() #7 Else Start AND InlineFunc[void Trace(untyped)] Body AND if() #7 Else End
TRACEV 0; if() #6 Else End AND if() #5 Else End AND InlineFunc[void Trace(untyped)] Params AND InlineFunc[void Trace(untyped)] Body
POP D5
RETURNFUNC; Func[void fn_5(int)] Body End
SETR D4 SP2; Func[void fn_6(int)] Body Start
LOAD D2 0; switch() #1 Key
SETR SWITCHKEY D2; Store key
COMPAREV SWITCHKEY 10
GOTOCMP 136 ==; case '100000'
COMPAREV SWITCHKEY 15
GOTOCMP 138 ==; case '150000'
COMPAREV SWITCHKEY 25
GOTOCMP 140 ==; case '250000'
COMPAREV SWITCHKEY 30
GOTOCMP 142 ==; case '300000'
GOTO 143; switch() #1 NoMatch
TRACEV 1; Case block AND InlineFunc[void Trace(untyped)] Params AND InlineFunc[void Trace(untyped)] Body
GOTO 143; break 1;
TRACEV 2; Case block AND InlineFunc[void Trace(untyped)] Params AND InlineFunc[void Trace(untyped)] Body
GOTO 143; break 1;
TRACEV 3; Case block AND InlineFunc[void Trace(untyped)] Params AND InlineFunc[void Trace(untyped)] Body
GOTO 143; break 1;
TRACEV 4; Case block AND InlineFunc[void Trace(untyped)] Params AND InlineFunc[void Trace(untyped)] Body
TRACEV 0; break 1; AND InlineFunc[void Trace(untyped)] Params AND InlineFunc[void Trace(untyped)] Body
POP D5
RETURNFUNC; Func[void fn_6(int)] Body End
SETR D4 SP2; Func[void fn_7(int)] Body Start
LOAD D2 0; if() #8 Test
COMPAREV D2 10
GOTOCMP 161 <=
LOAD D2 0
COMPAREV D2 20
GOTOCMP 161 >=
LOAD D2 0
COMPAREV D2 14
GOTOCMP 161 ==
LOAD D2 0
COMPAREV D2 16
GOTOCMP 161 ==
SETV D2 1
GOTO 162
SETV D2 0
COMPAREV D2 0
GOTOCMP 166 ==; Test 'if'
TRACEV 1; InlineFunc[void Trace(untyped)] Params AND if() #8 Body Start AND InlineFunc[void Trace(untyped)] Body
GOTO 178; if() #8 Body End
LOAD D2 0; if() #10 Test AND if() #8 Else Start
COMPAREV D2 15
GOTOCMP 174 <=
LOAD D2 0
COMPAREV D2 30
GOTOCMP 174 >
SETV D2 1
GOTO 175
SETV D2 0
COMPAREV D2 0
GOTOCMP 178 ==; Test 'if'
TRACEV 2; InlineFunc[void Trace(untyped)] Params AND if() #10 Body Start AND InlineFunc[void Trace(untyped)] Body AND if() #10 Body End
TRACEV 0; if() #8 Else End AND InlineFunc[void Trace(untyped)] Params AND InlineFunc[void Trace(untyped)] Body
POP D5
RETURNFUNC; Func[void fn_7(int)] Body End
SETR D4 SP2; Func[void fn_8(int)] Body Start
LOAD D2 0; if() #9 Test
COMPAREV D2 10
GOTOCMP 196 <=
LOAD D2 0
COMPAREV D2 20
GOTOCMP 196 >=
LOAD D2 0
COMPAREV D2 14
GOTOCMP 196 ==
LOAD D2 0
COMPAREV D2 16
GOTOCMP 196 ==
SETV D2 1
GOTO 197
SETV D2 0
COMPAREV D2 0
GOTOCMP 215 ==; Test 'if'
LOAD D2 0; if() #11 Test AND if() #9 Body Start
COMPAREV D2 11
GOTOCMP 210 ==
LOAD D2 0
COMPAREV D2 12
GOTOCMP 210 ==
LOAD D2 0
COMPAREV D2 13
GOTOCMP 210 ==
SETV D2 1
GOTO 211
SETV D2 0
COMPAREV D2 0
GOTOCMP 227 ==; Test 'if'
TRACEV 1; InlineFunc[void Trace(untyped)] Params AND if() #11 Body Start AND InlineFunc[void Trace(untyped)] Body AND if() #11 Body End
GOTO 227; if() #9 Body End
LOAD D2 0; if() #12 Test AND if() #9 Else Start
COMPAREV D2 15
GOTOCMP 223 <=
LOAD D2 0
COMPAREV D2 30
GOTOCMP 223 >
SETV D2 1
GOTO 224
SETV D2 0
COMPAREV D2 0
GOTOCMP 227 ==; Test 'if'
TRACEV 2; InlineFunc[void Trace(untyped)] Params AND if() #12 Body Start AND InlineFunc[void Trace(untyped)] Body AND if() #12 Body End
TRACEV 0; if() #9 Else End AND InlineFunc[void Trace(untyped)] Params AND InlineFunc[void Trace(untyped)] Body
POP D5
RETURNFUNC; Func[void fn_8(int)] Body End
