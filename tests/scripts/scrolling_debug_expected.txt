Compiling 'scrolling_debug.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR REFDMAPDATA; void run() Body Start
PUSHARGSV 0,0.0010
SETR d4,SP2
ALLOCATEMEMV d2,13; while(true) #8 Body [Opt:AlwaysOn] Start
STORE d2,0.0009
WRITEPODSTRING d2,"OX/OY %d %d\n"
LOAD d2,0.0009; InlineFunc[void printf(char32)] Params Start
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
PUSHVARGR GAMESCROLLING
SETV d2,4
PUSHR d2
POP d0
PUSHVARGR GAMESCROLLING; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOAD d3,0.0009
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,6
STORE d2,0.0008
WRITEPODSTRING d2,"OX/OY"
PUSHV 7; InlineFunc[void Screen->DrawString(int, int, int, int, int, int, int, int, int)] Params Start
PUSHARGSV 0,0.0002
PUSHV 2
PUSHV 1
PUSHV 15
PUSHV 0
LOAD d2,0.0008
PUSHR d2
PUSHV 128; InlineFunc[void Screen->DrawString(int, int, int, int, int, int, int, int, int)] Params End
DRAWSTRING; InlineFunc[void Screen->DrawString(int, int, int, int, int, int, int, int, int)] Body Start
POPARGS d5,0.0009; InlineFunc[void Screen->DrawString(int, int, int, int, int, int, int, int, int)] Body End
LOAD d3,0.0008
DEALLOCATEMEMR d3
PUSHV 7; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 40
PUSHV 0
PUSHV 2
PUSHV 1
PUSHV 15
PUSHARGSV -1,0.0002
SETV d2,3
PUSHR d2
POP d0
PUSHR GAMESCROLLING
PUSHV 0
PUSHV 128; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params End
DRAWINT; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS d5,0.0011; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHV 7; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 120
PUSHV 0
PUSHV 2
PUSHV 1
PUSHV 15
PUSHARGSV -1,0.0002
SETV d2,4
PUSHR d2
POP d0
PUSHR GAMESCROLLING
PUSHV 0
PUSHV 128; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params End
DRAWINT; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS d5,0.0011; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body End
ALLOCATEMEMV d2,13
STORE d2,0.0007
WRITEPODSTRING d2,"NX/NY %d %d\n"
LOAD d2,0.0007; InlineFunc[void printf(char32)] Params Start
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
PUSHVARGR GAMESCROLLING
SETV d2,2
PUSHR d2
POP d0
PUSHVARGR GAMESCROLLING; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOAD d3,0.0007
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,6
STORE d2,0.0006
WRITEPODSTRING d2,"NX/NY"
PUSHV 7; InlineFunc[void Screen->DrawString(int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 0
PUSHV 8
PUSHV 2
PUSHV 1
PUSHV 15
PUSHV 0
LOAD d2,0.0006
PUSHR d2
PUSHV 128; InlineFunc[void Screen->DrawString(int, int, int, int, int, int, int, int, int)] Params End
DRAWSTRING; InlineFunc[void Screen->DrawString(int, int, int, int, int, int, int, int, int)] Body Start
POPARGS d5,0.0009; InlineFunc[void Screen->DrawString(int, int, int, int, int, int, int, int, int)] Body End
LOAD d3,0.0006
DEALLOCATEMEMR d3
PUSHV 7; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 40
PUSHV 8
PUSHV 2
PUSHV 1
PUSHV 15
PUSHARGSV -1,0.0002
SETV d2,1
PUSHR d2
POP d0
PUSHR GAMESCROLLING
PUSHV 0
PUSHV 128; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params End
DRAWINT; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS d5,0.0011; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHV 7; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 120
PUSHV 8
PUSHV 2
PUSHV 1
PUSHV 15
PUSHARGSV -1,0.0002
SETV d2,2
PUSHR d2
POP d0
PUSHR GAMESCROLLING
PUSHV 0
PUSHV 128; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params End
DRAWINT; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS d5,0.0011; InlineFunc[void Screen->DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body End
STOREV 0,0.0005
STOREV 0,0.0004
SETR d2,VIEWPORT_WIDTH
SUBV d2,1
STORE d2,0.0003
SETR d2,VIEWPORT_HEIGHT
SUBV d2,9
STORE d2,0.0002
SETR d2,REGION_ID; if() #558 Test
COMPAREV d2,0
GOTOCMP 203,==; Test 'if'
PUSHV 7; InlineFunc[void Screen->Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #558 Body Start
LOAD d2,0.0005
ADDV d2,4
PUSHR d2
LOAD d2,0.0004
ADDV d2,4
PUSHR d2
LOAD d2,0.0005
PUSHR d2
LOAD d2,0.0003
POP d3
ADDR d2,d3
SUBV d2,4
PUSHR d2
LOAD d2,0.0004
PUSHR d2
LOAD d2,0.0002
POP d3
ADDR d2,d3
SUBV d2,4
PUSHR d2
PUSHV 114
PUSHV 1
PUSHARGSV 0,0.0004
PUSHV 128; InlineFunc[void Screen->Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECT; InlineFunc[void Screen->Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0012; InlineFunc[void Screen->Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
ALLOCATEMEMV d2,15
STORE d2,0.0001
WRITEPODSTRING d2,"ORX/ORY %d %d\n"
LOAD d2,0.0001; InlineFunc[void printf(char32)] Params Start
PUSHR d2
SETV d2,23
PUSHR d2
POP d0
PUSHVARGR GAMESCROLLING
SETV d2,24
PUSHR d2
POP d0
PUSHVARGR GAMESCROLLING; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOAD d3,0.0001
DEALLOCATEMEMR d3
ALLOCATEMEMV d2,15
STORE d2,0
WRITEPODSTRING d2,"NRX/NRY %d %d\n"
LOAD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
SETV d2,21
PUSHR d2
POP d0
PUSHVARGR GAMESCROLLING
SETV d2,22
PUSHR d2
POP d0
PUSHVARGR GAMESCROLLING; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOAD d3,0
DEALLOCATEMEMR d3; if() #558 Body End
SETV d2,0; if() #559 Test
PUSHR d2
POP d0
SETR d2,GAMESCROLLING
COMPAREV d2,-1
SETCMP d2,I!=
COMPAREV d2,0
GOTOCMP 335,==; Test 'if'
SETR d2,LINKX; if() #559 Body Start
PUSHR d2
SETR d2,VIEWPORT_X
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0005
SETR d2,LINKY
PUSHR d2
SETR d2,VIEWPORT_Y
POP d3
SUBR d3,d2
SETR d2,d3
STORE d2,0.0004
PUSHV 3; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD d2,0.0005
PUSHR d2
LOAD d2,0.0004
PUSHR d2
PUSHV 20
PUSHARGSV 1,0.0002
PUSHV 3
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0005
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBO; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0016; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
SETR d2,VIEWPORT_X; if() #560 Test
PUSHR d2
SETV d2,21
PUSHR d2
POP d0
SETR d2,GAMESCROLLING
SUBV2 0,d2
POP d3
COMPARER d3,d2
GOTOCMP 261,!=
SETR d2,VIEWPORT_Y
PUSHR d2
SETV d2,22
PUSHR d2
POP d0
SETR d2,GAMESCROLLING
SUBV2 0,d2
POP d3
COMPARER d3,d2
GOTOCMP 261,!=
SETV d2,0
GOTO 262
SETV d2,1
COMPAREV d2,0
GOTOCMP 283,==; Test 'if'
ALLOCATEMEMV d2,33; if() #560 Body Start
STORE d2,0.0001
WRITEPODSTRING d2,"failed expectation! %d %d %d %d\n"
LOAD d2,0.0001; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGR VIEWPORT_X
SETV d2,21
PUSHR d2
POP d0
PUSHVARGR GAMESCROLLING
PUSHVARGR VIEWPORT_Y
SETV d2,22
PUSHR d2
POP d0
PUSHVARGR GAMESCROLLING; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOAD d3,0.0001
DEALLOCATEMEMR d3; if() #560 Body End
SETV d2,3
PUSHR d2
POP d0
SETR d2,GAMESCROLLING
ADDV d2,128
STORE d2,0.0005
SETV d2,4
PUSHR d2
POP d0
SETR d2,GAMESCROLLING
ADDV d2,88
STORE d2,0.0004
PUSHV 3; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD d2,0.0005
PUSHR d2
LOAD d2,0.0004
PUSHR d2
PUSHV 21
PUSHARGSV 1,0.0002
PUSHV 3
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0005
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBO; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0016; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
SETV d2,1
PUSHR d2
POP d0
SETR d2,GAMESCROLLING
ADDV d2,128
STORE d2,0.0005
SETV d2,2
PUSHR d2
POP d0
SETR d2,GAMESCROLLING
ADDV d2,88
STORE d2,0.0004
PUSHV 3; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD d2,0.0005
PUSHR d2
LOAD d2,0.0004
PUSHR d2
PUSHV 44
PUSHARGSV 1,0.0002
PUSHV 3
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0005
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBO; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0016; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #559 Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #8 Body [Opt:AlwaysOn] End
GOTO 4; while() #8 End AND [Opt:NeverRet] AND void run() Body End


ALLOCATEGMEMV d2,4096; void run() Body Start
SETR gd1,d2
QUIT; void run() Body End