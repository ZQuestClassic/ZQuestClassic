stderr:

Compiling 'scrolling_debug.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Checking code paths
Pass 6: Generating object code
Pass 7: Assembling
Success!
Compile finished with exit code '0' (success)

stdout:

{
  "success": true,
  "diagnostics": [],
  "metadata": {
    "currentFileSymbols": 6,
    "symbols": 35,
    "identifiers": 149,
    "elided": true
  }
}

zasm:

PUSHR REFDMAPDATA; void run() Body Start
PUSHARGSV 0 0.0010
SETR D4 SP2
ALLOCATEMEMV D2 13 0; while(true) #2 Body [Opt:AlwaysOn] Start
STORE D2 0.0009
WRITEPODSTRING D2 "OX/OY %d %d\n"
LOAD D2 0.0009; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETV D2 3
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING
SETV D2 4
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0009
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 6 0
STORE D2 0.0008
WRITEPODSTRING D2 "OX/OY"
PUSHV 7; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHARGSV 0 0.0002
PUSHV 2
PUSHV 1
PUSHV 15
PUSHV 0
LOAD D2 0.0008
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D3 0.0008
DEALLOCATEMEMR D3
PUSHV 7; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 40
PUSHV 0
PUSHV 2
PUSHV 1
PUSHV 15
PUSHARGSV -1 0.0002
SETV D2 3
PUSHR D2
POP D0
PUSHR GAMESCROLLING
PUSHV 0
PUSHV 128; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params End
DRAWINTR; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHV 7; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 120
PUSHV 0
PUSHV 2
PUSHV 1
PUSHV 15
PUSHARGSV -1 0.0002
SETV D2 4
PUSHR D2
POP D0
PUSHR GAMESCROLLING
PUSHV 0
PUSHV 128; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params End
DRAWINTR; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body End
ALLOCATEMEMV D2 13 0
STORE D2 0.0007
WRITEPODSTRING D2 "NX/NY %d %d\n"
LOAD D2 0.0007; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETV D2 1
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING
SETV D2 2
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0007
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 6 0
STORE D2 0.0006
WRITEPODSTRING D2 "NX/NY"
PUSHV 7; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params Start
PUSHV 0
PUSHV 8
PUSHV 2
PUSHV 1
PUSHV 15
PUSHV 0
LOAD D2 0.0006
PUSHR D2
PUSHV 128; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Params End
DRAWSTRINGR; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body Start
POPARGS D5 0.0009; InlineFunc[void screendata::DrawString(int, int, int, int, int, int, int, char32[], int)] Body End
LOAD D3 0.0006
DEALLOCATEMEMR D3
PUSHV 7; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 40
PUSHV 8
PUSHV 2
PUSHV 1
PUSHV 15
PUSHARGSV -1 0.0002
SETV D2 1
PUSHR D2
POP D0
PUSHR GAMESCROLLING
PUSHV 0
PUSHV 128; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params End
DRAWINTR; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body End
PUSHV 7; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params Start
PUSHV 120
PUSHV 8
PUSHV 2
PUSHV 1
PUSHV 15
PUSHARGSV -1 0.0002
SETV D2 2
PUSHR D2
POP D0
PUSHR GAMESCROLLING
PUSHV 0
PUSHV 128; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Params End
DRAWINTR; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body Start
POPARGS D5 0.0011; InlineFunc[void screendata::DrawInteger(int, int, int, int, int, int, int, int, int, int, int)] Body End
STOREV 0 0.0005
STOREV 0 0.0004
SETR D2 VIEWPORT_WIDTH
SUBV D2 1
STORE D2 0.0003
SETR D2 VIEWPORT_HEIGHT
SUBV D2 9
STORE D2 0.0002
SETR D2 REGION_ID; if() #447 Test
COMPAREV D2 0
GOTOCMP 203 ==; Test 'if'
PUSHV 7; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #447 Body Start
LOAD D2 0.0005
ADDV D2 4
PUSHR D2
LOAD D2 0.0004
ADDV D2 4
PUSHR D2
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0003
POP D3
ADDR D2 D3
SUBV D2 4
PUSHR D2
LOAD D2 0.0004
PUSHR D2
LOAD D2 0.0002
POP D3
ADDR D2 D3
SUBV D2 4
PUSHR D2
PUSHV 114
PUSHV 1
PUSHARGSV 0 0.0004
PUSHV 128; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
RECTR; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0012; InlineFunc[void screendata::Rectangle(int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
ALLOCATEMEMV D2 15 0
STORE D2 0.0001
WRITEPODSTRING D2 "ORX/ORY %d %d\n"
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETV D2 23
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING
SETV D2 24
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0001
DEALLOCATEMEMR D3
ALLOCATEMEMV D2 15 0
STORE D2 0
WRITEPODSTRING D2 "NRX/NRY %d %d\n"
LOAD D2 0; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
SETV D2 21
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING
SETV D2 22
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0
DEALLOCATEMEMR D3; if() #447 Body End
SETV D2 0; if() #448 Test
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
COMPAREV D2 -1
SETCMP D2 I!=
COMPAREV D2 0
GOTOCMP 335 ==; Test 'if'
SETR D2 LINKX; if() #448 Body Start
PUSHR D2
SETR D2 VIEWPORT_X
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0005
SETR D2 LINKY
PUSHR D2
SETR D2 VIEWPORT_Y
POP D3
SUBR D3 D2
SETR D2 D3
STORE D2 0.0004
PUSHV 3; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHV 20
PUSHARGSV 1 0.0002
PUSHV 3
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
SETR D2 VIEWPORT_X; if() #449 Test
PUSHR D2
SETV D2 21
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
SUBV2 0 D2
POP D3
COMPARER D3 D2
GOTOCMP 261 !=
SETR D2 VIEWPORT_Y
PUSHR D2
SETV D2 22
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
SUBV2 0 D2
POP D3
COMPARER D3 D2
GOTOCMP 261 !=
SETV D2 0
GOTO 262
SETV D2 1
COMPAREV D2 0
GOTOCMP 283 ==; Test 'if'
ALLOCATEMEMV D2 33 0; if() #449 Body Start
STORE D2 0.0001
WRITEPODSTRING D2 "failed expectation! %d %d %d %d\n"
LOAD D2 0.0001; InlineFunc[void printf(char32[])] Params Start
PUSHR D2
PUSHVARGR VIEWPORT_X
SETV D2 21
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING
PUSHVARGR VIEWPORT_Y
SETV D2 22
PUSHR D2
POP D0
PUSHVARGR GAMESCROLLING; InlineFunc[void printf(char32[])] Params End
PRINTFVARG; InlineFunc[void printf(char32[])] Body Start
POP D5; InlineFunc[void printf(char32[])] Body End
LOAD D3 0.0001
DEALLOCATEMEMR D3; if() #449 Body End
SETV D2 3
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
ADDV D2 128
STORE D2 0.0005
SETV D2 4
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
ADDV D2 88
STORE D2 0.0004
PUSHV 3; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHV 21
PUSHARGSV 1 0.0002
PUSHV 3
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
SETV D2 1
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
ADDV D2 128
STORE D2 0.0005
SETV D2 2
PUSHR D2
POP D0
SETR D2 GAMESCROLLING
ADDV D2 88
STORE D2 0.0004
PUSHV 3; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOAD D2 0.0005
PUSHR D2
LOAD D2 0.0004
PUSHR D2
PUSHV 44
PUSHARGSV 1 0.0002
PUSHV 3
PUSHARGSV -1 0.0002
PUSHARGSV 0 0.0005
PUSHV 1
PUSHV 128; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBOR; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS D5 0.0016; InlineFunc[void screendata::DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #448 Body End
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #2 Body [Opt:AlwaysOn] End
GOTO 4; while() #2 End AND [Opt:NeverRet] AND void run() Body End


QUIT; void run() Body
