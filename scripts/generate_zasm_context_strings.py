import argparse
import os
import shutil
import sys

from pathlib import Path

script_dir = Path(os.path.dirname(os.path.realpath(__file__)))
root_dir = script_dir.parent

sys.path.append(str((root_dir / 'scripts').absolute()))
from zscript_doc_parser import Class, Function, Variable, get_doc_data, walk

parser = argparse.ArgumentParser()
parser.add_argument(
    '--build_folder', help='The location of the build folder. ex: build/Release'
)
args = parser.parse_args()
if args.build_folder:
    os.environ['BUILD_FOLDER'] = args.build_folder

all_files = get_doc_data(root_dir / 'vscode-extension/client/testFixture/empty.zs')
variables: list[Variable] = []
functions: list[Function] = []
symbol_to_class = {}


def cb(symbol, parent):
    if isinstance(symbol, Variable) and symbol.comment:
        variables.append(symbol)

        if isinstance(parent, Class):
            symbol_to_class[symbol.symbol_id] = parent

    if isinstance(symbol, Function) and symbol.comment:
        functions.append(symbol)

        if isinstance(parent, Class):
            symbol_to_class[symbol.symbol_id] = parent


for file in all_files:
    walk(file, cb)


functions_grouped_by_zasm: dict[str, Function] = {}
variables_grouped_by_zasm: dict[str, Variable] = {}


def add_to_group(grouped, key, value):
    symbols = grouped.get(key)
    if not symbols:
        symbols = grouped[key] = []
    symbols.append(value)


for fn in functions:
    zasm = fn.comment.get_tag_single('zasm')
    if not zasm:
        continue

    lines = zasm.splitlines()
    lines.reverse()

    zasm = None
    for line in lines:
        if line.startswith('POP') or line.startswith('COMPARE'):
            continue
        if line.startswith('SETR') or line.startswith('SETCMP'):
            zasm = next(
                (
                    x
                    for x in line.split(' ')[1:]
                    if not x.startswith('D')
                    and not x.startswith('REF')
                    and x[0].isalpha()
                ),
                None,
            )
            if not zasm:
                continue

            add_to_group(variables_grouped_by_zasm, zasm, fn)
            zasm = None
            break

        zasm = line.split(' ')[0]
        break

    if not zasm:
        continue

    add_to_group(functions_grouped_by_zasm, zasm, fn)


for var in variables:
    zasm = var.comment.get_tag_single('zasm_var')
    if zasm:
        add_to_group(variables_grouped_by_zasm, zasm, var)


def get_hardcoded_context_string(zasm: str) -> str:
    if zasm == 'READKEY':
        return 'Input->ReadKey[]'
    if zasm == 'BUTTONHELD':
        return 'Input->Hold[]'

    return None


def get_context_string(zasm: str, grouped) -> str:
    hardcoded = get_hardcoded_context_string(zasm)
    if hardcoded:
        return hardcoded

    symbols = grouped[zasm]
    non_deprecated_variables = [v for v in symbols if not v.deprecated()]

    symbol = None
    if len(symbols) == 1:
        symbol = symbols[0]
    elif len(non_deprecated_variables) >= 1:
        symbol = non_deprecated_variables[0]
    else:
        symbol = symbols[0]

    # if len(non_deprecated_variables) > 1:
    #     print(
    #         f'NOTE: multiple non-deprecated symbols found for {zasm}, using the first one: {[v.name for v in symbols]}'
    #     )

    class_symbol = symbol_to_class.get(symbol.symbol_id)

    if not class_symbol:
        scoped_name = symbol.name
    elif class_symbol.is_global():
        scoped_name = f'{class_symbol.name}->{symbol.name}'
    else:
        scoped_name = f'{class_symbol.name}::{symbol.name}'

    if isinstance(symbol, Function):
        return f'{scoped_name}()'
    elif symbol.type.is_array():
        return f'{scoped_name}[]'

    return scoped_name


def print_overloaded_zasm():
    grouped = {**variables_grouped_by_zasm, **functions_grouped_by_zasm}
    for zasm, variables in grouped.items():
        if len(variables) > 1:
            print(zasm)

            for var in variables:
                print('\t', var.name, '(deprecated)' if var.deprecated() else '')
            print()


def create_case_labels(grouped):
    cases = []
    for zasm in grouped.keys():
        cases.append((zasm, get_context_string(zasm, grouped)))
    cases.sort(key=lambda x: x[1])
    return [f'\t\tcase {zasm}: return "{string}";' for zasm, string in cases]


var_cases = '\n'.join(create_case_labels(variables_grouped_by_zasm))
fn_cases = '\n'.join(create_case_labels(functions_grouped_by_zasm))
cpp_file = f'''// Generated by scripts/generate_zasm_context_strings.py

#include "zc/scripting/context_strings.h"

#include "zasm/defines.h"

const char* scripting_get_zasm_register_context_string(int reg)
{{
	switch (reg)
	{{
{var_cases}

        // The following are all retired ZASM registers.

        case EWPNCSET: return "eweapon::CSet";
        case EWPNDIR: return "eweapon::Dir";
        case EWPNDRAWTYPE: return "eweapon::DrawStyle";
        case EWPNDROWNCLK: return "eweapon::Drowning";
        case EWPNDROWNCMB: return "eweapon::DrownCombo";
        case EWPNENGINEANIMATE: return "eweapon::Animation";
        case EWPNEXTEND: return "eweapon::Extend";
        case EWPNFAKEJUMP: return "eweapon::FakeJump";
        case EWPNFAKEZ: return "eweapon::FakeZ";
        case EWPNFALLCLK: return "eweapon::Falling";
        case EWPNFALLCMB: return "eweapon::FallCombo";
        case EWPNFLIP: return "eweapon::Flip";
        case EWPNGLOWRAD: return "eweapon::LightRadius";
        case EWPNGLOWSHP: return "eweapon::LightShape";
        case EWPNGRAVITY: return "eweapon::Gravity";
        case EWPNHXOFS: return "eweapon::HitXOffset";
        case EWPNHXSZ: return "eweapon::HitWidth";
        case EWPNHYOFS: return "eweapon::HitYOffset";
        case EWPNHYSZ: return "eweapon::HitHeight";
        case EWPNHZSZ: return "eweapon::HitZHeight";
        case EWPNJUMP: return "eweapon::Jump";
        case EWPNMISCD: return "eweapon::Misc[]";
        case EWPNMOVEFLAGS: return "eweapon::MoveFlags[]";
        case EWPNROTATION: return "eweapon::Rotation";
        case EWPNSCALE: return "eweapon::Scale";
        case EWPNSCRIPTFLIP: return "eweapon::ScriptFlip";
        case EWPNSCRIPTTILE: return "eweapon::ScriptTile";
        case EWPNSHADOWSPR: return "eweapon::ShadowSprite";
        case EWPNSHADOWXOFS: return "eweapon::ShadowXOffset";
        case EWPNSHADOWYOFS: return "eweapon::ShadowYOffset";
        case EWPNTILE: return "eweapon::Tile";
        case EWPNTXSZ: return "eweapon::TileWidth";
        case EWPNTYSZ: return "eweapon::TileHeight";
        case EWPNX: return "eweapon::X";
        case EWPNXOFS: return "eweapon::DrawXOffset";
        case EWPNY: return "eweapon::Y";
        case EWPNYOFS: return "eweapon::DrawYOffset";
        case EWPNZ: return "eweapon::Z";
        case EWPNZOFS: return "eweapon::DrawZOffset";
        case EWSWHOOKED: return "eweapon::SwitchHooked";
        case FCSET: return "ffc::CSet";
        case FFMISCD: return "ffc::Misc[]";
        case FFTHEIGHT: return "ffc::TileHeight";
        case FFTWIDTH: return "ffc::TileWidth";
        case FX: return "ffc::X";
        case FY: return "ffc::Y";
        case HERODROWNCLK: return "Hero->Drowning";
        case HERODROWNCMB: return "Hero->DrownCombo";
        case HEROFAKEJUMP: return "Hero->FakeJump";
        case HEROFAKEZ: return "Hero->FakeZ";
        case HEROFALLCLK: return "Hero->Falling";
        case HEROFALLCMB: return "Hero->FallCombo";
        case HEROMOVEFLAGS: return "Hero->MoveFlags[]";
        case HEROSHADOWXOFS: return "Hero->ShadowXOffset";
        case HEROSHADOWYOFS: return "Hero->ShadowYOffset";
        case ITEMCSET: return "itemsprite::CSet";
        case ITEMDIR: return "itemsprite::Dir";
        case ITEMDRAWTYPE: return "itemsprite::DrawStyle";
        case ITEMDROWNCLK: return "itemsprite::Drowning";
        case ITEMDROWNCMB: return "itemsprite::DrownCombo";
        case ITEMENGINEANIMATE: return "itemsprite::Animation";
        case ITEMEXTEND: return "itemsprite::Extend";
        case ITEMFAKEJUMP: return "itemsprite::FakeJump";
        case ITEMFAKEZ: return "itemsprite::FakeZ";
        case ITEMFALLCLK: return "itemsprite::Falling";
        case ITEMFALLCMB: return "itemsprite::FallCombo";
        case ITEMFLIP: return "itemsprite::Flip";
        case ITEMGLOWRAD: return "itemsprite::LightRadius";
        case ITEMGLOWSHP: return "itemsprite::LightShape";
        case ITEMGRAVITY: return "itemsprite::Gravity";
        case ITEMHXOFS: return "itemsprite::HitXOffset";
        case ITEMHXSZ: return "itemsprite::HitWidth";
        case ITEMHYOFS: return "itemsprite::HitYOffset";
        case ITEMHYSZ: return "itemsprite::HitHeight";
        case ITEMHZSZ: return "itemsprite::HitZHeight";
        case ITEMJUMP: return "itemsprite::Jump";
        case ITEMMISCD: return "itemsprite::Misc[]";
        case ITEMMOVEFLAGS: return "itemsprite::MoveFlags[]";
        case ITEMROTATION: return "itemsprite::Rotation";
        case ITEMSCALE: return "itemsprite::Scale";
        case ITEMSCRIPTFLIP: return "itemsprite::ScriptFlip";
        case ITEMSCRIPTTILE: return "itemsprite::ScriptTile";
        case ITEMSHADOWSPR: return "itemsprite::ShadowSprite";
        case ITEMSHADOWXOFS: return "itemsprite::ShadowXOffset";
        case ITEMSHADOWYOFS: return "itemsprite::ShadowYOffset";
        case ITEMTILE: return "itemsprite::Tile";
        case ITEMTXSZ: return "itemsprite::TileWidth";
        case ITEMTYSZ: return "itemsprite::TileHeight";
        case ITEMX: return "itemsprite::X";
        case ITEMXOFS: return "itemsprite::DrawXOffset";
        case ITEMY: return "itemsprite::Y";
        case ITEMYOFS: return "itemsprite::DrawYOffset";
        case ITEMZ: return "itemsprite::Z";
        case ITEMZOFS: return "itemsprite::DrawZOffset";
        case ITMSWHOOKED: return "itemsprite::SwitchHooked";
        case LINKCSET: return "Hero->CSet";
        case LINKDIR: return "Hero->Dir";
        case LINKENGINEANIMATE: return "Hero->Animation";
        case LINKFLIP: return "Hero->Flip";
        case LINKGRAVITY: return "Hero->Gravity";
        case LINKHXOFS: return "Hero->HitXOffset";
        case LINKHXSZ: return "Hero->HitWidth";
        case LINKHYOFS: return "Hero->HitYOffset";
        case LINKHYSZ: return "Hero->HitHeight";
        case LINKHZSZ: return "Hero->HitZHeight";
        case LINKJUMP: return "Hero->Jump";
        case LINKMISCD: return "Hero->Misc[]";
        case LINKROTATION: return "Hero->Rotation";
        case LINKSCALE: return "Hero->Scale";
        case LINKSCRIPFLIP: return "Hero->ScriptFlip";
        case LINKSCRIPTTILE: return "Hero->ScriptTile";
        case LINKTILE: return "Hero->Tile";
        case LINKTXSZ: return "Hero->TileWidth";
        case LINKTYSZ: return "Hero->TileHeight";
        case LINKX: return "Hero->X";
        case LINKXOFS: return "Hero->DrawXOffset";
        case LINKY: return "Hero->Y";
        case LINKYOFS: return "Hero->DrawYOffset";
        case LINKZ: return "Hero->Z";
        case LINKZOFS: return "Hero->DrawZOffset";
        case LWPNCSET: return "lweapon::CSet";
        case LWPNDIR: return "lweapon::Dir";
        case LWPNDRAWTYPE: return "lweapon::DrawStyle";
        case LWPNDROWNCLK: return "lweapon::Drowning";
        case LWPNDROWNCMB: return "lweapon::DrownCombo";
        case LWPNENGINEANIMATE: return "lweapon::Animation";
        case LWPNEXTEND: return "lweapon::Extend";
        case LWPNFAKEJUMP: return "lweapon::FakeJump";
        case LWPNFAKEZ: return "lweapon::FakeZ";
        case LWPNFALLCLK: return "lweapon::Falling";
        case LWPNFALLCMB: return "lweapon::FallCombo";
        case LWPNFLIP: return "lweapon::Flip";
        case LWPNGLOWRAD: return "lweapon::LightRadius";
        case LWPNGLOWSHP: return "lweapon::LightShape";
        case LWPNGRAVITY: return "lweapon::Gravity";
        case LWPNHXOFS: return "lweapon::HitXOffset";
        case LWPNHXSZ: return "lweapon::HitWidth";
        case LWPNHYOFS: return "lweapon::HitYOffset";
        case LWPNHYSZ: return "lweapon::HitHeight";
        case LWPNHZSZ: return "lweapon::HitZHeight";
        case LWPNJUMP: return "lweapon::Jump";
        case LWPNMISCD: return "lweapon::Misc[]";
        case LWPNMOVEFLAGS: return "lweapon::MoveFlags[]";
        case LWPNROTATION: return "lweapon::Rotation";
        case LWPNSCALE: return "lweapon::Scale";
        case LWPNSCRIPTFLIP: return "lweapon::ScriptFlip";
        case LWPNSCRIPTTILE: return "lweapon::ScriptTile";
        case LWPNSHADOWSPR: return "lweapon::ShadowSprite";
        case LWPNSHADOWXOFS: return "lweapon::ShadowXOffset";
        case LWPNSHADOWYOFS: return "lweapon::ShadowYOffset";
        case LWPNTILE: return "lweapon::Tile";
        case LWPNTXSZ: return "lweapon::TileWidth";
        case LWPNTYSZ: return "lweapon::TileHeight";
        case LWPNX: return "lweapon::X";
        case LWPNXOFS: return "lweapon::DrawXOffset";
        case LWPNY: return "lweapon::Y";
        case LWPNYOFS: return "lweapon::DrawYOffset";
        case LWPNZ: return "lweapon::Z";
        case LWPNZOFS: return "lweapon::DrawZOffset";
        case LWSWHOOKED: return "lweapon::SwitchHooked";
        case NPCCSET: return "npc::CSet";
        case NPCDIR: return "npc::Dir";
        case NPCDRAWTYPE: return "npc::DrawStyle";
        case NPCDROWNCLK: return "npc::Drowning";
        case NPCDROWNCMB: return "npc::DrownCombo";
        case NPCENGINEANIMATE: return "npc::Animation";
        case NPCEXTEND: return "npc::Extend";
        case NPCFAKEJUMP: return "npc::FakeJump";
        case NPCFAKEZ: return "npc::FakeZ";
        case NPCFALLCLK: return "npc::Falling";
        case NPCFALLCMB: return "npc::FallCombo";
        case NPCGLOWRAD: return "npc::LightRadius";
        case NPCGLOWSHP: return "npc::LightShape";
        case NPCGRAVITY: return "npc::Gravity";
        case NPCHXOFS: return "npc::HitXOffset";
        case NPCHXSZ: return "npc::HitWidth";
        case NPCHYOFS: return "npc::HitYOffset";
        case NPCHYSZ: return "npc::HitHeight";
        case NPCHZSZ: return "npc::HitZHeight";
        case NPCJUMP: return "npc::Jump";
        case NPCMISCD: return "npc::Misc[]";
        case NPCMOVEFLAGS: return "npc::MoveFlags[]";
        case NPCROTATION: return "npc::Rotation";
        case NPCSCALE: return "npc::Scale";
        case NPCSCRIPTFLIP: return "npc::ScriptFlip";
        case NPCSCRIPTTILE: return "npc::ScriptTile";
        case NPCSHADOWSPR: return "npc::ShadowSprite";
        case NPCSHADOWXOFS: return "npc::ShadowXOffset";
        case NPCSHADOWYOFS: return "npc::ShadowYOffset";
        case NPCSWHOOKED: return "npc::SwitchHooked";
        case NPCTILE: return "npc::Tile";
        case NPCTXSZ: return "npc::TileWidth";
        case NPCTYSZ: return "npc::TileHeight";
        case NPCX: return "npc::X";
        case NPCXOFS: return "npc::DrawXOffset";
        case NPCY: return "npc::Y";
        case NPCYOFS: return "npc::DrawYOffset";
        case NPCZ: return "npc::Z";
        case NPCZOFS: return "npc::DrawZOffset";
        case SCREENDATAWARPRETURNC: return "Screen->WarpReturnC";
        case SETNPCDATAATTRIBUTE: return "npcdata::SetAttribute()";
        case SETNPCDATADEFENSE: return "npcdata::SetDefense()";
        case SETNPCDATASCRIPTDEF: return "npcdata::SetScriptDefense()";
        case SETNPCDATASIZEFLAG: return "npcdata::SetSizeFlag()";
	}}

	return nullptr;
}}

const char* scripting_get_zasm_command_context_string(ASM_DEFINE command)
{{
	switch (command)
	{{
{fn_cases}

        // The following are all retired ZASM commands.

        case GETNPCDATAANIM: return "npcdata::GetAnim()";
        case GETNPCDATAATTRIBUTE: return "npcdata::GetAttribute()";
        case GETNPCDATABGSFX: return "npcdata::GetBGSFX()";
        case GETNPCDATACSET: return "npcdata::GetCSet()";
        case GETNPCDATADEATHSFX: return "npcdata::GetDeathSFX()";
        case GETNPCDATADEFENSE: return "npcdata::GetDefense()";
        case GETNPCDATADROPSET: return "npcdata::GetDropset()";
        case GETNPCDATAEANIM: return "npcdata::GetEAnim()";
        case GETNPCDATAEFRAMERATE: return "npcdata::GetEFramerate()";
        case GETNPCDATAEHEIGHT: return "npcdata::GetEHeight()";
        case GETNPCDATAETILE: return "npcdata::GetETile()";
        case GETNPCDATAEWIDTH: return "npcdata::GetEWidth()";
        case GETNPCDATAFAMILY: return "npcdata::GetFamily()";
        case GETNPCDATAFLAGS: return "npcdata::GetFlags()";
        case GETNPCDATAFLAGS2: return "npcdata::GetFlags2()";
        case GETNPCDATAFRAMERATE: return "npcdata::GetFramerate()";
        case GETNPCDATAHALT: return "npcdata::GetHaltRate()";
        case GETNPCDATAHEIGHT: return "npcdata::GetHeight()";
        case GETNPCDATAHITHEIGHT: return "npcdata::GetHitHeight()";
        case GETNPCDATAHITSFX: return "npcdata::GetHitSFX()";
        case GETNPCDATAHITWIDTH: return "npcdata::GetHitWidth()";
        case GETNPCDATAHITZ: return "npcdata::GetHitZHeight()";
        case GETNPCDATAHOMING: return "npcdata::GetHoming()";
        case GETNPCDATAHP: return "npcdata::GetHP()";
        case GETNPCDATAHUNGER: return "npcdata::GetHunger()";
        case GETNPCDATAHXOFS: return "npcdata::GetHitXOffset()";
        case GETNPCDATAHYOFS: return "npcdata::GetHitYOffset()";
        case GETNPCDATARANDOM: return "npcdata::GetRandom()";
        case GETNPCDATASCRIPTDEF: return "npcdata::GetScriptDefense()";
        case GETNPCDATASHEIGHT: return "npcdata::GetSHeight()";
        case GETNPCDATASIZEFLAG: return "npcdata::GetSizeFlag()";
        case GETNPCDATASTEP: return "npcdata::GetStep()";
        case GETNPCDATASTILE: return "npcdata::GetSTile()";
        case GETNPCDATASWIDTH: return "npcdata::GetSWidth()";
        case GETNPCDATATILE: return "npcdata::GetTile()";
        case GETNPCDATATILEHEIGHT: return "npcdata::GetTileHeight()";
        case GETNPCDATATILEWIDTH: return "npcdata::GetTileWidth()";
        case GETNPCDATATOUCHDMG: return "npcdata::GetTouchDamage()";
        case GETNPCDATAWEAPON: return "npcdata::GetWeapon()";
        case GETNPCDATAWIDTH: return "npcdata::GetWidth()";
        case GETNPCDATAWPNDAMAGE: return "npcdata::GetWeaponDamage()";
        case GETNPCDATAWPNSPRITE: return "npcdata::GetWeaponSprite()";
        case GETNPCDATAXOFS: return "npcdata::GetDrawXOffset()";
        case GETNPCDATAYOFS: return "npcdata::GetDrawYOffset()";
        case GETNPCDATAZOFS: return "npcdata::GetDrawZOffset()";
        case SETNPCDATAANIM: return "npcdata::SetAnim()";
        case SETNPCDATACSET: return "npcdata::SetCSet()";
        case SETNPCDATAEANIM: return "npcdata::SetEAnim()";
        case SETNPCDATAEHEIGHT: return "npcdata::SetEHeight()";
        case SETNPCDATAETILE: return "npcdata::SetETile()";
        case SETNPCDATAEWIDTH: return "npcdata::SetEWidth()";
        case SETNPCDATAFAMILY: return "npcdata::SetFamily()";
        case SETNPCDATAFLAGS: return "npcdata::SetFlags()";
        case SETNPCDATAFLAGS2: return "npcdata::SetFlags2()";
        case SETNPCDATAHEIGHT: return "npcdata::SetHeight()";
        case SETNPCDATAHP: return "npcdata::SetHP()";
        case SETNPCDATASHEIGHT: return "npcdata::SetSHeight()";
        case SETNPCDATASTILE: return "npcdata::SetSTile()";
        case SETNPCDATASWIDTH: return "npcdata::SetSWidth()";
        case SETNPCDATATILE: return "npcdata::SetTile()";
        case SETNPCDATAWIDTH: return "npcdata::SetWidth()";
	}}

	return nullptr;
}}
'''

out_path = root_dir / 'src/zc/scripting/context_strings.cpp'
out_path.write_text(cpp_file)
print(f'written to {out_path}')
