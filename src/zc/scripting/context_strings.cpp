// Generated by scripts/generate_zasm_context_strings.py

#include "zc/scripting/context_strings.h"

#include "zasm/defines.h"

const char* scripting_get_zasm_register_context_string(int reg)
{
	switch (reg)
	{
		case GETMIDI: return "Audio->MIDI";
		case MUSICUPDATECOND: return "Audio->MusicRefresh";
		case MUSICUPDATEFLAGS: return "Audio->MusicRefreshFlags[]";
		case AUDIOPAN: return "Audio->PanStyle";
		case AUDIOVOLUME: return "Audio->Volume[]";
		case DEBUGD: return "Debug->D[]";
		case DEBUGGDR: return "Debug->GDR[]";
		case DONULL: return "Debug->NULL";
		case PC: return "Debug->PC";
		case GAMEPLAYFIELDOFS: return "Debug->PlayfieldOffset";
		case DEBUGREFEWEAPON: return "Debug->RefEWeapon";
		case DEBUGREFFFC: return "Debug->RefFFC";
		case DEBUGREFITEM: return "Debug->RefItem";
		case DEBUGREFITEMDATA: return "Debug->RefItemdata";
		case DEBUGREFLWEAPON: return "Debug->RefLWeapon";
		case DEBUGREFNPC: return "Debug->RefNPC";
		case SP: return "Debug->SP";
		case DEBUGTESTING: return "Debug->Testing";
		case GAMEASUBOPEN: return "Game->ActiveSubscreenOpen";
		case GAMEASUBYOFF: return "Game->ActiveSubscreenY";
		case ALLOCATEBITMAPR: return "Game->AllocateBitmap()";
		case ZELDABETA: return "Game->Beta";
		case ZELDABETATYPE: return "Game->BetaType";
		case GAMEBOTTLEST: return "Game->BottleState[]";
		case ZELDABUILD: return "Game->Build";
		case GAMECHEAT: return "Game->Cheat";
		case GAMECLICKFREEZE: return "Game->ClickToFreezeEnabled";
		case GAMECONTDMAP: return "Game->ContinueDMap";
		case GAMECONTSCR: return "Game->ContinueScreen";
		case GAMECOUNTERD: return "Game->Counter[]";
		case CURDMAP: return "Game->CurDMap";
		case CURDSCR: return "Game->CurDMapScreen";
		case CURLEVEL: return "Game->CurLevel";
		case CURMAP: return "Game->CurMap";
		case CURSCR: return "Game->CurScreen";
		case GAMEDCOUNTERD: return "Game->DCounter[]";
		case DMAPCOMPASSD: return "Game->DMapCompass[]";
		case DMAPCONTINUED: return "Game->DMapContinue[]";
		case DMAPFLAGSD: return "Game->DMapFlags[]";
		case DMAPLEVELD: return "Game->DMapLevel[]";
		case DMAPMIDID: return "Game->DMapMIDI[]";
		case DMAPMAP: return "Game->DMapMap[]";
		case DMAPOFFSET: return "Game->DMapOffset[]";
		case DMAPLEVELPAL: return "Game->DMapPalette[]";
		case NOACTIVESUBSC: return "Game->DisableActiveSubscreen";
		case DISABLEDITEM: return "Game->DisableItem[]";
		case GAMEEVENTDATA: return "Game->EventData[]";
		case FFRULE: return "Game->FFRules[]";
		case SETGAMEOVERELEMENT: return "Game->GameOverScreen[]";
		case SETGAMEOVERSTRING: return "Game->GameOverStrings[]";
		case GAMEGENERICD: return "Game->Generic[]";
		case COMBOCDM: return "Game->GetComboCSet()";
		case COMBODDM: return "Game->GetComboData()";
		case COMBOFDM: return "Game->GetComboFlag()";
		case COMBOIDM: return "Game->GetComboInherentFlag()";
		case COMBOSDM: return "Game->GetComboSolid()";
		case COMBOTDM: return "Game->GetComboType()";
		case SDDDD: return "Game->GetDMapScreenD()";
		case SDDD: return "Game->GetScreenD()";
		case SCREENSTATEDD: return "Game->GetScreenState()";
		case GAMEGSWITCH: return "Game->GlobalStates[]";
		case GAMEGRAVITY: return "Game->Gravity[]";
		case GAMEGUYCOUNT: return "Game->GuyCount[]";
		case GAMEHASPLAYED: return "Game->HasPlayed";
		case HERO_SCREEN: return "Game->HeroScreen";
		case INCQST: return "Game->IncrementQuest()";
		case GAMELITEMSD: return "Game->LItems[]";
		case GAMELKEYSD: return "Game->LKeys[]";
		case GAMEENTRDMAP: return "Game->LastEntranceDMap";
		case GAMEENTRSCR: return "Game->LastEntranceScreen";
		case GAMELSWITCH: return "Game->LevelStates[]";
		case LOADMAPDATA: return "Game->LoadMapData()";
		case GAMEMCOUNTERD: return "Game->MCounter[]";
		case GAMEMAXMAPS: return "Game->MapCount";
		case GAMEMAXCHEAT: return "Game->MaxCheat";
		case SPRITEMAXEWPN: return "Game->MaxEWeapons()";
		case SPRITEMAXITEM: return "Game->MaxItemsprites()";
		case SPRITEMAXLWPN: return "Game->MaxLWeapons()";
		case SPRITEMAXNPC: return "Game->MaxNPCs()";
		case GAMEMISCSFX: return "Game->MiscSFX[]";
		case GAMEMISCSPR: return "Game->MiscSprites[]";
		case GAMEMOUSECURSOR: return "Game->MouseCursor";
		case GAMENUMASUB: return "Game->NumActiveSubscreens";
		case GAMEDEATHS: return "Game->NumDeaths";
		case GAMENUMMESSAGES: return "Game->NumMessages";
		case GAMENUMOSUB: return "Game->NumOverlaySubscreens";
		case GAMENUMPSUB: return "Game->NumPassiveSubscreens";
		case SAVEDPORTALCOUNT: return "Game->NumSavedPortals";
		case GAMEOVERRIDEITEMS: return "Game->OverrideItems[]";
		case GAMESCROLLING: return "Game->Scrolling[]";
		case SKIPCREDITS: return "Game->SkipCredits";
		case SKIPF6: return "Game->SkipF6";
		case GAMESTANDALONE: return "Game->Standalone";
		case ACTIVESSSPEED: return "Game->SubscreenSpeed";
		case GAMESUSPEND: return "Game->Suspend[]";
		case GAMETIME: return "Game->Time";
		case GAMETIMEVALID: return "Game->TimeValid";
		case GAMETRIGGROUPS: return "Game->TrigGroups[]";
		case TYPINGMODE: return "Game->TypingMode";
		case ZELDAVERSION: return "Game->Version";
		case ZSCRIPTVERSION: return "Game->ZScriptVersion";
		case GLOBALRAMD: return "GetGlobalRAM()";
		case SCRIPTRAMD: return "GetScriptRAM()";
		case IS8BITTILE: return "Graphics->Is8BitTile[]";
		case ISBLANKTILE: return "Graphics->IsBlankTile[]";
		case MAXDRAWS: return "Graphics->MaxDraws";
		case NUMDRAWS: return "Graphics->NumDraws";
		case LINKACTION: return "Hero->Action";
		case LINKBIGHITBOX: return "Hero->BigHitbox";
		case HEROBUNNY: return "Hero->BunnyClk";
		case LINKCLIMBING: return "Hero->Climbing";
		case CLOCKACTIVE: return "Hero->ClockActive";
		case CLOCKCLK: return "Hero->ClockTimer";
		case LINKINVINC: return "Hero->CollDetection";
		case HEROCOYOTETIME: return "Hero->CoyoteTime";
		case LINKDEFENCE: return "Hero->Defense[]";
		case LINKDIAG: return "Hero->Diagonal";
		case LINKDRUNK: return "Hero->Drunk";
		case LINKEATEN: return "Hero->Eaten";
		case LINKEQUIP: return "Hero->Equipment";
		case HEROFLASHINGCSET: return "Hero->FlashingCSet";
		case HEROFLICKERCOLOR: return "Hero->FlickerColor";
		case HEROFLICKERTRANSP: return "Hero->FlickerTransparencyPasses";
		case LINKOFLIP: return "Hero->GetOriginalFlip()";
		case LINKOTILE: return "Hero->GetOriginalTile()";
		case LINKGRABBED: return "Hero->Grabbed";
		case LINKHP: return "Hero->HP";
		case HEROHAMMERSTATE: return "Hero->HammerState";
		case HEROHEALTHBEEP: return "Hero->HealthBeep";
		case LINKHELD: return "Hero->HeldItem";
		case LINKHITBY: return "Hero->HitBy[]";
		case LINKHITDIR: return "Hero->HitDir";
		case LINKHURTSFX: return "Hero->HurtSound";
		case HEROICECMB: return "Hero->IceCombo";
		case HEROICEENTRYFRAMES: return "Hero->IceEntryFrames";
		case HEROICEENTRYMAXFRAMES: return "Hero->IceEntryMaxFrames";
		case HEROICEVX: return "Hero->IceVx";
		case HEROICEVY: return "Hero->IceVy";
		case HEROIMMORTAL: return "Hero->Immortal";
		case INPUTA: return "Hero->InputA";
		case INPUTAXISDOWN: return "Hero->InputAxisDown";
		case INPUTAXISLEFT: return "Hero->InputAxisLeft";
		case INPUTAXISRIGHT: return "Hero->InputAxisRight";
		case INPUTAXISUP: return "Hero->InputAxisUp";
		case INPUTB: return "Hero->InputB";
		case INPUTDOWN: return "Hero->InputDown";
		case INPUTEX1: return "Hero->InputEx1";
		case INPUTEX2: return "Hero->InputEx2";
		case INPUTEX3: return "Hero->InputEx3";
		case INPUTEX4: return "Hero->InputEx4";
		case INPUTL: return "Hero->InputL";
		case INPUTLEFT: return "Hero->InputLeft";
		case INPUTMAP: return "Hero->InputMap";
		case INPUTMOUSEB: return "Hero->InputMouseB";
		case INPUTMOUSEX: return "Hero->InputMouseX";
		case INPUTMOUSEY: return "Hero->InputMouseY";
		case INPUTMOUSEZ: return "Hero->InputMouseZ";
		case INPUTR: return "Hero->InputR";
		case INPUTRIGHT: return "Hero->InputRight";
		case INPUTSTART: return "Hero->InputStart";
		case INPUTUP: return "Hero->InputUp";
		case LINKCANFLICKER: return "Hero->InvFlicker";
		case LINKINVFRAME: return "Hero->InvFrames";
		case LINKINVIS: return "Hero->Invisible";
		case HEROISWARPING: return "Hero->IsWarping";
		case LINKITEMA: return "Hero->ItemA";
		case LINKITEMB: return "Hero->ItemB";
		case LINKITEMJINX: return "Hero->ItemJinx";
		case LINKITEMX: return "Hero->ItemX";
		case LINKITEMY: return "Hero->ItemY";
		case LINKITEMD: return "Hero->Item[]";
		case HEROJUMPCOUNT: return "Hero->JumpCount";
		case LINKLADDERX: return "Hero->LadderX";
		case LINKLADDERY: return "Hero->LadderY";
		case HEROLIFTFLAGS: return "Hero->LiftFlags[]";
		case HEROLIFTHEIGHT: return "Hero->LiftHeight";
		case HEROLIFTMAXTIMER: return "Hero->LiftMaxTimer";
		case HEROLIFTTIMER: return "Hero->LiftTimer";
		case HEROLIFTEDWPN: return "Hero->LiftedWeapon";
		case LINKMP: return "Hero->MP";
		case LINKMAXHP: return "Hero->MaxHP";
		case LINKMAXMP: return "Hero->MaxMP";
		case HERONOSTEPFORWARD: return "Hero->NoStepForward";
		case HEROPULLDIR: return "Hero->PitPullDir";
		case HEROPULLCLK: return "Hero->PitPullTimer";
		case INPUTPRESSA: return "Hero->PressA";
		case PRESSAXISDOWN: return "Hero->PressAxisDown";
		case PRESSAXISLEFT: return "Hero->PressAxisLeft";
		case PRESSAXISRIGHT: return "Hero->PressAxisRight";
		case PRESSAXISUP: return "Hero->PressAxisUp";
		case INPUTPRESSB: return "Hero->PressB";
		case INPUTPRESSDOWN: return "Hero->PressDown";
		case INPUTPRESSEX1: return "Hero->PressEx1";
		case INPUTPRESSEX2: return "Hero->PressEx2";
		case INPUTPRESSEX3: return "Hero->PressEx3";
		case INPUTPRESSEX4: return "Hero->PressEx4";
		case INPUTPRESSL: return "Hero->PressL";
		case INPUTPRESSLEFT: return "Hero->PressLeft";
		case INPUTPRESSMAP: return "Hero->PressMap";
		case INPUTPRESSR: return "Hero->PressR";
		case INPUTPRESSRIGHT: return "Hero->PressRight";
		case INPUTPRESSSTART: return "Hero->PressStart";
		case INPUTPRESSUP: return "Hero->PressUp";
		case LINKPUSH: return "Hero->Pushing";
		case HERORESPAWNDMAP: return "Hero->RespawnDMap";
		case HERORESPAWNSCR: return "Hero->RespawnScreen";
		case HERORESPAWNX: return "Hero->RespawnX";
		case HERORESPAWNY: return "Hero->RespawnY";
		case HEROSCRIPTCSET: return "Hero->ScriptCSet";
		case HEROSCRICECMB: return "Hero->ScriptIceCombo";
		case GAMESETA: return "Hero->SetItemA()";
		case GAMESETB: return "Hero->SetItemB()";
		case SETITEMSLOT: return "Hero->SetItemSlot()";
		case HEROSHIELDJINX: return "Hero->ShieldJinx";
		case HEROSHOVEOFFSET: return "Hero->ShoveOffset";
		case HEROSLIDING: return "Hero->Sliding";
		case HEROSTANDING: return "Hero->Standing";
		case HEROSTEPRATE: return "Hero->Step";
		case HEROSTEPS: return "Hero->Steps[]";
		case LINKSTUN: return "Hero->Stun";
		case HEROSWITCHMAXTIMER: return "Hero->SwitchMaxTimer";
		case HEROSWITCHTIMER: return "Hero->SwitchTimer";
		case LINKSWORDJINX: return "Hero->SwordJinx";
		case LINKTILEMOD: return "Hero->TileMod";
		case HEROTOTALDYOFFS: return "Hero->TotalDYOffset";
		case BUTTONINPUT: return "Input->Button[]";
		case DISABLEBUTTON: return "Input->DisableButton[]";
		case DISABLEKEY: return "Input->DisableKey[]";
		case BUTTONHELD: return "Input->Hold[]";
		case JOYPADPRESS: return "Input->Joypad[]";
		case KEYBINDINGS: return "Input->KeyBindings[]";
		case KEYPRESS: return "Input->KeyPress[]";
		case RAWKEY: return "Input->KeyRaw[]";
		case KEYINPUT: return "Input->Key[]";
		case KEYMODIFIERS: return "Input->ModifierKeys";
		case MOUSEARR: return "Input->Mouse[]";
		case BUTTONPRESS: return "Input->Press[]";
		case READKEY: return "Input->ReadKey[]";
		case LONGDISTANCE: return "LongDistance()";
		case LONGDISTANCESCALE: return "LongDistance()";
		case MAX_FFC_ID: return "MAX_FFC";
		case REGION_HEIGHT: return "Region->Height";
		case REGION_ID: return "Region->ID";
		case REGION_NUM_COMBOS: return "Region->NumCombos";
		case REGION_ORIGIN_SCREEN: return "Region->OriginScreenIndex";
		case REGION_SCREEN_HEIGHT: return "Region->ScreenHeight";
		case REGION_SCREEN_WIDTH: return "Region->ScreenWidth";
		case REGION_WIDTH: return "Region->Width";
		case SCREENDATAOCEANSFX: return "Screen->AmbientSFX";
		case SCREENDATABOSSSFX: return "Screen->BossSFX";
		case SCREENDATACSENSITIVE: return "Screen->CSensitive";
		case SCREENDATACATCHALL: return "Screen->Catchall";
		case COMBOCD: return "Screen->ComboC[]";
		case COMBODD: return "Screen->ComboD[]";
		case COMBOED: return "Screen->ComboE[]";
		case COMBOFD: return "Screen->ComboF[]";
		case COMBOID: return "Screen->ComboI[]";
		case COMBOSD: return "Screen->ComboS[]";
		case COMBOTD: return "Screen->ComboT[]";
		case CREATELWPNDX: return "Screen->CreateLWeaponDx()";
		case SDD: return "Screen->D[]";
		case SCREENSCRDATASIZE: return "Screen->DataSize";
		case SCREENSCRDATA: return "Screen->Data[]";
		case SCREENDATADOORCOMBOSET: return "Screen->DoorComboSet";
		case SCRDOORD: return "Screen->Door[]";
		case SCREEN_DRAW_ORIGIN: return "Screen->DrawOrigin";
		case SCREEN_DRAW_ORIGIN_TARGET: return "Screen->DrawOriginTarget";
		case SCREENEFLAGSD: return "Screen->EFlags[]";
		case SCREENDATAENEMYFLAGS: return "Screen->EnemyFlags";
		case SCREENDATAENEMY: return "Screen->Enemy[]";
		case SCREENDATAENTRYX: return "Screen->EntryX";
		case SCREENDATAENTRYY: return "Screen->EntryY";
		case SCREENEXSTATED: return "Screen->ExState[]";
		case SCREENDATAEXITDIR: return "Screen->ExitDir";
		case SCREEN_FLAG: return "Screen->Flag[]";
		case SCREENFLAGSD: return "Screen->Flags[]";
		case SCREENDATAEXDOOR: return "Screen->GetExDoor()";
		case GETRENDERTARGET: return "Screen->GetRenderTarget";
		case SCREENDATAGUY: return "Screen->Guy";
		case SCREENDATAGUYCOUNT: return "Screen->GuyCount";
		case SCREENDATAHASITEM: return "Screen->HasItem";
		case SCREEN_INDEX: return "Screen->Index";
		case SCREENINITD: return "Screen->InitD[]";
		case SCREENDATAITEM: return "Screen->Item";
		case SCREENDATAHOLDUPSFX: return "Screen->ItemSFX";
		case SCREENDATAITEMX: return "Screen->ItemX";
		case SCREENDATAITEMY: return "Screen->ItemY";
		case SCREENDATALAYERINVIS: return "Screen->LayerInvisible[]";
		case SCREENDATALAYERMAP: return "Screen->LayerMap[]";
		case SCREENDATALAYEROPACITY: return "Screen->LayerOpacity[]";
		case SCREENDATALAYERSCREEN: return "Screen->LayerScreen[]";
		case SCREENLENSHIDES: return "Screen->LensHides[]";
		case SCREENDATALENSLAYER: return "Screen->LensLayer";
		case SCREENLENSSHOWS: return "Screen->LensShows[]";
		case LIT: return "Screen->Lit";
		case SCREENDATASCREENMIDI: return "Screen->MIDI";
		case SCREENDATAPATH: return "Screen->MazePath[]";
		case PUSHBLOCKCSET: return "Screen->MovingBlockCSet";
		case PUSHBLOCKCOMBO: return "Screen->MovingBlockCombo";
		case PUSHBLOCKLAYER: return "Screen->MovingBlockLayer";
		case PUSHBLOCKX: return "Screen->MovingBlockX";
		case PUSHBLOCKY: return "Screen->MovingBlockY";
		case SCREENDATANEXTMAP: return "Screen->NextMap";
		case SCREENDATANEXTSCREEN: return "Screen->NextScreen";
		case SCREENDATANOCARRY: return "Screen->NoCarry";
		case SCREENDATANORESET: return "Screen->NoReset";
		case EWPNCOUNT: return "Screen->NumEWeapons";
		case SCREENDATANUMFF: return "Screen->NumFFCs[]";
		case ITEMCOUNT: return "Screen->NumItems";
		case LWPNCOUNT: return "Screen->NumLWeapons";
		case NPCCOUNT: return "Screen->NumNPCs";
		case PORTALCOUNT: return "Screen->NumPortals";
		case SCREENDATACOLOUR: return "Screen->Palette";
		case SCREENDATAPATTERN: return "Screen->Pattern";
		case QUAKE: return "Screen->Quake";
		case ROOMDATA: return "Screen->RoomData";
		case ROOMTYPE: return "Screen->RoomType";
		case SCREENDATAFLAGS: return "Screen->ScreenFlags[]";
		case SCREENSCRIPT: return "Screen->Script";
		case SCREENDATASCRIPTDRAWS: return "Screen->ScriptDraws[]";
		case SCREENDATASECRETCSET: return "Screen->SecretCSet[]";
		case SCREENDATASECRETCOMBO: return "Screen->SecretCombo[]";
		case SCREENDATASECRETFLAG: return "Screen->SecretFlags[]";
		case SCREENDATASECRETSFX: return "Screen->SecretSFX";
		case SCREENSECRETSTRIGGERED: return "Screen->SecretsTriggered";
		case SHOWNMSG: return "Screen->ShowingMessage";
		case SCREENDATASIDEWARPDMAP: return "Screen->SideWarpDMap[]";
		case SCREENSIDEWARPID: return "Screen->SideWarpID[]";
		case SCREENDATASIDEWARPINDEX: return "Screen->SideWarpIndex";
		case SCREENDATASIDEWARPOVFLAGS: return "Screen->SideWarpOverlay[]";
		case SCREENDATASWARPRETSQR: return "Screen->SideWarpReturnSquare[]";
		case SCREENDATASIDEWARPSC: return "Screen->SideWarpScreen[]";
		case SCREENDATASIDEWARPTYPE: return "Screen->SideWarpType[]";
		case SCREENDATASTAIRX: return "Screen->StairsX";
		case SCREENDATASTAIRY: return "Screen->StairsY";
		case SCREENSTATED: return "Screen->State[]";
		case SCREENDATASTRING: return "Screen->String";
		case SCREENDATATILEWARPDMAP: return "Screen->TileWarpDMap[]";
		case SCREENDATATILEWARPOVFLAGS: return "Screen->TileWarpOverlay[]";
		case SCREENDATATWARPRETSQR: return "Screen->TileWarpReturnSquare[]";
		case SCREENDATATILEWARPSCREEN: return "Screen->TileWarpScreen[]";
		case SCREENDATATILEWARPTYPE: return "Screen->TileWarpType[]";
		case SCREENDATATIMEDWARPTICS: return "Screen->TimedWarpTimer";
		case UNDERCSET: return "Screen->UnderCSet";
		case UNDERCOMBO: return "Screen->UnderCombo";
		case SCREENDATAVALID: return "Screen->Valid";
		case SCREENDATAWARPARRIVALX: return "Screen->WarpArrivalX";
		case SCREENDATAWARPARRIVALY: return "Screen->WarpArrivalY";
		case SCREENDATAWARPRETX: return "Screen->WarpReturnX[]";
		case SCREENDATAWARPRETY: return "Screen->WarpReturnY[]";
		case WAVY: return "Screen->Wavy";
		case VIEWPORT_HEIGHT: return "Viewport->Height";
		case VIEWPORT_MODE: return "Viewport->Mode";
		case VIEWPORT_TARGET: return "Viewport->Target";
		case VIEWPORT_WIDTH: return "Viewport->Width";
		case VIEWPORT_X: return "Viewport->X";
		case VIEWPORT_Y: return "Viewport->Y";
		case BITMAPHEIGHT: return "bitmap::Height";
		case BITMAPWIDTH: return "bitmap::Width";
		case CREATEBITMAP: return "bitmap::bitmap()";
		case BOTTLEAMOUNT: return "bottledata::Amount[]";
		case BOTTLECOUNTER: return "bottledata::Counter[]";
		case BOTTLEFLAGS: return "bottledata::Flags[]";
		case BOTTLEPERCENT: return "bottledata::IsPercent[]";
		case BOTTLENEXT: return "bottledata::NextType";
		case BSHOPCSET: return "bottleshopdata::CSet[]";
		case BSHOPCOMBO: return "bottleshopdata::Combo[]";
		case BSHOPFILL: return "bottleshopdata::Fill[]";
		case BSHOPSTR: return "bottleshopdata::InfoString[]";
		case BSHOPPRICE: return "bottleshopdata::Price[]";
		case COMBODACLK: return "combodata::AClk";
		case COMBODASPEED: return "combodata::ASpeed";
		case COMBODANIMFLAGS: return "combodata::AnimFlags";
		case COMBODATTRIBUTES: return "combodata::Attributes[]";
		case COMBODATTRIBYTES: return "combodata::Attribytes[]";
		case COMBODATTRISHORTS: return "combodata::Attrishorts[]";
		case COMBODCSET: return "combodata::CSet2";
		case COMBODCSET2FLAGS: return "combodata::CSet2Flags";
		case COMBODEFFECT: return "combodata::Effect";
		case COMBODEXPANSION: return "combodata::Expansion[]";
		case COMBODFLAG: return "combodata::Flag";
		case COMBODUSRFLAGARR: return "combodata::Flags[]";
		case COMBODFLIP: return "combodata::Flip";
		case COMBODFRAME: return "combodata::Frame";
		case COMBODFRAMES: return "combodata::Frames";
		case COMBODGENFLAGARR: return "combodata::GenFlags[]";
		case COMBODATAID: return "combodata::ID";
		case COMBODATAINITD: return "combodata::InitD[]";
		case COMBOLAYERR: return "combodata::Layer";
		case COMBODLIFTBREAKSFX: return "combodata::LiftBreakSFX";
		case COMBODLIFTBREAKSPRITE: return "combodata::LiftBreakSprite";
		case COMBODLIFTDAMAGE: return "combodata::LiftDamage";
		case COMBODLIFTFLAGS: return "combodata::LiftFlags[]";
		case COMBODLIFTGFXCCSET: return "combodata::LiftGFXCSet";
		case COMBODLIFTGFXCOMBO: return "combodata::LiftGFXCombo";
		case COMBODLIFTGFXSPRITE: return "combodata::LiftGFXSprite";
		case COMBODLIFTGFXTYPE: return "combodata::LiftGFXType";
		case COMBODLIFTHEIGHT: return "combodata::LiftHeight";
		case COMBODLIFTITEM: return "combodata::LiftItem";
		case COMBODLIFTLEVEL: return "combodata::LiftLevel";
		case COMBODLIFTLIGHTRAD: return "combodata::LiftLightRadius";
		case COMBODLIFTLIGHTSHAPE: return "combodata::LiftLightShape";
		case COMBODLIFTSFX: return "combodata::LiftSFX";
		case COMBODLIFTTIME: return "combodata::LiftTime";
		case COMBODLIFTUNDERCS: return "combodata::LiftUnderCSet";
		case COMBODLIFTUNDERCMB: return "combodata::LiftUnderCombo";
		case COMBODLIFTWEAPONITEM: return "combodata::LiftWeaponItem";
		case COMBODNEXTC: return "combodata::NextCSet";
		case COMBODNEXTD: return "combodata::NextData";
		case COMBODNEXTTIMER: return "combodata::NextTimer";
		case COMBODOTILE: return "combodata::OriginalTile";
		case COMBOPOSR: return "combodata::Pos";
		case COMBODATASCRIPT: return "combodata::Script";
		case COMBODSKIPANIM: return "combodata::SkipAnimX";
		case COMBODAKIMANIMY: return "combodata::SkipAnimY";
		case COMBODTILE: return "combodata::Tile";
		case COMBODTRIGBOSSPAL: return "combodata::TrigBossPal";
		case COMBODTRIGBUNNY: return "combodata::TrigBunny";
		case COMBODTRIGGERBUTTON: return "combodata::TrigButton[]";
		case COMBODTRIGCSETCHANGE: return "combodata::TrigCSetChange";
		case COMBODTRIGGERCHANGECMB: return "combodata::TrigChange";
		case COMBODTRIGGERCOOLDOWN: return "combodata::TrigCooldown";
		case COMBODTRIGGERCOPYCAT: return "combodata::TrigCopycat";
		case COMBODTRIGGERCTR: return "combodata::TrigCounter";
		case COMBODTRIGGERCTRAMNT: return "combodata::TrigCtrAmount";
		case COMBODTRIGDMAPLVL: return "combodata::TrigDMapLvl";
		case COMBODTRIGEXDOORDIR: return "combodata::TrigExDoorDir";
		case COMBODTRIGEXDOORIND: return "combodata::TrigExDoorIndex";
		case COMBODTRIGEXSTATE: return "combodata::TrigExState";
		case COMBODTRIGGERFLAGS2: return "combodata::TrigFlags[]";
		case COMBODTRIGGERGTIMER: return "combodata::TrigGStateTimer";
		case COMBODTRIGGERGENSCRIPT: return "combodata::TrigGenScript";
		case COMBODTRIGGERGSTATE: return "combodata::TrigGlobalState";
		case COMBODTRIGGERGROUP: return "combodata::TrigGroup";
		case COMBODTRIGGERGROUPVAL: return "combodata::TrigGroupVal";
		case COMBODTRIGGERITEM: return "combodata::TrigItem";
		case COMBODTRIGITEMJINX: return "combodata::TrigItemJinx";
		case COMBODTRIGLITEMS: return "combodata::TrigLItems";
		case COMBODTRIGGERLEVEL: return "combodata::TrigLevel";
		case COMBODTRIGGERLSTATE: return "combodata::TrigLevelState";
		case COMBODTRIGGERLIGHTBEAM: return "combodata::TrigLightBeam";
		case COMBODTRIGLVLPAL: return "combodata::TrigLvlPal";
		case COMBODTRIGGERPROX: return "combodata::TrigProximity";
		case COMBODTRIGPUSHTIME: return "combodata::TrigPushTime";
		case COMBODTRIGQUAKETIME: return "combodata::TrigQuakeTimer";
		case COMBODTRIGGERSFX: return "combodata::TrigSFX";
		case COMBODTRIGSHIELDJINX: return "combodata::TrigShieldJinx";
		case COMBODTRIGSPAWNENEMY: return "combodata::TrigSpawnEnemy";
		case COMBODTRIGSPAWNITEM: return "combodata::TrigSpawnItem";
		case COMBODTRIGITEMPICKUP: return "combodata::TrigSpawnItemPickup";
		case COMBODTRIGSTUN: return "combodata::TrigStun";
		case COMBODTRIGSWORDJINX: return "combodata::TrigSwordJinx";
		case COMBODTRIGGERTIMER: return "combodata::TrigTimer";
		case COMBODTRIGTINTB: return "combodata::TrigTintB";
		case COMBODTRIGTINTG: return "combodata::TrigTintG";
		case COMBODTRIGTINTR: return "combodata::TrigTintR";
		case COMBODTRIGWAVYTIME: return "combodata::TrigWavyTimer";
		case COMBODTRIGGERFLAGS: return "combodata::TriggerFlags[]";
		case COMBODTYPE: return "combodata::Type";
		case COMBODUSRFLAGS: return "combodata::UserFlags";
		case COMBODWALK: return "combodata::Walk";
		case COMBOXR: return "combodata::X";
		case COMBOYR: return "combodata::Y";
		case DIRECTORYSIZE: return "directory::Size";
		case DMAPDATAASUBSCRIPT: return "dmapdata::ASubScript";
		case DMAPDATASUBSCRA: return "dmapdata::ActiveSubscreen";
		case DMAPDATACHARTED: return "dmapdata::Charted[]";
		case DMAPDATACOMPASS: return "dmapdata::Compass";
		case DMAPDATACONTINUE: return "dmapdata::Continue";
		case DMAPDATADISABLEDITEMS: return "dmapdata::DisabledItems[]";
		case DMAPDATAFLAGS: return "dmapdata::Flags";
		case DMAPDATAFLAGARR: return "dmapdata::Flagset[]";
		case DMAPDATAGRID: return "dmapdata::Grid[]";
		case DMAPDATAID: return "dmapdata::ID";
		case DMAPINITD: return "dmapdata::InitD[]";
		case DMAPDATAINTROSTRINGID: return "dmapdata::IntroStringID";
		case DMAPDATALEVEL: return "dmapdata::Level";
		case DMAPDATAMIDI: return "dmapdata::MIDI";
		case DMAPDATAMAP: return "dmapdata::Map";
		case DMAPDATALARGEMAPCSET: return "dmapdata::MapCSet[]";
		case DMAPDATAMAPINITD: return "dmapdata::MapInitD[]";
		case DMAPDATAMAPSCRIPT: return "dmapdata::MapScript";
		case DMAPDATALARGEMAPTILE: return "dmapdata::MapTile[]";
		case DMAPDATAMINIMAPCSET: return "dmapdata::MiniMapCSet[]";
		case DMAPDATAMINIMAPTILE: return "dmapdata::MiniMapTile[]";
		case DMAPDATAMIRRDMAP: return "dmapdata::MirrorDMap";
		case DMAPDATAXFADEIN: return "dmapdata::MusicCrossfadeIn";
		case DMAPDATAXFADEOUT: return "dmapdata::MusicCrossfadeOut";
		case DMAPDATALOOPEND: return "dmapdata::MusicLoopEnd";
		case DMAPDATALOOPSTART: return "dmapdata::MusicLoopStart";
		case DMAPDATAMUISCTRACK: return "dmapdata::MusicTrack";
		case DMAPDATAOFFSET: return "dmapdata::Offset";
		case DMAPDATASUBSCRO: return "dmapdata::OverlaySubscreen";
		case DMAPDATAPSUBSCRIPT: return "dmapdata::PSubScript";
		case DMAPDATAPALETTE: return "dmapdata::Palette";
		case DMAPDATASUBSCRP: return "dmapdata::PassiveSubscreen";
		case DMAPSCRIPT: return "dmapdata::Script";
		case DMAPDATASIDEVIEW: return "dmapdata::Sideview";
		case DMAPDATASUBINITD: return "dmapdata::SubInitD[]";
		case DMAPDATATYPE: return "dmapdata::Type";
		case DROPSETCHANCES: return "dropsetdata::Chances[]";
		case DROPSETITEMS: return "dropsetdata::Items[]";
		case DROPSETNULLCHANCE: return "dropsetdata::NothingChance";
		case EWPNASPEED: return "eweapon::ASpeed";
		case EWPNANGLE: return "eweapon::Angle";
		case EWPNANGULAR: return "eweapon::Angular";
		case EWPNAUTOROTATE: return "eweapon::AutoRotate";
		case EWPNBEHIND: return "eweapon::Behind";
		case EWPNBURNLIGHTRADIUS: return "eweapon::BurnLightRadius[]";
		case EWPNCOLLDET: return "eweapon::CollDetection";
		case EWPNDEAD: return "eweapon::DeadState";
		case EWPNDEATHDROPSET: return "eweapon::DeathDropset";
		case EWPNDEATHITEM: return "eweapon::DeathItem";
		case EWPNDEATHIPICKUP: return "eweapon::DeathItemPFlags";
		case EWPNDEATHSFX: return "eweapon::DeathSFX";
		case EWPNDEATHSPRITE: return "eweapon::DeathSprite";
		case EWPNDEGANGLE: return "eweapon::DegAngle";
		case EWPNFLAGS: return "eweapon::Flags[]";
		case EWPNFLASH: return "eweapon::Flash";
		case EWPNFLASHCSET: return "eweapon::FlashCSet";
		case EWPNFRAME: return "eweapon::Frame";
		case EWPNINITD: return "eweapon::InitD[]";
		case EWPNLEVEL: return "eweapon::Level";
		case EWPNLIFTHEIGHT: return "eweapon::LiftHeight";
		case EWPNLIFTLEVEL: return "eweapon::LiftLevel";
		case EWPNLIFTTIME: return "eweapon::LiftTime";
		case EWPNFRAMES: return "eweapon::NumFrames";
		case EWPNOCSET: return "eweapon::OriginalCSet";
		case EWPNOTILE: return "eweapon::OriginalTile";
		case EWPNPARENT: return "eweapon::Parent";
		case EWPNPARENTUID: return "eweapon::ParentUID";
		case EWPNPOWER: return "eweapon::Power";
		case EWPNSCRIPT: return "eweapon::Script";
		case EWPNSPRITES: return "eweapon::Sprites[]";
		case EWPNSTEP: return "eweapon::Step";
		case EWPNTIMEOUT: return "eweapon::Timeout";
		case EWPNTOTALDYOFFS: return "eweapon::TotalDYOffset";
		case EWPNID: return "eweapon::Type";
		case EWEAPONSCRIPTUID: return "eweapon::UID";
		case EWPNUNBL: return "eweapon::Unblockable";
		case EWPNVX: return "eweapon::Vx";
		case EWPNVY: return "eweapon::Vy";
		case XD2: return "ffc::Ax";
		case YD2: return "ffc::Ay";
		case DATA: return "ffc::Data";
		case DELAY: return "ffc::Delay";
		case FFCHEIGHT: return "ffc::EffectHeight";
		case FFCWIDTH: return "ffc::EffectWidth";
		case FFFLAGSD: return "ffc::Flags[]";
		case FFCID: return "ffc::ID";
		case FFINITDD: return "ffc::InitD[]";
		case FFCLASTCHANGERX: return "ffc::LastChangerX";
		case FFCLASTCHANGERY: return "ffc::LastChangerY";
		case FFCLAYER: return "ffc::Layer";
		case FFLINK: return "ffc::Link";
		case FFSCRIPT: return "ffc::Script";
		case XD: return "ffc::Vx";
		case YD: return "ffc::Vy";
		case FILEEOF: return "file::EOF";
		case FILEERR: return "file::Error";
		case FILEPOS: return "file::Pos";
		case GENDATASIZE: return "genericdata::DataSize";
		case GENDATADATA: return "genericdata::Data[]";
		case GENDATAEVENTSTATE: return "genericdata::EventListen[]";
		case GENDATAEXITSTATE: return "genericdata::ExitState[]";
		case GENDATAINITD: return "genericdata::InitD[]";
		case GENDATARELOADSTATE: return "genericdata::ReloadState[]";
		case GENDATARUNNING: return "genericdata::Running";
		case IDATAFRAMES: return "itemdata::AFrames";
		case IDATAASPEED: return "itemdata::ASpeed";
		case IDATAAMOUNT: return "itemdata::Amount";
		case IDATAATTRIB: return "itemdata::Attributes[]";
		case IDATABUNNYABLE: return "itemdata::BunnyUsable";
		case IDATABURNINGLIGHTRAD: return "itemdata::BurnLightRadius[]";
		case IDATABURNINGSPR: return "itemdata::BurnSprites[]";
		case IDATACSET: return "itemdata::CSet";
		case IDATACOLLECTFLAGS: return "itemdata::CollectFlags";
		case IDATACOMBINE: return "itemdata::Combine";
		case IDATACONSTSCRIPT: return "itemdata::ConstantScript";
		case IDATAMAGCOST: return "itemdata::Cost";
		case IDATACOST2: return "itemdata::Cost2";
		case IDATACOSTCOUNTER: return "itemdata::CostCounter";
		case IDATACOSTCOUNTER2: return "itemdata::CostCounter2";
		case IDATAMAGICTIMER: return "itemdata::CostTimer";
		case IDATAMAGICTIMER2: return "itemdata::CostTimer2";
		case IDATACOUNTER: return "itemdata::Counter";
		case IDATAUSEDEF: return "itemdata::Defense";
		case IDATADELAY: return "itemdata::Delay";
		case IDATADOWNGRADE: return "itemdata::Downgrade";
		case IDATADRAWLAYER: return "itemdata::DrawLayer";
		case IDATADXOFS: return "itemdata::DrawXOffset";
		case IDATADYOFS: return "itemdata::DrawYOffset";
		case IDATADUPLICATES: return "itemdata::Duplicates";
		case IDATADURATION: return "itemdata::Duration";
		case IDATAEDIBLE: return "itemdata::Edible";
		case IDATAKEEP: return "itemdata::EquipmentItem";
		case IDATAFLAGS: return "itemdata::Flags[]";
		case IDATAFLASHCSET: return "itemdata::FlashCSet";
		case IDATAGAINLOWER: return "itemdata::GainLower";
		case IDATAGRADUAL: return "itemdata::Gradual";
		case IDATAHYSZ: return "itemdata::HitHeight";
		case IDATAHXSZ: return "itemdata::HitWidth";
		case IDATAHXOFS: return "itemdata::HitXOffset";
		case IDATAHYOFS: return "itemdata::HitYOffset";
		case IDATAHZSZ: return "itemdata::HitZHeight";
		case IDATAID: return "itemdata::ID";
		case IDATAINITDD: return "itemdata::InitD[]";
		case IDATAJINXIMMUNE: return "itemdata::JinxImmune";
		case IDATAJINXSWAP: return "itemdata::JinxSwapped";
		case IDATAKEEPOLD: return "itemdata::KeepOld";
		case IDATAATTRIB_L: return "itemdata::LAttributes[]";
		case IDATALEVEL: return "itemdata::Level";
		case IDATAMAX: return "itemdata::Max";
		case IDATASETMAX: return "itemdata::MaxIncrement";
		case IDATAMINHEARTS: return "itemdata::MinHearts";
		case IDATAMISC: return "itemdata::MiscFlags";
		case IDATAPSCRIPT: return "itemdata::PScript";
		case IDATAPSTRING: return "itemdata::PString";
		case IDATAPICKUP: return "itemdata::Pickup";
		case IDATAPICKUPLITEMLEVEL: return "itemdata::PickupLItemLevel";
		case IDATAPICKUPLITEMS: return "itemdata::PickupLItems";
		case IDATAPSOUND: return "itemdata::PickupSound";
		case IDATAPFLAGS: return "itemdata::PickupStringFlags";
		case IDATAPOWER: return "itemdata::Power";
		case IDATAWRANGE: return "itemdata::Range";
		case IDATARUPEECOST: return "itemdata::RupeeCost";
		case IDATASCRIPT: return "itemdata::Script";
		case IDATASSWIMDISABLED: return "itemdata::SideSwimDisabled";
		case IDATAOVERRIDEFL: return "itemdata::SizeFlags";
		case IDATASPRSCRIPT: return "itemdata::SpriteScript";
		case IDATASPRITE: return "itemdata::Sprites[]";
		case IDATATILE: return "itemdata::Tile";
		case IDATATILEH: return "itemdata::TileHeight";
		case IDATALTM: return "itemdata::TileMod";
		case IDATATILEW: return "itemdata::TileWidth";
		case IDATAFAMILY: return "itemdata::Type";
		case IDATAFLAGUNUSED: return "itemdata::Unused";
		case IDATAUSEBURNSPR: return "itemdata::UseBurnSprites";
		case IDATAUSESOUND: return "itemdata::UseSound";
		case IDATAUSESOUND2: return "itemdata::UseSound2";
		case IDATAVALIDATE: return "itemdata::Validate";
		case IDATAVALIDATE2: return "itemdata::Validate2";
		case IDATAUSEWPN: return "itemdata::Weapon";
		case IDATAWEAPXOFS: return "itemdata::WeaponDrawXOffset";
		case IDATAWEAPYOFS: return "itemdata::WeaponDrawYOffset";
		case IDATAWEAPZOFS: return "itemdata::WeaponDrawZOffset";
		case IDATAWEAPHYSZ: return "itemdata::WeaponHitHeight";
		case IDATAWEAPHXSZ: return "itemdata::WeaponHitWidth";
		case IDATAWEAPHXOFS: return "itemdata::WeaponHitXOffset";
		case IDATAWEAPHYOFS: return "itemdata::WeaponHitYOffset";
		case IDATAWEAPHZSZ: return "itemdata::WeaponHitZHeight";
		case IDATAWPNINITD: return "itemdata::WeaponInitD[]";
		case IDATAMISCD: return "itemdata::WeaponMisc[]";
		case IDATAWEAPONSCRIPT: return "itemdata::WeaponScript";
		case IDATAOVERRIDEFLWEAP: return "itemdata::WeaponSizeFlags";
		case IDATATILEHWEAP: return "itemdata::WeaponTileHeight";
		case IDATATILEWWEAP: return "itemdata::WeaponTileWidth";
		case ITEMACLK: return "itemsprite::AClock";
		case ITEMASPEED: return "itemsprite::ASpeed";
		case ITEMDELAY: return "itemsprite::Delay";
		case ITEMDROPPEDBY: return "itemsprite::DroppedBy";
		case ITEMFLASH: return "itemsprite::Flash";
		case ITEMFLASHCSET: return "itemsprite::FlashCSet";
		case ITEMFORCEGRAB: return "itemsprite::ForceGrab";
		case ITEMFRAME: return "itemsprite::Frame";
		case ITEMID: return "itemsprite::ID";
		case ITEMSPRITEINITD: return "itemsprite::InitD[]";
		case ITEMLEVEL: return "itemsprite::Level";
		case ITEMNOHOLDSOUND: return "itemsprite::NoHoldSound";
		case ITEMNOSOUND: return "itemsprite::NoSound";
		case ITEMFRAMES: return "itemsprite::NumFrames";
		case ITEMOTILE: return "itemsprite::OriginalTile";
		case ITEMPICKUP: return "itemsprite::Pickup";
		case ITEMPSTRING: return "itemsprite::PickupString";
		case ITEMPSTRINGFLAGS: return "itemsprite::PickupStringFlags";
		case ITEMSPRITESCRIPT: return "itemsprite::Script";
		case ITEMOVERRIDEFLAGS: return "itemsprite::SizeFlags";
		case ITEMFAMILY: return "itemsprite::Type";
		case ITEMSCRIPTUID: return "itemsprite::UID";
		case LWPNASPEED: return "lweapon::ASpeed";
		case LWPNANGLE: return "lweapon::Angle";
		case LWPNANGULAR: return "lweapon::Angular";
		case LWPNAUTOROTATE: return "lweapon::AutoRotate";
		case LWPNBEHIND: return "lweapon::Behind";
		case LWPNBURNLIGHTRADIUS: return "lweapon::BurnLightRadius[]";
		case LWPNCOLLDET: return "lweapon::CollDetection";
		case LWPNDEAD: return "lweapon::DeadState";
		case LWPNDEATHDROPSET: return "lweapon::DeathDropset";
		case LWPNDEATHITEM: return "lweapon::DeathItem";
		case LWPNDEATHIPICKUP: return "lweapon::DeathItemPFlags";
		case LWPNDEATHSFX: return "lweapon::DeathSFX";
		case LWPNDEATHSPRITE: return "lweapon::DeathSprite";
		case LWPNUSEDEFENCE: return "lweapon::Defense";
		case LWPNDEGANGLE: return "lweapon::DegAngle";
		case LWPNFLAGS: return "lweapon::Flags[]";
		case LWPNFLASH: return "lweapon::Flash";
		case LWPNFLASHCSET: return "lweapon::FlashCSet";
		case LWPNFRAME: return "lweapon::Frame";
		case LWPNINITD: return "lweapon::InitD[]";
		case LWPNLEVEL: return "lweapon::Level";
		case LWPNLIFTHEIGHT: return "lweapon::LiftHeight";
		case LWPNLIFTLEVEL: return "lweapon::LiftLevel";
		case LWPNLIFTTIME: return "lweapon::LiftTime";
		case LWPNFRAMES: return "lweapon::NumFrames";
		case LWPNOCSET: return "lweapon::OriginalCSet";
		case LWPNOTILE: return "lweapon::OriginalTile";
		case LWPNPARENT: return "lweapon::Parent";
		case LWPNPOWER: return "lweapon::Power";
		case LWPNSCRIPT: return "lweapon::Script";
		case LWPNSPECIAL: return "lweapon::Special";
		case LWPNSPRITES: return "lweapon::Sprites[]";
		case LWPNSTEP: return "lweapon::Step";
		case LWPNTIMEOUT: return "lweapon::Timeout";
		case LWPNTOTALDYOFFS: return "lweapon::TotalDYOffset";
		case LWPNID: return "lweapon::Type";
		case LWEAPONSCRIPTUID: return "lweapon::UID";
		case LWPNUNBL: return "lweapon::Unblockable";
		case LWPNVX: return "lweapon::Vx";
		case LWPNVY: return "lweapon::Vy";
		case LWPNUSEWEAPON: return "lweapon::Weapon";
		case MAPDATAOCEANSFX: return "mapdata::AmbientSFX";
		case MAPDATABOSSSFX: return "mapdata::BossSFX";
		case MAPDATACSENSITIVE: return "mapdata::CSensitive";
		case MAPDATACATCHALL: return "mapdata::Catchall";
		case MAPDATACOMBOCD: return "mapdata::ComboC[]";
		case MAPDATACOMBODD: return "mapdata::ComboD[]";
		case MAPDATACOMBOED: return "mapdata::ComboE[]";
		case MAPDATACOMBOFD: return "mapdata::ComboF[]";
		case MAPDATACOMBOID: return "mapdata::ComboI[]";
		case MAPDATACOMBOSD: return "mapdata::ComboS[]";
		case MAPDATACOMBOTD: return "mapdata::ComboT[]";
		case MAPDATAMISCD: return "mapdata::D[]";
		case MAPDATASCRDATASIZE: return "mapdata::DataSize";
		case MAPDATASCRDATA: return "mapdata::Data[]";
		case MAPDATADOORCOMBOSET: return "mapdata::DoorComboSet";
		case MAPDATADOOR: return "mapdata::Door[]";
		case MAPDATASCREENEFLAGSD: return "mapdata::EFlags[]";
		case MAPDATAENEMYFLAGS: return "mapdata::EnemyFlags";
		case MAPDATAENEMY: return "mapdata::Enemy[]";
		case MAPDATAENTRYX: return "mapdata::EntryX";
		case MAPDATAENTRYY: return "mapdata::EntryY";
		case MAPDATAEXSTATED: return "mapdata::ExState[]";
		case MAPDATAEXITDIR: return "mapdata::ExitDir";
		case MAPDATAFFXDELTA2: return "mapdata::FFCAx[]";
		case MAPDATAFFYDELTA2: return "mapdata::FFCAy[]";
		case MAPDATAFFCSET: return "mapdata::FFCCSet[]";
		case MAPDATAFFDATA: return "mapdata::FFCData[]";
		case MAPDATAFFDELAY: return "mapdata::FFCDelay[]";
		case MAPDATAFFEFFECTHEIGHT: return "mapdata::FFCEffectHeight[]";
		case MAPDATAFFEFFECTWIDTH: return "mapdata::FFCEffectWidth[]";
		case MAPDATAFFFLAGS: return "mapdata::FFCFlags[]";
		case MAPDATAFFLINK: return "mapdata::FFCLink[]";
		case MAPDATAFFINITIALISED: return "mapdata::FFCRunning[]";
		case MAPDATAFFSCRIPT: return "mapdata::FFCScript[]";
		case MAPDATAFFHEIGHT: return "mapdata::FFCTileHeight[]";
		case MAPDATAFFWIDTH: return "mapdata::FFCTileWidth[]";
		case MAPDATAFFXDELTA: return "mapdata::FFCVx[]";
		case MAPDATAFFYDELTA: return "mapdata::FFCVy[]";
		case MAPDATAFFX: return "mapdata::FFCX[]";
		case MAPDATAFFY: return "mapdata::FFCY[]";
		case MAPDATA_FLAG: return "mapdata::Flag[]";
		case MAPDATAFLAGS: return "mapdata::Flags[]";
		case MAPDATAEXDOOR: return "mapdata::GetExDoor()";
		case MAPDATAINTID: return "mapdata::GetFFCInitD()";
		case MAPDATAGUY: return "mapdata::Guy";
		case MAPDATAGUYCOUNT: return "mapdata::GuyCount";
		case MAPDATAHASITEM: return "mapdata::HasItem";
		case MAPDATAINITDARRAY: return "mapdata::InitD[]";
		case MAPDATAITEM: return "mapdata::Item";
		case MAPDATAHOLDUPSFX: return "mapdata::ItemSFX";
		case MAPDATAITEMX: return "mapdata::ItemX";
		case MAPDATAITEMY: return "mapdata::ItemY";
		case MAPDATALAYERINVIS: return "mapdata::LayerInvisible[]";
		case MAPDATALAYERMAP: return "mapdata::LayerMap[]";
		case MAPDATALAYEROPACITY: return "mapdata::LayerOpacity[]";
		case MAPDATALAYERSCREEN: return "mapdata::LayerScreen[]";
		case MAPDATALENSHIDES: return "mapdata::LensHides[]";
		case MAPDATALENSLAYER: return "mapdata::LensLayer";
		case MAPDATALENSSHOWS: return "mapdata::LensShows[]";
		case MAPDATASCREENMIDI: return "mapdata::MIDI";
		case MAPDATAMAP: return "mapdata::Map";
		case MAPDATAPATH: return "mapdata::MazePath[]";
		case MAPDATANEXTMAP: return "mapdata::NextMap";
		case MAPDATANEXTSCREEN: return "mapdata::NextScreen";
		case MAPDATANOCARRY: return "mapdata::NoCarry";
		case MAPDATANORESET: return "mapdata::NoReset";
		case MAPDATANUMFF: return "mapdata::NumFFCs[]";
		case MAPDATACOLOUR: return "mapdata::Palette";
		case MAPDATAPATTERN: return "mapdata::Pattern";
		case MAPDATAREGIONID: return "mapdata::RegionID";
		case MAPDATAROOM: return "mapdata::RoomType";
		case MAPDATASCREENFLAGSD: return "mapdata::SFlags[]";
		case MAPDATASCREEN: return "mapdata::Screen";
		case MAPDATASCRIPT: return "mapdata::Script";
		case MAPDATASCRIPTDRAWS: return "mapdata::ScriptDraws[]";
		case MAPDATASECRETCSET: return "mapdata::SecretCSet[]";
		case MAPDATASECRETCOMBO: return "mapdata::SecretCombo[]";
		case MAPDATASECRETFLAG: return "mapdata::SecretFlags[]";
		case MAPDATASECRETSFX: return "mapdata::SecretSFX";
		case MAPDATASIDEWARPDMAP: return "mapdata::SideWarpDMap[]";
		case MAPDATASIDEWARPID: return "mapdata::SideWarpID[]";
		case MAPDATASIDEWARPINDEX: return "mapdata::SideWarpIndex";
		case MAPDATASIDEWARPOVFLAGS: return "mapdata::SideWarpOverlay[]";
		case MAPDATASWARPRETSQR: return "mapdata::SideWarpReturnSquare[]";
		case MAPDATASIDEWARPSC: return "mapdata::SideWarpScreen[]";
		case MAPDATASIDEWARPTYPE: return "mapdata::SideWarpType[]";
		case MAPDATASTAIRX: return "mapdata::StairsX";
		case MAPDATASTAIRY: return "mapdata::StairsY";
		case MAPDATASCREENSTATED: return "mapdata::State[]";
		case MAPDATASTRING: return "mapdata::String";
		case MAPDATATILEWARPDMAP: return "mapdata::TileWarpDMap[]";
		case MAPDATATILEWARPOVFLAGS: return "mapdata::TileWarpOverlay[]";
		case MAPDATATWARPRETSQR: return "mapdata::TileWarpReturnSquare[]";
		case MAPDATATILEWARPSCREEN: return "mapdata::TileWarpScreen[]";
		case MAPDATATILEWARPTYPE: return "mapdata::TileWarpType[]";
		case MAPDATATIMEDWARPTICS: return "mapdata::TimedWarpTimer";
		case MAPDATAUNDERCSET: return "mapdata::UnderCSet";
		case MAPDATAUNDERCOMBO: return "mapdata::UnderCombo";
		case MAPDATAVALID: return "mapdata::Valid";
		case MAPDATAWARPARRIVALX: return "mapdata::WarpArrivalX";
		case MAPDATAWARPARRIVALY: return "mapdata::WarpArrivalY";
		case MAPDATAWARPRETX: return "mapdata::WarpReturnX[]";
		case MAPDATAWARPRETY: return "mapdata::WarpReturnY[]";
		case MESSAGEDATACSET: return "messagedata::CSet";
		case MESSAGEDATAFLAGS: return "messagedata::Flag";
		case MESSAGEDATAFLAGSARR: return "messagedata::Flags[]";
		case MESSAGEDATAFONT: return "messagedata::Font";
		case MESSAGEDATAHSPACE: return "messagedata::HSpace";
		case MESSAGEDATAH: return "messagedata::Height";
		case MESSAGEDATATEXTLEN: return "messagedata::Length";
		case MESSAGEDATALISTPOS: return "messagedata::ListPosition";
		case MESSAGEDATAMARGINS: return "messagedata::Margins[]";
		case MESSAGEDATANEXT: return "messagedata::Next";
		case MESSAGEDATAPORTCSET: return "messagedata::PortraitCSet";
		case MESSAGEDATAPORTTILE: return "messagedata::PortraitTile";
		case MESSAGEDATAPORTHEI: return "messagedata::PortraitTileHeight";
		case MESSAGEDATAPORTWID: return "messagedata::PortraitTileWidth";
		case MESSAGEDATAPORTX: return "messagedata::PortraitX";
		case MESSAGEDATAPORTY: return "messagedata::PortraitY";
		case MESSAGEDATASFX: return "messagedata::Sound";
		case MESSAGEDATATEXTHEI: return "messagedata::TextHeight";
		case MESSAGEDATATEXTWID: return "messagedata::TextWidth";
		case MESSAGEDATATILE: return "messagedata::Tile";
		case MESSAGEDATATRANS: return "messagedata::Transparent";
		case MESSAGEDATAVSPACE: return "messagedata::VSpace";
		case MESSAGEDATAW: return "messagedata::Width";
		case MESSAGEDATAX: return "messagedata::X";
		case MESSAGEDATAY: return "messagedata::Y";
		case NPCFRAMERATE: return "npc::ASpeed";
		case NPCDD: return "npc::Attributes[]";
		case NPCBEHAVIOUR: return "npc::BFlags[]";
		case NPCBOSSPAL: return "npc::BossPal";
		case NPCCOLLDET: return "npc::CollDetection";
		case NPCCOLLISION: return "npc::Collision()";
		case NPCISCORE: return "npc::Core";
		case NPCDP: return "npc::Damage";
		case NPCDEATHSPR: return "npc::DeathSprite";
		case NPCDEFENSED: return "npc::Defense[]";
		case NPCFADING: return "npc::Fading";
		case NPCFLASHINGCSET: return "npc::FlashingCSet";
		case NPCFLICKERCOLOR: return "npc::FlickerColor";
		case NPCFLICKERTRANSP: return "npc::FlickerTransparencyPasses";
		case NPCFRAME: return "npc::Frame";
		case NPCFROZEN: return "npc::Frozen";
		case NPCFROZENCSET: return "npc::FrozenCSet";
		case NPCFROZENTILE: return "npc::FrozenTile";
		case NPCHP: return "npc::HP";
		case NPCHALTCLK: return "npc::Halt";
		case NPCHALTRATE: return "npc::Haltrate";
		case NPCHASITEM: return "npc::HasItem";
		case NPCHITBY: return "npc::HitBy[]";
		case NPCHITDIR: return "npc::HitDir";
		case NPCHOMING: return "npc::Homing";
		case NPCHUNGER: return "npc::Hunger";
		case NPCID: return "npc::ID";
		case NPCIMMORTAL: return "npc::Immortal";
		case NPCINITD: return "npc::InitD[]";
		case NPCCANFLICKER: return "npc::InvFlicker";
		case NPCINVINC: return "npc::InvFrames";
		case NPCSUPERMAN: return "npc::Invincible";
		case NPCITEMSET: return "npc::ItemSet";
		case NPCLINEDUP: return "npc::LinedUp()";
		case NPCMFLAGS: return "npc::MiscFlags";
		case NPCMOVESTATUS: return "npc::MoveStatus";
		case NPCNOSCRIPTKB: return "npc::NoScriptKnockback";
		case NPCNOSLIDE: return "npc::NoSlide";
		case NPCOTILE: return "npc::OriginalTile";
		case NPCPARENTUID: return "npc::ParentUID";
		case NPCRANDOM: return "npc::Random";
		case NPCRATE: return "npc::Rate";
		case NPCRINGLEAD: return "npc::Ringleader";
		case NPCBGSFX: return "npc::SFX";
		case NPCSCRIPT: return "npc::Script";
		case NPCSCRDEFENSED: return "npc::ScriptDefense[]";
		case NPCSHIELD: return "npc::Shield[]";
		case NPCSLIDECLK: return "npc::SlideClock";
		case NPCKNOCKBACKSPEED: return "npc::SlideSpeed";
		case NPCSPAWNSPR: return "npc::SpawnSprite";
		case NPCSTEP: return "npc::Step";
		case NPCSTUN: return "npc::Stun";
		case NPCSUBMERGED: return "npc::Submerged()";
		case NPCTOTALDYOFFS: return "npc::TotalDYOffset";
		case NPCTYPE: return "npc::Type";
		case NPCSCRIPTUID: return "npc::UID";
		case NPCWEAPON: return "npc::Weapon";
		case NPCWDP: return "npc::WeaponDamage";
		case NPCFIRESFX: return "npc::WeaponSFX";
		case NPCWEAPSPRITE: return "npc::WeaponSprite";
		case NPCDATAANIM: return "npcdata::Anim";
		case NPCDATAATTRIBUTE: return "npcdata::Attributes[]";
		case NPCDATABEHAVIOUR: return "npcdata::BFlags[]";
		case NPCDATABGSFX: return "npcdata::BGSFX";
		case NPCDATACSET: return "npcdata::CSet";
		case NPCDATADEATHSFX: return "npcdata::DeathSFX";
		case NPCDDEATHSPR: return "npcdata::DeathSprite";
		case NPCDATADEFENSE: return "npcdata::Defense[]";
		case NPCDATAXOFS: return "npcdata::DrawXOffset";
		case NPCDATAYOFS: return "npcdata::DrawYOffset";
		case NPCDATAZOFS: return "npcdata::DrawZOffset";
		case NPCDATADROPSET: return "npcdata::Dropset";
		case NPCDATAEANIM: return "npcdata::ExAnim";
		case NPCDATAEFRAMERATE: return "npcdata::ExFramerate";
		case NPCDATAEHEIGHT: return "npcdata::ExHeight";
		case NPCDATAETILE: return "npcdata::ExTile";
		case NPCDATAEWIDTH: return "npcdata::ExWidth";
		case NPCDATAFLAG: return "npcdata::Flags[]";
		case NPCDATAFRAMERATE: return "npcdata::Framerate";
		case NPCDATAFROZENCSET: return "npcdata::FrozenCSet";
		case NPCDATAFROZENTILE: return "npcdata::FrozenTile";
		case NPCDATAHP: return "npcdata::HP";
		case NPCDATAHALT: return "npcdata::Haltrate";
		case NPCDATAHEIGHT: return "npcdata::Height";
		case NPCDATAHITHEIGHT: return "npcdata::HitHeight";
		case NPCDATAHITSFX: return "npcdata::HitSFX";
		case NPCDATAHITWIDTH: return "npcdata::HitWidth";
		case NPCDATAHXOFS: return "npcdata::HitXOffset";
		case NPCDATAHYOFS: return "npcdata::HitYOffset";
		case NPCDATAHITZ: return "npcdata::HitZHeight";
		case NPCDATAHOMING: return "npcdata::Homing";
		case NPCDATAHUNGER: return "npcdata::Hunger";
		case NPCDATAINITD: return "npcdata::InitD[]";
		case NPCDATARANDOM: return "npcdata::Random";
		case NPCDATASHEIGHT: return "npcdata::SHeight";
		case NPCDATASTILE: return "npcdata::STile";
		case NPCDATASWIDTH: return "npcdata::SWidth";
		case NPCDATASCRIPT: return "npcdata::Script";
		case NPCDSHADOWSPR: return "npcdata::ShadowSprite";
		case NPCDATASHIELD: return "npcdata::Shield[]";
		case NPCDATASIZEFLAG: return "npcdata::SizeFlags";
		case NPCDSPAWNSPR: return "npcdata::SpawnSprite";
		case NPCDATASTEP: return "npcdata::Step";
		case NPCDATATILE: return "npcdata::Tile";
		case NPCDATATILEHEIGHT: return "npcdata::TileHeight";
		case NPCDATATILEWIDTH: return "npcdata::TileWidth";
		case NPCDATATOUCHDAMAGE: return "npcdata::TouchDamage";
		case NPCDATAFAMILY: return "npcdata::Type";
		case NPCDATAWEAPON: return "npcdata::Weapon";
		case NPCDATAWEAPONDAMAGE: return "npcdata::WeaponDamage";
		case NPCDATAWEAPONINITD: return "npcdata::WeaponInitD[]";
		case NPCDATAFIRESFX: return "npcdata::WeaponSFX";
		case NPCDATAWEAPONSCRIPT: return "npcdata::WeaponScript";
		case NPCDATAWPNSPRITE: return "npcdata::WeaponSprite";
		case NPCDATAWIDTH: return "npcdata::Width";
		case PALDATAB: return "paldata::B[]";
		case PALDATACOLOR: return "paldata::Color[]";
		case PALDATAG: return "paldata::G[]";
		case PALDATAR: return "paldata::R[]";
		case PORTALACLK: return "portal::AClk";
		case PORTALAFRM: return "portal::AFrame";
		case PORTALASPD: return "portal::ASpeed";
		case PORTALCLOSEDIS: return "portal::CloseDisabled";
		case PORTALDMAP: return "portal::DMap";
		case PORTALFRAMES: return "portal::Frames";
		case PORTALOTILE: return "portal::OriginalTile";
		case PORTALSAVED: return "portal::SavedPortal";
		case PORTALSCREEN: return "portal::Screen";
		case PORTALWARPVFX: return "portal::WarpEffect";
		case PORTALWARPSFX: return "portal::WarpSFX";
		case PORTALX: return "portal::X";
		case PORTALY: return "portal::Y";
		case SAVEDPORTALDESTDMAP: return "savedportal::DestDMap";
		case SAVEDPORTALDSTSCREEN: return "savedportal::DestScreen";
		case SAVEDPORTALPORTAL: return "savedportal::Portal";
		case SAVEDPORTALSPRITE: return "savedportal::Sprite";
		case SAVEDPORTALSRCDMAP: return "savedportal::SrcDMap";
		case SAVEDPORTALSRCSCREEN: return "savedportal::SrcScreen";
		case SAVEDPORTALWARPVFX: return "savedportal::WarpEffect";
		case SAVEDPORTALWARPSFX: return "savedportal::WarpSFX";
		case SAVEDPORTALX: return "savedportal::X";
		case SAVEDPORTALY: return "savedportal::Y";
		case SHOPDATAHASITEM: return "shopdata::HasItem[]";
		case SHOPDATAITEM: return "shopdata::Item[]";
		case SHOPDATAPRICE: return "shopdata::Price[]";
		case SHOPDATASTRING: return "shopdata::String[]";
		case SHOPDATATYPE: return "shopdata::Type";
		case SPRITE_ENGINE_ANIMATE: return "sprite::Animation";
		case SPRITE_CSET: return "sprite::CSet";
		case SPRITE_DIR: return "sprite::Dir";
		case SPRITE_DRAW_STYLE: return "sprite::DrawStyle";
		case SPRITE_X_OFFSET: return "sprite::DrawXOffset";
		case SPRITE_Y_OFFSET: return "sprite::DrawYOffset";
		case SPRITE_Z_OFFSET: return "sprite::DrawZOffset";
		case SPRITE_DROWN_CMB: return "sprite::DrownCombo";
		case SPRITE_DROWN_CLK: return "sprite::Drowning";
		case SPRITE_EXTEND: return "sprite::Extend";
		case SPRITE_FAKE_JUMP: return "sprite::FakeJump";
		case SPRITE_FAKE_Z: return "sprite::FakeZ";
		case SPRITE_FALL_CMB: return "sprite::FallCombo";
		case SPRITE_FALL_CLK: return "sprite::Falling";
		case SPRITE_FLIP: return "sprite::Flip";
		case SPRITE_GRAVITY: return "sprite::Gravity";
		case SPRITE_HIT_HEIGHT: return "sprite::HitHeight";
		case SPRITE_HIT_WIDTH: return "sprite::HitWidth";
		case SPRITE_HIT_OFFSET_X: return "sprite::HitXOffset";
		case SPRITE_HIT_OFFSET_Y: return "sprite::HitYOffset";
		case SPRITE_HIT_ZHEIGHT: return "sprite::HitZHeight";
		case SPRITE_JUMP: return "sprite::Jump";
		case SPRITE_LIGHT_RADIUS: return "sprite::LightRadius";
		case SPRITE_LIGHT_SHAPE: return "sprite::LightShape";
		case SPRITE_MISCD: return "sprite::Misc[]";
		case SPRITE_MOVE_FLAGS: return "sprite::MoveFlags[]";
		case SPRITE_ROTATION: return "sprite::Rotation";
		case SPRITE_SCALE: return "sprite::Scale";
		case SPRITE_SCRIPT_FLIP: return "sprite::ScriptFlip";
		case SPRITE_SCRIPT_TILE: return "sprite::ScriptTile";
		case SPRITE_SHADOW_SPR: return "sprite::ShadowSprite";
		case SPRITE_SHADOW_XOFS: return "sprite::ShadowXOffset";
		case SPRITE_SHADOW_YOFS: return "sprite::ShadowYOffset";
		case SPRITE_SPAWN_SCREEN: return "sprite::SpawnScreen";
		case SPRITE_SWHOOKED: return "sprite::SwitchHooked";
		case SPRITE_TILE: return "sprite::Tile";
		case SPRITE_TILE_H: return "sprite::TileHeight";
		case SPRITE_TILE_W: return "sprite::TileWidth";
		case SPRITE_X: return "sprite::X";
		case SPRITE_Y: return "sprite::Y";
		case SPRITE_Z: return "sprite::Z";
		case SPRITEDATACSETS: return "spritedata::CSet";
		case SPRITEDATAFLAGS: return "spritedata::Flags[]";
		case SPRITEDATAFLCSET: return "spritedata::FlashCSet";
		case SPRITEDATAFRAMES: return "spritedata::Frames";
		case SPRITEDATAID: return "spritedata::ID";
		case SPRITEDATAMISC: return "spritedata::Misc";
		case SPRITEDATASPEED: return "spritedata::Speed";
		case SPRITEDATATILE: return "spritedata::Tile";
		case SPRITEDATATYPE: return "spritedata::Type";
		case STACKFULL: return "stack::Full";
		case STACKSIZE: return "stack::Size";
		case SUBDATABTNLEFT: return "subscreendata::BtnPageLeft[]";
		case SUBDATABTNRIGHT: return "subscreendata::BtnPageRight[]";
		case SUBDATACURPG: return "subscreendata::CurPage";
		case SUBDATACURSORPOS: return "subscreendata::CursorPos";
		case SUBDATAFLAGS: return "subscreendata::Flags[]";
		case SUBDATAINITD: return "subscreendata::InitD[]";
		case SUBDATANUMPG: return "subscreendata::NumPages";
		case SUBDATAPAGES: return "subscreendata::Pages[]";
		case SUBDATASCRIPT: return "subscreendata::Script";
		case SUBDATASELECTORASPD: return "subscreendata::SelectorASpeed[]";
		case SUBDATASELECTORCSET: return "subscreendata::SelectorCSet[]";
		case SUBDATASELECTORDELAY: return "subscreendata::SelectorDelay[]";
		case SUBDATASELECTORDSTH: return "subscreendata::SelectorDestH";
		case SUBDATASELECTORDSTW: return "subscreendata::SelectorDestW";
		case SUBDATASELECTORDSTX: return "subscreendata::SelectorDestX";
		case SUBDATASELECTORDSTY: return "subscreendata::SelectorDestY";
		case SUBDATASELECTORFLASHCSET: return "subscreendata::SelectorFlashCSet[]";
		case SUBDATASELECTORFRM: return "subscreendata::SelectorFrames[]";
		case SUBDATASELECTORHEI: return "subscreendata::SelectorHei[]";
		case SUBDATASELECTORTILE: return "subscreendata::SelectorTile[]";
		case SUBDATASELECTORWID: return "subscreendata::SelectorWid[]";
		case SUBDATATRANSARGS: return "subscreendata::TransArgs[]";
		case SUBDATATRANSCLK: return "subscreendata::TransClock";
		case SUBDATATRANSFLAGS: return "subscreendata::TransFlags[]";
		case SUBDATATRANSFROMPG: return "subscreendata::TransFromPage";
		case SUBDATATRANSLEFTARGS: return "subscreendata::TransLeftArgs[]";
		case SUBDATATRANSLEFTFLAGS: return "subscreendata::TransLeftFlags[]";
		case SUBDATATRANSLEFTSFX: return "subscreendata::TransLeftSFX";
		case SUBDATATRANSLEFTTY: return "subscreendata::TransLeftType";
		case SUBDATATRANSRIGHTARGS: return "subscreendata::TransRightArgs[]";
		case SUBDATATRANSRIGHTFLAGS: return "subscreendata::TransRightFlags[]";
		case SUBDATATRANSRIGHTSFX: return "subscreendata::TransRightSFX";
		case SUBDATATRANSRIGHTTY: return "subscreendata::TransRightType";
		case SUBDATATRANSTOPG: return "subscreendata::TransToPage";
		case SUBDATATRANSTY: return "subscreendata::TransType";
		case SUBDATATYPE: return "subscreendata::Type";
		case SUBPGCURSORPOS: return "subscreenpage::CursorPos";
		case SUBPGINDEX: return "subscreenpage::Index";
		case SUBPGNUMWIDG: return "subscreenpage::NumWidgets";
		case SUBPGSUBDATA: return "subscreenpage::SubData";
		case SUBPGWIDGETS: return "subscreenpage::Widgets[]";
		case SUBWIDGTY_ALIGN: return "subscreenwidget::Align";
		case SUBWIDGTY_ANIMVAL: return "subscreenwidget::AnimVal";
		case SUBWIDGBTNPG: return "subscreenwidget::BtnPageChange[]";
		case SUBWIDGBTNPRESS: return "subscreenwidget::BtnPressScript[]";
		case SUBWIDGTY_BUTTON: return "subscreenwidget::Button";
		case SUBWIDGTY_CSET: return "subscreenwidget::CSet[]";
		case SUBWIDGTY_COLOR_BG: return "subscreenwidget::ColorBG";
		case SUBWIDGTY_COLOR_CMPBLNK: return "subscreenwidget::ColorCompassBlink";
		case SUBWIDGTY_COLOR_CMPOFF: return "subscreenwidget::ColorCompassOff";
		case SUBWIDGTY_COLOR_FILL: return "subscreenwidget::ColorFill";
		case SUBWIDGTY_COLOR_BG2: return "subscreenwidget::ColorFullBG";
		case SUBWIDGTY_COLOR_SHD2: return "subscreenwidget::ColorFullShadow";
		case SUBWIDGTY_COLOR_TXT2: return "subscreenwidget::ColorFullText";
		case SUBWIDGTY_COLOR_OLINE: return "subscreenwidget::ColorOutline";
		case SUBWIDGTY_COLOR_PLAYER: return "subscreenwidget::ColorPlayer";
		case SUBWIDGTY_COLOR_ROOM: return "subscreenwidget::ColorRoom";
		case SUBWIDGTY_COLOR_SHD: return "subscreenwidget::ColorShadow";
		case SUBWIDGTY_COLOR_TXT: return "subscreenwidget::ColorText";
		case SUBWIDGTY_CONTAINER: return "subscreenwidget::Container";
		case SUBWIDGTY_CORNER: return "subscreenwidget::Corner[]";
		case SUBWIDGTY_COSTIND: return "subscreenwidget::CostIndex";
		case SUBWIDGTY_COUNTERS: return "subscreenwidget::Counter[]";
		case SUBWIDGTY_DELAY: return "subscreenwidget::Delay";
		case SUBWIDG_DISPH: return "subscreenwidget::DispH";
		case SUBWIDG_DISPW: return "subscreenwidget::DispW";
		case SUBWIDG_DISPX: return "subscreenwidget::DispX";
		case SUBWIDG_DISPY: return "subscreenwidget::DispY";
		case SUBWIDGDISPITM: return "subscreenwidget::DisplayItem";
		case SUBWIDGEQPITM: return "subscreenwidget::EquipItem";
		case SUBWIDGFLAG: return "subscreenwidget::Flags[]";
		case SUBWIDGTY_FLIP: return "subscreenwidget::Flip";
		case SUBWIDGTY_FONT: return "subscreenwidget::Font";
		case SUBWIDGTY_FRAMECSET: return "subscreenwidget::FrameCSet";
		case SUBWIDGTY_FRAMETILE: return "subscreenwidget::FrameTile";
		case SUBWIDGTY_FRAMES: return "subscreenwidget::Frames";
		case SUBWIDGTY_GAUGE_HEI: return "subscreenwidget::GaugeHei";
		case SUBWIDGTY_GAUGE_WID: return "subscreenwidget::GaugeWid";
		case SUBWIDGGENFLAG: return "subscreenwidget::GenFlags[]";
		case SUBWIDGTY_GRIDX: return "subscreenwidget::GridX";
		case SUBWIDGTY_GRIDY: return "subscreenwidget::GridY";
		case SUBWIDGH: return "subscreenwidget::H";
		case SUBWIDGTY_HSPACE: return "subscreenwidget::HSpace";
		case SUBWIDGINDEX: return "subscreenwidget::Index";
		case SUBWIDGTY_INFCHAR: return "subscreenwidget::InfiniteChar";
		case SUBWIDGTY_INFITM: return "subscreenwidget::InfiniteItem";
		case SUBWIDGTY_ITEMID: return "subscreenwidget::ItemID";
		case SUBWIDGTY_ITEMCLASS: return "subscreenwidget::ItemType";
		case SUBWIDGTY_LITEMS: return "subscreenwidget::LItems";
		case SUBWIDGTY_MAXDIG: return "subscreenwidget::MaxDigits";
		case SUBWIDGTY_MINDIG: return "subscreenwidget::MinDigits";
		case SUBWIDGTY_NUMBER: return "subscreenwidget::Number";
		case SUBWIDGPAGE: return "subscreenwidget::Page";
		case SUBWIDGPGMODE: return "subscreenwidget::PageMode";
		case SUBWIDGTRANSPGARGS: return "subscreenwidget::PageTransArgs[]";
		case SUBWIDGTRANSPGFLAGS: return "subscreenwidget::PageTransFlags[]";
		case SUBWIDGTRANSPGSFX: return "subscreenwidget::PageTransSFX";
		case SUBWIDGTRANSPGTY: return "subscreenwidget::PageTransType";
		case SUBWIDGTY_PERCONTAINER: return "subscreenwidget::PerContainer";
		case SUBWIDGTY_PIECECSET: return "subscreenwidget::PieceCSet";
		case SUBWIDGTY_PIECETILE: return "subscreenwidget::PieceTile";
		case SUBWIDGPOS: return "subscreenwidget::Pos";
		case SUBWIDGPOSES: return "subscreenwidget::PosDirs[]";
		case SUBWIDGPRESSINITD: return "subscreenwidget::PressInitD[]";
		case SUBWIDGPRESSSCRIPT: return "subscreenwidget::PressScript";
		case SUBWIDGREQCOUNTER: return "subscreenwidget::RequiredCounter";
		case SUBWIDGREQCOUNTERCOND: return "subscreenwidget::RequiredCounterCond";
		case SUBWIDGREQCOUNTERVAL: return "subscreenwidget::RequiredCounterValue";
		case SUBWIDGREQLITEMLEVEL: return "subscreenwidget::RequiredLItemLevel";
		case SUBWIDGREQLITEMS: return "subscreenwidget::RequiredLItems";
		case SUBWIDGREQOWNITEMS: return "subscreenwidget::RequiredOwnedItems[]";
		case SUBWIDGREQUNOWNITEMS: return "subscreenwidget::RequiredUnownedItems[]";
		case SUBWIDGREQSCRIPTDISABLED: return "subscreenwidget::ScriptDisabled";
		case SUBWIDGSELECTORASPD: return "subscreenwidget::SelectorASpeed[]";
		case SUBWIDGSELECTORCSET: return "subscreenwidget::SelectorCSet[]";
		case SUBWIDGSELECTORDELAY: return "subscreenwidget::SelectorDelay[]";
		case SUBWIDGSELECTORDSTH: return "subscreenwidget::SelectorDestH";
		case SUBWIDGSELECTORDSTW: return "subscreenwidget::SelectorDestW";
		case SUBWIDGSELECTORDSTX: return "subscreenwidget::SelectorDestX";
		case SUBWIDGSELECTORDSTY: return "subscreenwidget::SelectorDestY";
		case SUBWIDGSELECTORFLASHCSET: return "subscreenwidget::SelectorFlashCSet[]";
		case SUBWIDGSELECTORFRM: return "subscreenwidget::SelectorFrames[]";
		case SUBWIDGSELECTORHEI: return "subscreenwidget::SelectorHei[]";
		case SUBWIDGSELECTORTILE: return "subscreenwidget::SelectorTile[]";
		case SUBWIDGSELECTORWID: return "subscreenwidget::SelectorWid[]";
		case SUBWIDGTY_SHADOWTY: return "subscreenwidget::ShadowType";
		case SUBWIDGTY_SHOWDRAIN: return "subscreenwidget::ShowDrain";
		case SUBWIDGTY_SPEED: return "subscreenwidget::Speed";
		case SUBWIDGTY_TABSIZE: return "subscreenwidget::TabSize";
		case SUBWIDGPGTARG: return "subscreenwidget::TargetPage";
		case SUBWIDGTY_TILE: return "subscreenwidget::Tile[]";
		case SUBWIDGTYPE: return "subscreenwidget::Type";
		case SUBWIDGTY_UNITS: return "subscreenwidget::Units";
		case SUBWIDGTY_VSPACE: return "subscreenwidget::VSpace";
		case SUBWIDGPOSFLAG: return "subscreenwidget::VisibleFlags[]";
		case SUBWIDGW: return "subscreenwidget::W";
		case SUBWIDGX: return "subscreenwidget::X";
		case SUBWIDGY: return "subscreenwidget::Y";
		case WEBSOCKET_HAS_MESSAGE: return "websocket::HasMessage";
		case WEBSOCKET_MESSAGE_TYPE: return "websocket::MessageType";
		case WEBSOCKET_STATE: return "websocket::State";
		case WEBSOCKET_URL: return "websocket::URL";

        // The following are all retired ZASM registers.

        case EWPNCSET: return "eweapon::CSet";
        case EWPNDIR: return "eweapon::Dir";
        case EWPNDRAWTYPE: return "eweapon::DrawStyle";
        case EWPNDROWNCLK: return "eweapon::Drowning";
        case EWPNDROWNCMB: return "eweapon::DrownCombo";
        case EWPNENGINEANIMATE: return "eweapon::Animation";
        case EWPNEXTEND: return "eweapon::Extend";
        case EWPNFAKEJUMP: return "eweapon::FakeJump";
        case EWPNFAKEZ: return "eweapon::FakeZ";
        case EWPNFALLCLK: return "eweapon::Falling";
        case EWPNFALLCMB: return "eweapon::FallCombo";
        case EWPNFLIP: return "eweapon::Flip";
        case EWPNGLOWRAD: return "eweapon::LightRadius";
        case EWPNGLOWSHP: return "eweapon::LightShape";
        case EWPNGRAVITY: return "eweapon::Gravity";
        case EWPNHXOFS: return "eweapon::HitXOffset";
        case EWPNHXSZ: return "eweapon::HitWidth";
        case EWPNHYOFS: return "eweapon::HitYOffset";
        case EWPNHYSZ: return "eweapon::HitHeight";
        case EWPNHZSZ: return "eweapon::HitZHeight";
        case EWPNJUMP: return "eweapon::Jump";
        case EWPNMISCD: return "eweapon::Misc[]";
        case EWPNMOVEFLAGS: return "eweapon::MoveFlags[]";
        case EWPNROTATION: return "eweapon::Rotation";
        case EWPNSCALE: return "eweapon::Scale";
        case EWPNSCRIPTFLIP: return "eweapon::ScriptFlip";
        case EWPNSCRIPTTILE: return "eweapon::ScriptTile";
        case EWPNSHADOWSPR: return "eweapon::ShadowSprite";
        case EWPNSHADOWXOFS: return "eweapon::ShadowXOffset";
        case EWPNSHADOWYOFS: return "eweapon::ShadowYOffset";
        case EWPNTILE: return "eweapon::Tile";
        case EWPNTXSZ: return "eweapon::TileWidth";
        case EWPNTYSZ: return "eweapon::TileHeight";
        case EWPNX: return "eweapon::X";
        case EWPNXOFS: return "eweapon::DrawXOffset";
        case EWPNY: return "eweapon::Y";
        case EWPNYOFS: return "eweapon::DrawYOffset";
        case EWPNZ: return "eweapon::Z";
        case EWPNZOFS: return "eweapon::DrawZOffset";
        case EWSWHOOKED: return "eweapon::SwitchHooked";
        case FCSET: return "ffc::CSet";
        case FFMISCD: return "ffc::Misc[]";
        case FFTHEIGHT: return "ffc::TileHeight";
        case FFTWIDTH: return "ffc::TileWidth";
        case FX: return "ffc::X";
        case FY: return "ffc::Y";
        case HERODROWNCLK: return "Hero->Drowning";
        case HERODROWNCMB: return "Hero->DrownCombo";
        case HEROFAKEJUMP: return "Hero->FakeJump";
        case HEROFAKEZ: return "Hero->FakeZ";
        case HEROFALLCLK: return "Hero->Falling";
        case HEROFALLCMB: return "Hero->FallCombo";
        case HEROMOVEFLAGS: return "Hero->MoveFlags[]";
        case HEROSHADOWXOFS: return "Hero->ShadowXOffset";
        case HEROSHADOWYOFS: return "Hero->ShadowYOffset";
        case ITEMCSET: return "itemsprite::CSet";
        case ITEMDIR: return "itemsprite::Dir";
        case ITEMDRAWTYPE: return "itemsprite::DrawStyle";
        case ITEMDROWNCLK: return "itemsprite::Drowning";
        case ITEMDROWNCMB: return "itemsprite::DrownCombo";
        case ITEMENGINEANIMATE: return "itemsprite::Animation";
        case ITEMEXTEND: return "itemsprite::Extend";
        case ITEMFAKEJUMP: return "itemsprite::FakeJump";
        case ITEMFAKEZ: return "itemsprite::FakeZ";
        case ITEMFALLCLK: return "itemsprite::Falling";
        case ITEMFALLCMB: return "itemsprite::FallCombo";
        case ITEMFLIP: return "itemsprite::Flip";
        case ITEMGLOWRAD: return "itemsprite::LightRadius";
        case ITEMGLOWSHP: return "itemsprite::LightShape";
        case ITEMGRAVITY: return "itemsprite::Gravity";
        case ITEMHXOFS: return "itemsprite::HitXOffset";
        case ITEMHXSZ: return "itemsprite::HitWidth";
        case ITEMHYOFS: return "itemsprite::HitYOffset";
        case ITEMHYSZ: return "itemsprite::HitHeight";
        case ITEMHZSZ: return "itemsprite::HitZHeight";
        case ITEMJUMP: return "itemsprite::Jump";
        case ITEMMISCD: return "itemsprite::Misc[]";
        case ITEMMOVEFLAGS: return "itemsprite::MoveFlags[]";
        case ITEMROTATION: return "itemsprite::Rotation";
        case ITEMSCALE: return "itemsprite::Scale";
        case ITEMSCRIPTFLIP: return "itemsprite::ScriptFlip";
        case ITEMSCRIPTTILE: return "itemsprite::ScriptTile";
        case ITEMSHADOWSPR: return "itemsprite::ShadowSprite";
        case ITEMSHADOWXOFS: return "itemsprite::ShadowXOffset";
        case ITEMSHADOWYOFS: return "itemsprite::ShadowYOffset";
        case ITEMTILE: return "itemsprite::Tile";
        case ITEMTXSZ: return "itemsprite::TileWidth";
        case ITEMTYSZ: return "itemsprite::TileHeight";
        case ITEMX: return "itemsprite::X";
        case ITEMXOFS: return "itemsprite::DrawXOffset";
        case ITEMY: return "itemsprite::Y";
        case ITEMYOFS: return "itemsprite::DrawYOffset";
        case ITEMZ: return "itemsprite::Z";
        case ITEMZOFS: return "itemsprite::DrawZOffset";
        case ITMSWHOOKED: return "itemsprite::SwitchHooked";
        case LINKCSET: return "Hero->CSet";
        case LINKDIR: return "Hero->Dir";
        case LINKENGINEANIMATE: return "Hero->Animation";
        case LINKFLIP: return "Hero->Flip";
        case LINKGRAVITY: return "Hero->Gravity";
        case LINKHXOFS: return "Hero->HitXOffset";
        case LINKHXSZ: return "Hero->HitWidth";
        case LINKHYOFS: return "Hero->HitYOffset";
        case LINKHYSZ: return "Hero->HitHeight";
        case LINKHZSZ: return "Hero->HitZHeight";
        case LINKJUMP: return "Hero->Jump";
        case LINKMISCD: return "Hero->Misc[]";
        case LINKROTATION: return "Hero->Rotation";
        case LINKSCALE: return "Hero->Scale";
        case LINKSCRIPFLIP: return "Hero->ScriptFlip";
        case LINKSCRIPTTILE: return "Hero->ScriptTile";
        case LINKTILE: return "Hero->Tile";
        case LINKTXSZ: return "Hero->TileWidth";
        case LINKTYSZ: return "Hero->TileHeight";
        case LINKX: return "Hero->X";
        case LINKXOFS: return "Hero->DrawXOffset";
        case LINKY: return "Hero->Y";
        case LINKYOFS: return "Hero->DrawYOffset";
        case LINKZ: return "Hero->Z";
        case LINKZOFS: return "Hero->DrawZOffset";
        case LWPNCSET: return "lweapon::CSet";
        case LWPNDIR: return "lweapon::Dir";
        case LWPNDRAWTYPE: return "lweapon::DrawStyle";
        case LWPNDROWNCLK: return "lweapon::Drowning";
        case LWPNDROWNCMB: return "lweapon::DrownCombo";
        case LWPNENGINEANIMATE: return "lweapon::Animation";
        case LWPNEXTEND: return "lweapon::Extend";
        case LWPNFAKEJUMP: return "lweapon::FakeJump";
        case LWPNFAKEZ: return "lweapon::FakeZ";
        case LWPNFALLCLK: return "lweapon::Falling";
        case LWPNFALLCMB: return "lweapon::FallCombo";
        case LWPNFLIP: return "lweapon::Flip";
        case LWPNGLOWRAD: return "lweapon::LightRadius";
        case LWPNGLOWSHP: return "lweapon::LightShape";
        case LWPNGRAVITY: return "lweapon::Gravity";
        case LWPNHXOFS: return "lweapon::HitXOffset";
        case LWPNHXSZ: return "lweapon::HitWidth";
        case LWPNHYOFS: return "lweapon::HitYOffset";
        case LWPNHYSZ: return "lweapon::HitHeight";
        case LWPNHZSZ: return "lweapon::HitZHeight";
        case LWPNJUMP: return "lweapon::Jump";
        case LWPNMISCD: return "lweapon::Misc[]";
        case LWPNMOVEFLAGS: return "lweapon::MoveFlags[]";
        case LWPNROTATION: return "lweapon::Rotation";
        case LWPNSCALE: return "lweapon::Scale";
        case LWPNSCRIPTFLIP: return "lweapon::ScriptFlip";
        case LWPNSCRIPTTILE: return "lweapon::ScriptTile";
        case LWPNSHADOWSPR: return "lweapon::ShadowSprite";
        case LWPNSHADOWXOFS: return "lweapon::ShadowXOffset";
        case LWPNSHADOWYOFS: return "lweapon::ShadowYOffset";
        case LWPNTILE: return "lweapon::Tile";
        case LWPNTXSZ: return "lweapon::TileWidth";
        case LWPNTYSZ: return "lweapon::TileHeight";
        case LWPNX: return "lweapon::X";
        case LWPNXOFS: return "lweapon::DrawXOffset";
        case LWPNY: return "lweapon::Y";
        case LWPNYOFS: return "lweapon::DrawYOffset";
        case LWPNZ: return "lweapon::Z";
        case LWPNZOFS: return "lweapon::DrawZOffset";
        case LWSWHOOKED: return "lweapon::SwitchHooked";
        case NPCCSET: return "npc::CSet";
        case NPCDIR: return "npc::Dir";
        case NPCDRAWTYPE: return "npc::DrawStyle";
        case NPCDROWNCLK: return "npc::Drowning";
        case NPCDROWNCMB: return "npc::DrownCombo";
        case NPCENGINEANIMATE: return "npc::Animation";
        case NPCEXTEND: return "npc::Extend";
        case NPCFAKEJUMP: return "npc::FakeJump";
        case NPCFAKEZ: return "npc::FakeZ";
        case NPCFALLCLK: return "npc::Falling";
        case NPCFALLCMB: return "npc::FallCombo";
        case NPCGLOWRAD: return "npc::LightRadius";
        case NPCGLOWSHP: return "npc::LightShape";
        case NPCGRAVITY: return "npc::Gravity";
        case NPCHXOFS: return "npc::HitXOffset";
        case NPCHXSZ: return "npc::HitWidth";
        case NPCHYOFS: return "npc::HitYOffset";
        case NPCHYSZ: return "npc::HitHeight";
        case NPCHZSZ: return "npc::HitZHeight";
        case NPCJUMP: return "npc::Jump";
        case NPCMISCD: return "npc::Misc[]";
        case NPCMOVEFLAGS: return "npc::MoveFlags[]";
        case NPCROTATION: return "npc::Rotation";
        case NPCSCALE: return "npc::Scale";
        case NPCSCRIPTFLIP: return "npc::ScriptFlip";
        case NPCSCRIPTTILE: return "npc::ScriptTile";
        case NPCSHADOWSPR: return "npc::ShadowSprite";
        case NPCSHADOWXOFS: return "npc::ShadowXOffset";
        case NPCSHADOWYOFS: return "npc::ShadowYOffset";
        case NPCSWHOOKED: return "npc::SwitchHooked";
        case NPCTILE: return "npc::Tile";
        case NPCTXSZ: return "npc::TileWidth";
        case NPCTYSZ: return "npc::TileHeight";
        case NPCX: return "npc::X";
        case NPCXOFS: return "npc::DrawXOffset";
        case NPCY: return "npc::Y";
        case NPCYOFS: return "npc::DrawYOffset";
        case NPCZ: return "npc::Z";
        case NPCZOFS: return "npc::DrawZOffset";
        case SCREENDATAWARPRETURNC: return "Screen->WarpReturnC";
        case SETNPCDATAATTRIBUTE: return "npcdata::SetAttribute()";
        case SETNPCDATADEFENSE: return "npcdata::SetDefense()";
        case SETNPCDATASCRIPTDEF: return "npcdata::SetScriptDefense()";
        case SETNPCDATASIZEFLAG: return "npcdata::SetSizeFlag()";
	}

	return nullptr;
}

const char* scripting_get_zasm_command_context_string(ASM_DEFINE command)
{
	switch (command)
	{
		case ABS: return "Abs()";
		case ARCCOSR: return "ArcCos()";
		case ARCSINR: return "ArcSin()";
		case ARCTANR: return "ArcTan()";
		case ARRAYCOPY: return "ArrayCopy()";
		case ARRAYPOP: return "ArrayPopBack()";
		case ARRAYPUSH: return "ArrayPushBack()";
		case ADJUSTVOLUMER: return "Audio->AdjustMusicVolume()";
		case ADJUSTSFXVOLUMER: return "Audio->AdjustSFXVolume()";
		case ADJUSTSFX: return "Audio->AdjustSound()";
		case CONTINUESFX: return "Audio->ContinueSound()";
		case ENHCROSSFADE: return "Audio->CrossfadeEnhancedMusic()";
		case ENDSOUNDR: return "Audio->EndSound()";
		case GETENHMUSICLEN: return "Audio->GetMusicLength()";
		case GETENHMUSICPOS: return "Audio->GetMusicPos()";
		case GETSFXCOMPLETION: return "Audio->GetSoundCompletion()";
		case PAUSEMUSIC: return "Audio->PauseCurMIDI()";
		case PAUSESOUNDR: return "Audio->PauseSound()";
		case PLAYENHMUSIC: return "Audio->PlayEnhancedMusic()";
		case PLAYMIDIR: return "Audio->PlayMIDI()";
		case PLAYENHMUSICEX: return "Audio->PlayOgg()";
		case PLAYSOUNDR: return "Audio->PlaySound()";
		case PLAYSOUNDEX: return "Audio->PlaySoundEx()";
		case RESUMEMUSIC: return "Audio->ResumeCurMIDI()";
		case RESUMESOUNDR: return "Audio->ResumeSound()";
		case SETENHMUSICLOOP: return "Audio->SetMusicLoop()";
		case SETENHMUSICPOS: return "Audio->SetMusicPos()";
		case SETENHMUSICSPEED: return "Audio->SetMusicSpeed()";
		case CEILING: return "Ceiling()";
		case CHOOSEVARG: return "Choose()";
		case CLEARTILER: return "ClearTile()";
		case TRACE4: return "ClearTrace()";
		case COMBO_ADJUST: return "ComboAdjust()";
		case COMBO_AT: return "ComboAt()";
		case COPYTILERR: return "CopyTile()";
		case COSR: return "Cos()";
		case BREAKPOINT: return "Debug->Breakpoint()";
		case TRIGGERSECRETR: return "Debug->TriggerSecret()";
		case DEGTORAD: return "DegtoRad()";
		case DESTROYARRAYR: return "DestroyArray()";
		case FACTORIAL: return "Factorial()";
		case DIREXISTS: return "FileSystem->DirExists()";
		case FILEEXISTS: return "FileSystem->FileExists()";
		case FILESYSREMOVE: return "FileSystem->Remove()";
		case FLOOR: return "Floor()";
		case GC: return "GC()";
		case COMBOTILE: return "Game->ComboTile()";
		case GAMECONTINUE: return "Game->Continue()";
		case CREATESAVPORTAL: return "Game->CreateSavedPortal()";
		case CURRENTITEMID: return "Game->CurrentItemID()";
		case GAMEEND: return "Game->End()";
		case GAMEEXIT: return "Game->Exit()";
		case GETCOMBOBYNAME: return "Game->GetCombo()";
		case GETCOMBOSCRIPT: return "Game->GetComboScript()";
		case GETDMAPBYNAME: return "Game->GetDMap()";
		case GETDMAPINTRO: return "Game->GetDMapIntro()";
		case GETMUSICFILE: return "Game->GetDMapMusicFilename()";
		case GETMUSICTRACK: return "Game->GetDMapMusicTrack()";
		case GETDMAPNAME: return "Game->GetDMapName()";
		case GETDMAPSCRIPT: return "Game->GetDMapScript()";
		case GETDMAPTITLE: return "Game->GetDMapTitle()";
		case GETEWEAPONSCRIPT: return "Game->GetEWeaponScript()";
		case GETFFCSCRIPT: return "Game->GetFFCScript()";
		case GETGENERICSCRIPT: return "Game->GetGenericScript()";
		case GETGLOBALSCRIPT: return "Game->GetGlobalScript()";
		case GETITEMBYNAME: return "Game->GetItem()";
		case GETITEMSCRIPT: return "Game->GetItemScript()";
		case GETSPRITESCRIPT: return "Game->GetItemSpriteScript()";
		case GETLWEAPONSCRIPT: return "Game->GetLWeaponScript()";
		case GETMESSAGE: return "Game->GetMessage()";
		case GETNPCBYNAME: return "Game->GetNPC()";
		case GETNPCSCRIPT: return "Game->GetNPCScript()";
		case GETHEROSCRIPT: return "Game->GetPlayerScript()";
		case GETSAVENAME: return "Game->GetSaveName()";
		case GETSCREENFLAGS: return "Game->GetScreenFlags()";
		case GETSCREENSCRIPT: return "Game->GetScreenScript()";
		case GETSUBSCREENSCRIPT: return "Game->GetSubscreenScript()";
		case GETUNTYPEDSCRIPT: return "Game->GetUntypedScript()";
		case LOADSUBDATARV: return "Game->LoadASubData()";
		case LOADBITMAPDATAR: return "Game->LoadBitmapID()";
		case LOADBOTTLETYPE: return "Game->LoadBottleData()";
		case LOADBSHOPDATA: return "Game->LoadBottleShopData()";
		case LOADCOMBODATAR: return "Game->LoadComboData()";
		case LOADDMAPDATAR: return "Game->LoadDMapData()";
		case LOADDROPSETR: return "Game->LoadDropset()";
		case LOADGENERICDATA: return "Game->LoadGenericData()";
		case LOADINFOSHOPR: return "Game->LoadInfoShopData()";
		case LOADITEMDATAR: return "Game->LoadItemData()";
		case LOADMESSAGEDATAR: return "Game->LoadMessageData()";
		case LOADNPCDATAR: return "Game->LoadNPCData()";
		case LOADSAVPORTAL: return "Game->LoadSavedPortal()";
		case LOADSCROLLSCR: return "Game->LoadScrollingScreen()";
		case LOADSCROLLSCR2: return "Game->LoadScrollingScreen()";
		case LOADSHOPR: return "Game->LoadShopData()";
		case LOADSPRITEDATAR: return "Game->LoadSpriteData()";
		case LOADTMPSCR: return "Game->LoadTempScreen()";
		case LOADTMPSCR2: return "Game->LoadTempScreen()";
		case REGION_LOAD_TMPSCR_FOR_LAYER_COMBO_POS: return "Game->LoadTempScreenForComboPos()";
		case WEBSOCKET_LOAD: return "Game->LoadWebSocket()";
		case GAMERELOAD: return "Game->Reload()";
		case SAVE: return "Game->Save()";
		case GAMESAVECONTINUE: return "Game->SaveAndContinue()";
		case GAMESAVEQUIT: return "Game->SaveAndQuit()";
		case GAMESETCUSTOMCURSOR: return "Game->SetCustomCursor()";
		case SETDMAPENHMUSIC: return "Game->SetDMapEnhancedMusic()";
		case SETDMAPINTRO: return "Game->SetDMapIntro()";
		case SETDMAPNAME: return "Game->SetDMapName()";
		case SETDMAPTITLE: return "Game->SetDMapTitle()";
		case SETMESSAGE: return "Game->SetMessage()";
		case SETSAVENAME: return "Game->SetSaveName()";
		case SHOWF6SCREEN: return "Game->ShowContinueScreen()";
		case SAVEQUITSCREEN: return "Game->ShowSaveQuitScreen()";
		case SAVESCREEN: return "Game->ShowSaveScreen()";
		case SWAPSUBSCREENV: return "Game->SwapActiveSubscreens()";
		case GETRTCTIMER: return "GetSystemTime()";
		case ZCLASS_GLOBALIZE: return "GlobalObject()";
		case CLEARTINT: return "Graphics->ClearTint()";
		case CONVERTFROMRGB: return "Graphics->ConvertFromRGB()";
		case CONVERTTORGB: return "Graphics->ConvertToRGB()";
		case CREATERGBHEX: return "Graphics->CreateRGB()";
		case CREATERGB: return "Graphics->CreateRGB()";
		case GETTILEPIXEL: return "Graphics->GetTilePixel()";
		case MIXCLR: return "Graphics->MixColor()";
		case MONOHUE: return "Graphics->MonochromeHue()";
		case SETTILEPIXEL: return "Graphics->SetTilePixel()";
		case TINT: return "Graphics->Tint()";
		case FXWAVYR: return "Graphics->Wavy()";
		case FXZAPR: return "Graphics->Zap()";
		case HEROCANMOVE: return "Hero->CanMove()";
		case HEROCANMOVEATANGLE: return "Hero->CanMoveAtAngle()";
		case HEROCANMOVEXY: return "Hero->CanMoveXY()";
		case LINKEXPLODER: return "Hero->Explode()";
		case KILLPLAYER: return "Hero->Kill()";
		case HEROLIFTGRAB: return "Hero->LiftWeapon()";
		case HEROMOVE: return "Hero->Move()";
		case HEROMOVEATANGLE: return "Hero->MoveAtAngle()";
		case HEROMOVEXY: return "Hero->MoveXY()";
		case PITWARPR: return "Hero->PitWarp()";
		case HEROLIFTRELEASE: return "Hero->ReleaseLiftWeapon()";
		case SELECTAWPNR: return "Hero->SelectAWeapon()";
		case SELECTBWPNR: return "Hero->SelectBWeapon()";
		case SELECTXWPNR: return "Hero->SelectXWeapon()";
		case SELECTYWPNR: return "Hero->SelectYWeapon()";
		case SWITCHCMB: return "Hero->SwitchCombo()";
		case WARPR: return "Hero->Warp()";
		case LINKWARPEXR: return "Hero->WarpEx()";
		case HEROISFLICKERFRAME: return "Hero->isFlickerFrame()";
		case IPOWERR: return "InvPow()";
		case ISVALIDARRAY: return "IsValidArray()";
		case LPOWERR: return "LPow()";
		case LOGE: return "Ln()";
		case READGAMESTRUCTS: return "LoadSRAM()";
		case LOG10: return "Log10()";
		case MAXVARG: return "Max()";
		case MINVARG: return "Min()";
		case OVERLAYTILERR: return "OverlayTile()";
		case OWNARRAYR: return "OwnArray()";
		case ZCLASS_OWN: return "OwnObject()";
		case POWERR: return "Pow()";
		case QUIT: return "Quit()";
		case QUIT_NO_DEALLOC: return "QuitNoKill()";
		case RADTODEG: return "RadtoDeg()";
		case RNDR: return "Rand()";
		case REF_COUNT: return "RefCount()";
		case RESIZEARRAYR: return "ResizeArray()";
		case ROUND: return "Round()";
		case ROUNDAWAY: return "RoundAway()";
		case SRNDR: return "SRand()";
		case SRNDRND: return "SRand()";
		case SAVEGAMESTRUCTS: return "SaveSRAM()";
		case ARCR: return "Screen->Arc()";
		case CIRCLER: return "Screen->Circle()";
		case CLEARSPRITESR: return "Screen->ClearSprites()";
		case CLOSEWIPE: return "Screen->ClosingWipe()";
		case CLOSEWIPESHAPE: return "Screen->ClosingWipe()";
		case COMBOBLIT: return "Screen->ComboBlit()";
		case CREATEEWEAPONR: return "Screen->CreateEWeapon()";
		case CREATEITEMR: return "Screen->CreateItem()";
		case CREATELWEAPONR: return "Screen->CreateLWeapon()";
		case CREATENPCR: return "Screen->CreateNPC()";
		case CREATEPORTAL: return "Screen->CreatePortal()";
		case BITMAPR: return "Screen->DrawBitmap()";
		case BITMAPEXR: return "Screen->DrawBitmapEx()";
		case DRAWCHARR: return "Screen->DrawCharacter()";
		case DRAWCOMBOR: return "Screen->DrawCombo()";
		case DRAWCOMBOCLOAKEDR: return "Screen->DrawComboCloaked()";
		case COMBOARRAYR: return "Screen->DrawCombos()";
		case FRAMER: return "Screen->DrawFrame()";
		case DRAWINTR: return "Screen->DrawInteger()";
		case DRAWLAYERR: return "Screen->DrawLayer()";
		case DRAWLIGHT_CIRCLE: return "Screen->DrawLightCircle()";
		case DRAWLIGHT_CONE: return "Screen->DrawLightCone()";
		case DRAWLIGHT_SQUARE: return "Screen->DrawLightSquare()";
		case DRAWSCREENR: return "Screen->DrawScreen()";
		case DRAWSTRINGR: return "Screen->DrawString()";
		case DRAWSTRINGR2: return "Screen->DrawString()";
		case DRAWTILER: return "Screen->DrawTile()";
		case DRAWTILECLOAKEDR: return "Screen->DrawTileCloaked()";
		case TILEARRAYR: return "Screen->DrawTiles()";
		case ELLIPSER: return "Screen->Ellipse()";
		case FASTCOMBOR: return "Screen->FastCombo()";
		case FASTTILER: return "Screen->FastTile()";
		case GETSIDEWARPDMAP: return "Screen->GetSideWarpDMap()";
		case GETSIDEWARPSCR: return "Screen->GetSideWarpScreen()";
		case GETSIDEWARPTYPE: return "Screen->GetSideWarpType()";
		case GETTILEWARPDMAP: return "Screen->GetTileWarpDMap()";
		case GETTILEWARPSCR: return "Screen->GetTileWarpScreen()";
		case GETTILEWARPTYPE: return "Screen->GetTileWarpType()";
		case LAYERMAP: return "Screen->LayerMap()";
		case LAYERSCREEN: return "Screen->LayerScreen()";
		case LINER: return "Screen->Line()";
		case LINESARRAY: return "Screen->Lines()";
		case LOADEWEAPONR: return "Screen->LoadEWeapon()";
		case LOADWEAPONCBYSUID: return "Screen->LoadEWeaponByUID()";
		case LOAD_FFC: return "Screen->LoadFFC()";
		case LOAD_FFC_2: return "Screen->LoadFFC()";
		case LOADITEMR: return "Screen->LoadItem()";
		case LOADLWEAPONR: return "Screen->LoadLWeapon()";
		case LOADLWEAPONBYSUID: return "Screen->LoadLWeaponByUID()";
		case LOADNPCR: return "Screen->LoadNPC()";
		case LOADNPCBYSUID: return "Screen->LoadNPCByUID()";
		case LOADPORTAL: return "Screen->LoadPortal()";
		case MSGSTRR: return "Screen->Message()";
		case OPENWIPE: return "Screen->OpeningWipe()";
		case OPENWIPESHAPE: return "Screen->OpeningWipe()";
		case POLYGONR: return "Screen->Polygon()";
		case PUTPIXELR: return "Screen->PutPixel()";
		case PIXELARRAYR: return "Screen->PutPixels()";
		case QUADR: return "Screen->Quad()";
		case QUAD3DR: return "Screen->Quad3D()";
		case RECTR: return "Screen->Rectangle()";
		case SETSIDEWARP: return "Screen->SetSideWarp()";
		case SETTILEWARP: return "Screen->SetTileWarp()";
		case SCREENDOSPAWN: return "Screen->SpawnScreenEnemies()";
		case SPLINER: return "Screen->Spline()";
		case TILEBLIT: return "Screen->TileBlit()";
		case TRIANGLER: return "Screen->Triangle()";
		case TRIANGLE3DR: return "Screen->Triangle3D()";
		case SCRTRIGGERCOMBO: return "Screen->TriggerCombo()";
		case SECRETS: return "Screen->TriggerSecrets()";
		case REGION_TRIGGER_SECRETS: return "Screen->TriggerSecrets()";
		case WAVYIN: return "Screen->WavyIn()";
		case WAVYOUT: return "Screen->WavyOut()";
		case ZAPIN: return "Screen->ZapIn()";
		case ZAPOUT: return "Screen->ZapOut()";
		case ISSOLID: return "Screen->isSolid()";
		case ISSOLIDLAYER: return "Screen->isSolidLayer()";
		case SINR: return "Sin()";
		case ARRAYSIZE: return "SizeOfArray()";
		case SQROOTR: return "Sqrt()";
		case SWAPTILERR: return "SwapTile()";
		case TANR: return "Tan()";
		case CHARWIDTHR: return "Text->CharWidth()";
		case MESSAGEHEIGHTR: return "Text->MessageHeight()";
		case MESSAGEWIDTHR: return "Text->MessageWidth()";
		case FONTHEIGHTR: return "Text->StringHeight()";
		case STRINGWIDTHR: return "Text->StringWidth()";
		case TRACER: return "Trace()";
		case TRACELR: return "Trace()";
		case TRACE2R: return "Trace()";
		case TRACE3: return "Trace()";
		case TRACE6: return "TraceS()";
		case TRACE5: return "TraceToBase()";
		case TRUNCATE: return "Truncate()";
		case WAITEVENT: return "WaitEvent()";
		case WAITTO: return "WaitTo()";
		case WAITDRAW: return "Waitdraw()";
		case WAITFRAME: return "Waitframe()";
		case WAITFRAMESR: return "Waitframes()";
		case WRAPDEGREES: return "WrapDegrees()";
		case WRAPRADIANS: return "WrapRadians()";
		case MODULEGETIC: return "ZInfo->GetItemType()";
		case ATOI: return "atoi()";
		case ATOL: return "atol()";
		case BMPARCR: return "bitmap::Arc()";
		case BMPBLIT: return "bitmap::Blit()";
		case BMPBLITTO: return "bitmap::BlitTo()";
		case BMPCIRCLER: return "bitmap::Circle()";
		case CLEARBITMAP: return "bitmap::Clear()";
		case BITMAPCLEARTOCOLOR: return "bitmap::ClearToColor()";
		case BMPCOMBOBLIT: return "bitmap::ComboBlit()";
		case GRAPHICSCOUNTCOLOR: return "bitmap::CountColor()";
		case REGENERATEBITMAP: return "bitmap::Create()";
		case BMPDITHER: return "bitmap::Dither()";
		case BMPDRAWCHARR: return "bitmap::DrawCharacter()";
		case BMPDRAWCOMBOR: return "bitmap::DrawCombo()";
		case BMPDRAWCOMBOCLOAKEDR: return "bitmap::DrawComboCloaked()";
		case BMPFRAMER: return "bitmap::DrawFrame()";
		case BMPDRAWINTR: return "bitmap::DrawInteger()";
		case BMPDRAWLAYERR: return "bitmap::DrawLayer()";
		case BMPDRAWLAYERCFLAGR: return "bitmap::DrawLayerComboFlags()";
		case BMPDRAWLAYERCIFLAGR: return "bitmap::DrawLayerComboIFlags()";
		case BMPDRAWLAYERCTYPER: return "bitmap::DrawLayerComboTypes()";
		case BMPDRAWLAYERSOLIDR: return "bitmap::DrawLayerSolid()";
		case BMPDRAWLAYERSOLIDITYR: return "bitmap::DrawLayerSolidity()";
		case BMPMODE7: return "bitmap::DrawPlane()";
		case BMPDRAWSCREENR: return "bitmap::DrawScreen()";
		case BMPDRAWSCREENCOMBOFR: return "bitmap::DrawScreenComboFlags()";
		case BMPDRAWSCREENCOMBOIR: return "bitmap::DrawScreenComboIFlags()";
		case BMPDRAWSCREENCOMBOTR: return "bitmap::DrawScreenComboTypes()";
		case BMPDRAWSCREENSOLID2R: return "bitmap::DrawScreenSolid()";
		case BMPDRAWSCREENSOLIDR: return "bitmap::DrawScreenSolidity()";
		case BMPDRAWSTRINGR: return "bitmap::DrawString()";
		case BMPDRAWSTRINGR2: return "bitmap::DrawString()";
		case BMPDRAWTILER: return "bitmap::DrawTile()";
		case BMPDRAWTILECLOAKEDR: return "bitmap::DrawTileCloaked()";
		case BMPELLIPSER: return "bitmap::Ellipse()";
		case BMPFASTCOMBOR: return "bitmap::FastCombo()";
		case BMPFASTTILER: return "bitmap::FastTile()";
		case BITMAPFREE: return "bitmap::Free()";
		case GRAPHICSGETPIXEL: return "bitmap::GetPixel()";
		case BMPLINER: return "bitmap::Line()";
		case BMPMASKBLIT: return "bitmap::MaskedBlit()";
		case BMPMASKBLIT2: return "bitmap::MaskedBlit()";
		case BMPMASKBLIT3: return "bitmap::MaskedBlit()";
		case BMPMASKDRAW: return "bitmap::MaskedDraw()";
		case BMPMASKDRAW2: return "bitmap::MaskedDraw()";
		case BMPMASKDRAW3: return "bitmap::MaskedDraw()";
		case BITMAPOWN: return "bitmap::Own()";
		case BMPPOLYGONR: return "bitmap::Polygon()";
		case BMPPUTPIXELR: return "bitmap::PutPixel()";
		case BMPQUADR: return "bitmap::Quad()";
		case BMPQUAD3DR: return "bitmap::Quad3D()";
		case READBITMAP: return "bitmap::Read()";
		case BMPRECTR: return "bitmap::Rectangle()";
		case BMPREPLCOLOR: return "bitmap::ReplaceColors()";
		case BMPSHIFTCOLOR: return "bitmap::ShiftColors()";
		case BMPSPLINER: return "bitmap::Spline()";
		case BMPTILEBLIT: return "bitmap::TileBlit()";
		case BMPTRIANGLER: return "bitmap::Triangle()";
		case BMPTRIANGLE3DR: return "bitmap::Triangle3D()";
		case WRITEBITMAP: return "bitmap::Write()";
		case BMPWRITETILE: return "bitmap::WriteTile()";
		case ISALLOCATEDBITMAP: return "bitmap::isAllocated()";
		case ISVALIDBITMAP: return "bitmap::isValid()";
		case BOTTLENAMEGET: return "bottledata::GetName()";
		case BOTTLENAMESET: return "bottledata::SetName()";
		case BSHOPNAMEGET: return "bottleshopdata::GetName()";
		case BSHOPNAMESET: return "bottleshopdata::SetName()";
		case CONVERTCASE: return "convcase()";
		case DIRECTORYFREE: return "directory::Free()";
		case DIRECTORYGET: return "directory::GetFilename()";
		case DIRECTORYOWN: return "directory::Own()";
		case DIRECTORYRELOAD: return "directory::Reload()";
		case LOADDIRECTORYR: return "directory::directory()";
		case DMAPDATAGETINTROR: return "dmapdata::GetIntro()";
		case DMAPDATAGETMUSICR: return "dmapdata::GetMusic()";
		case DMAPDATAGETNAMER: return "dmapdata::GetName()";
		case DMAPDATAGETTITLER: return "dmapdata::GetTitle()";
		case DMAPDATANSETITROR: return "dmapdata::SetIntro()";
		case DMAPDATASETMUSICR: return "dmapdata::SetMusic()";
		case DMAPDATASETNAMER: return "dmapdata::SetName()";
		case DMAPDATASETTITLER: return "dmapdata::SetTitle()";
		case EWEAPONEXPLODER: return "eweapon::Explode()";
		case EWPNMAKEANGULAR: return "eweapon::MakeAngular()";
		case EWPNMAKEDIRECTIONAL: return "eweapon::MakeDirectional()";
		case OBJ_OWN_BITMAP: return "eweapon::Own()";
		case OBJ_OWN_PALDATA: return "eweapon::Own()";
		case OBJ_OWN_FILE: return "eweapon::Own()";
		case OBJ_OWN_DIR: return "eweapon::Own()";
		case OBJ_OWN_STACK: return "eweapon::Own()";
		case OBJ_OWN_RNG: return "eweapon::Own()";
		case OBJ_OWN_ARRAY: return "eweapon::OwnArray()";
		case OBJ_OWN_CLASS: return "eweapon::OwnObject()";
		case EWPNDEL: return "eweapon::Remove()";
		case SWITCHEW: return "eweapon::Switch()";
		case EWPNUSESPRITER: return "eweapon::UseSprite()";
		case ISVALIDEWPN: return "eweapon::isValid()";
		case FILEALLOCATE: return "file::Allocate()";
		case FILECLEARERR: return "file::ClearError()";
		case FILECLOSE: return "file::Close()";
		case FILECREATE: return "file::Create()";
		case FILEFLUSH: return "file::Flush()";
		case FILEFREE: return "file::Free()";
		case FILEGETCHAR: return "file::GetChar()";
		case FILEGETERROR: return "file::GetError()";
		case FILEOPEN: return "file::Open()";
		case FILEOPENMODE: return "file::OpenMode()";
		case FILEOWN: return "file::Own()";
		case FILEPUTCHAR: return "file::PutChar()";
		case FILEREADBYTES: return "file::ReadBytes()";
		case FILEREADCHARS: return "file::ReadChars()";
		case FILEREADINTS: return "file::ReadInts()";
		case FILEREADSTR: return "file::ReadString()";
		case FILEREMOVE: return "file::Remove()";
		case FILEREWIND: return "file::Rewind()";
		case FILESEEK: return "file::Seek()";
		case FILEUNGETCHAR: return "file::UngetChar()";
		case FILEWRITEBYTES: return "file::WriteBytes()";
		case FILEWRITECHARS: return "file::WriteChars()";
		case FILEWRITEINTS: return "file::WriteInts()";
		case FILEWRITESTR: return "file::WriteString()";
		case FILEISALLOCATED: return "file::isAllocated()";
		case FILEISVALID: return "file::isValid()";
		case RUNGENFRZSCR: return "genericdata::RunFrozen()";
		case ILEN: return "ilen()";
		case ITEMGETDISPLAYNAME: return "itemdata::GetDisplayName()";
		case ITEMNAME: return "itemdata::GetName()";
		case ITEMGETSHOWNNAME: return "itemdata::GetShownName()";
		case RUNITEMSCRIPT: return "itemdata::RunScript()";
		case ITEMSETDISPLAYNAME: return "itemdata::SetDisplayName()";
		case ITEMEXPLODER: return "itemsprite::Explode()";
		case ITEMDEL: return "itemsprite::Remove()";
		case SWITCHITM: return "itemsprite::Switch()";
		case ISVALIDITEM: return "itemsprite::isValid()";
		case ITOA: return "itoa()";
		case ITOACAT: return "itoacat()";
		case LOWERTOUPPER: return "ltou()";
		case LWEAPONEXPLODER: return "lweapon::Explode()";
		case LWPNMAKEANGULAR: return "lweapon::MakeAngular()";
		case LWPNMAKEDIRECTIONAL: return "lweapon::MakeDirectional()";
		case LWPNDEL: return "lweapon::Remove()";
		case SWITCHLW: return "lweapon::Switch()";
		case LWPNUSESPRITER: return "lweapon::UseSprite()";
		case ISVALIDLWPN: return "lweapon::isValid()";
		case MAPDATAISSOLID: return "mapdata::isSolid()";
		case MAPDATAISSOLIDLYR: return "mapdata::isSolidLayer()";
		case MESSAGEDATAGETSTRINGR: return "messagedata::Get()";
		case MESSAGEDATASETSTRINGR: return "messagedata::Set()";
		case NPCATTACK: return "npc::Attack()";
		case BREAKSHIELD: return "npc::BreakShield()";
		case NPCFIREBREATH: return "npc::BreathAttack()";
		case NPCCANMOVE: return "npc::CanMove()";
		case NPCCANMOVEDIR: return "npc::CanMove()";
		case NPCCANMOVEANGLE: return "npc::CanMoveAtAngle()";
		case NPCCANMOVEXY: return "npc::CanMoveXY()";
		case NPCCANPLACE: return "npc::CanPlace()";
		case NPCCANSLIDE: return "npc::CanSlide()";
		case NPCCONSTWALK: return "npc::ConstantWalk()";
		case NPCCONSTWALK8: return "npc::ConstantWalk8()";
		case NPCADD: return "npc::Create()";
		case NPCEXPLODER: return "npc::Explode()";
		case NPCFLOATWALK: return "npc::FloatingWalk()";
		case NPCNAME: return "npc::GetName()";
		case NPCHALTWALK: return "npc::HaltingWalk()";
		case NPCHALTWALK8: return "npc::HaltingWalk8()";
		case NPCKNOCKBACK: return "npc::Knockback()";
		case NPCLINKINRANGE: return "npc::LinkInRange()";
		case NPCMOVE: return "npc::Move()";
		case NPCMOVEANGLE: return "npc::MoveAtAngle()";
		case NPCMOVEPAUSED: return "npc::MovePaused()";
		case NPCMOVEXY: return "npc::MoveXY()";
		case NPCNEWDIR: return "npc::NewDir()";
		case NPCNEWDIR8: return "npc::NewDir8()";
		case NPCKICKBUCKET: return "npc::Remove()";
		case REPAIRSHIELD: return "npc::RepairShield()";
		case NPCHITWITH: return "npc::SimulateHit()";
		case NPCSLIDE: return "npc::Slide()";
		case NPCSTOPBGSFX: return "npc::StopBGSFX()";
		case SWITCHNPC: return "npc::Switch()";
		case NPCVARWALK: return "npc::VariableWalk()";
		case NPCVARWALK8: return "npc::VariableWalk8()";
		case NPCDEAD: return "npc::isDead()";
		case NPCISFLICKERFRAME: return "npc::isFlickerFrame()";
		case ISVALIDNPC: return "npc::isValid()";
		case NPCDATAGETNAME: return "npcdata::GetName()";
		case PALDATACLEARCSET: return "paldata::ClearCSet()";
		case PALDATACLEARCLR: return "paldata::ClearColor()";
		case PALDATAVALIDCLR: return "paldata::ColorValid()";
		case PALDATACOPY: return "paldata::Copy()";
		case PALDATACOPYCSET: return "paldata::CopyCSet()";
		case PALDATAFREE: return "paldata::Free()";
		case PALDATALOADBITMAP: return "paldata::LoadBitmapPalette()";
		case PALDATALOADCYCLE: return "paldata::LoadCyclePalette()";
		case PALDATALOADLEVEL: return "paldata::LoadLevelPalette()";
		case PALDATALOADMAIN: return "paldata::LoadMainPalette()";
		case PALDATALOADSPRITE: return "paldata::LoadSpritePalette()";
		case PALDATAMIX: return "paldata::Mix()";
		case PALDATAMIXCS: return "paldata::MixCSet()";
		case PALDATAOWN: return "paldata::Own()";
		case PALDATAWRITECYCLECS: return "paldata::WriteCycleCSet()";
		case PALDATAWRITECYCLE: return "paldata::WriteCyclePalette()";
		case PALDATAWRITELEVELCS: return "paldata::WriteLevelCSet()";
		case PALDATAWRITELEVEL: return "paldata::WriteLevelPalette()";
		case PALDATAWRITEMAINCS: return "paldata::WriteMainCSet()";
		case PALDATAWRITEMAIN: return "paldata::WriteMainPalette()";
		case PALDATAWRITESPRITECS: return "paldata::WriteSpriteCSet()";
		case PALDATAWRITESPRITE: return "paldata::WriteSpritePalette()";
		case CREATEPALDATA: return "paldata::paldata()";
		case CREATEPALDATACLR: return "paldata::paldata()";
		case PORTALREMOVE: return "portal::Remove()";
		case PORTALUSESPRITE: return "portal::UseSprite()";
		case PRINTFVARG: return "printf()";
		case PRINTFA: return "printfa()";
		case RNGFREE: return "randgen::Free()";
		case RNGLRAND1: return "randgen::LRand()";
		case RNGLRAND2: return "randgen::LRand()";
		case RNGLRAND3: return "randgen::LRand()";
		case RNGOWN: return "randgen::Own()";
		case RNGRAND1: return "randgen::Rand()";
		case RNGRAND2: return "randgen::Rand()";
		case RNGRAND3: return "randgen::Rand()";
		case RNGSEED: return "randgen::SRand()";
		case RNGRSEED: return "randgen::SRand()";
		case LOADRNG: return "randgen::randgen()";
		case SAVEDPORTALGENERATE: return "savedportal::Generate()";
		case SAVEDPORTALREMOVE: return "savedportal::Remove()";
		case SPRINTFVARG: return "sprintf()";
		case SPRINTFA: return "sprintfa()";
		case STACKCLEAR: return "stack::Clear()";
		case STACKFREE: return "stack::Free()";
		case STACKGET: return "stack::Get()";
		case STACKOWN: return "stack::Own()";
		case STACKPEEKBACK: return "stack::PeekBack()";
		case STACKPEEKFRONT: return "stack::PeekFront()";
		case STACKPOPBACK: return "stack::PopBack()";
		case STACKPOPFRONT: return "stack::PopFront()";
		case STACKPUSHBACK: return "stack::PushBack()";
		case STACKPUSHFRONT: return "stack::PushFront()";
		case STACKSET: return "stack::Set()";
		case LOADSTACK: return "stack::stack()";
		case STRCAT: return "strcat()";
		case STRCHR: return "strchr()";
		case STRINGCOMPARE: return "strcmp()";
		case STRINGCOPY: return "strcpy()";
		case STRCSPN: return "strcspn()";
		case STRINGICOMPARE: return "stricmp()";
		case STRINGLENGTH: return "strlen()";
		case STRINGNCOMPARE: return "strncmp()";
		case STRINGNICOMPARE: return "strnicmp()";
		case STRRCHR: return "strrchr()";
		case STRSPN: return "strspn()";
		case STRSTR: return "strstr()";
		case SUBDATA_GET_NAME: return "subscreendata::GetName()";
		case SUBDATA_SET_NAME: return "subscreendata::SetName()";
		case SUBDATA_SWAP_PAGES: return "subscreendata::SwapPages()";
		case SUBPAGE_NEW_WIDG: return "subscreenpage::CreateWidget()";
		case SUBPAGE_DELETE: return "subscreenpage::Delete()";
		case SUBPAGE_FIND_WIDGET: return "subscreenpage::FindWidget()";
		case SUBPAGE_FIND_WIDGET_BY_LABEL: return "subscreenpage::GetWidget()";
		case SUBPAGE_MOVE_SEL: return "subscreenpage::SelectorMove()";
		case SUBPAGE_SWAP_WIDG: return "subscreenpage::SwapWidgets()";
		case SUBWIDG_CHECK_CONDITIONS: return "subscreenwidget::CheckConditions()";
		case SUBWIDG_CHECK_VISIBLE: return "subscreenwidget::CheckVisible()";
		case SUBWIDG_GET_LABEL: return "subscreenwidget::GetLabel()";
		case SUBWIDG_GET_SELTEXT_OVERRIDE: return "subscreenwidget::GetSelTextOverride()";
		case SUBWIDG_TY_GETTEXT: return "subscreenwidget::GetText()";
		case SUBWIDG_SET_LABEL: return "subscreenwidget::SetLabel()";
		case SUBWIDG_SET_SELTEXT_OVERRIDE: return "subscreenwidget::SetSelTextOverride()";
		case SUBWIDG_TY_SETTEXT: return "subscreenwidget::SetText()";
		case UPPERTOLOWER: return "utol()";
		case WEBSOCKET_FREE: return "websocket::Free()";
		case WEBSOCKET_ERROR: return "websocket::GetError()";
		case WEBSOCKET_OWN: return "websocket::Own()";
		case WEBSOCKET_RECEIVE: return "websocket::Receive()";
		case WEBSOCKET_SEND: return "websocket::Send()";
		case XTOA: return "xtoa()";
		case XTOI: return "xtoi()";

        // The following are all retired ZASM commands.

        case GETNPCDATAANIM: return "npcdata::GetAnim()";
        case GETNPCDATAATTRIBUTE: return "npcdata::GetAttribute()";
        case GETNPCDATABGSFX: return "npcdata::GetBGSFX()";
        case GETNPCDATACSET: return "npcdata::GetCSet()";
        case GETNPCDATADEATHSFX: return "npcdata::GetDeathSFX()";
        case GETNPCDATADEFENSE: return "npcdata::GetDefense()";
        case GETNPCDATADROPSET: return "npcdata::GetDropset()";
        case GETNPCDATAEANIM: return "npcdata::GetEAnim()";
        case GETNPCDATAEFRAMERATE: return "npcdata::GetEFramerate()";
        case GETNPCDATAEHEIGHT: return "npcdata::GetEHeight()";
        case GETNPCDATAETILE: return "npcdata::GetETile()";
        case GETNPCDATAEWIDTH: return "npcdata::GetEWidth()";
        case GETNPCDATAFAMILY: return "npcdata::GetFamily()";
        case GETNPCDATAFLAGS: return "npcdata::GetFlags()";
        case GETNPCDATAFLAGS2: return "npcdata::GetFlags2()";
        case GETNPCDATAFRAMERATE: return "npcdata::GetFramerate()";
        case GETNPCDATAHALT: return "npcdata::GetHaltRate()";
        case GETNPCDATAHEIGHT: return "npcdata::GetHeight()";
        case GETNPCDATAHITHEIGHT: return "npcdata::GetHitHeight()";
        case GETNPCDATAHITSFX: return "npcdata::GetHitSFX()";
        case GETNPCDATAHITWIDTH: return "npcdata::GetHitWidth()";
        case GETNPCDATAHITZ: return "npcdata::GetHitZHeight()";
        case GETNPCDATAHOMING: return "npcdata::GetHoming()";
        case GETNPCDATAHP: return "npcdata::GetHP()";
        case GETNPCDATAHUNGER: return "npcdata::GetHunger()";
        case GETNPCDATAHXOFS: return "npcdata::GetHitXOffset()";
        case GETNPCDATAHYOFS: return "npcdata::GetHitYOffset()";
        case GETNPCDATARANDOM: return "npcdata::GetRandom()";
        case GETNPCDATASCRIPTDEF: return "npcdata::GetScriptDefense()";
        case GETNPCDATASHEIGHT: return "npcdata::GetSHeight()";
        case GETNPCDATASIZEFLAG: return "npcdata::GetSizeFlag()";
        case GETNPCDATASTEP: return "npcdata::GetStep()";
        case GETNPCDATASTILE: return "npcdata::GetSTile()";
        case GETNPCDATASWIDTH: return "npcdata::GetSWidth()";
        case GETNPCDATATILE: return "npcdata::GetTile()";
        case GETNPCDATATILEHEIGHT: return "npcdata::GetTileHeight()";
        case GETNPCDATATILEWIDTH: return "npcdata::GetTileWidth()";
        case GETNPCDATATOUCHDMG: return "npcdata::GetTouchDamage()";
        case GETNPCDATAWEAPON: return "npcdata::GetWeapon()";
        case GETNPCDATAWIDTH: return "npcdata::GetWidth()";
        case GETNPCDATAWPNDAMAGE: return "npcdata::GetWeaponDamage()";
        case GETNPCDATAWPNSPRITE: return "npcdata::GetWeaponSprite()";
        case GETNPCDATAXOFS: return "npcdata::GetDrawXOffset()";
        case GETNPCDATAYOFS: return "npcdata::GetDrawYOffset()";
        case GETNPCDATAZOFS: return "npcdata::GetDrawZOffset()";
        case SETNPCDATAANIM: return "npcdata::SetAnim()";
        case SETNPCDATACSET: return "npcdata::SetCSet()";
        case SETNPCDATAEANIM: return "npcdata::SetEAnim()";
        case SETNPCDATAEHEIGHT: return "npcdata::SetEHeight()";
        case SETNPCDATAETILE: return "npcdata::SetETile()";
        case SETNPCDATAEWIDTH: return "npcdata::SetEWidth()";
        case SETNPCDATAFAMILY: return "npcdata::SetFamily()";
        case SETNPCDATAFLAGS: return "npcdata::SetFlags()";
        case SETNPCDATAFLAGS2: return "npcdata::SetFlags2()";
        case SETNPCDATAHEIGHT: return "npcdata::SetHeight()";
        case SETNPCDATAHP: return "npcdata::SetHP()";
        case SETNPCDATASHEIGHT: return "npcdata::SetSHeight()";
        case SETNPCDATASTILE: return "npcdata::SetSTile()";
        case SETNPCDATASWIDTH: return "npcdata::SetSWidth()";
        case SETNPCDATATILE: return "npcdata::SetTile()";
        case SETNPCDATAWIDTH: return "npcdata::SetWidth()";
	}

	return nullptr;
}
