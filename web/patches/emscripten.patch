diff --git a/src/settings.js b/src/settings.js
index c382fca..2d2e455 100644
--- a/src/settings.js
+++ b/src/settings.js
@@ -1618,6 +1618,10 @@ var USE_COCOS2D = 0;
 // [compile+link]
 var USE_MODPLUG = false;
 
+// 1 = use libgme from emscripten-ports
+// [link]
+var USE_GME = false;
+
 // Formats to support in SDL2_image. Valid values: bmp, gif, lbm, pcx, png, pnm,
 // tga, xcf, xpm, xv
 // [link]
diff --git a/tools/ports/gme.py b/tools/ports/gme.py
new file mode 100644
index 0000000..3ad43fa
--- /dev/null
+++ b/tools/ports/gme.py
@@ -0,0 +1,66 @@
+# Copyright 2022 The Emscripten Authors.  All rights reserved.
+# Emscripten is available under two separate licenses, the MIT license and the
+# University of Illinois/NCSA Open Source License.  Both these licenses can be
+# found in the LICENSE file.
+
+import os
+import shutil
+import logging
+
+TAG = '0.6.3'
+HASH = '1d45e1c9702061add6fc6ccabe650806adb2487309518784aa1e510f4b4d913a7452141d89f1df06d5a79004c46d3d233eca8cea9e57722df6c6d8e06d0b9b91'
+
+
+def needed(settings):
+  return settings.USE_GME
+
+
+def get(ports, settings, shared):
+  source_dir = 'mpyne-game-music-emu-e76bdc0cb916'
+  ports.fetch_project('gme', 'https://bitbucket.org/mpyne/game-music-emu/get/' + TAG + '.zip', sha512hash=HASH)
+
+  def create(final):
+    logging.info('building port: gme')
+
+    source_path = os.path.join(ports.get_dir(), 'gme', source_dir)
+    dest_path = os.path.join(ports.get_build_dir(), 'gme')
+
+    shutil.rmtree(dest_path, ignore_errors=True)
+    shutil.copytree(source_path, dest_path)
+
+    flags = [
+      '-O2',
+      '-DVGM_YM2612_GENS',
+      '-DBLARGG_BUILD_DLL',
+      '-Wno-inconsistent-missing-override',
+    ]
+
+    ports.build_port(
+      f'{dest_path}/gme',
+      final,
+      'gme',
+      includes=[
+        os.path.join(source_path, 'gme'),
+      ],
+      flags=flags,
+      exclude_files=[],
+      exclude_dirs=[
+        'demo',
+      ]
+    )
+
+    ports.install_headers(source_path, pattern='gme/*.h', target='gme')
+
+  return [shared.cache.get_lib('gme.a', create, what='port')]
+
+
+def clear(ports, settings, shared):
+  shared.cache.erase_lib('gme.a')
+
+
+def process_args(ports):
+  return []
+
+
+def show():
+  return 'GME (USE_GME; GPL 2.1 license)'
diff --git a/tools/ports/sdl2_mixer.py b/tools/ports/sdl2_mixer.py
index 4aca8c2..47a20f3 100644
--- a/tools/ports/sdl2_mixer.py
+++ b/tools/ports/sdl2_mixer.py
@@ -5,13 +5,14 @@
 
 import os
 
-TAG = 'release-2.8.0'
-HASH = '494ccd74540f74e717f7e4f1dc7f96398c0f4b1883ab00c4a76b0c7239bd2c185cb4358a35ef47819c49e7c14dac7c37b98a29c7b5237478121571f5e7ac4dfc'
+TAG = 'zc-fork-1'
+HASH = '00e0199e3c0b1364517d991bf64fb8774b1e820217e0ae3d4993716bd7326ef2b577946644fb937e3e562b54101222a75300dba49ff1ae3639708e3280ed4e85'
 
 deps = ['sdl2']
 variants = {
   'sdl2_mixer_mp3': {'SDL2_MIXER_FORMATS': ["mp3"]},
   'sdl2_mixer_none': {'SDL2_MIXER_FORMATS': []},
+  'sdl2_mixer_mid': {'SDL2_MIXER_FORMATS': ["mid"]},
 }
 
 
@@ -34,7 +35,7 @@ def get_lib_name(settings):
 def get(ports, settings, shared):
   sdl_build = os.path.join(ports.get_build_dir(), 'sdl2')
   assert os.path.exists(sdl_build), 'You must use SDL2 to use SDL2_mixer'
-  ports.fetch_project('sdl2_mixer', f'https://github.com/libsdl-org/SDL_mixer/archive/{TAG}.zip', sha512hash=HASH)
+  ports.fetch_project('sdl2_mixer', 'https://github.com/connorjclark/SDL_mixer/archive/refs/tags/' + TAG + '.zip', sha512hash=HASH)
   libname = get_lib_name(settings)
 
   def create(final):
@@ -113,6 +114,9 @@ def process_dependencies(settings):
   if "mod" in settings.SDL2_MIXER_FORMATS:
     deps.append('libmodplug')
     settings.USE_MODPLUG = 1
+  if "gme" in settings.SDL2_MIXER_FORMATS:
+    deps.append('gme')
+    settings.USE_GME = 1
 
 
 def show():
diff --git a/tools/settings.py b/tools/settings.py
index fc884b3..1b6b8c3 100644
--- a/tools/settings.py
+++ b/tools/settings.py
@@ -37,6 +37,7 @@ PORTS_SETTINGS = {
     'USE_COCOS2D',
     'USE_ICU',
     'USE_MODPLUG',
+    'USE_GME',
     'USE_SDL_MIXER',
     'USE_SDL_IMAGE',
     'USE_SDL_TTF',
