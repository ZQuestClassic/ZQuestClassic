// Credits to Lejes for making the A* algorithm actually work in ZC! I probably wouldn't have ended up making my version (which is older than this) work without the assistance!
// Optimised for 2.55 on 24th May, 220 by ZoriaRPG. 

namespace astar
{
	const int SETSIZE = 176;
	
	ffc script AstarFFC
	{
		void run()
		{
			while (true)
			{
				if (Link->PressEx1)
				{
					Astar(this, ComboAt(Link->X + 8, Link->Y + 8));
				}
				
				Waitframe();
			}
		}
	}

	void Astar(ffc Pathfinder, int Dest)
	{
		int PathfinderLoc = ComboAt(CenterX(Pathfinder), CenterY(Pathfinder));
		int current = PathfinderLoc;
		
		int ClosedSet[SETSIZE]; // The set of nodes already evaluated.
		int OpenSet[SETSIZE]; // The set of tentative nodes to be evaluated, initially containing the start node
		int Came_From[SETSIZE]; // The map of navigated nodes.
		int total_path[SETSIZE];

		int g_score[SETSIZE]; // Cost from start along best known path.

		// Estimated total cost from start to goal through y.
		int f_score[SETSIZE];
		int i = 0;
		//AstarArrayInit(OpenSet, ClosedSet, Came_From, g_score, f_score);
		for (; i < SETSIZE; ++i)
		{
			OpenSet[i] = -1;
			ClosedSet[i] = -1;
			Came_From[i] = -1;
			total_path[i] = -1;
			g_score[i] = 9999;
			f_score[i] = 9999;
		}
		
		OpenSet[0] = PathfinderLoc;
		g_score[current] = 0;
		f_score[current] = ManhattanDist(PathfinderLoc, Dest);
	   
		until(ListIsEmpty(OpenSet))//while OpenSet is not empty
		{
			current = FindNode(OpenSet);
			for (i = 0; i < SETSIZE; ++i)
			{
				if (OpenSet[i] > -1 && current > -1)
				{
					if 
					(
						f_score[OpenSet[i]] < f_score[current] 
						|| 
						(
							f_score[OpenSet[i]] == f_score[current] && ManhattanDist(OpenSet[i], Dest) < ManhattanDist(current, Dest)
						)
					)
					{
						current = OpenSet[i];
					}
				}
			}

			if(current == Dest)
			{
				reconstruct_path(total_path, Came_From, current, PathfinderLoc);
				for (int i = 175; i >= 0; --i)
				{
					Trace(total_path[i]);
					if (total_path[i] > -1)
					{
						//Pathfinder->X = ComboX(total_path[i]);
						//Pathfinder->Y = ComboY(total_path[i]);
						
						// Correct vvv
						Screen->ComboD[total_path[i]] = 897;
						Screen->ComboC[total_path[i]] = 7;
						Waitframes(15); //Why are we waiting here? Z
						
						// int walkVar = i + 1;
						// while(walkVar <= -1)
						// {
							// walkVar += 1;
						// }
						
						// if(total_path[walkVar] == PathfinderLoc - 16)
						// {
							// for(int i2 = 0; i2 < 16; i2 += 1)
							// {
								// Pathfinder->Y -= 1;
								
								// Waitframe();
							// }
						// }
						// else if(total_path[walkVar] == PathfinderLoc + 16)
						// {
							// for(int i2 = 0; i2 < 16; i2 += 1)
							// {
								// Pathfinder->Y += 1;
								
								// Waitframe();
							// }
						// }
						// else if(total_path[walkVar] == PathfinderLoc - 1)
						// {
							// for(int i2 = 0; i2 < 16; i2 += 1)
							// {
								// Pathfinder->X -= 1;
								
								// Waitframe();
							// }
						// }
						// else if(total_path[walkVar] == PathfinderLoc + 1)
						// {
							// for(int i2 = 0; i2 < 16; i2 += 1)
							// {
								// Pathfinder->X += 1;
								
								// Waitframe();
							// }
						// }
						
						// break;
					}
				}
			   
				break;
			}

			RemoveNode(OpenSet, current);//OpenSet.Remove(current)
			AddNode(ClosedSet, current);//ClosedSet.Add(current)
			//dirs
			for(i = 1; i <= 4; ++i)
			{
				int neighbor;// = current + i;
				switch(i)
				{
					case 1: {neighbor = current - 16; break;}
					case 2: {neighbor = current + 16; break;}
					case 3: {neighbor = current - 1; break;}
					case 4: {neighbor = current + 1; break;}
				}
				
				
				unless (ValInRange(0, 175, neighbor))
				{
					continue;
				}
				if(NumInArray(ClosedSet, neighbor) || (Screen->ComboS[neighbor]) ) // neighbor in ClosedSet
				{
						continue; // Ignore the neighbor which is already evaluated.
				}

				int tentative_g_score = g_score[current] + ManhattanDist(current, neighbor);
				//if (tentative_g_score < g_score[neighbor] || !NumInArray(OpenSet, neighbor))      // Discover a new node
				/*Note, ZScript used to not short circuit. If this expr relies on calling 'NumInArray()' even if the first condition
					evaluates false, then it must be rewritten as two statements. 
					I also inverted the logic so that it can use a single unless stmt for both sides of the logical OR
					-Z
				*/
				unless (tentative_g_score >= g_score[neighbor] || NumInArray(OpenSet, neighbor))      // Discover a new node
				{
					Came_From[neighbor] = current;
					g_score[neighbor] = tentative_g_score;
					f_score[neighbor] = g_score[neighbor] + ManhattanDist(neighbor, Dest);
					unless (NumInArray(OpenSet, neighbor))
					{
						AddNode(OpenSet, neighbor);
					}
				}
			   
				// Audio->PlaySound(2);
			}
		   
			for(i = 0; i < SETSIZE; ++i)
			{
				if(OpenSet[i] > -1)
				{
					Screen->ComboD[OpenSet[i]] = 896;
					Screen->ComboC[OpenSet[i]] = 5;
				}
			   
				if(ClosedSet[i] > -1)
				{
					Screen->ComboD[ClosedSet[i]] = 898;
					Screen->ComboC[ClosedSet[i]] = 8;
				}
				
				if (g_score[i] < 9999)
				{
					Screen->DrawInteger(6, ComboX(i), ComboY(i) + 10, FONT_SP, 0x06, 0x07, 0, 0, g_score[i], 0, OP_OPAQUE);
				}
				if (f_score[i] < 9999)
				{
					Screen->DrawInteger(6, ComboX(i), ComboY(i), FONT_SP, 0x01, 0x07, 0, 0, f_score[i], 0, OP_OPAQUE);
				}
				Screen->DrawInteger(6, 0, 0, FONT_Z1, 0x01, 0x07, 0, 0, current, 0, OP_OPAQUE);
				Screen->DrawInteger(6, 0, 16, FONT_Z1, 0x01, 0x07, 0, 0, OpenSet[0], 0, OP_OPAQUE);
			}
		   
			Waitframe();
		}

		//return failure
	} //end void Astar

	void reconstruct_path(int total_path, int Came_From, int current, int PathfinderLoc)
	{
		total_path[0] = current;
		
		for (int i = 1; i < 176; ++i) //intentionally starting from totalpath[1] -Z
		{
			total_path[i] = Came_From[current];
			current = Came_From[current];
			if (current == PathfinderLoc)
			{
				break;
			}
		}
	}
	 
	int ManhattanDist(int loc1, int loc2)
	{
		return (Abs(ComboX(loc2) - ComboX(loc1)) + Abs(ComboY(loc2) - ComboY(loc1)));
	}
	 
	// Returns if an array is "empty". Returns true if all elements of an array equal -1. Overloaded to check a specific indice.
	bool ListIsEmpty(float list_arr_ptr)
	{
		//Assumes equal size of all arrays as constant. -Z
		//Was//for(int i = 0; i < SizeOfArray(list_arr); i += 1)
		for(int i = 0; i < SETSIZE; ++i)
		{
			if(list_arr_ptr[i] > -1)
			{
				return false;
			}
		}
	       
		return true;
	}
	 
	// Returns if an indice on a list array is "empty".
	bool ListIsEmpty(float list_arr_ptr, int indice)
	{
		if(list_arr_ptr[indice] <= -1)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	 
	// returns the size of an array "list"
	int ListSize(float list_arr_ptr)
	{
		int size = 0;
	       
		//for(int i = 0; i < SizeOfArray(list_arr); i += 1)
		for(int i = 0; i < SETSIZE; ++i)
		{
			unless(ListIsEmpty(list_arr_ptr, i))
			{
				++size;
			}
		}
	       
		return size;
	}
	 
	// Adds a 'node' to an array 'list'
	int AddNode(int list_arr_ptr, int locToAdd)
	{
		//for(int i = 0; i < SizeOfArray(list_arr); i += 1)
		for(int i = 0; i < SETSIZE; ++i)
		{
			// if(ListIsEmpty(list_arr, i))
			if(list_arr_ptr[i] <= -1)
			{
				list_arr_ptr[i] = locToAdd;
				return i;
				//break; //returning will break, anyway. -Z
			}
		}
	}
	 
	// Adds a 'node' to an array 'list'
	int AddNode(int locToAdd, int val_gCost, int val_hCost, int val_Parent, int list_arr_ptr, int list_gCost, int list_hCost, int list_Parent)
	{
		//for(int i = 0; i < SizeOfArray(list_arr); i += 1)
		for(int i = 0; i < SETSIZE; ++i)
		{
			if(list_arr_ptr[i] <= -1)
			{
				list_arr_ptr[i] = locToAdd;
				list_gCost[i] = val_gCost;
				list_hCost[i] = val_hCost;
				list_Parent[i] = val_Parent;
			       
				return i;
			       
				break;
			}
		}
	}
	 
	// Removes a 'node' from an array 'list'
	void RemoveNode(int list_arr_ptr, int node)
	{
		// if(!ListIsEmpty(list_arr, indice))
		//for (int i = 0; i < SizeOfArray(list_arr); i++)
		for (int i = 0; i < SETSIZE; ++i)
		{
			if (list_arr_ptr[i] == node)
			{
				list_arr_ptr[i] = -1;
			}
		}
	}
	 
	// Returns if a variable is in an array.
	bool NumInArray(float arr_ptr, float num)
	{
		//for(int i = 0; i < SizeOfArray(arr); i += 1)
		for(int i = (SizeOfArray(arr_ptr)-1); i >= 0; --i)
		{
			if(arr_ptr[i] == num)
			{
				return true;
			}
		}
	       
		return false;
	}
	 
	// Returns the lowest number in array 'arr'.
	// Set checkForValid to true if you want to make sure the returned value is "valid" (ie. above -1).
	float LowestVal(float arr_ptr, bool checkForValid)
	{
		int i = (SizeOfArray(arr_ptr)-1);
		float smallest = arr_ptr[i];
		/*for(int i = 1; i < sz; ++i)
		{
			if(checkForValid)
			{
				if(arr_ptr[i] > -1 && arr_ptr[i] < smallest)
				{
					smallest = arr_ptr[i];
				}
			}
			else if(arr[i] < smallest)
			{
				smallest = arr_ptr[i];
			}
		}
		*/ 
		//SHould me moderately faster this way. -Z
		for(; i >= 0; --i)
		{
			if(checkForValid)
			{
				if(arr_ptr[i] > -1 && arr_ptr[i] < smallest)
				{
					smallest = arr_ptr[i];
				}
			}
			else if(arr[i] < smallest)
			{
				smallest = arr_ptr[i];
			}
		}
		return smallest;
	}
	 
	//Well, this won't find duplicates. -Z
	float LowestIndice(float arr_ptr, bool checkForValid)
	{
		int smallestVal = arr_ptr[0];
		int smallestIndice = 0;
		int sz = SizeOfArray(arr_ptr); 	//This won't change, and it is faster to check this var than 
						//to perform a repeated internal size check. -Z 
		for(int i = 1; i < sz; ++i)
		{
			if(checkForValid)
			{
				if(arr_ptr[i] < smallestVal && arr_ptr[i] > -1)
				{
					smallestVal = arr_ptr[i];
					smallestIndice = i;
				}
			}
			else if(arr[i] < smallestVal)
			{
				smallestVal = arr_ptr[i];
				smallestIndice = i;
			}
		}
		return smallestIndice;
	}
	 
	// Returns if a number is in range of range_min (inclusive) and range_max (inclusive).
	bool ValInRange(float min, float max, float num)
	{
		if(min <= max)
		{
			if(num >= min && num <= max)
			{
				return true;
			}
		}
		else
		{
			if(num >= max && num <= min)
			{
				return true;
			}
		}
	       
	}

	void AstarArrayInit(int OpenSet_ptr, int ClosedSet_ptr, int Came_From_ptr, int g_score_ptr, int f_score_ptr)
	{
		//const int SETSIZE = 176;
		for (int i = 0; i < SETSIZE; ++i)
		{
			OpenSet_ptr[i] = -1;
			ClosedSet_ptr[i] = -1;
			Came_From_ptr[i] = -1;
			g_score_ptr[i] = 9999;
			f_score_ptr[i] = 9999;
		}
	}

	int FindNode(int list_arr_ptr)
	{
		//const int SETSIZE = 176;
		for (int i = 0; i < SETSIZE; ++i)
		{
			if (list_arr_ptr[i] > 0)
			{
				return list_arr_ptr[i];
			}
		}
		return -1;
	}
}