#include "std_zh/std_constants.zh"

// Combo to be used for generic script vehicle FFCs. This should be
// an invisible combo with no type or flag. It cannot be combo 0.
const int FFCS_INVISIBLE_COMBO = 1;

const int FFCS_MIN_FFC = 1;
const int FFCS_MAX_FFC = 128;

int CheckFFCScript(char32[] scriptname)
{
	int id = Game->GetFFCScript(scriptname);
	if(id < 0)
	{
		printf("FFC Script '%s' is not assigned to a slot!\n", scriptname);
		return 0;
	}
	return id;
}
int RunFFCScript(int scriptNum, untyped[] args = NULL)
{
    // Invalid script
    if(scriptNum<0 || scriptNum>511)
        return 0;
    
    ffc theFFC;
    
    // Find an FFC not already in use
    for(int i=FFCS_MIN_FFC; i<=FFCS_MAX_FFC; i++)
    {
        theFFC=Screen->LoadFFC(i);
        
        if(theFFC->Script!=0 ||
         (theFFC->Data!=0 && theFFC->Data!=FFCS_INVISIBLE_COMBO) ||
         theFFC->Flags[FFCF_CHANGER])
            continue;
        
        // Found an unused one; set it up
        theFFC->Data=FFCS_INVISIBLE_COMBO;
        theFFC->Script=scriptNum;
        
        if(args!=NULL)
        {
            for(int j=Min(SizeOfArray(args), 8)-1; j>=0; j--)
                theFFC->InitD[j]=args[j];
        }
        
        return i;
    }
    
    // No FFCs available
    return 0;
}

ffc RunFFCScriptOrQuit(int scriptNum, untyped[] args = NULL)
{
    // Invalid script
    if(scriptNum<0 || scriptNum>511)
        Quit();
    
    int ffcID=RunFFCScript(scriptNum, args);
    if(ffcID==0)
        Quit();
    
    return Screen->LoadFFC(ffcID);
}

int FindFFCRunning(int scriptNum)
{
    // Invalid script
    if(scriptNum<0 || scriptNum>511)
        return 0;
    
    ffc f;
    
    for(int i=1; i<=128; i++)
    {
        f=Screen->LoadFFC(i);
        if(f->Script==scriptNum)
            return i;
    }
    
    // No FFCs running it
    return 0;
}

int FindNthFFCRunning(int scriptNum, int n)
{
    // Invalid script
    if(scriptNum<0 || scriptNum>511)
        return 0;
    
    ffc f;
    
    for(int i=1; i<=128; i++)
    {
        f=Screen->LoadFFC(i);
        if(f->Script==scriptNum)
        {
            n--;
            if(n==0)
                return i;
        }
    }
    
    // Not that many FFCs running it
    return 0;
}

int CountFFCsRunning(int scriptNum)
{
    // Invalid script
    if(scriptNum<0 || scriptNum>511)
        return 0;
    
    ffc f;
    int numFFCs=0;
    
    for(int i=1; i<=128; i++)
    {
        f=Screen->LoadFFC(i);
        if(f->Script==scriptNum)
            numFFCs++;
    }
    
    return numFFCs;
}

DEFINE MIN_NPCSCRIPT = 1;
DEFINE MAX_NPCSCRIPT = 255;
int CheckNPCScript(char32[] scriptname)
{
	int id = Game->GetNPCScript(scriptname);
	if(id < 0)
	{
		printf("NPC Script '%s' is not assigned to a slot!\n", scriptname);
		return 0;
	}
	return id;
}
npc RunNPCScript(int ID, int scriptNum, untyped[] args = NULL)
{
	// Invalid script
	if(scriptNum < MIN_NPCSCRIPT || scriptNum > MAX_NPCSCRIPT)
		return NULL;
	
	npc obj = Screen->CreateNPC(ID);
	obj->Script = scriptNum;
	if (args)
	{
		for (int q = SizeOfArray(args) - 1; q >= 0; --q)
			obj->InitD[q] = args[q];
	}
	return obj;
}

npc RunNPCScriptAt(int ID, int scriptNum, int x, int y, untyped[] args = NULL)
{
	npc obj = RunNPCScript(ID, scriptNum, args);
	obj->X = x;
	obj->Y = y;
	return obj;
}

DEFINE MIN_LWEAPONSCRIPT = 1;
DEFINE MAX_LWEAPONSCRIPT = 255;
int CheckLWeaponScript(char32[] scriptname)
{
	int id = Game->GetLWeaponScript(scriptname);
	if(id < 0)
	{
		printf("LWeapon Script '%s' is not assigned to a slot!\n", scriptname);
		return 0;
	}
	return id;
}
lweapon RunLWeaponScript(int ID, int scriptNum, untyped[] args = NULL)
{
	// Invalid script
	if(scriptNum < MIN_LWEAPONSCRIPT || scriptNum > MAX_LWEAPONSCRIPT)
		return NULL;
	
	lweapon obj = Screen->CreateLWeapon(ID);
	obj->Script = scriptNum;
	if (args)
	{
		for (int q = SizeOfArray(args) - 1; q >= 0; --q)
			obj->InitD[q] = args[q];
	}
	return obj;
}

lweapon RunLWeaponScriptAt(int ID, int scriptNum, int x, int y, untyped[] args = NULL)
{
	lweapon obj = RunLWeaponScript(ID, scriptNum, args);
	obj->X = x;
	obj->Y = y;
	return obj;
}

DEFINE MIN_EWEAPONSCRIPT = 1;
DEFINE MAX_EWEAPONSCRIPT = 255;
int CheckEWeaponScript(char32[] scriptname)
{
	int id = Game->GetEWeaponScript(scriptname);
	if(id < 0)
	{
		printf("EWeapon Script '%s' is not assigned to a slot!\n", scriptname);
		return 0;
	}
	return id;
}
eweapon RunEWeaponScript(int ID, int scriptNum, untyped[] args = NULL)
{
	// Invalid script
	if(scriptNum < MIN_EWEAPONSCRIPT || scriptNum > MAX_EWEAPONSCRIPT)
		return NULL;
	
	eweapon obj = Screen->CreateEWeapon(ID);
	obj->Script = scriptNum;
	if (args)
	{
		for (int q = SizeOfArray(args) - 1; q >= 0; --q)
			obj->InitD[q] = args[q];
	}
	return obj;
}

eweapon RunEWeaponScriptAt(int ID, int scriptNum, int x, int y, untyped[] args = NULL)
{
	eweapon obj = RunEWeaponScript(ID, scriptNum, args);
	obj->X = x;
	obj->Y = y;
	return obj;
}

DEFINE MIN_ITEMSPRITESCRIPT = 1;
DEFINE MAX_ITEMSPRITESCRIPT = 255;
int CheckItemSpriteScript(char32[] scriptname)
{
	int id = Game->GetItemSpriteScript(scriptname);
	if(id < 0)
	{
		printf("ItemSprite Script '%s' is not assigned to a slot!\n", scriptname);
		return 0;
	}
	return id;
}
itemsprite RunItemSpriteScript(int ID, int scriptNum, untyped[] args = NULL)
{
	// Invalid script
	if(scriptNum < MIN_ITEMSPRITESCRIPT || scriptNum > MAX_ITEMSPRITESCRIPT)
		return NULL;
	
	itemsprite obj = Screen->CreateItem(ID);
	obj->Script = scriptNum;
	if (args)
	{
		for (int q = SizeOfArray(args) - 1; q >= 0; --q)
			obj->InitD[q] = args[q];
	}
	return obj;
}

itemsprite RunItemSpriteScriptAt(int ID, int scriptNum, int x, int y, untyped[] args = NULL)
{
	itemsprite obj = RunItemSpriteScript(ID, scriptNum, args);
	obj->X = x;
	obj->Y = y;
	return obj;
}

DEFINE MIN_GENERICSCRIPT = 1;
DEFINE MAX_GENERICSCRIPT = 511;
int CheckGenericScript(char32[] scriptname)
{
	int id = Game->GetGenericScript(scriptname);
	if(id < 0)
	{
		printf("Generic Script '%s' is not assigned to a slot!\n", scriptname);
		return 0;
	}
	return id;
}
genericdata RunGenericScript(int scriptNum, untyped[] args = NULL)
{
	// Invalid script
	if(scriptNum < MIN_GENERICSCRIPT || scriptNum > MAX_GENERICSCRIPT)
		return NULL;
	
	genericdata obj = Game->LoadGenericData(scriptNum);
	if (args)
	{
		for (int q = SizeOfArray(args) - 1; q >= 0; --q)
			obj->InitD[q] = args[q];
	}
	obj->Running = true;
	return obj;
}
genericdata RunGenericScriptFrz(int scriptNum, untyped[] args = NULL)
{
	// Invalid script
	if(scriptNum < MIN_GENERICSCRIPT || scriptNum > MAX_GENERICSCRIPT)
		return NULL;
	
	genericdata obj = Game->LoadGenericData(scriptNum);
	if (args)
	{
		for (int q = SizeOfArray(args) - 1; q >= 0; --q)
			obj->InitD[q] = args[q];
	}
	obj->RunFrozen();
	return obj;
}
