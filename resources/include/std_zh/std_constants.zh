// Contains required constants for std.zh and ZScript functions.

#include "std_zh/std.cfg"
#include "std_zh/limits.zh"

//some type shorthands
typedef const int define;
typedef const int DEFINE;
typedef const float DEFINEF;
typedef const long DEFINEL;
typedef const bool DEFINEB;
typedef const untyped DEFINEU;

typedef const int CONFIG;
typedef const float CONFIGF;
typedef const long CONFIGL;
typedef const bool CONFIGB;
typedef const untyped CONFIGU;

DEFINE ERR_RETURN 			= -1; 

///////////////////////
/// Mathematical values

DEFINEF PI				= 3.1416;
DEFINEF PI2				= 6.2832;
DEFINEF E				= 2.7183;

const rgb INVALID_COLOR = <rgb>(-1);

DEFINEF RADIAN 			= 57.2958; //Multiplication value for converting radians to degrees. 
DEFINEF DEGREE			= 0.0174; //Multiplication value for converting degrees to radians.

DEFINE SQRT_ERROR			= 464; // The return value of SafeSqrt() if a negative value is passed. 
DEFINEF SQRT_MAX			= 463.4095; //The largest square root thet ZC can return.


////////////////////////////
/// ZC Minimums and Maximums

DEFINEF MAX_CONSTANT		= 214747.9999 + (OPTION_VALUE(TRUE_INT_SIZE) ? 0.3648 : 0);
//DEFINEF MAX_VARIABLE		= 214748.3648; //Obviously this is truncated as a constant. Equal to ((2^31)-1)/10000
DEFINEF MIN_CONSTANT		= -214747.9999 - (OPTION_VALUE(TRUE_INT_SIZE) ? 0.3649 : 0);


DEFINE MAX_SCRIPTDRAWINGCOMMANDS	= 1000;

DEFINE MAX_INT 			= 214747 + (OPTION_VALUE(TRUE_INT_SIZE) ? 1 : 0);
DEFINE MIN_INT 			= -214747 - (OPTION_VALUE(TRUE_INT_SIZE) ? 1 : 0);
DEFINE MAX_FLOAT 			= 214747.9999 + (OPTION_VALUE(TRUE_INT_SIZE) ? 0.3648 : 0);
DEFINE MIN_FLOAT 			= -214747.9999 - (OPTION_VALUE(TRUE_INT_SIZE) ? 0.3649 : 0);
DEFINE MAX_SHORT             = 32767;
DEFINE MIN_SHORT             = -32768;
DEFINE MAX_BYTE              = 255;
DEFINE MIN_BYTE              = 0;

DEFINE MAX_COUNTER 			= WORD_MAX;
DEFINE MIN_COUNTER 			= WORD_MIN;

DEFINEL MAX_TIME             = 1944000000L; //Max value of 'Game->Time'

DEFINE MIN_LWEAPON 			= 1; //Lowest numbered objects.
DEFINE MIN_EWEAPON 			= 1;
DEFINE MIN_NPC			= 1;
DEFINE MIN_ITEM			= 1;
DEFINE MAX_LWEAPON 			= 255; //1 to 255.
DEFINE MAX_EWEAPON 			= 255; //1 to 255.
DEFINE MAX_NPCS	 		= 255; //1 to 255.
DEFINE MAX_ITEM	 		= 255; //1 to 255;

DEFINE MIN_FFC			= 1;
DEFINE MAX_FFC			= 128;
DEFINE MIN_OBJ			= 1; //Short, const for loops.

DEFINE MIN_COUNTER_INDEX		= 0;
DEFINE MAX_COUNTER_INDEX		= 106;
DEFINE NUM_COUNTERS			= 107; //0 to 106

DEFINE MIN_COMBO_POS 		= 0;
DEFINE MAX_COMBO_POS 		= 175;
DEFINE NUM_COMBO_POS 		= 176;

DEFINE MAX_OBJECT_POINTERS 		= 255; //Max of any one type. 
DEFINE MAX_WEAPON_POINTERS 		= 510; //eweapon and lweapon combined.
DEFINE MAX_TOTAL_OBJECT_POINTERS 	= 1020; //Max shared, across the three types. 
DEFINE MAX_SPRITES 			= 1020; //npc, eweapon, and lweapon
DEFINE MAX_DRAWING 			= 1000; //Maximum number of simultaneous drawing commands.

DEFINE MIN_BITMAP_X			= 0; //Legal Bitmap Region for Drawing
DEFINE MAX_BITMAP_X			= 511;
DEFINE MIN_BITMAP_Y			= 0;
DEFINE MAX_BITMAP_Y		 	= 511;

DEFINE MAX_GLOBAL_VARIABLES		= 255;
DEFINE MAX_VARIABLES			= 255; //Vars in operation at any one time.
DEFINE MAX_BITSPERVARIABLE		= 18;

DEFINE MIN_ITEMDATA			= 0;
DEFINE MAX_ITEMDATA			= 255;
DEFINE NUM_ITEMDATA         = 256;

DEFINE NUM_LEVELS           = 512;

DEFINE MAX_ARRAY_POINTERS	 	= 4095; //Arrays in operation. 
DEFINE MAX_TILES 			= 214499;
DEFINE MAX_COMBOS			= 65279;
DEFINE MAX_STRINGS			= 65519; //Strings in String Editor

DEFINE HP_PER_HEART			= 16;
DEFINE MP_PER_BLOCK			= 32;

DEFINE MAX_MESSAGES			= 65535;
DEFINE MAX_MESSAGELENGTH		= 145; //Pass an array of (at least) this size to Game->GetMessage

DEFINE MAX_MAPS 			= 256;
DEFINE MAX_DMAPS			= 512;
DEFINE MAX_DMAPNAMELENGTH		= 21; //Size of arrays to pass to Game->GetDMapX
DEFINE MAX_DMAPTITLELENGTH		= 21;
DEFINE MAX_DMAPINTROLENGTH		= 73;

//FFC Size Limitations
DEFINE MAX_FFC_W 			= 4; //Four tiles wide
DEFINE MAX_FFC_H 			= 4; //Four tiles high
DEFINE MAX_FFC_EFFECT_W		= 64; //Sixty-four pixels wide.
DEFINE MAX_FFC_EFFECT_H		= 64; //Sixty four pixels high. 

//Default array sizes
DEFINE INIT_D_SIZE			= 8;
DEFINE INIT_A_SIZE			= 2;
DEFINE MISC_SIZE			= 32;
DEFINE NPC_ATTRIBUTES_SIZE		= 32;
DEFINE ITEM_ATTRIBUTES_SIZE		= 10;
DEFINE GAMEMISC_SIZE 		= 32;
DEFINE MAX_DEFENSE 			= 42;
DEFINE MAX_DEFENCE 			= 42;

/////////////////////
/// Screen Dimensions

DEFINE SCREEN_W 			= 256; //X width of the Screen, starting at 0 (left) and goign right). 
//!SCREEN_WIDTH  is already called in stdExtra.zh
DEFINE SCREEN_H 			= 176; //Y height of the screen, starting at 0 (top), going down.
//!SCREEN_HEIGHT  is already called in stdExtra.zh

DEFINE SCREEN_RIGHT 			= 255; //The rightmost screen pixel.
DEFINE SCREEN_LEFT 			= 0; //The leftmost screen pixel.
DEFINE SCREEN_TOP 			= 0; //The top screen pixel, below the subscreen.
DEFINE SCREEN_BOTTOM 		= 175; //The lowest screen pixel.  

DEFINE SUBSCREEN_BOTTOM		= -1; //Bottom of passive subscreen.
DEFINE SUBSCREEN_TOP 		= -56; //Top of passive subscreen.
//! In stdExtra.zh, this is -64. ?!

DEFINE SCREEN_CENTER_X 		= 128;
DEFINE SCREEN_CENTRE_X 		= 128;
DEFINE SCREEN_CENTER_Y 		= 88; 
DEFINE SCREEN_CENTRE_Y 		= 88; 


///////////////////
/// Game Properties

//Defaults from Init Data
DEFINEF GRAVITY			= 0.16;
DEFINEF TERMINAL_VELOCITY		= 3.20;
DEFINE JUMPING_LAYER_THRESHOLD	= 16;

//CSet Initial Colour Swatch positions
DEFINE CSET_0 	= 0; //Sixteen colours per, starting at '0' each.
DEFINE CSET_1 	= 16;
DEFINE CSET_2 	= 32;
DEFINE CSET_3 	= 48;
DEFINE CSET_4 	= 64;
DEFINE CSET_5 	= 80;
DEFINE CSET_6 	= 96;
DEFINE CSET_7 	= 112;
DEFINE CSET_8 	= 128;
DEFINE CSET_9 	= 144;
DEFINE CSET_10 	= 160;
DEFINE CSET_11 	= 176;
DEFINE CSET_12 	= 192;
DEFINE CSET_13 	= 208; //Warning: Using CSets 13 through 15 is not officially supported, 
DEFINE CSET_14 	= 224; //	  and may affect compatibility with future ZC builds.
DEFINE CSET_15 	= 240;


//Sound effect IDs. To be used for PlaySound().
DEFINE SFX_ARROW       = 1; // Arrow is fired.
DEFINE SFX_BEAM        = 2; // Sword beam is fired.
DEFINE SFX_BOMB        = 3; // Bomb explodes.
DEFINE SFX_BRANG       = 4; // Boomerang spinning.
DEFINE SFX_CHARGE1     = 35; // Sword powering up.
DEFINE SFX_CHARGE2     = 36; // Sword powering up again (Hurricane Spin).
DEFINE SFX_CURSOR      = 5; // Subscreen cursor.
DEFINE SFX_CLINK       = 6; // Shield is hit.
DEFINE SFX_CLEARED     = 7; // Chime when screen item appears.
DEFINE SFX_DINSFIRE    = 37; // Din's Fire blast.
DEFINE SFX_DODONGO     = 8; // Dodongo's roar.
DEFINE SFX_SHUTTER     = 9; // Shutter bang.
DEFINE SFX_EDEAD       = 10; // Enemy is killed.
DEFINE SFX_EHIT        = 11; // Enemy is hit.
DEFINE SFX_LOWHP       = 12; // Low hearts warning beep.
DEFINE SFX_FALL        = 38; // Enemy falls from ceiling (unused).
DEFINE SFX_FARORESWIND = 39; // Farore's Wind spell.
DEFINE SFX_FIRE        = 13; // Flame roar.
DEFINE SFX_FIREBALL    = 40; // Enemy fireball.
DEFINE SFX_GANON       = 14; // Music when Ganon appears/dies.
DEFINE SFX_GASP        = 15; // Boss is hit.
DEFINE SFX_GRASSCUT    = 41; // Grass or bush slashed.
DEFINE SFX_HAMMER      = 16; // Hammer pound.
DEFINE SFX_HAMMERPOST  = 42; // Pounded a post.
DEFINE SFX_HOOKSHOT    = 17; // Hookshot chain rattle.
DEFINE SFX_HOVER       = 43; // Hover boots.
DEFINE SFX_ICE         = 44; // Unused.
DEFINE SFX_JUMP        = 45; // Jumping.
DEFINE SFX_LENSOFF     = 46; // Lens of Truth off.
DEFINE SFX_LENSON      = 47; // Lens of Truth on.
DEFINE SFX_MSG         = 18; // Message typing.
DEFINE SFX_NAYRUSLOVE1 = 48; // Nayru's Love shield hum.
DEFINE SFX_NAYRUSLOVE2 = 49; // Nayru's Love shield running out.
DEFINE SFX_OUCH        = 19; // Link is hit.
DEFINE SFX_PICKUP      = 20; // Chime when item is held above head.
DEFINE SFX_PLACE       = 21; // Bomb is placed.
DEFINE SFX_PLINK       = 22; // Heart/Rupee is collected.
DEFINE SFX_PUSHBLOCK   = 50; // Pushed a block.
DEFINE SFX_REFILL      = 23; // Hearts being refilled.
DEFINE SFX_ROAR        = 24; // Aquamentus, Gleeok and Ganon's roar.
DEFINE SFX_ROCK        = 51; // Octorok rock is fired.
DEFINE SFX_ROCKETDOWN  = 52; // Spell rocket descends.
DEFINE SFX_ROCKETUP    = 53; // Spell rocket launched.
DEFINE SFX_SCALE       = 25; // Chime when fairy appears/is picked up.
DEFINE SFX_SEA         = 26; // "Ocean SFX" ambience.
DEFINE SFX_SECRET      = 27; // Chime when secret is discovered.
DEFINE SFX_SPINATTACK  = 54; // Sword spin.
DEFINE SFX_SPIRAL      = 28; // Link dies.
DEFINE SFX_SPLASH      = 55; // Splashing in shallow water.
DEFINE SFX_STAIRS      = 29; // Link marches down stairs.
DEFINE SFX_SUMMON      = 56; // Summoner magic.
DEFINE SFX_SWORD       = 30; // Sword swipe.
DEFINE SFX_TAP1        = 57; // Sword taps wall.
DEFINE SFX_TAP2        = 58; // Sword taps bombable wall.
DEFINE SFX_PATRA       = 31; // Patra and Manhandla's shriek.
DEFINE SFX_WAND        = 32; // Magic is fired by Wizzrobes or Link.
DEFINE SFX_WHIRLWIND   = 59; // Whistle whirlwind.
DEFINE SFX_WHISTLE     = 33; // Whistle is played.
DEFINE SFX_ZELDA       = 34; // Music when ending sequence begins.


//Sprite IDs. To be used with UseSprite().
DEFINE SP_ARROW_ENEMY 		= 19;
DEFINE SP_ARROW1 			= 10; //Wooden Arrow
DEFINE SP_ARROW2 			= 11; //Silver Arrow
DEFINE SP_ARROW3 			= 34; //Golden Arrow
DEFINE SP_BAIT 			= 14; //Enemy bait
DEFINE SP_BOMB_ENEMY 		= 76; //Bomb (Enemy, normal)
DEFINE SP_SBOMB_ENEMY 		= 77; //Bomb (Enemy, Super)
DEFINE SP_BOMB 			= 7; //Normal Bomb
DEFINE SP_SBOMB 			= 8; //Super Bomb
DEFINE SP_BRANG1 			= 4; //Wooden Boomerang
DEFINE SP_BRANG2 			= 5; //Magical Boomerang
DEFINE SP_BRANG3 			= 6; //Fire Boomerang
DEFINE SP_CANEOFBYRNA 		= 69; //Cane of Byrna Object
DEFINE SP_BYRNABEAM 			= 87; //Cane of Byrna Orbiter
DEFINE SP_BYRNASLASH 		= 70; //Cane of Byrna Slashing Sprite
DEFINE SP_DINSFIRE_FALL 		= 39; //Din's Fire (Falling)
DEFINE SP_DINSFIRE_RISE 		= 38; //Din's Fire (Rising)
DEFINE SP_DINSFIRE_TRAIL_FALL 	= 41; //Din's Fire (Trail, Falling)
DEFINE SP_DINSFIRE_TRAIL_RISE 	= 40; //Din's Fire (Trail, Rising)
DEFINE SP_BOMB_ENEMY_EXPLOSION 	= 78; //Normal Bomb Exploion (Enemy)
DEFINE SP_SBOMB_ENEMY_EXPLOSION 	= 79; //Super Bomb Explosion (Enemy)
DEFINE SP_BOMB_EXPLOSION 		= 9; //Normal Bomb Explosion
DEFINE SP_SBOMB_EXPLOSION 		= 75; //Super Bomb Explosion
DEFINE SP_FIRE_ENEMY 		= 35; //Fire (Enemy)
DEFINE SP_FIRE2_ENEMY 		= 81; //Fire 2 (Enemy)
DEFINE SP_FIRETRAIL2			= 82; //Fire Trail 2 (Enemy) [Unused]
DEFINE SP_FIRETRAIL 			= 80; //Fire Trail (Enemy)
DEFINE SP_FIREBALL 			= 17; //Fireball (Enemy)
DEFINE SP_FLAME 			= 12; //Candle Fire
DEFINE SP_FIRE 			= 12; //Candle Fire
DEFINE SP_HAMMER 			= 25; //Hammer
DEFINE SP_HOOKSHOT1_CHAIN_H 		= 27; //Hookshot (Short, Chain, Horizontal)
DEFINE SP_HOOKSHOT1_CHAIN_V 		= 42; //Hookshot (Short, Chain, Vertical)
DEFINE SP_HOOKSHOT1_HANDLE 		= 28; //Hookshot Handle (Short)
DEFINE SP_HOOKSHOT1_HEAD 		= 26; //Hookshot Head (Short)
DEFINE SP_HOOKSHOT2_CHAIN_H 		= 72; //Hookshot (Short, Chain, Horizontal)
DEFINE SP_HOOKSHOT2_CHAIN_V 		= 74; //Hookshot (Short, Chain, Vertical)
DEFINE SP_HOOKSHOT2_HANDLE 		= 73; //Hookshot Handle (Short)
DEFINE SP_HOOKSHOT2_HEAD 		= 71; //Hookshot Head (Short)
DEFINE SP_ICE 			= 83; //Ice Magic (Enemy, Unused)
DEFINE SP_MAGIC_ENEMY 		= 21; //Magic (Enemy)
DEFINE SP_MAGIC_FIRE 		= 85; //Magic (Fire)
DEFINE SP_MAGIC 			= 16; //Magic (Wand)
DEFINE SP_MISC44 			= 44; //Misc 44, unused
DEFINE SP_MISC45 			= 45; //Misc 45, unused
DEFINE SP_MISC57 			= 57; //Misc 57, unused
DEFINE SP_MISC24 			= 24; //Misc 24, unused
DEFINE SP_MISC_ARROW2 		= 29; //Silver Arrow Sparkles
DEFINE SP_MISC_ARROW3 		= 30; //Golden Arrow Sparkles
DEFINE SP_MISC_BRANG2 		= 31; //Magic Boomerang Sparkles
DEFINE SP_MISC_BRANG3 		= 32; //Fire Boomerang Sparkles
DEFINE SP_MISC_BUSH 			= 52; //Bush Leaf Clippings
DEFINE SP_MISC_DEATH 		= 23; //Link Death Winkout
DEFINE SP_MISC_FLOWER 		= 53; //Flower Clippings
DEFINE SP_MISC_GRASS 		= 54; //Grass Clippings
DEFINE SP_MISC_HAMMER 		= 33; //Hammer Impact
DEFINE SP_MISC_HOVER 		= 84; //Hover Boots Glow
DEFINE SP_MISC_MAGICMETER 		= 37; //Magic Meter
DEFINE SP_MISC_MORE 			= 43; //More Indicator
DEFINE SP_MISC_QHEART 		= 86; //Quarter Heart
DEFINE SP_MISC_RIPPLE 		= 56; //Ripples
DEFINE SP_MISC_SHADOW2 		= 51; //Shadow (Large)
DEFINE SP_MISC_SHADOW1 		= 50; //Shadow (Small)
DEFINE SP_SPAWN 			= 22; //Enemy Spawn Poof
DEFINE SP_MISC_SSVINE 		= 68; //Subscreen Vine
DEFINE SP_TALLGRASS 			= 55; //Tall Grass Movement
DEFINE SP_NAYRU_LEFT 		= 58; //Nayru's Love (Left)
DEFINE SP_NAYRU_LEFT2 		= 59; //Nayru's Love (Left, Returning)
DEFINE SP_NAYRU_RIGHT 		= 62; //Nayru's Love (Right)
DEFINE SP_NAYRU_RIGHT2 		= 63; //Nayru's Love (Right, Returning)
DEFINE SP_NAYRU_BACK 		= 67; //Nayru's Love Shield (Back)
DEFINE SP_NAYRU_FRONT 		= 66; //Nayru's Love Shield (Front)
DEFINE SP_NAYRU_TRAIL_LEFT 		= 60; //Nayru's Love Trail (Left)
DEFINE SP_NAYRU_TRAIL_LEFT2 		= 61; //Nayru's Love Trail (Left, Returning)
DEFINE SP_NAYRU_TRAIL_RIGHT 		= 64; //Nayru's Love Trail (Right)
DEFINE SP_NAYRU_TRAIL_RIGHT2 	= 65; //Nayru's Love Trail (Right, Returning)
DEFINE SP_ROCK 			= 18; //Rock
DEFINE SP_SWORD_ENEMY 		= 20; //Enemy Sword Beam
DEFINE SP_SWORD1 			= 0; //Wooden Sword
DEFINE SP_SLASH1 			= 46; //Wooden Sword Slash
DEFINE SP_SWORD2 			= 1; //White Sword
DEFINE SP_SLASH2 			= 47; //White Sword Slash
DEFINE SP_SWORD3 			= 2; //Magical Sword
DEFINE SP_SLASH3 			= 48; //Magical Sword Slash
DEFINE SP_SWORD4 			= 3; //Master Sword
DEFINE SP_SLASH4 			= 49; //master Sword Slash
DEFINE SP_WAND 			= 15; //Wand Object
DEFINE SP_WHIRL		 	= 13; //Whiste Whirlwind
DEFINE SP_WIND 			= 36; //Wind Magic (Enemy)

//User-Defined Sprites Range 088 to 255


//Extra Directions. Used with some stuff?
DEFINE DIR2_UP                = 8;
DEFINE DIR2_RIGHTUP           = 9;
DEFINE DIR2_RIGHT             = 10;
DEFINE DIR2_RIGHTDOWN         = 11;
DEFINE DIR2_DOWN              = 12;
DEFINE DIR2_LEFTDOWN          = 13;
DEFINE DIR2_LEFT              = 14;
DEFINE DIR2_LEFTUP            = 15;

//Repeat in DOWN*/UP* format
DEFINE DIR2_UPRIGHT           = 9;
DEFINE DIR2_DOWNRIGHT         = 11;
DEFINE DIR2_DOWNLEFT          = 13;
DEFINE DIR2_UPLEFT            = 15;

					//Equivalent Degrees and Radians for Cardinal Directions
//Degrees
DEFINE DEG_DIR_RIGHTUP 	= 315;
DEFINE DEG_DIR_UPRIGHT 	= 315;
DEFINE DEG_DIR_UP 		= 270;
DEFINE DEG_DIR_UPLEFT 	= 225;
DEFINE DEG_DIR_LEFTUP 	= 225;
DEFINE DEG_DIR_LEFT 		= 180;
DEFINE DEG_DIR_LEFTDOWN 	= 135;
DEFINE DEG_DIR_DOWNLEFT 	= 135;
DEFINE DEG_DIR_DOWN 		= 90;
DEFINE DEG_DIR_RIGHTDOWN 	= 45;
DEFINE DEG_DIR_DOWNRIGHT 	= 45;
DEFINE DEG_DIR_RIGHT 	= 0;

//Radians
DEFINEF RAD_DIR_RIGHTUP 	= 5.4978;
DEFINEF RAD_DIR_UPRIGHT 	= 5.4978;
DEFINEF RAD_DIR_UP 		= 4.7214;
DEFINEF RAD_DIR_UPLEFT 	= 3.927;
DEFINEF RAD_DIR_LEFTUP 	= 3.927;
DEFINEF RAD_DIR_LEFT 	= 3.1416; //3.1519; //Pi
DEFINEF RAD_DIR_LEFTDOWN 	= 2.3562; //Pi
DEFINEF RAD_DIR_DOWNLEFT 	= 2.3562; //Pi
DEFINEF RAD_DIR_DOWN 	= 1.5708;
DEFINEF RAD_DIR_RIGHTDOWN 	= 0.7854;
DEFINEF RAD_DIR_DOWNRIGHT 	= 0.7854;
DEFINEF RAD_DIR_RIGHT 	= 0; 





//Sprite extending methods. Use with item->Extend,
//npc->Extend, eweapon->Extend and lweapon->Extend.
DEFINE EXT_NONE              = 0; // Not extended
DEFINE EXT_16X32		= 1; // Object is extended as 16x32; or Link is extended in Sprites->Link to 16x32.
DEFINE EXT_32X32		= 2; // Object is extended as 32x32; or Link is extended in Sprites->Link to 32x32.
DEFINE EXT_NORMAL            = 3; // Extended
DEFINE EXT_EXTENDED          = 3; // Extended
DEFINE EXT_NOSHADOW          = 4; // Extended; NPC has no shadow.

//! We need some better names for Extend constants. 

//Level item flags. Or (|) these together and use with Game->LItems[]
DEFINE LI_TRIFORCE           = 0x01; // The Triforce of this Level has been obtained
DEFINE LI_MAP                = 0x02; // The Dungeon Map of this Level has been obtained
DEFINE LI_COMPASS            = 0x04; // The Compass of this Level has been obtained
DEFINE LI_BOSS               = 0x08; // A "Dungeon Boss" enemy has been slain
DEFINE LI_BOSSKEY            = 0x10; // The Boss Key of this Level has been obtained

//Mouse buttons
DEFINE MB_LEFTCLICK			= 0x1; //AND (&) these with Link->InputMouseB to get the current button state of the mouse
DEFINE MB_RIGHTCLICK			= 0x2;
DEFINE MB_MIDDLECLICK		= 0x4; //Keep in in mind that not all mice/touchpads have a middle mouse button

//Controller buttons
DEFINE CB_UP         = 0;
DEFINE CB_DOWN       = 1;
DEFINE CB_LEFT       = 2;
DEFINE CB_RIGHT      = 3;
DEFINE CB_A          = 4;
DEFINE CB_B          = 5;
DEFINE CB_START      = 6;
DEFINE CB_L          = 7;
DEFINE CB_R          = 8;
DEFINE CB_MAP        = 9;
DEFINE CB_EX1        = 10;
DEFINE CB_X          = 10;
DEFINE CB_EX2        = 11;
DEFINE CB_Y          = 11;
DEFINE CB_EX3        = 12;
DEFINE CB_EX4        = 13;
DEFINE CB_STICKUP    = 14;
DEFINE CB_STICKDOWN  = 15;
DEFINE CB_STICKLEFT  = 16;
DEFINE CB_STICKRIGHT = 17;
DEFINE CB_AXIS_UP    = 14;
DEFINE CB_AXIS_DOWN  = 15;
DEFINE CB_AXIS_LEFT  = 16;
DEFINE CB_AXIS_RIGHT = 17;
DEFINE CB_MAX        = 18;



////////////////////
/// Items & Itemdata




//Item IDs. Use with CreateItem() and Link->Item[].
//These are DEFAULT values, and may not be correct for custom quests which
//have overridden item action data.
DEFINE I_AMULET1             = 50;
DEFINE I_AMULET2             = 63;
DEFINE I_ARROW1              = 13;
DEFINE I_ARROW2              = 14;
DEFINE I_ARROW3              = 57;
DEFINE I_ARROWAMMO1          = 70;
DEFINE I_ARROWAMMO10         = 72;
DEFINE I_ARROWAMMO30         = 73;
DEFINE I_ARROWAMMO5          = 71;
DEFINE I_BAIT                = 16;
DEFINE I_BOMB                = 3;
DEFINE I_BOMBAMMO1           = 77;
DEFINE I_BOMBAMMO30          = 80;
DEFINE I_BOMBAMMO4           = 78;
DEFINE I_BOMBAMMO8           = 79;
DEFINE I_BOMBBAG1            = 81;
DEFINE I_BOMBBAG2            = 82;
DEFINE I_BOMBBAG3            = 83;
DEFINE I_BOMBBAG4            = 106;
DEFINE I_BOOK                = 32;
DEFINE I_BOOTS               = 55;
DEFINE I_BOSSKEY             = 67;
DEFINE I_BOW1                = 15;
DEFINE I_BOW2                = 68;
DEFINE I_BRACELET1           = 107;
DEFINE I_BRACELET2           = 19;
DEFINE I_BRACELET3           = 56;
DEFINE I_BRANG1              = 23;
DEFINE I_BRANG2              = 24;
DEFINE I_BRANG3              = 35;
DEFINE I_CANDLE1             = 10;
DEFINE I_CANDLE2             = 11;
DEFINE I_CBYRNA              = 88;
DEFINE I_CHARGERING1         = 101;
DEFINE I_CHARGERING2         = 102;
DEFINE I_CLOCK               = 4;
DEFINE I_COMPASS             = 22;
DEFINE I_CROSSSCROLL         = 95;
DEFINE I_DINSFIRE            = 64;
DEFINE I_DUST_PILE           = 43;
DEFINE I_FAIRY               = 34;
DEFINE I_FAIRYSTILL          = 69;
DEFINE I_FARORESWIND         = 65;
DEFINE I_FLIPPERS            = 51;
DEFINE I_HAMMER              = 54;
DEFINE I_HCPIECE             = 49;
DEFINE I_HEART               = 2;
DEFINE I_HEARTCONTAINER      = 28;
DEFINE I_HEARTRING1          = 112;
DEFINE I_HEARTRING2          = 113;
DEFINE I_HEARTRING3          = 114;
DEFINE I_HOOKSHOT1           = 52;
DEFINE I_HOOKSHOT2           = 89;
DEFINE I_HOVERBOOTS          = 92;
DEFINE I_KEY                 = 9;
DEFINE I_KILLALL             = 62;
DEFINE I_LADDER1             = 27;
DEFINE I_LADDER2             = 108;
DEFINE I_LENS                = 53;
DEFINE I_LETTER              = 12;
DEFINE I_LETTERUSED          = 90;
DEFINE I_LEVELKEY            = 84;
DEFINE I_MAGICCONTAINER      = 58;
DEFINE I_MAGICJAR1           = 59;
DEFINE I_MAGICJAR2           = 60;
DEFINE I_MAGICKEY            = 33;
DEFINE I_MAGICRING1          = 115;
DEFINE I_MAGICRING2          = 116;
DEFINE I_MAGICRING3          = 117;
DEFINE I_MAGICRING4          = 118;
DEFINE I_MAP                 = 21;
DEFINE I_MISC1               = 46;
DEFINE I_MISC2               = 47;
DEFINE I_NAYRUSLOVE          = 66;
DEFINE I_PERILRING           = 121;
DEFINE I_PERILSCROLL         = 103;
DEFINE I_POTION1             = 29;
DEFINE I_POTION2             = 30;
DEFINE I_QUAKESCROLL1        = 96;
DEFINE I_QUAKESCROLL2        = 97;
DEFINE I_QUIVER1             = 74;
DEFINE I_QUIVER2             = 75;
DEFINE I_QUIVER3             = 76;
DEFINE I_QUIVER4             = 105;
DEFINE I_RAFT                = 26;
DEFINE I_RING1               = 17;
DEFINE I_RING2               = 18;
DEFINE I_RING3               = 61;
DEFINE I_ROCSFEATHER         = 91;
DEFINE I_RUPEE1              = 0;
DEFINE I_RUPEE10             = 86;
DEFINE I_RUPEE100            = 87;
DEFINE I_RUPEE20             = 38;
DEFINE I_RUPEE200            = 40;
DEFINE I_RUPEE5              = 1;
DEFINE I_RUPEE50             = 39;
DEFINE I_SBOMB               = 48;
DEFINE I_SELECTA             = 45;
DEFINE I_SELECTB             = 85;
DEFINE I_SHIELD1             = 93;
DEFINE I_SHIELD2             = 8;
DEFINE I_SHIELD3             = 37;
DEFINE I_SPINSCROLL1         = 94;
DEFINE I_SPINSCROLL2         = 98;
DEFINE I_STOMPBOOTS          = 120;
DEFINE I_STONEAGONY          = 119;
DEFINE I_SWORD1              = 5;
DEFINE I_SWORD2              = 6;
DEFINE I_SWORD3              = 7;
DEFINE I_SWORD4              = 36;
DEFINE I_TRIFORCE            = 20;
DEFINE I_TRIFORCEBIG         = 44;
DEFINE I_WALLET500           = 41;
DEFINE I_WALLET999           = 42;
DEFINE I_WALLETA             = 104;
DEFINE I_WAND                = 25;
DEFINE I_WEALTHMEDAL         = 109;
DEFINE I_WEALTHMEDAL2        = 110;
DEFINE I_WEALTHMEDAL3        = 111;
DEFINE I_WHIMSICALRING       = 122;
DEFINE I_WHISPRING1          = 99;
DEFINE I_WHISPRING2          = 100;
DEFINE I_WHISTLE             = 31;

//Item pickup flags. OR (|) these together to use with item->Pickup
//Other values are reserved for internal usage, and have no effect
DEFINE IP_BIGRANGE       = 0x0001; //INTERNAL Collision rectangle is large
DEFINE IP_HOLDUP         = 0x0002; //Link holds it up when collecting it.
DEFINE IP_ST_ITEM        = 0x0004; //Sets the screen state "Item" when collected.
DEFINE IP_DUMMY          = 0x0008; //A 'dummy' item, such as rupee markers in shops. Can't be collected and ignores gravity.
DEFINE IP_CHECK          = 0x0010; //INTERNAL Check restrictions (money in a shop, etc.)
DEFINE IP_MONEY          = 0x0020; //INTERNAL This item causes money loss (bomb upgrade, swindle room, etc.)
DEFINE IP_FADE           = 0x0040; //INTERNAL Blinks if fadeclk>0
DEFINE IP_ENEMYCARRIED   = 0x0080; //The item-carrying NPC carries it. If no NPC has an item, the most recently created NPC carries it.
DEFINE IP_TIMEOUT        = 0x0100; //Disappears after 512 frames. Can be collected by melee weapons if the related quest rule is not set.
DEFINE IP_BIGTRIFORCE    = 0x0200; //INTERNAL Large collision rectangle (used for large triforce)
DEFINE IP_NODRAW         = 0x0400; //INTERNAL Don't draw this (for underwater items)
DEFINE IP_ST_SPECIALITEM = 0x0800; //Sets the screen state "Special Item" when collected.
DEFINE IP_TRIGGERSECRETS = 0x1000; // Triggers screen secrets when collected
DEFINE IP_ALWAYSGRAB     = 0x2000; // Item is always able to be picked up (ex. brang/hshot/arrows/melee weapons)


/////////////////////////
/// EWeapons and LWeapons

//LWeapon types. Use with Screen->CreateLWeapon() and Screen->LoadLWeapon().
DEFINE LW_SWORD              = 1; // This cannot be created
DEFINE LW_WAND               = 12; // This cannot be created
DEFINE LW_CANDLE             = 12; // This cannot be created
DEFINE LW_HAMMER             = 19; // This cannot be created
DEFINE LW_HOOKSHOT           = 20; // This cannot be created
DEFINE LW_CANEOFBYRNA        = 27; // This cannot be created
DEFINE LW_BUGNET             = 52; // This cannot be created
DEFINE LW_ARROW              = 8;
DEFINE LW_BEAM               = 2; // Sword beam
DEFINE LW_BRANG              = 3;
DEFINE LW_BOMB               = 6;
DEFINE LW_BOMBBLAST          = 4; // Bomb explosion
DEFINE LW_SBOMB              = 7;
DEFINE LW_SBOMBBLAST         = 5; // Super Bomb explosion
DEFINE LW_FIRE               = 9;
DEFINE LW_WHISTLE            = 10; // Whistle music - kills Digdogger
DEFINE LW_BAIT               = 11;
DEFINE LW_MAGIC              = 13; // Wand magic
DEFINE LW_WIND               = 15; // Whistle whirlwind
DEFINE LW_REFMAGIC           = 16; // Reflected wand magic
DEFINE LW_REFFIREBALL        = 17; // Reflected fireball
DEFINE LW_REFROCK            = 18; // Reflected rock
DEFINE LW_REFBEAM            = 28; // Reflected sword beam
DEFINE LW_SPARKLE            = 23;
DEFINE LW_FIRESPARKLE        = 24; // Damages enemies
// Dummy weapons, for use with scripts.
DEFINE LW_SCRIPT1            = 31;
DEFINE LW_SCRIPT2            = 32;
DEFINE LW_SCRIPT3            = 33;
DEFINE LW_SCRIPT4            = 34;
DEFINE LW_SCRIPT5            = 35;
DEFINE LW_SCRIPT6            = 36;
DEFINE LW_SCRIPT7            = 37;
DEFINE LW_SCRIPT8            = 38;
DEFINE LW_SCRIPT9            = 39;
DEFINE LW_SCRIPT10           = 40;

//Planned for 2.6
DEFINE LW_ICE                = 41;
DEFINE LW_THROWN             = 44;
DEFINE LW_REFARROW           = 53;
DEFINE LW_REFFIRE            = 54;
DEFINE LW_REFFIRE2            = 55;

//EWeapon types. Use with Screen->CreateEWeapon() and Screen->LoadEWeapon().
DEFINE EW_ARROW              = 130;
DEFINE EW_BRANG              = 131;
DEFINE EW_BEAM               = 132; // Sword beam
DEFINE EW_ROCK               = 133;
DEFINE EW_MAGIC              = 134;
DEFINE EW_FIREBALL           = 129;
DEFINE EW_FIREBALL2          = 145; // Arcing boss fireball
DEFINE EW_BOMB               = 137; // Projectile bomb
DEFINE EW_BOMBBLAST          = 135; // Bomb explosion
DEFINE EW_SBOMB              = 138; // Projectile super bomb
DEFINE EW_SBOMBBLAST         = 136; // Super bomb explosion
DEFINE EW_FIRETRAIL          = 139;
DEFINE EW_FIRE               = 140;
DEFINE EW_WIND               = 141; // Wind wizzrobe magic
DEFINE EW_FIRE2		= 142; //! What is 'Fire 2' ?
// Dummy weapons, for use with scripts.
DEFINE EW_SCRIPT1            = 31;
DEFINE EW_SCRIPT2            = 32;
DEFINE EW_SCRIPT3            = 33;
DEFINE EW_SCRIPT4            = 34;
DEFINE EW_SCRIPT5            = 35;
DEFINE EW_SCRIPT6            = 36;
DEFINE EW_SCRIPT7            = 37;
DEFINE EW_SCRIPT8            = 38;
DEFINE EW_SCRIPT9            = 39;
DEFINE EW_SCRIPT10           = 40;

//Weapon DeadState values. Use with Weapon->DeadState.
DEFINE WDS_NOHIT             = -10; // This value switches collision detection off. Deprecated by weapon->CollDetection.
DEFINE WDS_ALIVE		= -1; // Weapon is currently 'alive'.
DEFINE WDS_DEAD              = 0;  // Use to dispose of most weapons.
DEFINE WDS_BEAMSHARDS        = 23; // Use with LW_BEAMs to shatter it into shards.
DEFINE WDS_ARROW             = 4;  // Use with LW_ARROWs to make them 'wink out' using tile 54.
DEFINE WDS_BOUNCE            = 1;  // Use with LW_BRANGs or LW_HOOKSHOTs to
                                      // make it 'bounce off' and begin returning to Link.


////////////////////
/// NPCs and Enemies

//Guy IDs. Use with CreateNPC().
DEFINE NPC_ABEI              = 1;
DEFINE NPC_AMA               = 2;
DEFINE NPC_MERCHANT          = 3;
DEFINE NPC_MOBLIN            = 4;
DEFINE NPC_FIRE              = 5;
DEFINE NPC_FAIRY             = 6;
DEFINE NPC_GORIYA            = 7;
DEFINE NPC_ZELDA             = 8;
DEFINE NPC_ABEI2             = 9;

//Default enemy IDs. Use with CreateNPC().
DEFINE NPC_AQUAMENTUSL       = 93;
DEFINE NPC_AQUAMENTUSR       = 58;
DEFINE NPC_ARMOS             = 37;
DEFINE NPC_BAT               = 106;
DEFINE NPC_BOMBCHU           = 160;
DEFINE NPC_BOULDER           = 135;
DEFINE NPC_BUBBLEITEMP       = 118;	// Permanently jinxes
DEFINE NPC_BUBBLEITEMR       = 119;	// Restores item usage
DEFINE NPC_BUBBLEITEMT       = 117;
DEFINE NPC_BUBBLESWORDP      = 81;  // Permanently jinxes
DEFINE NPC_BUBBLESWORDR      = 82;  // Restores sword usage
DEFINE NPC_BUBBLESWORDT      = 51;
DEFINE NPC_CEILINGMASTER     = 101; // This enemy isn't implemented
DEFINE NPC_DARKNUT1          = 49;
DEFINE NPC_DARKNUT2          = 50;
DEFINE NPC_DARKNUT3          = 92;	// Splits when killed.
DEFINE NPC_DARKNUT4          = 172;  // This enemy isn't implemented
DEFINE NPC_DARKNUT5          = 87;   // Sword beams.
DEFINE NPC_DIGDOGGER1        = 66; // Splits into 1
DEFINE NPC_DIGDOGGER3        = 67; // Splits into 3
DEFINE NPC_DIGKID1           = 68; // Spawned by NPC_DIGDOGGER1
DEFINE NPC_DIGKID2           = 69; // Spawned by NPC_DIGDOGGER3
DEFINE NPC_DIGKID3           = 70; // Spawned by NPC_DIGDOGGER3
DEFINE NPC_DIGKID4           = 71; // Spawned by NPC_DIGDOGGER3
DEFINE NPC_DODONGO           = 60; // Uses one tile when walking vertically
DEFINE NPC_DODONGOBS         = 114; // Uses two tiles when walking vertically
DEFINE NPC_DODONGOFIRE       = 115; // This enemy isn't implemented
DEFINE NPC_ENEMYFIRE         = 85;  // The Fire enemy in Princess Zelda's screen
DEFINE NPC_FLOORMASTER       = 102; // This enemy isn't implemented
DEFINE NPC_GANON             = 78;
DEFINE NPC_GEL               = 42;
DEFINE NPC_GELFIRE           = 161;
DEFINE NPC_GELFIRETRIB       = 163;
DEFINE NPC_GELTRIB           = 88;
DEFINE NPC_GHINI1            = 35;
DEFINE NPC_GHINI2            = 36;
DEFINE NPC_GHINIMGC          = 173; // This enemy isn't implemented
DEFINE NPC_GIBDO             = 54;
DEFINE NPC_GLEEOK1           = 62;
DEFINE NPC_GLEEOK1FIRE       = 109;
DEFINE NPC_GLEEOK2           = 63;
DEFINE NPC_GLEEOK2FIRE       = 110;
DEFINE NPC_GLEEOK3           = 64;
DEFINE NPC_GLEEOK3FIRE       = 111;
DEFINE NPC_GLEEOK4           = 65;
DEFINE NPC_GLEEOK4FIRE       = 112;
DEFINE NPC_GOHMA1            = 72;
DEFINE NPC_GOHMA2            = 73;
DEFINE NPC_GOHMA3            = 121;
DEFINE NPC_GOHMAFIRE         = 122;
DEFINE NPC_GORIYA1           = 45;
DEFINE NPC_GORIYA2           = 46;
DEFINE NPC_GORIYA3           = 136;
DEFINE NPC_GRAPBUGHP         = 174; // This enemy isn't implemented
DEFINE NPC_GRAPBUGMP         = 175; // This enemy isn't implemented
DEFINE NPC_ITEMFAIRY         = 84;
DEFINE NPC_KEESE1            = 38;
DEFINE NPC_KEESE2            = 39;
DEFINE NPC_KEESE3            = 40;
DEFINE NPC_KEESETRIB         = 90;
DEFINE NPC_LANMOLA1          = 74;
DEFINE NPC_LANMOLA2          = 75;
DEFINE NPC_LEEVER1           = 26;
DEFINE NPC_LEEVER2           = 27;
DEFINE NPC_LEEVER3           = 137;
DEFINE NPC_LIKELIKE          = 53;
DEFINE NPC_LYNEL1            = 30;
DEFINE NPC_LYNEL2            = 31;
DEFINE NPC_LYNEL3            = 168;
DEFINE NPC_MANHANDLA         = 61;
DEFINE NPC_MANHANDLA2        = 94;
DEFINE NPC_MOBLIN1           = 28;
DEFINE NPC_MOBLIN2           = 29;
DEFINE NPC_MOLDORM           = 59;
DEFINE NPC_OCTOROCK1F        = 22;
DEFINE NPC_OCTOROCK1S        = 20;
DEFINE NPC_OCTOROCK2F        = 23;
DEFINE NPC_OCTOROCK2S        = 21;
DEFINE NPC_OCTOROCKBOMBF     = 141;
DEFINE NPC_OCTOROCKBOMBS     = 140;
DEFINE NPC_OCTOROCKFIREF     = 139;
DEFINE NPC_OCTOROCKFIRES     = 138;
DEFINE NPC_OCTOROCKMGC       = 86;
DEFINE NPC_PATRA1            = 76;
DEFINE NPC_PATRA2            = 104;
DEFINE NPC_PATRA3            = 105;
DEFINE NPC_PATRABS           = 103;
DEFINE NPC_PATRAOVAL         = 77;
DEFINE NPC_PEAHAT            = 32;
DEFINE NPC_PEAHATFIRE        = 169; // This enemy isn't implemented
DEFINE NPC_POLSVOICE         = 55;
DEFINE NPC_POLSVOICEBS       = 171; // This enemy isn't implemented
DEFINE NPC_POLSVOICEMGC      = 170;
DEFINE NPC_ROCK              = 34;
DEFINE NPC_ROPE1             = 44;
DEFINE NPC_ROPE2             = 80;
DEFINE NPC_SHOOTFBALL        = 83;
DEFINE NPC_SHOOTFLAME        = 158;
DEFINE NPC_SHOOTFLAME2       = 159;
DEFINE NPC_SHOOTMAGIC        = 154;
DEFINE NPC_SHOOTROCK         = 155;
DEFINE NPC_SHOOTSPEAR        = 156;
DEFINE NPC_SHOOTSWORD        = 157;
DEFINE NPC_SPINTILE          = 166;
DEFINE NPC_SPINTILERND       = 167; // Random spin tile
DEFINE NPC_STALFOS1          = 41;
DEFINE NPC_STALFOS2          = 79;
DEFINE NPC_STALFOS3          = 120;
DEFINE NPC_TEKTITE1          = 24;
DEFINE NPC_TEKTITE2          = 25;
DEFINE NPC_TEKTITE3          = 165; // This enemy isn't implemented
DEFINE NPC_TRAP              = 47;
DEFINE NPC_TRAP8WAY          = 142;  // This enemy isn't implemented
DEFINE NPC_TRAPBACKSLASHC    = 146;	// This enemy isn't implemented
DEFINE NPC_TRAPBACKSLASHLOS  = 147; // This enemy isn't implemented
DEFINE NPC_TRAPCCLOCKWISEC   = 150; // This enemy isn't implemented
DEFINE NPC_TRAPCCLOCKWISELOS = 151; // This enemy isn't implemented
DEFINE NPC_TRAPCLOCKWISEC    = 148; // This enemy isn't implemented
DEFINE NPC_TRAPCLOCKWISELOS  = 149; // This enemy isn't implemented
DEFINE NPC_TRAPDIAG          = 143; // This enemy isn't implemented
DEFINE NPC_TRAPHORIZC        = 97;
DEFINE NPC_TRAPHORIZLOS      = 95;
DEFINE NPC_TRAPSLASHC        = 144;	// This enemy isn't implemented
DEFINE NPC_TRAPSLASHLOS      = 145;
DEFINE NPC_TRAPVERTC         = 98;
DEFINE NPC_TRAPVERTLOS       = 96;
DEFINE NPC_TRIGGER           = 116;
DEFINE NPC_VIRE              = 52;
DEFINE NPC_VIRETRIB          = 91;
DEFINE NPC_WALLMASTER        = 48;
DEFINE NPC_WIZZROBE1         = 56; // Teleports
DEFINE NPC_WIZZROBE2         = 57; // Phases through blocks
DEFINE NPC_WIZZROBEBAT       = 107;
DEFINE NPC_WIZZROBEBAT2      = 108; // This enemy isn't implemented
DEFINE NPC_WIZZROBEFIRE      = 99;
DEFINE NPC_WIZZROBEICE       = 153; // This enemy isn't implemented
DEFINE NPC_WIZZROBEMIRR      = 113;
DEFINE NPC_WIZZROBESUMM      = 152;
DEFINE NPC_WIZZROBEWIND      = 100;
DEFINE NPC_ZOL               = 43;
DEFINE NPC_ZOLFIRE           = 162;
DEFINE NPC_ZOLFIRETRIB       = 164;
DEFINE NPC_ZOLTRIB           = 89;
DEFINE NPC_ZORA              = 33;

//NPC hit point values. Use with npc->HP to make the enemy die in a special manner.
DEFINE HP_SILENT = -1000;  // The enemy will die without their Death Sound playing.
DEFINE HP_GLEEOKHEAD = 1000; //Floating Gleeok heads have this as their HP value. 

//////////////////////////////////////////////////////
/// Enemy Editor NPC Attributes / Attribute types

// Note: The editor attribute is offset by +1, when compared to the ZScript Attributes[] array.
// Use this chart as a reference.
//Editor Attribute 1 ( Atttributes[0] )
//Editor Attribute 2 ( Atttributes[1] )
//Editor Attribute 3 ( Atttributes[2] )
//Editor Attribute 4 ( Atttributes[3] )
//Editor Attribute 5 ( Atttributes[4] )
//Editor Attribute 6 ( Atttributes[5] )
//Editor Attribute 7 ( Atttributes[6] )
//Editor Attribute 8 ( Atttributes[7] )
//Editor Attribute 9 ( Atttributes[8] )
//Editor Attribute 10 ( Atttributes[9] )

//Walking Enemy Indices
DEFINE NPCA_WALK_SHOTTYPE 		= 0;
DEFINE NPCA_WALK_DEATHTYPE 		= 1;
DEFINE NPCA_WALK_DEATH_ATTR_1 	= 2;
DEFINE NPCA_WALK_DEATH_ATTR_2 	= 3;
DEFINE NPCA_WALK_DEATH_ATTR_3 	= 4;
DEFINE NPCA_WALK_EXTRA_SHOTS 	= 5;
DEFINE NPCA_WALK_TOUCHEFFECT 	= 6;
DEFINE NPCA_WALK_EFFECT_STR 		= 7;
DEFINE NPCA_WALK_WALKSTYLE 		= 8;
DEFINE NPCA_WALK_WALK_ATTRIB 	= 9;

	//Walking Attributes (Settings)
	//Shot Type
	DEFINE NPCA_WALK_1SHOT		= 0;
	DEFINE NPCA_WALK_ENDHALT		= 1;
	DEFINE NPCA_WALK_RAPIDFIRE		= 2;
	DEFINE NPCA_WALK_1FAST		= 3;
	DEFINE NPCA_WALK_1SLANT		= 4;
	DEFINE NPCA_WALK_3SHOTS		= 5;
	DEFINE NPCA_WALK_4SHOTS		= 6;
	DEFINE NPCA_WALK_5SHOTS		= 7;
	DEFINE NPCA_WALK_3FAST		= 8;
	DEFINE NPCA_WALK_BREATH		= 9;
	DEFINE NPCA_WALK_8SHOTS		= 10;
	DEFINE NPCA_WALK_SUMMON		= 11;
	DEFINE NPCA_WALK_SUMMONLAYER		= 12;
	//Death Type
	DEFINE NPCA_WALK_DEATH_NORMAL	= 0;
	DEFINE NPCA_WALK_DEATH_SPLITHIT	= 1;
	DEFINE NPCA_WALK_DEATH_SPLIT		= 2;
	DEFINE NPCA_WALK_DEATH_8SHOTS	= 3;
	DEFINE NPCA_WALK_DEATH_EXPLODE	= 4;
	DEFINE NPCA_WALK_DEATH_TRIBBLE	= 5;
	//Touch Effcts
	DEFINE NPCA_WALK_TOUCH_NORMAL	= 0;
	DEFINE NPCA_WALK_TOUCH_TEMPJINX	= 1;
	DEFINE NPCA_WALK_TOUCH_PERMJINX	= 2;
	DEFINE NPCA_WALK_TOUCH_CUREJINX	= 3;
	DEFINE NPCA_WALK_TOUCH_LOSEMAGIC	= 4;
	DEFINE NPCA_WALK_TOUCH_LOSERUPEES	= 5;
	DEFINE NPCA_WALK_TOUCH_DRUNK		= 6;
	DEFINE NPCA_WALK_TOUCH_EATITEMS	= 7;
	DEFINE NPCA_WALK_TOUCH_EATMAGIC	= 8;
	DEFINE NPCA_WALK_TOUCH_EATRUPEES	= 9;
	//Walkstyle
	DEFINE NPCA_WALK_WS_NORMAL		= 0;
	DEFINE NPCA_WALK_WS_ROPE		= 1;
	DEFINE NPCA_WALK_WS_VIRE		= 2;
	DEFINE NPCA_WALK_WS_POLSVOICE	= 3;

//Gohma Indices
DEFINE NPCA_GOHMA_SHOT_TYPE 			= 0;
	//Gohma Shot Type Settings
	DEFINE NPCA1_GOHMA_1SHOT		= 0;
	DEFINE NPCA_GOHMA_3SHOTS		= 1;
	DEFINE NPCA_GOHMA_BREATH		= 2;

//Wallmaster Indices
DEFINE NPCA_WALLMASTER_FIXED_DIST 		= 0;
	//Wallmaster Settings
	DEFINE NPCA_WALLMASTER_FIXED_DIST_ON = 0;
	DEFINE NPCA_WALLMASTER_FIXED_DIST_OFF = 1;

//Keese Indices
DEFINE NPCA_KEESE_MOVEMENT			= 0;
DEFINE NPCA_KEESE_DEATHTYPE 			= 1;
	//Movement Style
	DEFINE NPCA_KEESE_WS_KEESE 		= 0;
	DEFINE NPCA_KEESE_WS_BAT 		= 1;
	//Death Type
	DEFINE NPCA_KEESE_DEATH_NORMAL	= 0;
	DEFINE NPCA_KEESE_DEATH_TRIBBLE	= 1;

//Digdogger Indices
DEFINE NPCA_DIG_ID_1				= 0; //Digdogger ID 1
DEFINE NPCA_DIG_ID_2				= 1; //Digdogger ID 1
DEFINE NPCA_DIG_ID_3				= 2; //Digdogger ID 3
DEFINE NPCA_DIG_ID_4				= 3; //Digdogger ID 4
DEFINE NPCA_DIG_ENEM_1_QUANTITY		= 4; //Quantity of enemy 1.
DEFINE NPCA_DIG_ENEM_2_QUANTITY		= 5; //Quantity of enemy 1.
DEFINE NPCA_DIG_ENEM_3_QUANTITY		= 6; //Quantity of enemy 1.
DEFINE NPCA_DIG_ENEM_4_QUANTITY		= 7; //Quantity of enemy 1.
DEFINE NPCA_DIG_TYPE				= 8; //Type of digdogger
	//Digdogger Type Settings
	DEFINE NPCA_DIG_TYPE_NORMAL		= 0; //Digdogger main
	DEFINE NPCA_DIG_TYPE_KID		= 1; //Digdogger kid

//Dodongo Indices
DEFINE NPCA_DODONGO_TYPE		= 8; //Tyoe of Dodongo
	//Dodongo Type Settings
	DEFINE NPCA_DODONGO_TYPE_NES = 0; //NES Dodongo
	DEFINE NPCA_DODONGO_TYPE_BS 	= 1; //BS Dodongo

//Gleeok Indices
DEFINE NPCA_GLEEOK_HEADS 		= 0;
DEFINE NPCA_GLEEOK_HEAD_HP 		= 1;
DEFINE NPCA_GLEEOK_WEAPON 		= 2;
	//Gleeok Weapon Settings
	DEFINE NPCA_GLEEOK_1SHOT	= 0;
	DEFINE NPCA_GLEEOK_BREATH	= 2;
DEFINE NPCA_GLEEOK_CLK 		= 3; //48 by defaault. 
//IDK what this setting does. It is th Clk line param in esGleeok::esGleeok, but Clk is not used in the function. -Z
DEFINE NPCA_GLEEOK_NECK_SEGMENTS 	= 4;
DEFINE NPCA_GLEEOK_NECK_OFFSET_1 	= 5;
DEFINE NPCA_GLEEOK_NECK_OFFSET_2	= 6;
DEFINE NPCA_GLEEOK_HEAD_OFFSET  	= 7;
DEFINE NPCA_GLEEOK_HEAD_FLY_OFFSET 	= 8;

//Lanmola Indices
DEFINE NPCA_LANMOLA_SEGMENTS  	= 0;
DEFINE NPCA_LANMOLA_SEGMENT_LAG 	= 1;
DEFINE NPCA_LANMOLA_SEGMENT_DROPS 	= 2;
	//Lanmola Drop Settings
	DEFINE NPCA_LANMOLA_NODROP	= 0;
	DEFINE NPCA_LANMOLA_DROP	= 1;

//Leever Indices
DEFINE NPCA_LEVER_MOVE		= 0; //Engage Type
	//Leever Movement Settings
	DEFINE NPCA_LEEVER_PATH	= 0; //Link;s path
	DEFINE NPCA1_LEEVER_INPLACE	= 1; //In Place
	DEFINE NPCA_LEEVER_PATH2	= 0; //Link's path plus second (leever 3)
DEFINE NPCA_LEVER_SUBMERGE_CSET	= 1;
DEFINE NPCA_LEVER_EMERGE_STEP	= 2;

//Manhandla Indices
DEFINE NPCA_MANHANDLA_FRAMERATE	= 0;
DEFINE NPCA_MANHANDLA_SIZE 		= 1;
	//Manhandla Size Settings
	DEFINE NPCA_MANHANDLA_SMALL 	= 0; //4-heads
	DEFINE NPCA_MANHANDLA_LARGE 	= 1; //8-heads

//Moldorm Indices
DEFINE NPCA_MOLDORM_SEGMENTS 	= 0;
DEFINE NPCA_MOLDORM_SEGMENT_DROPS 	= 1;
	//Moldorm Drop Settings
	DEFINE NPCA_MOLDORM_NODROP	= 0; //no drop per degment
	DEFINE NPCA_MOLDORM_DROP	= 1; //drop per segment

//Patra Indices
DEFINE NPCA_PATRA_RINGEYES 		= 0;
DEFINE NPCA_PATRA_INNEREYES 		= 1;
DEFINE NPCA_PATRA_EYEHP 		= 2;
DEFINE NPCA_PATRA_EYE_MOVEMENT 	= 3;
	//Patra Eye Movmnt Settings
	DEFINE NPCA_PATRA_CIRCLE 	= 0;
	DEFINE NPCA_PATRA_OVAL 	= 1;
DEFINE NPCA_PATRA_SHOOTERS 		= 4;
	//Patra Shooters Settings
	DEFINE NPCA_PATRA_SHOOTERS_NONE = 0;
	DEFINE NPCA_PATRA_SHOOTERS_CORE = 1;
	DEFINE NPCA_PATRA_SHOOTERS_INNER = 2;
DEFINE NPCA_PATRA_PATTERN_ODDS 	= 5;
DEFINE NPCA_PATRA_PATTERN_CYCLES 	= 6;
DEFINE NPCA_PATRA_EYE_OFFSET 	= 7;
DEFINE NPCA_PATRA_EYE_CSET 		= 8;
DEFINE NPCA_PATRA_TYPE 		= 9;
	//Patra Type (Size) Settings
	DEFINE NPCA_PATRA_SMALL 	= 0; //1x1 core
	DEFINE NPCA_PATRA_LARGE 	= 1; //2x2 core

//Rock Indices
DEFINE NPCA_ROCK_SIZE 		= 9;
	//Rock Settings
	DEFINE NPCA_ROCK_SIZE_SMALL 	= 0; //1x1
	DEFINE NPCA_ROCK_SIZE_LARGE 	= 1; //1x1

//Wizzrobe Indices
DEFINE NPCA_WIZ_WALKSTYLE 		= 0;
	//Wizzrobe Walkstyle Settings
	DEFINE NPCA_WIZ_TELEPORT 	= 0;
	DEFINE NPCA_WIZ_PHASE 	= 1;
DEFINE NPCA_WIZ_SHOTTYPE 		= 1;
	//Wizzrobe Shot Type Settings
	DEFINE NPCA_WIZ_1SHOT 	= 0;
	DEFINE NPCA_WIZ_8SHOTS 	= 1;
	DEFINE NPCA_WIZ_SUMMON 	= 2;
	DEFINE NPCA_WIZ_SUMMON_LAYER = 3;
DEFINE NPCA_WIZ_SHOT_ATTR_1 		= 2;
DEFINE NPCA_WIZ_SOLIDCOMBOS 		= 3;
	//Wizzrobe Solid Combos Settings
	DEFINE NPCA_WIZ_SOLID_OK_NO 	= 0;
	DEFINE NPCA_WIZ_SOLID_OK_YES = 1;
DEFINE NPCA_WIZ_TELEPORT_DELAY 	= 4;

	
//Trap Indices
DEFINE NPCA_TRAP_DIR 		= 0;
	//Trap Dir Settings
	DEFINE NPCA_TRAP_DIR_4WAY 	= 0;
	DEFINE NPCA_TRAP_DIR_H 	= 1; //horizontal
	DEFINE NPCA_TRAP_DIR_V 	= 2; //vertical
DEFINE NPCA_TRAP_MOVE 		= 1;
	//Trap Movement Settings
	DEFINE NPCA_TRAP_MOVE_LOS 	= 0; //line of sight
	DEFINE NPCA_TRAP_MOVE_CONSTANT = 1;


//Tektite Indices
DEFINE NPCA_TEKTITE_JUMP_START 	= 0;
DEFINE NPCA_TEKTITE_JUMP_CONT 	= 1;
DEFINE NPCA_TEKTITE_JUMP_VELOCITY 	= 2;

//NPC Misc. Flags
DEFINE NPCMF_0POWERWEAPS 		= 0x0001; //Damaged by 0-Power Weapons
DEFINE NPCMF_ISINVISIBLE 		= 0x0002; //Is Invisible
DEFINE NPCMF_NEVERRETURNS 		= 0x0004; //Never Returns After Death
DEFINE NPCMF_NOT_BEATABLE  		= 0x0008; //Doesn't Count as beatable Enemy
DEFINE NPCMF_SPAWNFLICKER 		= 0x0010; //Unused.
//! These may be offset here, as MM defines:
//!	DEFINE NPCMF_SPAWNFLICKER = 0x0010; //Spawn animation = flicker (???) 
//!	in stdExtra.zh.  If so, the values should be offset to include this, ending at 0x2000. 
// Fixed
DEFINE NPCMF_ONLY_LENS 		= 0x0020; //Only Seen By Lens of truth
DEFINE NPCMF_FLASHING 		= 0x0040; //Is Flashing
DEFINE NPCMF_FLICKERING 		= 0x0080; //Is Flickering
DEFINE NPCMF_TRANSLUCENT 		= 0x0100; //Is translucent
DEFINE NPCMF_SHIELDED_FRONT 		= 0x0200; //Shielded on Front
DEFINE NPCMF_SHIELDED_LEFT 		= 0x0400; //Shielded on Left
DEFINE NPCMF_SHIELDED_RIGHT 		= 0x0800; //Shielded on Right
DEFINE NPCMF_SHIELDED_BACK 		= 0x1000; //Shielded on Back
DEFINE NPCMF_HAMMERBREAKS 		= 0x2000; //Hammer Can break Shield

//NPC Spawn Flags
DEFINE NPCSF_ZORA			= 0x0001; //Spawned by Zora Screen Flag
DEFINE NPCSF_FALLINGROCK		= 0x0002; //Spawned by Falling Rocks Screen Flag
DEFINE NPCSF_CORNERTRAP		= 0x0004; //Spawned by Corner Traps Screen Flag
DEFINE NPCSF_HORIZTRAP		= 0x0008; //Spawned by Horiz Trap Combo Type or Flag
DEFINE NPCSF_VERTTRAP		= 0x0010; //Spawned by Vert Trap Combo Type or Flag
DEFINE NPCSF_4WAYTRAP		= 0x0020; //Spawned by 4-Way Trap Combo Type or Flag
DEFINE NPCSF_LRTRAP			= 0x0040; //Spawned by LR Trap Combo Type or Flag
DEFINE NPCSF_UPTRAP			= 0x0080; //Spawned by UD Trap Combo Type or Flag
DEFINE NPCSF_MIDTRAP			= 0x0100; //Spawned by Middle Traps Screen Flag
DEFINE NPCSF_STATUEFIRE		= 0x0200; //Spawned by Statue Fire Screen Flag
DEFINE NPCSF_ARMOS			= 0x0400; //Spawned by Armos Combo Type
DEFINE NPCSF_GRAVE			= 0x0800; //Spawned by Grave Combo Type
DEFINE NPCSF_GANONROOM		= 0x1000; //Spawned by Ganon Room Type
DEFINE NPCSF_SPAWNANIM		= 0x2000; //Spawn Animation Type






///////////////////
/// Script Drawing

// Font types. Use with Screen->DrawCharacter *note -some of these fonts may not represent normal ascii characters,
//and all of these are completely undocumented. Use at your own peril
DEFINE FONT_Z1           = 0;
DEFINE FONT_Z3           = 1;
DEFINE FONT_Z3SMALL      = 2;
DEFINE FONT_DEF          = 3;
DEFINE FONT_L            = 4;
DEFINE FONT_L2           = 5;
DEFINE FONT_P            = 6;
DEFINE FONT_MATRIX       = 7;
DEFINE FONT_ZTIME        = 8;
DEFINE FONT_S            = 9;
DEFINE FONT_S2           = 10;
DEFINE FONT_SP           = 11;
DEFINE FONT_SUBSCREEN1   = 12;
DEFINE FONT_SUBSCREEN2   = 13;
DEFINE FONT_SUBSCREEN3   = 14;
DEFINE FONT_SUBSCREEN4   = 15;
DEFINE FONT_GBLA         = 16;
DEFINE FONT_LA           = 16; 
DEFINE FONT_GORON        = 17;
DEFINE FONT_ZORAN        = 18;
DEFINE FONT_HYLIAN1      = 19;
DEFINE FONT_HYLIAN2      = 20;
DEFINE FONT_HYLIAN3      = 21;
DEFINE FONT_HYLIAN4      = 22;
DEFINE FONT_GBORACLE     = 23;
DEFINE FONT_GBORACLEP    = 24;
DEFINE FONT_DSPHANTOM    = 25;
DEFINE FONT_DSPHANTOMP   = 26;


//! There are four fonts in the fonts.dat file that are absent here. -Z

//New Fonts for 2.54+
DEFINE FONT_ATARI800     = 27;
DEFINE FONT_ACORN        = 28;
DEFINE FONT_ADOS         = 29;
DEFINE FONT_ALLEGRO      = 30;
DEFINE FONT_APPLE2       = 31;
DEFINE FONT_APPLE2_80COL = 32;
DEFINE FONT_APPLE2GS     = 33;
DEFINE FONT_AQUARIUS     = 34;
DEFINE FONT_ATARI400     = 35;
DEFINE FONT_C64          = 36;
DEFINE FONT_C64_HIRES    = 37;
DEFINE FONT_CGA          = 38;
DEFINE FONT_COCO         = 39;    //Invrse chars for upper. 
DEFINE FONT_COCO2        = 40;    //Upper and lower
DEFINE FONT_COUPE        = 41;
DEFINE FONT_CPC          = 42;    //Amstrad
DEFINE FONT_FANTASY      = 43;
DEFINE FONT_FDS_KANA     = 44;
DEFINE FONT_FDSLIKE      = 45;
DEFINE FONT_FDS_ROMAN    = 46;
DEFINE FONT_FF           = 47;    //Final Fantasy
DEFINE FONT_FUTHARK      = 48;    //Runes
DEFINE FONT_GAIA         = 49;
DEFINE FONT_HIRA         = 50;
DEFINE FONT_JP           = 51;
DEFINE FONT_KONG         = 52;
DEFINE FONT_MANA         = 53;
DEFINE FONT_MARIOLAND    = 54;
DEFINE FONT_MOT          = 55;    //Motorola
DEFINE FONT_MSX0         = 56;    //MSX, Mode 0
DEFINE FONT_MSX1         = 57;    //MSX, Mod 1
DEFINE FONT_PET          = 58;
DEFINE FONT_PSTART       = 59;    //Nintendo-esque
DEFINE FONT_SATURN       = 60;    //Mr. Saturn
DEFINE FONT_SCIFI        = 61;
DEFINE FONT_SHERWOOD     = 62;
DEFINE FONT_SINQL        = 63;    //Sinclair QL
DEFINE FONT_SPECTRUM     = 64;
DEFINE FONT_SPECTRUM_LG  = 65;
DEFINE FONT_TI99         = 66;
DEFINE FONT_TRS          = 67;
DEFINE FONT_Z2           = 68;    //Zelda 2 plus custom lowercase.
DEFINE FONT_ZX           = 69;
DEFINE FONT_LISA         = 70;    //Lisa OS System Font

DEFINE FONT_NFONT        = 71;
DEFINE FONT_S3           = 72;
DEFINE FONT_CV3          = 73;
DEFINE FONT_CHRONO       = 74;
DEFINE FONT_NFONT2       = 75;
DEFINE FONT_BAK          = 76;
DEFINE FONT_GUNSTAR      = 77;
DEFINE FONT_SMW_CREDITS  = 78;
DEFINE FONT_WL4          = 79;
DEFINE FONT_BSZ          = 80;
DEFINE FONT_BSZ_PROP     = 81;
DEFINE FONT_FF6          = 82;
DEFINE FONT_EVO_EDEN     = 83;
DEFINE FONT_SMT          = 84;
DEFINE FONT_ACTRAISER    = 85;
DEFINE FONT_BAK_RUNES    = 86;
DEFINE FONT_BAK_SMALL    = 87;
DEFINE FONT_DISORIENT    = 88;
DEFINE FONT_DOOM         = 89;
DEFINE FONT_DRACULA      = 90;
DEFINE FONT_EJIM         = 91;
DEFINE FONT_FALLOUT      = 92;
DEFINE FONT_GRADIUS      = 93;
DEFINE FONT_LAMU_MSX     = 94;
DEFINE FONT_MEGAMAN      = 95;
DEFINE FONT_WINGDINGS    = 96;
DEFINE FONT_PKMN2        = 97;
DEFINE FONT_SMRPG        = 98;
DEFINE FONT_UNDERTALE    = 99;
DEFINE FONT_SMW          = 100;

DEFINE MAX_FONT = 100;
DEFINE MIN_FONT = 0;
DEFINE NUM_FONTS = MAX_FONT+1;

//Font heights, in pixels, for the above fonts:
//You should use 'Text->FontHeight(font)' to calculate this, not use constants...
define FONT_Z1_HEIGHT = 8;
define FONT_Z3_HEIGHT = 16;
define FONT_Z3SMALL_HEIGHT = 6;
define FONT_DEF_HEIGHT = 8;
define FONT_L_HEIGHT = 13;
define FONT_L2_HEIGHT = 13;
define FONT_P_HEIGHT = 8;
define FONT_MATRIX_HEIGHT = 8;
define FONT_ZTIME_HEIGHT = 6;
define FONT_S_HEIGHT = 6;
define FONT_S2_HEIGHT = 6;
define FONT_SP_HEIGHT = 6;
define FONT_SUBSCREEN1_HEIGHT = 8;
define FONT_SUBSCREEN2_HEIGHT = 8;
define FONT_SUBSCREEN3_HEIGHT = 8;
define FONT_SUBSCREEN4_HEIGHT = 8;
define FONT_GBLA_HEIGHT = 8;
define FONT_LA_HEIGHT = 8;
define FONT_GORON_HEIGHT = 15;
define FONT_ZORAN_HEIGHT = 15;
define FONT_HYLIAN1_HEIGHT = 15;
define FONT_HYLIAN2_HEIGHT = 24;
define FONT_HYLIAN3_HEIGHT = 21;
define FONT_HYLIAN4_HEIGHT = 18;
define FONT_GBORACLE_HEIGHT = 15;
define FONT_GBORACLEP_HEIGHT = 15;
define FONT_DSPHANTOM_HEIGHT = 15;
define FONT_DSPHANTOMP_HEIGHT = 15;
define FONT_ATARI800_HEIGHT = 16;
define FONT_ACORN_HEIGHT = 8;
define FONT_ADOS_HEIGHT = 8;
define FONT_ALLEGRO_HEIGHT = 8;
define FONT_APPLE2_HEIGHT = 8;
define FONT_APPLE2_80COL_HEIGHT = 16;
define FONT_APPLE2GS_HEIGHT = 12;
define FONT_AQUARIUS_HEIGHT = 8;
define FONT_ATARI400_HEIGHT = 8;
define FONT_C64_HEIGHT = 8;
define FONT_C64_HIRES_HEIGHT = 16;
define FONT_CGA_HEIGHT = 8;
define FONT_COCO_HEIGHT = 16;
define FONT_COCO2_HEIGHT = 16;
define FONT_COUPE_HEIGHT = 8;
define FONT_CPC_HEIGHT = 12;
define FONT_FANTASY_HEIGHT = 18;
define FONT_FDS_KANA_HEIGHT = 8;
define FONT_FDSLIKE_HEIGHT = 8;
define FONT_FDS_ROMAN_HEIGHT = 8;
define FONT_FF_HEIGHT = 8;
define FONT_FUTHARK_HEIGHT = 8;
define FONT_GAIA_HEIGHT = 16;
define FONT_HIRA_HEIGHT = 8;
define FONT_JP_HEIGHT = 16;
define FONT_KONG_HEIGHT = 8;
define FONT_MANA_HEIGHT = 12;
define FONT_MARIOLAND_HEIGHT = 8;
define FONT_MOT_HEIGHT = 12;
define FONT_MSX0_HEIGHT = 8;
define FONT_MSX1_HEIGHT = 8;
define FONT_PET_HEIGHT = 8;
define FONT_PSTART_HEIGHT = 8;
define FONT_SATURN_HEIGHT = 16;
define FONT_SCIFI_HEIGHT = 8;
define FONT_SHERWOOD_HEIGHT = 16;
define FONT_SINQL_HEIGHT = 8;
define FONT_SPECTRUM_HEIGHT = 8;
define FONT_SPECTRUM_LG_HEIGHT = 16;
define FONT_TI99_HEIGHT = 8;
define FONT_TRS_HEIGHT = 16;
define FONT_Z2_HEIGHT = 8;
define FONT_LISA_HEIGHT = 8;

// PrintString Text Formats. Use with Screen->DrawString.
DEFINE TF_NORMAL             = 0; // treats the left-most char as (x)
DEFINE TF_CENTERED           = 1; // prints the string centered on (x)
//DEFINE TF_CENTRED           = 1; // in ./locale -- prints the string centered on (x)
DEFINE TF_RIGHT              = 2; // treats the right-most char as (x)

// Texture mapping rendering modes. Use with Screen->"Psuedo 3D" or "*3D" drawing routines. ie; Polygon, Quad, or Triangle
DEFINE PT_FLAT               = 0; // single color shading
DEFINE PT_FLATSHADED         = 1; // "" with flat shading (*3D only)
DEFINE PT_COLSHADED          = 2; // "" with color shading (*3D only)
DEFINE PT_TEXTURE            = 3; // texture mapped polygon using 2d linear interpolation
DEFINE PT_PTEXTURE           = 4; // "" 
DEFINE PT_MASKTEXTURE        = 5; // transparent texture mapped polygon using 2d linear interpolation
DEFINE PT_MASKPTEXTURE       = 6; // "" 
DEFINE PT_LITTEXTURE         = 7; // "" with lighting (*3D only)
DEFINE PT_LITPTEXTURE        = 8; // "" (*3D only)
DEFINE PT_MASKLITTEXTURE     = 9; // "" with transparency
DEFINE PT_MASKLITPTEXTURE    = 10; // "" 
DEFINE PT_TRANSTEXTURE       = 11; // translucent texture mapped polygon using 2d linear interpolation
DEFINE PT_TRANSPTEXTURE      = 12; // "" 
DEFINE PT_MASKTRANSTEXTURE   = 13; // translucent and transparent texture mapped polygon using 2d linear interpolation
DEFINE PT_MASKTRANSPTEXTURE  = 14; // "" 

// Opacity options. Use with drawing commands.
DEFINE OP_TRANS              = 64;
DEFINE OP_OPAQUE             = 128;

// Render Targets. Use with Screen->"*RenderTarget" and Screen->"Bitmap" drawing routines.
DEFINE RT_CURRENT            = -2; // Used by Blit(). mode7(), and RevBlit() for the current RT as dest.
DEFINE RT_SCREEN             = -1; // draws to screen
DEFINE RT_BITMAP0            = 0; // draws to off-screen bitmap 0
DEFINE RT_BITMAP1            = 1; // draws to off-screen bitmap 1
DEFINE RT_BITMAP2            = 2; // draws to off-screen bitmap 2
DEFINE RT_BITMAP3            = 3; // draws to off-screen bitmap 3
DEFINE RT_BITMAP4            = 4; // draws to off-screen bitmap 4
DEFINE RT_BITMAP5            = 5; // draws to off-screen bitmap 5
DEFINE RT_BITMAP6            = 6; // draws to off-screen bitmap 6




/////////////////////////
/// DMaps, Screens, Rooms

//Screen Flag categories. Flags from each category are ORed together, starting with the first flag
//See Screen Data dialog for what flags are contained in each category. Use in Screen->Flags
enum
{
	SF_ROOMTYPE,
	SF_VIEW,
	SF_SECRETS,
	SF_WARP,
	SF_ITEMS,
	SF_COMBOS,
	SF_SAVE,
	SF_FFC,
	SF_WHISTLE,
	SF_MISC,
	SF_LAST
};

//! These DMap Flag values do not return the expected results when compared via TraeS()ing what is anticipated!

//Screen Flag Roomtype
enum
{
	SFR_INTERIOR, //0x0000 ?
	SFR_DUNGEON, //0x0001
	SFR_SIDEVIEW, //0x0002
	
	SFR_LAST
};

//Screen Flag View
enum
{
	SFV_INVISLINK, //0x0001;
	SFV_NOLINKMARKER,// 0x0002;
	SFV_NOSUBSCREEN,// 0x0004;
	SFV_NOOFFSET, // 0x0008; //'...but don't offset'
	SFV_LAYER2BG, // 0x0010; //Layer 2 is Background
	SFV_LAYER3BG, //0x0020;
	SFV_DARKROOM, //0x0040; 
	SFV_DARK_DITHER, //0x0080; 
	SFV_DARK_TRANS, //0x0100; 
	
	SFV_LAST
};

//Screen Flag Secrets
enum
{
	SFS_BLOCKSHUT, //0x0001; //Block->Shutters
	SFS_TEMPSECRETS, //0x0002; //Secrets are temporary.
	SFS_TRIGPERM, //0x0004; //All Triggers->Perm Secret
	SFS_ALLTRIGFLAGS, //0x0008; //All triggers->16-31
	
	SFS_LAST
};

//Screen Flag Warp
enum
{
	SFW_AUTODIRECT, //  0x0001; //Auto Warps are Direct
	SFW_SENDSIRECT, //0x0002; //Sensitive Warps are direct.
	SFW_MAZEPATHS, //0x0004; //Use maze Path
	SFW_MAZEOVERRIDE, //0x0008; //maze Overrides Sidewarps
	SFW_SPRITECARRY, //0x0010; //Sprites carry over. 
	SFW_DISABLE_MIRROR, //0x0020; //Disable Magic Mirror
	
	SFW_LAST
};


//Screen Flag Items
enum 
{
	SFI_HOLDUP, //0x0001; //Hold up item.
	SFI_FALLS, //0x0002; //Falls from ceiling
	SFI_SECRETSITEM, //0x0004; //Secret reveals item
	SFI_ITEMSECRET, //0x0008; //Item triggers secrets
	SFI_ITEMSECRETPERM, //0x0010; //Item triggering secrets is permanent
	SFI_ITEMRETURNS, //0x0020; //Regular item always returns
	SFI_SPECIALITEMRETURNS, //0x0040; //Special item always returns
	
	SFI_LAST
};

//Screen Flag Combos
enum
{
	SFC_MIDAIR,// 0x0001; //Combos affect midair Link
	SFC_CYCLEINIT, //0x0002; //Cycle combos on screen init.
	SFC_IGNOREBOOTS, //0x0004; //Damage combos ignore boots. 
	SFC_TOGGLERINGS, //0x0008; //Toggle 'Rings Affect Combos'
	
	SFC_LAST
};

//Screen Flag Save
enum
{
	SFSV_SAVECONTHERE, //0x0001; //Save Point->ontinue here.
	SFSV_SAVEONENTRY, //0x0002; //Save game on entry.
	SFSV_CONTHERE, // 0x0004; //Comtinue here.
	SFSV_NOCONTINUEWARP, //0x0008; //No continue Here after warp. 
	
	SFSV_LAST
};

//Screen Flags FFC
enum
{
	SFF_WRAP,  //  0x0001; //Freeform Combos Wrap Around
	SFF_NOCARRYOVER, //0x0002; //No FFC carry over. 
	
	SFF_LAST
};

//Screen Flags Whistle
enum
{
	SFWH_STAIRS = 0, //0x0001; //Whistle->Stairs
	SFWH_PALCHANGE, //0x0002; //Whistle->Palette Change
	SFWH_DRYLAKE, //0x0004; //Whistle->Dry lake
	
	SFWH_LAST
};

//Old constants, use the ones above.
DEFINE SFW_STAIRS = SFWH_STAIRS; //0x0001; //Whistle->Stairs
DEFINE SFW_PALCHANGE = SFWH_PALCHANGE; //0x0002; //Whistle->Palette Change
DEFINE SFW_DRYLAKE = SFWH_DRYLAKE; //0x0004; //Whistle->Dry lake

//Misc. Screen flags. Bitshift 1 by the constant and OR to use.
enum
{
	SFM_ALLOW_LADDER,   //0x0001; //Toggle 'Allow Ladder'
	SFM_NO_DIVING,      //0x0002; //Toggle 'No Diving' 
	SFM_SCRIPT1,        //0x0004; //General use 1 (Scripts)
	SFM_SCRIPT2,        //0x0008; //General use 2 (Scripts)
	SFM_SCRIPT3,        //0x0010; //General use 3 (Scripts)
	SFM_SCRIPT4,        //0x0020; //General use 4 (Scripts)
	SFM_SCRIPT5,        //0x0040; //General use 5 (Scripts)

	SFM_LAST
};

//Screen Enemy Flag categories, handled in the same way as the SF_ constants.
//Use in Screen->EFlags
DEFINE SEF_SPAWN				= 0;
DEFINE SEF_LIST1				= 1; //left-hand list
DEFINE SEF_LIST2				= 2; //right-hand list

//Screen Enemy Flags: Spawn
enum
{
	SEFSP_ZORA, //0x0001
	SEFSP_CORNERTRAP, //0x0002
	SEFSP_MIDDLETRAP, //0x0004
	SEFSP_ROCK, //0x0008
	SEFSP_SHOOTER, //0x0010
	
	SEFSP_LAST
};

//Screen Enemy Flags: List1
enum
{
	SEFL1_RINGLEADER, //0x0001
	SEFL1_CARRYITEM, //0x0002
	SEFL1_INVIS, //0x0004
	SEFL1_BOSS, //0x0008
	SEFL1_TRAPS_IGNORE_SOLID, //0x0010
	
	SEFL1_LAST
};

//Screen Enemy Flags: List2
enum
{
	SEFL2_ALWAYSRET, //0x0001
	SEFL2_ENEMIES_ITEM, //0x0002
	SEFL2_ENEMEIS_SECRET, //0x0004
	SEFL2_ENEMIES_SECRET_PERM, //0x0008
	SEFL2_CHAIN_ENEMIES_TRIGGERS, //0x0010
	
	SEFL2_LAST
};

//Room types (Screen => Room Type)
//Use with Screen->RoomType
DEFINE RT_DOORREPAIR         = 5;
DEFINE RT_FEEDTHEGORIYA      = 7;
DEFINE RT_GAMBLE             = 4;
DEFINE RT_GANON              = 15;
DEFINE RT_ITEMPOND           = 17; //doesn't work
DEFINE RT_LEARNSLASH         = 19;
DEFINE RT_LEVEL9ENTRANCE     = 8;
DEFINE RT_MAGICUPGRADE       = 18;
DEFINE RT_MONEYORLIFE        = 12;
DEFINE RT_MOREARROWS         = 20;
DEFINE RT_MOREBOMBS          = 11;
DEFINE RT_NONE               = 0;
DEFINE RT_PAYFORINFO         = 2;
DEFINE RT_POTIONORHEART      = 6;
DEFINE RT_POTIONSHOP         = 9;
DEFINE RT_SECRETMONEY        = 3;
DEFINE RT_SHOP               = 10;
DEFINE RT_SPECIALITEM        = 1;
DEFINE RT_STAIRWARP          = 14;
DEFINE RT_TAKEONEITEM        = 21;
DEFINE RT_TENRUPEES          = 13;
DEFINE RT_ZELDA              = 16;

enum roomtypes
{
	//0
	rtNONE, rtSPECIALITEM, rtPAYINFO, rtSECRETMONEY, rtGAMBLE,
	//5
	rtDOORREPAIR, rtPOTIONORHEART, rtGORIYA, rtLEVEL9, rtPOTION,
	//10
	rtSHOP, rtBOMBS, rtMOYL, rtTENRUPY, rtSTAIRWARP,
	//15
	rtGAN, rtWINGAME, rtITEMPOND, /*item ponds not implemented*/ rtMAGIC, rtSLASH, 
	//20
	rtARROWS, rtONEITEM, rtLAST
};

enum catchalltypes
{
	//0
	caNONE, caITEM, caPRICE, caAMOUNT, caGAMBLE,
	//5
	caSHOPID, caINFOSHOPID, caWARPRING, caPONDID, 
	//10
	caLAST
	
};

//DMap Flag constants. Use with Game->DMapFlags.
DEFINE DMF_CAVESNOTCELLARS		= 0x0001; //Use caves instead of item cellars
DEFINE DMF_3STAIRWARPS		= 0x0002; //Allow 3-stair warps
DEFINE DMF_WWIND			= 0x0004; //Allow whistle whirlwinds
DEFINE DMF_GUYCAVES			= 0x0008; //Special rooms and guys are in caves only
DEFINE DMF_NOCOMPASS			= 0x0010; //Don't display compass marker in minimap
DEFINE DMF_WAVY 			= 0x0020; //Underwater wave effect
DEFINE DMF_WWINDRET			= 0x0040; //Whistle whirlwind returns Link to beginning
DEFINE DMF_ALWAYSINTROMSG		= 0x0080; //Always display intro string
DEFINE DMF_VIEWMAP       		= 0x0100; //View overworld map by pressing 'Map'
DEFINE DMF_DMAPMAP         		= 0x0200; //...But only show screens marked in minimap
DEFINE DMF_MINIMAPCOLORFIX 		= 0x0400; //Use minimap foreground colour 2
DEFINE DMF_MINIMAPCOLOURFIX 		= 0x0400; //Use minimap foreground colour 2
DEFINE DMF_SCRIPT1 			= 0x0800; //DMap Script Flags
DEFINE DMF_SCRIPT2 			= 0x1000;
DEFINE DMF_SCRIPT3 			= 0x2000;
DEFINE DMF_SCRIPT4 			= 0x4000;
DEFINE DMF_SCRIPT5 			= 0x8000;
DEFINE DMF_SIDEVIEW 			= 0x10000;
DEFINE DMF_LAYER3ISBACKGROUND 	= 0x20000; //Exceeds the bounds of ZScript LONG_MAX. We need dmapdata->Flags[]
//DEFINE DMF_LAYER2ISBACKGROUND 	= 0x40000;
//DEFINE DMF_TRUECELLARENEMIES 	= 0x80000; //(1<<19)

//dmapdata->Flagset[] indices
enum
{
	DMFS_CAVESNOTCELLARS,     //Use caves instead of item cellars
	DMFS_3STAIRWARPS,         //Allow 3-stair warps
	DMFS_WWIND,               //Allow whistle whirlwinds
	DMFS_GUYCAVES,            //Special rooms and guys are in caves only
	DMFS_NOCOMPASS,           //Don't display compass marker in minimap
	DMFS_WAVY,                //Underwater wave effect
	DMFS_WWINDRET,            //Whistle whirlwind returns Link to beginning
	DMFS_ALWAYSINTROMSG,      //Always display intro string
	DMFS_VIEWMAP,             //View overworld map by pressing 'Map'
	DMFS_DMAPMAP,             //...But only show screens marked in minimap
	DMFS_MINIMAPCOLORFIX,     //Use minimap foreground colour 2
	DMFS_MINIMAPCOLOURFIX = DMFS_MINIMAPCOLORFIX,    //Use minimap foreground colour 2
	DMFS_SCRIPT1,             //DMap Script Flag 1
	DMFS_SCRIPT2,             //DMap Script Flag 2
	DMFS_SCRIPT3,             //DMap Script Flag 3
	DMFS_SCRIPT4,             //DMap Script Flag 4
	DMFS_SCRIPT5,             //DMap Script Flag 5
	DMFS_SIDEVIEW,            //DMap is Sideview
	DMFS_LAYER3ISBACKGROUND,  //Layer 3 is Background
	DMFS_LAYER2ISBACKGROUND,  //Layer 2 is bBackground
	DMFS_TRUECELLARENEMIES,   //True Cellar Enemies
	DMFS_BUNNY,               //Become Bunny with no Pearl
	DMFS_MIRRORCONTINUE,      //Mirror Continues instead of Warping
	DMFS_MAX
};

//Screen states. Use these with Screen->State[], etc.
DEFINE ST_DOORUP             = 0; // The locked/bomb door has been permanently unlocked/bombed
DEFINE ST_DOORDOWN           = 1; // The locked/bomb door has been permanently unlocked/bombed
DEFINE ST_DOORLEFT           = 2; // The locked/bomb door has been permanently unlocked/bombed
DEFINE ST_DOORRIGHT          = 3; // The locked/bomb door has been permanently unlocked/bombed
DEFINE ST_ITEM               = 4; // If set, the item is gone
DEFINE ST_SPECIALITEM        = 5; // If set, the Cave/Item Cellar/Dive For Item/Armos item is gone
DEFINE ST_ENEMYNORETURN      = 6; // If set, enemies won't return
DEFINE ST_TEMPNORETURN       = 7; // If set, enemies won't return. This is automatically unset when you leave the DMap
DEFINE ST_LOCKBLOCK          = 8; // The lock block on the screen has been triggered
DEFINE ST_BOSSLOCKBLOCK      = 9; // The boss lock block on the screen has been triggered
DEFINE ST_CHEST              = 10; // The unlocked chest on this screen has been opened
DEFINE ST_LOCKEDCHEST        = 11; // The locked chest on this screen has been opened
DEFINE ST_BOSSCHEST          = 12; // The boss chest on this screen has been opened
DEFINE ST_SECRET             = 13; // Screen Secrets have been made permanent
DEFINE ST_VISITED            = 14; // If set, this screen will appear on the Overworld Map
DEFINE ST_LIGHTBEAM          = 15; // If set, the light triggers on the screen have been triggered

//Door Positions; indices of Screen->Door[]
DEFINE DOOR_UP               = 0;
DEFINE DOOR_DOWN             = 1;
DEFINE DOOR_LEFT             = 2;
DEFINE DOOR_RIGHT             = 3;

//Door types. Use with Screen->Door[]
DEFINE D_WALL                = 0;
DEFINE D_OPEN                = 1;
DEFINE D_LOCKED              = 2;
DEFINE D_UNLOCKED            = 3; // A locked door that has been opened
DEFINE D_SHUTTER             = 4; // Defeat enemies to unlock this door
DEFINE D_BOMB                = 6; // A door that changes when bombed
DEFINE D_BOMBED              = 7; // A door that has been bombed
DEFINE D_WALKTHRU            = 8; // Push against the wall to pass through
DEFINE D_BOSSLOCKED          = 10;
DEFINE D_BOSSUNLOCKED        = 11; // A boss door that has been opened
DEFINE D_OPENSHUTTER         = 12; // A shutter that has been opened
DEFINE D_1WAYSHUTTER         = 14; // A shutter that locks behind you and never opens
DEFINE D_NONE                = 16; // No door at all. Player will not auto-walk.

//Sprite lists. Use with Screen->ClearSprites()
DEFINE SL_GUYS               = 0; // Enemies
DEFINE SL_ITEMS              = 1; // Items
DEFINE SL_EWPNS              = 2; // Enemy weapons
DEFINE SL_LWPNS              = 3; // Link's weapons
DEFINE SL_DECORATIONS        = 4; // Grass clippings, Hover boots glow, etc.
DEFINE SL_PARTICLES          = 5; // Farore's Wind particles

///////////////////
/// Link Properties

//Link actions
enum HeroAction
{
	LA_NONE,
	LA_WALKING,
	LA_ATTACKING,
	LA_FROZEN,
	LA_HOLD1LAND,         // One hand.
	LA_HOLD2LAND,         // Both hands.
	LA_RAFTING,
	LA_GOTHURTLAND,
	LA_INWIND,
	LA_SCROLLING,
	LA_WINNING,
	LA_SWIMMING,
	LA_HOPPING,           // Leaving water; read-only.
	LA_GOTHURTWATER,
	LA_HOLD1WATER,
	LA_HOLD2WATER,
	LA_CASTING,           // Casting a spell; read-only.
	LA_CAVEWALKUP,
	LA_CAVEWALKDOWN,
	LA_DYING,
	LA_DROWNING,
	LA_CLIMBING_RES,      // unused, RESERVED
	LA_CHARGING,          // Charging the sword.
	LA_SPINNING,          // Spin attack.
	LA_DIVING, //24
	//25,26 unused, RESERVED
	LA_STUNNED = 27,
	//28 unused, RESERVED
	LA_FALLING = 29,
	LA_LAVADROWN,
	LA_SIDESWIM,
	LA_SIDESWIMHIT,
	LA_SIDESWIMATTACKING,
	LA_HOLD1SIDESWIM,
	LA_HOLD2SIDESWIM,
	LA_SIDESWIMCASTING,
	LA_SIDESWIMFROZEN,
	LA_SIDEDROWN,
	LA_SIDESWIMSPINNING,
	LA_SIDESWIMCHARGING,
	LA_LIFTING,
	LA_MAX
};

							/*lavadrowning, sideswimming, sideswimhit, sideswimattacking, 
								sidewaterhold1, sidewaterhold2, sideswimcasting, sideswimfreeze, sidedrowning,
								sideswimisspinning, sideswimischarging*/

///////////////////////
/// Combo Types & Flags



//Combo flags. Use with Screen->ComboF[]
DEFINE CF_NONE               = 0;
DEFINE CF_PUSHUPDOWN         = 1;
DEFINE CF_PUSH4WAY           = 2;
DEFINE CF_WHISTLE            = 3;
DEFINE CF_CANDLE1            = 4;
DEFINE CF_ARROW              = 5;
DEFINE CF_BOMB               = 6;
DEFINE CF_FAIRY              = 7;
DEFINE CF_RAFT               = 8;
DEFINE CF_ARMOSSECRET        = 9;
DEFINE CF_ARMOSITEM          = 10;
DEFINE CF_SBOMB              = 11;
DEFINE CF_RAFTBRANCH         = 12;
DEFINE CF_DIVEITEM           = 13;
DEFINE CF_LENSMARKER         = 14;
DEFINE CF_ZELDA              = 15;
DEFINE CF_SECRETS01          = 16;
DEFINE CF_SECRETS02          = 17;
DEFINE CF_SECRETS03          = 18;
DEFINE CF_SECRETS04          = 19;
DEFINE CF_SECRETS05          = 20;
DEFINE CF_SECRETS06          = 21;
DEFINE CF_SECRETS07          = 22;
DEFINE CF_SECRETS08          = 23;
DEFINE CF_SECRETS09          = 24;
DEFINE CF_SECRETS10          = 25;
DEFINE CF_SECRETS11          = 26;
DEFINE CF_SECRETS12          = 27;
DEFINE CF_SECRETS13          = 28;
DEFINE CF_SECRETS14          = 29;
DEFINE CF_SECRETS15          = 30;
DEFINE CF_SECRETS16          = 31;
DEFINE CF_TRAPH              = 32;
DEFINE CF_TRAPV              = 33;
DEFINE CF_TRAP4WAY           = 34;
DEFINE CF_TRAPLR             = 35;
DEFINE CF_TRAPUD             = 36;
DEFINE CF_ENEMY0             = 37;
DEFINE CF_ENEMY1             = 38;
DEFINE CF_ENEMY2             = 39;
DEFINE CF_ENEMY3             = 40;
DEFINE CF_ENEMY4             = 41;
DEFINE CF_ENEMY5             = 42;
DEFINE CF_ENEMY6             = 43;
DEFINE CF_ENEMY7             = 44;
DEFINE CF_ENEMY8             = 45;
DEFINE CF_ENEMY9             = 46;
DEFINE CF_PUSHLR             = 47;
DEFINE CF_PUSHUP             = 48;
DEFINE CF_PUSHDOWN           = 49;
DEFINE CF_PUSHLEFT           = 50;
DEFINE CF_PUSHRIGHT          = 51;
DEFINE CF_PUSHUPDOWNNS       = 52;
DEFINE CF_PUSHLEFTRIGHTNS    = 53;
DEFINE CF_PUSH4WAYNS         = 54;
DEFINE CF_PUSHUPNS           = 55;
DEFINE CF_PUSHDOWNNS         = 56;
DEFINE CF_PUSHLEFTNS         = 57;
DEFINE CF_PUSHRIGHTNS        = 58;
DEFINE CF_PUSHUPDOWNINS      = 59;
DEFINE CF_PUSHLEFTRIGHTINS   = 60;
DEFINE CF_PUSH4WAYINS        = 61;
DEFINE CF_PUSHUPINS          = 62;
DEFINE CF_PUSHDOWNINS        = 63;
DEFINE CF_PUSHLEFTINS        = 64;
DEFINE CF_PUSHRIGHTINS       = 65;
DEFINE CF_BLOCKTRIGGER       = 66;
DEFINE CF_NOBLOCKS           = 67;
DEFINE CF_BRANG1             = 68;
DEFINE CF_BRANG2             = 69;
DEFINE CF_BRANG3             = 70;
DEFINE CF_ARROW2             = 71;
DEFINE CF_ARROW3             = 72;
DEFINE CF_CANDLE2            = 73;
DEFINE CF_WANDFIRE           = 74;
DEFINE CF_DINSFIRE           = 75;
DEFINE CF_WANDMAGIC          = 76;
DEFINE CF_REFMAGIC           = 77;
DEFINE CF_REFFIREBALL        = 78;
DEFINE CF_SWORD1             = 79;
DEFINE CF_SWORD2             = 80;
DEFINE CF_SWORD3             = 81;
DEFINE CF_SWORD4             = 82;
DEFINE CF_SWORD1BEAM         = 83;
DEFINE CF_SWORD2BEAM         = 84;
DEFINE CF_SWORD3BEAM         = 85;
DEFINE CF_SWORD4BEAM         = 86;
DEFINE CF_HOOKSHOT           = 87;
DEFINE CF_WAND               = 88;
DEFINE CF_HAMMER             = 89;
DEFINE CF_STRIKE             = 90;
DEFINE CF_BLOCKHOLE          = 91;
DEFINE CF_MAGICFAIRY         = 92;
DEFINE CF_ALLFAIRY           = 93;
DEFINE CF_SINGLE             = 94;
DEFINE CF_SINGLE16           = 95;
DEFINE CF_NOENEMY            = 96;
DEFINE CF_NOGROUNDENEMY      = 97;
DEFINE CF_SCRIPT1            = 98;
DEFINE CF_SCRIPT2            = 99;
DEFINE CF_SCRIPT3            = 100;
DEFINE CF_SCRIPT4            = 101;
DEFINE CF_SCRIPT5            = 102;
DEFINE CF_RAFTBOUNCE         = 103;
DEFINE CF_PUSHED             = 104;


//2.54+ Flags

DEFINE CF_SCRIPT6              = 105;
DEFINE CF_SCRIPT7              = 106;
DEFINE CF_SCRIPT8              = 107;
DEFINE CF_SCRIPT9              = 108;
DEFINE CF_SCRIPT10             = 109;
DEFINE CF_SCRIPT11             = 110;
DEFINE CF_SCRIPT12             = 111;
DEFINE CF_SCRIPT13             = 112;
DEFINE CF_SCRIPT14             = 113;
DEFINE CF_SCRIPT15             = 114;
DEFINE CF_SCRIPT16             = 115;
DEFINE CF_SCRIPT17             = 116;
DEFINE CF_SCRIPT18             = 117;
DEFINE CF_SCRIPT19             = 118;
DEFINE CF_SCRIPT20             = 119;
DEFINE CF_SCRIPT_PIT           = 120; // Pit or Hole (Scripted)
DEFINE CF_SCRIPT_PIT_FALL      = 121; // Pit or Hole, Fall Down Floor (Scripted)
DEFINE CF_SCRIPT_LAVA          = 122; // Fire or Lava (Scripted)
DEFINE CF_SCRIPT_ICE           = 123; // Ice (Scripted)
DEFINE CF_SCRIPT_ICE_DMG       = 124; //Ice, Damaging (Scripted)
DEFINE CF_SCRIPT_DAMAGE_1      = 125;  //Damage-1 (Scripted)
DEFINE CF_SCRIPT_DAMAGE_2      = 126; // Damage-2 (Scripted)
DEFINE CF_SCRIPT_DAMAGE_4      = 127; //Damage-4 (Scripted)
DEFINE CF_SCRIPT_DAMAGE_8      = 128; //Damage-8 (Scripted)
DEFINE CF_SCRIPT_DAMAGE_16     = 129; //Damage-16 (Scripted)
DEFINE CF_SCRIPT_DAMAGE_32     = 130; //Damage-32 (Scripted)
DEFINE CF_SCRIPT_FREEZE_SCREEN = 131; //Freeze Screen (Unimplemented)
DEFINE CF_SCRIPT_FREEZE_SCREEN_EXCEPT_FFCS  = 132; // Freeze Screen, Except FFCs (Unimplemented)
DEFINE CF_SCRIPT_FREEZE_FFCS_ONLY = 133; //Freeze FFCs Only (Unimplemented)
DEFINE CF_LW_SCRIPT1           = 134; // Trigger LW_SCRIPT1 (Unimplemented)
DEFINE CF_LW_SCRIPT2           = 135; // Trigger LW_SCRIPT2 (Unimplemented)
DEFINE CF_LW_SCRIPT3           = 136; //Trigger LW_SCRIPT3 (Unimplemented)
DEFINE CF_LW_SCRIPT4           = 137; //Trigger LW_SCRIPT4 (Unimplemented)
DEFINE CF_LW_SCRIPT5           = 138; //Trigger LW_SCRIPT5 (Unimplemented)
DEFINE CF_LW_SCRIPT6           = 139; //Trigger LW_SCRIPT6 (Unimplemented)
DEFINE CF_LW_SCRIPT7           = 140; //Trigger LW_SCRIPT7 (Unimplemented)
DEFINE CF_LW_SCRIPT8           = 141; //Trigger LW_SCRIPT8 (Unimplemented)
DEFINE CF_LW_SCRIPT9           = 142; //Trigger LW_SCRIPT9 (Unimplemented)
DEFINE CF_LW_SCRIPT10          = 143; //Trigger LW_SCRIPT10 (Unimplemented)
DEFINE CF_SCRIPT_DIG           = 144;  //Dig Spot (Scripted)
DEFINE CF_SCRIPT_DIG_NEXT      = 145;  //Dig Spot, Next (Scripted)
DEFINE CF_SCRIPT_DIG_ITEM      = 146;  //Dig Spot, Special Item (Scripted)
DEFINE CF_SCRIPT_POT_SLASH     = 147; // Pot, Slashable (Scripted)
DEFINE CF_SCRIPT_POT_LIFT      = 148; // Pot, Liftable (Scripted)
DEFINE CF_SCRIPT_POT_SLASH_OR_LIFT =  149; // Pot, Slash or Lift (Scripted)
DEFINE CF_SCRIPT_LIFT_NORMAL   = 150; // Rock, Lift Normal (Scripted)
DEFINE CF_SCRIPT_LIFT_HEAVY    = 151; // Rock, Lift Heavy (Scripted)
DEFINE CF_SCRIPT_DROPSET_ITEM  = 152; // Dropset Item (Scripted)
DEFINE CF_SCRIPT_SPECIAL_ITEM  = 153; // Special Item (Scripted)
DEFINE CF_SCRIPT_DROP_KEY      = 154; //Drop Key (Scripted)
DEFINE CF_SCRIPT_DROP_LKEY     = 155; // Drop level-Specific Key (Scripted)
DEFINE CF_SCRIPT_DROP_COMPASS  = 156; // Drop Compass (Scripted)
DEFINE CF_SCRIPT_DROP_MAP      = 157; // Drop Map (Scripted)
DEFINE CF_SCRIPT_DROP_BOSS_KEY = 158; // Drop Boss Key (Scripted)
DEFINE CF_SCRIPT_SPAWN_NPC     = 159; // Spawn NPC (Scripted)
DEFINE CF_SCRIPT_SWITCHHOOK    = 160; // SwitchHook Spot (Scripted)

DEFINE CF_SCRIPT21 = 120;
DEFINE CF_SCRIPT22 = 121;
DEFINE CF_SCRIPT23 = 122;
DEFINE CF_SCRIPT24 = 123;
DEFINE CF_SCRIPT25 = 124;
DEFINE CF_SCRIPT26 = 125;
DEFINE CF_SCRIPT27 = 126;
DEFINE CF_SCRIPT28 = 127;
DEFINE CF_SCRIPT29 = 128;
DEFINE CF_SCRIPT30 = 129;
DEFINE CF_SCRIPT31 = 130;
DEFINE CF_SCRIPT32 = 144;
DEFINE CF_SCRIPT33 = 145;
DEFINE CF_SCRIPT34 = 146;
DEFINE CF_SCRIPT35 = 147;
DEFINE CF_SCRIPT36 = 148;
DEFINE CF_SCRIPT37 = 149;
DEFINE CF_SCRIPT38 = 150;
DEFINE CF_SCRIPT39 = 151;
DEFINE CF_SCRIPT40 = 152;
DEFINE CF_SCRIPT41 = 153;
DEFINE CF_SCRIPT42 = 154;
DEFINE CF_SCRIPT43 = 155;
DEFINE CF_SCRIPT44 = 156;
DEFINE CF_SCRIPT45 = 157;
DEFINE CF_SCRIPT46 = 158;
DEFINE CF_SCRIPT47 = 159;
DEFINE CF_SCRIPT48 = 160;


DEFINE CF_SIDEVIEW_LADDER    = 161; // Sideview Ladder
DEFINE CF_SIDEVIEW_PLATFORM  = 162; // Sideview Platform
DEFINE CF_NO_ENEMIES_SPAWN   = 163; //No Enemies Spawn
DEFINE CF_ALL_ENEMIES_SPAWN  = 164; //All Enemies Spawn
DEFINE CF_SECRETS_NEXT       = 165; //Secrets->Next

//chests  to 16, unlocked, locked, boss; small, big. Probably better as combo types?

// 200 :  Reserved for CF_STEP from TheRandomHeader.zh

//////////////////
/// FFC Properties

//FFC Flags. To be used as indices into ffc->Flags[].
DEFINE FFCF_OVERLAY          	= 0; // Draw Over (draw between layers 4 and 5)
DEFINE FFCF_TRANS            	= 1; // Translucent
DEFINE FFCF_SOLID            	= 2; // Solidity (Partially Implemented)
DEFINE FFCF_CARRYOVER        	= 3; // Carry Over
DEFINE FFCF_STATIONARY       	= 4; // Stationary
DEFINE FFCF_CHANGER          	= 5; // Is A Changer
DEFINE FFCF_PRELOAD          	= 6; // Run Script On Screen Init
DEFINE FFCF_LENSVIS          	= 7; // Only Visible to Lens of Truth
DEFINE FFCF_RESET            	= 8; // Script Resets When Carried Over
DEFINE FFCF_ETHEREAL         	= 9; // The FFC's Combo Type is ignored.
DEFINE FFCF_IGNOREHOLDUP     	= 10; // The FFC is updated while Link is holding up an item
DEFINE FFCF_IGNORECHANGER     	= 11; // The FFC ignores changers
DEFINE FFCF_IMPRECISIONCHANGER     	= 12; // The FFC is affected by changers if it is within 1px on both axis, not subpixel alignment.
DEFINE FFCF_LENSINVIS	     	= 13; // Not visible to the lens of truth

//FFC Bitwise Flags. To be used for bitwise checking of mapdata->FFCFlags[].
DEFINE FFCBF_OVERLAY   		= 0x001;
DEFINE FFCBF_TRANS           	= 0x002;
DEFINE FFCBF_SOLID           	= 0x004;
DEFINE FFCBF_CARRYOVER       	= 0x008;
DEFINE FFCBF_STATIONARY      	= 0x010;
DEFINE FFCBF_CHANGER         	= 0x020;
DEFINE FFCBF_PRELOAD         	= 0x040;
DEFINE FFCBF_LENSVIS         	= 0x080;
DEFINE FFCBF_RESET           	= 0x100;
DEFINE FFCBF_ETHEREAL        	= 0x200;
DEFINE FFCBF_IGNOREHOLDUP    	= 0x400;
DEFINE FFCBF_IGNORECHANGER   	= 0x800;
DEFINE FFCBF_IMPRECISIONCHANGER    	= 0x1000;
DEFINE FFCBF_LENSINVIS	   	= 0x2000;


//Aim-type constants, for use with AimEWeapon
DEFINE AT_NONE		= 0;
DEFINE AT_4DIR		= 1;
DEFINE AT_8DIR		= 2;
DEFINE AT_ANGULAR		= 3;
DEFINE AT_RAND4DIR		= 4;
DEFINE AT_RAND8DIR		= 5;
DEFINE AT_RANDANGULAR	= 6;


//Game Over Screen
//Values : Game->GameOverScreen[20]
DEFINE GOS_BACKGROUND		= 0;
DEFINE GOS_TEXT_COLOUR		= 1;
DEFINE GOS_CURSOR_TILE		= 2;
DEFINE GOS_CURSOR_CSET		= 3;
DEFINE GOS_CURSOR_SOUND  		= 4;
DEFINE GOS_TEXT_CONTINUE_COLOUR	= 5;
DEFINE GOS_TEXT_SAVE_COLOUR		= 6;
DEFINE GOS_TEXT_RETRY_COLOUR		= 7;
DEFINE GOS_TEXT_CONTINUE_FLASH	= 8;
DEFINE GOS_TEXT_SAVE_FLASH		= 9;
DEFINE GOS_TEXT_RETRY_FLASH		= 10;
DEFINE GOS_MIDI 			= 11;
DEFINE GOS_CUR_FLIP			= 12;
DEFINE GOS_TEXT_DONTSAVE_COLOUR	= 13;
DEFINE GOS_TEXT_SAVEQUIT_COLOUR	= 14;
DEFINE GOS_TEXT_SAVE2_COLOUR 	= 15;
DEFINE GOS_TEXT_QUIT_COLOUR		= 16;
DEFINE GOS_TEXT_DONTSAVE_FLASH	= 17;
DEFINE GOS_TEXT_SAVEQUIT_FLASH	= 18;
DEFINE GOS_TEXT_SAVE2_FLASH		= 19;
DEFINE GOS_TEXT_QUIT_FLASH		= 20;
DEFINE GOS_EXTRA1			= 21;
DEFINE GOS_EXTRA2			= 22;
DEFINE GOS_EXTRA3			= 23;



//Strings : Game->GameOverStrings[7]
DEFINE GOS_STR_CONTINUE 	= 0;	// (Continue:Retry:Save) Screen
DEFINE GOS_STR_SAVE		= 1;	// (Continue:Retry:Save) Screen
DEFINE GOS_RETRY		= 2;	// (Continue:Retry:Save) Screen
DEFINE GOS_DONT_SAVE		= 3;	//Savepoint Screen
DEFINE GOS_SAVEANDQUIT	= 4;	//Save and Quit Screen
DEFINE GOS_SAVE2		= 5; 	//Savepoint Screen
DEFINE GOS_QUIT		= 6;	//Save and Quit Screen


// Constants for DrawBitmapEX Modes
// These work as FLAGS that you may sum, or stack, to combine effects. 

DEFINE BITDX_NORMAL = 0;
DEFINE BITDX_TRANS = 1; //Translucent
DEFINE BITDX_PIVOT = 2; //THe sprite will rotate at a specific point, instead of its centre.
DEFINE BITDX_VFLIP = 4; //Vertical Flip.
DEFINE BITDX_HFLIP = 8; //Horizontal Flip
//Note:	Some modes cannot be combined. if a combination is not supported, an error
//	detailing this will be shown in allegro.log. 

//Effects for Link->WarpEffect
DEFINE WARPFX_NONE = 0;
DEFINE WARPFX_INSTANT = 1;
DEFINE WARPFX_BLACKOUT = 2;
DEFINE WARPFX_OPEN = 3;
DEFINE WARPFX_ZAP = 4;
DEFINE WARPFX_WAVE = 5;
DEFINE WARPFX_CANCEL = 6;
DEFINE WARPFX_SCROLL = 7;

//Sprites for Link->SetTile(sprite, int, int, int)
//See Quest->Graphics->Sprites->Link for what these are. 
DEFINE LSPR_NORMAL = 1;
DEFINE LSPR_FLOAT = 2;
DEFINE LSPR_SWIM = 3;
DEFINE LSPR_DIVE = 4;
DEFINE LSPR_SPLASH = 5;
DEFINE LSPR_JUMP = 6;
DEFINE LSPR_CHARGE = 7;
DEFINE LSPR_STAB = 8;
DEFINE LSPR_POUND = 9;
DEFINE LSPR_CAST = 10;
DEFINE LSPR_HOLD1LAND = 11;
DEFINE LSPR_HOLD2LAND = 12;
DEFINE LSPR_HOLD1WATER = 13;
DEFINE LSPR_HOLD2WATER = 14;

//Animation Styles in Quest->Graphics->Spries->Link for use with:
//	Link->Animation
//	Link->WalkASpeed
//	Link->SwimASpeed
DEFINE ANIM_ORIG = 0; //Animation styles nk
DEFINE ANIM_BS = 1;
DEFINE ANIM_Z3 = 2;
DEFINE ANIM_Z3SLOW = 3;
DEFINE SWIM_SLOW = 0;
DEFINE SWIM_FAST = 1;
DEFINE WALK_SLOW = 0; //Need to check what the walk speeds are. 
DEFINE WALK_FAST = 1;
DEFINE WALK_NEW = 2;

//Link Tile Offsets
DEFINE LINKTILE_OFS_NORMAL = -261; //We need to figure out all of these, and determine how they are calculated.
//Determine the offsetws for each sprite, each anim type, and each extend. 
//Make a function to set the tiles with these offsets. 

//Constants for SetItemSlot()
//These stack as flags. 
DEFINE ITM_REQUIRE_NONE = 0;
DEFINE ITM_REQUIRE_INVENTORY = 1;
DEFINE ITM_REQUIRE_A_SLOT_RULE = 2;

//Slots for SetItemSlot
enum itemslots { ITM_SLOT_B, ITM_SLOT_A, ITM_SLOT_X, ITM_SLOT_Y };

//Input->Mouse[]
DEFINE MOUSE_X = 0;
DEFINE MOUSE_Y = 1;
DEFINE MOUSE_Z = 2;
DEFINE MOUSE_LEFT = 3;
DEFINE MOUSE_RIGHT = 4;
DEFINE MOUSE_MIDDLE = 5;

//MapData

//GetSecretCombo()

DEFINE SECCMB_BCANDLE 	= 0;
DEFINE SECCMB_ARROW		= 1;	
DEFINE SECCMB_BOMB		= 2;
DEFINE SECCMB_STAIRS		= 3;
DEFINE SECCMB_SECRET01	= 4;
DEFINE SECCMB_SECRET02	= 5;
DEFINE SECCMB_SECRET03	= 6;
DEFINE SECCMB_SECRET04	= 7;
DEFINE SECCMB_SECRET05	= 8;
DEFINE SECCMB_SECRET06	= 9;
DEFINE SECCMB_SECRET07	= 10;
DEFINE SECCMB_SECRET08	= 11;
DEFINE SECCMB_SECRET09	= 12;
DEFINE SECCMB_SECRET10	= 13;
DEFINE SECCMB_SECRET11	= 14;
DEFINE SECCMB_SECRET12	= 15;
DEFINE SECCMB_SECRET13	= 16;
DEFINE SECCMB_SECRET14	= 17;
DEFINE SECCMB_SECRET15	= 18;
DEFINE SECCMB_SECRET16	= 19;
DEFINE SECCMB_RCANDLE	= 20;
DEFINE SECCMB_WANDFIRE	= 21;
DEFINE SECCMB_DINSFIRE	= 22;
DEFINE SECCMB_SARROW		= 23;
DEFINE SECCMB_GARROW		= 24;
DEFINE SECCMB_SBOMB		= 25;
DEFINE SECCMB_BRANG		= 26;
DEFINE SECCMB_MBRANG		= 27;
DEFINE SECCMB_FBRANG		= 28;
DEFINE SECCMB_WANDMAGIC	= 29;
DEFINE SECCMB_REFMAGIC	= 30;
DEFINE SECCMB_REFFIREBALL	= 31;
DEFINE SECCMB_SWORD		= 32;
DEFINE SECCMB_WSWORD		= 33;
DEFINE SECCMB_MSWORD		= 34;
DEFINE SECCMB_XSWORD		= 35;
DEFINE SECCMB_SWORDBEAM	= 36;
DEFINE SECCMB_WSWORDBEAM	= 37;
DEFINE SECCMB_MSWORDBEAM	= 38;
DEFINE SECCMB_XSWORDBEAM	= 39;
DEFINE SECCMB_HOOKSHOT	= 40;
DEFINE SECCMB_WAND		= 41;
DEFINE SECCMB_HAMMER		= 42;
DEFINE SECCMB_STRIKE		= 43;
DEFINE SECCMB_SECRETSNEXT	= 44; //Only ->SecretFlags[] has a value for this index
DEFINE SECCMB_MAX            = 45;
//45 to 127 unused. 

//Audio->
//Audio->Volume[]
DEFINE VOL_MIDI 	= 0;
DEFINE VOL_DIGI	= 1;
DEFINE VOL_MUSIC	= 2;
DEFINE VOL_SFX	= 3;

//Combo Quadrants used for Combo Solidity and CSet2vMasks
DEFINE CMB_QUADRANT_UL 	= 0001b;
DEFINE CMB_QUADRANT_UR 	= 0100b;
DEFINE CMB_QUADRANT_DL 	= 0010b;
DEFINE CMB_QUADRANT_DR 	= 1000b;

DEFINE CMB_QUADRANT_UPLEFT 	= 0001b;
DEFINE CMB_QUADRANT_UPRIGHT 	= 0100b;
DEFINE CMB_QUADRANT_DOWNLEFT = 0010b;
DEFINE CMB_QUADRANT_DOWNRIGHT = 1000b;

DEFINE CMB_QUADRANT_LEFTUP 	= 0001b;
DEFINE CMB_QUADRANT_RIGHTUP 	= 0100b;
DEFINE CMB_QUADRANT_LEFTDOWN = 0010b;
DEFINE CMB_QUADRANT_RIGHTDOWN = 1000b;

//Input->
/* Defined earlier.
DEFINE CB_UP		= 0;
DEFINE CB_DOWN	= 1;
DEFINE CB_LEFT	= 2;
DEFINE CB_RIGHT	= 3;
DEFINE CB_A		= 4;
DEFINE CB_B		= 5;
DEFINE CB_L		= 7;
DEFINE CB_R		= 8;
DEFINE CB_START	= 6;
DEFINE CB_MAP	= 9;
DEFINE CB_EX1	= 10;
DEFINE CB_EX2	= 11;
DEFINE CB_EX3	= 12;
DEFINE CB_EX4	= 13;
DEFINE CB_AXIS_UP	= 14;
DEFINE CB_AXIS_DOWN	= 15;
DEFINE CB_AXIS_LEFT	= 16;
DEFINE CB_AXIS_RIGHT	= 17;

*/

DEFINEF DIR16_DEG_INCREMENT = 22.5; //Number of degrees per 1/16 rotation

DEFINEF DIR16_DEG_UP 		= 270;
DEFINEF DIR16_DEG_UPUPLEFT = 247.5;

DEFINEF DIR16_DEG_UPLEFT 	= 225;
DEFINEF DIR16_DEG_LEFTLEFTUP = 202.5;
DEFINEF DIR16_DEG_LEFT 		= 180;
DEFINEF DIR16_DEG_LEFTLEFTDOWN = 157.5;
DEFINEF DIR16_DEG_LEFTDOWN 	= 135;
DEFINEF DIR16_DEG_DOWNDOWNLEFT = 112.5;
DEFINEF DIR16_DEG_DOWN 		= 90;
DEFINEF DIR16_DEG_DOWNDOWNRIGHT = 67.5;
DEFINEF DIR16_DEG_RIGHTDOWN 	= 45;
DEFINEF DIR16_DEG_RIGHTRIGHTDOWN = 22.5;
DEFINEF DIR16_DEG_RIGHT 	= 0;
DEFINEF DIR16_DEG_RIGHTUPUP  = 292.5;
DEFINEF DIR16_DEG_RIGHTUP 	= 315;
DEFINEF DIR16_DEG_RIGHTRIGHTUP 	= 337.5;

DEFINEF DIR_16_RADS_INCREMENT = 0.3927; //Number of radians per 1/16 rotation

DEFINEF DIR16_RADS_UP 		= 4.7214;
DEFINEF DIR16_RADS_UPUPLEFT = 4.3197;
DEFINEF DIR16_RADS_UPLEFT 	= 3.927;
DEFINEF DIR16_RADS_LEFTLEFTUP = 3.5343;
DEFINEF DIR16_RADS_LEFT 	= 3.1416; //3.1519; //Pi
DEFINEF DIR16_RADS_LEFTLEFTDOWN = 2.7489;
DEFINEF DIR16_RADS_LEFTDOWN 	= 2.3562; 
DEFINEF DIR16_RADS_DOWNDOWNLEFT = 1.9635;
DEFINEF DIR16_RADS_DOWN 	= 1.5708;
DEFINEF DIR16_RADS_DOWNDOWNRIGHT = 1.1781;
DEFINEF DIR16_RADS_RIGHTDOWN 	= 0.7854;
DEFINEF DIR16_RADS_RIGHTRIGHTDOWN = 0.3927; 
DEFINEF DIR16_RADS_RIGHT 	= 0; 
DEFINEF DIR16_RADS_RIGHTRIGHTUP = 5.8905;
DEFINEF DIR16_RADS_RIGHTUP 	= 5.4978;
DEFINEF DIR16_RADS_RIGHTUPUP 	= 5.1141;

//DMap Types for use with dmapdata->Type
DEFINE DMAP_DUNGEON = 0;
DEFINE DMAP_OVERWORLD = 1;
DEFINE DMAP_CAVE = 2;
DEFINE DMAP_BSOVERWORLD = 3;

enum dmapgridpositions
{ 
	/*The Grid[index] is the row, with leftmost being 0.
	/ The grid values are OR'd together, with MSB at left, and LSB at right, so, 
	/ if the top-rightmost screen is marked visible, then Grid[0] will == 1, 
	/ if the bottom-leftmost screen is marked visible, then Grid[7] will == 128
	/ if both the top-leftmost and top-rightmost screens are marked visible, then 
	/ Grid[0] will == 129
	*/
	dmMAPGRID_ROW_0, dmMAPGRID_ROW_1, dmMAPGRID_ROW_2, dmMAPGRID_ROW_3,
	dmMAPGRID_ROW_4, dmMAPGRID_ROW_5, dmMAPGRID_ROW_6, dmMAPGRID_ROW_7,
	dmMAPGRID_COL_7 = 1, dmMAPGRID_COL_6, dmMAPGRID_COL_5 = 4, dmMAPGRID_COL_4 = 8,
	dmMAPGRID_COL_3 = 16, dmMAPGRID_COL_2 = 32, dmMAPGRID_COL_1 = 64, dmMAPGRID_COL_0 = 128
};

/*Monochrome Tints and modes
	for use with Graphics->Monochrome(int mode)
	Add together the MODE and the TINT, e.g.:
	Graphics->Monochrome(TINT_MODE_DISTRIBUTED+TINT_AMBER); //Set amber, distribuyted
			
	Set to TINT_NONE to disable Monochrome:
	Graphics->Monochrome(TINT_NONE); 
*/

//Tint Options
DEFINE TINT_NONE = 0;
DEFINE TINT_GREY = 1;
DEFINE TINT_RED = 2;
DEFINE TINT_GREEN = 3;
DEFINE TINT_BLUE = 4;
DEFINE TINT_VIOLET = 5;
DEFINE TINT_TEAL = 6;
DEFINE TINT_AMBER = 7;
DEFINE TINT_CYAN = 8;
DEFINE TINT_MODE_UNIFORM = 0;
DEFINE TINT_MODE_DISTRIBUTED = 1000;

//System Real Time Clock (RTC) categories for GetSystemTime(int category)
DEFINE RTC_YEAR		= 0;
DEFINE RTC_MONTH	= 1;
DEFINE RTC_DAYOFMONTH	= 2;
DEFINE RTC_DAYOFWEEK	= 3;
DEFINE RTC_HOUR		= 4;
DEFINE RTC_MINUTE	= 5;
DEFINE RTC_SECOND	= 6;
DEFINE RTC_DAYOFYEAR	= 7;
DEFINE RTC_DAYLIGHTTIME	= 8;
DEFINE RTC_LAST		= 9;

//Warp Effects for Link->WarpEx
DEFINE WARPEFFECT_NONE = 0;
DEFINE WARPEFFECT_ZAP = 1;
DEFINE WARPEFFECT_WAVE = 2;
DEFINE WARPEFFECT_INSTANT = 3;
DEFINE WARPEFFECT_OPENWIPE = 4;

//Warp Flags for Link->WarpEx()
DEFINE WARP_FLAG_SCRIPTDRAW 		  = 0x001;
DEFINE WARP_FLAG_PLAYSOUNDS 		  = 0x002;
DEFINE WARP_FLAG_FORCE_RESET_MUSIC    = 0x004;
DEFINE WARP_FLAG_SETENTRANCESCREEN 	  = 0x008;
DEFINE WARP_FLAG_SETENTRANCEDMAP 	  = 0x010;
DEFINE WARP_FLAG_SETCONTINUESCREEN 	  = 0x020;
DEFINE WARP_FLAG_SETCONTINUEDMAP 	  = 0x040;
DEFINE WARP_FLAG_DONT_RESET_DM_SCRIPT = 0x080;
DEFINE WARP_FLAG_DONT_CLEAR_SPRITES   = 0x100;
DEFINE WARP_FLAG_FORCE_CONTINUE_MUSIC = 0x200;

//Old name for compat of old scripts
DEFINE WARP_FLAG_PLAYMUSIC = WARP_FLAG_FORCE_RESET_MUSIC;

//Manual Sprite Carryover
DEFINE WARP_FLAG_DONTCLEARSPRITES 	= 0x100;
DEFINE WARP_FLAG_CLEARITEMS 		= 0x200;
DEFINE WARP_FLAG_CLEARGUYS 		= 0x400;
DEFINE WARP_FLAG_CLEARLWEAPONS 	= 0x800;
DEFINE WARP_FLAG_CLEAREWEAPONS 	= 0x1000;
DEFINE WARP_FLAG_CLEARHOOKSHOT 	= 0x2000;
DEFINE WARP_FLAG_CLEARDECORATIONS 	= 0x4000;
DEFINE WARP_FLAG_CLEARPARTICLES 	= 0x8000;

//Prevent Stepping forward in dungeon screens (experimental)
DEFINE WARP_FLAG_NOSTEPFORWARD	= 0x10000;

//Error codes for `#ignore error`
enum
{
	_ERR_CANTOPENSOURCE,
	_ERR_CANTOPENIMPORT,
	_ERR_IMPORTRECURSION,
	_ERR_IMPORTBADSCOPE,
	_ERR_FUNCTIONREDEF,
	_ERR_FUNCTIONVOIDPARAM,
	_ERR_SCRIPTREDEF,
	_ERR_VOIDVAR,
	_ERR_VARREDEF,
	_ERR_VARUNDECLARED,
	_ERR_FUNCUNDECLARED,
	_ERR_SCRIPTNORUN,
	_ERR_SCRIPTRUNNOTVOID,
	_ERR_SCRIPTNUMNOTINT,
	_ERR_SCRIPTNUMTOOBIG,
	_ERR_SCRIPTNUMREDEF,
	_ERR_IMPLICITCAST,
	_ERR_ILLEGALCAST,
	_ERR_VOIDEXPR,
	_ERR_DIVBYZERO,
	_ERR_CONSTTRUNC,
	_ERR_NOFUNCMATCH,
	_ERR_TOOFUNCMATCH,
	_ERR_FUNCBADRETURN,
	_ERR_TOOMANYGLOBAL,
	_ERR_SHIFTNOTINT,
	_ERR_REFVAR,
	_ERR_ARROWNOTPOINTER,
	_ERR_ARROWNOFUNC,
	_ERR_ARROWNOVAR,
	_ERR_TOOMANYRUN,
	_ERR_INDEXNOTINT,
	_ERR_SCRIPTBADTYPE,
	_ERR_BREAKBAD,
	_ERR_CONTINUEBAD,
	_ERR_CONSTREDEF,
	_ERR_LVALCONST,
	_ERR_BADGLOBALINIT,
	_ERR_DEPRECATEDGLOBAL,
	_ERR_VOIDARR,
	_ERR_REFARR,
	_ERR_ARRREDEF,
	_ERR_ARRAYTOOSMALL,
	_ERR_ARRAYLISTTOOLARGE,
	_ERR_ARRAYLISTSTRINGTOOLARGE,
	_ERR_NONINTEGERARRAYSIZE,
	_ERR_EXPRNOTCONSTANT,
	_ERR_UNRESOLVEDTYPE,
	_ERR_CONSTUNINITIALIZED,
	_ERR_CONSTASSIGN,
	_ERR_EMPTYARRAYLITERAL,
	_ERR_DIMENSIONMISMATCH,
	_ERR_ARRAYLITERALRESIZE,
	_ERR_MISSINGCOMPILEERROR,
	_ERR_UNIMPLEMENTEDFEATURE,
	_ERR_UNKNOWNOPTION,
	_ERR_NOREADTYPE,
	_ERR_NOWRITETYPE,
	_ERR_UNRESOLVEDSCRIPTTYPE,
	_ERR_REDEFSCRIPTTYPE,
	_ERR_ARRAYINVALIDSIZE,
	_ERR_ARRAYDECIMAL,
	_ERR_CONSTNOTCONSTANT,
	_ERR_TOOMANYUSING,
	_ERR_DUPLICATEUSING,
	_ERR_TOOMANYVAR,
	_ERR_HEADERGUARDERR,
	_ERR_HEADERGUARDWARN,
	_ERR_REDEFDATATYPE,
	_ERR_CONSTALREADYCONSTANT
};

//Flags for SaveSRAM() and LoadSRAM()
 DEFINE SRAM_ALL	 	=	0;
 DEFINE SRAM_NPCDATA 	=	0x01;
 DEFINE SRAM_ITEMDATA 	=	0x02;
 DEFINE SRAM_SPRITEDATA 	=	0x04;
 DEFINE SRAM_COMBODATA 	=	0x08;
 DEFINE SRAM_DMAPDATA 	=	0x10;
 DEFINE SRAM_MAPDATA 	=	0x20;

//MIDI values, used for 'Screen->MIDI', 'dmapdata->MIDI', 'mapdata->MIDI', 'Audio->PlayMIDI'
enum
{
    MIDI_USE_DMAP = -4, //ONLY for 'Screen->MIDI' and 'mapdata->MIDI'
    MIDI_NONE,
    MIDI_OVERWORLD,
    MIDI_DUNGEON,
    MIDI_LEVEL9 //==0, cannot be played by 'Audio->PlayMIDI'
};



enum linkspritetype
{
	LSprwalkspr, LSprstabspr, LSprslashspr, LSprfloatspr,
	LSprswimspr, LSprdivespr, LSprpoundspr, LSprjumpspr,
	LSprchargespr, LSprcastingspr, LSprholdspr1, LSprholdspr2,
	LSprholdsprw1, LSprholdsprw2, LSprdrownspr, LSprlast
};

	

//suspend types
enum { 
	//Typical processes that we want to pause, similar to ALLOFF()
	
	//0 : Combo animation
	susptCOMBOANIM,
	
	//1->5 Main Sprite animation by type
	susptGUYS, susptLWEAPONS, susptEWEAPONS, susptITEMS, susptLINK, 
	
	//6 : FFC (e.g. movement, changers, but not scripts)
	susptUPDATEFFC, //ffcs
	
	//7->8 : Sprite subclasses
	susptDECORATIONS, susptPARTICLES, //sprite subclasses
	
	//9->10: Palette events
	susptPALCYCLE, susptLAKES, //lake dries up
	
	//11->15 : game system events
	susptCOLLISIONS, susptCONTROLSTATE, susptONEFRAMECONDS, susptSCRIPDRAWCLEAR, susptQUAKE,

	//16->27 Script Types
	susptGLOBALGAME, susptNPCSCRIPTS, susptLWEAPONSCRIPTS, susptEWEAPONSCRIPTS, susptITEMSPRITESCRIPTS,
	//21
	susptFFCSCRIPTS, susptLINKACTIVE, susptITEMSCRIPTENGINE, susptDMAPSCRIPT, susptSCREENSCRIPTS,
	susptSUBSCREENSCRIPTS, susptCOMBOSCRIPTS, //27
	
	//28->59: Reserved padding
	
	//60->42 : Moving items
	susptCONVEYORSITEMS = 60, susptDRAGGINGITEM, susptROAMINGITEM,
	//63->67 : Misc
	susptLENS, susptHOOKSHOT, susptMOVINGBLOCKS, susptMAGICCAST, susptSCREENDRAW,
	//68
	susptLAST };


define NOCARRY_B_SECRET =			0x2000;
define NOCARRY_B_ITEM =				0x0010;
define NOCARRY_B_SPECIALITEM =		0x0020;
define NOCARRY_B_LOCKBLOCK =		0x0100;
define NOCARRY_B_BOSSLOCKBLOCK =	0x0200;
define NOCARRY_B_CHEST =			0x0400;
define NOCARRY_B_LOCKEDCHEST =		0x0800;
define NOCARRY_B_BOSSCHEST =		0x1000;

define NORESET_B_SECRET =			0x2000;
define NORESET_B_ITEM =				0x0010;
define NORESET_B_SPECIALITEM =		0x0020;
define NORESET_B_LOCKBLOCK =		0x0100;
define NORESET_B_BOSSLOCKBLOCK =	0x0200;
define NORESET_B_CHEST =			0x0400;
define NORESET_B_LOCKEDCHEST =		0x0800;
define NORESET_B_BOSSCHEST =		0x1000;
define NORESET_B_DOOR_B_UP =		0x0001;
define NORESET_B_DOOR_B_DOWN =		0x0002;
define NORESET_B_DOOR_B_LEFT =		0x0004;
define NORESET_B_DOOR_B_RIGHT =		0x0008;

enum //Indexes for messagedata->Flags
{
	MSGFLAG_WRAP,         // If the text wraps around the bounding box
	MSGFLAG_CONT,         // If the message is the continuation of a previous one
	MSGFLAG_CENTER,       // Reserved
	MSGFLAG_RIGHT,        // Reserved
	MSGFLAG_FULLTILE,     // If the background tile should be treated as the UL of a tile block,
	                      // instead of the UL of a 2x2 adjustable frame
	MSGFLAG_TRANS_BG,     // If the background should be translucent
	MSGFLAG_TRANS_FG     // If the text should be translucent
};

//Flags for GetMapscreenFlag, SetMapscreenFlag
enum mapscreenflags
{
	// Room Types
	MSF_INTERIOR, MSF_DUNGEON, MSF_SIDEVIEW,
	
	// View
	MSF_INVISLINK, MSF_NOLINKMARKER, MSF_NOSUBSCREEN, MSF_NOOFFSET, MSF_LAYER3BG,
	MSF_LAYER2BG, MSF_DARKROOM,
	
	// Secrets
	MSF_BLOCKSHUT, MSF_TEMPSECRETS, MSF_TRIGPERM, MSF_ALLTRIGFLAGS,
	
	// Warp
	MSF_AUTODIRECT, MSF_SENDSIRECT, MSF_MAZEPATHS, MSF_MAZEOVERRIDE, MSF_SPRITECARRY,
	MSF_DIRECTTIMEDWARPS, MSF_SECRETSISABLETIMEWRP, MSF_RANDOMTIMEDWARP,
	
	// Item
	MSF_HOLDUP, MSF_FALLS,
	
	// Combo
	MSF_MIDAIR, MSF_CYCLEINIT, MSF_IGNOREBOOTS, MSF_TOGGLERINGS,
	
	// Save
	MSF_SAVECONTHERE, MSF_SAVEONENTRY, MSF_CONTHERE, MSF_NOCONTINUEWARP,
	
	// FFC
	MSF_WRAPFFC, MSF_NOCARRYOVERFFC, 
	
	// Whistle 
	MSF_STAIRS, MSF_PALCHANGE, MSF_DRYLAKE,
	
	// Enemies
	MSF_INVISIBLEENEMIES, MSF_TRAPS_IGNORE_SOLID, MSF_EMELIESALWAYSRETURN, MSF_ENEMIES_ITEM, MSF_ENEMEIS_SECRET,
	MSF_ENEMIES_SECRET_PERM,
	
	// Misc
	MSF_ALLOW_LADDER, MSF_NO_DIVING, MSF_SFXONENTRY, MSF_LENSEFFECT,
		 
	//Custom / Script 
	MSF_SCRIPT1,
	MSF_CUSTOM1 = MSF_SCRIPT1,
	MSF_SCRIPT2,
	MSF_CUSTOM2 = MSF_SCRIPT2,
	MSF_SCRIPT3,
	MSF_CUSTOM3 = MSF_SCRIPT3,
	MSF_SCRIPT4,
	MSF_CUSTOM4 = MSF_SCRIPT4,
	MSF_SCRIPT5,
	MSF_CUSTOM5 = MSF_SCRIPT5,
	MSF_LAST
};

enum HeroMoveFlag
{
	HEROMV_OBEYS_GRAVITY,
	HEROMV_CAN_PITFALL,
	HEROMV_NO_FAKE_Z = 8,
	HEROMV_NO_REAL_Z
};

enum ItemspriteMoveFlag
{
	ITEMMV_OBEYS_GRAVITY,
	ITEMMV_CAN_PITFALL,
	ITEMMV_NO_FAKE_Z = 8,
	ITEMMV_NO_REAL_Z
};

enum WeaponMoveFlag
{
	WPNMV_OBEYS_GRAVITY,
	WPNMV_CAN_PITFALL,
	WPNMV_NO_FAKE_Z = 8,
	WPNMV_NO_REAL_Z
};

define CHRT_VISITED = 10000000b;
define CHRT_UP =      00000001b;
define CHRT_DOWN =    00000010b;
define CHRT_LEFT =    00000100b;
define CHRT_RIGHT =   00001000b;

// "special" walk flags
enum NPCWalkType
{
	SPW_NONE, SPW_DOOR, SPW_CLIPRIGHT, SPW_FLOATER, SPW_TRAP, SPW_HALFSTEP, 
	SPW_WATER, SPW_WIZZROBE, SPW_CLIPBOTTOMRIGHT
};

enum NPCMoveStatus
{
	NPCMS_PAUSED, NPCMS_SPEEDUP, NPCMS_NORMAL, NPCMS_SLOWDOWN
};

DEFINE UNBLOCK_NONE = 0000b; //Not unblockable
DEFINE UNBLOCK_NORM = 0001b; //Bypasses normal 'block' defenses
DEFINE UNBLOCK_IGNR = 0010b; //Bypasses 'ignore' defenses
DEFINE UNBLOCK_SHLD = 0100b; //Bypasses enemy/hero 'shields'
DEFINE UNBLOCK_REFL = 1000b; //Bypasses hero 'reflect' on shields
DEFINE UNBLOCK_ALL  = 1111b; //All bits set

enum ditherType
{
	DITH_CHECKER, DITH_CHECKER_INV,
	DITH_CRISS_CROSS, DITH_CRISS_CROSS_INV,
	DITH_DIAG_ULDR, DITH_DIAG_ULDR_INV,
	DITH_DIAG_URDL, DITH_DIAG_URDL_INV,
	DITH_ROW, DITH_ROW_INV,
	DITH_COL, DITH_COL_INV,
	DITH_DOTS, DITH_DOTS_INV,
	DITH_GRID, DITH_GRID_INV,
	DITH_STATIC, DITH_STATIC_INV,
	DITH_STATIC2, DITH_STATIC2_INV,
	DITH_STATIC3, DITH_STATIC3_INV,
	DITH_DOTS2, DITH_DOTS2_INV,
	DITH_DOTS3, DITH_DOTS3_INV,
	DITH_DOTS4, DITH_DOTS4_INV,
	DITH_MAX
};

enum BottleFlag
{
	BTF_REVIVE,
	BTF_USEWHENFULL,
	BTF_CURESWORDJINX,
	BTF_CUREITEMJINX,
	BTF_MAX
};

enum ComboGenFlag
{
	GENFLAG_HOOKSHOTTABLE,
	GENFLAG_SWITCHHOOKABLE,
	GENFLAG_MAX
};

enum InteractButton
{
	INTBTN_A,
	INTBTN_B,
	INTBTN_L,
	INTBTN_R,
	INTBTN_EX1,
	INTBTN_EX2,
	INTBTN_EX3,
	INTBTN_EX4
};

DEFINE BIT_INTBTN_A = 1b << INTBTN_A;
DEFINE BIT_INTBTN_B = 1b << INTBTN_B;
DEFINE BIT_INTBTN_L = 1b << INTBTN_L;
DEFINE BIT_INTBTN_R = 1b << INTBTN_R;
DEFINE BIT_INTBTN_EX1 = 1b << INTBTN_EX1;
DEFINE BIT_INTBTN_EX2 = 1b << INTBTN_EX2;
DEFINE BIT_INTBTN_EX3 = 1b << INTBTN_EX3;
DEFINE BIT_INTBTN_EX4 = 1b << INTBTN_EX4;

DEFINE INTBTN_X = INTBTN_EX1;
DEFINE INTBTN_Y = INTBTN_EX2;
DEFINE BIT_INTBTN_X = BIT_INTBTN_EX1;
DEFINE BIT_INTBTN_Y = BIT_INTBTN_EX2;

enum ItemButton
{
	ITMBTN_A,
	ITMBTN_B,
	ITMBTN_X,
	ITMBTN_Y,
	NUM_ITMBTN
};

enum ComboTrigFlag
{
	TRIGFLAG_SWORD, //Weapons->LWeapons->Sword - Triggered by Sword LWeapons
	TRIGFLAG_SWORDBEAM, //Weapons->LWeapons->Sword Beam - Triggered by Sword Beam LWeapons
	TRIGFLAG_BRANG, //Weapons->LWeapons->Boomerang - Triggered by Boomerang LWeapons
	TRIGFLAG_BOMB, //Weapons->LWeapons->Bomb Boom - Triggered by Bomb (explosion) LWeapons
	TRIGFLAG_SBOMB, //Weapons->LWeapons->Super Bomb Boom - Triggered by Super Bomb (explosion) LWeapons
	TRIGFLAG_LITBOMB, //Weapons->LWeapons->Placed Bomb - Triggered by Bomb (placed) LWeapons
	TRIGFLAG_LITSBOMB, //Weapons->LWeapons->Placed Super Bomb - Triggered by Super Bomb (placed) LWeapons
	TRIGFLAG_ARROW, //Weapons->LWeapons->Arrow - Triggered by Arrow LWeapons
	TRIGFLAG_FIRE, //Weapons->LWeapons->Fire - Triggered by Fire LWeapons
	TRIGFLAG_WHISTLE, //Weapons->LWeapons->Whistle - Triggered by Whistle LWeapons (whistle played)
	TRIGFLAG_BAIT, //Weapons->LWeapons->Bait - Triggered by Bait LWeapons
	TRIGFLAG_WAND, //Weapons->LWeapons->Wand - Triggered by Wand Handle LWeapon
	TRIGFLAG_MAGIC, //Weapons->LWeapons->Magic - Triggered by Magic LWeapons
	TRIGFLAG_WIND, //Weapons->LWeapons->Wind - Triggered by Wind LWeapons
	TRIGFLAG_REFMAGIC, //Weapons->LWeapons->Refl. Magic - Triggered by Reflected Magic LWeapons
	TRIGFLAG_REFFIREBALL, //Weapons->LWeapons->Refl. Fireball - Triggered by Reflected Fireball LWeapons
	TRIGFLAG_REFROCK, //Weapons->LWeapons->Refl. Rock - Triggered by Reflected Rock LWeapons
	TRIGFLAG_HAMMER, //Weapons->LWeapons->Hammer - Triggered by Hammer LWeapon
	TRIGFLAG_RESET_ANIM, //Effects->Reset Anim - On trigger, reset the animation of the combo.
	TRIGFLAG_INVERT_PROXIMITY, //Other->Invert Proximity Req. - Proximity requirement is reversed
	TRIGFLAG_BTN_TOP, //Other->Btn: Top - Triggered by button press from above
	TRIGFLAG_BTN_BOTTOM, //Other->Btn: Bottom - Trigger by button press from below
	TRIGFLAG_BTN_LEFT, //Other->Btn: Left - Trigger by button press from left
	TRIGFLAG_BTN_RIGHT, //Other->Btn: Right - Trigger by button press from right
	TRIGFLAG_INVERT_MIN_MAX, //Weapons->LWeapons->Max Level Instead - Treat the 'TriggerLevel' as a max instead of a min
	TRIGFLAG_STEP, //Other->'Step->' - Triggered by 'Step->'
	TRIGFLAG_STEP_SENS, //Other->'Step-> (Sensitive)' - Triggered by 'Step->Sensitive'
	TRIGFLAG_SHUTTER, //Other->'Shutter->' - Triggered by 'Shutter->'
	TRIGFLAG_CTYPE_EFFECTS, //Effects->'->ComboType Effects' - On trigger, cause the combo's type-related effects to occur. (ex: opening a chest)
	TRIGFLAG_ONLY_GENTRIG, //Other->'Only Gen Triggers' - Don't allow the combo to trigger via it's normal trigger methods (ex: bush via slashing)
	TRIGFLAG_KILL_WEAPON, //Weapons->Effects->'Kill Triggering Weapon' - If triggered by a weapon, kill the weapon.
	TRIGFLAG_EW_FIREBALL, //Weapons->EWeapons->Fireball - Triggered by Fireball EWeapons
	//32
	TRIGFLAG_HOOKSHOT, //Weapons->LWeapons->Hookshot - Triggered by Hookshot LWeapons
	TRIGFLAG_SPARKLE, //Weapons->LWeapons->Sparkle - Triggered by Sparkle LWeapons
	TRIGFLAG_BYRNA, //Weapons->LWeapons->Byrna - Triggered by Byrna LWeapons
	TRIGFLAG_REFBEAM, //Weapons->LWeapons->Refl. Beam - Triggered by Reflected Beam LWeapons
	TRIGFLAG_STOMP, //Weapons->LWeapons->Stomp - Triggered by Stomp Boot LWeapons
	TRIGFLAG_SCRIPT1, //Weapons->LWeapons->Custom Weapon 1 - Triggered by 'Custom Weapon 01' LWeapons
	TRIGFLAG_SCRIPT2, //Weapons->LWeapons->Custom Weapon 2 - Triggered by 'Custom Weapon 02' LWeapons
	TRIGFLAG_SCRIPT3, //Weapons->LWeapons->Custom Weapon 3 - Triggered by 'Custom Weapon 03' LWeapons
	TRIGFLAG_SCRIPT4, //Weapons->LWeapons->Custom Weapon 4 - Triggered by 'Custom Weapon 04' LWeapons
	TRIGFLAG_SCRIPT5, //Weapons->LWeapons->Custom Weapon 5 - Triggered by 'Custom Weapon 05' LWeapons
	TRIGFLAG_SCRIPT6, //Weapons->LWeapons->Custom Weapon 6 - Triggered by 'Custom Weapon 06' LWeapons
	TRIGFLAG_SCRIPT7, //Weapons->LWeapons->Custom Weapon 7 - Triggered by 'Custom Weapon 07' LWeapons
	TRIGFLAG_SCRIPT8, //Weapons->LWeapons->Custom Weapon 8 - Triggered by 'Custom Weapon 08' LWeapons
	TRIGFLAG_SCRIPT9, //Weapons->LWeapons->Custom Weapon 9 - Triggered by 'Custom Weapon 09' LWeapons
	TRIGFLAG_SCRIPT10, //Weapons->LWeapons->Custom Weapon 10 - Triggered by 'Custom Weapon 10' LWeapons
	TRIGFLAG_AUTO, //Other->Always Triggered - Triggered automatically, every frame.
	TRIGFLAG_TRIG_SECRETS, //Effects->Triggers Secrets - Triggered by 'Secrets->'
	TRIGFLAG_INVERT_ITEMREQ, //Counters/Items->Invert Item Req - Invert the item requirement (require NOT having the item)
	TRIGFLAG_CONSUME_ITEMREQ, //Counters/Items->Consume Item Req - On trigger, consume the required item.
	TRIGFLAG_COUNTER_GE, //Counters/Items->'Require >=' - Only trigger if the counter has >= the specified amount
	TRIGFLAG_COUNTER_LT, //Counters/Items->'Require <' - Only trigger if the counter has < the specified amount
	TRIGFLAG_COUNTER_EAT, //Counters/Items->Consume Amount - Consume the specified amount from the counter. Negative amounts add.
	TRIGFLAG_COUNTER_NOT_ONLY_TRIG_EAT, //Counters/Items->Consume w/o trig - Consume the specified amount from the counter even if the combo failed to trigger.
	TRIGFLAG_LIGHTON, //Other->'Light On->' - Triggered by a lightbeam.
	TRIGFLAG_LIGHTOFF, //Other->'Light Off->' - Triggered by lack of a lightbeam.
	TRIGFLAG_PUSH, //Other->'Push->' - Triggered when the player pushes into the combo.
	TRIGFLAG_LENS_ON, //Other->'Lens On->' - Triggered when the lens is revealing.
	TRIGFLAG_LENS_OFF, //Other->'Lens Off->' - Triggered when the lens is not revealing.
	TRIGFLAG_EW_ARROW, //Weapons->EWeapons->Arrow - Triggered by Arrow EWeapons
	TRIGFLAG_EW_BRANG, //Weapons->EWeapons->Boomerang - Triggered by Boomerang EWeapons
	TRIGFLAG_EW_SWORD, //Weapons->EWeapons->Sword - Triggered by Sword EWeapons
	TRIGFLAG_EW_ROCK, //Weapons->EWeapons->Rock - Triggered by Rock EWeapons
	//64
	TRIGFLAG_EW_SCRIPT1, //Weapons->EWeapons->Custom Weapon 1 - Triggered by 'Custom Weapon 01' EWeapons
	TRIGFLAG_EW_SCRIPT2, //Weapons->EWeapons->Custom Weapon 2 - Triggered by 'Custom Weapon 02' EWeapons
	TRIGFLAG_EW_SCRIPT3, //Weapons->EWeapons->Custom Weapon 3 - Triggered by 'Custom Weapon 03' EWeapons
	TRIGFLAG_EW_SCRIPT4, //Weapons->EWeapons->Custom Weapon 4 - Triggered by 'Custom Weapon 04' EWeapons
	TRIGFLAG_EW_SCRIPT5, //Weapons->EWeapons->Custom Weapon 5 - Triggered by 'Custom Weapon 05' EWeapons
	TRIGFLAG_EW_SCRIPT6, //Weapons->EWeapons->Custom Weapon 6 - Triggered by 'Custom Weapon 06' EWeapons
	TRIGFLAG_EW_SCRIPT7, //Weapons->EWeapons->Custom Weapon 7 - Triggered by 'Custom Weapon 07' EWeapons
	TRIGFLAG_EW_SCRIPT8, //Weapons->EWeapons->Custom Weapon 8 - Triggered by 'Custom Weapon 08' EWeapons
	TRIGFLAG_EW_SCRIPT9, //Weapons->EWeapons->Custom Weapon 9 - Triggered by 'Custom Weapon 09' EWeapons
	TRIGFLAG_EW_SCRIPT10, //Weapons->EWeapons->Custom Weapon 10 - Triggered by 'Custom Weapon 10' EWeapons
	TRIGFLAG_EW_MAGIC, //Weapons->EWeapons->Magic - Triggered by Magic EWeapons
	TRIGFLAG_EW_BBLAST, //Weapons->EWeapons->Bomb Blast - Triggered by Bomb (explosion) EWeapons
	TRIGFLAG_EW_SBBLAST, //Weapons->EWeapons->SBomb Blast - Triggered by Super Bomb (explosion) EWeapons
	TRIGFLAG_EW_LITBOMB, //Weapons->EWeapons->Lit Bomb - Triggered by Bomb (unexploded) EWeapons
	TRIGFLAG_EW_LITSBOMB, //Weapons->EWeapons->Lit SBomb - Triggered by Super Bomb (unexploded) EWeapons
	TRIGFLAG_EW_FIRETRAIL, //Weapons->EWeapons->Fire Trail - Triggered by Fire Trail EWeapons
	TRIGFLAG_EW_FLAME, //Weapons->EWeapons->Flame - Triggered by Flame EWeapons
	TRIGFLAG_EW_WIND, //Weapons->EWeapons->Wind - Triggered by Wind EWeapons
	TRIGFLAG_EW_FLAME2, //Weapons->EWeapons->Flame 2 - Triggered by Flame 2 EWeapons
	TRIGFLAG_SPECIAL_ITEM, //States/Spawning->Spawns Special Item - The spawned item will be the special item
	TRIGFLAG_EXST_ITEM, //States/Spawning->Trigger ExState after item pickup - Trigger ExState after picking up the spawned item
	TRIGFLAG_EXST_ENEMY, //States/Spawning->Trigger ExState after enemy kill - Trigger ExState after killing the spawned enemy
	TRIGFLAG_AUTOGRAB_ITEM, //States/Spawning->Spawned Item auto-collects - Spawned item auto-collects
	TRIGFLAG_KILL_ENEMIES, //Other->'Enemies->' - Triggered when all enemies are killed
	TRIGFLAG_SECRETSTR, //Other->'Secrets->' - Triggered when screen secrets are triggered
	TRIGFLAG_THROWN, //Weapons->LWeapons->Thrown - Triggered by Thrown Object weapons
	TRIGFLAG_QUAKESTUN, //Weapons->LWeapons->Quake Hammer - Triggered by a Quake Stun
	TRIGFLAG_SQUAKESTUN, //Weapons->LWeapons->S. Quake Hammer - Triggered by a Super Quake Stun
	TRIGFLAG_ANYFIRE, //Weapons->LWeapons->Any Fire - Triggered by Any Fire
	TRIGFLAG_STRONGFIRE, //Weapons->LWeapons->Strong Fire - Triggered by Strong Fire
	TRIGFLAG_MAGICFIRE, //Weapons->LWeapons->Magic Fire - Triggered by Magic Fire
	TRIGFLAG_DIVINEFIRE, //Weapons->LWeapons->Divine Fire - Triggered by Divine Fire
	//96
	TRIGFLAG_TRIGLEVELSTATE, //States/Spawning->'LevelState->' - Triggered by Level State
	TRIGFLAG_LEVELSTATE, //States/Spawning->'->LevelState' - Triggers Level State
	TRIGFLAG_TRIGGLOBALSTATE, //States/Spawning->'GlobalState->' - Triggered by Global State
	TRIGFLAG_GLOBALSTATE, //States/Spawning->'->GlobalState' - Triggers Global State
	TRIGFLAG_DO_KILL_ENEMIES, //Effects->Kill Enemies - Kill all enemies
	TRIGFLAG_DO_CLEAR_ENEMIES, //Effects->Clear Enemies - Delete all enemies
	TRIGFLAG_DO_CLEAR_LWEAPONS, //Effects->Clear LWeapons - Delete all lweapons
	TRIGFLAG_DO_CLEAR_EWEAPONS, //Effects->Clear EWeapons - Delete all eweapons
	TRIGFLAG_IGNITE_WEAPONS_ANY, //Weapons->Effects->Ignite Weapon (Any) - Light the triggering weapon on normal fire.
	TRIGFLAG_IGNITE_WEAPONS_STRONG, //Weapons->Effects->Ignite Weapon (Strong) - Light the triggering weapon on strong fire.
	TRIGFLAG_IGNITE_WEAPONS_MAGIC, //Weapons->Effects->Ignite Weapon (Magic) - Light the triggering weapon on magic fire.
	TRIGFLAG_IGNITE_WEAPONS_DIVINE, //Weapons->Effects->Ignite Weapon (Divine) - Light the triggering weapon on divine fire.
	TRIGFLAG_SEPARATE_WEAPON_TRIGGERS, //Weapons->Effects->Weapon Separate Triggers - Triggering weapons only trigger weapon-related effects
	TRIGFLAG_TGROUP_CONTRIB, //States/Spawning->Contributes To TrigGroup - This combo contributes to its' TrigGroup
	TRIGFLAG_TGROUP_LESS, //States/Spawning->'TrigGroup Less->' - When the number of combos that contribute to this combo's Trigger Group is LESS than the Trigger Group Val, trigger this combo.
	TRIGFLAG_TGROUP_GREATER, //States/Spawning->'TrigGroup Greater->' - When the number of combos that contribute to this combo's Trigger Group is GREATER than the Trigger Group Val, trigger this combo.
	TRIGFLAG_TRIG_PUSHED, //Other->'Pushed->' - Triggers when this combo, as a pushblock, settles into a new positon.
	TRIGFLAG_TRIG_DIVE, //Other->'Dive->' - Triggers when the player dives on this combo.
	TRIGFLAG_TRIG_DIVE_SENS, //Other->'Dive-> (Sensitive)' - Triggers when the player dives on this combo. More sensitive hitbox than 'TRIGFLAG_TRIG_DIVE'
	TRIGFLAG_REFARROW, //Weapons->LWeapons->Refl. Arrow - Triggered by Reflected Arrow LWeapons
	TRIGFLAG_REFFIRE, //Weapons->LWeapons->Refl. Fire - Triggered by Reflected Fire LWeapons
	TRIGFLAG_REFFIRE2, //Weapons->LWeapons->Refl. Fire 2 - Triggered by Reflected Fire 2 LWeapons
	TRIGFLAG_TOGGLE_DARKNESS, //Effects->Toggle Darkness - Toggle the screen being a dark room
	TRIGFLAG_REQ_DARKNESS, //Other->Req. Darkness - Can only trigger if the screen is a dark room
	TRIGFLAG_REQ_NO_DARKNESS, //Other->Req. Darkness - Can only trigger if the screen is lit (not a dark room)
	TRIGFLAG_LITEM_REQUIRE, //Counters/Items->Require All - Require all the specified LItems to trigger the combo
	TRIGFLAG_LITEM_INV_REQUIRE, //Counters/Items->Require Not All - Require not all (some is ok) of the specified LItems to trigger the combo
	TRIGFLAG_LITEM_SET, //Counters/Items->'->Set' - Grants the specified LItems. If 'TRIGFLAG_LITEM_UNSET' is also on, toggles them instead.
	TRIGFLAG_LITEM_UNSET, //Counters/Items->'->Unset' - Removes the specified LItems. If 'TRIGFLAG_LITEM_SET' is also on, toggles them instead.
	TRIGFLAG_TINT_CLEAR, //Graphics->'->Clear Tint' - Clears the palette tint.
	
	TRIGFLAG_MAX_IN_USE,
	TRIGFLAG_MAX = 32*6
};

DEFINE BLOCKFLAG_ROCK         = 0x00001;
DEFINE BLOCKFLAG_ARROW        = 0x00002;
DEFINE BLOCKFLAG_BRANG        = 0x00004;
DEFINE BLOCKFLAG_FIREBALL     = 0x00008;
DEFINE BLOCKFLAG_SWORD        = 0x00010;
DEFINE BLOCKFLAG_MAGIC        = 0x00020;
DEFINE BLOCKFLAG_FLAME        = 0x00040;
DEFINE BLOCKFLAG_SCRIPT       = 0x00080; //blocks or reflects ALL script weapons
DEFINE BLOCKFLAG_FIREBALL2    = 0x00100;
DEFINE BLOCKFLAG_LIGHTBEAM    = 0x00200;
DEFINE BLOCKFLAG_SCRIPT1      = 0x00400;
DEFINE BLOCKFLAG_SCRIPT2      = 0x00800;
DEFINE BLOCKFLAG_SCRIPT3      = 0x01000;
DEFINE BLOCKFLAG_SCRIPT4      = 0x02000;
DEFINE BLOCKFLAG_SCRIPT5      = 0x04000;
DEFINE BLOCKFLAG_SCRIPT6      = 0x08000;
DEFINE BLOCKFLAG_SCRIPT7      = 0x10000;
//Higher blockflag bits are too high for zscript! Use long access...

DEFINEL L_BLOCKFLAG_ROCK         = 0x00000001L;
DEFINEL L_BLOCKFLAG_ARROW        = 0x00000002L;
DEFINEL L_BLOCKFLAG_BRANG        = 0x00000004L;
DEFINEL L_BLOCKFLAG_FIREBALL     = 0x00000008L;
DEFINEL L_BLOCKFLAG_SWORD        = 0x00000010L;
DEFINEL L_BLOCKFLAG_MAGIC        = 0x00000020L;
DEFINEL L_BLOCKFLAG_FLAME        = 0x00000040L;
DEFINEL L_BLOCKFLAG_SCRIPT       = 0x00000080L; //blocks or reflects ALL script weapons
DEFINEL L_BLOCKFLAG_FIREBALL2    = 0x00000100L;
DEFINEL L_BLOCKFLAG_LIGHTBEAM    = 0x00000200L;
DEFINEL L_BLOCKFLAG_SCRIPT1      = 0x00000400L;
DEFINEL L_BLOCKFLAG_SCRIPT2      = 0x00000800L;
DEFINEL L_BLOCKFLAG_SCRIPT3      = 0x00001000L;
DEFINEL L_BLOCKFLAG_SCRIPT4      = 0x00002000L;
DEFINEL L_BLOCKFLAG_SCRIPT5      = 0x00004000L;
DEFINEL L_BLOCKFLAG_SCRIPT6      = 0x00008000L;
DEFINEL L_BLOCKFLAG_SCRIPT7      = 0x00010000L;
DEFINEL L_BLOCKFLAG_SCRIPT8      = 0x00020000L;
DEFINEL L_BLOCKFLAG_SCRIPT9      = 0x00040000L;
DEFINEL L_BLOCKFLAG_SCRIPT10     = 0x00080000L;

enum scr_timing
{
	SCR_TIMING_INIT = -1,
	//0
	SCR_TIMING_START_FRAME, SCR_TIMING_POST_COMBO_ANIM, SCR_TIMING_POST_POLL_INPUT,
	SCR_TIMING_POST_FFCS, SCR_TIMING_POST_GLOBAL_ACTIVE,
	//5
	SCR_TIMING_POST_PLAYER_ACTIVE, SCR_TIMING_POST_DMAPDATA_ACTIVE,
	SCR_TIMING_POST_DMAPDATA_PASSIVESUBSCREEN, SCR_TIMING_POST_COMBOSCRIPT,
	SCR_TIMING_POST_PUSHBLOCK,
	//10
	SCR_TIMING_POST_ITEMSPRITE_SCRIPT, SCR_TIMING_POST_ITEMSPRITE_ANIMATE,
	SCR_TIMING_POST_NPC_ANIMATE, SCR_TIMING_POST_EWPN_ANIMATE, SCR_TIMING_POST_EWPN_SCRIPT,
	//15
	SCR_TIMING_POST_OLD_ITEMDATA_SCRIPT, SCR_TIMING_POST_PLAYER_ANIMATE,
	SCR_TIMING_POST_NEW_ITEMDATA_SCRIPT, SCR_TIMING_POST_CASTING,
	SCR_TIMING_POST_LWPN_ANIMATE,
	//20
	SCR_TIMING_POST_DECOPARTICLE_ANIMATE, SCR_TIMING_POST_COLLISIONS_PALETTECYCLE,
	SCR_TIMING_WAITDRAW, SCR_TIMING_POST_GLOBAL_WAITDRAW, SCR_TIMING_POST_PLAYER_WAITDRAW,
	//25
	SCR_TIMING_POST_DMAPDATA_ACTIVE_WAITDRAW, SCR_TIMING_POST_DMAPDATA_PASSIVESUBSCREEN_WAITDRAW,
	SCR_TIMING_POST_SCREEN_WAITDRAW, SCR_TIMING_POST_FFC_WAITDRAW, SCR_TIMING_POST_COMBO_WAITDRAW,
	//30
	SCR_TIMING_POST_ITEM_WAITDRAW, SCR_TIMING_POST_NPC_WAITDRAW, SCR_TIMING_POST_EWPN_WAITDRAW,
	SCR_TIMING_POST_LWPN_WAITDRAW, SCR_TIMING_POST_ITEMSPRITE_WAITDRAW,
	//35
	SCR_TIMING_PRE_DRAW, SCR_TIMING_POST_DRAW, SCR_TIMING_POST_STRINGS, SCR_TIMING_END_FRAME,
	SCR_NUM_TIMINGS
};
//Generic Script States, for 'ExitState[]'/'ReloadState[]'
enum
{
	GENSCR_ST_RELOAD, //When reloading from save select screen
	GENSCR_ST_CONTINUE, //When F6->Continue
	GENSCR_ST_CHANGE_SCREEN, //When screen changes
	GENSCR_ST_CHANGE_DMAP, //When dmap changes
	GENSCR_ST_CHANGE_LEVEL, //When level changes
	GENSCR_NUMST
};
//Generic Script events, for 'WaitEvent()'
enum
{
	GENSCR_EVENT_NIL = -1, //N/A (error value)
	GENSCR_EVENT_INIT, //When loading in from a save/new quest
	GENSCR_EVENT_CONTINUE, //When F6->Continue
	GENSCR_EVENT_FFC_PRELOAD, //When FFCs run 'on screen init'
	GENSCR_EVENT_CHANGE_SCREEN, //When the screen changes
	GENSCR_EVENT_CHANGE_DMAP, //When the dmap changes
	GENSCR_EVENT_CHANGE_LEVEL, //When the level changes
	GENSCR_EVENT_HERO_HIT_1, //Player is hit, before ring applied
	GENSCR_EVENT_HERO_HIT_2, //Player is hit, after ring applied
	GENSCR_EVENT_COLLECT_ITEM, //Item is collected
	GENSCR_EVENT_ENEMY_DROP_ITEM_1, //Enemy drops item (before item created)
	GENSCR_EVENT_ENEMY_DROP_ITEM_2, //Enemy drops item (if & after item created)
	GENSCR_EVENT_ENEMY_DEATH, //Enemy dying
	GENSCR_EVENT_ENEMY_HIT1, //Enemy hit, before defenses
	GENSCR_EVENT_ENEMY_HIT2, //Enemy hit, after defenses
	GENSCR_EVENT_POST_COLLECT_ITEM, //After item is collected (post hold if held)
	GENSCR_EVENT_PLAYER_FALL, //Player falls in a pitfall
	GENSCR_EVENT_PLAYER_DROWN, //Player drowns
	GENSCR_NUMEVENT
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_HERO_HIT_1' and 'GENSCR_EVENT_HERO_HIT_2'
{
	GENEV_HEROHIT_DAMAGE, //Damage to be taken
	GENEV_HEROHIT_HITDIR, //Dir to be knocked in
	GENEV_HEROHIT_NULLIFY, //Bool: to nullify the hit, or not
	GENEV_HEROHIT_NAYRUON, //Bool: if nayru's love will nullify the damage, or not
	GENEV_HEROHIT_IFRAMES, //Number of IFrames to have after hit, if not nullified
	GENEV_HEROHIT_HITTYPE, //What type of object is hitting the hero ('OBJTYPE_')
	GENEV_HEROHIT_HITOBJ, //The pointer to that object
	GENEV_HEROHIT_HITTYPE2, //A second type of object (sometimes 'OBJTYPE_NONE')
	GENEV_HEROHIT_HITOBJ2 //The pointer to the second object
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_COLLECT_ITEM'
{
	GENEV_ITEMCOL_ID, //Item ID to be gained
	GENEV_ITEMCOL_PICKUP, //Pickup flags for the item pickup
	GENEV_ITEMCOL_PSTR, //Pickup string to be displayed
	GENEV_ITEMCOL_PSTRFLAGS, //Pickup string flags
	GENEV_ITEMCOL_NULLIFY, //Bool: to nullify the item pickup, or not
	GENEV_ITEMCOL_ITEMPTR, //'itemsprite' object pointer
	GENEV_ITEMCOL_TYPE, //Type of hit; see GENEVT_ICTYPE_
	GENEV_ITEMCOL_WPNPTR //'lweapon' object pointer, or 'NULL' if no weapon is available
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_ENEMY_DROP_ITEM_1'
{
	GENEV_EDI1_NPC, //the npc pointer
	GENEV_EDI1_ITEMID, //the chosen item ID
	GENEV_EDI1_DROPSET //the dropset the ID was chosen from
	//If the ITEMID is set to '-2', the dropset will be rolled automatically.
	//ITEMID of -1 means no item will be dropped.
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_ENEMY_DROP_ITEM_2'
{
	GENEV_EDI2_NPC, //the npc pointer
	GENEV_EDI2_ITM //the itemsprite pointer
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_ENEMY_DEATH'
{
	GENEV_EDEATH_DYING, //Bool: if the enemy is dying, or not (set false to cancel death)
	GENEV_EDEATH_NPC //the npc pointer
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_ENEMY_HIT1' and 'GENSCR_EVENT_ENEMY_HIT2'
{
	GENEV_EHIT_POWER, //damage amount
	GENEV_EHIT_DEFENSETYPE, //defense type
	GENEV_EHIT_UNBLOCKABLE, //unblockable flagset
	GENEV_EHIT_WEAPONID, //weapon ID
	GENEV_EHIT_NULLIFY, //Bool: if true the hit will not connect
	GENEV_EHIT_NPCPTR, //npc pointer
	GENEV_EHIT_LWPNPTR //lweapon pointer
};
enum //Game->EventData[] indexes for 'GENSCR_EVENT_PLAYER_FALL' and 'GENSCR_EVENT_PLAYER_DROWN'
{
	GENEV_PLAYER_FALLDROWN_COMBO //The combo ID the player is falling/drowning into.
};

enum //constants for 'GENEV_ITEMCOL_TYPE'
{
	GENEVT_ICTYPE_COLLECT, //Hero collected the item
	GENEVT_ICTYPE_MELEE, //Melee weapon collected the item
	GENEVT_ICTYPE_MELEE_EW, //Melee weapon collected the item
	GENEVT_ICTYPE_RANGED_DRAG //Ranged weapon collected, and will drag //Only 'NULLIFY' can be edited here
};
enum //constants for 'GENEV_HEROHIT_HITTYPE' / 'GENEV_HEROHIT_HITTYPE2'
{
	OBJTYPE_NONE = -1,
	OBJTYPE_NPC, OBJTYPE_LWPN, OBJTYPE_EWPN, OBJTYPE_ITSPR, OBJTYPE_COMBODATA,
	OBJTYPE_COMBOPOS, OBJTYPE_FFC,
	NUM_OBJTYPE
};

//For Screen->LoadNPC() and etc; the screen index of the thing
DEFINE HIT_BY_NPC                   = 0; //Player only
DEFINE HIT_BY_EWEAPON               = 1; //Player only
DEFINE HIT_BY_LWEAPON               = 2;
DEFINE HIT_BY_FFC                   = 3; //Unimplemented
//For Screen->LoadNPCByUID() and etc; corresponds with the ->UID of the thing. Not to be confused with the internal UID used by the engine.
DEFINE HIT_BY_NPC_UID               = 4; //Player only
DEFINE HIT_BY_EWEAPON_UID           = 5; //Player only
DEFINE HIT_BY_LWEAPON_UID           = 6;
DEFINE HIT_BY_FFC_UID               = 7; //Unimplemented
//Returns the item id of the item that the weapon that hit came from; -1 if the lweapon is script created
DEFINE HIT_BY_LWEAPON_PARENT_ID     = 8;
//Returns the item class of the item that the weapon that hit came from (see IC_ constants); -1 if the lweapon is script created
DEFINE HIT_BY_LWEAPON_PARENT_FAMILY = 9;
//Returns the enemy class of the enemy that hit the player (see [NpcType] (`NPCT_`) constants)
DEFINE HIT_BY_NPC_TYPE              = 10; //Player only
//Returns the ID of the weapon that hit (see LW_ and EW_ constants)
DEFINE HIT_BY_EWEAPON_TYPE          = 11; //Player only
DEFINE HIT_BY_LWEAPON_TYPE          = 12;
//Returns the internal UID used by the engine for the thing. Can case these to their respective types (example: npc n = <npc>(Player->HitBy[HIT_BY_NPC_PTR]);)
DEFINE HIT_BY_NPC_PTR               = 13;
DEFINE HIT_BY_EWEAPON_PTR           = 14;
DEFINE HIT_BY_LWEAPON_PTR           = 15;
//Returns the ID of the enemy that hit the Player
DEFINE HIT_BY_NPC_ID                = 16;

DEFINE AF_FRESH          = 0x01;
DEFINE AF_CYCLE          = 0x02;
DEFINE AF_CYCLENOCSET    = 0x04;
DEFINE AF_TRANSPARENT    = 0x08;

enum //Combodata LiftFlags[]
{
	LF_LIFTABLE,
	LF_DROPSET,
	LF_DROPONLIFT,
	LF_SPECIALITEM,
	LF_NOUCSET,
	LF_NOWPNCMBCSET,
	LF_BREAKONSOLID
};

enum 
{
	CSPACE_RGB,
	CSPACE_CMYK, 
	CSPACE_HSV, CSPACE_HSV_CW, CSPACE_HSV_CCW, 
	CSPACE_HSL, CSPACE_HSL_CW, CSPACE_HSL_CCW, 
	CSPACE_LAB, 
	CSPACE_LCH, CSPACE_LCH_CW, CSPACE_LCH_CCW,
	CSPACE_NUMCSPACE
};

DEFINE IPSTR_ALWAYS   = 0x01;
DEFINE IPSTR_ONLYHELD = 0x02;

enum //For 'itemdata->RunScript()'
{
	ISCR_KILL, ISCR_RUN, ISCR_PERPETUAL
};

enum //For 'itemdata->PickupType'
{
	IPTYPE_DISABLED,
	IPTYPE_SET,
	IPTYPE_ADD,
	IPTYPE_SUB,
	IPTYPE_LIMIT
};

DEFINE IMISC_FLASH   = 0x01;
DEFINE IMISC_TWOHAND = 0x02;
DEFINE IMISC_HFLIP   = 0x04;
DEFINE IMISC_VFLIP   = 0x08;

DEFINE SZFLAG_TILEWIDTH      = 0x0001;
DEFINE SZFLAG_TILEHEIGHT     = 0x0002;
DEFINE SZFLAG_HIT_WIDTH      = 0x0004;
DEFINE SZFLAG_HIT_HEIGHT     = 0x0008;
DEFINE SZFLAG_HIT_Z_HEIGHT   = 0x0010;
DEFINE SZFLAG_HIT_X_OFFSET   = 0x0020;
DEFINE SZFLAG_HIT_Y_OFFSET   = 0x0040;
DEFINE SZFLAG_DRAW_X_OFFSET  = 0x0080;
DEFINE SZFLAG_DRAW_Y_OFFSET  = 0x0100;
DEFINE SZFLAG_DRAW_Z_OFFSET  = 0x0200;
DEFINE SZFLAG_ALL            = 0x03FF;

enum //spritedata->Flags[] indexes
{
	SPRFL_AUTOFLASH,
	SPRFL_2PFLASH,
	SPRFL_HFLIP,
	SPRFL_VFLIP,
	SPRFL_BEHIND,
	NUM_SPRFL
};

enum //Light shapes for torch combos, lantern itemdata, and GlowShape variables
{
	LIGHT_CIRCLE,
	LIGHT_CONE,
	LIGHT_SQUARE
};

//Override Flag constants, compare with itemdata->OverrideFlags, itemdata->WeaponOverrideFlags and npcdata->OverrideFlags. These correspond to the "Enabled" checkboxes in the Graphics->Size tab in the Item and Enemy Editors. Add or OR (|) these together 
const int SZOF_TILEWIDTH      = 1;     //0000000001b, 0x001
const int SZOF_TILEHEIGHT     = 2;     //0000000010b, 0x002
const int SZOF_HITWIDTH       = 4;     //0000000100b, 0x004
const int SZOF_HITHEIGHT      = 8;     //0000001000b, 0x008
const int SZOF_HITZHEIGHT     = 16;     //0000010000b, 0x010
const int SZOF_HITXOFFSET     = 32;     //0000100000b, 0x020
const int SZOF_HITYOFFSET     = 64;     //0001000000b, 0x040
const int SZOF_DRAWXOFFSET    = 128;     //0010000000b, 0x080
const int SZOF_DRAWYOFFSET    = 256;     //0100000000b, 0x100
const int SZOF_DRAWZOFFSET    = 512;     //1000000000b, 0x200, Enemies only.

//Special hardcoded draw layers
//Note: These may draw multiple times, or no times at all, during a frame.
//      Timing may vary from frame to frame, and based on QRs or other settings.
enum
{
	SPLAYER_PLAYER_DRAW = -200000,  //The player, when this occurs changes based on various conditions.
	SPLAYER_EWEAP_BEHIND_DRAW, //Eweapons with 'Behind = true'
	SPLAYER_EWEAP_FRONT_DRAW, //Eweapons with 'Behind = false'
	SPLAYER_LWEAP_BEHIND_DRAW, //Lweapons with 'Behind = true'
	SPLAYER_LWEAP_FRONT_DRAW, //Lweapons with 'Behind = false'
	SPLAYER_LWEAP_ABOVE_DRAW, //Lweapons with (Z+FakeZ) > Init Data 'Jump Layer Height', IF the player is also above this height.
	SPLAYER_CHAINLINK_DRAW, //Hookshot chain links. This may draw multiple times per frame.
	SPLAYER_NPC_DRAW, //Enemies
	SPLAYER_NPC_ABOVEPLAYER_DRAW, //Enemies 'grabbing' the player, or with a higher Z than the player
	SPLAYER_NPC_AIRBORNE_DRAW, //Flying enemies, or enemies in the Z axis (amount required QR dependant)
	SPLAYER_ITEMSPRITE_DRAW, //Itemsprites
	SPLAYER_FAIRYITEM_DRAW, //Moving fairies
	SPLAYER_PUSHBLOCK, //Pushable Blocks
	SPLAYER_MOVINGBLOCK, //Moving Pushable Blocks
	SPLAYER_OVERHEAD_CMB, //Overhead combos
	SPLAYER_OVERHEAD_FFC, //Overhead ffcs
	SPLAYER_DARKROOM_UNDER, //Under dark room darkness
	SPLAYER_DARKROOM_OVER, //Over dark room darkness
	SPLAYER_FFC_DRAW, //Non-Overhead ffcs
	SPLAYER_LENS_UNDER_1, //Lens drawing secrets/revealing things
	SPLAYER_LENS_UNDER_2, //Lens drawing secrets/revealing things
	SPLAYER_LENS_OVER //Lens drawing blackness to cover most of the screen
};

enum //for Hero->LiftFlags[]
{
	LIFTFL_DISABLE_SHIELD,
	LIFTFL_DISABLE_ITEMS,
	LIFTFL_NO_SWIMMING,
	LIFTFL_MAX
};

enum
{
	MR_SCREEN,
	MR_DMAP,
	MR_LEVEL,
	MR_NEVER
};

enum
{	
	MRF_NOCUT,
	MRF_REVERT
};

DEFINE CIID_FLAG_CHECKCOST     = 0x01;
DEFINE CIID_FLAG_CHECKJINX     = 0x02;
DEFINE CIID_FLAG_CHECKBUNNY    = 0x04;

enum
{
	ITM_BURNSPR_NO_BURN,
	ITM_BURNSPR_ANY_BURN,
	ITM_BURNSPR_STRONG_BURN,
	ITM_BURNSPR_MAGIC_BURN,
	ITM_BURNSPR_DIVINE_BURN,
	ITM_BURNSPR_MAX
};

//{ This section for engine subscreen stuff
enum //Subscreen Types
{
	SSTYPE_ACTIVE,
	SSTYPE_PASSIVE,
	SSTYPE_OVERLAY,
	SSTYPE_MAX
};

//Subscreen Flags
enum
{
	SSFL_ACTIVE_NOPAGEWRAP,
	SSFL_ACTIVE_OVERRIDE_SELECTOR,
	SSFL_ACTIVE_MAX
};
enum
{
	SSFL_PASSIVE_MAX
};
enum
{
	SSFL_OVERLAY_MAX
};

enum //Transition Types
{
	TRANS_TY_INSTANT,
	TRANS_TY_SLIDE,
	TRANS_TY_PIXEL,
	TRANS_TY_MAX
};

//Transition arguments
enum
{
	TRANS_INSTANT_ARG_MAX
};
enum
{
	TRANS_SLIDE_ARG_DIR,
	TRANS_SLIDE_ARG_SPEED,
	TRANS_SLIDE_ARG_MAX
};
enum
{
	TRANS_PIXEL_ARG_INVERT,
	TRANS_PIXEL_ARG_DURATION,
	TRANS_PIXEL_ARG_XOFF,
	TRANS_PIXEL_ARG_YOFF,
	TRANS_PIXEL_ARG_MAX
};

enum //Transition Flags
{
	TRANSFLAG_NO_HIDE_SELECTOR,
	TRANSFLAG_MAX
};

DEFINE SUBSEL_FLAG_NO_NONEQUIP = 0x01;
DEFINE SUBSEL_FLAG_NEED_ITEM = 0x02;

enum //Widget Types
{
	SUBWIDG_NULL, SUBWIDG_FRAME, SUBWIDG_TEXT, SUBWIDG_LINE, SUBWIDG_RECT,
	SUBWIDG_TIME, SUBWIDG_MMETER, SUBWIDG_LMETER, SUBWIDG_BTNITM, SUBWIDG_COUNTER,
	SUBWIDG_OLDCTR, SUBWIDG_MMAPTITLE, SUBWIDG_MMAP, SUBWIDG_LMAP, SUBWIDG_BGCOLOR,
	SUBWIDG_ITEMSLOT, SUBWIDG_MCGUFF_FRAME, SUBWIDG_MCGUFF, SUBWIDG_TILEBLOCK, SUBWIDG_MINITILE,
	SUBWIDG_SELECTOR, SUBWIDG_LGAUGE, SUBWIDG_MGAUGE, SUBWIDG_TEXTBOX, SUBWIDG_SELECTEDTEXT,
	SUBWIDG_MISCGAUGE, SUBWIDG_BTNCOUNTER,
	SUBWIDG_MAX
};

enum //Visibility Flags
{
	SUBVISIB_CLOSED, //Visible while the active subscreen is closed
	SUBVISIB_OPEN, //Visible while the active subscreen is open
	SUBVISIB_SCROLLING, //Visible while the active subscreen is opening/closing
	SUBVISIB_NO_MSGSTR, //Hide while a message string is displaying
	SUBVISIB_MAX
};

enum //Widget genflags
{
	SUBW_GENFL_SELECTABLE,
	SUBW_GENFL_PGMODE_NOWRAP,
	SUBW_GENFL_SELECTOR_OVERRIDE,
	SUBW_GENFL_MAX
};

enum //Page Modes
{
	SUB_PGMODE_NONE, //no page change
	SUB_PGMODE_NEXT, //next page
	SUB_PGMODE_PREV, //previous page
	SUB_PGMODE_TARG, //specified page
	SUB_PGMODE_MAX
};

enum //Special Subscreen CSet Values
{
	SUB_CS_MCGUFF         = -1,
	SUB_CS_MCGUFF_FRAME   = -2,
	SUB_CS_OW_MAP         = -3,
	SUB_CS_DUNG_MAP       = -4,
	SUB_CS_BLUEFRAME      = -5,
	SUB_CS_HCPIECES       = -6,
	SUB_CS_SSVINE         = -7,
	SUB_CS_MIN            = -8
};
enum //Special Subscreen Color Values
{
	SUB_COLOR_SYS_0       = -1,
	SUB_COLOR_SYS_1       = -2,
	SUB_COLOR_SYS_2       = -3,
	SUB_COLOR_SYS_3       = -4,
	SUB_COLOR_SYS_4       = -5,
	SUB_COLOR_SYS_5       = -6,
	SUB_COLOR_SYS_6       = -7,
	SUB_COLOR_SYS_7       = -8,
	SUB_COLOR_SYS_8       = -9,
	SUB_COLOR_SYS_9       = -10,
	SUB_COLOR_SYS_10      = -11,
	SUB_COLOR_SYS_11      = -12,
	SUB_COLOR_SYS_12      = -13,
	SUB_COLOR_SYS_13      = -14,
	SUB_COLOR_SYS_14      = -15,
	SUB_COLOR_SYS_15      = -16,
	SUB_COLOR_TEXT        = -17,
	SUB_COLOR_CAPTION     = -18,
	SUB_COLOR_OVERW_BG    = -19,
	SUB_COLOR_DUNG_BG     = -20,
	SUB_COLOR_DUNG_FG     = -21,
	SUB_COLOR_CAVE_FG     = -22,
	SUB_COLOR_BS_DARK     = -23,
	SUB_COLOR_BS_GOAL     = -24,
	SUB_COLOR_COMPASS_L   = -25,
	SUB_COLOR_COMPASS_D   = -26,
	SUB_COLOR_SUBSCR_BG   = -27,
	SUB_COLOR_SUBSCR_SHD  = -28,
	SUB_COLOR_MCGUFF_FRM  = -29,
	SUB_COLOR_LMAP_BG     = -30,
	SUB_COLOR_LMAP_FG     = -31,
	SUB_COLOR_HERODOT     = -32,
	SUB_COLOR_MSGTXT      = -33,
	SUB_COLOR_TRANSPARENT = -34,
	SUB_COLOR_MIN         = -35
};
enum //Special Subscreen Tile Values
{
	SUB_SPTILE_SSVINE     = -1,
	SUB_SPTILE_MAGICMETER = -2,
	SUB_SPTILE_MIN        = -3
};
//{ Subscreen type-specific flag constants

enum // Flags for SUBWIDG_FRAME
{
	SUBW_FRAME_FLAG_TRANSP,
	SUBW_FRAME_FLAG_OVERLAY,
	SUBW_FRAME_NUMFLAGS
};
enum // Flags for SUBWIDG_TEXT
{
	SUBW_TEXT_NUMFLAGS
};
enum // Flags for SUBWIDG_LINE
{
	SUBW_LINE_FLAG_TRANSP,
	SUBW_LINE_NUMFLAGS
};
enum // Flags for SUBWIDG_RECT
{
	SUBW_RECT_FLAG_TRANSP,
	SUBW_RECT_FLAG_FILLED,
	SUBW_RECT_NUMFLAGS
};
enum // Flags for SUBWIDG_TIME
{
	SUBW_TIME_FLAG_ALTSTR,
	SUBW_TIME_NUMFLAGS
};
enum // Flags for SUBWIDG_MMETER
{
	SUBW_MMETER_NUMFLAGS
};
enum // Flags for SUBWIDG_LMETER
{
	SUBW_LMETER_FLAG_BOTTOM,
	SUBW_LMETER_NUMFLAGS
};
enum // Flags for SUBWIDG_BTNITM
{
	SUBW_BTNITM_FLAG_TRANSP,
	SUBW_BTNITM_NUMFLAGS
};
enum // Flags for SUBWIDG_COUNTER
{
	SUBW_COUNTER_FLAG_SHOW0,
	SUBW_COUNTER_FLAG_ONLYSEL,
	SUBW_COUNTER_NUMFLAGS
};
enum // Flags for SUBWIDG_OLDCTR
{
	SUBW_OLDCTR_FLAG_USEX,
	SUBW_OLDCTR_NUMFLAGS
};
enum // Flags for SUBWIDG_MMAPTITLE
{
	SUBW_MMAPTITLE_FLAG_REQMAP,
	SUBW_MMAPTITLE_FLAG_ONELINE,
	SUBW_MMAPTITLE_NUMFLAGS
};
enum // Flags for SUBWIDG_MMAP
{
	SUBW_MMAP_FLAG_SHOWMAP,
	SUBW_MMAP_FLAG_SHOWPLAYER,
	SUBW_MMAP_FLAG_SHOWCOMPASS,
	SUBW_MMAP_NUMFLAGS
};
enum // Flags for SUBWIDG_LMAP
{
	SUBW_LMAP_FLAG_SHOWMAP,
	SUBW_LMAP_FLAG_SHOWROOM,
	SUBW_LMAP_FLAG_SHOWPLAYER,
	SUBW_LMAP_FLAG_LARGE,
	SUBW_LMAP_NUMFLAGS
};
enum // Flags for SUBWIDG_BGCOLOR
{
	SUBW_BGCOLOR_NUMFLAGS
};
enum // Flags for SUBWIDG_ITEMSLOT
{
	SUBW_ITEMSLOT_FLAG_INVIS,
	SUBW_ITEMSLOT_FLAG_NON_EQUIPPABLE,
	SUBW_ITEMSLOT_MOVE_IGNORE_SPEC_SELTEXT,
	SUBW_ITEMSLOT_MOVE_IGNORE_SPEC_DISPLAY,
	SUBW_ITEMSLOT_FLAG_NO_INTERACT_WO_ITEM,
	SUBW_ITEMSLOT_FLAG_NO_INTERACT_WO_EQUIP,
	SUBW_ITEMSLOT_FLAG_NO_UNEQUIP,
	SUBW_ITEMSLOT_NUMFLAGS
};
enum // Flags for SUBWIDG_MCGUFF_FRAME
{
	SUBW_MCGUFF_FRAME_FLAG_SHOWFRAME,
	SUBW_MCGUFF_FRAME_FLAG_SHOWPIECES,
	SUBW_MCGUFF_FRAME_FLAG_LARGEPIECES,
	SUBW_MCGUFF_FRAME_NUMFLAGS
};
enum // Flags for SUBWIDG_MCGUFF
{
	SUBW_MCGUFF_FLAG_OVERLAY,
	SUBW_MCGUFF_FLAG_TRANSP,
	SUBW_MCGUFF_NUMFLAGS
};
enum // Flags for SUBWIDG_TILEBLOCK
{
	SUBW_TILEBLOCK_FLAG_OVERLAY,
	SUBW_TILEBLOCK_FLAG_TRANSP,
	SUBW_TILEBLOCK_NUMFLAGS
};
enum // Flags for SUBWIDG_MINITILE
{
	SUBW_MINITILE_FLAG_OVERLAY,
	SUBW_MINITILE_FLAG_TRANSP,
	SUBW_MINITILE_NUMFLAGS
};
enum // Flags for SUBWIDG_SELECTOR
{
	SUBW_SELECTOR_FLAG_TRANSP,
	SUBW_SELECTOR_FLAG_LARGE,
	SUBW_SELECTOR_FLAG_USEB,
	SUBW_SELECTOR_NUMFLAGS
};
enum // Flags for SUBWIDG_LGAUGE,SUBWIDG_MGAUGE,SUBWIDG_MISCGAUGE
{
	SUBW_GAUGE_FLAG_MOD1,
	SUBW_GAUGE_FLAG_MOD2,
	SUBW_GAUGE_FLAG_MOD3,
	SUBW_GAUGE_FLAG_MOD4,
	SUBW_GAUGE_FLAG_UNIQUE_LAST,
	SUBW_GAUGE_FLAG_FULL_TILE,
	SUBW_GAUGE_FLAG_ANIMATE_UNDER,
	SUBW_GAUGE_FLAG_ANIMATE_OVER,
	SUBW_GAUGE_FLAG_ANIMATE_PERCENT,
	SUBW_GAUGE_FLAG_ANIMATE_SKIP_FIRST,
	SUBW_GAUGE_FLAG_INFITEM_REQUIRE,
	SUBW_GAUGE_FLAG_INFITEM_DISALLOW,
	SUBW_GAUGE_FLAG_GRID_RTOL,
	SUBW_GAUGE_FLAG_GRID_TTOPB,
	SUBW_GAUGE_FLAG_GRID_COLUMN_FIRST,
	SUBW_GAUGE_FLAG_GRID_SNAKE_PATTERN,
	SUBW_GAUGE_NUMFLAGS
};
enum // Flags for SUBWIDG_TEXTBOX
{
	SUBW_TEXTBOX_FLAG_WORDWRAP,
	SUBW_TEXTBOX_NUMFLAGS
};
enum // Flags for SUBWIDG_SELECTEDTEXT
{
	SUBW_SELECTEDTEXT_FLAG_WORDWRAP,
	SUBW_SELECTEDTEXT_NUMFLAGS
};
enum // Flags for SUBWIDG_BTNCOUNTER
{
	SUBW_BTNCOUNTER_FLAG_SHOW0,
	SUBW_BTNCOUNTER_FLAG_NOCOLLAPSE,
	SUBW_BTNCOUNTER_NUMFLAGS
};

//} End section for subscreen type-specific flag constants
//} End section for engine subscreen stuff
