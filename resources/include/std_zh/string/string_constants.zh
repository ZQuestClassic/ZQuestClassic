//String Constants
//1st July, 2019 for ZC 2.55 Alpha 26

//printf, sprintf and strcatf arguments
const char32 MSGC_LINEFEED			= 10;	// '\n'

const int MF_NONE				= 0;	// '%n'
const int MF_STRING				= 1;	// '%s'
const int MF_INT				= 2;	// '%i'
const int MF_FLOAT				= 3;	// '%f'
const int MF_NUM				= 4;	// '%d'
const int MF_PTR				= 5;	// '%p'
const int MF_CHAR				= 6;	// '%c'
const int MF_HEXLOWER			= 7;	// '%x'
const int MF_HEXUPPER			= 8;	// '%X'


//Base ASCII Table
const char32 CHAR_NULL 		= 0; //NULL char, end of string.
const char32 CHAR_SOH 		= 1; //Start of heading.
const char32 CHAR_STX 		= 2; //Start of text.
const char32 CHAR_ETX		= 3; //End of text.
const char32 CHAR_EOT 		= 4; //End of transmission. 
const char32 CHAR_ENQ		= 5; //Enquiry
const char32 CHAR_ACK		= 6; //Acknowledge
const char32 CHAR_BELL		= 7; //Bell tone.
const char32 CHAR_BACKSPACE	= 8;
const char32 CHAR_TAB 		= 9;
const char32 CHAR_LF		= 10; //Line feed, new line.
const char32 CHAR_NEWLINE		= 10;
const char32 CHAR_VTAB 		= 11; //Vertical tab.
const char32 CHAR_FF		= 12; //Form feed, new page.
const char32 CHAR_FORMFEED		= 12;
const char32 CHAR_CR 		= 13; //Carriage return.
const char32 CHAR_RETURN		= 13;
const char32 CHAR_SHIFTOUT		= 14;
const char32 CHAR_SHIFTIN		= 15;
const char32 CHAR_DLE		= 16; //Data Link Escape
const char32 CHAR_DEVCONT1		= 17; //Device Control 1
const char32 CHAR_DEVCONT2		= 18; //Device Control 2
const char32 CHAR_DEVCONT3		= 19; //Device Control 3
const char32 CHAR_DEVCONT4		= 20; //Device Control 4
const char32 CHAR_NEGACK		= 21; //Negative acknowledge.
const char32 CHAR_SYNCIDLE 	= 22; //Synchronous idle.
const char32 CHAR_ENDTRANSBLOCK	= 23; //End of transmission block.
const char32 CHAR_CANCEL		= 24; //Cancel
const char32 CHAR_ENDMEDIUM	= 25; //End of medium.
const char32 CHAR_EM		= 25; //End of medium.
const char32 CHAR_SUB		= 26; //Substitute
const char32 CHAR_SUBSTITUTE	= 26;
const char32 CHAR_ESC		= 27; //Escape char.
const char32 CHAR_FS		= 28; //File separator.
const char32 CHAR_FILESEP		= 28; 
const char32 CHAR_GROUPSEP 	= 29;
const char32 CHAR_GS 		= 29; //Group separator.
const char32 CHAR_RECORDSEP 	= 30;
const char32 CHAR_RS 		= 30; //Record separator.
const char32 CHAR_UNITSEP 		= 31;
const char32 CHAR_US 		= 31; //Unit separaor
const char32 CHAR_SPACE 		= 32;
const char32 CHAR_BANG 		= 33; //Bang sign (!)
const char32 CHAR_DQUOTE 		= 34; //Double-quote (")
const char32 CHAR_HASH 		= 35; //Hash sign (#)
const char32 CHAR_DOLLAR 		= 36; //Dollar sign ($)
const char32 CHAR_PERCENT 		= 37; //Percent sign (%)
const char32 CHAR_AND		= 38; //And sign (&)
const char32 CHAR_QUOTE		= 39; //Single quote (')
const char32 CHAR_LPAREN		= 40; //Left paren
const char32 CHAR_RPAREN		= 41; //Right paren
const char32 CHAR_STAR		= 42; //Star (multiply) sign (*)
const char32 CHAR_PLUS		= 43; //Plus sign (+)
const char32 CHAR_COMMA		= 44; //Comma (,)
const char32 CHAR_MINUS		= 45; //Minus (-)
const char32 CHAR_DOT		= 46; //Dot (.)
const char32 CHAR_FSLASH		= 47; //Forward slash (/)
const char32 CHAR_0		= 48; //Numerals
const char32 CHAR_1		= 49;
const char32 CHAR_2		= 50;
const char32 CHAR_3		= 51;
const char32 CHAR_4		= 52;
const char32 CHAR_5		= 53;
const char32 CHAR_6		= 54;
const char32 CHAR_7		= 55;
const char32 CHAR_8		= 56;
const char32 CHAR_9		= 57;
const char32 CHAR_COLON		= 58; //Colon (:)
const char32 CHAR_SCOLON		= 59; //Semicolon (;)
const char32 CHAR_LESSTHAN		= 60; //Less than (<)
const char32 CHAR_EQUALS		= 61; //Equals (=)
const char32 CHAR_MORETHAN		= 62; //Greater than (>)
const char32 CHAR_QUESTION		= 63; //Question mark (?)
const char32 CHAR_ATSIGN		= 64; //At sign (@)
const char32 CHAR_A		= 65; //Uppercase Alpha
const char32 CHAR_B		= 66;
const char32 CHAR_C		= 67;
const char32 CHAR_D		= 68;
const char32 CHAR_E		= 69;
const char32 CHAR_F		= 70;
const char32 CHAR_G		= 71;
const char32 CHAR_H		= 72;
const char32 CHAR_I		= 73;
const char32 CHAR_J		= 74;
const char32 CHAR_K		= 75;
const char32 CHAR_L		= 76;
const char32 CHAR_M		= 77;
const char32 CHAR_N		= 78;
const char32 CHAR_O		= 79;
const char32 CHAR_P		= 80;
const char32 CHAR_Q		= 81;
const char32 CHAR_R		= 82;
const char32 CHAR_S		= 83;
const char32 CHAR_T		= 84;
const char32 CHAR_U		= 85;
const char32 CHAR_V		= 86;
const char32 CHAR_W		= 87;
const char32 CHAR_X		= 88;
const char32 CHAR_Y		= 89;
const char32 CHAR_Z		= 90;
const char32 CHAR_LBRACE		= 91; //Left brace ([)
const char32 CHAR_BSLASH		= 92; //Backslash (\)
const char32 CHAR_RBRACE		= 93; //Right brace (])
const char32 CHAR_CARET		= 94; //Caret (^)
const char32 CHAR_UNDERSCORE	= 95; //Underscore (_)
const char32 CHAR_GRAVE		= 96; //Grave (`)
const char32 CHAR_a		= 97; //Lowercase alpha.
const char32 CHAR_b		= 98;
const char32 CHAR_c		= 99;
const char32 CHAR_d		= 100;
const char32 CHAR_e		= 101;
const char32 CHAR_f		= 102;
const char32 CHAR_g		= 103;
const char32 CHAR_h		= 104;
const char32 CHAR_i		= 105;
const char32 CHAR_j		= 106;
const char32 CHAR_k		= 107;
const char32 CHAR_l		= 108;
const char32 CHAR_m		= 109;
const char32 CHAR_n		= 110;
const char32 CHAR_o		= 111;
const char32 CHAR_p		= 112;
const char32 CHAR_q		= 113;
const char32 CHAR_r		= 114;
const char32 CHAR_s		= 115;
const char32 CHAR_t		= 116;
const char32 CHAR_u		= 117;
const char32 CHAR_v		= 118;
const char32 CHAR_w		= 119;
const char32 CHAR_x		= 120;
const char32 CHAR_y		= 121;
const char32 CHAR_z		= 122;
const char32 CHAR_LCURLYBR		= 123; //Left curly brace ({)
const char32 CHAR_PIPE 		= 124; //Pipe (|)
const char32 CHAR_RCURLYBR		= 125; //Right curly brace (})
const char32 CHAR_TILDE		= 126; //Tilde (~)
const char32 CHAR_UNUSED 		= 127; //Last of Standard ASCII Map
const char32 CHAR_DEL 		= 127; //Forward delete.


//Extended ASCII

//The following characters will not show in the ZQ editor, or in Zelda Classic, but you may use them 
//in HARDCODED ZScript Strings (not in the ZQ String Editor!) when making a Tile Font, so that you may
//type non-English characters, and mathematical/currency symbols into hard-coded strings, and display
//them using your Tile Font. 

const char32 CHAR_EURO 			= 128; //Euro Sign €
const char32 CHAR_BLANK129 		= 129; //Blank
const char32 CHAR_QUOTE_LOW 		= 130; // ‚
const char32 CHAR_FLORIN 			= 131; //Florin Sign ƒ
const char32 CHAR_DOUBLEQUOTE_LOW 		= 132; //Low Double-Quote „
const char32 CHAR_ELLIPSIS 		= 133; //Ellipsis …
const char32 CHAR_DAGGER 			= 134; //Dagger †
const char32 CHAR_DOUBLE_DAGGER		= 135; //Double Dagger ‡
const char32 CHAR_CIRCUMFLEX 		= 136; //Raw Circumflex ˆ
const char32 CHAR_PERMILLE			= 137; //Permille Sign ‰
const char32 CHAR_S_CARON 			= 138; //S with Carom Š
const char32 CHAR_LEFT_ANGLE_QUOTE 	= 139; //Angle Quote (left) ‹
const char32 CHAR_OE			= 140; //OE Ligature, Dipthong Œ
const char32 CHAR_BLANK141 		= 141; //Blank
const char32 CHAR_Z_CARON 			= 142; //Z with Caron Ž
const char32 CHAR_BLANK143 		= 143; //Blank
const char32 CHAR_BLANK144			= 144; //Blank
const char32 CHAR_QUOTE_FANCY_L		= 145; //Fancy left Quote ‘
const char32 CHAR_QUOTE_FANCY_R 		= 146; //Fancy Right Quote ’
const char32 CHAR_DOUBLEQUOTE_L		= 147; //Fancy Left Double-Quote “
const char32 CHAR_DOUBLEQUOTE_R 		= 148; //Fancy Right Double-Quote ”
const char32 CHAR_DOT_LIST 		= 149; //Listing Bullet Dot •
const char32 CHAR_BULLET 			= 149; //Listing Bullet Dot •
const char32 CHAR_NDASH 			= 150; //N-Dash –
const char32 CHAR_MDASH 			= 151; //M-Dash —
const char32 CHAR_TILDE_OVER 		= 152; //Raw Tilde Overscore ˜
const char32 CHAR_TRADEMARK 		= 153; //Trademark Sign ™
const char32 CHAR_s_CARON 			= 154; //S with Caron š
const char32 CHAR_RIGHT_ANGLE_QUOTE 	= 155; //Angle quote (right) ›
const char32 CHAR_oe 			= 156; //Lowercase OE Ligature, Dipthong œ
const char32 CHAR_BLANK157 		= 157; //Blank
const char32 CHAR_z_CARON 			= 158; //Z with Caron ž
const char32 CHAR_Y_UMLAUT 		= 159; //Y with Umlaut Ÿ
const char32 CHAR_Y_DIAERESIS 		= 159; // Ÿ
const char32 CHAR_BLANK160 		= 160; //Blank
const char32 CHAR_BANG_INVERT 		= 161; //Inverted Bang ¡
const char32 CHAR_CENTS 			= 162; //Cents Sign ¢
const char32 CHAR_POUNDS 			= 163; //Pounds Sign £
const char32 CHAR_CURRENCY 		= 164; //Misc. Currency Sign ¤
const char32 CHAR_YEN 			= 165; //Yen Sign ¥
const char32 CHAR_BROKEN_BAR 		= 166; //Broken Vertical Bar ¦
const char32 CHAR_SECTION 			= 167; //Section Sign §
const char32 CHAR_UMLAUT 			= 168; //Raw Umlaut 
const char32 CHAR_DIAERESIS 		= 168; //Raw ¨
const char32 CHAR_COPYRIGHT 		= 169; //Copyright Sign ©
const char32 CHAR_ORDINAL_A 		= 170; //Ordinal A (Fem) ª
const char32 CHAR_MUCHLESSTHAN 		= 171; //Much Less Than «
const char32 CHAR_NOT_SYMBOL 		= 172; //Maths Symbol Not ¬
const char32 CHAR_SOFT_HYPHEN 		= 173; //oft Hyphen­
const char32 CHAR_REGISTERED_TM 		= 174; //Registered TM Symbol ®
const char32 CHAR_MACRON 			= 175; //Macron (Overscore) Sign ¯
const char32 CHAR_RING 			= 176; //Raw Ring °
const char32 CHAR_PLUSMINUS 		= 177; //Plus/Minus Sign ±
const char32 CHAR_SQUARED 			= 178; //Squared (Superscript) 2 ²
const char32 CHAR_CUBED 			= 179; //Cubed (Superscript) 3 ³
const char32 CHAR_ACUTE_ACCENT 		= 180; //Raw Acute Accent ´
const char32 CHAR_MICRO 			= 181; //Micro Symbol µ
const char32 CHAR_PARAGRAPH 		= 182; //Paragraph Sign ¶
const char32 CHAR_DOT_MATHS 		= 183; //Mathematical Dot (Multiplication) ·
const char32 CHAR_CEDILLA 			= 184; //Raw Cedilla ¸
const char32 CHAR_1_SUPER 			= 185; //Superscript 1 ¹
const char32 CHAR_GUILLEMETS		= 187; // »
const char32 CHAR_0_SUPER			= 186; //Superscript 0 º
const char32 CHAR_FRACTION_QUARTER 	= 188; //Fraction One-Quarter ¼
const char32 CHAR_FRACTION_HALF 		= 189; //Fraction One-Half ½
const char32 CHAR_FRACTION_THREE_QUARTERS 	= 190; //Fraction Three-Quarters ¾
const char32 CHAR_QUESTION_INV 		= 191; //Inverted Question Mark ¿
const char32 CHAR_A_GRAVE 			= 192; //A with Grave Accent À
const char32 CHAR_A_ACUTE 			= 193; //A with Acute Accent Á
const char32 CHAR_A_CIRCUMFLEX 		= 194; //A with Circumflex Â
const char32 CHAR_A_TILDE 			= 195; //A with Tilde Ã
const char32 CHAR_A_UMLAUT 		= 196; //A with Umlaut Ä
const char32 CHAR_A_DIAERESIS 		= 196; //Ä
const char32 CHAR_A_RING 			= 197; //A with Ring Å
const char32 CHAR_AE 			= 198; //AE Ligature, Dipthong Æ
const char32 CHAR_C_CEDILLA 		= 199; //C with Cedilla Ç
const char32 CHAR_E_GRAVE 			= 200; //E with Grave Accent È
const char32 CHAR_E_ACUTE 			= 201; //E with Acute Accent É
const char32 CHAR_E_CIRCUMFLEX 		= 202; //E withy Circumflex Ê
const char32 CHAR_E_UMLAUT 		= 203; //E with Umlaut Ë
const char32 CHAR_E_DIAERESIS 		= 203; // Ë
const char32 CHAR_I_GRAVE 			= 204; //I with Grave Accent Ì
const char32 CHAR_I_ACUTE 			= 205; //I with Acute Accent Í
const char32 CHAR_I_CIRCUMFLEX 		= 206; //I with Circumflex Accent Î
const char32 CHAR_I_UMLAUT 		= 207; //I with Umlaut Ï
const char32 CHAR_I_DIAERESIS		= 207; // Ï
const char32 CHAR_ETH 			= 208; //Eth Ð
const char32 CHAR_ENYE 			= 209; //Enye Ñ
const char32 CHAR_O_GRAVE 			= 210; //O with Grave Accent Ò
const char32 CHAR_O_ACUTE 			= 211; //O with Acute Accent Ó
const char32 CHAR_O_CIRCUMFLEX 		= 212; //O With CircumflexÔ
const char32 CHAR_O_TILDE 			= 213; //O with Tilde Accent Õ
const char32 CHAR_O_UMLAUT 		= 214; //O with Umlaut Ö
const char32 CHAR_O_DIAERESIS 		= 214; // Ö
const char32 CHAR_MULTIPLY_X 		= 215; //Multiplication X ×
const char32 CHAR_O_STROKE 		= 216; //O with Diagonal Stroke Ø
const char32 CHAR_U_GRAVE 			= 217; //U with Grave Accent Ù
const char32 CHAR_U_ACUTE 			= 218; //U with Acute Accent Ú
const char32 CHAR_U_CIRCUMFLEX 		= 219; //U with Circumflex Accent Û
const char32 CHAR_U_UMLAUT 		= 220; //U with Umlaut Ü
const char32 CHAR_U_DIAERESIS 		= 220; // Ü
const char32 CHAR_Y_ACUTE 			= 221; //Y With Acute Accent Ý
const char32 CHAR_THORN 			= 222; //Thorn Þ
const char32 CHAR_BETA 			= 223; //Beta ß
const char32 CHAR_a_GRAVE 			= 224; //Lowercase a with Grave Accent à
const char32 CHAR_a_ACUTE 			= 225; //Lowercase a with Acute Accentá
const char32 CHAR_a_CIRCUMFLEX 		= 226; //Lowercase a with Circumflex Accent â
const char32 CHAR_a_TILDE 			= 227; //Lowercase a with Tilde Accent ã
const char32 CHAR_a_UMLAUT 		= 228; //Lowercase a with Umlaut ä
const char32 CHAR_a_DIAERESIS 		= 228; // ä
const char32 CHAR_a_RING 			= 229; //Lowercase a with Ring å
const char32 CHAR_ae 			= 230; //Lowercase ae Ligature, Dipthong æ
const char32 CHAR_c_CEDILLA 		= 231; //Lowercase c with Cedilla ç
const char32 CHAR_e_GRAVE 			= 232; //Lowercase e with Grave Accent è
const char32 CHAR_e_ACUTE 			= 233; //Lowercase e with Acute Accent é
const char32 CHAR_e_CIRCUMFLEX 		= 234; //Lowercase e with Circumflex ê
const char32 CHAR_e_UMLAUT 		= 235; //Lowercase e with Umlaut ë
const char32 CHAR_e_DIAERESIS 		= 235; // ë
const char32 CHAR_i_GRAVE 			= 236; //Lowercase i with Grave Accent ì
const char32 CHAR_i_ACUTE 			= 237; //Lowercase i with Acute Accent í
const char32 CHAR_i_CIRCUMFLEX 		= 238; //Lowercase i with Circumflex î
const char32 CHAR_i_UMLAUT			= 239; //Lowercase i with Umlaut ï
const char32 CHAR_i_DIAERESIS		= 239; // ï
const char32 CHAR_eth 			= 240; //Lowercade eth ð
const char32 CHAR_enye 			= 241; //Lowercase enye ñ
const char32 CHAR_o_GRAVE 			= 242; //Lowercase o with Grave Accent ò
const char32 CHAR_o_ACUTE 			= 243; //Lowercase o with Acute Accent ó
const char32 CHAR_o_CIRCUMFLEX 		= 244; //Lowercase o with Circumflex ô
const char32 CHAR_o_TILDE 			= 245; //Lowercase o with Tilde õ
const char32 CHAR_o_UMLAUT 		= 246; //Lowercase o with Umlaut ö
const char32 CHAR_o_DIAERESIS 		= 246; // ö
const char32 CHAR_DIVISION_MATHS 		= 247; //Mathematical Division Sign ÷·
const char32 CHAR_o_STROKE 		= 248; //Lowercase o with Stroke ø
const char32 CHAR_u_GRAVE 			= 249; //Lowercase u with Grave Accent ù
const char32 CHAR_u_ACUTE 			= 250; //Lowercase u with Acute Accent ú
const char32 CHAR_u_CIRCUMFLEX 		= 251; //Lowercase u with Circumflex û
const char32 CHAR_u_UMLAUT 		= 252; //Lowercase u with Umlaut ü
const char32 CHAR_u_DIAERESIS 		= 252; // ü
const char32 CHAR_y_ACUTE 			= 253; //Lowercase y with Acute Accent ý
const char32 CHAR_thorn 			= 254; //Lowercase thorn þ
const char32 CHAR_y_UMLAUT			= 255; //Lowercase y with Diaeresis ÿ
const char32 CHAR_y_DIAERESIS		= 255; //Lowercase y with Diaeresis ÿ
