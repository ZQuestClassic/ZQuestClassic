#include "std_zh/std_constants.zh"
#include "std_zh/string/string_constants.zh"

/* 
Constants that define the keyboard layout. I need to check an EU and a US keyboard 
visually to verify if I set the proper symbols;  and I do not think that ZScript
can handle some symbols on the UK layout. 
*/

const int KEYBOARD_TYPE = 0; //0 == US, 1 == UK, 2 == EU/GR
const int KEYBOARD_LAYOUT_US = 0;
const int KEYBOARD_LAYOUT_UK = 1;
const int KEYBOARD_LAYOUT_EU = 2;

//Special Circumstance Characters to store in strings if needed. 
const char32 CHAR_ERROR 		= -1;
const char32 CHAR_BACKSPC 		= -2; 
const char32 CHAR_DELETE 		= -4; 
const char32 CHAR_HOMEKEY 		= -8;
const char32 CHAR_ENDKEY 		= -16;
const char32 CHAR_PAGEUP 		= -32;
const char32 CHAR_PAGEDOWN 	= -64;
const char32 CHAR_ARROW_U 		= -128;
const char32 CHAR_ARROW_L 		= -256;

const char32 CHAR_ARROW_D 		= -512;
const char32 CHAR_ARROW_R 		= -1024;
const char32 CHAR_PRINTSCREEN 	= -2048;
const char32 CHAR_PAUSE 		= -4096;

const char32 CHAR_NONE = 0;

//8192 for special modifiers?

const int ___KEY_TIMER = 255; //Index of ____STD_GRAM[]
// I think that an internal ZScript array Input->UserRAM[256] would be useful for this, as its pointer
// would never change. 
const float KEYBOARD_REPEAT_RATE = 6; //frames per keypress. 3 == 1/20 second
//const int SFX_KEYPRESS = 58; //Do we want this in the header?


//Checks if a key was pressed. If it was, it returns its char value. 
//Returns CHAR_NONE / false if key was not pressed.
char32 CheckKeyToChar(int key)
{
	if ( KeyPress(key) ) {
		return KeyToChar(key);
	}
	else return CHAR_NONE;
}

/*

These functions are meant to return ReadKey and Keypress, while setting the appropriate
input blockers. I would like to add bool Input->ReadingKeyboard, which while true, stops
key presses from being read as joystick inputs.

*/

//This should be a ZScript function, as Input->ReadKey() -Z
bool ReadKey(int key)
{
	//NoAction();
	return Input->KeyPress[key];
}

bool KeyPress(int key){ return Input->Key[key]; }

char32 GetKeyPress(int key)
{
	if ( Input->KeyPress[key] ) return KeyToChar(key);
	else return -1; //Is this safe? Should we return 0, which is null?
}

//Returns modifier keys
bool PressShift() { return (Input->ModifierKeys&KB_SHIFT_FLAG); }
bool PressControl(){ return (Input->ModifierKeys&KB_CTRL_FLAG); }
bool PressAlt(){ return (Input->ModifierKeys&KB_ALT_FLAG); }
bool CapsLock() { return (Input->ModifierKeys&KB_CAPSLOCK_FLAG); }
bool NumLock()  { return (Input->ModifierKeys&KB_NUMLOCK_FLAG); }
bool ScrollLock()  { return (Input->ModifierKeys&KB_SCROLOCK_FLAG); }
bool PressWin()  { return ((Input->ModifierKeys&KB_LWIN_FLAG)||(Input->ModifierKeys&KB_RWIN_FLAG)); }
bool PressRightWin()  { return (Input->ModifierKeys&KB_RWIN_FLAG); }
bool PressLeftWin()  { return (Input->ModifierKeys&KB_LWIN_FLAG); }
bool PressApple() { return (Input->ModifierKeys&KB_COMMAND_FLAG); }
bool PressCommand()  { return (Input->ModifierKeys&KB_COMMAND_FLAG); }
bool InAltSequence()  { return (Input->ModifierKeys&KB_INALTSEQ_FLAG); }
bool AccentShift(int n)  { return (Input->ModifierKeys&(KB_INALTSEQ_FLAG + <KeyModifierBitflags>((n-1)*0x1000)  )); }
bool PressAltGR() { return Input->Key[KEY_ALTGR]; }

//Is this Linux only?
bool PressLinuxMenu()  { return (Input->ModifierKeys&KB_MENU_FLAG); }

// Input->DisableKey[] can be used to disable F keys, aside from F7,F8,F9.
bool FKey(int f){ if ( f > 0 && f < 13 ) return Input->KeyPress[46+f]; else return false; }
bool EscKey() { return Input->KeyPress[KEY_ESC]; } 



//converts a key to its proper char (int, in ZScript).
char32 KeyToChar(int key) { return KeyToChar(key,(Input->ModifierKeys&KB_SHIFT_FLAG),(Input->ModifierKeys&KB_CAPSLOCK_FLAG)); }
//bool caps ==true : caps acts as shift, == false, standard
char32 KeyToChar(int key, bool shifted) { return KeyToChar(key,shifted,(Input->ModifierKeys&KB_CAPSLOCK_FLAG)); }

char32 KeyToChar(int key, bool shifted, bool caps)
{
	if ( shifted )
	{
		switch(key)
		{
			case KEY_A: return 'A';
			case KEY_B: return 'B';
			case KEY_C: return 'C';
			case KEY_D: return 'D';
			case KEY_E: return 'E';
			case KEY_F: return 'F';
			case KEY_G: return 'G';
			case KEY_H: return 'H';
			case KEY_I: return 'I';
			case KEY_J: return 'J';
			case KEY_K: return 'K';
			case KEY_L: return 'L';
			case KEY_M: return 'M';
			case KEY_N: return 'N';
			case KEY_O: return 'O';
			case KEY_P: return 'P';
			case KEY_Q: return 'Q';
			case KEY_R: return 'R';
			case KEY_S: return 'S';
			case KEY_T: return 'T';
			case KEY_U: return 'U';
			case KEY_V: return 'V';
			case KEY_W: return 'W';
			case KEY_X: return 'X';
			case KEY_Y: return 'Y';
			case KEY_Z: return 'Z';
		
			case KEY_1: return '!';
			case KEY_0: return ')';
			case KEY_2: 
			{
				switch(KEYBOARD_TYPE)
				{
					case KEYBOARD_LAYOUT_US: return '@';
					case KEYBOARD_LAYOUT_UK: return '"';
					case KEYBOARD_LAYOUT_EU: return '"';
				}
			}
			case KEY_3:
			{
				switch(KEYBOARD_TYPE)
				{
					case KEYBOARD_LAYOUT_US: return '#';
					case KEYBOARD_LAYOUT_UK: return CHAR_POUNDS;
					case KEYBOARD_LAYOUT_EU: return '#';
				}
			}
		
			case KEY_4:
			{
				switch(KEYBOARD_TYPE)
				{
					case KEYBOARD_LAYOUT_US: return '$';
					case KEYBOARD_LAYOUT_UK: return '$';
					case KEYBOARD_LAYOUT_EU: return CHAR_EURO;
				}
			}
			case KEY_5: return '%';
			case KEY_6: return '^';
			case KEY_7: return '&';
			case KEY_8: return '*';
			case KEY_9: return '(';
			case KEY_TILDE: return '~';
			case KEY_MINUS: return '_';
			case KEY_EQUALS: return '+';
			case KEY_BACKSPACE: return CHAR_BACKSPC; //-2 is backspace
			case KEY_TAB: return CHAR_TAB;
			case KEY_OPENBRACE: return '{';
			case KEY_CLOSEBRACE: return '}';
			case KEY_ENTER: return CHAR_CR;
			case KEY_COLON: return ':';
			case KEY_SEMICOLON: return ':';
			case KEY_QUOTE: 
			{
				switch(KEYBOARD_TYPE)
				{
					case KEYBOARD_LAYOUT_US: return '"';
					case KEYBOARD_LAYOUT_UK: return '@';
					case KEYBOARD_LAYOUT_EU: return '@';
				}
			}
			case KEY_BACKSLASH: return '|';
			case KEY_BACKSLASH2: return '|';
			case KEY_COMMA: return '<';
			case KEY_STOP: return '>';
			case KEY_SLASH: return '?';
			case KEY_SPACE: return ' ';
			case KEY_DEL: return CHAR_DELETE; //-4 is delete
			case KEY_HOME: return CHAR_HOMEKEY; //-8 is home
			case KEY_END: return CHAR_ENDKEY; //-16 is 'end'
			case KEY_PGUP: return CHAR_PAGEUP; //-32 
			case KEY_PGDN: return CHAR_PAGEDOWN; //-64
			case KEY_UP: return CHAR_ARROW_U; //ARROWS
			case KEY_LEFT: return CHAR_ARROW_L; //ARROWS
			case KEY_DOWN: return CHAR_ARROW_D; //ARROWS
			case KEY_RIGHT: return CHAR_ARROW_R; //ARROWS
			case KEY_SLASH_PAD: return '/';
			case KEY_ASTERISK: return '*';
			case KEY_MINUS_PAD: return '-';
			case KEY_PLUS_PAD: return '+';
			case KEY_DEL_PAD: return CHAR_DELETE;
			case KEY_ENTER_PAD: return CHAR_CR;
			case KEY_PRTSCR: return CHAR_PRINTSCREEN;
			case KEY_PAUSE: return CHAR_PAUSE;
			case KEY_CIRCUMFLEX: return '^';
			case KEY_COLON2: return ':';
			
			default: return CHAR_ERROR;
			
		}
			
	}
	//End modifier keys
	else //not shifted
	{
		
		{
			//otherwise no modifier
			switch(key)
			{
				case KEY_A: return ( caps ) ? 'A' : 'a';
				case KEY_B: return ( caps ) ? 'B' : 'b';
				case KEY_C: return ( caps ) ? 'C' : 'c';
				case KEY_D: return ( caps ) ? 'D' : 'd';
				case KEY_E: return ( caps ) ? 'E' : 'e';
				case KEY_F: return ( caps ) ? 'F' : 'f';
				case KEY_G: return ( caps ) ? 'G' : 'g';
				case KEY_H: return ( caps ) ? 'H' : 'h';
				case KEY_I: return ( caps ) ? 'I' : 'i';
				case KEY_J: return ( caps ) ? 'J' : 'j';
				case KEY_K: return ( caps ) ? 'K' : 'k';
				case KEY_L: return ( caps ) ? 'L' : 'l';
				case KEY_M: return ( caps ) ? 'M' : 'm';
				case KEY_N: return ( caps ) ? 'N' : 'n';
				case KEY_O: return ( caps ) ? 'O' : 'o';
				case KEY_P: return ( caps ) ? 'P' : 'p';
				case KEY_Q: return ( caps ) ? 'Q' : 'q';
				case KEY_R: return ( caps ) ? 'R' : 'r';
				case KEY_S: return ( caps ) ? 'S' : 's';
				case KEY_T: return ( caps ) ? 'T' : 't';
				case KEY_U: return ( caps ) ? 'U' : 'u';
				case KEY_V: return ( caps ) ? 'V' : 'v';
				case KEY_W: return ( caps ) ? 'W' : 'w';
				case KEY_X: return ( caps ) ? 'X' : 'x';
				case KEY_Y: return ( caps ) ? 'Y' : 'y';
				case KEY_Z: return ( caps ) ? 'Z' : 'z';
				
				case KEY_0: return '0';
				case KEY_0_PAD: return '0';
				case KEY_1: return '1'; 
				case KEY_1_PAD: return '1';
				case KEY_2: return '2';
				case KEY_2_PAD: return '2';
				case KEY_3: return '3';
				case KEY_3_PAD: return '3';
				case KEY_4: return '4';
				case KEY_4_PAD: return '4';
				case KEY_5: return '5';
				case KEY_5_PAD: return '5';
				case KEY_6: return '6';
				case KEY_6_PAD: return '6';
				case KEY_7: return '7';
				case KEY_7_PAD: return '7';
				case KEY_8: return '8';
				case KEY_8_PAD: return '8';
				case KEY_9: return '9';
				case KEY_9_PAD: return '9';
				
				case  KEY_TILDE:
				{
					switch(KEYBOARD_TYPE)
					{
						
						case KEYBOARD_LAYOUT_US:
						case KEYBOARD_LAYOUT_UK:
						case KEYBOARD_LAYOUT_EU:
						default:
							return '`';
					}
				}
				case  KEY_MINUS: return '-';
				case  KEY_EQUALS: return '=';
				case  KEY_BACKSPACE: return CHAR_BACKSPC; //-2 is backspace
				case  KEY_TAB: return CHAR_TAB;
				case  KEY_OPENBRACE: return '[';
				case  KEY_CLOSEBRACE: return ']';
				case  KEY_ENTER: return CHAR_LF;
				case  KEY_COLON: return ':';
				case  KEY_SEMICOLON: return ';';
				case  KEY_QUOTE:
				{
					switch(KEYBOARD_TYPE)
					{
						
						case KEYBOARD_LAYOUT_US:
						case KEYBOARD_LAYOUT_UK:
						case KEYBOARD_LAYOUT_EU:
						default:
							return '\'';
					}
				}
				case  KEY_BACKSLASH: return '\\';
				case  KEY_BACKSLASH2: return '\\';
				case  KEY_COMMA: return ',';
				case  KEY_STOP: return '.';
				case  KEY_SLASH: return '/';
				case  KEY_SPACE: return ' ';
				case  KEY_DEL: return CHAR_DELETE;  //-4 is delete
				case  KEY_HOME: return CHAR_HOMEKEY; //-8 is home
				case  KEY_END: return CHAR_ENDKEY;//-16 is 'end'
				case  KEY_PGUP: return CHAR_PAGEUP; //-32 
				case  KEY_PGDN: return CHAR_PAGEDOWN; //-64
				case  KEY_UP: return CHAR_ARROW_U; //ARROWS
				case  KEY_LEFT: return CHAR_ARROW_L; //ARROWS
				case  KEY_DOWN:return CHAR_ARROW_D; //ARROWS
				case  KEY_RIGHT: return CHAR_ARROW_R;//ARROWS
				case  KEY_SLASH_PAD: return '/'; //Start Numeric Pad 
				case  KEY_ASTERISK: return '*';
				case  KEY_MINUS_PAD: return '-';
				case  KEY_PLUS_PAD: return '+';
				case  KEY_DEL_PAD: return CHAR_DELETE;
				case  KEY_ENTER_PAD: return '\n';
				case  KEY_PRTSCR: return CHAR_PRINTSCREEN;
				case  KEY_PAUSE: return CHAR_PAUSE;
				case  KEY_CIRCUMFLEX: return '^';
				case  KEY_COLON2: return ':';
				default: return CHAR_ERROR;
			}
		}
	}
}
