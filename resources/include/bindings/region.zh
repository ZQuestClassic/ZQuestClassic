// Access with `Region->`.
class Region {
	// @delete
	internal Region();

	// @zasm_var REGION_ID
	internal const int ID;

	// The number of pixels horizontally. 256 per screen.
	//
	// @zasm_var REGION_WIDTH
	internal const int Width;

	// The number of pixels vertically. 176 per screen.
	//
	// @zasm_var REGION_HEIGHT
	internal const int Height;

	// The number of screens horizontally.
	//
	// @zasm_var REGION_SCREEN_WIDTH
	internal const int ScreenWidth;

	// The number of screens vertically.
	//
	// @zasm_var REGION_SCREEN_HEIGHT
	internal const int ScreenHeight;

	// The number of combo positions. 176 per screen.
	// This is the same as [NUM_COMBO_POS].
	//
	// @zasm_var REGION_NUM_COMBOS
	internal const int NumCombos;

	// The index of the top-left screen in the current region.
	// This is the same as [Game->CurScreen].
	//
	// @zasm_var REGION_ORIGIN_SCREEN
	internal const long OriginScreenIndex;

	// @zasm
	//   POP D2
	//   REGION_LOAD_TMPSCR_FOR_COMBO_POS D2
	internal mapdata LoadTempScreenForComboPos(int pos);

	// @zasm
	//   POP D2
	//   REGION_SCREEN_FOR_COMBO_POS D2
	internal int GetScreenIndexForComboPos(int pos);

	// Triggers secrets on the provided screen screen (temp only, so only makes
	// sense inside regions)
	//
	// @zasm
	//   POP D2
	//   REGION_TRIGGER_SECRETS D2
	internal void TriggerSecrets(int screen_index);
}

// The region the [Hero] is currently in.
//
// A region is a set of map screens that can be freely scrolled between.
// An region of 1 screen is technically still a region, but is referred to
// as a "non-scrolling region".
//
// The visible porition of the region currently visible is defined by the [Viewport].
internal const Region Region;
