// Used with [Screen->RoomType], [mapdata::RoomType].
enum RoomType
{
	RT_DOORREPAIR                  = 5,
	RT_FEEDTHEGORIYA               = 7,
	RT_GAMBLE                      = 4,
	RT_GANON                       = 15,
	RT_ITEMPOND                    = 17, // Doesn't work.
	RT_LEARNSLASH                  = 19,
	RT_LEVEL9ENTRANCE              = 8,
	RT_MAGICUPGRADE                = 18,
	RT_MONEYORLIFE                 = 12,
	RT_MOREARROWS                  = 20,
	RT_MOREBOMBS                   = 11,
	RT_NONE                        = 0,
	RT_PAYFORINFO                  = 2,
	RT_POTIONORHEART               = 6,
	RT_POTIONSHOP                  = 9,
	RT_SECRETMONEY                 = 3,
	RT_SHOP                        = 10,
	RT_SPECIALITEM                 = 1,
	RT_STAIRWARP                   = 14,
	RT_TAKEONEITEM                 = 21,
	RT_TENRUPEES                   = 13,
	RT_ZELDA                       = 16,
};

// Used with [mapdata::Door] and [Screen->Door].
enum DoorIndex
{
	DOOR_UP                        = 0,
	DOOR_DOWN                      = 1,
	DOOR_LEFT                      = 2,
	DOOR_RIGHT                     = 3,
};

// Used with [mapdata::Door] and [Screen->Door].
enum DoorType
{
	D_WALL                         = 0,
	D_OPEN                         = 1,
	D_LOCKED                       = 2,
	D_UNLOCKED                     = 3,  // A locked door that has been opened.
	D_SHUTTER                      = 4,  // Defeat enemies to unlock this door.
	D_BOMB                         = 6,  // A door that changes when bombed.
	D_BOMBED                       = 7,  // A door that has been bombed.
	D_WALKTHRU                     = 8,  // Push against the wall to pass through.
	D_BOSSLOCKED                   = 10,
	D_BOSSUNLOCKED                 = 11, // A boss door that has been opened.
	D_OPENSHUTTER                  = 12, // A shutter that has been opened.
	D_1WAYSHUTTER                  = 14, // A shutter that locks behind you and never opens.
	D_NONE                         = 16, // No door at all. Hero will not auto-walk.
};

// Used with [mapdata::FFCFlags].
@Bitflags("int")
enum FFCBitflags
{
	FFCBF_OVERLAY                  = 0x001,
	FFCBF_TRANS                    = 0x002,
	FFCBF_SOLID                    = 0x004,
	FFCBF_CARRYOVER                = 0x008,
	FFCBF_STATIONARY               = 0x010,
	FFCBF_CHANGER                  = 0x020,
	FFCBF_PRELOAD                  = 0x040,
	FFCBF_LENSVIS                  = 0x080,
	FFCBF_RESET                    = 0x100,
	FFCBF_ETHEREAL                 = 0x200,
	FFCBF_IGNOREHOLDUP             = 0x400,
	FFCBF_IGNORECHANGER            = 0x800,
	FFCBF_IMPRECISIONCHANGER       = 0x1000,
	FFCBF_LENSINVIS                = 0x2000,
};

// Used with [Screen->SecretCombo], [Screen->SecretCSet], [Screen->SecretFlags], and [mapdata].
enum SecretComboIndex
{
	SECCMB_BCANDLE                 = 0,
	SECCMB_ARROW                   = 1,
	SECCMB_BOMB                    = 2,
	SECCMB_STAIRS                  = 3,
	SECCMB_SECRET01                = 4,
	SECCMB_SECRET02                = 5,
	SECCMB_SECRET03                = 6,
	SECCMB_SECRET04                = 7,
	SECCMB_SECRET05                = 8,
	SECCMB_SECRET06                = 9,
	SECCMB_SECRET07                = 10,
	SECCMB_SECRET08                = 11,
	SECCMB_SECRET09                = 12,
	SECCMB_SECRET10                = 13,
	SECCMB_SECRET11                = 14,
	SECCMB_SECRET12                = 15,
	SECCMB_SECRET13                = 16,
	SECCMB_SECRET14                = 17,
	SECCMB_SECRET15                = 18,
	SECCMB_SECRET16                = 19,
	SECCMB_RCANDLE                 = 20,
	SECCMB_WANDFIRE                = 21,
	SECCMB_DINSFIRE                = 22,
	SECCMB_SARROW                  = 23,
	SECCMB_GARROW                  = 24,
	SECCMB_SBOMB                   = 25,
	SECCMB_BRANG                   = 26,
	SECCMB_MBRANG                  = 27,
	SECCMB_FBRANG                  = 28,
	SECCMB_WANDMAGIC               = 29,
	SECCMB_REFMAGIC                = 30,
	SECCMB_REFFIREBALL             = 31,
	SECCMB_SWORD                   = 32,
	SECCMB_WSWORD                  = 33,
	SECCMB_MSWORD                  = 34,
	SECCMB_XSWORD                  = 35,
	SECCMB_SWORDBEAM               = 36,
	SECCMB_WSWORDBEAM              = 37,
	SECCMB_MSWORDBEAM              = 38,
	SECCMB_XSWORDBEAM              = 39,
	SECCMB_HOOKSHOT                = 40,
	SECCMB_WAND                    = 41,
	SECCMB_HAMMER                  = 42,
	SECCMB_STRIKE                  = 43,
	SECCMB_SECRETSNEXT             = 44, // Only ->SecretFlags[] has a value for this index.
	SECCMB_MAX                     = 45,
};

// Used with [mapdata::NoCarry] and [screendata::NoCarry].
@Bitflags("int")
enum NoCarryBitflags
{
	NOCARRY_B_SECRET               = 0x2000,
	NOCARRY_B_ITEM                 = 0x0010,
	NOCARRY_B_SPECIALITEM          = 0x0020,
	NOCARRY_B_LOCKBLOCK            = 0x0100,
	NOCARRY_B_BOSSLOCKBLOCK        = 0x0200,
	NOCARRY_B_CHEST                = 0x0400,
	NOCARRY_B_LOCKEDCHEST          = 0x0800,
	NOCARRY_B_BOSSCHEST            = 0x1000,
};

// Used with [mapdata::NoReset] and [screendata::NoReset].
@Bitflags("int")
enum NoResetBitflags
{
	NORESET_B_SECRET               = 0x2000,
	NORESET_B_ITEM                 = 0x0010,
	NORESET_B_SPECIALITEM          = 0x0020,
	NORESET_B_LOCKBLOCK            = 0x0100,
	NORESET_B_BOSSLOCKBLOCK        = 0x0200,
	NORESET_B_CHEST                = 0x0400,
	NORESET_B_LOCKEDCHEST          = 0x0800,
	NORESET_B_BOSSCHEST            = 0x1000,
	NORESET_B_DOOR_B_UP            = 0x0001,
	NORESET_B_DOOR_B_DOWN          = 0x0002,
	NORESET_B_DOOR_B_LEFT          = 0x0004,
	NORESET_B_DOOR_B_RIGHT         = 0x0008,
};

//Screen states. Use these with [Screen->State], etc.
enum ScreenState
{
	ST_DOORUP             = 0, // The locked/bomb door has been permanently unlocked/bombed
	ST_DOORDOWN           = 1, // The locked/bomb door has been permanently unlocked/bombed
	ST_DOORLEFT           = 2, // The locked/bomb door has been permanently unlocked/bombed
	ST_DOORRIGHT          = 3, // The locked/bomb door has been permanently unlocked/bombed
	ST_ITEM               = 4, // If set, the item is gone
	ST_SPECIALITEM        = 5, // If set, the Cave/Item Cellar/Dive For Item/Armos item is gone
	ST_ENEMYNORETURN      = 6, // If set, enemies won't return
	ST_TEMPNORETURN       = 7, // If set, enemies won't return. This is automatically unset when you leave the DMap
	ST_LOCKBLOCK          = 8, // The lock block on the screen has been triggered
	ST_BOSSLOCKBLOCK      = 9, // The boss lock block on the screen has been triggered
	ST_CHEST              = 10, // The unlocked chest on this screen has been opened
	ST_LOCKEDCHEST        = 11, // The locked chest on this screen has been opened
	ST_BOSSCHEST          = 12, // The boss chest on this screen has been opened
	ST_SECRET             = 13, // Screen Secrets have been made permanent
	ST_VISITED            = 14, // If set, this screen will appear on the Overworld Map
	ST_LIGHTBEAM          = 15  // If set, the light triggers on the screen have been triggered
};

// Represents a single map screen.
//
// Depending on how the `mapdata` was loaded, it may represent different things.
//
// # Temporary screens
//
// A single temporary screen, aka a live reference to a currently loaded screen.
//
// Modifications to temporary screens are lost when a new region is loaded.
//
// Load via:
//
//   - [Game->LoadTempScreen] - the one that takes a screen and a layer parameter.
//     Loads from the current region.
//   - [Game->LoadTempScreenForComboPos] Loads from the current region.
//   - [Game->LoadScrollingScreen] - the one that takes a screen and a layer parameter.
//     Loads from the previous region, valid during scrolling only.
//
// # Temporary screens (whole-region)
//
// When representing every temporary screen in an active [Region], the combo array variables
// can access every position in a region, but variables representing values from a
// singular screen only read from the top-left screen (the origin screen) of the [Region].
// This is exactly like how [Screen] works.
//
// Load via:
//
//   - [Game->LoadTempScreen] - the one that takes just a layer
//   - [Game->LoadScrollingScreen] - the one that takes just a layer
//
// # Canonical screens
//
// The "official" copy of the mapdata. Temporary screens are copied from canonical screens
// when the player loads into a new region.
//
// Modifications to canonical screens will not update any associated temporary screens
// (until the next time the player loads that screen).
//
// Load via:
//
//  - [Game->LoadMapData]
//
// @tutorial /tutorials/z3_user_guide
// @zasm_ref REFMAPDATA
class mapdata {
	// @delete
	internal mapdata();

	// True if the screen is valid. Screens that appear with the default blue background
	// in the editor are invalid. Modifying a combo on a screen turns it valid.
	//
	// If a layer is invalid, it will not be drawn.
	//
	// @zasm_var MAPDATAVALID
	internal int Valid;

	// The screen's [Region] ID.
	//
	// May only be written to for canonical mapdata ([Game->LoadMapData]).
	//
	// @zasm_var MAPDATAREGIONID
	internal int RegionID;

	// The screen guy.
	//
	// @zasm_var MAPDATAGUY
	internal int Guy;

	// The screen string.
	//
	// @zasm_var MAPDATASTRING
	internal int String;

	// The special room type.
	//
	// @value [RoomType]
	// @zasm_var MAPDATAROOM
	internal int RoomType;

	// The item placed on the screen. -1 if no item placed.
	//
	// @zasm_var MAPDATAITEM
	internal int Item;

	// The Tile Warp type for Tile Warps A, B, C, and D; [0], [1], [2], and [3]
	// respectively.
	//
	// @value [WarpType]
	// @zasm_var MAPDATATILEWARPTYPE
	internal int TileWarpType[];

	// The screen script that runs on this screen.
	//
	// @zasm_var MAPDATASCRIPT
	internal int Script;

	// The 8 script arguments for the script that runs on this screen.
	//
	// @zasm_var MAPDATAINITDARRAY
	internal untyped InitD[];

	// Set or get the overlay state for the warp ID corresponding to the index
	// of this array.
	//
	// @zasm_var MAPDATATILEWARPOVFLAGS
	internal bool TileWarpOverlay[];

	// The Door Set used for the NES dungeon doors on this screen.
	//
	// @zasm_var MAPDATADOORCOMBOSET
	internal int DoorComboSet;

	// The X-component for each of the four 2.50+ (blue) warp return squares.
	//
	// @zasm_var MAPDATAWARPRETX
	internal int WarpReturnX[];

	// The Y-component for each of the four 2.50+ (blue) warp return squares.
	//
	// @zasm_var MAPDATAWARPRETY
	internal int WarpReturnY[];

	// The X/Y position of the 'Stairs' secret on the screen.
	//
	// @zasm_var MAPDATASTAIRX
	internal int StairsX;

	// The X/Y position of the 'Stairs' secret on the screen.
	//
	// @zasm_var MAPDATASTAIRY
	internal int StairsY;

	// The X/Y position the screen's item spawns at.
	//
	// @zasm_var MAPDATAITEMX
	internal int ItemX;

	// The X/Y position the screen's item spawns at.
	//
	// @zasm_var MAPDATAITEMY
	internal int ItemY;

	// The palette set in the F4 menu in ZQuest for this screen. Has no effect
	// during play, but can be read and written.
	//
	// @zasm_var MAPDATACOLOUR
	internal int Palette;

	// The 4 door states of the screen.
	//
	// @index [DoorIndex]
	// @value [DoorType]
	// @zasm_var MAPDATADOOR
	internal int Door[];

	// The destination DMap for each of the four warp types.
	//
	// @zasm_var MAPDATATILEWARPDMAP
	internal int TileWarpDMap[];

	// The destination screen for each of the four warp types.
	//
	// @zasm_var MAPDATATILEWARPSCREEN
	internal int TileWarpScreen[];

	// The Maze Path 'Exit Direction'.
	//
	// @zasm_var MAPDATAEXITDIR
	internal int ExitDir;

	// The 10 enemies that appear on this screen.
	//
	// @zasm_var MAPDATAENEMY
	internal int Enemy[];

	// The spawn pattern for the screen enemies.
	//
	// @value [EnemyPattern]
	// @zasm_var MAPDATAPATTERN
	internal int Pattern;

	// The Sidewarp type for Sidewarps A, B, C, and D; [0], [1], [2], and [3]
	// respectively.
	//
	// @value [WarpType]
	// @zasm_var MAPDATASIDEWARPTYPE
	internal int SideWarpType[];

	// Set or get the overlay state for the warp ID corresponding to the index
	// of this array.
	//
	// @zasm_var MAPDATASIDEWARPOVFLAGS
	internal int SideWarpOverlay[];

	// The X-component for the pre-2.50 (green) arrival square.
	//
	// @zasm_var MAPDATAWARPARRIVALX
	internal int WarpArrivalX;

	// The X-component for the pre-2.50 (green) arrival square.
	//
	// @zasm_var MAPDATAWARPARRIVALY
	internal int WarpArrivalY;

	// The four directions you must go for the maze path.
	//
	// @length 4
	// @value [DIR_UP], [DIR_DOWN], [DIR_LEFT], [DIR_RIGHT]
	// @zasm_var MAPDATAPATH
	internal int MazePath[];

	// The destination screen for each of the four sidewarps.
	//
	// @zasm_var MAPDATASIDEWARPSC
	internal int SideWarpScreen[];

	// The sidewarp ID for each screen edge.
	//
	// [SIDEWARP_NONE] if there is no sidewarp in that direction.
	//
	// @index [DIR_UP], [DIR_DOWN], [DIR_LEFT], [DIR_RIGHT]
	// @value [SideWarpIndex]
	// @zasm_var MAPDATASIDEWARPID
	internal int SideWarpID[];

	// The return square used by the Tile Warp (A, B, C, D).
	//
	// @zasm_var MAPDATATWARPRETSQR
	internal int TileWarpReturnSquare[];

	// The return square used by the Side Warp (A, B, C, D).
	//
	// @zasm_var MAPDATASWARPRETSQR
	internal int SideWarpReturnSquare[];

	// The destination DMap for each of the four sidewarps.
	//
	// @zasm_var MAPDATASIDEWARPDMAP
	internal int SideWarpDMap[];

	// The screen's undercombo, which will appear as a result of various combo
	// interactions, such as pushing blocks, awakening armos, etc.
	//
	// @zasm_var MAPDATAUNDERCOMBO
	internal int UnderCombo;

	// The CSet associated with the undercombo.
	//
	// @zasm_var MAPDATAUNDERCSET
	internal int UnderCSet;

	// The screen's 'catchall' value. This is the roomtype-specific data, such
	// as the 'Special Item' in a 'Special Item' room.
	//
	// @zasm_var MAPDATACATCHALL
	internal int Catchall;

	// The value of damage combo sensitivity for the screen.
	//
	// @zasm_var MAPDATACSENSITIVE
	internal int CSensitive;

	// The `No Reset` carryover flags.
	//
	// @zasm_var MAPDATANORESET
	internal int NoReset;

	// The `No Carry Over` carryover flags.
	//
	// @zasm_var MAPDATANOCARRY
	internal int NoCarry;

	// The map and screen for each layer. Index [0] of these arrays does
	// nothing, and is invalid to access.
	//
	// @zasm_var MAPDATALAYERMAP
	internal int LayerMap[];

	// The map and screen for each layer. Index [0] of these arrays does
	// nothing, and is invalid to access.
	//
	// @zasm_var MAPDATALAYERSCREEN
	internal int LayerScreen[];

	// The opacity value (`OP_OPAQUE` or `OP_TRANS`) for each layer. Index [0]
	// does nothing, and is invalid to access.
	//
	// @zasm_var MAPDATALAYEROPACITY
	internal int LayerOpacity[];

	// If true, the given layer is invisible and will not be drawn.
	//
	// @zasm_var MAPDATALAYERINVIS
	internal bool LayerInvisible[];

	// If false, the given layer of script draws will be disabled. Only applies
	// if this screen is the origin screen of the current [Region].
	//
	// @zasm_var MAPDATASCRIPTDRAWS
	internal bool ScriptDraws[];

	// The timer used by 'Time Warp Tics' in Screen Data->T.Warp
	//
	// @zasm_var MAPDATATIMEDWARPTICS
	internal int TimedWarpTimer;

	// The map and screen that screen states carry over to.
	//
	// @zasm_var MAPDATANEXTMAP
	internal int NextMap;

	// The map and screen that screen states carry over to.
	//
	// @zasm_var MAPDATANEXTSCREEN
	internal int NextScreen;

	// The combo that will be placed for each secret type.
	//
	// @zasm_var MAPDATASECRETCOMBO
	internal int SecretCombo[];

	// The cset that will be placed for each secret type.
	//
	// @zasm_var MAPDATASECRETCSET
	internal int SecretCSet[];

	// The screen flags that will be placed for each secret type.
	//
	// @zasm_var MAPDATASECRETFLAG
	internal int SecretFlags[];

	// The Data (combo ID) variable for each of the ffcs on the screen.
	//
	// See [ffc::Data] for more details.
	//
	// If this `mapdata` was loaded via [Game->LoadTempScreen] and layer 0,
	// this array and the other FFC arrays reference the live FFCs.
	//
	// @zasm_var MAPDATAFFDATA
	internal int FFCData[];

	// The CSet variable for each of the ffcs on the screen.
	//
	// See [ffc::CSet] for more details.
	//
	// @zasm_var MAPDATAFFCSET
	internal int FFCCSet[];

	// The Delay variable for each of the ffcs on the screen.
	//
	// See [ffc::Delay] for more details.
	//
	// @zasm_var MAPDATAFFDELAY
	internal int FFCDelay[];

	// The X variable for each of the ffcs on the screen.
	//
	// See [ffc::X] for more details.
	//
	// @zasm_var MAPDATAFFX
	internal int FFCX[];

	// The Y variable for each of the ffcs on the screen.
	//
	// See [ffc::Y] for more details.
	//
	// @zasm_var MAPDATAFFY
	internal int FFCY[];

	// The Vx variable for each of the ffcs on the screen.
	//
	// See [ffc::Vx] for more details.
	//
	// @zasm_var MAPDATAFFXDELTA
	internal int FFCVx[];

	// The Vy variable for each of the ffcs on the screen.
	//
	// See [ffc::Vy] for more details.
	//
	// @zasm_var MAPDATAFFYDELTA
	internal int FFCVy[];

	// The Ax variable for each of the ffcs on the screen.
	//
	// See [ffc::Ax] for more details.
	//
	// @zasm_var MAPDATAFFXDELTA2
	internal int FFCAx[];

	// The Vy variable for each of the ffcs on the screen.
	//
	// See [ffc::Vy] for more details.
	//
	// @zasm_var MAPDATAFFYDELTA2
	internal int FFCAy[];

	// The Flags variable for each of the ffcs on the screen.
	//
	// See [ffc::Flags] for more details.
	//
	// @zasm_var MAPDATAFFFLAGS
	internal int FFCFlags[];

	// The EffectWidth variable for each of the ffcs on the screen.
	//
	// See [ffc::EffectWidth] for more details.
	//
	// @zasm_var MAPDATAFFEFFECTWIDTH
	internal int FFCEffectWidth[];

	// The EffectHeight variable for each of the ffcs on the screen.
	//
	// See [ffc::EffectHeight] for more details.
	//
	// @zasm_var MAPDATAFFEFFECTHEIGHT
	internal int FFCEffectHeight[];

	// The TileWidth variable for each of the ffcs on the screen.
	//
	// See [ffc::TileWidth] for more details.
	//
	// @zasm_var MAPDATAFFWIDTH
	internal int FFCTileWidth[];

	// The TileHeighr variable for each of the ffcs on the screen.
	//
	// See [ffc::TileHeight] for more details.
	//
	// @zasm_var MAPDATAFFHEIGHT
	internal int FFCTileHeight[];

	// The Link variable for each of the ffcs on the screen.
	//
	// See [ffc::Link] for more details.
	//
	// @zasm_var MAPDATAFFLINK
	internal int FFCLink[];

	// The Script variable for each of the ffcs on the screen.
	//
	// See [ffc::Script] for more details.
	//
	// @zasm_var MAPDATAFFSCRIPT
	internal int FFCScript[];

	// The SFX for the ambient sound of the screen.
	//
	// @zasm_var MAPDATAOCEANSFX
	internal int AmbientSFX;

	// The SFX for the boss roar on this screen.
	//
	// @zasm_var MAPDATABOSSSFX
	internal int BossSFX;

	// The SFX that will play when secrets are triggered on this screen.
	//
	// @zasm_var MAPDATASECRETSFX
	internal int SecretSFX;

	// The SFX that will play when an item is held up on this screen.
	//
	// @zasm_var MAPDATAHOLDUPSFX
	internal int ItemSFX;

	// The 'Screen MIDI' to play for this screen.
	//
	// @zasm_var MAPDATASCREENMIDI
	internal int MIDI;

	// Multiple bitflags, split into groups.
	//
	// @index [ScreenFlagGroup]
	// @value Varies based on [ScreenFlagGroup]
	// @zasm_var MAPDATAFLAGS
	internal int Flags[];

	// Multiple bitflags related to screen enemies, split into groups.
	//
	// @index [ScreenEnemyFlagGroup]
	// @value Varies based on [ScreenEnemyFlagGroup]
	// @zasm_var MAPDATASCREENEFLAGSD
	internal const int EFlags[];

	// The Combo ID placed at each position on the screen.
	//
	// If this is a temporary screen loading with `Game->LoadTempScreen(layer)`, then this allows access to every combo in the current region.
	//
	// @zasm_var MAPDATACOMBODD
	internal int ComboD[];

	// The CSet of the combo placed at each position on the screen.
	//
	// If this is a temporary screen loading with `Game->LoadTempScreen(layer)`, then this allows access to every combo in the current region.
	//
	// @zasm_var MAPDATACOMBOCD
	internal int ComboC[];

	// The mapflag placed at each position on the screen.
	//
	// If this is a temporary screen loading with `Game->LoadTempScreen(layer)`, then this allows access to every combo in the current region.
	//
	// @zasm_var MAPDATACOMBOFD
	internal int ComboF[];

	// The inherent flag of the combo placed at each position on the screen.
	//
	// If this is a temporary screen loading with `Game->LoadTempScreen(layer)`, then this allows access to every combo in the current region.
	//
	// @zasm_var MAPDATACOMBOID
	internal int ComboI[];

	// The combo type of the combo placed at each position on the screen.
	//
	// If this is a temporary screen loading with `Game->LoadTempScreen(layer)`, then this allows access to every combo in the current region.
	//
	// @zasm_var MAPDATACOMBOTD
	internal int ComboT[];

	// The solidity map of the combo placed at each position on the screen.
	//
	// If this is a temporary screen loading with `Game->LoadTempScreen(layer)`, then this allows access to every combo in the current region.
	//
	// @zasm_var MAPDATACOMBOSD
	internal int ComboS[];

	// The effect map of the combo placed at each position on the screen.
	//
	// If this is a temporary screen loading with `Game->LoadTempScreen(layer)`, then this allows access to every combo in the current region.
	//
	// @zasm_var MAPDATACOMBOED
	internal int ComboE[];

	// The screen states used for this screen.
	//
	// @index [ScreenState]
	// @zasm_var MAPDATASCREENSTATED
	internal bool State[];

	// The 32 'Extra States' used for this screen.
	//
	// @zasm_var MAPDATAEXSTATED
	internal bool ExState[];

	// Returns the map this mapdata points to.
	//
	// @zasm_var MAPDATAMAP
	internal const int Map;

	// Returns the screen this mapdata points to.
	//
	// @zasm_var MAPDATASCREEN
	internal const int Screen;

	// Arrays of the 7 layer show/hide values for the lens of truth.
	//
	// @zasm_var MAPDATALENSSHOWS
	internal bool LensShows[];

	// Arrays of the 7 layer show/hide values for the lens of truth.
	//
	// @zasm_var MAPDATALENSHIDES
	internal bool LensHides[];

	// Read-write, the size of the [Data] array.
	//
	// @zasm_var MAPDATASCRDATASIZE
	internal int DataSize;

	// Resizable array of data for scripts to use. All changes are saved to the
	// save file.
	//
	// @zasm_var MAPDATASCRDATA
	internal untyped Data[];

	// Number of enemies remaining alive on this screen.
	//
	// @zasm_var MAPDATAGUYCOUNT
	internal int GuyCount;

	// Returns true if the specified ffc is running a script?
	//
	// May be used to pause/resume ffc script execution?
	//
	// This needs to be cloned over to ffc->Running
	//
	// @zasm_var MAPDATAFFINITIALISED
	internal bool FFCRunning[];

	// The 'Ambient Sound' under S.Data2.
	//
	// Rename this to AmbientSFX, or just SFX.
	//
	// @zasm_var MAPDATAOCEANSFX
	internal int OceanSFX;

	// The screen palette.
	//
	// @zasm_var MAPDATACOLOUR
	internal int CSet;

	// @zasm_var MAPDATANEXTMAP
	internal int CarryoverMap;

	// @zasm_var MAPDATANEXTSCREEN
	internal const int CarryoverScreen;

	// Improperly implemented. Was meant to relate as Screen->D, except that
	//
	// Screen->D is not bound to layermap.
	//
	// @deprecated mapdata->D[] has never worked!
	// @zasm_var MAPDATAMISCD
	internal untyped D[];

	// If not zero, then the item for this screen is shown.
	//
	// @deprecated Use `Item > -1` instead!
	// @zasm_var MAPDATAHASITEM
	internal int HasItem;

	// @deprecated Use [Flags] instead!
	// @zasm_var MAPDATASCREENFLAGSD
	internal const int SFlags[];

	// Stores the information on warp returns, bitwise.
	//
	// The bits are `DDCCBBAADDCCBBAA`, where the left section is sidewarp
	// returns, and the right is tilewarp returns.
	//
	// @deprecated Use `SideWarpReturnSquare[4]` and `TileWarpReturnSquare[4]`!
	// @zasm_var MAPDATAWARPRETURNC
	internal int WarpReturnC;

	// Bitflags for enemies on the screen (E.Flags).
	//
	// @deprecated Use [EFlags] instead!
	// @zasm_var MAPDATAENEMYFLAGS
	internal int EnemyFlags;

	// The warp return IDs.
	//
	// @deprecated by [SideWarpID].
	// @zasm_var MAPDATASIDEWARPINDEX
	internal int SideWarpIndex;

	// @deprecated Use [Hero->RespawnX] instead!
	// @zasm_var MAPDATAENTRYX
	internal int EntryX;

	// @deprecated Use [Hero->RespawnY] instead!
	// @zasm_var MAPDATAENTRYY
	internal int EntryY;

	// @deprecated
	// @zasm_var MAPDATANUMFF
	internal const bool NumFFCs[];

	// @deprecated
	// @zasm_var MAPDATALENSLAYER
	internal int LensLayer;

	// Returns true if the given x,y position on the screen is 'solid'.
	//
	// @zasm
	//   POP D1
	//   POP D0
	//   POP REFMAPDATA
	//   MAPDATAISSOLID D2
	internal bool isSolid(int x, int y);

	// Returns true if the given x,y position on the screen is 'solid'.
	//
	// @zasm
	//   POP D2
	//   POP D1
	//   POP D0
	//   POP REFMAPDATA
	//   MAPDATAISSOLIDLYR D2
	internal bool isSolidLayer(int x, int y, int layer);

	// Returns the value of InitD[n] for the ffc on the screen with an ID of
	// ffc_index.
	//
	// This needs to be converted to the type 'untyped' to comply with the
	// change of float ffc->InitD[] to untyped ffc->InitD[]
	//
	// @zasm
	//   POP D1
	//   POP D0
	//   POP REFMAPDATA
	//   SETR D2 MAPDATAINTID
	internal untyped GetFFCInitD(int ffc_index, int n);

	// Sets the value of InitD[n] for the ffc on the screen with an ID of
	// ffc_index.
	//
	// 'int value' needs to be converted to the type 'untyped' to comply with
	// the change of float ffc->InitD[] to untyped ffc->InitD[]
	//
	// @zasm
	//   POP D6
	//   POP D1
	//   POP D0
	//   POP REFMAPDATA
	//   SETR MAPDATAINTID D6
	internal void SetFFCInitD(int ffc_index, int n, untyped value);

	// Returns a door state for the screen.
	//
	// @zasm
	//   PEEKATV REFMAPDATA 0.0002
	//   SETR D2 MAPDATAEXDOOR
	//   POPARGS D5 0.0003
	internal bool GetExDoor(int dir, int index);

	// Sets a door state for the screen.
	//
	// @zasm
	//   POP D2
	//   PEEKATV REFMAPDATA 0.0002
	//   SETR MAPDATAEXDOOR D2
	//   POPARGS D5 0.0003
	internal void SetExDoor(int dir, int index, bool state);
}
