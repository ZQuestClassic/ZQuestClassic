#include "bindings/sprite.zh"

// Weapons active on the screen from the hero. See [Screen->LoadLWeapon] and [Screen->CreateLWeapon].
//
// @zasm_ref REFLWPN
// @extends sprite
class lweapon {
	// @delete
	internal lweapon();

	// The weapon type of the weapon. Some types have hardcoded behaviors.
	//
	// @zasm_var LWPNID
	internal int ID;

	// The weapon type of the weapon. Some types have hardcoded behaviors. Same as [ID].
	//
	// @zasm_var LWPNID
	internal int Type;

	// The weapon type of the weapon. Some types have hardcoded behaviors. Same as [ID].
	//
	// @zasm_var LWPNID
	internal int Family;

	// The special info for the lweapon.
	//
	// Used by wind lweapons, instead of Level, to determine their effects.
	//
	// @zasm_var LWPNSPECIAL
	internal int Special;

	// Returns the max number of weapons currently allowed.
	//
	// @zasm_var SPRITEMAXLWPN
	internal int Max;

	// The angle of the weapon, in radians for Angle or degrees for DegAngle.
	// Has no real effect if the weapon is not `Angular`.
	//
	// @zasm_var LWPNANGLE
	internal int Angle;

	// The movement speed of the weapon, in 100th's/pixel per frame.
	//
	// @zasm_var LWPNSTEP
	internal int Step;

	// The number of frames in the weapon's animation.
	//
	// @zasm_var LWPNFRAMES
	internal int NumFrames;

	// The current frame number that the animation is on.
	//
	// @zasm_var LWPNFRAME
	internal int Frame;

	// The amount of damage the weapon deals.
	//
	// @zasm_var LWPNPOWER
	internal int Power;

	// The amount of damage the weapon deals.
	//
	// @zasm_var LWPNPOWER
	internal int Damage;

	// If the weapon is angular (instead of directional)
	//
	// @zasm_var LWPNANGULAR
	internal bool Angular;

	// If true, the weapon's sprite will draw behind the [Hero] and enemies.
	//
	// @zasm_var LWPNBEHIND
	internal bool Behind;

	// The speed of the animation, in frames per frame.
	//
	// @zasm_var LWPNASPEED
	internal int ASpeed;

	// The secondary CSet used for flashing.
	//
	// @zasm_var LWPNFLASHCSET
	internal int FlashCSet;

	// The deadstate of the weapon, denoted by the [WeaponDeadState] (`WDS_`) constants.
	//
	// @zasm_var LWPNDEAD
	internal int DeadState;

	// If the weapon is flashing or not. When flashing, it changes between its
	// CSet and FlashCSet.
	//
	// @zasm_var LWPNFLASH
	internal bool Flash;

	// The starting tile of the weapon's animation.
	//
	// @zasm_var LWPNOTILE
	internal int OriginalTile;

	// The starting cset of the weapon.
	//
	// @zasm_var LWPNOCSET
	internal int OriginalCSet;

	// the weapon's total visual Y-offset.
	//
	// @zasm_var LWPNTOTALDYOFFS
	internal const int TotalDYOffset;

	// If the weapon's collision is enabled. Set to false to disable collision
	// entirely.
	//
	// @zasm_var LWPNCOLLDET
	internal bool CollDetection;

	// The ID of the item that created this weapon.
	//
	// Weapons created by script have a default Parent of -1 (lweapon) and
	// <npc>-0.0001 (eweapon).
	//
	// For lweapons, this value determines what item editor index to read item
	// flags from.
	//
	// Setting it to an item of a class that does not normally generate the
	// given weapon type may have unexpected effects.
	//
	// @zasm_var LWPNPARENT
	internal int Parent;

	// For lweapons, the level of the weapon.
	//
	// @zasm_var LWPNLEVEL
	internal int Level;

	// The weapon script running on this weapon.
	//
	// @zasm_var LWPNSCRIPT
	internal int Script;

	// The UseWeapon property for this weapon.
	//
	// If set to a value greater than 0, all collisions with npcs will use this
	// as if it was the weapon's ID for calculating the defense value for it.
	//
	// e.g., if a LW_MAGIC weapon is set to a Weapon of LW_BRANG, when it
	// collides with an npc, the npc will use Defense[LW_BRANG] to resolve its
	// effects.
	//
	// Some weapons will also trigger map flags, and screen combos as if the
	// natural weapon was the value set as ->Weapon.,
	//
	// e.g. If you set a LW_BRANG weapon to a ->Weapon of LW_SWORD, it will cut
	// bushes.
	//
	// @zasm_var LWPNUSEWEAPON
	internal int Weapon;

	// The default defense value for this weapon.
	//
	// If set greater than 0, then when this weapon collides with an npc, if
	// that npc has its Defense[n] value set to NONE for this weapon's type, it
	// will resolve using this Defense value (e.g. Stun).
	//
	// @zasm_var LWPNUSEDEFENCE
	internal int Defense;

	// The 8 InitD[] arguments for the weapon script.
	//
	// @zasm_var LWPNINITD
	internal untyped InitD[];

	// A bitwise flagset of unblockable flags, using the `UNBLOCK_` constants.
	//
	// @zasm_var LWPNUNBL
	internal int Unblockable;

	// If > 0, ticks down each frame. When ticking down to 0, kills the weapon.
	//
	// @zasm_var LWPNTIMEOUT
	internal int Timeout;

	// The angle of the weapon, in radians for Angle or degrees for DegAngle.
	// Has no real effect if the weapon is not `Angular`.
	//
	// @zasm_var LWPNDEGANGLE
	internal int DegAngle;

	// The velocity on the X or Y axis. Setting these will make the weapon
	// Angular if it isn't already, and will adjust the weapon's Angle and Step
	// speed.
	//
	// @zasm_var LWPNVX
	internal int Vx;

	// The velocity on the X or Y axis. Setting these will make the weapon
	// Angular if it isn't already, and will adjust the weapon's Angle and Step
	// speed.
	//
	// @zasm_var LWPNVY
	internal int Vy;

	// If true, the weapon's 'Rotation' will be automatically set based on its
	// Angle.
	//
	// @zasm_var LWPNAUTOROTATE
	internal bool AutoRotate;

	// A set of weapon flags.
	//
	// Valid indices: [WeaponFlagIndex] (`WFLAG_`).
	//
	// @zasm_var LWPNFLAGS
	internal bool Flags[];

	// If `> -1`, this item will be spawned when the weapon dies.
	//
	// @zasm_var LWPNDEATHITEM
	internal int DeathItem;

	// If `> -1`, this item dropset will be rolled for a drop when the weapon
	// dies.
	//
	// @zasm_var LWPNDEATHDROPSET
	internal int DeathDropset;

	// The [itemsprite::Pickup] to use for the item dropped via `DeathItem` or
	// `DeathDropset`.
	//
	// @zasm_var LWPNDEATHIPICKUP
	internal int DeathItemPFlags;

	// If `> -1`, display this Sprite Data sprite when the weapon dies.
	//
	// @zasm_var LWPNDEATHSPRITE
	internal int DeathSprite;

	// If `> 0`, this SFX will be played when the weapon dies.
	//
	// @zasm_var LWPNDEATHSFX
	internal int DeathSFX;

	// @zasm_var LWPNLIFTLEVEL
	internal int LiftLevel;

	// The time it takes to lift this weapon via engine lifting.
	//
	// @zasm_var LWPNLIFTTIME
	internal int LiftTime;

	// The height to lift this weapon to via engine lifting.
	//
	// @zasm_var LWPNLIFTHEIGHT
	internal int LiftHeight;

	// Various sprites used by the weapon.
	//
	// @zasm_var LWPNSPRITES
	internal int Sprites[];

	// The burning light radii associated with sprites of the weapon.
	//
	// Valid indices: [WeaponSpriteIndex] (`WPN_SPRITE_`).
	//
	// @zasm_var LWPNBURNLIGHTRADIUS
	internal int BurnLightRadius[];

	// @deprecated
	// @zasm_var LWEAPONSCRIPTUID
	internal const int UID;

	// Returns the max number of weapons currently allowed.
	//
	// @deprecated Use [Max]' instead!
	// @zasm
	//   POP REFLWPN
	//   SETR D2 SPRITEMAXLWPN
	internal int Max();

	// Sets the max number of weapons allowed to a new value. Range `1-1024`.
	//
	// @deprecated Use [Max]' instead!
	// @zasm
	//   POP D2
	//   POP REFLWPN
	//   SETR SPRITEMAXLWPN D2
	internal void Max(int value);

	// Returns true if this pointer points to a valid weapon. If this returns
	// false, using any other value of this pointer will error.
	//
	// @zasm
	//   POP D2
	//   ISVALIDLWPN D2
	internal bool isValid();

	// Loads the graphical information from the [spritedata] indicated by
	// [spriteid].
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   SETR REFLWPN D3
	//   LWPNUSESPRITER D2
	internal void UseSprite(int spriteid);

	// Creates an explosion particle effect in mode 0, 1, or 2 of the sprite.
	//
	// @zasm
	//   POP D2
	//   POP REFLWPN
	//   LWEAPONEXPLODER D2
	internal void Explode(int mode);

	// Instantly deletes the weapon.
	//
	// @zasm
	//   POP REFLWPN
	//   LWPNDEL
	internal void Remove();

	// Switch the [Hero] with this sprite.
	//
	// Valid values for [effect]: [SwitchEffect] (`SW_EFF_`).
	//
	// @zasm
	//   POP D2
	//   POP REFLWPN
	//   SWITCHLW D2
	internal bool Switch(int effect);

	// If the weapon is not Angular, makes it Angular, and sets its Angle based
	// on its Dir.
	//
	// @zasm
	//   POP D2
	//   LWPNMAKEANGULAR D2
	internal bool MakeAngular();

	// If the weapon is Angular, makes it not Angular, and sets its Dir based
	// on its Angle.
	//
	// @zasm
	//   POP D2
	//   LWPNMAKEDIRECTIONAL D2
	internal bool MakeDirectional();

	// Grants 'Ownership' of the parameter object to the weapon.
	//
	// @zasm
	//   POP D2
	//   POP REFLWPN
	//   OBJ_OWN_BITMAP D2 0.0006
	internal void Own(bitmap b);

	// Grants 'Ownership' of the parameter object to the weapon.
	//
	// @zasm
	//   POP D2
	//   POP REFLWPN
	//   OBJ_OWN_PALDATA D2 0.0006
	internal void Own(paldata b);

	// Grants 'Ownership' of the parameter object to the weapon.
	//
	// @zasm
	//   POP D2
	//   POP REFLWPN
	//   OBJ_OWN_FILE D2 0.0006
	internal void Own(file b);

	// Grants 'Ownership' of the parameter object to the weapon.
	//
	// @zasm
	//   POP D2
	//   POP REFLWPN
	//   OBJ_OWN_DIR D2 0.0006
	internal void Own(directory b);

	// Grants 'Ownership' of the parameter object to the weapon.
	//
	// @zasm
	//   POP D2
	//   POP REFLWPN
	//   OBJ_OWN_STACK D2 0.0006
	internal void Own(stack b);

	// Grants 'Ownership' of the parameter object to the weapon.
	//
	// @zasm
	//   POP D2
	//   POP REFLWPN
	//   OBJ_OWN_RNG D2 0.0006
	internal void Own(randgen b);

	// Grants 'Ownership' of the parameter object to the weapon.
	//
	// @zasm
	//   POP D2
	//   POP REFLWPN
	//   OBJ_OWN_ARRAY D2 0.0006
	internal void OwnArray(untyped array);

	// Grants 'Ownership' of the parameter object to the weapon.
	//
	// @zasm
	//   POP D2
	//   POP REFLWPN
	//   OBJ_OWN_CLASS D2 0.0006
	internal void OwnObject(untyped object);
}
