// Base class for (most) script-exposed engine sprites.
// @zasm_ref REFSPRITE
class sprite {
	// @delete
	internal sprite();

	// @zasm_var SPRITE_X
	internal int X;

	// @zasm_var SPRITE_Y
	internal int Y;

	// @zasm_var SPRITE_Z
	internal int Z;

	// The position of the sprite on the fake Z axis. This value is treated as a second,
	// separate Z axis.
	//
	// Sprites are offset upwards by this amount when drawn just like the Z
	// axis and shadows will draw if applicable.
	//
	// However, the sprite's hitbox is not moved upwards in the Z Axis. Instead,
	// it is moved upwards on the Y axis, mimicking how Vires and Pols Voice
	// worked in the original Zelda.
	//
	// This value is affected by [FakeJump] instead of [Jump].
	//
	// @zasm_var SPRITE_FAKE_Z
	internal int FakeZ;

	// The visual offset, in pixels. Defaults to 0.
	//
	// [ffc]: currently not supported.
	//
	// @zasm_var SPRITE_X_OFFSET
	internal int DrawXOffset;

	// The visual offset, in pixels. Defaults to 0.
	//
	// [ffc]: currently not supported.
	//
	// @zasm_var SPRITE_Y_OFFSET
	internal int DrawYOffset;

	// The Z offset, in pixels.
	//
	// [ffc]: currently not supported.
	//
	// @zasm_var SPRITE_Z_OFFSET
	internal int DrawZOffset;

	// Rotation of the sprite draw, in degrees.
	//
	// Does nothing if the QR 'Old (Faster) Sprite Drawing' is enabled.
	//
	// [ffc]: currently not supported.
	//
	// @zasm_var SPRITE_ROTATION
	internal int Rotation;

	// The direction that the sprite is facing. Used by certain weapon types
	// to determine movement, shield deflection and such.
	//
	// Valid values: [Direction] (`DIR_`).
	//
	// @zasm_var SPRITE_DIR
	internal int Dir;

	// The currently displaying tile of the sprite's animation. Set by the
	// engine each frame if [Animation] is enabled.
	//
	// [ffc]: Not used - set [ffc::Data] to the desired combo instead.
	//
	// @zasm_var SPRITE_TILE
	internal int Tile;

	// If >-1, this tile is displayed by the engine, regardless of the normal engine animation.
	// Set back to -1 to restore engine animation.
	// Defaults to -1.
	//
	// [ffc]: currently not supported.
	//
	// @zasm_var SPRITE_SCRIPT_TILE
	internal int ScriptTile;

	// If the sprite should be extended (large). Set to 3 to extend, 0
	// otherwise.
	//
	// [ffc], [Hero]: Not used.
	//
	// @zasm_var SPRITE_EXTEND
	internal int Extend;

	// The width of the sprite's graphic, in tiles. Visual only. The upper-left corner is the first tile.
	//
	// Must set [Extend] to 3 to use (except for [fcc]).
	//
	// Max value is 20.
	//
	// [ffc]: max value is 4.
	// [Hero]: Not used.
	//
	// @zasm_var SPRITE_TILE_W
	internal int TileWidth;

	// The height of the sprite's graphic, in tiles. Visual only. The upper-left corner is the first tile.
	//
	// Must set [Extend] to 3 to use (except for [fcc]).
	//
	// Max value is 20.
	//
	// [ffc]: max value is 4.
	// [Hero]: Not used.
	//
	// @zasm_var SPRITE_TILE_H
	internal int TileHeight;

	// [Hero]: This changes when the player is hurt and flashing. Writing to this does nothing,
	// as the player cset is updated by the engine every frame - use [Hero->ScriptCSet] instead.
	//
	// @zasm_var SPRITE_CSET
	internal int CSet;

	// The multiplier for scaling the sprite draw.
	//
	// Scale values are a multiplier: 1.5 == 50% larger (150%).
	// A scale of 0 and a scale of 1 are identical.
	// Negative values are undefined.
	//
	// Does nothing if the QR 'Old (Faster) Sprite Drawing' is enabled.
	//
	// [ffc]: currently not supported.
	//
	// @zasm_var SPRITE_SCALE
	internal int Scale;

	// The drawing mode to use.
	//
	// Valid values: [DrawStyle] (`DS_`).
	//
	// @zasm_var SPRITE_DRAW_STYLE
	internal int DrawStyle;

	// Upward velocity, in pixels per frame. Affected by gravity each frame, if
	// [Gravity] is true.
	//
	// @zasm_var SPRITE_JUMP
	internal int Jump;

	// The current velocity on the FakeZ axis. This value is added to FakeZ
	// every frame; and this value is decreased by the gravity value until it is
	// lower than the terminal velocity value.
	//
	// @zasm_var SPRITE_FAKE_JUMP
	internal int FakeJump;

	// If gravity affects this sprite in sideview mode. True by default.
	//
	// @zasm_var SPRITE_GRAVITY
	internal bool Gravity;

	// How to flip (or rotate) the sprite.
	//
	// Valid values: [TransformationType] (`FLIP_` or `ROT_`).
	//
	// @zasm_var SPRITE_FLIP
	internal int Flip;

	// If >-1, this flip value will be used instead of [Flip].
	// Set back to -1 to restore normal flip.
	//
	// Defaults to -1.
	//
	// @zasm_var SPRITE_SCRIPT_FLIP
	internal int ScriptFlip;

	// If the engine should animate the sprite's graphics. If set to false,
	// scripts must set [Tile] to update the sprite's graphics manually.
	// Defaults to true.
	//
	// [ffc]: Not used.
	//
	// @zasm_var SPRITE_ENGINE_ANIMATE
	internal bool Animation;

	// The width of the hitbox, in pixels.
	//
	// @zasm_var SPRITE_HIT_WIDTH
	internal int HitWidth;

	// The height of the hitbox, in pixels.
	//
	// @zasm_var SPRITE_HIT_HEIGHT
	internal int HitHeight;

	// The height of the hitbox in the Z-axis, in pixels.
	//
	// @zasm_var SPRITE_HIT_ZHEIGHT
	internal int HitZHeight;

	// The hitbox offset, in pixels.
	//
	// @zasm_var SPRITE_HIT_OFFSET_X
	internal int HitXOffset;

	// The hitbox offset, in pixels.
	//
	// @zasm_var SPRITE_HIT_OFFSET_Y
	internal int HitYOffset;

	// The timer indicating how many more frames the sprite will fall. If 0, the
	// sprite is not falling. Max value of 70, which is the value at the start
	// of falling.
	//
	// [Hero]: Setting [Hero->Action] to [LA_FALLING] also sets this to 70.
	//
	// @zasm_var SPRITE_FALL_CLK
	internal int Falling;

	// The pitfall combo the sprite is falling into, if it is falling.
	//
	// [Hero]:
	//
	// If non-zero, this combo's attributes will affect things such as if the
	// Hero will warp, and how much damage they will take upon finishing
	// falling.
	//
	// If 0, the Hero will take 1/4 heart of damage, and not warp.
	//
	// Setting [Hero->Action] to `LA_FALLING` will overwrite this value.
	//
	// Setting [Falling] will overwrite this value.
	//
	// @zasm_var SPRITE_FALL_CMB
	internal int FallCombo;

	// The movement flags of the sprite. See [MoveFlag] (`MV_`) constants.
	//
	// @zasm_var SPRITE_MOVE_FLAGS
	internal bool MoveFlags[];

	// The size of the light emitted by this sprite, in pixels.
	//
	// @zasm_var SPRITE_LIGHT_RADIUS
	internal int LightRadius;

	// The shape of light emitted by this sprite. Uses the `LIGHT_` constants.
	//
	// @zasm_var SPRITE_LIGHT_SHAPE
	internal int LightShape;

	// If the sprite is currently being switch-hooked.
	//
	// Note: currently not supported for [ffc], [Hero].
	//
	// @zasm_var SPRITE_SWHOOKED
	internal const bool SwitchHooked;

	// The [spritedata] ID to use for the sprite's shadow.
	//
	// @zasm_var SPRITE_SHADOW_SPR
	internal int ShadowSprite;

	// The timer indicating how long left the sprite will be drowning. If 0, the
	// sprite is not drowning. Max value of 64, which is the value at the start
	// of drowning.
	//
	// @zasm_var SPRITE_DROWN_CLK
	internal int Drowning;

	// The liquid combo the sprite is drowning in, if it is drowning.
	//
	// @zasm_var SPRITE_DROWN_CMB
	internal int DrownCombo;

	// Offset for the sprite's shadow.
	//
	// @zasm_var SPRITE_SHADOW_XOFS
	internal int ShadowXOffset;

	// Offset for the sprite's shadow.
	//
	// @zasm_var SPRITE_SHADOW_YOFS
	internal int ShadowYOffset;

	// An array of 32 misc values for scripts to use.
	//
	// [ffc]: only 16 values.
	//
	// @zasm_var SPRITE_MISCD
	internal untyped Misc[];
}
