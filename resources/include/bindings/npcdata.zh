// Metadata for a specific enemy type (not an instance of one). Load with [Game->LoadNPCData].
//
// @zasm_ref REFNPCCLASS
class npcdata {
	// @delete
	internal npcdata();

	// The base tile used by the enemy.
	//
	// @zasm_var NPCDATATILE
	internal int Tile;

	// Undocumented. Refer to https://github.com/ZQuestClassic/ZQuestClassic/blob/main/src/base/flags.h#L31
	//
	// @zasm_var NPCDATAFLAG
	internal bool Flags[];

	// The 'width' (W) of base tile used by the enemy.
	//
	// @zasm_var NPCDATAWIDTH
	internal int Width;

	// The 'height' (H) of base tile used by the enemy.
	//
	// @zasm_var NPCDATAHEIGHT
	internal int Height;

	// The base 'special' tile used by the enemy.
	//
	// @zasm_var NPCDATASTILE
	internal int STile;

	// The 'width' (W) of base 'special' tile used by the enemy.
	//
	// @zasm_var NPCDATASWIDTH
	internal int SWidth;

	// The 'height' (H) of base 'special' tile used by the enemy.
	//
	// @zasm_var NPCDATASHEIGHT
	internal int SHeight;

	// The base EXPANDED ('New') tile used by the enemy.
	//
	// @zasm_var NPCDATAETILE
	internal int ExTile;

	// The 'width' (W) of base EXPANDED ('New') tile used by the enemy.
	//
	// @zasm_var NPCDATAEWIDTH
	internal int ExWidth;

	// The 'height' (H) of base EXPANDED ('New') tile used by the enemy.
	//
	// @zasm_var NPCDATAEHEIGHT
	internal int ExHeight;

	// The enemy's base hit points.
	//
	// @zasm_var NPCDATAHP
	internal int HP;

	// The Family (Enemy Class) of the npc.
	//
	// @zasm_var NPCDATAFAMILY
	internal int Family;

	// @zasm_var NPCDATACSET
	internal int CSet;

	// The 'O.Anim' used by the enemy.
	//
	// @zasm_var NPCDATAANIM
	internal int Anim;

	// The 'E.Anim' used by the enemy.
	//
	// @zasm_var NPCDATAEANIM
	internal int ExAnim;

	// The 'O.Anim' animation framerate used by the enemy.
	//
	// @zasm_var NPCDATAFRAMERATE
	internal int Framerate;

	// The 'E.Anim' animation framerate used by the enemy.
	//
	// @zasm_var NPCDATAEFRAMERATE
	internal int ExFramerate;

	// The amount of contact damage that the enemy causes when it collides with
	// Link.
	//
	// @zasm_var NPCDATATOUCHDAMAGE
	internal int TouchDamage;

	// The power of the weapons fired by the enemy.
	//
	// @zasm_var NPCDATAWEAPONDAMAGE
	internal int WeaponDamage;

	// The weapon type used by the enemy.
	//
	// @zasm_var NPCDATAWEAPON
	internal int Weapon;

	// The 'random rate' of the enemy.
	//
	// @zasm_var NPCDATARANDOM
	internal int Random;

	// The 'turn frequency' used by the enemy during its movement phase.
	//
	// @zasm_var NPCDATAHALT
	internal int Haltrate;

	// The enem's step speed.
	//
	// @zasm_var NPCDATASTEP
	internal int Step;

	// The homing factor of the enemy. Greater values home more keenly on Link.
	//
	// @zasm_var NPCDATAHOMING
	internal int Homing;

	// The 'hunger' value of the enemy.
	//
	// Higher values make it more likely that the enemy is attracted to Bait.
	//
	// Valid only for [NPCT_WALK] enemies.
	//
	// @zasm_var NPCDATAHUNGER
	internal int Hunger;

	// The dropset used by the enemy.
	//
	// @zasm_var NPCDATADROPSET
	internal int Dropset;

	// The Ambient sound that the enemy emits.
	//
	// @zasm_var NPCDATABGSFX
	internal int BGSFX;

	// The sound that is played when the enemy dies.
	//
	// @zasm_var NPCDATADEATHSFX
	internal int DeathSFX;

	// The sound that is played when the enemy is hit by an lweapon.
	//
	// @zasm_var NPCDATAHITSFX
	internal int HitSFX;

	// The horizontal draw offset of the enemy.
	//
	// Note: SizeFlag[??] must be enabled for this to function.
	//
	// @zasm_var NPCDATAXOFS
	internal int DrawXOffset;

	// The vertical draw offset of the enemy.
	//
	// Note: SizeFlag[??] must be enabled for this to function.
	//
	// @zasm_var NPCDATAYOFS
	internal int DrawYOffset;

	// The depth draw offset of the enemy.
	//
	// Note: SizeFlag[??] must be enabled for this to function.
	//
	// @zasm_var NPCDATAZOFS
	internal int DrawZOffset;

	// The horizontal hitbox offset of the enemy.
	//
	// Note: SizeFlag[??] must be enabled for this to function.
	//
	// @zasm_var NPCDATAHXOFS
	internal int HitXOffset;

	// The vertical hitbox offset of the enemy.
	//
	// Note: SizeFlag[??] must be enabled for this to function.
	//
	// @zasm_var NPCDATAHYOFS
	internal int HitYOffset;

	// The hitbox width (X component), in pixels, for the enemy.
	//
	// Note: SizeFlag[??] must be enabled for this to function.
	//
	// @zasm_var NPCDATAHITWIDTH
	internal int HitWidth;

	// The hitbox height (Y component), in pixels, for the enemy.
	//
	// Note: SizeFlag[??] must be enabled for this to function.
	//
	// @zasm_var NPCDATAHITHEIGHT
	internal int HitHeight;

	// The hitbox height (Z component), in pixels, for the enemy.
	//
	// Note: SizeFlag[??] must be enabled for this to function.
	//
	// @zasm_var NPCDATAHITZ
	internal int HitZHeight;

	// The drawn width (X component) of the enemy in increments of one tile.
	//
	// Note: SizeFlag[??] must be enabled for this to function.
	//
	// @zasm_var NPCDATATILEWIDTH
	internal int TileWidth;

	// The drawn height (Y component) of the enemy in increments of one tile.
	//
	// Note: SizeFlag[??] must be enabled for this to function.
	//
	// @zasm_var NPCDATATILEHEIGHT
	internal int TileHeight;

	// The sprite used to draw the enemy weapon.
	//
	// @zasm_var NPCDATAWPNSPRITE
	internal int WeaponSprite;

	// The sfx used when the enemy fires its weapon.
	// If WeaponSFX <= 0 no sound will be played.
	//
	// @zasm_var NPCDATAFIRESFX
	internal int WeaponSFX;

	// The defense categories for the enemy.
	//
	// @zasm_var NPCDATADEFENSE
	internal int Defense[];

	// A set of flags that determine if the values for the Enemy Editor 'Size'
	// tab are rendered by the engine.
	//
	// @zasm_var NPCDATASIZEFLAG
	internal bool SizeFlag[];

	// The 'Misc. Attributes' of the enemy; now 32 of these; and
	// datatype-insensitive.
	//
	// @zasm_var NPCDATAATTRIBUTE
	internal int Attributes[];

	// The shield status of the enemy.
	//
	// Valid indices: [DIR_UP] (front), [DIR_DOWN] (back), [DIR_LEFT], [DIR_RIGHT],
	//                `4` (Shield can be broken).
	//
	// @zasm_var NPCDATASHIELD
	internal bool Shield[];

	// @zasm_var NPCDATABEHAVIOUR
	internal bool BFlags[];

	// The base tile used to draw the enemy, when the enemy is frozen solid.
	// //Not yet implemented in-engine.
	//
	// @zasm_var NPCDATAFROZENTILE
	internal int FrozenTile;

	// The CSet value used to render the enemy, when the enemy is frozen solid.
	// //Not yet implemented in-engine.
	//
	// @zasm_var NPCDATAFROZENCSET
	internal int FrozenCSet;

	// The npc action script used by this enemy.
	//
	// @zasm_var NPCDATASCRIPT
	internal int Script;

	// The eight InitD args used by the npc action script for this enemy.
	//
	// @zasm_var NPCDATAINITD
	internal int InitD[];

	// The weapon action script assigned to this enemy.
	//
	// @zasm_var NPCDATAWEAPONSCRIPT
	internal int WeaponScript;

	// The eight InitD args assigned to the weapon script used by this enemy.
	//
	// @zasm_var NPCDATAWEAPONINITD
	internal int WeaponInitD[];

	// The shadow sprite used by the enemy, 0-255
	//
	// @zasm_var NPCDSHADOWSPR
	internal int ShadowSprite;

	// The spawn sprite used by the enemy, 0-255
	//
	// @zasm_var NPCDSPAWNSPR
	internal int SpawnSprite;

	// The death sprite used by the enemy, 0-255
	//
	// @zasm_var NPCDDEATHSPR
	internal int DeathSprite;

	// Puts the text of the Enemy Name field into string 'ptr'.
	//
	// @zasm
	//   POP D2
	//   POP REFNPCCLASS
	//   NPCDATAGETNAME D2
	internal void GetName(char32[] ptr);
}
