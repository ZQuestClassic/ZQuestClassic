// Enemy IDs. Used with [Screen->CreateNPC].
enum NPCID
{
	NPC_ABEI                       = 1,
	NPC_AMA                        = 2,
	NPC_MERCHANT                   = 3,
	NPC_MOBLIN                     = 4,
	NPC_FIRE                       = 5,
	NPC_FAIRY                      = 6,
	NPC_GORIYA                     = 7,
	NPC_ZELDA                      = 8,
	NPC_ABEI2                      = 9,
	NPC_AQUAMENTUSL                = 93,
	NPC_AQUAMENTUSR                = 58,
	NPC_ARMOS                      = 37,
	NPC_BAT                        = 106,
	NPC_BOMBCHU                    = 160,
	NPC_BOULDER                    = 135,
	NPC_BUBBLEITEMP                = 118, // Permanently jinxes.
	NPC_BUBBLEITEMR                = 119, // Restores item usage.
	NPC_BUBBLEITEMT                = 117,
	NPC_BUBBLESWORDP               = 81,  // Permanently jinxes.
	NPC_BUBBLESWORDR               = 82,  // Restores sword usage.
	NPC_BUBBLESWORDT               = 51,
	NPC_CEILINGMASTER              = 101, // This enemy isn't implemented.
	NPC_DARKNUT1                   = 49,
	NPC_DARKNUT2                   = 50,
	NPC_DARKNUT3                   = 92,  // Splits when killed.
	NPC_DARKNUT4                   = 172, // This enemy isn't implemented.
	NPC_DARKNUT5                   = 87,  // Sword beams.
	NPC_DIGDOGGER1                 = 66,  // Splits into 1.
	NPC_DIGDOGGER3                 = 67,  // Splits into 3.
	NPC_DIGKID1                    = 68,  // Spawned by NPC_DIGDOGGER1.
	NPC_DIGKID2                    = 69,  // Spawned by NPC_DIGDOGGER3.
	NPC_DIGKID3                    = 70,  // Spawned by NPC_DIGDOGGER3.
	NPC_DIGKID4                    = 71,  // Spawned by NPC_DIGDOGGER3.
	NPC_DODONGO                    = 60,  // Uses one tile when walking vertically.
	NPC_DODONGOBS                  = 114, // Uses two tiles when walking vertically.
	NPC_DODONGOFIRE                = 115, // This enemy isn't implemented.
	NPC_ENEMYFIRE                  = 85,  // The Fire enemy in Princess Zelda's screen.
	NPC_FLOORMASTER                = 102, // This enemy isn't implemented.
	NPC_GANON                      = 78,
	NPC_GEL                        = 42,
	NPC_GELFIRE                    = 161,
	NPC_GELFIRETRIB                = 163,
	NPC_GELTRIB                    = 88,
	NPC_GHINI1                     = 35,
	NPC_GHINI2                     = 36,
	NPC_GHINIMGC                   = 173, // This enemy isn't implemented.
	NPC_GIBDO                      = 54,
	NPC_GLEEOK1                    = 62,
	NPC_GLEEOK1FIRE                = 109,
	NPC_GLEEOK2                    = 63,
	NPC_GLEEOK2FIRE                = 110,
	NPC_GLEEOK3                    = 64,
	NPC_GLEEOK3FIRE                = 111,
	NPC_GLEEOK4                    = 65,
	NPC_GLEEOK4FIRE                = 112,
	NPC_GOHMA1                     = 72,
	NPC_GOHMA2                     = 73,
	NPC_GOHMA3                     = 121,
	NPC_GOHMAFIRE                  = 122,
	NPC_GORIYA1                    = 45,
	NPC_GORIYA2                    = 46,
	NPC_GORIYA3                    = 136,
	NPC_GRAPBUGHP                  = 174, // This enemy isn't implemented.
	NPC_GRAPBUGMP                  = 175, // This enemy isn't implemented.
	NPC_ITEMFAIRY                  = 84,
	NPC_KEESE1                     = 38,
	NPC_KEESE2                     = 39,
	NPC_KEESE3                     = 40,
	NPC_KEESETRIB                  = 90,
	NPC_LANMOLA1                   = 74,
	NPC_LANMOLA2                   = 75,
	NPC_LEEVER1                    = 26,
	NPC_LEEVER2                    = 27,
	NPC_LEEVER3                    = 137,
	NPC_LIKELIKE                   = 53,
	NPC_LYNEL1                     = 30,
	NPC_LYNEL2                     = 31,
	NPC_LYNEL3                     = 168,
	NPC_MANHANDLA                  = 61,
	NPC_MANHANDLA2                 = 94,
	NPC_MOBLIN1                    = 28,
	NPC_MOBLIN2                    = 29,
	NPC_MOLDORM                    = 59,
	NPC_OCTOROCK1F                 = 22,
	NPC_OCTOROCK1S                 = 20,
	NPC_OCTOROCK2F                 = 23,
	NPC_OCTOROCK2S                 = 21,
	NPC_OCTOROCKBOMBF              = 141,
	NPC_OCTOROCKBOMBS              = 140,
	NPC_OCTOROCKFIREF              = 139,
	NPC_OCTOROCKFIRES              = 138,
	NPC_OCTOROCKMGC                = 86,
	NPC_PATRA1                     = 76,
	NPC_PATRA2                     = 104,
	NPC_PATRA3                     = 105,
	NPC_PATRABS                    = 103,
	NPC_PATRAOVAL                  = 77,
	NPC_PEAHAT                     = 32,
	NPC_PEAHATFIRE                 = 169, // This enemy isn't implemented.
	NPC_POLSVOICE                  = 55,
	NPC_POLSVOICEBS                = 171, // This enemy isn't implemented.
	NPC_POLSVOICEMGC               = 170,
	NPC_ROCK                       = 34,
	NPC_ROPE1                      = 44,
	NPC_ROPE2                      = 80,
	NPC_SHOOTFBALL                 = 83,
	NPC_SHOOTFLAME                 = 158,
	NPC_SHOOTFLAME2                = 159,
	NPC_SHOOTMAGIC                 = 154,
	NPC_SHOOTROCK                  = 155,
	NPC_SHOOTSPEAR                 = 156,
	NPC_SHOOTSWORD                 = 157,
	NPC_SPINTILE                   = 166,
	NPC_SPINTILERND                = 167, // Random spin tile.
	NPC_STALFOS1                   = 41,
	NPC_STALFOS2                   = 79,
	NPC_STALFOS3                   = 120,
	NPC_TEKTITE1                   = 24,
	NPC_TEKTITE2                   = 25,
	NPC_TEKTITE3                   = 165, // This enemy isn't implemented.
	NPC_TRAP                       = 47,
	NPC_TRAP8WAY                   = 142, // This enemy isn't implemented.
	NPC_TRAPBACKSLASHC             = 146, // This enemy isn't implemented.
	NPC_TRAPBACKSLASHLOS           = 147, // This enemy isn't implemented.
	NPC_TRAPCCLOCKWISEC            = 150, // This enemy isn't implemented.
	NPC_TRAPCCLOCKWISELOS          = 151, // This enemy isn't implemented.
	NPC_TRAPCLOCKWISEC             = 148, // This enemy isn't implemented.
	NPC_TRAPCLOCKWISELOS           = 149, // This enemy isn't implemented.
	NPC_TRAPDIAG                   = 143, // This enemy isn't implemented.
	NPC_TRAPHORIZC                 = 97,
	NPC_TRAPHORIZLOS               = 95,
	NPC_TRAPSLASHC                 = 144, // This enemy isn't implemented.
	NPC_TRAPSLASHLOS               = 145,
	NPC_TRAPVERTC                  = 98,
	NPC_TRAPVERTLOS                = 96,
	NPC_TRIGGER                    = 116,
	NPC_VIRE                       = 52,
	NPC_VIRETRIB                   = 91,
	NPC_WALLMASTER                 = 48,
	NPC_WIZZROBE1                  = 56,  // Teleports.
	NPC_WIZZROBE2                  = 57,  // Phases through blocks.
	NPC_WIZZROBEBAT                = 107,
	NPC_WIZZROBEBAT2               = 108, // This enemy isn't implemented.
	NPC_WIZZROBEFIRE               = 99,
	NPC_WIZZROBEICE                = 153, // This enemy isn't implemented.
	NPC_WIZZROBEMIRR               = 113,
	NPC_WIZZROBESUMM               = 152,
	NPC_WIZZROBEWIND               = 100,
	NPC_ZOL                        = 43,
	NPC_ZOLFIRE                    = 162,
	NPC_ZOLFIRETRIB                = 164,
	NPC_ZOLTRIB                    = 89,
	NPC_ZORA                       = 33,
};

@Bitflags("int")
enum NPCMiscBitflags
{
	NPCMF_0POWERWEAPS              = 0x0001, // Damaged by 0-Power Weapons.
	NPCMF_ISINVISIBLE              = 0x0002, // Is Invisible.
	NPCMF_NEVERRETURNS             = 0x0004, // Never Returns After Death.
	NPCMF_NOT_BEATABLE             = 0x0008, // Doesn't Count as beatable Enemy.
	NPCMF_SPAWNFLICKER             = 0x0010, // Unused.
	NPCMF_ONLY_LENS                = 0x0020, // Only Seen By Lens of truth.
	NPCMF_FLASHING                 = 0x0040, // Is Flashing.
	NPCMF_FLICKERING               = 0x0080, // Is Flickering.
	NPCMF_TRANSLUCENT              = 0x0100, // Is translucent.
	NPCMF_SHIELDED_FRONT           = 0x0200, // Shielded on Front.
	NPCMF_SHIELDED_LEFT            = 0x0400, // Shielded on Left.
	NPCMF_SHIELDED_RIGHT           = 0x0800, // Shielded on Right.
	NPCMF_SHIELDED_BACK            = 0x1000, // Shielded on Back.
	NPCMF_HAMMERBREAKS             = 0x2000, // Hammer Can break Shield.
};

// Default item drop sets.
enum ItemSet
{
	IS_NONE,
	IS_DEFAULT,
	IS_BOMBS,
	IS_MONEY,
	IS_LIFE,
	IS_BOMB100, // Used by Dodongos
	IS_SBOMB100, // Used by Dodongos
	IS_MAGIC,
	IS_MAGICBOMBS,
	IS_MAGICMONEY,
	IS_MAGICLIFE,
	IS_MAGIC2,
	IS_COMBOS // Used by Tall Grass / Bush / Slash combos.
};

// Boss palettes.
enum BossPal
{
	BPAL_AQUA,
	BPAL_GLEEOK,
	BPAL_DODONGO,
	BPAL_GANON,
	BPAL_BROWN,
	BPAL_PILE, // Used for the Dust Pile.
	BPAL_BLUE,
	BPAL_RED,
	BPAL_GOLD,
	BPAL_ICON1, // Used for Quest Icon 1.
	BPAL_ICON2, // Used for Quest Icon 2.
	BPAL_ICON3, // Used for Quest Icon 3.
	BPAL_ICON4, // Used for Quest Icon 4.
	BPAL_GLEEOKF,
	BPAL_FROZEN // Unused
};

// "special" walk flags.
enum NPCWalkType
{
	SPW_NONE, SPW_DOOR, SPW_CLIPRIGHT, SPW_FLOATER, SPW_TRAP, SPW_HALFSTEP, 
	SPW_WATER, SPW_WIZZROBE, SPW_CLIPBOTTOMRIGHT
};

enum NPCMoveStatus
{
	NPCMS_PAUSED, NPCMS_SPEEDUP, NPCMS_NORMAL, NPCMS_SLOWDOWN
};

// @zasm_ref REFNPC
// @extends sprite
class npc {
	// @delete
	internal npc();

	// @value [NPCID]
	// @zasm_var NPCID
	internal const int ID;

	// The type, or 'npc class' of the npc.
	//
	// @value [NPCType]
	// @zasm_var NPCTYPE
	internal int Type;

	// Exactly the same as [Type], use that instead.
	//
	// @value [NPCType]
	// @zasm_var NPCTYPE
	internal int Family;

	// The current frame of the npc's animation.
	//
	// @zasm_var NPCFRAME
	internal int Frame;

	// Returns the max number of npcs currently allowed.
	//
	// @zasm_var SPRITEMAXNPC
	internal int Max;

	// The timer used for npc knockback.
	// The first byte is the clock.
	// The second byte is the dir.
	// Enemies that split do not slide.
	//
	// @zasm_var NPCSLIDECLK
	internal int SlideClock;

	// The death effect for the npc.
	//
	// @value [NPCFade]
	// @zasm_var NPCFADING
	internal int Fading;

	// @zasm_var NPCRATE
	internal int Rate;

	// @zasm_var NPCHOMING
	internal int Homing;

	// @zasm_var NPCSTEP
	internal int Step;

	// @zasm_var NPCFRAMERATE
	internal int ASpeed;

	// The clock for how long an npc is halted.
	//
	// @zasm_var NPCHALTCLK
	internal int Halt;

	// The movement status of an npc, usually flying.
	//
	// @value [NPCMoveStatus]
	// @zasm_var NPCMOVESTATUS
	internal int MoveStatus;

	// @zasm_var NPCHALTRATE
	internal int Haltrate;

	// Corresponds to the Enemy Editor Random Rate value.
	//
	// @zasm_var NPCRANDOM
	internal int Random;

	// @zasm_var NPCHP
	internal int HP;

	// @zasm_var NPCDP
	internal int Damage;

	// @zasm_var NPCWDP
	internal int WeaponDamage;

	// @zasm_var NPCOTILE
	internal int OriginalTile;

	// The weapon type used by the npc.
	//
	// @value [NPCWeapon]
	// @zasm_var NPCWEAPON
	internal int Weapon;

	// The Dropset ID that this npc will drop from when killed.
	//
	// @value [ItemSet]
	// @zasm_var NPCITEMSET
	internal int ItemSet;

	// Alias for npc->ItemSet.
	//
	// Read or write the item dropset used by the npc.
	//
	// @zasm_var NPCITEMSET
	internal int Dropset;

	// @value [BossPal]
	// @zasm_var NPCBOSSPAL
	internal int BossPal;

	// @zasm_var NPCBGSFX
	internal int SFX;

	// the weapon's total visual Y-offset.
	//
	// @zasm_var NPCTOTALDYOFFS
	internal const int TotalDYOffset;

	// The 8 InitD[] arguments for the npc script.
	//
	// @zasm_var NPCINITD
	internal untyped InitD[];

	// Expanded to size [32], and made datatype-insensitive.
	//
	// @zasm_var NPCDD
	internal untyped Attributes[];

	// @value [NPCMiscBitflags]
	// @zasm_var NPCMFLAGS
	internal int MiscFlags;

	// @zasm_var NPCCOLLDET
	internal bool CollDetection;

	// The duration the npc is stunned for. If 0, the npc is not stunned.
	//
	// @zasm_var NPCSTUN
	internal int Stun;

	// This returns true if the NPC is the core segment of a segmented engine
	// npc.
	//
	// @zasm_var NPCISCORE
	internal bool Core;

	// The defense categories for the npc.
	//
	// @index [NPCDefenseIndex]
	// @value [NPCDefenseType]
	// @zasm_var NPCDEFENSED
	internal int Defense[];

	// Stores the ID/UIDs of objects that hurt the npc this frame.
	//
	// Indices:
	//
	// The first four indices are for the *screen index* of objects:
	//
	// Description		Index	Status
	// - HIT_BY_NPC 		[0] 	Not used at this time.
	// - HIT_BY_EWEAPON 	[1] 	Not used at this time.
	// - HIT_BY_LWEAPON 	[2]	    In use by the engine.
	// - HIT_BY_FFC 		[3] 	Not used at this time.
	//
	// The next four, are for the FFCore 'script' UIDs of objects:
	//
	// Description		Index	Status
	// - HIT_BY_NPC_UID 	[4] 	Not used at this time.
	// - HIT_BY_EWEAPON_UID [5] 	Not used at this time.
	// - HIT_BY_LWEAPON_UID [6]	    In use by the engine.
	// - HIT_BY_FFC_UID 	[7] 	Not used at this time.
	//
	// The last two, are reserved for special damage-object types.
	//
	// Description		Index	Status
	// - HIT_BY_COMBO 	[8]	Not used at this time.
	// - HIT_BY_MAPFLAG [9] Not used at this time.
	//
	// These indices are uniform across all HitBy[] array members, for any
	// datatype with that member.
	//
	// Some lweapons, notably some melee weapons such as swords (but not sword
	// beams), and boomerangs are not yet implemented in this mechanic.
	//
	// @index [HitIndex]
	// @zasm_var NPCHITBY
	internal untyped HitBy[];

	// @zasm_var NPCHUNGER
	internal int Hunger;

	// The sprite (Quest->Graphics->Sprites->Weapons) used to draw the weapon
	// fired by the npc.
	//
	// @zasm_var NPCWEAPSPRITE
	internal int WeaponSprite;

	// The sfx (Quest->Audio->SFXData) used whenever the npc fires its weapon.
	// If WeaponSFX <= 0 no sound will be played.
	//
	// @zasm_var NPCFIRESFX
	internal int WeaponSFX;

	// @zasm_var NPCSCRDEFENSED
	internal int ScriptDefense[];

	// Returns the number of remaining invincibility frames if the npc is
	// invincible, otherwise 0.
	//
	// @zasm_var NPCINVINC
	internal int InvFrames;

	// Returns if the npc is invincible, because of ( superman variable ).
	//
	// @zasm_var NPCSUPERMAN
	internal int Invincible;

	// If true, the npc is a Ringleader, and killing this npc will kill every
	// npc in the room.
	//
	// @zasm_var NPCRINGLEAD
	internal bool Ringleader;

	// True if the npc is carrying an item.
	//
	// @zasm_var NPCHASITEM
	internal bool HasItem;

	// The shield status of the npc.
	//
	// @index [NPCShieldIndex]
	// @zasm_var NPCSHIELD
	internal bool Shield[];

	// @zasm_var NPCBEHAVIOUR
	internal bool BFlags[];

	// Returns a direction constant if the npc is being knocked back.
	//
	// Returns -1 if the npc is not being knockd back.
	//
	// Writing to this has no effect, and is ignored.
	//
	// This value is set both from engine, and from scripted knockback.
	//
	// @zasm_var NPCHITDIR
	internal int HitDir;

	// The npc script running on this npc.
	//
	// @zasm_var NPCSCRIPT
	internal int Script;

	// If true, the npc will not 'die' even if it has 0hp or is too far
	// off-screen.
	//
	// [Remove] will still delete the npc.
	//
	// @zasm_var NPCIMMORTAL
	internal bool Immortal;

	// False by default. If set to 'true', engine knockback is ignored.
	//
	// @zasm_var NPCNOSLIDE
	internal bool NoSlide;

	// False by default. If set to 'true', scripted knockback via
	// 'npc->Knockback()' is ignored.
	//
	// @zasm_var NPCNOSCRIPTKB
	internal bool NoScriptKnockback;

	// The number of pixels engine knockback moves the npc at a time.
	// Default 4.
	//
	// @zasm_var NPCKNOCKBACKSPEED
	internal int SlideSpeed;

	// The radius of light this object emits in a dark room
	//
	// @zasm_var NPCGLOWRAD
	internal int LightRadius;

	// The shape of light this object emits in a dark room.
	//
	// @zasm_var NPCGLOWSHP
	internal int LightShape;

	// The spawn sprite used by the npc, 0-255
	//
	// @zasm_var NPCSPAWNSPR
	internal int SpawnSprite;

	// The death sprite used by the npc, 0-255
	//
	// @zasm_var NPCDEATHSPR
	internal int DeathSprite;

	// If set false, the npc will neither flash, nor flicker when invincible.
	//
	// @zasm_var NPCCANFLICKER
	internal bool InvFlicker;

	// This sets what color the npc is drawn when flickering.
	//
	// @zasm_var NPCFLICKERCOLOR
	internal int FlickerColor;

	// This sets how many times the transparency effect is applied to the
	// npc's flicker effect.
	//
	// @zasm_var NPCFLICKERTRANSP
	internal int FlickerTransparencyPasses;

	// This returns the npc's current displayed cset when taking damage or
	// invincible. If not in one of these states, will return its normal cset.
	//
	// @zasm_var NPCFLASHINGCSET
	internal const int FlashingCSet;

	// @zasm_var NPCFROZEN
	internal int Frozen;

	// @zasm_var NPCFROZENTILE
	internal int FrozenTile;

	// @zasm_var NPCFROZENCSET
	internal int FrozenCSet;

	// @deprecated
	// @zasm_var NPCSCRIPTUID
	internal const int UID;

	// @deprecated
	// @zasm_var NPCPARENTUID
	internal int ParentUID;

	// Returns the max number of npcs currently allowed.
	//
	// @deprecated Use [Max] instead!
	// @zasm
	//   POP REFNPC
	//   SETR D2 SPRITEMAXNPC
	internal int Max();

	// Sets the max number of npcs allowed to a new value. Range `1-1024`.
	//
	// @deprecated Use [Max] instead!
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   SETR SPRITEMAXNPC D2
	internal void Max(int value);

	// Returns true if this pointer points to a valid npc. If this returns
	// false, using any other value of this pointer will error.
	//
	// @zasm
	//   POP D2
	//   ISVALIDNPC D2
	internal bool isValid();
	
	// Creates an explosion particle effect in mode 0, 1, or 2 of the sprite.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCEXPLODER D2
	internal void Explode(int mode);

	// Returns true if the npc is submerged (ex. underground/underwater)
	//
	// @zasm
	//   POP REFNPC
	//   SETR D2 NPCSUBMERGED
	internal bool Submerged();

	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCNAME D2
	internal void GetName(char32[] buffer);

	// @zasm
	//   POP D2
	//   BREAKSHIELD D2
	internal void BreakShield();

	// @zasm
	//   POP D2
	//   REPAIRSHIELD D2
	internal void RepairShield();

	// Returns if the NPC is dead, or dying
	//
	// @zasm
	//   POP REFNPC
	//   NPCDEAD D2
	internal bool isDead();

	// Unimplemented
	//
	// @zasm
	//   POP REFNPC
	//   NPCCANSLIDE D2
	internal bool CanSlide();

	// Run Engine knockback (Only does anything if a knockback is in-progress)
	//
	// This is automatically called for most engine npc types
	//
	// Calling this from npc types such as 'Other' will allow them to recieve
	// knockback
	//
	// This is called as a part of scripted walking functions, such as
	// 'ConstantWalk()', automatically.
	//
	// Return: 0 if no knockback occurred, 1 if scripted knockback
	// ('->Knockback()') occurred, 2 if engine knockback occurred.
	//
	// @zasm
	//   POP REFNPC
	//   NPCSLIDE D2
	internal bool Slide();

	// Instantly DELETES an npc. No items will be dropped, no sound will play;
	// the npc is simply DELETED OUTRIGHT.
	//
	// This will immediately invalidate the npc pointer, as well as update
	// 'Screen->NumNPCs()', and change the indexes for 'Screen->LoadNPC()'
	//
	// If called from an NPC script on the NPC running the script, immediately
	// terminates the script.
	//
	// @zasm
	//   POP REFNPC
	//   NPCKICKBUCKET
	internal void Remove();

	// Stops the background sounds that the npc is generating.
	//
	// @zasm
	//   POP REFNPC
	//   NPCSTOPBGSFX
	internal void StopBGSFX();

	// Causes the npc to attack with its weapon.
	//
	// @zasm
	//   POP REFNPC
	//   NPCATTACK
	internal void Attack();

	// The npc chooses a new direction.
	//
	// Uses an array literal for its args:
	//
	// { int rate, int homing, int special }
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCNEWDIR D2
	internal void NewDir(int arr);

	// Causes the npc to walk.
	//
	// Uses an array literal for its args.
	//
	// Pass NULL as the pointer to run without args, or use:
	//
	// {int rate, int homing, int special}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCCONSTWALK D2
	internal void ConstantWalk(int arr);

	// As ConstantWalk(), but 8-directions.
	//
	// {int rate, int homing, int special}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCCONSTWALK8 D2
	internal void ConstantWalk8(int arr);

	// Causes the npc to walk and occasionally change speed.
	//
	// {int rate, int homing, int special}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCVARWALK D2
	internal void VariableWalk(int arr);

	// As VariableWalk(), but 8-directions.
	//
	// {int rate, int homing, int newclk, int special}
	//
	// {int rate, int homing, int newclk, int special, int dx1, int dy1, int
	// dx2, int dy2}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCVARWALK8 D2
	internal void VariableWalk8(int arr);

	// Causes an npc to walk, and occasionally halt.
	//
	// {int rate, int homing, int special, int hrate, int haltcnt}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCHALTWALK D2
	internal void HaltingWalk(int arr);

	// As HaltingWalk(), but 8-directions.
	//
	// {int newrate, int newhoming, int newclk, int special, int newhrate, int
	// haltcnt}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCHALTWALK8 D2
	internal void HaltingWalk8(int arr);

	// Causes an npc to move, ignoring solidity on the screen.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCFLOATWALK D2
	internal void FloatingWalk(int arr);

	// Fires the breath weapon set to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCFIREBREATH D2
	internal void BreathAttack(bool seeklink = false);

	// As NewDir(), but 8-directions.
	//
	// {int rate, int homing, int special}
	//
	// {int rate, int homing, int special, int dx1, int dy1, int dx2, int dy2}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCNEWDIR8 D2
	internal void NewDir8(int arr);

	// Returns if either an object is colliding with the npc, or if an arbitrary
	// set of
	//
	// coordinates would collide.
	//
	// Valid Object Types:
	//
	// obj_type_lweapon, obj_type_eweapon, obj_type_npc, obj_type_link,
	// obj_type_ffc, obj_type_combo_pos, obj_type_item
	//
	// ** Not fully implemented!
	//
	// @zasm
	//   POP D1
	//   POP D0
	//   POP REFNPC
	//   SETR D2 NPCCOLLISION
	internal bool Collision(int obj_type, untyped obj_pointer);

	// Checks if npc is lined up with Link.
	//
	// If so, returns direction Link is at as compared to npc.
	//
	// Returns -1 if not lined up. Range is inclusive.
	//
	// @zasm
	//   POP D1
	//   POP D0
	//   POP REFNPC
	//   SETR D2 NPCLINEDUP
	internal int LinedUp(int range, bool dir8 = false);

	// Returns true if Link is within 'range' pixels of the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCLINKINRANGE D2
	internal bool LinkInRange(int dist_in_pixels);

	// Returns true if the npc can move in a given direction.
	//
	// Uses an array literal for varying args.
	//
	// Overloaded for a number of options:
	//
	// {int dir}: Dir only, should use the default step distance.
	//
	// {int dir, int special}
	//
	// {int ndir, int step, int special}
	//
	// {int ndir,int step,int special,int dx1,int dy1,int dx2,int dy2}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCCANMOVE D2
	internal bool CanMove(int array);

	// Simulates hitting the npc with a weapon, another sprite, or an arbitrary
	// set of
	//
	// values passed as an overloaded array literal.
	//
	// Returns true if that object would hit the npc.
	//
	// {TYPE, pointer} : Specify the type, such as PTR_TYPE_LWEAPON, then pass
	// an object pointer.
	//
	// {int tx, int ty, int tz, int txsz, int tysz, int tzsz} : Arbitrary
	// values.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCHITWITH D2
	internal bool SimulateHit(int array);

	// Similar to Screen->CreateNPC(), except:
	//
	// (1) It uses an arry literal for its args, with varying size.
	//
	// (2) You can either create an npc only by its ID, or you can do
	//
	// that and set its spawn coordinates at the same time.
	//
	// (3) It works based on an existing pointer, such as:
	//
	// npc n; n->Create{args});
	//
	// { int id }
	//
	// { int id, int x, int y }
	//
	// @reassign_ptr
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCADD D2
	internal npc Create(int array);

	// Attempt to knock back the npc in 'dir' direction, for 'time' frames, at a
	// rate of 'speed' pixels per frame.
	//
	// @zasm
	//   POP D0
	//   POP D3
	//   POP D2
	//   POP REFNPC
	//   NPCKNOCKBACK D2 D3
	internal bool Knockback(int time, int dir, int speed = 4);

	// Switch the [Hero] with this sprite.
	//
	// Valid values for [effect] is [SwitchEffect] (`SW_EFF_`).
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   SWITCHNPC D2
	internal bool Switch(int effect);

	// Returns true if the npc is in a state in which it should not be allowed
	// to move (ex. spawning, dying, stunned, time frozen by clock)
	//
	// @zasm
	//   POP REFNPC
	//   NPCMOVEPAUSED
	internal bool MovePaused();

	// Attempts to move the npc by 'pxamnt' pixels in the 'dir' direction,
	// failing if it is blocked by something it cannot walk through.
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   POP D0
	//   POP REFNPC
	//   NPCMOVE
	internal bool Move(int dir, int pxamnt, int special = 0);

	// Attempts to move the npc by 'pxamnt' pixels in the 'degrees' angle,
	// failing if it is blocked by something it cannot walk through.
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   POP D0
	//   POP REFNPC
	//   NPCMOVEANGLE
	internal bool MoveAtAngle(int degrees, int pxamnt, int special = 0);

	// Attempts to move the npc by 'dx' in the x direction and 'dy' in the y
	// direction, failing if it is blocked by something it cannot walk through.
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   POP D0
	//   POP REFNPC
	//   NPCMOVEXY
	internal bool MoveXY(int dx, int dy, int special = 0);

	// Attempts to move the npc by 'pxamnt' pixels in the 'dir' direction,
	// failing if it is blocked by something it cannot walk through.
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   POP D0
	//   POP REFNPC
	//   NPCCANMOVEDIR
	internal bool CanMove(int dir, int pxamnt, int special = 0);

	// Attempts to move the npc by 'pxamnt' pixels in the 'degrees' angle,
	// failing if it is blocked by something it cannot walk through.
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   POP D0
	//   POP REFNPC
	//   NPCCANMOVEANGLE
	internal bool CanMoveAtAngle(int degrees, int pxamnt, int special = 0);

	// Attempts to move the npc by 'dx' in the x direction and 'dy' in the y
	// direction, failing if it is blocked by something it cannot walk through.
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   POP D0
	//   POP REFNPC
	//   NPCCANMOVEXY
	internal bool CanMoveXY(int dx, int dy, int special = 0);

	// Checks if the npc could be arbitrarily placed (teleported) at 'nx,ny'.
	//
	// If 'nw' or 'nh' are > -1, they will be used as the width/height of the
	// npc for the check.
	//
	// Otherwise, the npc's hitwidth/hitheight are used.
	//
	// Some enemies treat pits/liquid as solid, EXCEPT if they are being knocked
	// back.
	//
	// 'bool knockback' here affects this for the placement checks.
	//
	// Returns true if the npc could be placed successfully, false otherwise.
	//
	// @param [NPCWalkType] special - for example, [SPW_FLOATER] for flying enemies
	// @zasm
	//   NPCCANPLACE
	//   POPARGS D5 0.0007
	internal bool CanPlace(int nx, int ny, int special = SPW_NONE,
						   bool knockback = false, int nw = -1, int nh = -1);

	// This returns true if the npc is currently in a flicker frame (either
	// invisible or color masked).
	//
	// @zasm
	//   POP REFNPC
	//   NPCISFLICKERFRAME
	internal bool isFlickerFrame();

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_BITMAP D2 0.0007
	internal void Own(bitmap b);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_PALDATA D2 0.0007
	internal void Own(paldata b);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_FILE D2 0.0007
	internal void Own(file b);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_DIR D2 0.0007
	internal void Own(directory b);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_STACK D2 0.0007
	internal void Own(stack b);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_RNG D2 0.0007
	internal void Own(randgen b);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_ARRAY D2 0.0007
	internal void OwnArray(untyped array);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_CLASS D2 0.0007
	internal void OwnObject(untyped object);
}
