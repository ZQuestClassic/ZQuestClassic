enum NpcType
{
	NPCT_GUY,
	NPCT_WALK,

	NPCT_TEKTITE = 3,
	NPCT_LEEVER,
	NPCT_PEAHAT,
	NPCT_ZORA,
	NPCT_ROCK,
	NPCT_GHINI,
	NPCT_ARMOS,
	NPCT_KEESE,

	NPCT_TRAP = 15,
	NPCT_WALLMASTER = 16,

	NPCT_WIZZROBE = 21,
	NPCT_AQUAMENTUS,
	NPCT_MOLDORM,
	NPCT_DODONGO,
	NPCT_MANHANDLA,
	NPCT_GLEEOK,
	NPCT_DIGDOGGER,
	NPCT_GOHMA,
	NPCT_LANMOLA,
	NPCT_PATRA,
	NPCT_GANON,
	NPCT_PROJECTILE,

	NPCT_SPINTILE = 37,
	NPCT_NONE,
	NPCT_FAIRY,
	NPCT_OTHERFLOAT,
	NPCT_OTHER,

	NPCT_CUSTOM_01 = 43,
	NPCT_SCRIPT_01 = 43,
	NPCT_CUSTOM_02 = 44,
	NPCT_SCRIPT_02 = 44,
	NPCT_CUSTOM_03 = 45,
	NPCT_SCRIPT_03 = 45,
	NPCT_CUSTOM_04 = 46,
	NPCT_SCRIPT_04 = 46,
	NPCT_CUSTOM_05 = 47,
	NPCT_SCRIPT_05 = 47,
	NPCT_CUSTOM_06 = 48,
	NPCT_SCRIPT_06 = 48,
	NPCT_CUSTOM_07 = 49,
	NPCT_SCRIPT_07 = 49,
	NPCT_CUSTOM_08 = 50,
	NPCT_SCRIPT_08 = 50,
	NPCT_CUSTOM_09 = 51,
	NPCT_SCRIPT_09 = 51,
	NPCT_CUSTOM_10 = 52,
	NPCT_SCRIPT_10 = 52,
	NPCT_CUSTOM_11 = 53,
	NPCT_SCRIPT_11 = 53,
	NPCT_CUSTOM_12 = 54,
	NPCT_SCRIPT_12 = 54,
	NPCT_CUSTOM_13 = 55,
	NPCT_SCRIPT_13 = 55,
	NPCT_CUSTOM_14 = 56,
	NPCT_SCRIPT_14 = 56,
	NPCT_CUSTOM_15 = 57,
	NPCT_SCRIPT_15 = 57,
	NPCT_CUSTOM_16 = 58,
	NPCT_SCRIPT_16 = 58,
	NPCT_CUSTOM_17 = 59,
	NPCT_SCRIPT_17 = 59,
	NPCT_CUSTOM_18 = 60,
	NPCT_SCRIPT_18 = 60,
	NPCT_CUSTOM_19 = 61,
	NPCT_SCRIPT_19 = 61,
	NPCT_CUSTOM_20 = 62,
	NPCT_SCRIPT_20 = 62,
	NPCT_FRIENDLY_01 = 63,
	NPCT_FRIENDLY_02 = 64,
	NPCT_FRIENDLY_03 = 65,
	NPCT_FRIENDLY_04 = 66,
	NPCT_FRIENDLY_05 = 67,
	NPCT_FRIENDLY_06 = 68,
	NPCT_FRIENDLY_07 = 69,
	NPCT_FRIENDLY_08 = 70,
	NPCT_FRIENDLY_09 = 71,
	NPCT_FRIENDLY_10 = 72
};

// Use as index for npc->Defense[].
enum NpcDefenseIndex
{
	NPCD_BRANG,
	NPCD_BOMB,
	NPCD_SBOMB,
	NPCD_ARROW,
	NPCD_FIRE,
	NPCD_WAND,
	NPCD_MAGIC,
	NPCD_HOOKSHOT,
	NPCD_HAMMER,
	NPCD_SWORD,
	NPCD_BEAM,
	NPCD_REFBEAM,
	NPCD_REFMAGIC,
	NPCD_REFFIREBALL,
	NPCD_REFROCK,
	NPCD_STOMP,
	NPCD_BYRNA,
	NPCD_SCRIPT,

	NPCD_SCRIPT1 = 20,
	NPCD_SCRIPT2,
	NPCD_SCRIPT3,
	NPCD_SCRIPT4,
	NPCD_SCRIPT5,
	NPCD_SCRIPT6,
	NPCD_SCRIPT7,
	NPCD_SCRIPT8,
	NPCD_SCRIPT9,
	NPCD_SCRIPT10,

	NPCD_WHISTLE = 35,
	NPCD_SWITCHHOOK,
	NPCD_THROWN,
	NPCD_REFARROW,
	NPCD_REFFIRE,
	NPCD_REFFIRE2
};

// Use as value type for npc->Defense[].
enum NpcDefenseType
{
	NPCDT_NONE,
	NPCDT_HALFDAMAGE,
	NPCDT_QUARTERDAMAGE,
	NPCDT_STUN,
	NPCDT_STUNORBLOCK,
	NPCDT_STUNORIGNORE,
	NPCDT_BLOCK1,
	NPCDT_BLOCK2,
	NPCDT_BLOCK4,
	NPCDT_BLOCK6,
	NPCDT_BLOCK8,
	NPCDT_BLOCK,
	NPCDT_IGNORE1,
	NPCDT_IGNORE,
	NPCDT_ONEHITKILL,
	NPCDT_BLOCK10,
	NPCDT_2XDAMAGE,
	NPCDT_3XDAMAGE,
	NPCDT_4XDAMAGE,
	NPCDT_HEAL,
	NPCDT_TRIGGERSECRETS,

	NPCDT_SWITCH = 50
};

// Enemy projectile weapon selections. Use with npc->Weapon.
// Note: Don't use these with Screen->CreateEWeapon! Use the `EW_` constants instead.
// Use WeaponTypeToID to convert this enum to a `EW_` value.
enum NpcWeapon {
	WPN_NONE              = 0,
	WPN_ENEMYFLAME        = 140,
	WPN_ENEMYWIND         = 141,
	WPN_ENEMYFIREBALL     = 129,
	WPN_ENEMYARROW        = 130,
	WPN_ENEMYBRANG        = 131,
	WPN_ENEMYSWORD        = 132,
	WPN_ENEMYROCK         = 133,
	WPN_ENEMYMAGIC        = 134,
	WPN_ENEMYBOMB         = 135,
	WPN_ENEMYSBOMB        = 136,
	WPN_ENEMYLITBOMB      = 137,
	WPN_ENEMYLITSBOMB     = 138,
	WPN_ENEMYFIRETRAIL    = 139,
	WPN_ENEMYFLAME2       = 142,
	WPN_ENEMYFLAME2TRAIL  = 143, // Not implemented
	WPN_ENEMYICE          = 144, // Not implemented
	WPN_ENEMYFIREBALL2    = 145  // A fireball that doesn't fly toward Link
};

// Default item drop sets.
enum ItemSet {
	IS_NONE,
	IS_DEFAULT,
	IS_BOMBS,
	IS_MONEY,
	IS_LIFE,
	IS_BOMB100, // Used by Dodongos
	IS_SBOMB100, // Used by Dodongos
	IS_MAGIC,
	IS_MAGICBOMBS,
	IS_MAGICMONEY,
	IS_MAGICLIFE,
	IS_MAGIC2,
	IS_COMBOS // Used by Tall Grass / Bush / Slash combos.
};

// Boss palettes.
enum BossPal
{
	BPAL_AQUA,
	BPAL_GLEEOK,
	BPAL_DODONGO,
	BPAL_GANON,
	BPAL_BROWN,
	BPAL_PILE, // Used for the Dust Pile.
	BPAL_BLUE,
	BPAL_RED,
	BPAL_GOLD,
	BPAL_ICON1, // Used for Quest Icon 1.
	BPAL_ICON2, // Used for Quest Icon 2.
	BPAL_ICON3, // Used for Quest Icon 3.
	BPAL_ICON4, // Used for Quest Icon 4.
	BPAL_GLEEOKF,
	BPAL_FROZEN // Unused
};

enum NpcMoveFlagIndex
{
	NPCMV_OBEYS_GRAVITY,
	NPCMV_CAN_PITFALL,
	NPCMV_CAN_PIT_WALK,
	NPCMV_CAN_WATERDROWN,
	NPCMV_CAN_WATER_WALK,
	NPCMV_ONLY_WATER_WALK,
	NPCMV_ONLY_SHALLOW_WATER_WALK,
	NPCMV_ONLY_PIT_WALK,
	NPCMV_NO_FAKE_Z,
	NPCMV_NO_REAL_Z,
	NPCMV_USE_FAKE_Z,
	NPCMV_IGNORE_SOLIDITY,
	NPCMV_IGNORE_BLOCKFLAGS,
	NPCMV_IGNORE_SCREENEDGE,
	NPCMV_USE_SCRIPTED_MOVEMENT_ENGINE,
	NPCMV_NOT_PUSHABLE_BY_SOLIDS
};

enum NpcShieldIndex
{
	SHLD_FRONT,
	SHLD_BACK,
	SHLD_LEFT,
	SHLD_RIGHT,
	SHLD_CAN_BREAK
};

enum NpcFade
{
	NPCF_NONE,
	NPCF_FLICKER,
	NPCF_INVISIBLE,
	NPCF_FLASH,
	NPCF_POOF
};

// @zasm_ref REFNPC
class npc {
	// @delete
	internal npc();

	// @zasm_var NPCX
	internal int X;

	// @zasm_var NPCY
	internal int Y;

	// @zasm_var NPCZ
	internal int Z;

	// The current frame of the npc's animation.
	//
	// @zasm_var NPCFRAME
	internal int Frame;

	// Returns the max number of npcs currently allowed.
	//
	// @zasm_var SPRITEMAXNPC
	internal int Max;

	// The npc's upward velocity, in pixels per frame. Affected by gravity each
	// frame, if gravity is enabled for this npc.
	//
	// @zasm_var NPCJUMP
	internal int Jump;

	// The npc's direction.
	//
	// @zasm_var NPCDIR
	internal int Dir;

	// The timer used for enemy knockback.
	// The first byte is the clock.
	// The second byte is the dir.
	// Enemies that split do not slide.
	//
	// @zasm_var NPCSLIDECLK
	internal int SlideClock;

	// The death effect for the npc.
	//
	// Valid values: [NpcFade] (`NPCF_`).
	//
	// @zasm_var NPCFADING
	internal int Fading;

	// @zasm_var NPCRATE
	internal int Rate;

	// @zasm_var NPCHOMING
	internal int Homing;

	// @zasm_var NPCSTEP
	internal int Step;

	// @zasm_var NPCFRAMERATE
	internal int ASpeed;

	// The clock for how long an npc is halted.
	//
	// @zasm_var NPCHALTCLK
	internal int Halt;

	// The movement status of an npc, usually flying.
	//
	// See enum NPCMoveStatus in <std.zh>.
	//
	// @zasm_var NPCMOVESTATUS
	internal int MoveStatus;

	// @zasm_var NPCHALTRATE
	internal int Haltrate;

	// Corresponds to the Enemy Editor Random Rate value.
	//
	// @zasm_var NPCRANDOM
	internal int Random;

	// @zasm_var NPCDRAWTYPE
	internal int DrawStyle;

	// @zasm_var NPCHP
	internal int HP;

	// The enemy ID of the enemy.
	//
	// @zasm_var NPCID
	internal const int ID;

	// The type, or 'enemy class' of the enemy.
	//
	// Valid values: [NpcType] (`NPCT_`).
	//
	// @zasm_var NPCTYPE
	internal int Type;

	// The type, or 'enemy class' of the enemy. Same as [Type].
	//
	// Valid values: [NpcType] (`NPCT_`).
	//
	// @zasm_var NPCTYPE
	internal int Family;

	// @zasm_var NPCDP
	internal int Damage;

	// @zasm_var NPCWDP
	internal int WeaponDamage;

	// @zasm_var NPCTILE
	internal int Tile;

	// If set to 0 or higher, then the npc will be drawn with this tile.
	//
	// The default value for this is -1.
	//
	// @zasm_var NPCSCRIPTTILE
	internal int ScriptTile;

	// If set to 0, or higher, then the engine will use this Flip state to draw
	// the npc.
	//
	// The default value for this is -1.
	//
	// @zasm_var NPCSCRIPTFLIP
	internal int ScriptFlip;

	// @zasm_var NPCOTILE
	internal int OriginalTile;

	// Valid values: [NpcWeapon] (`WPN_`).
	//
	// @zasm_var NPCWEAPON
	internal int Weapon;

	// The Dropset ID that this enemy will drop from when killed.
	//
	// Valid values: [ItemSet] (`IS_`).
	//
	// @zasm_var NPCITEMSET
	internal int ItemSet;

	// Alias for npc->ItemSet.
	//
	// Read or write the item dropset used by the npc.
	//
	// @zasm_var NPCITEMSET
	internal int Dropset;

	// @zasm_var NPCCSET
	internal int CSet;

	// Valid values: [BossPal] (`BPAL_`).
	//
	// @zasm_var NPCBOSSPAL
	internal BossPal BossPal;

	// @zasm_var NPCBGSFX
	internal int SFX;

	// If the sprite should be extended (large). Set to 3 to extend, 0
	// otherwise.
	//
	// @zasm_var NPCEXTEND
	internal int Extend;

	// The width/height of the hitbox, in pixels.
	//
	// @zasm_var NPCHXSZ
	internal int HitWidth;

	// The width/height of the hitbox, in pixels.
	//
	// @zasm_var NPCHYSZ
	internal int HitHeight;

	// The height of the hitbox in the Z-axis, in pixels.
	//
	// @zasm_var NPCHZSZ
	internal int HitZHeight;

	// The width/height of the sprite's graphic, in tiles.
	//
	// @zasm_var NPCTXSZ
	internal int TileWidth;

	// The width/height of the sprite's graphic, in tiles.
	//
	// @zasm_var NPCTYSZ
	internal int TileHeight;

	// The visual offset, in pixels.
	//
	// @zasm_var NPCXOFS
	internal int DrawXOffset;

	// The visual offset, in pixels.
	//
	// @zasm_var NPCYOFS
	internal int DrawYOffset;

	// the weapon's total visual Y-offset.
	//
	// @zasm_var NPCTOTALDYOFFS
	internal const int TotalDYOffset;

	// The Z offset, in pixels.
	//
	// @zasm_var NPCZOFS
	internal int DrawZOffset;

	// The hitbox offset, in pixels.
	//
	// @zasm_var NPCHXOFS
	internal int HitXOffset;

	// The hitbox offset, in pixels.
	//
	// @zasm_var NPCHYOFS
	internal int HitYOffset;

	// An array of misc values for script use.
	//
	// @zasm_var NPCMISCD
	internal untyped Misc[];

	// The 8 InitD[] arguments for the npc script.
	//
	// @zasm_var NPCINITD
	internal untyped InitD[];

	// Expanded to size [32], and made datatype-insensitive.
	//
	// @zasm_var NPCDD
	internal untyped Attributes[];

	// @zasm_var NPCMFLAGS
	internal int MiscFlags;

	// @zasm_var NPCCOLLDET
	internal bool CollDetection;

	// If false, gravity will not affect this npc.
	//
	// @zasm_var NPCGRAVITY
	internal bool Gravity;

	// If the engine should animate the npc's graphics.
	//
	// @zasm_var NPCENGINEANIMATE
	internal bool Animation;

	// The duration the npc is stunned for. If 0, the npc is not stunned.
	//
	// @zasm_var NPCSTUN
	internal int Stun;

	// This returns true if the NPC is the core segment of a segmented engine
	// enemy.
	//
	// @zasm_var NPCISCORE
	internal bool Core;

	// Expanded to a size of 42 to cover new defense categories.
	//
	// Valid indices are [NpcDefenseIndex] (`NPCD_`).
	// Valid values: [NpcDefenseType] (`NPCDT_`).
	//
	// @zasm_var NPCDEFENSED
	internal int Defense[];

	// Stores the ID/UIDs of objects that hurt the npc this frame.
	//
	// Indices:
	//
	// The first four indices are for the *screen index* of objects:
	//
	// Description		Index	Status
	// - HIT_BY_NPC 		[0] 	Not used at this time.
	// - HIT_BY_EWEAPON 	[1] 	Not used at this time.
	// - HIT_BY_LWEAPON 	[2]	    In use by the engine.
	// - HIT_BY_FFC 		[3] 	Not used at this time.
	//
	// The next four, are for the FFCore 'script' UIDs of objects:
	//
	// Description		Index	Status
	// - HIT_BY_NPC_UID 	[4] 	Not used at this time.
	// - HIT_BY_EWEAPON_UID [5] 	Not used at this time.
	// - HIT_BY_LWEAPON_UID [6]	    In use by the engine.
	// - HIT_BY_FFC_UID 	[7] 	Not used at this time.
	//
	// The last two, are reserved for special damage-object types.
	//
	// Description		Index	Status
	// - HIT_BY_COMBO 	[8]	Not used at this time.
	// - HIT_BY_MAPFLAG [9] Not used at this time.
	//
	// These indices are uniform across all HitBy[] array members, for any
	// datatype with that member.
	//
	// Some lweapons, notably some melee weapons such as swords (but not sword
	// beams), and boomerangs are not yet implemented in this mechanic.
	//
	// @zasm_var NPCHITBY
	internal untyped HitBy[];

	// @zasm_var NPCHUNGER
	internal int Hunger;

	// The sprite (Quest->Graphics->Sprites->Weapons) used to draw the weapon
	// fired by the npc.
	//
	// @zasm_var NPCWEAPSPRITE
	internal int WeaponSprite;

	// The sfx (Quest->Audio->SFXData) used whenever the npc fires its weapon.
	// If WeaponSFX <= 0 no sound will be played.
	//
	// @zasm_var NPCFIRESFX
	internal int WeaponSFX;

	// @zasm_var NPCSCRDEFENSED
	internal int ScriptDefense[];

	// Returns the number of remaining invincibility frames if the enemy is
	// invincible, otherwise 0.
	//
	// @zasm_var NPCINVINC
	internal int InvFrames;

	// Returns if the enemy is invincible, because of ( superman variable ).
	//
	// @zasm_var NPCSUPERMAN
	internal int Invincible;

	// If true, the enemy is a Ringleader, and killing this npc will kill every
	// npc in the room.
	//
	// @zasm_var NPCRINGLEAD
	internal bool Ringleader;

	// True if the enemy is carrying an item.
	//
	// @zasm_var NPCHASITEM
	internal bool HasItem;

	// Flags related to the enemy's shield.
	//
	// Valid indices are [NpcShieldIndex] (`SHLD_`).
	//
	// @zasm_var NPCSHIELD
	internal bool Shield[];

	// @zasm_var NPCBEHAVIOUR
	internal bool BFlags[];

	// Returns a direction constant if the npc is being knocked back.
	//
	// Returns -1 if the npc is not being knockd back.
	//
	// Writing to this has no effect, and is ignored.
	//
	// This value is set both from engine, and from scripted knockback.
	//
	// @zasm_var NPCHITDIR
	internal int HitDir;

	// The npc script running on this npc.
	//
	// @zasm_var NPCSCRIPT
	internal int Script;

	// The rotation factor for this sprited object, in degrees.
	//
	// You can only rotate sprites if you disable the Compatibility Quest rule
	//
	// 'Old (Faster) Sprite Drawing'.
	//
	// @zasm_var NPCROTATION
	internal int Rotation;

	// The scale factor for this sprited object.
	// Scale values are a multiplier: 1.5 == 50% larger (150%).
	// A scale of 0 and a scale of 1 are identical.
	// Negative values are undefined.
	// You can only scale sprites if you disable the Compatibility Quest rule
	// 'Old (Faster) Sprite Drawing'.
	//
	// @zasm_var NPCSCALE
	internal int Scale;

	// If true, the enemy will not 'die' even if it has 0hp or is too far
	// off-screen.
	//
	// [Remove()] will still delete the npc.
	//
	// @zasm_var NPCIMMORTAL
	internal bool Immortal;

	// False by default. If set to 'true', engine knockback is ignored.
	//
	// @zasm_var NPCNOSLIDE
	internal bool NoSlide;

	// False by default. If set to 'true', scripted knockback via
	// 'npc->Knockback()' is ignored.
	//
	// @zasm_var NPCNOSCRIPTKB
	internal bool NoScriptKnockback;

	// The number of pixels engine knockback moves the enemy at a time.
	// Default 4.
	//
	// @zasm_var NPCKNOCKBACKSPEED
	internal int SlideSpeed;

	// The timer indicating how long left the sprite will be falling. If 0, the
	// sprite is not falling. Max value of 70, which is the value at the start
	// of falling.
	//
	// @zasm_var NPCFALLCLK
	internal int Falling;

	// The pitfall combo the sprite is falling into, if it is falling.
	//
	// @zasm_var NPCFALLCMB
	internal int FallCombo;

	// The movement flags of the npc.
	//
	// Valid indices are [NpcMoveFlagIndex] (`NPCMV_`).
	//
	// @zasm_var NPCMOVEFLAGS
	internal bool MoveFlags[];

	// The radius of light this object emits in a dark room
	//
	// @zasm_var NPCGLOWRAD
	internal int LightRadius;

	// The shape of light this object emits in a dark room.
	//
	// @zasm_var NPCGLOWSHP
	internal int LightShape;

	// The shadow sprite used by the npc, 0-255
	//
	// @zasm_var NPCSHADOWSPR
	internal int ShadowSprite;

	// The spawn sprite used by the npc, 0-255
	//
	// @zasm_var NPCSPAWNSPR
	internal int SpawnSprite;

	// The death sprite used by the npc, 0-255
	//
	// @zasm_var NPCDEATHSPR
	internal int DeathSprite;

	// If the sprite is currently being switch-hooked.
	//
	// @zasm_var NPCSWHOOKED
	internal bool SwitchHooked;

	// If set false, the npc will neither flash, nor flicker when invincible.
	//
	// @zasm_var NPCCANFLICKER
	internal bool InvFlicker;

	// The timer indicating how long left the sprite will be drowning. If 0, the
	// sprite is not drowning. Max value of 64, which is the value at the start
	// of drowning.
	//
	// @zasm_var NPCDROWNCLK
	internal int Drowning;

	// The liquid combo the sprite is drowning in, if it is drowning.
	//
	// @zasm_var NPCDROWNCMB
	internal int DrownCombo;

	// The position of the npc on the FakeZ axis.
	//
	// @zasm_var NPCFAKEZ
	internal int FakeZ;

	// The velocity of the npc in the FakeZ axis.
	//
	// @zasm_var NPCFAKEJUMP
	internal int FakeJump;

	// @zasm_var NPCSHADOWXOFS
	internal int ShadowXOffset;

	// @zasm_var NPCSHADOWYOFS
	internal int ShadowYOffset;

	// This sets what color the enemy is drawn when flickering.
	//
	// @zasm_var NPCFLICKERCOLOR
	internal int FlickerColor;

	// This sets how many times the transparency effect is applied to the
	// enemy's flicker effect.
	//
	// @zasm_var NPCFLICKERTRANSP
	internal int FlickerTransparencyPasses;

	// This returns the enemy's current displayed cset when taking damage or
	// invincible. If not in one of these states, will return its normal cset.
	//
	// @zasm_var NPCFLASHINGCSET
	internal const int FlashingCSet;

	// @zasm_var NPCFROZEN
	internal int Frozen;

	// @zasm_var NPCFROZENTILE
	internal int FrozenTile;

	// @zasm_var NPCFROZENCSET
	internal int FrozenCSet;

	// @deprecated
	// @zasm_var NPCSCRIPTUID
	internal const int UID;

	// @deprecated
	// @zasm_var NPCPARENTUID
	internal int ParentUID;

	// Returns the max number of npcs currently allowed.
	//
	// @deprecated Use [Max] instead!
	// @zasm
	//   POP REFNPC
	//   SETR D2 SPRITEMAXNPC
	internal int Max();

	// Sets the max number of npcs allowed to a new value. Range `1-1024`.
	//
	// @deprecated Use [Max] instead!
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   SETR SPRITEMAXNPC D2
	internal void Max(int value);

	// Returns true if this pointer points to a valid npc. If this returns
	// false, using any other value of this pointer will error.
	//
	// @zasm
	//   POP D2
	//   ISVALIDNPC D2
	internal bool isValid();

	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCEXPLODER D2
	internal void Explode(int arg1);

	// Returns true if the npc is submerged (ex. underground/underwater)
	//
	// @zasm
	//   POP REFNPC
	//   SETR D2 NPCSUBMERGED
	internal bool Submerged();

	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCNAME D2
	internal void GetName(char32[] buffer);

	// @zasm
	//   POP D2
	//   BREAKSHIELD D2
	internal void BreakShield();

	// Returns if the NPC is dead, or dying
	//
	// @zasm
	//   POP REFNPC
	//   NPCDEAD D2
	internal bool isDead();

	// Unimplemented
	//
	// @zasm
	//   POP REFNPC
	//   NPCCANSLIDE D2
	internal bool CanSlide();

	// Run Engine knockback (Only does anything if a knockback is in-progress)
	//
	// This is automatically called for most engine enemy types
	//
	// Calling this from enemy types such as 'Other' will allow them to recieve
	// knockback
	//
	// This is called as a part of scripted walking functions, such as
	// 'ConstantWalk()', automatically.
	//
	// Return: 0 if no knockback occurred, 1 if scripted knockback
	// ('->Knockback()') occurred, 2 if engine knockback occurred.
	//
	// @zasm
	//   POP REFNPC
	//   NPCSLIDE D2
	internal bool Slide();

	// Instantly DELETES an npc. No items will be dropped, no sound will play;
	// the npc is simply DELETED OUTRIGHT.
	//
	// This will immediately invalidate the npc pointer, as well as update
	// 'Screen->NumNPCs()', and change the indexes for 'Screen->LoadNPC()'
	//
	// If called from an NPC script on the NPC running the script, immediately
	// terminates the script.
	//
	// @zasm
	//   POP REFNPC
	//   NPCKICKBUCKET
	internal void Remove();

	// Stops the background sounds that the npc is generating.
	//
	// @zasm
	//   POP REFNPC
	//   NPCSTOPBGSFX
	internal void StopBGSFX();

	// Causes the npc to attack with its weapon.
	//
	// @zasm
	//   POP REFNPC
	//   NPCATTACK
	internal void Attack();

	// The npc chooses a new direction.
	//
	// Uses an array literal for its args:
	//
	// { int rate, int homing, int special }
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCNEWDIR D2
	internal void NewDir(int arr);

	// Causes the npc to walk.
	//
	// Uses an array literal for its args.
	//
	// Pass NULL as the pointer to run without args, or use:
	//
	// {int rate, int homing, int special}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCCONSTWALK D2
	internal void ConstantWalk(int arr);

	// As ConstantWalk(), but 8-directions.
	//
	// {int rate, int homing, int special}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCCONSTWALK8 D2
	internal void ConstantWalk8(int arr);

	// Causes the npc to walk and occasionally change speed.
	//
	// {int rate, int homing, int special}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCVARWALK D2
	internal void VariableWalk(int arr);

	// As VariableWalk(), but 8-directions.
	//
	// {int rate, int homing, int newclk, int special}
	//
	// {int rate, int homing, int newclk, int special, int dx1, int dy1, int
	// dx2, int dy2}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCVARWALK8 D2
	internal void VariableWalk8(int arr);

	// Causes an enemy to walk, and occasionally halt.
	//
	// {int rate, int homing, int special, int hrate, int haltcnt}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCHALTWALK D2
	internal void HaltingWalk(int arr);

	// As HaltingWalk(), but 8-directions.
	//
	// {int newrate, int newhoming, int newclk, int special, int newhrate, int
	// haltcnt}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCHALTWALK8 D2
	internal void HaltingWalk8(int arr);

	// Causes an enemy to move, ignoring solidity on the screen.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCFLOATWALK D2
	internal void FloatingWalk(int arr);

	// Fires the breath weapon set to the enemy.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCFIREBREATH D2
	internal void BreathAttack(bool seeklink = false);

	// As NewDir(), but 8-directions.
	//
	// {int rate, int homing, int special}
	//
	// {int rate, int homing, int special, int dx1, int dy1, int dx2, int dy2}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCNEWDIR8 D2
	internal void NewDir8(int arr);

	// Returns if either an object is colliding with the npc, or if an arbitrary
	// set of
	//
	// coordinates would collide.
	//
	// Valid Object Types:
	//
	// obj_type_lweapon, obj_type_eweapon, obj_type_npc, obj_type_link,
	// obj_type_ffc, obj_type_combo_pos, obj_type_item
	//
	// ** Not fully implemented!
	//
	// @zasm
	//   POP D1
	//   POP D0
	//   POP REFNPC
	//   SETR D2 NPCCOLLISION
	internal bool Collision(int obj_type, untyped obj_pointer);

	// Checks if enemy is lined up with Link.
	//
	// If so, returns direction Link is at as compared to enemy.
	//
	// Returns -1 if not lined up. Range is inclusive.
	//
	// @zasm
	//   POP D1
	//   POP D0
	//   POP REFNPC
	//   SETR D2 NPCLINEDUP
	internal int LinedUp(int range, bool dir8 = false);

	// Returns true if Link is within 'range' pixels of the enemy.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCLINKINRANGE D2
	internal bool LinkInRange(int dist_in_pixels);

	// Returns true if the npc can move in a given direction.
	//
	// Uses an array literal for varying args.
	//
	// Overloaded for a number of options:
	//
	// {int dir}: Dir only, should use the default step distance.
	//
	// {int dir, int special}
	//
	// {int ndir, int step, int special}
	//
	// {int ndir,int step,int special,int dx1,int dy1,int dx2,int dy2}
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCCANMOVE D2
	internal bool CanMove(int array);

	// Simulates hitting the npc with a weapon, another sprite, or an arbitrary
	// set of
	//
	// values passed as an overloaded array literal.
	//
	// Returns true if that object would hit the npc.
	//
	// {TYPE, pointer} : Specify the type, such as PTR_TYPE_LWEAPON, then pass
	// an object pointer.
	//
	// {int tx, int ty, int tz, int txsz, int tysz, int tzsz} : Arbitrary
	// values.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCHITWITH D2
	internal bool SimulateHit(int array);

	// Similar to Screen->CreateNPC(), except:
	//
	// (1) It uses an arry literal for its args, with varying size.
	//
	// (2) You can either create an npc only by its ID, or you can do
	//
	// that and set its spawn coordinates at the same time.
	//
	// (3) It works based on an existing pointer, such as:
	//
	// npc n; n->Create{args});
	//
	// { int id }
	//
	// { int id, int x, int y }
	//
	// @reassign_ptr
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   NPCADD D2
	internal npc Create(int array);

	// Attempt to knock back the npc in 'dir' direction, for 'time' frames, at a
	// rate of 'speed' pixels per frame.
	//
	// @zasm
	//   POP D0
	//   POP D3
	//   POP D2
	//   POP REFNPC
	//   NPCKNOCKBACK D2 D3
	internal bool Knockback(int time, int dir, int speed = 4);

	// Switch the player with this sprite.
	//
	// Valid values for [effect] is [SwitchEffect] (`SW_EFF_`).
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   SWITCHNPC D2
	internal bool Switch(int effect);

	// Returns true if the enemy is in a state in which it should not be allowed
	// to move (ex. spawning, dying, stunned, time frozen by clock)
	//
	// @zasm
	//   POP REFNPC
	//   NPCMOVEPAUSED
	internal bool MovePaused();

	// Attempts to move the enemy by 'pxamnt' pixels in the 'dir' direction,
	// failing if it is blocked by something it cannot walk through.
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   POP D0
	//   POP REFNPC
	//   NPCMOVE
	internal bool Move(int dir, int pxamnt, int special = 0);

	// Attempts to move the enemy by 'pxamnt' pixels in the 'degrees' angle,
	// failing if it is blocked by something it cannot walk through.
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   POP D0
	//   POP REFNPC
	//   NPCMOVEANGLE
	internal bool MoveAtAngle(int degrees, int pxamnt, int special = 0);

	// Attempts to move the enemy by 'dx' in the x direction and 'dy' in the y
	// direction, failing if it is blocked by something it cannot walk through.
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   POP D0
	//   POP REFNPC
	//   NPCMOVEXY
	internal bool MoveXY(int dx, int dy, int special = 0);

	// Attempts to move the enemy by 'pxamnt' pixels in the 'dir' direction,
	// failing if it is blocked by something it cannot walk through.
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   POP D0
	//   POP REFNPC
	//   NPCCANMOVEDIR
	internal bool CanMove(int dir, int pxamnt, int special = 0);

	// Attempts to move the enemy by 'pxamnt' pixels in the 'degrees' angle,
	// failing if it is blocked by something it cannot walk through.
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   POP D0
	//   POP REFNPC
	//   NPCCANMOVEANGLE
	internal bool CanMoveAtAngle(int degrees, int pxamnt, int special = 0);

	// Attempts to move the enemy by 'dx' in the x direction and 'dy' in the y
	// direction, failing if it is blocked by something it cannot walk through.
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   POP D0
	//   POP REFNPC
	//   NPCCANMOVEXY
	internal bool CanMoveXY(int dx, int dy, int special = 0);

	// Checks if the enemy could be arbitrarily placed (teleported) at 'nx,ny'.
	//
	// If 'nw' or 'nh' are > -1, they will be used as the width/height of the
	// enemy for the check.
	//
	// Otherwise, the enemy's hitwidth/hitheight are used.
	//
	// Some enemies treat pits/liquid as solid, EXCEPT if they are being knocked
	// back.
	//
	// 'bool knockback' here affects this for the placement checks.
	//
	// Use the 'SPW_' constants to provide a special value;
	//
	// i.e. 'SPW_FLOATER' for flying enemies.
	//
	// Use 'SPW_NONE' if you don't know what to use.
	//
	// Returns true if the enemy could be placed successfully, false otherwise.
	//
	// @zasm
	//   NPCCANPLACE
	//   POPARGS D5 0.0007
	internal bool CanPlace(int nx, int ny, int special = 0,
						   bool knockback = false, int nw = -1, int nh = -1);

	// This returns true if the enemy is currently in a flicker frame (either
	// invisible or color masked).
	//
	// @zasm
	//   POP REFNPC
	//   NPCISFLICKERFRAME
	internal bool isFlickerFrame();

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_BITMAP D2 0.0007
	internal void Own(bitmap b);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_PALDATA D2 0.0007
	internal void Own(paldata b);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_FILE D2 0.0007
	internal void Own(file b);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_DIR D2 0.0007
	internal void Own(directory b);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_STACK D2 0.0007
	internal void Own(stack b);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_RNG D2 0.0007
	internal void Own(randgen b);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_ARRAY D2 0.0007
	internal void OwnArray(untyped array);

	// Grants 'Ownership' of the parameter object to the npc.
	//
	// @zasm
	//   POP D2
	//   POP REFNPC
	//   OBJ_OWN_CLASS D2 0.0007
	internal void OwnObject(untyped object);
}
