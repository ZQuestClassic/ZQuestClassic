class Input {
	// @delete
	internal Input();

	// Whether the given button (`CB_` constants) is down (or 'pressed').
	//
	// @zasm_var BUTTONPRESS
	internal bool Press[];

	// Whether the given button (`CB_` constants) is down (or 'pressed').
	//
	// @zasm_var BUTTONINPUT
	internal bool Button[];

	// Returns true if the respective key was just pressed this frame (similar
	// to [Press], but for keys instead of buttons).
	//
	// @zasm_var KEYPRESS
	internal bool KeyPress[];

	// Returns true if the respective key is down this frame (similar to
	// [Button], but for keys instead of buttons).
	//
	// @zasm_var KEYINPUT
	internal bool Key[];

	// @zasm_var MOUSEARR
	internal untyped Mouse[];

	// For each index (using `CB_` constants to access), the keyboard key
	// (`KEY_` constants) that is bound to that button.
	//
	// @zasm_var KEYBINDINGS
	internal int KeyBindings[];

	// Returns the modifier keys as a bitwise flagset.
	//
	// @zasm_var KEYMODIFIERS
	internal int ModifierKeys;

	// Whether a given keyboard key (`KEY_` constants) is disabled from having
	// any in-engine effect.
	//
	// @zasm_var DISABLEKEY
	internal bool DisableKey[];

	// Whether a given button (`CB_` constants) is disabled from having any
	// in-engine effect.
	//
	// @zasm_var DISABLEBUTTON
	internal bool DisableButton[];

	// Similar to Press, except that it only returns presses from a joystick
	// device, not a keyboard.
	//
	// Use the `CB_` constants to access this array.
	//
	// @zasm_var JOYPADPRESS
	internal const bool Joypad[];

	// @deprecated Use [KeyPress] instead!
	// @zasm_var READKEY
	internal const bool ReadKey[];

	// @deprecated Use [Button] instead!
	// @zasm_var BUTTONHELD
	internal bool Hold[];

	// @deprecated Unsafe!
	// @zasm_var RAWKEY
	internal bool KeyRaw[];
}

internal const Input Input;
