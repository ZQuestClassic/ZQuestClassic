// Controller buttons.
enum Button
{
	CB_UP                          = 0,
	CB_DOWN                        = 1,
	CB_LEFT                        = 2,
	CB_RIGHT                       = 3,
	CB_A                           = 4,
	CB_B                           = 5,
	CB_START                       = 6,
	CB_L                           = 7,
	CB_R                           = 8,
	CB_MAP                         = 9,
	CB_EX1                         = 10,
	CB_X                           = 10,
	CB_EX2                         = 11,
	CB_Y                           = 11,
	CB_EX3                         = 12,
	CB_EX4                         = 13,
	CB_STICKUP                     = 14,
	CB_STICKDOWN                   = 15,
	CB_STICKLEFT                   = 16,
	CB_STICKRIGHT                  = 17,
	CB_AXIS_UP                     = 14,
	CB_AXIS_DOWN                   = 15,
	CB_AXIS_LEFT                   = 16,
	CB_AXIS_RIGHT                  = 17,
	CB_MAX                         = 18,
};

// Used with [Input->Mouse].
enum MouseIndex
{
	MOUSE_X                        = 0,
	MOUSE_Y                        = 1,
	MOUSE_Z                        = 2,
	MOUSE_LEFT                     = 3,
	MOUSE_RIGHT                    = 4,
	MOUSE_MIDDLE                   = 5,
};

enum KeyCode
{
	KEY_A            = 1,
	KEY_B            = 2,
	KEY_C            = 3,
	KEY_D            = 4,
	KEY_E            = 5,
	KEY_F            = 6,
	KEY_G            = 7,
	KEY_H            = 8,
	KEY_I            = 9,
	KEY_J            = 10,
	KEY_K            = 11,
	KEY_L            = 12,
	KEY_M            = 13,
	KEY_N            = 14,
	KEY_O            = 15,
	KEY_P            = 16,
	KEY_Q            = 17,
	KEY_R            = 18,
	KEY_S            = 19,
	KEY_T            = 20,
	KEY_U            = 21,
	KEY_V            = 22,
	KEY_W            = 23,
	KEY_X            = 24,
	KEY_Y            = 25,
	KEY_Z            = 26,
	KEY_0            = 27,
	KEY_1            = 28,
	KEY_2            = 29,
	KEY_3            = 30,
	KEY_4            = 31,
	KEY_5            = 32,
	KEY_6            = 33,
	KEY_7            = 34,
	KEY_8            = 35,
	KEY_9            = 36,
	KEY_0_PAD        = 37,
	KEY_1_PAD        = 38,
	KEY_2_PAD        = 39,
	KEY_3_PAD        = 40,
	KEY_4_PAD        = 41,
	KEY_5_PAD        = 42,
	KEY_6_PAD        = 43,
	KEY_7_PAD        = 44,
	KEY_8_PAD        = 45,
	KEY_9_PAD        = 46,
	KEY_F1           = 47,
	KEY_F2           = 48,
	KEY_F3           = 49,
	KEY_F4           = 50,
	KEY_F5           = 51,
	KEY_F6           = 52,
	KEY_F7           = 53,
	KEY_F8           = 54,
	KEY_F9           = 55,
	KEY_F10          = 56,
	KEY_F11          = 57,
	KEY_F12          = 58,
	KEY_ESC          = 59,
	KEY_TILDE        = 60,
	KEY_MINUS        = 61,
	KEY_EQUALS       = 62,
	KEY_BACKSPACE    = 63,
	KEY_TAB          = 64,
	KEY_OPENBRACE    = 65,
	KEY_CLOSEBRACE   = 66,
	KEY_ENTER        = 67,
	KEY_COLON        = 68,
	KEY_QUOTE        = 69,
	KEY_BACKSLASH    = 70,
	KEY_BACKSLASH2   = 71,
	KEY_COMMA        = 72,
	KEY_STOP         = 73,
	KEY_SLASH        = 74,
	KEY_SPACE        = 75,
	KEY_INSERT       = 76,
	KEY_DEL          = 77,
	KEY_HOME         = 78,
	KEY_END          = 79,
	KEY_PGUP         = 80,
	KEY_PGDN         = 81,
	KEY_LEFT         = 82,
	KEY_RIGHT        = 83,
	KEY_UP           = 84,
	KEY_DOWN         = 85,
	KEY_SLASH_PAD    = 86,
	KEY_ASTERISK     = 87,
	KEY_MINUS_PAD    = 88,
	KEY_PLUS_PAD     = 89,
	KEY_DEL_PAD      = 90,
	KEY_ENTER_PAD    = 91,
	KEY_PRTSCR       = 92,
	KEY_PAUSE        = 93,
	KEY_ABNT_C1      = 94,
	KEY_YEN          = 95,
	KEY_KANA         = 96,
	KEY_CONVERT      = 97,
	KEY_NOCONVERT    = 98,
	KEY_AT           = 99,
	KEY_CIRCUMFLEX   = 100,
	KEY_COLON2       = 101,
	KEY_KANJI        = 102,
	KEY_EQUALS_PAD   = 103,  /* MacOS X */
	KEY_BACKQUOTE    = 104,  /* MacOS X */
	KEY_SEMICOLON    = 105,  /* MacOS X */
	KEY_COMMAND      = 106,  /* MacOS X */
	KEY_UNKNOWN1     = 107,
	KEY_UNKNOWN2     = 108,
	KEY_UNKNOWN3     = 109,
	KEY_UNKNOWN4     = 110,
	KEY_UNKNOWN5     = 111,
	KEY_UNKNOWN6     = 112,
	KEY_UNKNOWN7     = 113,
	KEY_UNKNOWN8     = 114,

	KEY_MODIFIERS    = 115,

	KEY_LSHIFT       = 115,
	KEY_RSHIFT       = 116,
	KEY_LCONTROL     = 117,
	KEY_RCONTROL     = 118,
	KEY_ALT          = 119,
	KEY_ALTGR        = 120,
	KEY_LWIN         = 121,
	KEY_RWIN         = 122,
	KEY_MENU         = 123,
	KEY_SCRLOCK      = 124,
	KEY_NUMLOCK      = 125,
	KEY_CAPSLOCK     = 126,

	KEY_MAX          = 127,
};

@Bitflags("int")
enum KeyModifierBitflags
{
	KB_SHIFT_FLAG      = 0x0001,
	KB_CTRL_FLAG       = 0x0002,
	KB_ALT_FLAG        = 0x0004,
	KB_LWIN_FLAG       = 0x0008,
	KB_RWIN_FLAG       = 0x0010,
	KB_MENU_FLAG       = 0x0020,
	KB_COMMAND_FLAG    = 0x0040,
	KB_SCROLOCK_FLAG   = 0x0100,
	KB_NUMLOCK_FLAG    = 0x0200,
	KB_CAPSLOCK_FLAG   = 0x0400,
	KB_INALTSEQ_FLAG   = 0x0800,
	KB_ACCENT1_FLAG    = 0x1000,
	KB_ACCENT2_FLAG    = 0x2000,
	KB_ACCENT3_FLAG    = 0x4000,
	KB_ACCENT4_FLAG    = 0x8000,
};


// Contains variables related to button, mouse, and keyboard input.
//
// Access with `Input->`.
class Input {
	// @delete
	internal Input();

	// Whether the given button is down (or 'pressed').
	//
	// @index [enum Button]
	// @zasm_var BUTTONPRESS
	internal bool Press[];

	// Whether the given button is down (or 'pressed').
	//
	// @index [enum Button]
	// @zasm_var BUTTONINPUT
	internal bool Button[];

	// Returns true if the respective key was just pressed this frame.
	//
	// @index [enum KeyCode]
	// @zasm_var KEYPRESS
	internal bool KeyPress[];

	// Returns true if the respective key is down this frame.
	//
	// @index [enum KeyCode]
	// @zasm_var KEYINPUT
	internal bool Key[];

	// @index [enum MouseIndex]
	// @zasm_var MOUSEARR
	internal untyped Mouse[];

	// For each button, the keyboard key that is bound to that button.
	//
	// @index [enum Button]
	// @value [enum KeyCode]

	// @zasm_var KEYBINDINGS
	internal int KeyBindings[];

	// The state of the modifier keys.
	//
	// @value [enum KeyModifierBitflags]

	// @zasm_var KEYMODIFIERS
	internal int ModifierKeys;

	// Whether a given keyboard key is disabled from having
	// any in-engine effect.
	//
	// @index [enum KeyCode]
	// @zasm_var DISABLEKEY
	internal bool DisableKey[];

	// Whether a given button is disabled from having any in-engine effect.
	//
	// @index [enum Button]
	// @zasm_var DISABLEBUTTON
	internal bool DisableButton[];

	// Similar to [Press], except that it only returns presses from a joystick
	// device, not a keyboard.
	//
	// @index [enum Button]
	// @zasm_var JOYPADPRESS
	internal const bool Joypad[];

	// @deprecated Use [KeyPress] instead!
	// @zasm_var READKEY
	internal const bool ReadKey[];

	// @deprecated Use [Button] instead!
	// @zasm_var BUTTONHELD
	internal bool Hold[];

	// @deprecated Unsafe!
	// @zasm_var RAWKEY
	internal bool KeyRaw[];
}

internal const Input Input;
