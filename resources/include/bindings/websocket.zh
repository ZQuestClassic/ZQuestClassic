enum WebsocketState {
    WEBSOCKET_STATE_CONNECTING = 0L,
    WEBSOCKET_STATE_OPEN = 1L,
    WEBSOCKET_STATE_CLOSING = 2L,
    WEBSOCKET_STATE_CLOSED = 3L
};

enum WebsocketType {
    WEBSOCKET_MESSAGE_TYPE_TEXT = 1L,  // send text data
    WEBSOCKET_MESSAGE_TYPE_BINARY = 2L // send binary data
};

// @tutorial /tutorials/websockets
// @zasm_ref REFWEBSOCKET
class websocket {
	// @zasm
	//   POP D2
	//   WEBSOCKET_LOAD D2
	internal websocket(char32[] url);

	// Current state of the websocket.
	//
	// @zasm_var WEBSOCKET_STATE
	internal const WebsocketState State;

	// True if there is a message waiting to be received.
	//
	// @zasm_var WEBSOCKET_HAS_MESSAGE
	internal const bool HasMessage;

	// @zasm_var WEBSOCKET_MESSAGE_TYPE
	internal const WebsocketType MessageType;

	// @zasm_var WEBSOCKET_URL
	internal char32 URL;

	// Gets the current websocket error message (if any).
	//
	// @zasm
	//   POP D2
	//   POP REFWEBSOCKET
	//   WEBSOCKET_ERROR D2
	internal void GetError(char32[] buf);

	// Sends a message over the websocket.
	//
	// @zasm
	//   POP D2
	//   POP D3
	//   POP REFWEBSOCKET
	//   WEBSOCKET_SEND D2 D3
	internal void Send(char32[] buf, WebsocketType type = WEBSOCKET_MESSAGE_TYPE_TEXT);

	// If [HasMessage] is true, returns a pointer to the websocket's internal data array
	// representing the next message in the queue. If there is no message, returns NULL.
	//
	// Calling this function again will overwrite the contents of this array.
	//
	// The array is destroyed automatically when the websocket is freed.
	//
	// @zasm
	//   POP REFWEBSOCKET
	//   WEBSOCKET_RECEIVE D2
	internal untyped[] Receive();
	
	// DEPRECATED: This no longer does anything - objects are freed
	// automatically now.
	//
	// See "Object Memory Management" section
	//
	// This will deallocate the websocket pointer, so that the pointer ID may be
	// re-used.
	//
	// There is a limit to how many websocket pointers may be allocated at once,
	// so be sure to free them when you are no longer using them.
	//
	// @deprecated Free() no longer does anything as of ZC 3.0. Objects are now
	// freed automatically.
	// @zasm
	//   POP REFWEBSOCKET
	//   WEBSOCKET_FREE
	internal void Free();

	// Grants 'Ownership' of the pointer to the currently running script.
	//
	// *pre-3.0*: When the script terminates (at the same time any Local Arrays
	// in the script are cleared), the pointer will be automatically freed.
	//
	// See "Object Memory Management" section
	//
	// @zasm
	//   POP REFWEBSOCKET
	//   WEBSOCKET_OWN
	internal void Own();
}
