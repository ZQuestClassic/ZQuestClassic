// DMap Types for used with [dmapdata::Type]
enum DMapType
{
	DMAP_DUNGEON,
	DMAP_OVERWORLD,
	DMAP_CAVE,
	DMAP_BSOVERWORLD
};

// Used with [dmapdata::Flagset].
enum DMapFlag
{
	DMFS_CAVESNOTCELLARS,     //Use caves instead of item cellars
	DMFS_3STAIRWARPS,         //Allow 3-stair warps
	DMFS_WWIND,               //Allow whistle whirlwinds
	DMFS_GUYCAVES,            //Special rooms and guys are in caves only
	DMFS_NOCOMPASS,           //Don't display compass marker in minimap
	DMFS_WAVY,                //Underwater wave effect
	DMFS_WWINDRET,            //Whistle whirlwind returns Link to beginning
	DMFS_ALWAYSINTROMSG,      //Always display intro string
	DMFS_VIEWMAP,             //View overworld map by pressing 'Map'
	DMFS_DMAPMAP,             //...But only show screens marked in minimap
	DMFS_MINIMAPCOLORFIX,     //Use minimap foreground color 2
	DMFS_MINIMAPCOLOURFIX = DMFS_MINIMAPCOLORFIX,    //Use minimap foreground color 2
	DMFS_SCRIPT1,             //DMap Script Flag 1
	DMFS_SCRIPT2,             //DMap Script Flag 2
	DMFS_SCRIPT3,             //DMap Script Flag 3
	DMFS_SCRIPT4,             //DMap Script Flag 4
	DMFS_SCRIPT5,             //DMap Script Flag 5
	DMFS_RESERVED,            //RESERVED DO NOT USE
	DMFS_LAYER3ISBACKGROUND,  //Layer 3 is Background
	DMFS_LAYER2ISBACKGROUND,  //Layer 2 is Background
	DMFS_TRUECELLARENEMIES,   //True Cellar Enemies
	DMFS_BUNNY,               //Become Bunny with no Pearl
	DMFS_MIRRORCONTINUE,      //Mirror Continues instead of Warping
	DMFS_MAX
};

// Used with [Game->DMapFlags] and [dmapdata::Flags].
// @deprecated Use [DMapFlag] and [dmapdata::Flagset] instead!
@Bitflags("int")
enum DMapBitflags
{
	DMF_CAVESNOTCELLARS            = 0x0001,  // Use caves instead of item cellars.
	DMF_3STAIRWARPS                = 0x0002,  // Allow 3-stair warps.
	DMF_WWIND                      = 0x0004,  // Allow whistle whirlwinds.
	DMF_GUYCAVES                   = 0x0008,  // Special rooms and guys are in caves only.
	DMF_NOCOMPASS                  = 0x0010,  // Don't display compass marker in minimap.
	DMF_WAVY                       = 0x0020,  // Underwater wave effect.
	DMF_WWINDRET                   = 0x0040,  // Whistle whirlwind returns Link to beginning.
	DMF_ALWAYSINTROMSG             = 0x0080,  // Always display intro string.
	DMF_VIEWMAP                    = 0x0100,  // View overworld map by pressing 'Map'.
	DMF_DMAPMAP                    = 0x0200,  // ...But only show screens marked in minimap.
	DMF_MINIMAPCOLORFIX            = 0x0400,  // Use minimap foreground color 2.
	DMF_MINIMAPCOLOURFIX           = 0x0400,  // Use minimap foreground color 2.
	DMF_SCRIPT1                    = 0x0800,  // DMap Script Flags.
	DMF_SCRIPT2                    = 0x1000,
	DMF_SCRIPT3                    = 0x2000,
	DMF_SCRIPT4                    = 0x4000,
	DMF_SCRIPT5                    = 0x8000,
	DMF_SIDEVIEW                   = 0x10000,
	DMF_LAYER3ISBACKGROUND         = 0x20000,
};

@Bitflags("int")
enum DMapChartedBitflags
{
	CHRT_VISITED                   = 10000000b,
	CHRT_UP                        = 00000001b,
	CHRT_DOWN                      = 00000010b,
	CHRT_LEFT                      = 00000100b,
	CHRT_RIGHT                     = 00001000b,
};

// Load with [Game->LoadDMapData].
//
// @zasm_ref REFDMAPDATA
class dmapdata {
	// @delete
	internal dmapdata();

	// The DMap's ID number.
	//
	// @zasm_var DMAPDATAID
	internal const int ID;

	// Which map this DMap is associated with.
	//
	// @zasm_var DMAPDATAMAP
	internal int Map;

	// The Level Number of this dmap.
	//
	// @zasm_var DMAPDATALEVEL
	internal int Level;

	// The DMap offset.
	//
	// @zasm_var DMAPDATAOFFSET
	internal int Offset;

	// The compass marker and continue screen numbers.
	//
	// @zasm_var DMAPDATACOMPASS
	internal int Compass;

	// The level palette to use for this DMap
	//
	// @zasm_var DMAPDATAPALETTE
	internal int Palette;

	// The MIDI set to play on this dmap.
	//
	// @zasm_var DMAPDATAMIDI
	internal int MIDI;

	// The compass marker and continue screen numbers.
	//
	// @zasm_var DMAPDATACONTINUE
	internal int Continue;

	// @value [DMapType]
	// @zasm_var DMAPDATATYPE
	internal int Type;

	// The dmapdata script to run on this dmap.
	//
	// @zasm_var DMAPSCRIPT
	internal int Script;

	// The track number to use for enhanced music. See [GetMusic].
	//
	// @zasm_var DMAPDATAMUISCTRACK
	internal int MusicTrack;

	// Which engine active subscreen to use on this dmap.
	//
	// @zasm_var DMAPDATASUBSCRA
	internal int ActiveSubscreen;

	// Which engine passive subscreen to use on this dmap.
	//
	// @zasm_var DMAPDATASUBSCRP
	internal int PassiveSubscreen;

	// Which engine overlay subscreen to use on this dmap.
	//
	// @zasm_var DMAPDATASUBSCRO
	internal int OverlaySubscreen;

	// Bitwise values representing the state of the map grid.
	//
	// See [SetVisibleOnDungeonMap], [VisibleOnDungeonMap].
	//
	// @zasm_var DMAPDATAGRID
	internal int Grid[];

	// The tile used for the engine subscreen Small Map. The [0] index tile is
	// used without the dungeon map, and the [1] index with the dungeon map.
	//
	// @zasm_var DMAPDATAMINIMAPTILE
	internal int MiniMapTile[];

	// The csets used for the engine subscreen Small Map, to go along with the
	// MiniMapTile[].
	//
	// @zasm_var DMAPDATAMINIMAPCSET
	internal int MiniMapCSet[];

	// The 8 InitD values for the active dmap script.
	//
	// @zasm_var DMAPINITD
	internal int InitD[];

	// The tile used for the engine subscreen Large Map. The [0] index tile is
	// used without the dungeon map, and the [1] index with the dungeon map.
	//
	// @zasm_var DMAPDATALARGEMAPTILE
	internal int MapTile[];

	// The csets used for the engine subscreen Large Map, to go along with the
	// MapTile[].
	//
	// @zasm_var DMAPDATALARGEMAPCSET
	internal int MapCSet[];

	// If each item on the dmap is disabled.
	//
	// @zasm_var DMAPDATADISABLEDITEMS
	internal bool DisabledItems[];

	// All of the dmap's flags.
	//
	// @index [DMapFlag]
	// @zasm_var DMAPDATAFLAGARR
	internal int Flagset[];

	// If true, the dmap is treated as sideview by default; screens with the
	// sideview flag enabled will toggle sideview back *off*.
	//
	// @zasm_var DMAPDATASIDEVIEW
	internal bool Sideview;

	// Which dmapdata script to use as a replacement for the engine active
	// subscreen (0 for none).
	//
	// @zasm_var DMAPDATAASUBSCRIPT
	internal int ASubScript;

	// Which dmapdata script to run for passive subscreen draws.
	//
	// @zasm_var DMAPDATAPSUBSCRIPT
	internal int PSubScript;

	// The 8 InitD values shared by the Active and Passive Subscreen Scripts.
	//
	// @zasm_var DMAPDATASUBINITD
	internal untyped SubInitD[];

	// Which dmapdata script to use as a replacement for the engine fullscreen
	// map (0 for none).
	//
	// @zasm_var DMAPDATAMAPSCRIPT
	internal int MapScript;

	// The 8 InitD values used by the Map Script.
	//
	// @zasm_var DMAPDATAMAPINITD
	internal untyped MapInitD[];

	// Stores the large map exploration data for each screen on the dmap.
	//
	// <todo>Test if works on overworld dmaps.</todo>
	//
	// @zasm_var DMAPDATACHARTED
	internal int Charted[];

	// The DMap ID that using a Mirror will take you to. If this is `-1`,
	// Mirrors will not be able to warp you to another dmap. If the [Flagset]
	// 'Mirror Continues instead of Warping' is set, the mirror dmap setting is
	// not used.
	//
	// @zasm_var DMAPDATAMIRRDMAP
	internal int MirrorDMap;

	// The flags used by the DMap. These are OR'd together. See [DMapBitflags].
	//
	// @future_deprecated Use [Flagset] instead!
	// @value [DMapBitflags]
	// @zasm_var DMAPDATAFLAGS
	internal int Flags;

	// The starting loop point for enhanced music in seconds.
	//
	// @zasm_var DMAPDATALOOPSTART
	internal int MusicLoopStart;

	// The ending loop point for enhanced music in seconds.
	//
	// @zasm_var DMAPDATALOOPEND
	internal int MusicLoopEnd;

	// The number of frames enhanced music fades in for.
	//
	// @zasm_var DMAPDATAXFADEIN
	internal int MusicCrossfadeIn;

	// The number of frames enhanced music fades out for.
	//
	// @zasm_var DMAPDATAXFADEOUT
	internal int MusicCrossfadeOut;

	// The ID in the string editor for the dmap's intro string.
	//
	// @zasm_var DMAPDATAINTROSTRINGID
	internal int IntroStringID;

	// Fills the buffer with the dmap's name.
	//
	// @zasm
	//   POP D2
	//   POP REFDMAPDATA
	//   DMAPDATAGETNAMER D2
	internal void GetName(char32[] buffer);

	// Sets the DMap's name to the buffer contents.
	//
	// @zasm
	//   POP D2
	//   POP REFDMAPDATA
	//   DMAPDATASETNAMER D2
	internal void SetName(char32[] buffer);

	// Fills the buffer with the dmap's title.
	//
	// @zasm
	//   POP D2
	//   POP REFDMAPDATA
	//   DMAPDATAGETTITLER D2
	internal void GetTitle(char32[] buf);

	// Sets the DMap's title to the buffer contents.
	//
	// @zasm
	//   POP D2
	//   POP REFDMAPDATA
	//   DMAPDATASETTITLER D2
	internal void SetTitle(char32[] buf);

	// Fills the buffer with the dmap's intro.
	//
	// @zasm
	//   POP D2
	//   POP REFDMAPDATA
	//   DMAPDATAGETINTROR D2
	internal void GetIntro(char32[] buffer);

	// Sets the DMap's intro to the buffer contents.
	//
	// @zasm
	//   POP D2
	//   POP REFDMAPDATA
	//   DMAPDATANSETITROR D2
	internal void SetIntro(char32[] buffer);

	// Fills the buffer with the dmap's enhanced music filename. See
	// [MusicTrack].
	//
	// @zasm
	//   POP D2
	//   POP REFDMAPDATA
	//   DMAPDATAGETMUSICR D2
	internal void GetMusic(char32[] buffer);

	// Sets the DMap's enhanced music filename to the buffer contents. See
	// [MusicTrack].
	//
	// @zasm
	//   POP D2
	//   POP REFDMAPDATA
	//   DMAPDATASETMUSICR D2
	internal void SetMusic(char32[] filename);
}
