script typedef itemdata item;

// Item IDs. Used with [Screen->CreateItem] and [Hero->Item].
// These are DEFAULT values, and may not be correct for custom quests which
// have overridden item action data.
enum ItemID
{
	I_AMULET1                      = 50,
	I_AMULET2                      = 63,
	I_ARROW1                       = 13,
	I_ARROW2                       = 14,
	I_ARROW3                       = 57,
	I_ARROWAMMO1                   = 70,
	I_ARROWAMMO10                  = 72,
	I_ARROWAMMO30                  = 73,
	I_ARROWAMMO5                   = 71,
	I_BAIT                         = 16,
	I_BOMB                         = 3,
	I_BOMBAMMO1                    = 77,
	I_BOMBAMMO30                   = 80,
	I_BOMBAMMO4                    = 78,
	I_BOMBAMMO8                    = 79,
	I_BOMBBAG1                     = 81,
	I_BOMBBAG2                     = 82,
	I_BOMBBAG3                     = 83,
	I_BOMBBAG4                     = 106,
	I_BOOK                         = 32,
	I_BOOTS                        = 55,
	I_BOSSKEY                      = 67,
	I_BOW1                         = 15,
	I_BOW2                         = 68,
	I_BRACELET1                    = 107,
	I_BRACELET2                    = 19,
	I_BRACELET3                    = 56,
	I_BRANG1                       = 23,
	I_BRANG2                       = 24,
	I_BRANG3                       = 35,
	I_CANDLE1                      = 10,
	I_CANDLE2                      = 11,
	I_CBYRNA                       = 88,
	I_CHARGERING1                  = 101,
	I_CHARGERING2                  = 102,
	I_CLOCK                        = 4,
	I_COMPASS                      = 22,
	I_CROSSSCROLL                  = 95,
	I_DINSFIRE                     = 64,
	I_DUST_PILE                    = 43,
	I_FAIRY                        = 34,
	I_FAIRYSTILL                   = 69,
	I_FARORESWIND                  = 65,
	I_FLIPPERS                     = 51,
	I_HAMMER                       = 54,
	I_HCPIECE                      = 49,
	I_HEART                        = 2,
	I_HEARTCONTAINER               = 28,
	I_HEARTRING1                   = 112,
	I_HEARTRING2                   = 113,
	I_HEARTRING3                   = 114,
	I_HOOKSHOT1                    = 52,
	I_HOOKSHOT2                    = 89,
	I_HOVERBOOTS                   = 92,
	I_KEY                          = 9,
	I_KILLALL                      = 62,
	I_LADDER1                      = 27,
	I_LADDER2                      = 108,
	I_LENS                         = 53,
	I_LETTER                       = 12,
	I_LETTERUSED                   = 90,
	I_LEVELKEY                     = 84,
	I_MAGICCONTAINER               = 58,
	I_MAGICJAR1                    = 59,
	I_MAGICJAR2                    = 60,
	I_MAGICKEY                     = 33,
	I_MAGICRING1                   = 115,
	I_MAGICRING2                   = 116,
	I_MAGICRING3                   = 117,
	I_MAGICRING4                   = 118,
	I_MAP                          = 21,
	I_MISC1                        = 46,
	I_MISC2                        = 47,
	I_NAYRUSLOVE                   = 66,
	I_PERILRING                    = 121,
	I_PERILSCROLL                  = 103,
	I_POTION1                      = 29,
	I_POTION2                      = 30,
	I_QUAKESCROLL1                 = 96,
	I_QUAKESCROLL2                 = 97,
	I_QUIVER1                      = 74,
	I_QUIVER2                      = 75,
	I_QUIVER3                      = 76,
	I_QUIVER4                      = 105,
	I_RAFT                         = 26,
	I_RING1                        = 17,
	I_RING2                        = 18,
	I_RING3                        = 61,
	I_ROCSFEATHER                  = 91,
	I_RUPEE1                       = 0,
	I_RUPEE10                      = 86,
	I_RUPEE100                     = 87,
	I_RUPEE20                      = 38,
	I_RUPEE200                     = 40,
	I_RUPEE5                       = 1,
	I_RUPEE50                      = 39,
	I_SBOMB                        = 48,
	I_SELECTA                      = 45,
	I_SELECTB                      = 85,
	I_SHIELD1                      = 93,
	I_SHIELD2                      = 8,
	I_SHIELD3                      = 37,
	I_SPINSCROLL1                  = 94,
	I_SPINSCROLL2                  = 98,
	I_STOMPBOOTS                   = 120,
	I_STONEAGONY                   = 119,
	I_SWORD1                       = 5,
	I_SWORD2                       = 6,
	I_SWORD3                       = 7,
	I_SWORD4                       = 36,
	I_TRIFORCE                     = 20,
	I_TRIFORCEBIG                  = 44,
	I_WALLET500                    = 41,
	I_WALLET999                    = 42,
	I_WALLETA                      = 104,
	I_WAND                         = 25,
	I_WEALTHMEDAL                  = 109,
	I_WEALTHMEDAL2                 = 110,
	I_WEALTHMEDAL3                 = 111,
	I_WHIMSICALRING                = 122,
	I_WHISPRING1                   = 99,
	I_WHISPRING2                   = 100,
	I_WHISTLE                      = 31,
};

// Item types, used with [itemdata::Type].
enum ItemType {
	IC_SWORD              = 0,
	IC_BRANG              = 1,
	IC_ARROW              = 2,
	IC_CANDLE             = 3,
	IC_WHISTLE            = 4,
	IC_BAIT               = 5,
	IC_LETTER             = 6,
	IC_POTION             = 7,
	IC_WAND               = 8,
	IC_RING               = 9,
	IC_WALLET             = 10,
	IC_AMULET             = 11,
	IC_SHIELD             = 12,
	IC_BOW                = 13,
	IC_RAFT               = 14,
	IC_LADDER             = 15,
	IC_BOOK               = 16,
	IC_MAGICKEY           = 17,
	IC_BRACELET           = 18,
	IC_FLIPPERS           = 19,
	IC_BOOTS              = 20,
	IC_HOOKSHOT           = 21,
	IC_LENS               = 22,
	IC_HAMMER             = 23,
	IC_DINSFIRE           = 24,
	IC_FARORESWIND        = 25,
	IC_NAYRUSLOVE         = 26,
	IC_BOMB               = 27,
	IC_SBOMB              = 28,
	IC_CLOCK              = 29,
	IC_KEY                = 30,
	IC_MAGICCONTAINER     = 31,
	IC_TRIFORCE           = 32,
	IC_MAP                = 33,
	IC_COMPASS            = 34,
	IC_BOSSKEY            = 35,
	IC_QUIVER             = 36,
	IC_LEVELKEY           = 37,
	IC_CBYRNA             = 38,
	IC_RUPEE              = 39,
	IC_ARROWAMMO          = 40,
	IC_FAIRY              = 41,
	IC_MAGIC              = 42,
	IC_HEART              = 43,
	IC_HEARTCONTAINER     = 44,
	IC_HEARTPIECE         = 45,
	IC_KILLALL            = 46,
	IC_BOMBAMMO           = 47,
	IC_BOMBBAG            = 48,
	IC_ROCS               = 49,
	IC_HOVERBOOTS         = 50,
	IC_SPINSCROLL         = 51,
	IC_CROSSSCROLL        = 52,
	IC_QUAKESCROLL        = 53,
	IC_WHISPRING          = 54,
	IC_CHARGERING         = 55,
	IC_PERILSCROLL        = 56,
	IC_WEALTHMEDAL        = 57,
	IC_HEARTRING          = 58,
	IC_MAGICRING          = 59,
	IC_HURRICANESCROLL    = 60,
	IC_SQUAKESCROLL       = 61,
	IC_STONEAGONY         = 62,
	IC_STOMPBOOTS         = 63,
	IC_WHIMSICALRING      = 64,
	IC_PERILRING          = 65,
	IC_MISC               = 66,
	IC_CUSTOM1            = 67,
	IC_CUSTOM2            = 68,
	IC_CUSTOM3            = 69,
	IC_CUSTOM4            = 70,
	IC_CUSTOM5            = 71,
	IC_CUSTOM6            = 72,
	IC_CUSTOM7            = 73,
	IC_CUSTOM8            = 74,
	IC_CUSTOM9            = 75,
	IC_CUSTOM10           = 76,
	IC_CUSTOM11           = 77,
	IC_CUSTOM12           = 78,
	IC_CUSTOM13           = 79,
	IC_CUSTOM14           = 80,
	IC_CUSTOM15           = 81,
	IC_CUSTOM16           = 82,
	IC_CUSTOM17           = 83,
	IC_CUSTOM18           = 84,
	IC_CUSTOM19           = 85,
	IC_CUSTOM20           = 86,
	IC_BOWANDARROW        = 87,
	IC_LETTERPOTION       = 88,

	// 89-255 free use

	// These item classes create a projectile of the 
	// type LW_CUSTOM/LW_SCRIPT, 01 to 10
	IC_WPN_CUSTOM_01           = 256,
	IC_WPN_SCRIPT_01           = 256,
	IC_WPN_CUSTOM_02           = 257,
	IC_WPN_SCRIPT_02           = 257,
	IC_WPN_CUSTOM_03           = 258,
	IC_WPN_SCRIPT_03           = 258,
	IC_WPN_CUSTOM_04           = 259,
	IC_WPN_SCRIPT_04           = 259,
	IC_WPN_CUSTOM_05           = 260,
	IC_WPN_SCRIPT_05           = 260,
	IC_WPN_CUSTOM_06           = 261,
	IC_WPN_SCRIPT_06           = 261,
	IC_WPN_CUSTOM_07           = 262,
	IC_WPN_SCRIPT_07           = 262,
	IC_WPN_CUSTOM_08           = 263,
	IC_WPN_SCRIPT_08           = 263,
	IC_WPN_CUSTOM_09           = 264,
	IC_WPN_SCRIPT_09           = 264,
	IC_WPN_CUSTOM_10           = 265,
	IC_WPN_SCRIPT_10           = 265,

	IC_ICEROD          	     = 266, //Not Implemented

	IC_ATKRING                 = 267,
	IC_LANTERN                 = 268,
	IC_PEARL                   = 269,
	IC_BOTTLE                  = 270,
	IC_BOTTLE_FILL             = 271,
	IC_BUG_NET                 = 272,
	IC_MIRRORS                 = 273,
	IC_SWITCHHOOK              = 274,
	IC_ITEM_BUNDLE             = 275,
	IC_PROGRESSIVE             = 276,
	IC_NOTE                    = 277,
	IC_REFILL                  = 278,
	IC_LIFTGLOVE               = 279,

	//Itemclasses not less than this are reserved for future engine itemclasses
	IC_MAXUSABLE               = 280,

	IC_MAX                     = 512 //Last of enum. All itemclassesare < this.
};

// Item pickup bitflags. Used with [item::Pickup].
// Many values are reserved for internal usage, and have no effect.
@Bitflags("int")
enum ItemPickupBitflags
{
	IP_BIGRANGE                    = 0x0001, // INTERNAL Collision rectangle is large.
	IP_HOLDUP                      = 0x0002, // Link holds it up when collecting it.
	IP_ST_ITEM                     = 0x0004, // Sets the screen state "Item" when collected.
	IP_DUMMY                       = 0x0008, // A 'dummy' item, such as rupee markers in shops. Can't be collected and ignores gravity.
	IP_CHECK                       = 0x0010, // INTERNAL Check restrictions (money in a shop, etc.).
	IP_MONEY                       = 0x0020, // INTERNAL This item causes money loss (bomb upgrade, swindle room, etc.).
	IP_FADE                        = 0x0040, // INTERNAL Blinks if fadeclk>0.
	IP_ENEMYCARRIED                = 0x0080, // The item-carrying NPC carries it. If no NPC has an item, the most recently created NPC carries it.
	IP_TIMEOUT                     = 0x0100, // Disappears after 512 frames. Can be collected by melee weapons if the related quest rule is not set.
	IP_BIGTRIFORCE                 = 0x0200, // INTERNAL Large collision rectangle (used for large triforce).
	IP_NODRAW                      = 0x0400, // INTERNAL Don't draw this (for underwater items).
	IP_ST_SPECIALITEM              = 0x0800, // Sets the screen state "Special Item" when collected.
	IP_TRIGGERSECRETS              = 0x1000, // Triggers screen secrets when collected.
	IP_ALWAYSGRAB                  = 0x2000, // Item is always able to be picked up (ex. brang/hshot/arrows/melee weapons).
};

// Used with [itemdata::Attributes], [itemdata::LAttributes] - index 0 is blocking, index 1 is reflecting.
// @deprecated Use [BlockBitflags] instead!
enum BlockBitflagsInt
{
	BLOCKFLAG_ROCK                 = 0x00001,
	BLOCKFLAG_ARROW                = 0x00002,
	BLOCKFLAG_BRANG                = 0x00004,
	BLOCKFLAG_FIREBALL             = 0x00008,
	BLOCKFLAG_SWORD                = 0x00010,
	BLOCKFLAG_MAGIC                = 0x00020,
	BLOCKFLAG_FLAME                = 0x00040,
	BLOCKFLAG_SCRIPT               = 0x00080, // Blocks or reflects ALL script weapons.
	BLOCKFLAG_FIREBALL2            = 0x00100,
	BLOCKFLAG_LIGHTBEAM            = 0x00200,
	BLOCKFLAG_SCRIPT1              = 0x00400,
	BLOCKFLAG_SCRIPT2              = 0x00800,
	BLOCKFLAG_SCRIPT3              = 0x01000,
	BLOCKFLAG_SCRIPT4              = 0x02000,
	BLOCKFLAG_SCRIPT5              = 0x04000,
	BLOCKFLAG_SCRIPT6              = 0x08000,
	BLOCKFLAG_SCRIPT7              = 0x10000,
};

// Used with [itemdata::Attributes], [itemdata::LAttributes].
@Bitflags("long")
enum BlockBitflags
{
	L_BLOCKFLAG_ROCK               = 0x00000001L,
	L_BLOCKFLAG_ARROW              = 0x00000002L,
	L_BLOCKFLAG_BRANG              = 0x00000004L,
	L_BLOCKFLAG_FIREBALL           = 0x00000008L,
	L_BLOCKFLAG_SWORD              = 0x00000010L,
	L_BLOCKFLAG_MAGIC              = 0x00000020L,
	L_BLOCKFLAG_FLAME              = 0x00000040L,
	L_BLOCKFLAG_SCRIPT             = 0x00000080L, // Blocks or reflects ALL script weapons.
	L_BLOCKFLAG_FIREBALL2          = 0x00000100L,
	L_BLOCKFLAG_LIGHTBEAM          = 0x00000200L,
	L_BLOCKFLAG_SCRIPT1            = 0x00000400L,
	L_BLOCKFLAG_SCRIPT2            = 0x00000800L,
	L_BLOCKFLAG_SCRIPT3            = 0x00001000L,
	L_BLOCKFLAG_SCRIPT4            = 0x00002000L,
	L_BLOCKFLAG_SCRIPT5            = 0x00004000L,
	L_BLOCKFLAG_SCRIPT6            = 0x00008000L,
	L_BLOCKFLAG_SCRIPT7            = 0x00010000L,
	L_BLOCKFLAG_SCRIPT8            = 0x00020000L,
	L_BLOCKFLAG_SCRIPT9            = 0x00040000L,
	L_BLOCKFLAG_SCRIPT10           = 0x00080000L,
};

@Bitflags("int")
enum ItemMiscBitflags
{
	IMISC_FLASH                    = 0x01,
	IMISC_TWOHAND                  = 0x02,
	IMISC_HFLIP                    = 0x04,
	IMISC_VFLIP                    = 0x08,
};

enum ItemBurnIndex
{
	ITM_BURNSPR_NO_BURN,
	ITM_BURNSPR_ANY_BURN,
	ITM_BURNSPR_STRONG_BURN,
	ITM_BURNSPR_MAGIC_BURN,
	ITM_BURNSPR_DIVINE_BURN,
	ITM_BURNSPR_MAX
};

enum ItemScriptRunMode
{
	ISCR_KILL,
	ISCR_RUN,
	ISCR_PERPETUAL,
};

// Metadata for a specific item type (not an instance of one). Load with [Game->LoadItemData].
//
// @zasm_ref REFITEMCLASS
class itemdata {
	// @delete
	internal itemdata();

	// @value [enum ItemID]

	// @zasm_var IDATAID
	internal const int ID;

	// @value [enum ItemType]

	// @zasm_var IDATAFAMILY
	internal int Type;

	// Exactly the same as [Type] - use that instead.
	//
	// @value [enum ItemType]

	// @zasm_var IDATAFAMILY
	internal int Family;

	// @zasm_var IDATALEVEL
	internal int Level;

	// The amount of the [Counter] to increase when this item is picked up.
	//
	// @value `-9999 to 16383`
	// @zasm_var IDATAAMOUNT
	internal int Amount;

	// The '...But not above' field- the amount the max of [Counter] will not be
	// increased above.
	//
	// @zasm_var IDATAMAX
	internal int Max;

	// How much to increase the max of the [Counter] by
	//
	// @zasm_var IDATASETMAX
	internal int MaxIncrement;

	// If the item is an equipment item or not. Items which are not equipment
	// items cannot be "owned" by the [Hero] or put on buttons.
	//
	// @zasm_var IDATAKEEP
	internal bool EquipmentItem;

	// The counter to increase when this item is picked up.
	//
	// @value [enum CounterIndex]

	// @zasm_var IDATACOUNTER
	internal int Counter;

	// The sound to play when the item is picked up.
	//
	// @zasm_var IDATAPSOUND
	internal int PickupSound;

	// The item's usage sound. If/how this is used depends on itemclass.
	//
	// @zasm_var IDATAUSESOUND
	internal int UseSound;

	// The item's second usage sound. If/how this is used depends on itemclass.
	//
	// @zasm_var IDATAUSESOUND2
	internal int UseSound2;

	// The item power. Usage depends on itemclass.
	//
	// @zasm_var IDATAPOWER
	internal int Power;

	// The item power. Usage depends on itemclass.
	//
	// @zasm_var IDATAPOWER
	internal int Damage;

	// The 8 InitD values shared by the item's Action, Pickup, and Sprite
	// scripts.
	//
	// @zasm_var IDATAINITDD
	internal untyped InitD[];

	// The Hero Tile Modifier associated with this item.
	//
	// @zasm_var IDATALTM
	internal int TileMod;

	// The item's Action Script
	//
	// @zasm_var IDATASCRIPT
	internal int Script;

	// The item's Pickup Script
	//
	// @zasm_var IDATAPSCRIPT
	internal int PScript;

	// The item's ItemSprite Script
	//
	// @zasm_var IDATASPRSCRIPT
	internal int SpriteScript;

	// The message string to display upon picking up the item.
	//
	// @zasm_var IDATAPSTRING
	internal int PString;

	// The message string to display upon picking up the item.
	//
	// @zasm_var IDATAPSTRING
	internal int PickupString;

	// The bitflags associated with the pickup string.
	//
	// @value [enum PickupStringBitflags]

	// @zasm_var IDATAPFLAGS
	internal int PickupStringFlags;

	// The `Use Cost`/`Use Cost 2` of the item.
	//
	// @zasm_var IDATAMAGCOST
	internal int Cost;

	// The `Use Cost`/`Use Cost 2` of the item.
	//
	// @zasm_var IDATACOST2
	internal int Cost2;

	// The counter for the `Use Cost`/`Use Cost 2` of the item.
	//
	// @zasm_var IDATACOSTCOUNTER
	internal int CostCounter;

	// The counter for the `Use Cost`/`Use Cost 2` of the item.
	//
	// @zasm_var IDATACOSTCOUNTER2
	internal int CostCounter2;

	// The number of max hearts required to pick up the item.
	//
	// @zasm_var IDATAMINHEARTS
	internal int MinHearts;

	// The starting tile of the item's animation
	//
	// @zasm_var IDATATILE
	internal int Tile;

	// Misc bitflags for the item graphics.
	//
	// @value [enum ItemMiscBitflags]

	// @zasm_var IDATAMISC
	internal int MiscFlags;

	// The CSet the item sprite uses.
	//
	// @zasm_var IDATACSET
	internal int CSet;

	// The Flash CSet the item sprite uses.
	//
	// @zasm_var IDATAFLASHCSET
	internal int FlashCSet;

	// The number of frames in the animation.
	//
	// @zasm_var IDATAFRAMES
	internal int AFrames;

	// The speed of the animation, in frames per frame.
	//
	// @zasm_var IDATAASPEED
	internal int ASpeed;

	// The number of delay frames at the start of the animation.
	//
	// @zasm_var IDATADELAY
	internal int Delay;

	// The `Upgrade When Collected Twice` flag
	//
	// @zasm_var IDATACOMBINE
	internal bool Combine;

	// The `Remove Item When Used` flag.
	//
	// @zasm_var IDATADOWNGRADE
	internal bool Downgrade;

	// The `Keep Lower Level Items` flag
	//
	// @zasm_var IDATAKEEPOLD
	internal bool KeepOld;

	// The `Gradual` flag.
	//
	// @zasm_var IDATAGRADUAL
	internal bool Gradual;

	// The `Can Be Eaten By Enemies` flag.
	//
	// @zasm_var IDATAEDIBLE
	internal bool Edible;

	// The `Gain All Lower Level Items` flag
	//
	// @zasm_var IDATAGAINLOWER
	internal bool GainLower;

	// The item's Attributes.
	//
	// @index 0: block, 1: reflect
	// @value 0: [BlockBitflags], 1: [BlockBitflags]
	// @length 10
	// @zasm_var IDATAATTRIB
	internal untyped Attributes[];

	// The item's Attributes, as `long` values.
	//
	// An editor value of `1` will read as `1L`, or `0.0001`. This allows all
	// values to "fit".
	//
	// @index 0: block, 1: reflect
	// @value 0: [BlockBitflags], 1: [BlockBitflags]
	// @length 10
	// @zasm_var IDATAATTRIB_L
	internal long LAttributes[];

	// The 16 item flags. `Flags[0]` through `Flags[14]` change depending on the
	// item type; `Flags[15]` is the `Constant Script` flag.
	//
	// @zasm_var IDATAFLAGS
	internal bool Flags[];

	// The 10 sprites used by the item. How they are used depends on the item
	// type.
	//
	// @zasm_var IDATASPRITE
	internal int Sprites[];

	// The overrided weapon type that the weapon will act like.
	//
	// @zasm_var IDATAUSEWPN
	internal int Weapon;

	// The 8 InitD values for the weapon script.
	//
	// @zasm_var IDATAWPNINITD
	internal untyped WeaponInitD[];

	// The item's lweapon script
	//
	// @zasm_var IDATAWEAPONSCRIPT
	internal int WeaponScript;

	// The hitbox offset of the sprite, in pixels.
	//
	// @zasm_var IDATAWEAPHXOFS
	internal int WeaponHitXOffset;

	// The hitbox offset of the sprite, in pixels.
	//
	// @zasm_var IDATAWEAPHYOFS
	internal int WeaponHitYOffset;

	// The hitbox size of the sprite, in pixels.
	//
	// @zasm_var IDATAWEAPHXSZ
	internal int WeaponHitWidth;

	// The hitbox size of the sprite, in pixels.
	//
	// @zasm_var IDATAWEAPHYSZ
	internal int WeaponHitHeight;

	// The Z-Height of the hitbox, in pixels.
	//
	// @zasm_var IDATAWEAPHZSZ
	internal int WeaponHitZHeight;

	// The visual offset of the sprite, in pixels.
	//
	// @zasm_var IDATAWEAPXOFS
	internal int WeaponDrawXOffset;

	// The visual offset of the sprite, in pixels.
	//
	// @zasm_var IDATAWEAPYOFS
	internal int WeaponDrawYOffset;

	// The default DrawZOffset used by this weapon when the item generates it.
	//
	// @zasm_var IDATAWEAPZOFS
	internal int WeaponDrawZOffset;

	// The timer for the 'Use Cost'/'Use Cost 2' of the item.
	//
	// @zasm_var IDATAMAGICTIMER
	internal int CostTimer;

	// The timer for the 'Use Cost'/'Use Cost 2' of the item.
	//
	// @zasm_var IDATAMAGICTIMER2
	internal int CostTimer2;

	// The hitbox offset of the sprite, in pixels.
	//
	// @zasm_var IDATAHXOFS
	internal int HitXOffset;

	// The hitbox offset of the sprite, in pixels.
	//
	// @zasm_var IDATAHYOFS
	internal int HitYOffset;

	// The visual offset of the sprite, in pixels.
	//
	// @zasm_var IDATADXOFS
	internal int DrawXOffset;

	// The visual offset of the sprite, in pixels.
	//
	// @zasm_var IDATADYOFS
	internal int DrawYOffset;

	// The hitbox size of the sprite, in pixels.
	//
	// @zasm_var IDATAHXSZ
	internal int HitWidth;

	// The hitbox size of the sprite, in pixels.
	//
	// @zasm_var IDATAHYSZ
	internal int HitHeight;

	// The Z-Height of the hitbox, in pixels.
	//
	// @zasm_var IDATAHZSZ
	internal int HitZHeight;

	// The visual size of the sprite, in tiles.
	//
	// @zasm_var IDATATILEW
	internal int TileWidth;

	// The visual size of the sprite, in tiles.
	//
	// @zasm_var IDATATILEH
	internal int TileHeight;

	// The item pickup bitflags.
	//
	// @value [enum ItemPickupBitflags]
	// @zasm_var IDATAPICKUP
	internal int Pickup;
	
	// The Level Items that will be granted when the item is collected. See [PickupLItemLevel].
	//
	// @value [enum LevelItemBitflags]
	// @zasm_var IDATAPICKUPLITEMS
	internal int PickupLItems;
	
	// The Level that [PickupLItems] will be granted for when the item is collected.
	//
	// @value -1 for 'current level', otherwise number of a specific 'level' (-1 <= x < [NUM_LEVELS])
	// @zasm_var IDATAPICKUPLITEMLEVEL
	internal int PickupLItemLevel;

	// Bitflags representing all the checkboxes for which sizes to
	// apply from the itemdata.
	//
	// @value [enum SizeOverrideBitflags]
	// @zasm_var IDATAOVERRIDEFL
	internal int SizeFlags;

	// Bitflags representing all the checkboxes for which sizes to
	// apply from the itemdata, for any [lweapon] created by this item.
	//
	// @value [enum SizeOverrideBitflags]
	// @zasm_var IDATAOVERRIDEFLWEAP
	internal int WeaponSizeFlags;

	// The visual size of the sprite, in tiles.
	//
	// @zasm_var IDATATILEWWEAP
	internal int WeaponTileWidth;

	// The visual size of the sprite, in tiles.
	//
	// @zasm_var IDATATILEHWEAP
	internal int WeaponTileHeight;

	// The `Only Validate Cost`/`Only Validate Cost 2` checkboxes
	//
	// @zasm_var IDATAVALIDATE
	internal bool Validate;

	// The `Only Validate Cost`/`Only Validate Cost 2` checkboxes
	//
	// @zasm_var IDATAVALIDATE2
	internal bool Validate2;

	// The `Constant Script` flag.
	//
	// @zasm_var IDATACONSTSCRIPT
	internal bool ConstantScript;

	// The `Disabled In Sideview Water` flag.
	//
	// @zasm_var IDATASSWIMDISABLED
	internal bool SideSwimDisabled;

	// The `Usable as a Bunny` flag.
	//
	// @zasm_var IDATABUNNYABLE
	internal bool BunnyUsable;

	// The `Immune to jinxes` flag.
	//
	// @zasm_var IDATAJINXIMMUNE
	internal bool JinxImmune;

	// The `Uses Other Jinx` flag.
	//
	// @zasm_var IDATAJINXSWAP
	internal bool JinxSwapped;

	// If true, the weapon created by this item will update its sprite when lit
	// on fire using [BurnSprites].
	//
	// @zasm_var IDATAUSEBURNSPR
	internal bool UseBurnSprites;

	// The sprites used for making the weapon change appearance when lit on
	// fire.
	//
	// @index [enum ItemBurnIndex]
	// @zasm_var IDATABURNINGSPR
	internal int BurnSprites[];

	// The burning light radii from `Graphics->Sprites->Burning`.
	//
	// @index [enum ItemBurnIndex]
	// @zasm_var IDATABURNINGLIGHTRAD
	internal int BurnLightRadius[];

	// @zasm_var IDATAKEEP
	internal bool Keep;

	// @zasm_var IDATALTM
	internal int Modifier;

	// The cost of the item, in units. Whenever the item is used, this value is
	// decremented from the counter supplied to [CostCounter].
	//
	// If the item runs for more than one frame, this amount will be decremented
	// every [CostTimer] frames.
	//
	// @zasm_var IDATAMAGCOST
	internal int MagicCost;

	// The number of frames between counter decrements, when using an item with
	// a perpetual upkeep cost, such as Boots and Cane items.
	//
	// @zasm_var IDATAMAGICTIMER
	internal int MagicCostTimer;

	// @zasm_var IDATAATTRIB
	internal untyped Misc[];

	// The Flash value for the CSet
	//
	// @zasm_var IDATAMISC
	internal int Flash;

	// @deprecated Use [Defense] instead!
	// @zasm_var IDATAUSEDEF
	internal int Defence;

	// The default defense resolution (e.g. OHKO) that the weapon uses
	// when it strikes an enemy.
	//
	// If `> -1`, and the enemy had a defense resolution of `None`, the default
	// defense resolution is used in place of `None`.
	//
	// @zasm_var IDATAUSEDEF
	internal int Defense;

	// The distance that the weapon is allowed to travel.
	//
	// Not implemented at this time.
	//
	// @zasm_var IDATAWRANGE
	internal int Range;

	// The duration of the weapon.
	//
	// See weapon->Duration.
	//
	// Not implemented at this time.
	//
	// @zasm_var IDATADURATION
	internal int Duration;

	// The number of extra weapons that this weapon creates.
	//
	// Not implemented at this time.
	//
	// @zasm_var IDATADUPLICATES
	internal int Duplicates;

	// The layer used to draw the weapon to the screen.
	//
	// Not implemented at this time.
	//
	// @zasm_var IDATADRAWLAYER
	internal int DrawLayer;

	// @zasm_var IDATARUPEECOST
	internal bool RupeeCost;

	// @zasm_var IDATAFLAGUNUSED
	internal bool Unused;

	// The items (in CSV format, using a SCV list ID) that the weapon created by
	// this item, collects on contact.
	//
	// Not implemented at this time.
	//
	// @zasm_var IDATACOLLECTFLAGS
	internal int CollectFlags;

	// An array the 32 Misc[] values used by the weapon.
	//
	// This may be only partially implemented.
	//
	// @zasm_var IDATAMISCD
	internal untyped WeaponMisc[];

	// Fills the buffer with the item's Name.
	//
	// @zasm
	//   POP D2
	//   POP REFITEMCLASS
	//   ITEMNAME D2
	internal void GetName(char32[] buf);

	// Fills the buffer with the item's Display Name.
	//
	// @zasm
	//   POP D2
	//   POP REFITEMCLASS
	//   ITEMGETDISPLAYNAME D2
	internal void GetDisplayName(int buf);

	// Sets the item's Display Name to the contents of the buffer.
	//
	// @zasm
	//   POP D2
	//   POP REFITEMCLASS
	//   ITEMSETDISPLAYNAME D2
	internal void SetDisplayName(int buf);

	// Fills the buffer with the name of the item as shown on the subscreen.
	// This automatically handles display names, including special instances
	// such as the contents of Bottles.
	//
	// @zasm
	//   POP D2
	//   POP REFITEMCLASS
	//   ITEMGETSHOWNNAME D2
	internal void GetShownName(int buf);

	// Runs or ends the item script, depending on [mode].
	//
	// @param [ItemScriptRunMode] mode
	// @zasm
	//   POP D2
	//   POP REFITEMCLASS
	//   RUNITEMSCRIPT D2
	internal void RunScript(int mode = ISCR_PERPETUAL);
}
