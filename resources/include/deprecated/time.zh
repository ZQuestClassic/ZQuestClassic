// TODO: rename to std_time.zh, but wait until functions can return strings and rewrite some stuff here.
//       also should not hard code a timezone - we need a system tz ZASM op

/**
*	This namespace contains functions used for handling time
*	access functions, similar to time.h in C, plus some utilities
*	to print the full current time and date, as a string.
*/
namespace time
{
	const int uTIMEZONE = tzGMT; // Set this to your current timezone
	/**
	*	Returns your user timezone.
	*/
	int user_timezone()
	{
		return uTIMEZONE;
	}

	const long TIME_FRAME = 1L;
	const int FRAMES_PER_SECOND = 60;
	const int SECONDS_PER_MINUTE = 60;
	const int MINUTES_PER_HOUR = 60;
	/**
	*	Returns the current system clock 'seconds' value.
	*/
	int tm_sec() { return GetSystemTime(RTC_SECOND); }
	/**
	*	Returns the current system clock 'minutes' value.
	*/
	int tm_min() { return GetSystemTime(RTC_MINUTE); }
	/**
	*	Returns the current system clock 'hour' value.
	*/
	int tm_hour() { return GetSystemTime(RTC_HOUR); }
	/**
	*	Returns the current system clock 'day of the month' value.
	*/
	int tm_mday() { return GetSystemTime(RTC_DAYOFMONTH); }
	/**
	*	Returns the current system clock 'month' value.
	*/
	int tm_mon() { return GetSystemTime(RTC_MONTH); }
	/**
	*	Returns the current system clock 'year' value.
	*/
	int tm_year() { return GetSystemTime(RTC_YEAR); }
	/**
	*	Returns the current system clock 'day of the year (n/365)' value.
	*/
	int tm_yday() { return GetSystemTime(RTC_DAYOFYEAR); }
	/**
	*	Returns the current system clock 'day of the week (n/7)' value.
	*/
	int tm_wday() { return GetSystemTime(RTC_DAYOFWEEK); }
	/**
	*	Returns the current system clock 'daylight time' value.
	*/
	int tm_isdst() { return GetSystemTime(RTC_DAYLIGHTTIME); }
	/**
	*	An enum of worldwide timezones
	*/
	enum { 
		tzGMT, tzBST, tzIST, tzADT, tzEDT, tzCDT, tzMDT, tzPDT,
		tzCET, tzWAT, tzEET, tzMSK, tzSMT, tzAZT, tzEAT, tzYDT,
		tzGET, tzMVT, tzMUT, tzNZT, tzCST, tzWST, tzCAT,
		tzJST, tzEST, tzPKT, tzART, tzAST, tzYST, tzHST,
		tzHDT, tzAT, tzNT, tzCXT, tzMST, tzPST, tzWEDT,
		tzWEST, tzCEDT, tzCEST, tzMEDT, tzMEST, tzMESZ, tzEEDT, tzNZDT,
		tzEEST, tzEADT, tzWADT, tzHADT, tzAKDT, tzIDLW, tzAHST, tzAKST,
		tzHAST, tzUSZ1, tzYEKT, tzOMSK, tzKRAT, tzIRKT, tzAWST, tzEAST,
		tzVLAT, tzSAKT, tzIDLE, tzNZST, tzMAGT
	};
	/**
	*	Puts time and date stamp as a formatted string into a buffer[] string
	*	The output will be the user's current time at runtime.
	*	@param buffer is the the dest string[]
	*/
	void GetSystemTime(char32 buffer)
	{
		GetDate(tm_mday(), tm_mon(), tm_year(), tm_hour(), tm_min(), user_timezone(), buffer);
	}
	/**
	*	Prints a time and date stamp as a formatted string 
	*	The output will be the user's current time at runtime.
	*/
	void PrintSystemTime()
	{
		PrintDate(tm_mday(), tm_mon(), tm_year(), tm_hour(), tm_min(), user_timezone());
	}
	/**
	*	Prints a time and date stamp as a formatted string 
	*	@param d is the day of the month
	*	@param m is the month of the year
	*	@param y is the the year
	*	@param h is the the hour
	*	@param m is the the minute
	*	@param zone is the the timezone
	*/
	void PrintDate(int d, int m, int y, int h, int mn, int zone)
	{
		int day[5];
		int month[10];
		int timezone[5];
		GetDay(day,d);
		GetMonth(month,mn);
		GetZone(timezone, zone);
		printf("%s %s %d, at %d:%d %s\n", day, month, y, h, m, timezone);
	}
	/**
	*	Converts an integer month into a string, storing it in a buffer
	*	Buffer size should be [10]
	*	@param buffer is the the dest string[]
	*	@param m is an integer for a month
	*/
	void GetMonth(char32 buffer, int m)
	{
		switch(m)
		{
			case 1:
				strcpy(buffer, "January"); break;
			case 2:
				strcpy(buffer, "February"); break;
			case 3:
				strcpy(buffer, "March"); break;
			case 4:
				strcpy(buffer, "April"); break;
			case 5:
				strcpy(buffer, "May"); break;
			case 6:
				strcpy(buffer, "June"); break;
			case 7:
				strcpy(buffer, "July"); break;
			case 8:
				strcpy(buffer, "August"); break;
			case 9:
				strcpy(buffer, "September"); break;
			case 10:
				strcpy(buffer, "October"); break;
			case 11:
				strcpy(buffer, "November"); break;
			case 12:
				strcpy(buffer, "December"); break;
			
		}
	}
	
	/**
	*	Converts an integer day into a string, storing it in a buffer
	*	Appends 'st', 'nd', 'rd', 'th', as appropriate
	*	Buffer size should be [5]
	*	@param buffer is the the dest string[]
	*	@param dy is an integer for a day
	*/
	void GetDay(char32 buffer, int dy)
	{
		int day[5];
		int month[10];
		int timezone[5];
		switch(dy)
		{
			case 1:
			case 21:
			case 31:
				sprintf(buffer,"%d%s",dy,"st"); 
				break;
			//nd
			case 2:
			case 22:
				sprintf(buffer,"%d%s",dy,"nd"); 
				break;
			//rd
			case 3:
			case 23:
				sprintf(buffer,"%d%s",dy,"rd"); 
				break;
			//th
			default:
				sprintf(buffer,"%d%s",dy,"th");
				break;
		}
		
	}
	
	/**
	*	Converts an integer timezone into a string, storing it in a buffer
	*	Buffer size should be [5]
	*	@param buffer is the the dest string[]
	*	@param zone is an integer for a timezone
	*/
	void GetZone(char32 buffer, int zone)
	{
		
		switch(zone)
		{
			case tzGMT: strcpy(buffer, "GMT"); break;
			case tzBST: strcpy(buffer, "BST"); break;
			case tzIST: strcpy(buffer, "IST"); break;
			case tzADT: strcpy(buffer, "ADT"); break;
			case tzEDT: strcpy(buffer, "EDT"); break;
			case tzCDT: strcpy(buffer, "CDT"); break;
			case tzMDT: strcpy(buffer, "MDT"); break;
			case tzPDT: strcpy(buffer, "PDT"); break;
			case tzCET: strcpy(buffer, "CET"); break;
			case tzWAT: strcpy(buffer, "WAT"); break;
			case tzEET: strcpy(buffer, "EET"); break;
			case tzMSK: strcpy(buffer, "MSK"); break;
			case tzSMT: strcpy(buffer, "SMT"); break;
			case tzAZT: strcpy(buffer, "AZT"); break;
			case tzEAT: strcpy(buffer, "EAT"); break;
			case tzYDT: strcpy(buffer, "YDT"); break;
			case tzGET: strcpy(buffer, "GET"); break;
			case tzMVT: strcpy(buffer, "MVT"); break;
			case tzMUT: strcpy(buffer, "MUT"); break;
			case tzNZT: strcpy(buffer, "NZT"); break;
			case tzCST: strcpy(buffer, "CST"); break;
			case tzWST: strcpy(buffer, "WST"); break;
			case tzCAT: strcpy(buffer, "CAT"); break;
			case tzJST: strcpy(buffer, "JST"); break;
			case tzEST: strcpy(buffer, "EST"); break;
			case tzPKT: strcpy(buffer, "PKT"); break;
			case tzART: strcpy(buffer, "ART"); break;
			case tzAST: strcpy(buffer, "AST"); break;
			case tzYST: strcpy(buffer, "YST"); break;
			case tzHST: strcpy(buffer, "HST"); break;
			case tzHDT: strcpy(buffer, "HDT"); break;
			case tzAT: strcpy(buffer, "AT"); break;
			case tzNT: strcpy(buffer, "NT"); break;
			case tzCXT: strcpy(buffer, "CXT"); break;
			case tzMST: strcpy(buffer, "MST"); break;
			case tzPST: strcpy(buffer, "PST"); break;
			case tzWEDT: strcpy(buffer, "WEDT"); break;
			case tzWEST: strcpy(buffer, "WEST"); break;
			case tzCEDT: strcpy(buffer, "CEDT"); break;
			case tzCEST: strcpy(buffer, "CEST"); break;
			case tzMEDT: strcpy(buffer, "MEDT"); break;
			case tzMEST: strcpy(buffer, "MEST"); break;
			case tzMESZ: strcpy(buffer, "MESZ"); break;
			case tzEEDT: strcpy(buffer, "EEDT"); break;
			case tzNZDT: strcpy(buffer, "NZDT"); break;
			case tzEEST: strcpy(buffer, "EEST"); break;
			case tzEADT: strcpy(buffer, "EADT"); break;
			case tzWADT: strcpy(buffer, "WADT"); break;
			case tzHADT: strcpy(buffer, "HADT"); break;
			case tzAKDT: strcpy(buffer, "AKDT"); break;
			case tzIDLW: strcpy(buffer, "IDLW"); break;
			case tzAHST: strcpy(buffer, "AHST"); break;
			case tzAKST: strcpy(buffer, "AKST"); break;
			case tzHAST: strcpy(buffer, "HAST"); break;
			case tzUSZ1: strcpy(buffer, "USZ1"); break;
			case tzYEKT: strcpy(buffer, "YEKT"); break;
			case tzOMSK: strcpy(buffer, "OMSK"); break;
			case tzKRAT: strcpy(buffer, "KRAT"); break;
			case tzIRKT: strcpy(buffer, "IRKT"); break;
			case tzAWST: strcpy(buffer, "AWST"); break;
			case tzEAST: strcpy(buffer, "EAST"); break;
			case tzVLAT: strcpy(buffer, "VLAT"); break;
			case tzSAKT: strcpy(buffer, "SAKT"); break;
			case tzIDLE: strcpy(buffer, "IDLE"); break;
			case tzNZST: strcpy(buffer, "NZST"); break;
			case tzMAGT: strcpy(buffer, "MAGT"); break;
			
		}
		
	}
	/**
	*	Puts a time and date stamp as a formatted string into string buffer[] 
	*	@param d is the day of the month
	*	@param m is the month of the year
	*	@param y is the the year
	*	@param h is the the hour
	*	@param m is the the minute
	*	@param zone is the the timezone
	*	@param buffer is the the dest string[]
	*/
	void GetDate(int d, int mn, int y, int h, int m, int zone, char32 buffer)
	{
		int day[5];
		int month[10];
		int timezone[5];
		GetDay(day,d);
		GetMonth(month,mn);
		GetZone(timezone, zone);
		sprintf(buffer, "%s %s %d, at %d:%d %s\n", day, month, y, h, m, timezone);
	}
	/**
	*	Returns the current in-game clock hours value.
	*/
	int Hours()
	{
		unless(Game->TimeValid) return -1;
		return ((Game->Time / (FRAMES_PER_SECOND*SECONDS_PER_MINUTE))	 / MINUTES_PER_HOUR) * 10000;
	}
	/**
	*	Returns the current in-game clock minutes value.
	*/
	int Minutes()
	{
		unless(Game->TimeValid) return -1;
		return ((Game->Time % (TIME_FRAME*FRAMES_PER_SECOND*SECONDS_PER_MINUTE*MINUTES_PER_HOUR)) / (FRAMES_PER_SECOND*SECONDS_PER_MINUTE)) *10000;
	}
	/**
	*	Returns the current in-game clock seconds value.
	*/
	int Seconds()
	{
		unless(Game->TimeValid) return -1;
		return ((Game->Time % (TIME_FRAME*FRAMES_PER_SECOND*SECONDS_PER_MINUTE)) / FRAMES_PER_SECOND) * 10000;
	}
	/**
	*	Returns the number of frames needed to tick the next second.
	*	@param percent If set true, it will return 0-99, as percentage of a second (i.e. milliseconds)
	*/
	int Frames(bool percent)
	{
		unless(Game->TimeValid) return -1;
		int frame = (Game->Time % (TIME_FRAME*FRAMES_PER_SECOND)) * 10000;
		return percent ? Floor((frame/60)*100): frame;
	}
	/**
	*	Returns the total time, in minutes, that a player has been playing a quest.
	*/
	int TotalMinutes()
	{
		unless(Game->TimeValid) return -1;
		return ((Game->Time) / (FRAMES_PER_SECOND*SECONDS_PER_MINUTE)) *10000;
	}
	/**
	*	Returns the total time, in seconds, that a player has been playing a quest.
	*/
	int TotalSeconds()
	{
		unless(Game->TimeValid) return -1;
		return ((Game->Time) / FRAMES_PER_SECOND) * 10000;
	}
}
