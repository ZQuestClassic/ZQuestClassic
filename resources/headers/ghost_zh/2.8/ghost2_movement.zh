void Ghost_MoveXY(float xStep, float yStep, int imprecision)
{
    // If this is sideview, most enemies can't move upward
    if(yStep<0 && IsSideview() && !Ghost_FlagIsSet(GHF_NO_FALL))
        yStep=0;

    // If moving more than 8 pixels along either axis, go 8 at a time
    while(Abs(xStep)>8 || Abs(yStep)>8)
    {
        if(Abs(xStep)>=Abs(yStep))
        {
            if(xStep>0)
            {
                Ghost_MoveXY(8, 0, imprecision);
                xStep-=8;
            }
            else
            {
                Ghost_MoveXY(-8, 0, imprecision);
                xStep+=8;
            }
        }
        else // yStep>=xStep
        {
            if(yStep>0)
            {
                Ghost_MoveXY(0, 8, imprecision);
                yStep-=8;
            }
            else
            {
                Ghost_MoveXY(0, -8, imprecision);
                yStep+=8;
            }
        }
    }
    
    int edge; // Position of leading edge
    int edgeDiff; // Difference between Ghost_X/Ghost_Y and edge
    int startHT; // The half-tile position where the edge starts
    int endHT; // And where it ends up
    
    if(xStep<0) // Left
    {
        edgeDiff=__Ghost_XOffsets>>8;
        edge=Ghost_X+edgeDiff;
        
        startHT=Floor(edge/8);
        endHT=Floor((edge+xStep)/8);
        
        // If the edge ends up on the same half-tile line it's already on,
        // there's no need to check walkability
        if(startHT==endHT)
            edge+=xStep;
        else if(Ghost_CanMove(DIR_LEFT, -xStep, imprecision))
            edge+=xStep;
        else // Can't move all the way; snap to the grid
            edge=(edge>>3)<<3;
        
        Ghost_X=edge-edgeDiff;
    }
    else if(xStep>0) // Right
    {
        edgeDiff=16*Ghost_TileWidth-(__Ghost_XOffsets&0xFF)-1;
        edge=Ghost_X+edgeDiff;
        
        startHT=Floor(edge/8);
        endHT=Floor((edge+xStep)/8);
        
        if(startHT==endHT)
            edge+=xStep;
        else if(Ghost_CanMove(DIR_RIGHT, xStep, imprecision))
            edge+=xStep;
        else
            edge=(((edge+7)>>3)<<3)-1;
        
        Ghost_X=edge-edgeDiff;
    }
    
    if(yStep<0) // Up
    {
        edgeDiff=__Ghost_YOffsets>>8;
        edge=Ghost_Y+edgeDiff;
        
        startHT=Floor(edge/8);
        endHT=Floor((edge+yStep)/8);
        
        // If the edge ends up on the same half-tile line it's already on,
        // there's no need to check walkability
        if(startHT==endHT)
            edge+=yStep;
        else if(Ghost_CanMove(DIR_UP, -yStep, imprecision))
            edge+=yStep;
        else // Can't move all the way; snap to the grid
            edge=(edge>>3)<<3;
        
        Ghost_Y=edge-edgeDiff;
    }
    else if(yStep>0) // Down
    {
        edgeDiff=16*Ghost_TileHeight-(__Ghost_YOffsets&0xFF)-1;
        edge=Ghost_Y+edgeDiff;
        
        startHT=Floor(edge/8);
        endHT=Floor((edge+yStep)/8);
        
        if(startHT==endHT)
            edge+=yStep;
        else if(Ghost_CanMove(DIR_DOWN, yStep, imprecision))
            edge+=yStep;
        else
            edge=(((edge+7)>>3)<<3)-1;
        
        Ghost_Y=edge-edgeDiff;
    }
    
    if(Ghost_FlagIsSet(GHF_SET_DIRECTION) && (__Ghost_InternalFlags&__GHFI_DIR_FORCED)==0)
    {
        // Use 8 directions if 8-way flag is set
        if(Ghost_FlagIsSet(GHF_8WAY))
            Ghost_Dir=AngleDir8(WrapAngle(ArcTan(xStep, yStep))*57.2958);
        
        // Otherwise, 4 directions
        else
        {
            if(Abs(xStep)<Abs(yStep))
            {
                if(yStep<0)
                    Ghost_Dir=DIR_UP;
                else
                    Ghost_Dir=DIR_DOWN;
            }
            else
            {
                if(xStep<0)
                    Ghost_Dir=DIR_LEFT;
                else
                    Ghost_Dir=DIR_RIGHT;
            }
        }
        
        __Ghost_PrevX=Ghost_X;
        __Ghost_PrevY=Ghost_Y;
    }
}

void Ghost_Move(int dir, float step, int imprecision)
{
    float xStep=0;
    float yStep=0;

    if(dir==DIR_UP)
        yStep=-step;
    else if(dir==DIR_DOWN)
        yStep=step;
    else if(dir==DIR_LEFT)
        xStep=-step;
    else if(dir==DIR_RIGHT)
        xStep=step;
    else if(dir==DIR_LEFTUP)
    {
        xStep=-step*0.7071;
        yStep=-step*0.7071;
    }
    else if(dir==DIR_RIGHTUP)
    {
        xStep=step*0.7071;
        yStep=-step*0.7071;
    }
    else if(dir==DIR_LEFTDOWN)
    {
        xStep=-step*0.7071;
        yStep=step*0.7071;
    }
    else if(dir==DIR_RIGHTDOWN)
    {
        xStep=step*0.7071;
        yStep=step*0.7071;
    }
    else
        return;

    Ghost_MoveXY(xStep, yStep, imprecision);
}

void Ghost_MoveAtAngle(float angle, float step, int imprecision)
{
    Ghost_MoveXY(VectorX(step, angle), VectorY(step, angle), imprecision);
}

void Ghost_MoveTowardLink(float step, int imprecision)
{
    float angle=Angle(Ghost_X+Ghost_TileWidth*8, Ghost_Y+Ghost_TileHeight*8, Link->X+8, Link->Y+8);
    Ghost_MoveXY(VectorX(step, angle), VectorY(step, angle), imprecision);
}

bool Ghost_CanMove(int dir, float step, int imprecision, bool inAir)
{
    if(step==0)
        return true;
    
    if(dir>=4) // Diagonal
        step*=0.7071;
    
    dir=__NormalizeDir(dir);
    
    // More than 8 pixels? Step 8 at a time
    while(step>8)
    {
        if(!__Ghost_CanMoveSingle(dir, step-8, imprecision, inAir))
            return false;
        step-=8;
    }
    
    return __Ghost_CanMoveSingle(dir, step, imprecision, inAir);
}

// Used by __Ghost_NewDir4() and __Ghost_NewDir8(). Uses the full step
// on both axes if the direction is diagonal.
bool __Ghost_CanMoveNES(int dir, float step, int imprecision)
{
    if(step==0)
        return true;
    
    // More than 8 pixels? Step 8 at a time
    while(step>8)
    {
        if(!__Ghost_CanMoveSingle(dir, step-8, imprecision, Ghost_Z>0))
            return false;
        step-=8;
    }
    
    return __Ghost_CanMoveSingle(dir, step, imprecision, Ghost_Z>0);
}

// Check a single line for movability; needed when checking CanMove
// over more than 8 pixels
bool __Ghost_CanMoveSingle(int dir, float step, int imprecision, bool inAir)
{
    int i;
    float leadingEdge; // X or Y position of the leading edge
    int edgeSize; // Length of that edge (ignoring imprecision)
    float edgeStart; // X or Y at the top or left end of the leading edge
    int numCheckPoints; // Number of points to check, excluding endpoints
    
    if(dir==DIR_LEFT)
    {
        // The edge size is tile height minus hit box offsets
        edgeSize=16*Ghost_TileHeight-(__Ghost_YOffsets>>8)-(__Ghost_YOffsets&0xFF);
        
        // The leading edge is the left edge of the hitbox
        leadingEdge=Ghost_X+(__Ghost_XOffsets>>8)-step;
        
        // The edge starts at the top of the hitbox
        edgeStart=Ghost_Y+(__Ghost_YOffsets>>8);
        
        // Check every eight pixels; -1 cuts off the last point
        numCheckPoints=edgeSize/8-1;
        
        // Check the non-end points
        for(i=1; i<=numCheckPoints; i++)
        {
            if(!Ghost_CanMovePixel(leadingEdge, edgeStart+i*8, inAir))
                return false;
        }
        
        // Then the endpoints
        if(!Ghost_CanMovePixel(leadingEdge, edgeStart+imprecision, inAir))
            return false;
        if(!Ghost_CanMovePixel(leadingEdge, edgeStart+edgeSize-imprecision-1, inAir))
            return false;
        
        return true;
    }
    else if(dir==DIR_RIGHT)
    {
        edgeSize=16*Ghost_TileHeight-(__Ghost_YOffsets>>8)-(__Ghost_YOffsets&0xFF);
        leadingEdge=Ghost_X+16*Ghost_TileWidth-(__Ghost_XOffsets&0xFF)-1+step;
        edgeStart=Ghost_Y+(__Ghost_YOffsets>>8);
        numCheckPoints=edgeSize/8-1;
        
        for(i=1; i<=numCheckPoints; i++)
        {
            if(!Ghost_CanMovePixel(leadingEdge, edgeStart+i*8, inAir))
                return false;
        }
        
        if(!Ghost_CanMovePixel(leadingEdge, edgeStart+imprecision, inAir))
            return false;
        if(!Ghost_CanMovePixel(leadingEdge, edgeStart+edgeSize-imprecision-1, inAir))
            return false;
        
        return true;
    }
    else if(dir==DIR_UP)
    {
        // Most enemies can't move upward on sideview screens
        if(IsSideview() && !Ghost_FlagIsSet(GHF_NO_FALL))

            return false;
        
        edgeSize=16*Ghost_TileWidth-(__Ghost_XOffsets>>8)-(__Ghost_XOffsets&0xFF);
        leadingEdge=Ghost_Y+(__Ghost_YOffsets>>8)-step;
        edgeStart=Ghost_X+(__Ghost_XOffsets>>8);
        numCheckPoints=edgeSize/8-1;
        
        for(i=1; i<=numCheckPoints; i++)
        {
            if(!Ghost_CanMovePixel(edgeStart+i*8, leadingEdge, inAir))
                return false;
        }
        
        if(!Ghost_CanMovePixel(edgeStart+imprecision, leadingEdge, inAir))
            return false;
        if(!Ghost_CanMovePixel(edgeStart+edgeSize-imprecision-1, leadingEdge, inAir))
            return false;
        
        return true;
    }
    else if(dir==DIR_DOWN)
    {
        edgeSize=16*Ghost_TileWidth-(__Ghost_XOffsets>>8)-(__Ghost_XOffsets&0xFF);
        leadingEdge=Ghost_Y+16*Ghost_TileHeight-(__Ghost_YOffsets&0xFF)-1+step;
        edgeStart=Ghost_X+(__Ghost_XOffsets>>8);
        numCheckPoints=edgeSize/8-1;
        
        for(i=1; i<=numCheckPoints; i++)
        {
            if(!Ghost_CanMovePixel(edgeStart+i*8, leadingEdge, inAir))
                return false;
        }
        
        if(!Ghost_CanMovePixel(edgeStart+imprecision, leadingEdge, inAir))
            return false;
        if(!Ghost_CanMovePixel(edgeStart+edgeSize-imprecision-1, leadingEdge, inAir))
            return false;
        
        return true;
    }
    
    // Diagonal directions - move along one axis and test the other
    else if(dir==DIR_LEFTUP)
    {
        bool ret;
        
        Ghost_X-=step;
        ret=Ghost_CanMove(DIR_UP, step, imprecision, inAir);
        Ghost_X+=step;
        if(!ret)
            return false;
        
        Ghost_Y-=step;
        ret=Ghost_CanMove(DIR_LEFT, step, imprecision, inAir);
        Ghost_Y+=step;
        return ret;
    }
    else if(dir==DIR_RIGHTUP)
    {
        bool ret;
        
        Ghost_X+=step;
        ret=Ghost_CanMove(DIR_UP, step, imprecision, inAir);
        Ghost_X-=step;
        if(!ret)
            return false;
        
        Ghost_Y-=step;
        ret=Ghost_CanMove(DIR_RIGHT, step, imprecision, inAir);
        Ghost_Y+=step;
        return ret;
    }
    else if(dir==DIR_LEFTDOWN)
    {
        bool ret;
        
        Ghost_X-=step;
        ret=Ghost_CanMove(DIR_DOWN, step, imprecision, inAir);
        Ghost_X+=step;
        if(!ret)
            return false;
        
        Ghost_Y+=step;
        ret=Ghost_CanMove(DIR_LEFT, step, imprecision, inAir);
        Ghost_Y-=step;
        return ret;
    }
    else if(dir==DIR_RIGHTDOWN)
    {
        bool ret;
        
        Ghost_X+=step;
        ret=Ghost_CanMove(DIR_DOWN, step, imprecision, inAir);
        Ghost_X-=step;
        if(!ret)
            return false;
        
        Ghost_Y+=step;
        ret=Ghost_CanMove(DIR_RIGHT, step, imprecision, inAir);
        Ghost_Y-=step;
        return ret;
    }
    else // Invalid direction
        return false;
}

bool Ghost_CanMove(int dir, float step, int imprecision)
{
    return Ghost_CanMove(dir, step, imprecision, Ghost_Z>0);
}

bool Ghost_CanMovePixel(int x, int y, bool inAir)
{
    if(x<0 || x>255 || y<0 || y>175)
        return Ghost_FlagIsSet(GHF_MOVE_OFFSCREEN);
    
    int combo=ComboAt(x, y);
    
    // "No enemy" flags and combos
    if(!Ghost_FlagIsSet(GHF_IGNORE_NO_ENEMY))
    {
        if(Screen->ComboT[combo]==CT_NOENEMY)
            return false;
        if(Screen->ComboF[combo]==CF_NOENEMY)
            return false;
        if(Screen->ComboI[combo]==CF_NOENEMY)
            return false;
        
        // Flying
        if(Ghost_FlagIsSet(GHF_FLYING_ENEMY))
        {
            if(Screen->ComboT[combo]==CT_NOFLYZONE)
                return false;
        }
        // Jumping
        else if(inAir)
        {
            if(Screen->ComboT[combo]==CT_NOJUMPZONE)
                return false;
        }
        // Ground
        else
        {
            if(Screen->ComboT[combo]==CT_NOGROUNDENEMY)
                return false;
            if(Screen->ComboF[combo]==CF_NOGROUNDENEMY)
                return false;
            if(Screen->ComboI[combo]==CF_NOGROUNDENEMY)
                return false;
        }
    }
    
    // Restricted to water
    if(Ghost_FlagIsSet(GHF_DEEP_WATER_ONLY))
        return IsWater(combo);
    
    if(Ghost_FlagIsSet(GHF_WATER_ONLY))
        return IsWater(combo) || Screen->ComboT[combo]==CT_SHALLOWWATER;
    
    // Water and pit walkability override solidity checking
    if(IsWater(combo))
        return Ghost_FlagIsSet(GHF_IGNORE_WATER);
    
    if(__IsPit(combo))
        return Ghost_FlagIsSet(GHF_IGNORE_PITS);
    
    // Ignore solidity: always OK
    if(Ghost_FlagIsSet(GHF_IGNORE_SOLIDITY))
        return true;
    
    // Full tile movement: Only if the whole tile is walkable
    else if(Ghost_FlagIsSet(GHF_FULL_TILE_MOVEMENT))
        return __FullTileWalkable(x, y);
    
    // All others: Only if the pixel is walkable
    else
        return !Screen->isSolid(x, y);
}

bool Ghost_CanMovePixel(int x, int y)
{
    return Ghost_CanMovePixel(x, y, Ghost_Z>0);
}

int Ghost_ConstantWalk4(int counter, int step, int rate, int homing, int hunger)
{
    // Don't move while being knocked back
    if(__Ghost_KnockbackCounter>0)
        return counter;
    
    int xStep=0;

    int yStep=0;
    
    // Trying to walk onto half solid combos will throw off the counter
    bool ftmSet=Ghost_FlagIsSet(GHF_FULL_TILE_MOVEMENT);
    if(!Ghost_FlagIsSet(GHF_IGNORE_SOLIDITY))
        Ghost_SetFlag(GHF_FULL_TILE_MOVEMENT);
    
    step/=100;
    
    // If the enemy was knocked back into a wall,
    // check whether it's half a tile off the grid
    if((__Ghost_InternalFlags&__GHFI_KNOCKBACK_INTERRUPTED)!=0)
    {
        if(Ghost_X%16==8) // Half a tile off horizontally
        {
            // Fix direction
            bool canMoveLeft=__Ghost_CanMoveNES(DIR_LEFT, 1, 0);
            bool canMoveRight=__Ghost_CanMoveNES(DIR_RIGHT, 1, 0);
            
            // Can move both left and right (or neither, for some reason)
            if(canMoveLeft==canMoveRight)
            {
                // Don't change direction if already facing left or right
                if(!(Ghost_Dir==DIR_LEFT || Ghost_Dir==DIR_RIGHT))
                    Ghost_Dir=Choose(DIR_LEFT, DIR_RIGHT);
            }
            // Can only move left
            else if(canMoveLeft)
                Ghost_Dir=DIR_LEFT;
            // Can only move right
            else
                Ghost_Dir=DIR_RIGHT;
            
            counter=Floor(8/step);
        }
        else if(Ghost_Y%16==8) // Half a tile off vertically
        {
            // Fix direction
            bool canMoveUp=__Ghost_CanMoveNES(DIR_UP, 1, 0);
            bool canMoveDown=__Ghost_CanMoveNES(DIR_DOWN, 1, 0);
            
            // Can move both up and down (or neither, for some reason)
            if(canMoveUp==canMoveDown)
            {
                // Don't change direction if already facing up or down
                if(!(Ghost_Dir==DIR_UP || Ghost_Dir==DIR_DOWN))
                    Ghost_Dir=Choose(DIR_UP, DIR_DOWN);
            }
            // Can only move up
            else if(canMoveUp)
                Ghost_Dir=DIR_UP;
            // Can only move down
            else
                Ghost_Dir=DIR_DOWN;
            
            counter=Floor(8/step);
        }
        else // Aligned to the grid
            counter=Floor(16/step);
    }
    
    if(counter<=0)
    {
        // Snap to grid and maybe turn
        __Ghost_FixCoords();
        __Ghost_NewDir4(rate, homing,hunger);

        if(step==0)
            counter=0;
        else
            counter=Floor(16/step);
    }
    // Turn around after hitting Link
    if(Abs(Ghost_X-Link->X)<16 && Abs(Ghost_Y-Link->Y)<16)
    {
        if(Link->Action==LA_GOTHURTLAND &&
           (__Ghost_InternalFlags&__GHFI_HIT_LINK)==0)
        {
            Ghost_Dir^=1;
            counter=Floor(16/step)-counter;
            __Ghost_InternalFlags|=__GHFI_HIT_LINK;
        }
    }
    // Not touching Link - clear the flag
    else
    {
        __Ghost_InternalFlags&=~__GHFI_HIT_LINK;
    }
    
    // These functions use the full step on both axes for diagonal movement
    if(Ghost_Dir!=DIR_UP && Ghost_Dir!=DIR_DOWN)
    {
        if(Ghost_Dir==DIR_LEFT || Ghost_Dir==DIR_LEFTUP || Ghost_Dir==DIR_LEFTDOWN)
            xStep=-step;
        else // Right
            xStep=step;
    }
    
    if(Ghost_Dir!=DIR_LEFT && Ghost_Dir!=DIR_RIGHT)
    {
        if(Ghost_Dir==DIR_UP || Ghost_Dir==DIR_LEFTUP || Ghost_Dir==DIR_RIGHTUP)
            yStep=-step;
        else // Down
            yStep=step;
    }
    
    // Restore the flag
    if(!ftmSet)
        Ghost_UnsetFlag(GHF_FULL_TILE_MOVEMENT);
    
    Ghost_MoveXY(xStep, yStep, 0);
    return counter-1;
}

int Ghost_ConstantWalk8(int counter, int step, int rate, int homing, int hunger)
{
    // Don't move while being knocked back
    if(__Ghost_KnockbackCounter>0)
        return counter;
    
    int xStep=0;
    int yStep=0;
    step/=100;
    
    if(counter<=0)
    {
        // Turn
        __Ghost_NewDir8(rate, homing, hunger);
        counter=Floor(8/step);
    }
    
    // Needs to snap to the grid, so Ghost_Move() would be problematic
    if(Ghost_Dir!=DIR_UP && Ghost_Dir!=DIR_DOWN)
    {
        if(Ghost_Dir==DIR_LEFT || Ghost_Dir==DIR_LEFTUP || Ghost_Dir==DIR_LEFTDOWN)
            xStep=-step;
        else // Right
            xStep=step;

    }
    
    if(Ghost_Dir!=DIR_LEFT && Ghost_Dir!=DIR_RIGHT)
    {
        if(Ghost_Dir==DIR_UP || Ghost_Dir==DIR_LEFTUP || Ghost_Dir==DIR_RIGHTUP)
            yStep=-step;
        else // Down
            yStep=step;
    }
    
    Ghost_MoveXY(xStep, yStep, 0);
    return counter-1;
}

float Ghost_HaltingWalk4(int counter, int step, int rate, int homing, int hunger, int haltRate, int haltTime)
{
    // Don't move while being knocked back
    if(__Ghost_KnockbackCounter>0)
        return counter;
    
    // The counter is actually two combined...
    int walkCounter;
    int haltCounter;
    
    if(counter==-1)
    {
        walkCounter=0;
        haltCounter=0;
    }
    else
    {
        walkCounter=counter*10000;
        haltCounter=counter>>0;
    }
    
    // Halted; just count down
    if(haltCounter>0)
        return haltCounter-1;
    
    // Trying to walk onto half solid combos will throw off the counter
    bool ftmSet=Ghost_FlagIsSet(GHF_FULL_TILE_MOVEMENT);
    if(!Ghost_FlagIsSet(GHF_IGNORE_SOLIDITY))
        Ghost_SetFlag(GHF_FULL_TILE_MOVEMENT);
    
    step/=100;
    
    // If the enemy was knocked back into a wall,
    // check whether it's half a tile off the grid
    if((__Ghost_InternalFlags&__GHFI_KNOCKBACK_INTERRUPTED)!=0)
    {
        if(Ghost_X%16==8) // Half a tile off horizontally
        {
            // Fix direction
            bool canMoveLeft=__Ghost_CanMoveNES(DIR_LEFT, 1, 0);
            bool canMoveRight=__Ghost_CanMoveNES(DIR_RIGHT, 1, 0);
            
            // Can move both left and right (or neither, for some reason)
            if(canMoveLeft==canMoveRight)
            {
                // Don't change direction if already facing left or right
                if(!(Ghost_Dir==DIR_LEFT || Ghost_Dir==DIR_RIGHT))
                    Ghost_Dir=Choose(DIR_LEFT, DIR_RIGHT);
            }
            // Can only move left
            else if(canMoveLeft)
                Ghost_Dir=DIR_LEFT;
            // Can only move right
            else
                Ghost_Dir=DIR_RIGHT;
            
            walkCounter=Floor(8/step);
        }
        else if(Ghost_Y%16==8) // Half a tile off vertically
        {
            // Fix direction
            bool canMoveUp=__Ghost_CanMoveNES(DIR_UP, 1, 0);
            bool canMoveDown=__Ghost_CanMoveNES(DIR_DOWN, 1, 0);
            
            // Can move both up and down (or neither, for some reason)
            if(canMoveUp==canMoveDown)
            {
                // Don't change direction if already facing up or down
                if(!(Ghost_Dir==DIR_UP || Ghost_Dir==DIR_DOWN))
                    Ghost_Dir=Choose(DIR_UP, DIR_DOWN);
            }
            // Can only move up
            else if(canMoveUp)
                Ghost_Dir=DIR_UP;
            // Can only move down
            else
                Ghost_Dir=DIR_DOWN;
            
            walkCounter=Floor(8/step);
        }
        else // Aligned to the grid
            walkCounter=Floor(16/step);
    }
    
    if(walkCounter==0)
    {
        // Snap to the grid and possibly turn
        __Ghost_FixCoords();
        walkCounter=Floor(16/step);
        
        if(counter==-1)
        {
            __Ghost_NewDir4(rate, homing, hunger);
            
            // Halt?
            if(Rand(16)<haltRate)
            {
                if(!ftmSet)
                    Ghost_UnsetFlag(GHF_FULL_TILE_MOVEMENT);
                haltCounter=haltTime;
                return haltCounter;
            }
        }
    }
    
    // Turn around after hitting Link
    if(Abs(Ghost_X-Link->X)<16 && Abs(Ghost_Y-Link->Y)<16)
    {
        if(Link->Action==LA_GOTHURTLAND &&
           (__Ghost_InternalFlags&__GHFI_HIT_LINK)==0)
        {
            Ghost_Dir^=1;
            walkCounter=Floor(16/step)-walkCounter;
            __Ghost_InternalFlags|=__GHFI_HIT_LINK;
        }
    }
    // Not touching Link - clear the flag
    else
        __Ghost_InternalFlags&=~__GHFI_HIT_LINK;
    
    walkCounter--;
    Ghost_Move(Ghost_Dir, step, 0);
    
    if(!ftmSet)
        Ghost_UnsetFlag(GHF_FULL_TILE_MOVEMENT);
    
    if(walkCounter>0)
        return walkCounter/10000;
    else
        return -1;
}

int Ghost_VariableWalk8(int counter, int step, int rate, int homing,
                        int hunger, int turnCheckTime)
{
    // Don't move while being knocked back
    if(__Ghost_KnockbackCounter>0)
        return counter;
    
    step/=100;
    
    if(!__Ghost_CanMoveNES(Ghost_Dir, step, 0))
        counter=0;
    
    // Time to turn?
    if(counter<=0)
    {
        __Ghost_NewDir8(rate, homing, hunger);
        counter=turnCheckTime;
    }
    
    Ghost_Move(Ghost_Dir, step, 0);
    return counter-1;
}

float Ghost_FloaterWalk(float counter, int normalStep,
                        int accelTime, float accelAmount, int accelSteps,
                        int rate, int homing, int hunger,
                        int turnCheckTime, int restTime)
{
    // Bits 16-15: state
    // Bits 14-0: walk counter
    // Fraction: state timer    
    int state=counter&0x18000;
    int stateTimer=(counter%1)*10000;
    int walkCounter=counter&0x07FFF;
    int step=0;
    
    if(counter==-1) // First call - initialize
    {
        state=0x08000; // Speeding up
        stateTimer=0;
        walkCounter=0;
    }
    
    stateTimer=Min(stateTimer+1, 9999);
    
    // Resting
    if(state==0x00000)
    {
        if(stateTimer>=restTime) // Time to move
        {
            state=0x08000;
            stateTimer=0;
        }
    }
    
    // Speeding up
    else if(state==0x08000)
    {
        rate=0;
        
        if(stateTimer>=accelTime*accelSteps) // Full speed
        {
            state=0x10000;
            stateTimer=0;
        }
        else
            step=(((stateTimer-1)/accelTime)<<0)*accelAmount;
    }
    
    // Full speed
    else if(state==0x10000)
    {
        step=normalStep;
        
        if(stateTimer>48)
        {
            if(Rand(768)==0) // It'll stop eventually...
            {
                step=accelAmount*accelSteps;
                state=0x18000;
                stateTimer=0;
            }
        }
    }
    
    // Slowing down
    else // state==0x18000
    {
        rate=0;
        
        if(stateTimer>accelTime*accelSteps) // Stopped
        {
            state=0x00000;
            stateTimer=0;
        }
        else
        {
            int stepFactor=((accelTime*accelSteps-stateTimer)/accelTime)<<0;
            step=stepFactor*accelAmount;


        }
    }
    
    if(step>0)
        walkCounter=Ghost_VariableWalk8(walkCounter, step, rate, homing, hunger, turnCheckTime);
    
    counter=(state|walkCounter)+(stateTimer/10000);
    return counter;
}

// Used internally by walk functions to keep the enemy lined up with the grid correctly
void __Ghost_FixCoords()
{
    float newX=(Ghost_X&0xF0);
    if((Ghost_X&8)!=0)
        newX+=16;
    Ghost_X=newX;
    
    if((Screen->Flags[SF_ROOMTYPE]&100b)!=0) // If sideview
    {
        float newY=(Ghost_Y&0xF8);
        if((Ghost_Y&4)!=0)
            newY+=8;
        Ghost_Y=newY;
    }
    else
    {
        float newY=(Ghost_Y&0xF0);
        if((Ghost_Y&8)!=0)
            newY+=16;
        Ghost_Y=newY;
    }
}

// Determines the direction to Link
int __Ghost_LinedUp(int range, bool eightWay)
{
    // Up or down
    if(Abs(Link->X-Ghost_X)<=range)
    {
        if(Link->Y<Ghost_Y)
            return DIR_UP;
        else
            return DIR_DOWN;
    }
    // Left or right
    else if(Abs(Link->Y-Ghost_Y)<=range)
    {
        if(Link->X<Ghost_X)
            return DIR_LEFT;
        else
            return DIR_RIGHT;
    }

    // Diagonal
    if (eightWay)
    {
        if (Abs(Link->X-Ghost_X)-Abs(Link->Y-Ghost_Y)<=range)
        {
            if (Link->Y<Ghost_Y)
            {
                if (Link->X<Ghost_X)
                    return DIR_LEFTUP;
                else
                    return DIR_RIGHTUP;
            }
            else
            {
                if (Link->X<Ghost_X)
                    return DIR_LEFTDOWN;
                else
                    return DIR_RIGHTDOWN;
            }
        }
    }

    // Not in range
    return -1;
}

// Used by walk functions to pick a new direction
void __Ghost_NewDir4(int rate, int homing, int hunger)
{
    int newDir=-1;
    // Go for bait?
    if(Rand(4)<hunger)
    {
        // See if any is on the screen
        lweapon bait=LoadLWeaponOf(LW_BAIT);
        
        if(bait->isValid())
        {
            // Found bait; try to move toward it
            if(Abs(Ghost_Y-bait->Y)>14)
            {
                if(bait->Y<Ghost_Y)

                    newDir=DIR_UP;
                else
                    newDir=DIR_DOWN;
                
                if(__Ghost_CanMoveNES(newDir, 16, 0))
                {
                    Ghost_Dir=newDir;
                    return;
                }
            }
            
            if(bait->X<Ghost_X)
                newDir=DIR_LEFT;
            else
                newDir=DIR_RIGHT;
            
            if(__Ghost_CanMoveNES(newDir, 16, 0))
            {
                Ghost_Dir=newDir;
                return;
            }
        }
    } // End hunger check
    
    // Homing?
    if(Rand(256)<homing)
    {
        newDir=__Ghost_LinedUp(8, false);
        if(newDir>=0 && __Ghost_CanMoveNES(newDir, 16, 0))
        {
            Ghost_Dir=newDir;
            return;
        }
    }
    
    // Check solidity of surrounding combos
    bool combos[4];
    int numDirs;
    int counter;
    
    for(int i=0; i<4; i++)
    {
        if(__Ghost_CanMoveNES(i, 16, 0))
        {
            combos[i]=true;
            numDirs++;
        }
    }
    
    // Trapped?
    if(numDirs==0)
    {
        Ghost_Dir=-1;
        return;
    }
    
    if(Rand(16)>=rate)
    {
        // Doesn't want to turn; keep going the same direction if possible
        if(combos[Ghost_Dir])
            return;
    }
    
    // Pick a direction at random from the ones available
    counter=Rand(numDirs);
    for(int dir=0; dir<4; dir++)
    {
        if(!combos[dir])
            continue;
        
        if(counter==0)
        {
            Ghost_Dir=dir;
            return;
        }
        else
            counter--;
    }
}

// Used by walk functions to pick a new direction
void __Ghost_NewDir8(int rate, int homing, int hunger)
{
    int newDir=-1;

    // If the enemy can keep moving, it can turn voluntarily
    if(__Ghost_CanMoveNES(Ghost_Dir, 8, 0))
    {
        if(Rand(4)<hunger)
        {
            // Any bait around?
            lweapon bait=LoadLWeaponOf(LW_BAIT);

            if(bait->isValid())
            {
                // Go toward it
                if(bait->X<Ghost_X)
                    newDir=DIR_LEFT;
                else if(bait->X>Ghost_X)
                    newDir=DIR_RIGHT;
                else
                    newDir=0;

                if(Abs(Ghost_Y-bait->Y)>14)
                {
                    if(newDir>0)
                    {
                        if(bait->Y<Ghost_Y)
                            newDir+=2;
                        else
                            newDir+=4;
                    }
                    else
                    {
                        if(bait->Y<Ghost_Y)
                            newDir=DIR_UP;
                        else
                            newDir=DIR_DOWN;
                    }
                }

                if(__Ghost_CanMoveNES(newDir, 8, 0))
                {
                    Ghost_Dir=newDir;
                    Ghost_X<<=0;
                    Ghost_Y<<=0;
                    return;
                }
            }
        } // End hunger check

        // Aim at Link?
        if(Rand(256)<homing)
        {
            newDir=__Ghost_LinedUp(8, true);
            if(newDir>=0 && __Ghost_CanMoveNES(newDir, 8, 0))
            {
                Ghost_Dir=newDir;
                Ghost_X<<=0;
                Ghost_Y<<=0;
                return;
            }
        }

        // Didn't go for bait or Link; keep going straight?
        if(Rand(16)>=rate)
            return;
    }

    // Either randomly chose to turn or has no choice

    // See which ways the enemy can go
    bool dirs[8];
    int numDirs;
    int counter;

    for(int i=0; i<8; i++)
    {
        if(__Ghost_CanMoveNES(i, 8, 0))
        {
            numDirs++;
            dirs[i]=true;
        }
    }

    // Trapped?
    if(numDirs==0)
    {
        Ghost_Dir=-1;
        Ghost_X<<=0;
        Ghost_Y<<=0;
        return;
    }

    // Pick a random direction
    counter=Rand(numDirs);
    for(int dir=0; dir<8; dir++)
    {
        if(!dirs[dir])
            continue;

        if(counter==0)
        {
            Ghost_Dir=dir;
            Ghost_X<<=0;
            Ghost_Y<<=0;
            return;
        }
        else
            counter--;
    }
}

// Returns true if the only if the full tile at the given location is walkable
bool __FullTileWalkable(int x, int y)
{
    // Offscreen?
    if(x<0 || y<0 || x>=256 || y>=176)
        return Ghost_FlagIsSet(GHF_MOVE_OFFSCREEN);
    
    // Get the exact coordinate of the top-left pixel
    x-=x%16;
    y-=y%16;
    
    if(Screen->isSolid(x, y) ||
       Screen->isSolid(x+8, y) ||
       Screen->isSolid(x, y+8) ||
       Screen->isSolid(x+8, y+8))
        return false;
    
    return true;
}

void Ghost_SetPosition(ffc this, npc ghost)
{
    if(!ghost->isValid())
        return;
    
    // Real Z
    if(GH_FAKE_Z==0 && !Ghost_FlagIsSet(GHF_FAKE_Z))
    {
        ghost->X=Ghost_X;
        ghost->Y=Ghost_Y;
        ghost->Z=Ghost_Z;
    }

    // Fake Z
    else
    {
        ghost->X=Ghost_X;
        ghost->Y=Ghost_Y-Ghost_Z;
        ghost->Z=0;
    }

    // Don't let the FFC go too far offscreen, or else it will disappear
    this->X=Clamp(Ghost_X+ghost->DrawXOffset, -64, 256);
    this->Y=Clamp(Ghost_Y-Ghost_Z+ghost->DrawYOffset-ghost->DrawZOffset, -64, 176);
}

