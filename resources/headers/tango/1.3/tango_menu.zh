// tango.zh
// Version 1.3.3


// Menu-related functions and constants.

const int TANGO_MENU_CAN_CANCEL = 1;
const int TANGO_MENU_PERSISTENT = 2;


// Resets all menu data.
void Tango_InitializeMenu()
{
    __Tango_Data[__TDIDX_MENU_FLAGS]=0;
    __Tango_Data[__TDIDX_MENU_CURSOR_POS]=-214747.9999;
    __Tango_Data[__TDIDX_MENU_CURSOR_COMBO]=0;
    __Tango_Data[__TDIDX_MENU_CURSOR_CSET]=0;
    __Tango_Data[__TDIDX_MENU_CURSOR_WIDTH]=1;
    __Tango_Data[__TDIDX_MENU_CURSOR_HEIGHT]=1;
    __Tango_Data[__TDIDX_MENU_CURSOR_SFX]=0;
    __Tango_Data[__TDIDX_MENU_SELECT_SFX]=0;
    __Tango_Data[__TDIDX_CHOICE_COUNT]=0;
    __Tango_Data[__TDIDX_LAST_CHOICE]=0;
    __Tango_Data[__TDIDX_FIRST_CHOICE_ON_LINE]=0;
    __Tango_Data[__TDIDX_MENU_SLOT]=-1;
    __Tango_Data[__TDIDX_MENU_TOP]=-214747.9999;
    __Tango_Data[__TDIDX_MENU_BOTTOM]=214747.9999;
    __Tango_Data[__TDIDX_MENU_SAVE_STATE_DEST]=NULL;
}

// This version is used when reading a menu from a string. It loads the
// cursor combo and sounds from the style instead of setting them to 0,
// and it sets the top and bottom of the menu so it can scroll.
void __Tango_InitializeMenu(int styleStart)
{
    __Tango_Data[__TDIDX_MENU_CURSOR_POS]=-214747.9999;
    __Tango_Data[__TDIDX_CHOICE_COUNT]=0;
    __Tango_Data[__TDIDX_LAST_CHOICE]=0;
    __Tango_Data[__TDIDX_FIRST_CHOICE_ON_LINE]=0;
    
    __Tango_Data[__TDIDX_MENU_CURSOR_COMBO]=
      __Tango_Styles[styleStart+TANGO_STYLE_MENU_CURSOR_COMBO];
    __Tango_Data[__TDIDX_MENU_CURSOR_CSET]=
      __Tango_Styles[styleStart+TANGO_STYLE_MENU_CURSOR_CSET];
    __Tango_Data[__TDIDX_MENU_CURSOR_WIDTH]=
      Clamp(__Tango_Styles[styleStart+TANGO_STYLE_MENU_CURSOR_WIDTH], 1, 20);
    __Tango_Data[__TDIDX_MENU_CURSOR_HEIGHT]=
      Clamp(__Tango_Styles[styleStart+TANGO_STYLE_MENU_CURSOR_HEIGHT], 1, 20);
    __Tango_Data[__TDIDX_MENU_CURSOR_SFX]=
      __Tango_Styles[styleStart+TANGO_STYLE_MENU_CURSOR_MOVE_SFX];
    __Tango_Data[__TDIDX_MENU_SELECT_SFX]=
      __Tango_Styles[styleStart+TANGO_STYLE_MENU_SELECT_SFX];
    __Tango_Data[__TDIDX_MENU_SLOT]=__Tango_Data[__TCS_ID];
    
    int font=__Tango_Styles[styleStart+TANGO_STYLE_TEXT_FONT];
    __Tango_Data[__TDIDX_MENU_TOP]=__Tango_GetCurrSlotData(__TSDIDX_SCREEN_Y)+
      __Tango_Styles[styleStart+TANGO_STYLE_TEXT_Y];
    __Tango_Data[__TDIDX_MENU_BOTTOM]=__Tango_Data[__TDIDX_MENU_TOP]+
      __Tango_Styles[styleStart+TANGO_STYLE_TEXT_HEIGHT]-
      font[__TANGO_FONT_CHAR_HEIGHT];
    __Tango_Data[__TDIDX_MENU_SAVE_STATE_DEST]=NULL;
}

void Tango_AddMenuChoice(int value, int x, int y)
{
    if(__Tango_Data[__TDIDX_CHOICE_COUNT]>=__TANGO_MAX_MENU_ITEMS)
    {
        __Tango_LogError(__TANGO_ERROR_TOO_MANY_CHOICES);
        return;
    }
    
    int dataStart=__TDIDX_CHOICE_DATA+
      __Tango_Data[__TDIDX_CHOICE_COUNT]*__TANGO_SIZEOF_CHOICE;
    __Tango_Data[dataStart+__TANGO_CHOICE_VALUE]=value;
    __Tango_Data[dataStart+__TANGO_CHOICE_X]=x;
    __Tango_Data[dataStart+__TANGO_CHOICE_Y]=y;
    __Tango_Data[__TDIDX_CHOICE_COUNT]++;
}

void Tango_SetMenuCursor(int combo, int cset)
{
    __Tango_Data[__TDIDX_MENU_CURSOR_COMBO]=combo;
    __Tango_Data[__TDIDX_MENU_CURSOR_CSET]=cset;
    __Tango_Data[__TDIDX_MENU_CURSOR_WIDTH]=1;
    __Tango_Data[__TDIDX_MENU_CURSOR_HEIGHT]=1;
}

void Tango_SetMenuCursor(int combo, int cset, int width, int height)
{
    __Tango_Data[__TDIDX_MENU_CURSOR_COMBO]=combo;
    __Tango_Data[__TDIDX_MENU_CURSOR_CSET]=cset;
    __Tango_Data[__TDIDX_MENU_CURSOR_WIDTH]=width;
    __Tango_Data[__TDIDX_MENU_CURSOR_HEIGHT]=height;
}

void Tango_SetMenuSFX(int moveSound, int selectSound, int cancelSound)
{
    __Tango_Data[__TDIDX_MENU_CURSOR_SFX]=moveSound;
    __Tango_Data[__TDIDX_MENU_SELECT_SFX]=selectSound;
    __Tango_Data[__TDIDX_MENU_CANCEL_SFX]=cancelSound;
}

void Tango_SetMenuFlags(int flags)
{
    __Tango_Data[__TDIDX_MENU_FLAGS]=flags;
}

void Tango_ActivateMenu()
{
    if(__Tango_Data[__TDIDX_CHOICE_COUNT]<=0)
    {
        __Tango_LogError(__TANGO_ERROR_EMPTY_MENU);
        return;
    }
    
    __Tango_Data[__TDIDX_MENU_CURSOR_POS]=0;
    __Tango_UnpressMenu(); // Prevent the player from making a selection instantly
    __Tango_ScrollToMenuCursor(0);
    __Tango_SetCursorMovement(0, 0);
}

void Tango_DeactivateMenu()
{
    __Tango_Data[__TDIDX_MENU_CURSOR_POS]=-214747.9999;
    __Tango_MenuNotify();
}

bool Tango_MenuIsActive()
{
    // Lazy, but it works
    return __Tango_Data[__TDIDX_MENU_CURSOR_POS]>-214747.9999;
}

int Tango_GetCurrentMenuChoice()
{
    if(!__Tango_CursorPosIsValid()) // Invalid position or menu is inactive
        return 0;
    
    int pos=__Tango_Data[__TDIDX_MENU_CURSOR_POS];
    int dataStart=__TDIDX_CHOICE_DATA+pos*__TANGO_SIZEOF_CHOICE;
    return __Tango_Data[dataStart+__TANGO_CHOICE_VALUE];
}

int Tango_GetLastMenuChoice()
{
    return __Tango_Data[__TDIDX_LAST_CHOICE];
}

void Tango_MoveMenuChoice(int choice, int x, int y)
{
    if(choice>=__Tango_Data[__TDIDX_CHOICE_COUNT] || (choice>>0)!=choice)
    {
        __Tango_LogError(__TANGO_ERROR_INVALID_CHOICE_MOVED, choice);
        return;
    }
    
    int dataStart=__TDIDX_CHOICE_DATA+choice*__TANGO_SIZEOF_CHOICE;
    __Tango_Data[dataStart+__TANGO_CHOICE_X]=x;
    __Tango_Data[dataStart+__TANGO_CHOICE_Y]=y;
    
    if(__Tango_Data[__TDIDX_MENU_CURSOR_POS]==choice)
        __Tango_SetCursorMovement(choice, __Tango_Data[__TDIDX_MENU_CURSOR_TIMER]);
}

void __Tango_SetUpMenu(int styleStart)
{
    Tango_InitializeMenu();
    Tango_SetMenuCursor(
      __Tango_Styles[styleStart+TANGO_STYLE_MENU_CURSOR_COMBO],
      __Tango_Styles[styleStart+TANGO_STYLE_MENU_CURSOR_CSET]);
}

void __Tango_UpdateMenu()
{
    if(__Tango_Data[__TDIDX_LAST_CHOICE]!=0)
        __Tango_Data[__TDIDX_LAST_CHOICE]=0;
    
    int oldPos=__Tango_Data[__TDIDX_MENU_CURSOR_POS];
    int pos;
    bool oldPosWasValid=__Tango_CursorPosIsValid();
    
    if(Link->PressUp)
        pos=__Tango_GetNextMenuPos(DIR_UP);
    else if(Link->PressDown)
        pos=__Tango_GetNextMenuPos(DIR_DOWN);
    else if(Link->PressLeft)
        pos=__Tango_GetNextMenuPos(DIR_LEFT);
    else if(Link->PressRight)
        pos=__Tango_GetNextMenuPos(DIR_RIGHT);
    else
        pos=oldPos;
    
    // Selected
    if(__Tango_PressMenuSelect() && __Tango_CursorPosIsValid())
        __Tango_MenuSelect(pos);
    
    // Canceled
    else if((__Tango_Data[__TDIDX_MENU_FLAGS]&TANGO_MENU_CAN_CANCEL)!=0 &&
      __Tango_PressMenuCancel())
        __Tango_MenuCancel();
    
    // Cursor was moved
    else if(pos!=oldPos)
    {
        __Tango_ScrollToMenuCursor(pos);
        Audio->PlaySound(__Tango_Data[__TDIDX_MENU_CURSOR_SFX]);
        __Tango_Data[__TDIDX_MENU_CURSOR_POS]=pos;
        
        if(oldPosWasValid)
            __Tango_SetCursorMovement(pos, __TANGO_MENU_CURSOR_TRAVEL_TIME);
        else
            __Tango_SetCursorMovement(pos, 0);
    }
    else
        __Tango_UpdateCursorMovement();
}

// Get the next menu position in the given direction.
int __Tango_GetNextMenuPos(int dir)
{
    if(!__Tango_CursorPosIsValid())
        return 0;
    
    int currPos=__Tango_Data[__TDIDX_MENU_CURSOR_POS];
    int currPosX=__Tango_Data[__TDIDX_CHOICE_DATA+
                              currPos*__TANGO_SIZEOF_CHOICE+
                              __TANGO_CHOICE_X];
    int currPosY=__Tango_Data[__TDIDX_CHOICE_DATA+
                              currPos*__TANGO_SIZEOF_CHOICE+
                              __TANGO_CHOICE_Y];
    int bestMatch=-1;
    int bestXDiff;
    int bestYDiff;
    
    int x;
    int y;
    int xDiff;
    int yDiff;
    
    bool newBest;
    
    for(int i=__Tango_Data[__TDIDX_CHOICE_COUNT]-1; i>=0; i--)
    {
        if(i==currPos)
            continue;
        
        newBest=false;
        x=__Tango_Data[__TDIDX_CHOICE_DATA+
                       i*__TANGO_SIZEOF_CHOICE+
                       __TANGO_CHOICE_X];
        y=__Tango_Data[__TDIDX_CHOICE_DATA+
                       i*__TANGO_SIZEOF_CHOICE+
                       __TANGO_CHOICE_Y];
        
        if(dir==DIR_UP || dir==DIR_DOWN)
        {
            // Never move left or right when pressing up or down.
            if(y==currPosY)
                continue;
            
            // Find the X and Y difference. Only the magnitude of the
            // X difference is interesting.
            xDiff=Abs(x-currPosX);
            yDiff=y-currPosY;
            
            if(bestMatch==-1)
                newBest=true;
            
            else if(dir==DIR_UP)
            {
                if(bestYDiff>0)
                {
                    // The best match is down. This one's better if
                    // - this one is up,
                    // - this one is farther down, or
                    // - this one is as far down and closer horizontally.
                    if(yDiff<0 ||
                       yDiff>bestYDiff ||
                       (yDiff==bestYDiff && xDiff<bestXDiff))
                        newBest=true;
                }
                else
                {
                    // The best match is up. This one's better if
                    // - this one is farther down, but still up, or
                    // - this one is as far up and closer horizontally.
                    if((yDiff<0 && yDiff>bestYDiff) ||
                       (yDiff==bestYDiff && xDiff<bestXDiff))
                        newBest=true;
                }
            }
            else // dir==DIR_DOWN
            {
                if(bestYDiff<0)
                {
                    if(yDiff>0 ||
                       yDiff<bestYDiff ||
                       (yDiff==bestYDiff && xDiff<bestXDiff))
                        newBest=true;
                }
                else
                {
                    if((yDiff>0 && yDiff<bestYDiff) ||
                       (yDiff==bestYDiff && xDiff<bestXDiff))
                        newBest=true;
                }
            }
        } // end dir==DIR_UP || dir==DIR_DOWN
        else // dir==DIR_LEFT || dir==DIR_RIGHT
        {
            if(x==currPosX)
                continue;
            
            xDiff=x-currPosX;
            yDiff=Abs(y-currPosY);
            
            if(bestMatch==-1)
                newBest=true;
            
            else if(dir==DIR_LEFT)
            {
                if(bestXDiff>0)
                {
                    if(xDiff<0 ||
                       xDiff>bestXDiff ||
                       (xDiff==bestXDiff && yDiff<bestYDiff))
                        newBest=true;
                }
                else
                {
                    if((xDiff<0 && xDiff>bestXDiff) ||
                       (xDiff==bestXDiff && yDiff<bestYDiff))
                        newBest=true;
                }
            }
            else // dir==DIR_RIGHT
            {
                if(bestXDiff<0)
                {
                    if(xDiff>0 ||
                       xDiff<bestXDiff ||
                       (xDiff==bestXDiff && yDiff<bestYDiff))
                        newBest=true;
                }
                else
                {
                    if((xDiff>0 && xDiff<bestXDiff) ||
                       (xDiff==bestXDiff && yDiff<bestYDiff))
                        newBest=true;
                }
            }
        } // end dir==DIR_LEFT || dir==DIR_RIGHT
        
        if(newBest)
        {
            bestMatch=i;
            bestXDiff=xDiff;
            bestYDiff=yDiff;
        }
    } // End for(...)
    
    if(bestMatch!=-1)
        return bestMatch;
    else
        return currPos;
}

// Adds a cursor stop for a menu choice defined in text.
void __Tango_ReadChoice(int pos, int defStart, int dataStart, int styleStart)
{
    int x=__Tango_SlotData[dataStart+__TSDIDX_SCREEN_X]+
      __Tango_Styles[styleStart+TANGO_STYLE_TEXT_X]+
      __Tango_SlotData[dataStart+__TSDIDX_CHAR_X]-
      __Tango_SlotDefs[defStart+__TSDEF_X];
    int y=__Tango_SlotData[dataStart+__TSDIDX_SCREEN_Y]+
      __Tango_Styles[styleStart+TANGO_STYLE_TEXT_Y]+
      __Tango_SlotData[dataStart+__TSDIDX_CHAR_Y]-
      __Tango_SlotDefs[defStart+__TSDEF_Y]-
      __Tango_SlotData[dataStart+__TSDIDX_OFFSET];
    int value=__Tango_Buffer[pos+1];
    Tango_AddMenuChoice(value, x, y);
}

void __Tango_MenuSelect(int pos)
{
    if(__Tango_Data[__TDIDX_MENU_SAVE_STATE_DEST]>0)
        Tango_SaveMenuState(__Tango_Data[__TDIDX_MENU_SAVE_STATE_DEST]);
    
    int dataStart=__TDIDX_CHOICE_DATA+pos*__TANGO_SIZEOF_CHOICE;
    __Tango_Data[__TDIDX_LAST_CHOICE]=
      __Tango_Data[dataStart+__TANGO_CHOICE_VALUE];
    Audio->PlaySound(__Tango_Data[__TDIDX_MENU_SELECT_SFX]);
    __Tango_Data[__TDIDX_GLOBAL_FLAGS]|=__TANGO_GFLAG_UNPRESS_MENU;
    if((__Tango_Data[__TDIDX_MENU_FLAGS]&TANGO_MENU_PERSISTENT)==0)
        Tango_DeactivateMenu();
}

void __Tango_MenuCancel()
{
    if(__Tango_Data[__TDIDX_MENU_SAVE_STATE_DEST]>0)
        Tango_SaveMenuState(__Tango_Data[__TDIDX_MENU_SAVE_STATE_DEST]);
    
    __Tango_Data[__TDIDX_LAST_CHOICE]=0;
    __Tango_Data[__TDIDX_MENU_CURSOR_POS]=-214747.9999;
    Audio->PlaySound(__Tango_Data[__TDIDX_MENU_CANCEL_SFX]);
    __Tango_MenuNotify();
    __Tango_Data[__TDIDX_GLOBAL_FLAGS]|=__TANGO_GFLAG_UNPRESS_MENU;
}

// Used when the text scrolls while a menu is printing.
void __Tango_ShiftMenuUp(int amount)
{
    int index=__TDIDX_CHOICE_DATA+__TANGO_CHOICE_Y;
    for(int i=0; i<__Tango_Data[__TDIDX_CHOICE_COUNT]; i++)
    {
        __Tango_Data[index]-=amount;
        index+=__TANGO_SIZEOF_CHOICE;
    }
}

// Used when a menu needs to be centered.
void __Tango_ShiftMenuRight(int amount)
{
    int index=__TDIDX_CHOICE_DATA+
                __Tango_Data[__TDIDX_FIRST_CHOICE_ON_LINE]*__TANGO_SIZEOF_CHOICE+
                __TANGO_CHOICE_X;
    for(int i=__Tango_Data[__TDIDX_FIRST_CHOICE_ON_LINE];
        i<__Tango_Data[__TDIDX_CHOICE_COUNT]; i++)
    {
        __Tango_Data[index]+=amount;
        index+=__TANGO_SIZEOF_CHOICE;
    }

    // The current count is the same as the number that will be first
    // on the next line.
    __Tango_Data[__TDIDX_FIRST_CHOICE_ON_LINE]=
      __Tango_Data[__TDIDX_CHOICE_COUNT];
}

// Used when a slot containing a menu is repositioned.
void __Tango_ShiftMenu(int x, int y)
{
    int index=__TDIDX_CHOICE_DATA;
    for(int i=0; i<__Tango_Data[__TDIDX_CHOICE_COUNT]; i++)
    {
        __Tango_Data[index+__TANGO_CHOICE_X]+=x;
        __Tango_Data[index+__TANGO_CHOICE_Y]+=y;
        index+=__TANGO_SIZEOF_CHOICE;
    }
}

// Used to scroll a slot up or down to show the current selection.
void __Tango_ScrollToMenuCursor(int pos)
{
    if(pos<0 || pos>=__Tango_Data[__TDIDX_CHOICE_COUNT])
        // Invalid selection
        return;
    
    int slot=__Tango_Data[__TDIDX_MENU_SLOT];
    if(slot<0)
        // Not a text menu
        return;
    
    int choiceY=__Tango_Data[__TDIDX_CHOICE_DATA+
      pos*__TANGO_SIZEOF_CHOICE+__TANGO_CHOICE_Y];
    
    if(choiceY<__Tango_Data[__TDIDX_MENU_TOP])
        Tango_ScrollSlot(slot, choiceY-__Tango_Data[__TDIDX_MENU_TOP]);
    else if(choiceY>__Tango_Data[__TDIDX_MENU_BOTTOM])
        Tango_ScrollSlot(slot, choiceY-__Tango_Data[__TDIDX_MENU_BOTTOM]);
}

bool __Tango_MenuCanScrollUp()
{
    for(int i=__Tango_Data[__TDIDX_CHOICE_COUNT]-1; i>=0; i--)
    {
        if(__Tango_Data[__TDIDX_CHOICE_DATA+i*__TANGO_SIZEOF_CHOICE+__TANGO_CHOICE_Y]<__Tango_Data[__TDIDX_MENU_TOP])
            return true;
    }
    
    return false;
}

bool __Tango_MenuCanScrollDown()
{
    for(int i=__Tango_Data[__TDIDX_CHOICE_COUNT]-1; i>=0; i--)
    {
        if(__Tango_Data[__TDIDX_CHOICE_DATA+i*__TANGO_SIZEOF_CHOICE+__TANGO_CHOICE_Y]>__Tango_Data[__TDIDX_MENU_BOTTOM])
            return true;
    }
    
    return false;
}

// Reactivate any slots waiting on a menu selection
void __Tango_MenuNotify()
{
    int stateIdx;
    
    for(int i=0; i<__TANGO_NUM_SLOTS; i++)
    {
        stateIdx=i*__TANGO_SIZEOF_DATA+__TSDIDX_STATE;
        if(__Tango_SlotData[stateIdx]!=__TANGO_STATE_MENU_WAIT)
            continue;
        
        // Have the slot wait one frame before reactivating. This
        // ensures that whatever script set up the menu has a chance
        // to set up data needed to continue processing.
        __Tango_SlotData[stateIdx]=__TANGO_STATE_WAIT_1_FRAME;
    }
}

// Returns true if the current cursor position corresponds to a menu item.
// If no menu is active, returns false.
bool __Tango_CursorPosIsValid()
{
    int pos=__Tango_Data[__TDIDX_MENU_CURSOR_POS];
    if(pos<0)
        return false;
    if(pos>=__Tango_Data[__TDIDX_CHOICE_COUNT])
        return false;
    return true;
}

int Tango_GetMenuCursorPosition()
{
    return __Tango_Data[__TDIDX_MENU_CURSOR_POS];
}

void Tango_SetMenuCursorPosition(int pos)
{
    pos<<=0;
    __Tango_Data[__TDIDX_MENU_CURSOR_POS]=pos;
    __Tango_ScrollToMenuCursor(pos);
    __Tango_SetCursorMovement(pos, 0);
}

void Tango_SaveMenuState(int output)
{
    int dataSize=SizeOfArray(__Tango_Data)-__TANGO_MENU_DATA_START;
    if(SizeOfArray(output)<dataSize)
    {
        __Tango_LogError(__TANGO_ERROR_MENU_STATE_ARRAY_TOO_SMALL,
          SizeOfArray(output), dataSize);
        return;
    }
    
    for(int i=0; i<dataSize; i++)
        output[i]=__Tango_Data[i+__TANGO_MENU_DATA_START];
    
    // If the cursor is moving to a new position, don't save that;
    // just put it at its destination.
    int curChoice=__Tango_Data[__TDIDX_MENU_CURSOR_POS];
    output[__TDIDX_MENU_CURSOR_X-__TANGO_MENU_DATA_START]=
      __Tango_GetMenuChoiceX(curChoice);
    output[__TDIDX_MENU_CURSOR_Y-__TANGO_MENU_DATA_START]=
      __Tango_GetMenuChoiceY(curChoice);
    output[__TDIDX_MENU_CURSOR_TIMER-__TANGO_MENU_DATA_START]=0;
}

void Tango_RestoreMenuState(int oldState)
{
    int dataSize=SizeOfArray(__Tango_Data)-__TANGO_MENU_DATA_START;
    if(SizeOfArray(oldState)<dataSize)
    {
        __Tango_LogError(__TANGO_ERROR_MENU_STATE_ARRAY_TOO_SMALL,
          SizeOfArray(oldState), dataSize);
        return;
    }
    
    for(int i=0; i<dataSize; i++)
        __Tango_Data[i+__TANGO_MENU_DATA_START]=oldState[i];
}

void Tango_SetMenuAutosaveDest(int arr)
{
    __Tango_Data[__TDIDX_MENU_SAVE_STATE_DEST]=arr;
}

void __Tango_SetCursorMovement(int choice, int time)
{
    if(time<2)
    {
        __Tango_Data[__TDIDX_MENU_CURSOR_TIMER]=0;
        __Tango_Data[__TDIDX_MENU_CURSOR_X]=__Tango_GetMenuChoiceX(choice);
        __Tango_Data[__TDIDX_MENU_CURSOR_Y]=__Tango_GetMenuChoiceY(choice);
    }
    else
    {
        __Tango_Data[__TDIDX_MENU_CURSOR_TIMER]=time;
        __Tango_Data[__TDIDX_MENU_CURSOR_VX]=
          (__Tango_GetMenuChoiceX(choice)-__Tango_Data[__TDIDX_MENU_CURSOR_X])/time;
        __Tango_Data[__TDIDX_MENU_CURSOR_VY]=
          (__Tango_GetMenuChoiceY(choice)-__Tango_Data[__TDIDX_MENU_CURSOR_Y])/time;
    }
}

void __Tango_UpdateCursorMovement()
{
    if(__Tango_Data[__TDIDX_MENU_CURSOR_TIMER]<=0)
        return;
    
    __Tango_Data[__TDIDX_MENU_CURSOR_TIMER]--;
    if(__Tango_Data[__TDIDX_MENU_CURSOR_TIMER]<=0)
    {
        __Tango_Data[__TDIDX_MENU_CURSOR_X]=__Tango_GetMenuChoiceX(
          __Tango_Data[__TDIDX_MENU_CURSOR_POS]);
        __Tango_Data[__TDIDX_MENU_CURSOR_Y]=__Tango_GetMenuChoiceY(
          __Tango_Data[__TDIDX_MENU_CURSOR_POS]);
    }
    else
    {
        __Tango_Data[__TDIDX_MENU_CURSOR_X]+=__Tango_Data[__TDIDX_MENU_CURSOR_VX];
        __Tango_Data[__TDIDX_MENU_CURSOR_Y]+=__Tango_Data[__TDIDX_MENU_CURSOR_VY];
    }
}

int __Tango_GetMenuChoiceX(int choice)
{
    return __Tango_Data[__TDIDX_CHOICE_DATA+
      choice*__TANGO_SIZEOF_CHOICE+__TANGO_CHOICE_X];
}

int __Tango_GetMenuChoiceY(int choice)
{
    return __Tango_Data[__TDIDX_CHOICE_DATA+
      choice*__TANGO_SIZEOF_CHOICE+__TANGO_CHOICE_Y];
}
