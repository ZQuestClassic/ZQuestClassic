// Various validation functions. Any that return bools return false
// if whatever they test is invalid. They may also log errors.

bool Tango_ValidateConfiguration()
{
    bool ok=true;
    char32 tangoDataName[]="__Tango_Data[]";
    char32 tangoSlotDataName[]="__Tango_SlotData[]";
    char32 tangoSlotDefsName[]="__Tango_SlotDefs[]";
    char32 tangoStylesName[]="__Tango_Styles[]";
    
    char32 separator[]="\n================================\n\n";
    char32 header[]="tango.zh configuration report:\n";
    printf(separator);
    printf(header);
    
    if(__TANGO_FULL_LOGGING==1 && __TANGO_LOGGING_LEVEL<1)
    {
        char32 info[]="loggingFull.zh is in use, but error logging is disabled.\n";
        printf(info);
    }
    
    // Menu items
    if(__TANGO_MAX_MENU_ITEMS<=0)
    {
        int info[]="__TANGO_MAX_MENU_ITEMS is %d. Menus will be disabled.\n";
        printf(info, __TANGO_MAX_MENU_ITEMS);
    }
    
    // __Tango_Data[]
    ok&&=__Tango_ValidateArraySize(__Tango_Data, tangoDataName,
      __TDIDX_CHOICE_DATA+__TANGO_SIZEOF_CHOICE*__TANGO_MAX_MENU_ITEMS);
    
    // Slots and styles
    if(__TANGO_NUM_SLOTS<=0)
    {
        char32 info[]="__TANGO_NUM_SLOTS is %d. Text display will be disabled.\n";
        printf(info, __TANGO_NUM_SLOTS);
    }
    else
    {
        if(__TANGO_NUM_STYLES<=0)
        {
            int info[]="__TANGO_NUM_STYLES is %d. At least one style must be available.\n";
            printf(info, __TANGO_NUM_STYLES);
            ok=false;
        }
        else
        {
            ok&&=__Tango_ValidateArraySize(__Tango_Styles, tangoStylesName,
              __TANGO_SIZEOF_STYLE*__TANGO_NUM_STYLES);
        }
        
        bool defsOK;
        ok&&=__Tango_ValidateArraySize(__Tango_SlotData, tangoSlotDataName,
          __TANGO_SIZEOF_DATA*__TANGO_NUM_SLOTS);
        defsOK=__Tango_ValidateArraySize(__Tango_SlotDefs, tangoSlotDefsName,
          __TANGO_SIZEOF_SLOTDEF*__TANGO_NUM_SLOTS);
        ok&&=defsOK;
        
        if(defsOK)
            ok&&=__Tango_ValidateSlotDefs();
        __Tango_CheckOverlappingSlots(); // Not an error if there are any
    }
    
    // All done
    if(ok)
    {
        int allOK[]="No errors detected.\n";
        printf(allOK);
    }
    
    printf(separator);
    return ok;
}

bool __Tango_ValidateArraySize(int[] arr, char32[] name, int targetSize)
{
    int arraySize=SizeOfArray(arr);
    if(arraySize<targetSize)
    {
        int error[]="%s is too small. Expected: %d - Actual: %d\n";
        printf(error, name, targetSize, arraySize);
        return false;
    }
    else if(arraySize>targetSize)
    {
        int info[]="%s is larger than necessary. The size can be reduced to %d.\n";
        printf(info, name, Max(targetSize, 1));
    }
    
    return true;
}

bool __Tango_ValidateSlotDefs()
{
    bool ok=true;
    int bufSize=SizeOfArray(__Tango_Buffer);
    
    if(bufSize<2)
    {
        char32 error[]="__Tango_Buffer[] is too small to store any text.\n";
        printf(error);
        return false; // Won't even bother checking the rest...
    }
    
    for(int i=0; i<__TANGO_NUM_SLOTS; i++)
    {
        int dataStart=i*__TANGO_SIZEOF_SLOTDEF;
        
        if(__Tango_SlotDefs[dataStart+__TSDEF_TYPE]<0)
        {
            char32 error[]="Slot %d's type is less than 0. Slot types must not be negative.\n";
            printf(error, i);
            ok=false;
        }
        
        if(__Tango_SlotDefs[dataStart+__TSDEF_START]<0 ||
          __Tango_SlotDefs[dataStart+__TSDEF_START]>=bufSize-1)
        {
            char32 error[]="Slot %d's starting index is out of range. It must be between 0 and %d.\n";
            printf(error, i, bufSize-2);
            ok=false;
        }
        else // Only validate length if start is okay
        {
            if(__Tango_SlotDefs[dataStart+__TSDEF_LENGTH]<2)
            {
                char32 error[]="Slot %d's length is too short. It must be at least 2.\n";
                printf(error, i);
                ok=false;
            }
            
            if(__Tango_SlotDefs[dataStart+__TSDEF_START]+
              __Tango_SlotDefs[dataStart+__TSDEF_LENGTH]>bufSize)
            {
                char32 error[]="Slot %d is too long for the buffer. Its length must be reduced to %d, or the size of __Tango_Buffer[] must be increased to %d.\n";
                printf(error, i,
                  bufSize-__Tango_SlotDefs[dataStart+__TSDEF_START],
                  __Tango_SlotDefs[dataStart+__TSDEF_START]+__Tango_SlotDefs[dataStart+__TSDEF_LENGTH]);
                ok=false;
            }
        }
        
        if(__Tango_SlotDefs[dataStart+__TSDEF_WIDTH]<1 ||
          __Tango_SlotDefs[dataStart+__TSDEF_HEIGHT]<1)
        {
            char32 error[]="Slot %d has no space allocated on the bitmap.\n";
            printf(error, i);
            ok=false;
        }
        else if(__Tango_SlotDefs[dataStart+__TSDEF_X]<0 ||
          __Tango_SlotDefs[dataStart+__TSDEF_X]+__Tango_SlotDefs[dataStart+__TSDEF_WIDTH]>512 ||
          __Tango_SlotDefs[dataStart+__TSDEF_Y]<0 ||
          __Tango_SlotDefs[dataStart+__TSDEF_Y]+__Tango_SlotDefs[dataStart+__TSDEF_HEIGHT]>512)
        {
            char32 error[]="Slot %d exceeds the bitmap boundaries. X and Y must be at least 0, and X+width and Y+height must be no greater than 512.\n";
            printf(error, i);
            ok=false;
        }
    }
    
    return ok;
}

void __Tango_CheckOverlappingSlots()
{
    for(int i=0; i<__TANGO_NUM_SLOTS-1; i++)
    {
        int ds1=i*__TANGO_SIZEOF_SLOTDEF;
        
        for(int j=i+1; j<__TANGO_NUM_SLOTS; j++)
        {
            int ds2=j*__TANGO_SIZEOF_SLOTDEF;
            
            if((__Tango_SlotDefs[ds1+__TSDEF_START]<__Tango_SlotDefs[ds2+__TSDEF_START] &&
              __Tango_SlotDefs[ds1+__TSDEF_START]+__Tango_SlotDefs[ds1+__TSDEF_LENGTH]>__Tango_SlotDefs[ds2+__TSDEF_START]) ||
              (__Tango_SlotDefs[ds2+__TSDEF_START]<__Tango_SlotDefs[ds1+__TSDEF_START] &&
              __Tango_SlotDefs[ds2+__TSDEF_START]+__Tango_SlotDefs[ds2+__TSDEF_LENGTH]>__Tango_SlotDefs[ds1+__TSDEF_START]))
            {
                char32 info[]="Slots %d and %d overlap in the buffer.\n";
                printf(info, i, j);
            }
            
            if(RectCollision(
              __Tango_SlotDefs[ds1+__TSDEF_X], __Tango_SlotDefs[ds1+__TSDEF_Y],
              __Tango_SlotDefs[ds1+__TSDEF_X]+__Tango_SlotDefs[ds1+__TSDEF_WIDTH]-1,
              __Tango_SlotDefs[ds1+__TSDEF_Y]+__Tango_SlotDefs[ds1+__TSDEF_HEIGHT]-1,
              __Tango_SlotDefs[ds2+__TSDEF_X], __Tango_SlotDefs[ds2+__TSDEF_Y],
              __Tango_SlotDefs[ds2+__TSDEF_X]+__Tango_SlotDefs[ds2+__TSDEF_WIDTH]-1,
              __Tango_SlotDefs[ds2+__TSDEF_Y]+__Tango_SlotDefs[ds2+__TSDEF_HEIGHT]-1))
            {
                char32 info[]="Slots %d and %d overlap on the bitmap.\n";
                printf(info, i, j);
            }
        }
    }
}

bool __Tango_ValidateSlot(int slot)
{
    bool ret=true;
    
    if(slot<0 || slot>__TANGO_NUM_SLOTS-1)
        ret=false;
    if(slot!=(slot<<0)) // Not an integer?
        ret=false;
    
    if(!ret)
        __Tango_LogError(__TANGO_ERROR_INVALID_SLOT, slot);
    
    return ret;
}

bool __Tango_ValidateStyle(int style)
{
    bool ret=true;
    
    if(style<0 || style>__TANGO_NUM_STYLES-1)
        ret=false;
    if(style!=(style<<0)) // Not an integer?
        ret=false;
    
    if(!ret)
        __Tango_LogError(__TANGO_ERROR_INVALID_STYLE, style);
    
    return ret;
}

bool __Tango_ValidateString(char32[] str)
{
    unless(IsValidArray(str))
        return false;
    else if(SizeOfArray(str)<=0)
        return false;
    
    return true;
}

bool __Tango_ValidateMessage(int msg)
{
    if(msg<=0 || msg!=(msg<<0)) // Must be an integer greater than 0
        return false;
    
    return true;
}

// Tries to detect if a game saved with an older version was loaded.
void __Tango_ValidateSavedVersion()
{
    if(__Tango_Data[__TDIDX_SAVED_VERSION]==0)
        // Probably playing for the first time. We'll assume so, anyway.
        __Tango_Data[__TDIDX_SAVED_VERSION]=__TANGO_COMPAT_VERSION;
    else if(__Tango_Data[__TDIDX_SAVED_VERSION]!=__TANGO_COMPAT_VERSION)
    {
        // Log an error and display a notice, regardless of logging settings
        char32 error1[]="tango.zh error: The saved data is invalid for the current version of this quest.";
        char32 error2[]="Serious errors are likely to occur. Begin a new game to correct this.";
        TraceS(error1);
        TraceNL();
        TraceS(error2);
        TraceNL();
        __Tango_Data[__TDIDX_ERROR_NOTIFICATION]=1800; // 30 seconds
    }
}
