// tango.zh
// Version 1.3.3


// Constants and functions relating to functions and variables.

// Max function args; should match array size in __Tango_RunFunction
const int __TANGO_MAX_FUNCTION_ARGS = 4;

// Used in converting names to numbers
const int __TANGO_CODE_FACTOR = 7;

// Setters
const float __TANGO_SETTER_SET = 0.0986;
const float __TANGO_SETTER_INC = 0.0542;

// Flow control functions
const float __TANGO_FLOW_IF        =     0.0069;
const float __TANGO_FLOW_ELSE      =     0.2441;
const float __TANGO_FLOW_ELSEIF    =    11.9678;
const float __TANGO_FLOW_WHILE     =     5.8497;
const float __TANGO_FLOW_WAITUNTIL = 13486.5225;

// Other functions
const float __TANGO_FUNC_ADD      =    0.0081;
const float __TANGO_FUNC_OR       =    0.0123;
const float __TANGO_FUNC_AND      =    0.0151;
const float __TANGO_FUNC_NOT      =    0.0811;
const float __TANGO_FUNC_TAB      =    0.0989;
const float __TANGO_FUNC_CHAR     =    0.1446;
const float __TANGO_FUNC_GOTO     =    0.3291;
const float __TANGO_FUNC_LESS     =    0.4513;
const float __TANGO_FUNC_NEXT     =    0.5235;
const float __TANGO_FUNC_RAND     =    0.6325;
const float __TANGO_FUNC_SYNC     =    0.7843;
const float __TANGO_FUNC_DELAY    =    1.1939;
const float __TANGO_FUNC_CLOSE    =    1.2192;
const float __TANGO_FUNC_EQUAL    =    1.8884;
const float __TANGO_FUNC_APPEND   =    6.1058;
const float __TANGO_FUNC_CHOICE   =    7.5241;
const float __TANGO_FUNC_DOMENU   =   10.8066;
const float __TANGO_FUNC_NUMBER   =   29.0329;
const float __TANGO_FUNC_PRESSA   =   31.4910;
const float __TANGO_FUNC_STRING   =   37.4073;
const float __TANGO_FUNC_GREATER  =  113.9450;
const float __TANGO_FUNC_ORDINAL  =  208.0657;
const float __TANGO_FUNC_PLAYSFX  =  209.6041;
const float __TANGO_FUNC_SUSPEND  =  263.9732;
const float __TANGO_FUNC_MENUWAIT = 1158.8044;
const float __TANGO_FUNC_NOTEQUAL = 1364.9361;
const float __TANGO_FUNC_SAVENAME = 1615.1672;

// Variables
const float __TANGO_VAR_A0      =  0.0034;
const float __TANGO_VAR_A1      =  0.0035;
const float __TANGO_VAR_X       =  0.0024;
const float __TANGO_VAR_Y       =  0.0025;
const float __TANGO_VAR_CSET    =  0.2015;
const float __TANGO_VAR_COLOR   =  1.3059;
const float __TANGO_VAR_SPEED   =  5.1391;
const float __TANGO_VAR_SFX     =  0.0997;
const float __TANGO_VAR_STYLE   =  5.3793;
const float __TANGO_VAR_NEXT    =  0.5235;
const float __TANGO_VAR_CHOSEN  =  7.5754;
const float __TANGO_VAR_DEFAULT = 57.0513;

// Data markers
const int __TANGO_NUM_MARKER      = -100;
const int __TANGO_VAR_MARKER      = -200;
const int __TANGO_SETTER_MARKER   = -300;
const int __TANGO_FUNC_MARKER     = -400;
const int __TANGO_FUNC_END_MARKER = -500;
const int __TANGO_FLOW_MARKER     = -600;
const int __TANGO_FLOW_END_MARKER = -700;

const int __TANGO_ALT_COLOR_START_MARKER = -1000;
const int __TANGO_ALT_COLOR_END_MARKER = -1100;

// Runs @if, @elseif, @else, @while, and @waituntil.
int __Tango_RunFlowControl(int pos)
{
    int type=__Tango_Buffer[pos+1];
    int ret=0;
    int offset=2;
    bool clear=true;
    
    // Evaluate the condition first, unless this is @else
    int argLength=0;
    bool condition=false;
    if(type!=__TANGO_FLOW_ELSE)
    {
        argLength=__Tango_ReadArgLength(pos+2);
        condition=(__Tango_ReadArg(pos+2)!=0);
    }
    
    if(type==__TANGO_FLOW_IF)
    {
        if(condition)
        {
            __Tango_SetCurrSlotData(__TSDIDX_CONDITION_MET, 1);
            if(__Tango_Buffer[pos+2+argLength]==__TANGO_FUNC_MARKER)
                ret=__Tango_RunFunction(pos+2+argLength, false);
            else
                __Tango_RunSetter(pos+2+argLength, false);
        }
        else
            __Tango_SetCurrSlotData(__TSDIDX_CONDITION_MET, 0);
    }
    else if(type==__TANGO_FLOW_ELSEIF)
    {
        if(condition && __Tango_GetCurrSlotData(__TSDIDX_CONDITION_MET)==0)
        {
            __Tango_SetCurrSlotData(__TSDIDX_CONDITION_MET, 1);
            if(__Tango_Buffer[pos+2+argLength]==__TANGO_FUNC_MARKER)
                ret=__Tango_RunFunction(pos+2+argLength, false);
            else
                __Tango_RunSetter(pos+2+argLength, false);
        }
    }
    else if(type==__TANGO_FLOW_ELSE)
    {
        if(__Tango_GetCurrSlotData(__TSDIDX_CONDITION_MET)==0)
        {
            if(__Tango_Buffer[pos+2]==__TANGO_FUNC_MARKER)
                ret=__Tango_RunFunction(pos+2, false);
            else
                __Tango_RunSetter(pos+2, false);
        }
    }
    else if(type==__TANGO_FLOW_WHILE)
    {
        if(condition)
        {
            if(__Tango_Buffer[pos+2+argLength]==__TANGO_FUNC_MARKER)
                __Tango_RunFunction(pos+2+argLength, false);
            else
                __Tango_RunSetter(pos+2+argLength, false);
            ret=1;
            clear=false;
        }
    }
    else // @waituntil
    {
        if(!condition)
        {
            ret=1;
            clear=false;
        }
    }
    
    // Overwrite with filler
    if(clear)
    {
        int end=pos+4; // The earliest the end can be
        while(__Tango_Buffer[end]!=__TANGO_FLOW_END_MARKER)
            end++;
        __Tango_Delete(pos, end);
    }
    
    return ret;
}


// Runs @set or @inc. If clear is true, the setter and its arguments
// will be deleted from in __Tango_Buffer[] afterward.
void __Tango_RunSetter(int pos, bool clear)
{
    int type=__Tango_Buffer[pos+1];
    int var=__Tango_Buffer[pos+3];
    int argLength=__Tango_ReadArgLength(pos+4);
    int value=__Tango_ReadArg(pos+4);
    
    // Only two cases: @set and @inc.
    // For @inc, just add the variable's current value to the given value.
    if(type==__TANGO_SETTER_INC)
        value+=__Tango_GetVar(var);
    
    __Tango_SetVar(var, value);
    
    if(clear)
        __Tango_Delete(pos, pos+3+argLength);
}


// Runs other functions. If clear is true, the function and its arguments
// in __Tango_Buffer[] will be deleted.
int __Tango_RunFunction(int pos, bool clear)
{
    int function=__Tango_Buffer[pos+1];
    int totalLength=2;
    int argLength;
    int args[4]={ 0, 0, 0, 0 };
    int ret=0;
    bool found;
    bool negative=false;
    
    if(function<0)
    {
        negative=true;
        function=-function;
    }
    
    // Read arguments first.
    for(int i=0; true; i++)
    {
        argLength=__Tango_ReadArgLength(pos+totalLength);
        if(argLength==0)
            break;
        if(i>=__TANGO_MAX_FUNCTION_ARGS)
        {
            if(i==__TANGO_MAX_FUNCTION_ARGS) // Only log an error once
                __Tango_LogError(__TANGO_ERROR_TOO_MANY_ARGS);
            continue; // Extra args are read but not stored
        }
        
        args[i]=__Tango_ReadArg(pos+totalLength);
        totalLength+=argLength;
    }
    
    // Clear out the space where the function and its arguments were stored.
    if(clear)
        __Tango_Delete(pos, pos+totalLength);
    
    // Sorted by numeric value to reduce comparisons and if/else depth.
    found=true;
    if(function<__TANGO_FUNC_LESS)
    {
        if(function==__TANGO_FUNC_ADD)
            ret=args[0]+args[1];
        else if(function==__TANGO_FUNC_OR)
            ret=__Tango_BoolToInt(args[0]!=0 || args[1]!=0);
        else if(function==__TANGO_FUNC_AND)
            ret=__Tango_BoolToInt(args[0]!=0 && args[1]!=0);
        else if(function==__TANGO_FUNC_NOT)
            ret=__Tango_BoolToInt(args[0]==0);
        else if(function==__TANGO_FUNC_TAB)
            __Tango_FuncTab(args[0]);
        else if(function==__TANGO_FUNC_CHAR)
            __Tango_Buffer[pos]=args[0];
        else if(function==__TANGO_FUNC_GOTO)
        {
            __Tango_FuncGoto(args[0]);
            ret=1;
        }
        else
            found=false;
    }
    else if(function<__TANGO_FUNC_APPEND)
    {
        if(function==__TANGO_FUNC_LESS)
            ret=__Tango_BoolToInt(args[0]<args[1]);
        else if(function==__TANGO_FUNC_NEXT)
            __Tango_SetVar(__TANGO_VAR_NEXT, args[0]);
        else if(function==__TANGO_FUNC_RAND)
            ret=Rand(args[0], args[1]);
        else if(function==__TANGO_FUNC_SYNC)
            ret=__Tango_FuncSync(args);
        else if(function==__TANGO_FUNC_DELAY)
        {
            __Tango_SetCurrSlotData(__TSDIDX_COUNTER, args[0]);
            ret=1;
        }
        else if(function==__TANGO_FUNC_CLOSE)
        {
            __Tango_FuncClose();
            ret=1;
        }
        else if(function==__TANGO_FUNC_EQUAL)
            ret=__Tango_BoolToInt(args[0]==args[1]);
        else
            found=false;
    }
    else if(function<__TANGO_FUNC_ORDINAL)
    {
        if(function==__TANGO_FUNC_APPEND)
            __Tango_AppendMessage(pos+totalLength, args[0]);
        else if(function==__TANGO_FUNC_CHOICE)
            __Tango_FuncAddMenuItem(pos, args[0]);
        else if(function==__TANGO_FUNC_DOMENU)
        {
            __Tango_FuncActivateMenu(pos, args[0], args[1]);
            ret=1;
        }
        else if(function==__TANGO_FUNC_NUMBER)
            __Tango_FuncNumber(args[0], pos);
        else if(function==__TANGO_FUNC_PRESSA)
        {
            __Tango_FuncPressA();
            ret=1;
        }
        else if(function==__TANGO_FUNC_STRING)
            __Tango_FuncString(args[0], pos);
        else if(function==__TANGO_FUNC_GREATER)
            ret=__Tango_BoolToInt(args[0]>args[1]);
        else
            found=false;
    }
    else
    {
        if(function==__TANGO_FUNC_ORDINAL)
            __Tango_FuncOrdinal(args[0], pos);
        else if(function==__TANGO_FUNC_PLAYSFX)
            Game->PlaySound(args[0]);
        else if(function==__TANGO_FUNC_SUSPEND)
        {
            Tango_SuspendSlot(__Tango_Data[__TCS_ID]);
            ret=1;
        }
        else if(function==__TANGO_FUNC_MENUWAIT)
        {
            __Tango_SetCurrSlotData(__TSDIDX_STATE, __TANGO_STATE_MENU_WAIT);
            ret=1;
        }
        else if(function==__TANGO_FUNC_NOTEQUAL)
            ret=__Tango_BoolToInt(args[0]!=args[1]);
        else if(function==__TANGO_FUNC_SAVENAME)
            __Tango_FuncSaveName(pos);
        else
            found=false;
    }
    
    // Not a built-in function; check custom functions.
    if(!found)
        ret=__Tango_RunCustomFunction(function, args);
    
    if(negative)
        ret=-ret;
    
    return ret;
}


// Determines the length of an argument.
int __Tango_ReadArgLength(int pos)
{
    int type=__Tango_Buffer[pos];
    
    if(type==__TANGO_NUM_MARKER || type==__TANGO_VAR_MARKER)
        return 2;
    else if(type==__TANGO_FUNC_MARKER)
    {
        int depth=0;
        int character;
        int length=0;
        
        do
        {
            character=__Tango_Buffer[pos+length];
            
            if(character==__TANGO_FUNC_MARKER)

                depth++;
            else if(character==__TANGO_FUNC_END_MARKER)
                depth--;
            
            length++;
        } while(depth>0);
        
        return length;
    }
    // The only other thing that's valid here is an end marker
    // indicating there are no more arguments
    else
        return 0;
}

// Get the value of an argument, reading variables or
// running functions if needed.
int __Tango_ReadArg(int pos)
{
    int argType=__Tango_Buffer[pos];
    
    if(argType==__TANGO_FUNC_MARKER)
        return __Tango_RunFunction(pos, false);

    else if(argType==__TANGO_VAR_MARKER)
        return __Tango_GetVar(__Tango_Buffer[pos+1]);
    
    else // Number (or maybe something invalid)
        return __Tango_Buffer[pos+1];
}

// Convert true to 1 and false to 0, since ZScript doesn't allow casting
// bool to int. This is just used to make the conditional functions less ugly.
int __Tango_BoolToInt(bool value)
{
    if(value)
        return 1;
    else
        return 0;
}

// Implementation of @append
void __Tango_AppendMessage(int pos, int messageID)
{
    // Find the end of the string
    while(!(__Tango_Buffer[pos]==NULL &&
            !__Tango_IsSpecialDataMarker(__Tango_Buffer[pos-1])))
        pos++;
    
    int buffer[256];
    Game->GetMessage(messageID, buffer);
    __Tango_LoadIntoBuffer(buffer, 0, pos);
}

void __Tango_FuncClose()
{
    int flags=__Tango_GetCurrStyleData(TANGO_STYLE_FLAGS);
    if(flags&TANGO_FLAG_FREEZE_SCREEN)
        __Tango_DecScreenFreeze();
    __Tango_SetCurrSlotData(__TSDIDX_STATE, __TANGO_STATE_INACTIVE);
}

// Implementation of @number
void __Tango_FuncNumber(int number, int pos)
{
    int buf[13];
    int numChars=0;
    
    if(number==(number<<0)) // Integer?
        numChars=itoa(buf, number);
    else
        numChars=__Tango_FloatToASCII(buf, number, false);
    
    for(int i=0; i<numChars; i++)
    {
        __Tango_Buffer[pos]=buf[i];
        pos++;
    }
}

// Implementation of @ordinal
void __Tango_FuncOrdinal(int number, int pos)
{
    int buf[9];
    int numChars;
    int ordinal;
    
    number<<=0; // No fractions allowed.
    numChars=itoa(buf, number);
    ordinal=__Tango_GetOrdinal(number);
    
    if(ordinal==1) // "st"
    {
        buf[numChars]=115;
        buf[numChars+1]=116;
    }
    else if(ordinal==2) // "nd"
    {
        buf[numChars]=110;
        buf[numChars+1]=100;
    }
    else if(ordinal==3) // "rd"
    {
        buf[numChars]=114;
        buf[numChars+1]=100;
    }
    else // "th"
    {
        buf[numChars]=116;
        buf[numChars+1]=104;
    }
    
    numChars+=2;
    for(int i=0; i<numChars; i++)
    {
        __Tango_Buffer[pos]=buf[i];
        pos++;
    }
}

// Helper for __Tango_FuncOrdinal. 
int __Tango_GetOrdinal(int num)
{
    if(num<0)
        num=-num;
    
    // Check for 11, 12, and 13 first
    num%=100;
    if(num==11 || num==12 || num==13)
        return 0;
    
    return num%10;
}

// Implementation of @savename
void __Tango_FuncSaveName(int pos)
{
    int buf[9];
    Game->GetSaveName(buf);
    
    for(int i=0; buf[i]>0; i++)
    {
        __Tango_Buffer[pos]=buf[i];
        pos++;
    }
}

// Implementation of @string
void __Tango_FuncString(int string, int pos)
{
    if(!__Tango_ValidateString(string))
    {
        // Error. End the string here; continuing might cause problems.
        // Even if it wouldn't, better to make sure the failure is obvious.
        __Tango_LogError(__TANGO_ERROR_INVALID_STRING_ARG, string);
        __Tango_Buffer[pos]=NULL;
        return;
    }
    
    int length=Min(strlen(string), __TANGO_MAX_STRING_FUNC_LENGTH);
    
    for(int i=0; i<length; i++)
        __Tango_Buffer[pos+i]=string[i];
}

// Implementation of @tab
void __Tango_FuncTab(int value)
{
    int dataStart=__Tango_Data[__TCS_DATA_START];
    int defStart=__Tango_Data[__TCS_DEF_START];
    __Tango_SlotData[dataStart+__TSDIDX_CHAR_X]=
      __Tango_SlotDefs[defStart+__TSDEF_X]+value;
}

// Implementation of @choice
void __Tango_FuncAddMenuItem(int pos, int value)
{
    __Tango_Buffer[pos]=__TANGO_CHAR_CHOICE;
    __Tango_Buffer[pos+1]=value;
}

// Implementation of @domenu
void __Tango_FuncActivateMenu(int pos, int flags, int initialPos)
{
    Tango_SetMenuFlags(flags);
    Tango_ActivateMenu();
    __Tango_SetCurrSlotData(__TSDIDX_STATE, __TANGO_STATE_MENU_WAIT);
    
    // Insert the character to tell __Tango_Process() the menu's done.
    __Tango_Buffer[pos]=__TANGO_CHAR_MENU_END;
    Tango_SetMenuCursorPosition(initialPos);
}

// Implementation of @goto
void __Tango_FuncGoto(int newString)
{
    __Tango_SetCurrSlotData(__TSDIDX_NEXT_STRING, newString);
    __Tango_BeginAdvancing();
}

// Implementation of @pressa
void __Tango_FuncPressA()
{
    Game->PlaySound(__Tango_GetCurrStyleData(TANGO_STYLE_TEXT_END_SFX));
    __Tango_SetCurrSlotData(__TSDIDX_STATE, __TANGO_STATE_PRESS_A);
}

// Implementation of @sync
int __Tango_FuncSync(int args)
{
    bool found;
    int syncValue;
    // @sync is unique in that it can take either one argument or two.
    
    // If there's only one argument, sync on this value if
    // no other strings were waiting.
    if(args[1]==0)
    {
        found=__Tango_FindSyncingStrings(args[0]);
        syncValue=args[0];
    }
        
    // If there are two arguments, don't stop even if no strings were
    // waiting on the first argument. Sync on the second instead.
    else
    {
        __Tango_FindSyncingStrings(args[0]);
        found=__Tango_FindSyncingStrings(args[1]);
        syncValue=args[1];
    }
    
    if(found)
        return 0;
    else
    {
        __Tango_SetCurrSlotData(__TSDIDX_STATE, __TANGO_STATE_SYNC_WAIT);
        __Tango_SetCurrSlotData(__TSDIDX_COUNTER, syncValue);
        return 1;
    }
}

// Helper for __Tango_FuncSync() and Tango_Sync(). Finds any strings
// waiting for the given sync value and restarts them. Returns true
// if any were found.
bool __Tango_FindSyncingStrings(int value)
{
    int stateIdx;
    int counterIdx;
    bool found=false;
    
    for(int i=0; i<__TANGO_NUM_SLOTS; i++)
    {
        stateIdx=i*__TANGO_SIZEOF_DATA+__TSDIDX_STATE;
        if(__Tango_SlotData[stateIdx]==__TANGO_STATE_SYNC_WAIT)
        {
            counterIdx=i*__TANGO_SIZEOF_DATA+__TSDIDX_COUNTER;
            if(__Tango_SlotData[counterIdx]==value)
            {
                __Tango_SlotData[stateIdx]=__TANGO_STATE_ACTIVE;
                __Tango_SlotData[counterIdx]=0;
                found=true;
            }
        }
    }
    
    return found;
}

// Get the current value of a variable. 
float __Tango_GetVar(int var)
{
    float ret=0;
    bool negative=false;
    if(var<0)
    {
        negative=true;
        var=-var;
    }
    
    if(var==__TANGO_VAR_A0)
        ret=__Tango_GetCurrSlotData(TANGO_VAR_A0);
    else if(var==__TANGO_VAR_A1)
        ret=__Tango_GetCurrSlotData(TANGO_VAR_A1);
    else if(var==__TANGO_VAR_CSET)
        ret=__Tango_GetCurrentCSet();
    else if(var==__TANGO_VAR_COLOR)
        ret=__Tango_GetCurrentColor();
    else if(var==__TANGO_VAR_SPEED)
        ret=__Tango_GetCurrentSpeed();
    else if(var==__TANGO_VAR_SFX)
        ret=__Tango_GetCurrentSFX();
    else if(var==__TANGO_VAR_STYLE)
        ret=__Tango_GetCurrSlotData(__TSDIDX_STYLE);
    else if(var==__TANGO_VAR_X)
        ret=__Tango_GetCurrSlotData(__TSDIDX_SCREEN_X);
    else if(var==__TANGO_VAR_Y)
        return __Tango_GetCurrSlotData(__TSDIDX_SCREEN_Y);
    else if(var==__TANGO_VAR_X)
        ret=__Tango_GetCurrSlotData(__TSDIDX_NEXT_STRING);
    else if(var==__TANGO_VAR_DEFAULT)
        // This isn't ideal, but there are no valid cases where it fails.
        ret=TANGO_DEFAULT;
    else if(var==__TANGO_VAR_CHOSEN)
        ret=__Tango_Data[__TDIDX_LAST_CHOICE];
    else
        ret=Tango_GetCustomVar(var);
    
    if(negative)
        ret=-ret;
    
    return ret;
}

// Set a variable to the given value.
void __Tango_SetVar(int var, float value)
{
    int dataStart=__Tango_Data[__TCS_DATA_START];
    
    if(var==__TANGO_VAR_A0)
        __Tango_SetCurrSlotData(TANGO_VAR_A0, value);
    else if(var==__TANGO_VAR_A1)
        __Tango_SetCurrSlotData(TANGO_VAR_A1, value);
    else if(var==__TANGO_VAR_CSET)
        __Tango_SetCurrSlotData(__TSDIDX_CSET, value);
    else if(var==__TANGO_VAR_COLOR)
        __Tango_SetCurrSlotData(__TSDIDX_COLOR, value);
    else if(var==__TANGO_VAR_SPEED)
        __Tango_SetCurrSlotData(__TSDIDX_SPEED, value);
    else if(var==__TANGO_VAR_SFX)
        __Tango_SetCurrSlotData(__TSDIDX_SFX, value);
    else if(var==__TANGO_VAR_STYLE)
    {
        // If switching from a style that freezes the screen,
        // decrement the freeze counter.
        int flags=__Tango_GetCurrStyleData(TANGO_STYLE_FLAGS);
        if(flags&TANGO_FLAG_FREEZE_SCREEN)
            __Tango_DecScreenFreeze();
        
        __Tango_SetCurrSlotData(__TSDIDX_STYLE, value);
        __Tango_Data[__TCS_STYLE_START]=value*__TANGO_SIZEOF_STYLE;
        __Tango_Data[__TDIDX_REFRESH_STYLE]=1;
        
        // If switching to a style that freezes the screen,
        // increment the freeze counter.
        flags=Tango_GetStyleAttribute(value, TANGO_STYLE_FLAGS);
        if(flags&TANGO_FLAG_FREEZE_SCREEN)
            __Tango_IncScreenFreeze();
    }
    else if(var==__TANGO_VAR_X)
        __Tango_SetCurrSlotData(__TSDIDX_SCREEN_X, value);
    else if(var==__TANGO_VAR_Y)
        __Tango_SetCurrSlotData(__TSDIDX_SCREEN_Y, value);
    else if(var==__TANGO_VAR_NEXT)
        __Tango_SetCurrSlotData(__TSDIDX_NEXT_STRING, value);
    else
        Tango_SetCustomVar(var, value);
}

// Fills the string with filler characters from pos to end, inclusive.
// Used to blank out functions so __Tango_Process() can proceed.
void __Tango_Delete(int pos, int end)
{
    for(; pos<=end; pos++)
        __Tango_Buffer[pos]=__TANGO_CHAR_FILLER;
}

// Log an error when an unknown function is called.
void Tango_LogUndefinedFunction(float function)
{
    __Tango_LogError(__TANGO_ERROR_UNDEFINED_FUNCTION, function);
}

// Log an error when an unknown variable is used.
void Tango_LogUndefinedVariable(float var)
{
    __Tango_LogError(__TANGO_ERROR_UNDEFINED_VAR, var);
}

// Set an alternate color for [[bracketed text]].
// These aren't exactly functions, though...
void __Tango_SetAlternateColor(int num)
{
    __Tango_SetCurrSlotData(__TSDIDX_ALT_CSET,
      __Tango_GetCurrStyleData(__TANGO_STYLE_ALT_CSET+num));
    __Tango_SetCurrSlotData(__TSDIDX_ALT_COLOR,
      __Tango_GetCurrStyleData(__TANGO_STYLE_ALT_COLOR+num));
    __Tango_SetCurrSlotData(__TSDIDX_TILE_OFFSET,
      __Tango_GetCurrStyleData(__TANGO_STYLE_ALT_OFFSET+num));
}

void __Tango_ClearAlternateColor()
{
    __Tango_SetCurrSlotData(__TSDIDX_ALT_CSET, -1);
    __Tango_SetCurrSlotData(__TSDIDX_ALT_COLOR, -1);
    __Tango_SetCurrSlotData(__TSDIDX_TILE_OFFSET, 0);
}
