// Functions for the user's use that don't really fit elsewhere.


void Tango_Start()
{
    __Tango_ValidateSavedVersion();
    Tango_InitializeMenu();
    for(int i=0; i<__TANGO_NUM_SLOTS; i++)
        Tango_ClearSlot(i);
    
    __Tango_Data[__TDIDX_SCREEN_FREEZE]=0;
}

void Tango_ClearSlot(int slot)
{
    if(!__Tango_ValidateSlot(slot))
        return;
    
    // Decrement the freeze counter if necessary.
    if(Tango_SlotIsActive(slot))
    {
        int flags=Tango_GetSlotStyleAttribute(slot, TANGO_STYLE_FLAGS);
        if((flags&TANGO_FLAG_FREEZE_SCREEN)!=0)
            __Tango_DecScreenFreeze();
    }
        
    
    int dataStart=slot*__TANGO_SIZEOF_DATA;
    int defStart=slot*__TANGO_SIZEOF_SLOTDEF;
    int pos=__Tango_SlotDefs[defStart+__TSDEF_START];
    
    __Tango_Buffer[pos]=NULL;
    
    __Tango_SlotData[dataStart+__TSDIDX_STYLE]=TANGO_INVALID;
    __Tango_SlotData[dataStart+__TSDIDX_STATE]=__TANGO_STATE_INACTIVE;
    __Tango_SlotData[dataStart+__TSDIDX_COUNTER]=0;
    __Tango_SlotData[dataStart+__TSDIDX_POSITION]=pos;
    __Tango_SlotData[dataStart+__TSDIDX_CHAR_X]=__Tango_SlotDefs[defStart+__TSDEF_X];
    __Tango_SlotData[dataStart+__TSDIDX_CHAR_Y]=__Tango_SlotDefs[defStart+__TSDEF_Y];
    __Tango_SlotData[dataStart+__TSDIDX_SCREEN_X]=0;
    __Tango_SlotData[dataStart+__TSDIDX_SCREEN_Y]=0;
    __Tango_SlotData[dataStart+__TSDIDX_CSET]=TANGO_DEFAULT;
    __Tango_SlotData[dataStart+__TSDIDX_COLOR]=TANGO_DEFAULT;
    __Tango_SlotData[dataStart+__TSDIDX_SPEED]=TANGO_DEFAULT;
    __Tango_SlotData[dataStart+__TSDIDX_SFX]=TANGO_DEFAULT;
    __Tango_SlotData[dataStart+__TSDIDX_OFFSET]=0;
    __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET]=0;
    __Tango_SlotData[dataStart+__TSDIDX_SCROLLING]=0;
    __Tango_SlotData[dataStart+__TSDIDX_NEXT_STRING]=0;
    __Tango_SlotData[dataStart+__TSDIDX_IGNORE_SPEED_KEYS]=0;
    __Tango_SlotData[dataStart+__TSDIDX_WAS_MENU]=0;
    __Tango_SlotData[dataStart+TANGO_VAR_A0]=0;
    __Tango_SlotData[dataStart+TANGO_VAR_A1]=0;
    
    if(Tango_MenuIsActive() && slot==__Tango_Data[__TDIDX_MENU_SLOT])
        __Tango_MenuCancel();
}

bool Tango_ReserveSlot(int slot)
{
    if(!__Tango_ValidateSlot(slot))
        return false;
    
    int dataStart=slot*__TANGO_SIZEOF_DATA;
    
    if(__Tango_SlotData[dataStart+__TSDIDX_STATE]==__TANGO_STATE_INACTIVE)
    {
        __Tango_SlotData[dataStart+__TSDIDX_STATE]=__TANGO_STATE_RESERVED;
        return true;
    }
    
    return false;
}

void Tango_SetSlotPosition(int slot, int x, int y)
{
    if(!__Tango_ValidateSlot(slot))
        return;
    
    int dataStart=slot*__TANGO_SIZEOF_DATA;
    
    // If this slot's got a menu, its choices need to be moved first.
    if(__Tango_Data[__TDIDX_MENU_SLOT]==slot)
    {
        int diffX=x-__Tango_SlotData[dataStart+__TSDIDX_SCREEN_X];
        int diffY=y-__Tango_SlotData[dataStart+__TSDIDX_SCREEN_Y];
        __Tango_ShiftMenu(diffX, diffY);
    }
    
    __Tango_SlotData[dataStart+__TSDIDX_SCREEN_X]=x;
    __Tango_SlotData[dataStart+__TSDIDX_SCREEN_Y]=y;
}

int Tango_GetSlotX(int slot)
{
    if(!__Tango_ValidateSlot(slot))
        return -1;
    return __Tango_SlotData[slot*__TANGO_SIZEOF_DATA+__TSDIDX_SCREEN_X];
}

int Tango_GetSlotY(int slot)
{
    if(!__Tango_ValidateSlot(slot))
        return -1;
    return __Tango_SlotData[slot*__TANGO_SIZEOF_DATA+__TSDIDX_SCREEN_Y];
}

void Tango_ActivateSlot(int slot)
{
    if(!__Tango_ValidateSlot(slot))
        return;
    
    if(Tango_GetSlotStyleAttribute(slot, TANGO_STYLE_TEXT_FONT)==0)
    {
        __Tango_LogError(__TANGO_ERROR_NO_FONT, slot, Tango_GetSlotStyle(slot));
        return;
    }
    
    int dataStart=slot*__TANGO_SIZEOF_DATA;
    
    // Don't do anything if the slot's active already
    if(__Tango_SlotData[dataStart+__TSDIDX_STATE]==__TANGO_STATE_INACTIVE ||
       __Tango_SlotData[dataStart+__TSDIDX_STATE]==__TANGO_STATE_RESERVED)
    {
        __Tango_SlotData[dataStart+__TSDIDX_STATE]=__TANGO_STATE_ACTIVE;
        __Tango_SlotData[dataStart+__TSDIDX_ALT_CSET]=-1;
        __Tango_SlotData[dataStart+__TSDIDX_ALT_COLOR]=-1;
        
        // Clear the text drawing area
        __Tango_ClearSlotBitmap(slot);
        Screen->SetRenderTarget(RT_SCREEN);
        
        // Freeze the screen if necessary.
        int flags=Tango_GetSlotStyleAttribute(slot, TANGO_STYLE_FLAGS);
        if((flags&TANGO_FLAG_FREEZE_SCREEN)!=0)
            __Tango_IncScreenFreeze();
        
        if(__TANGO_IGNORE_NEWLY_PRESSED_SPEED_KEYS!=0)
        {
            // Try to determine if the activation was triggered by pressing
            // the same button used to speed up text. If so, don't speed up
            // the text until it's pressed again.
            if(__Tango_PressSpeedup())
                __Tango_SlotData[dataStart+__TSDIDX_IGNORE_SPEED_KEYS]=1;
            else if(__Tango_PressSuperSpeed())
                __Tango_SlotData[dataStart+__TSDIDX_IGNORE_SPEED_KEYS]=2;
        }
    }
}

bool Tango_SlotIsActive(int slot)
{
    if(!__Tango_ValidateSlot(slot))
        return false;
    
    int dataStart=slot*__TANGO_SIZEOF_DATA;
    int state=__Tango_SlotData[dataStart+__TSDIDX_STATE];
    if(state==__TANGO_STATE_INACTIVE ||
       state==__TANGO_STATE_RESERVED)
        return false;
    return true;
}

bool Tango_AnySlotIsActive()
{
    int dataStart;
    int state;
    for(int i=0; i<__TANGO_NUM_SLOTS; i++)
    {
        dataStart=i*__TANGO_SIZEOF_DATA;
        state=__Tango_SlotData[dataStart+__TSDIDX_STATE];
        if(!(state==__TANGO_STATE_INACTIVE ||
          state==__TANGO_STATE_RESERVED))
            return true;
    }
    return false;
}

bool Tango_SlotIsFinished(int slot)
{
    if(!__Tango_ValidateSlot(slot))
        return false;
    int dataStart=slot*__TANGO_SIZEOF_DATA;
    return __Tango_SlotData[dataStart+__TSDIDX_STATE]==__TANGO_STATE_FINISHED;
}

int Tango_GetFreeSlot(int type)
{
    for(int i=0; i<__TANGO_NUM_SLOTS; i++)
    {
        if(__Tango_SlotData[i*__TANGO_SIZEOF_DATA+__TSDIDX_STATE]!=__TANGO_STATE_INACTIVE)
            continue;
        
        if(__Tango_SlotDefs[i*__TANGO_SIZEOF_SLOTDEF+__TSDEF_TYPE]==type ||
           type==TANGO_SLOT_ANY)
            return i;
    }
    
    __Tango_LogMessage(__TANGO_NO_SLOTS_FREE, type);
    return TANGO_INVALID;
}

int Tango_GetFreeSlot()
{
    return Tango_GetFreeSlot(TANGO_SLOT_ANY);
}

float Tango_GetSlotVar(int slot, int what)
{
    if(__Tango_ValidateSlot(slot))
        return __Tango_SlotData[slot*__TANGO_SIZEOF_DATA+what];
    return TANGO_INVALID;
}

void Tango_SetSlotVar(int slot, int what, float value)
{
    if(__Tango_ValidateSlot(slot))    
        __Tango_SlotData[slot*__TANGO_SIZEOF_DATA+what]=value;
}

int Tango_GetCurrentSlot()
{
    return __Tango_Data[__TCS_ID];
}

void Tango_Sync(int value)
{
    while(true)
    {
        if(__Tango_FindSyncingStrings(value))
            return;
        Waitframe();
    }
}

void Tango_SaveSlotState(int slot, int[] output)
{
    __Tango_SaveSlotStateInternal(slot, output);
}

void Tango_SaveSlotState(int slot, int[] output, int the_bitmap)
{
    if(!__Tango_SaveSlotStateInternal(slot, output))
        // Error
        return;
    
    int defStart=slot*__TANGO_SIZEOF_SLOTDEF;
    int x=__Tango_SlotDefs[defStart+__TSDEF_X];
    int y=__Tango_SlotDefs[defStart+__TSDEF_X];
    int width=__Tango_SlotDefs[defStart+__TSDEF_WIDTH];
    int height=__Tango_SlotDefs[defStart+__TSDEF_HEIGHT];
    
    Screen->SetRenderTarget(the_bitmap);
    Screen->DrawBitmap(0, __TANGO_BITMAP, x, y, width, height,
      x, y, width, height, 0, false);
    Screen->SetRenderTarget(RT_SCREEN);
}

bool __Tango_SaveSlotStateInternal(int slot, int[] output)
{
    int bufStart=__Tango_GetSlotDefData(slot, __TSDEF_START);
    int bufSize=__Tango_GetSlotDefData(slot, __TSDEF_LENGTH);
    
    if(SizeOfArray(output)<bufSize+__TANGO_SIZEOF_DATA)
    {
        __Tango_LogError(__TANGO_ERROR_SLOT_STATE_ARRAY_TOO_SMALL,
          SizeOfArray(output), bufSize+__TANGO_SIZEOF_DATA);
        return false;
    }
    
    for(int i=0; i<bufSize; i++)
        output[i]=__Tango_Buffer[i+bufStart];
    
    int dataOffset=slot*__TANGO_SIZEOF_DATA;
    
    for(int i=0; i<__TANGO_SIZEOF_DATA; i++)
        output[i+bufSize]=__Tango_SlotData[i+dataOffset];
    
    return true;
}

void Tango_RestoreSlotState(int slot, int[] oldState)
{
    __Tango_RestoreSlotStateInternal(slot, oldState);
}

void Tango_RestoreSlotState(int slot, int[] oldState, int the_bitmap)
{
    if(!__Tango_RestoreSlotStateInternal(slot, oldState))
        // Error
        return;
    
    int defStart=slot*__TANGO_SIZEOF_SLOTDEF;
    int x=__Tango_SlotDefs[defStart+__TSDEF_X];
    int y=__Tango_SlotDefs[defStart+__TSDEF_X];
    int width=__Tango_SlotDefs[defStart+__TSDEF_WIDTH];
    int height=__Tango_SlotDefs[defStart+__TSDEF_HEIGHT];
    
    Screen->SetRenderTarget(__TANGO_BITMAP);
    Screen->DrawBitmap(0, the_bitmap, x, y, width, height,
      x, y, width, height, 0, false);
    Screen->SetRenderTarget(RT_SCREEN);
}

bool __Tango_RestoreSlotStateInternal(int slot, int[] oldState)
{
    int bufStart=__Tango_GetSlotDefData(slot, __TSDEF_START);
    int bufSize=__Tango_GetSlotDefData(slot, __TSDEF_LENGTH);
    
    if(SizeOfArray(oldState)<bufSize+__TANGO_SIZEOF_DATA)
    {
        __Tango_LogError(__TANGO_ERROR_SLOT_STATE_ARRAY_TOO_SMALL,
          SizeOfArray(oldState), bufSize+__TANGO_SIZEOF_DATA);
        return false;
    }
    
    // Whether the TANGO_FLAG_FREEZE_SCREEN flag is active may change,
    // so check it before and after.
    bool frozenBefore=false;
    if(Tango_SlotIsActive(slot))
    {
        if((__Tango_GetSlotFlags(slot)&TANGO_FLAG_FREEZE_SCREEN)!=0)
            frozenBefore=true;
    }
    
    // Copy everything back to the internal arrays...
    for(int i=0; i<bufSize; i++)
        __Tango_Buffer[i+bufStart]=oldState[i];
    
    int dataOffset=slot*__TANGO_SIZEOF_DATA;
    
    for(int i=0; i<__TANGO_SIZEOF_DATA; i++)
        __Tango_SlotData[i+dataOffset]=oldState[i+bufSize];
    
    // The second TANGO_FLAG_FREEZE_SCREEN check.
    bool frozenAfter=false;
    if(Tango_SlotIsActive(slot))
    {
        if((__Tango_GetSlotFlags(slot)&TANGO_FLAG_FREEZE_SCREEN)!=0)
            frozenAfter=true;
    }
    
    if(frozenBefore && !frozenAfter)
        __Tango_DecScreenFreeze();
    else if(!frozenBefore && frozenAfter)
        __Tango_IncScreenFreeze();
    
    return true;
}

float Tango_ConvertFunctionName(char32[] name)
{
    int type[]="Function";
    int prefix[]="FUNC_";
    return __Tango_ConvertName(name, type, prefix);
}

float Tango_ConvertVariableName(char32[] name)
{
    int type[]="Variable";
    int prefix[]="VAR_";
    return __Tango_ConvertName(name, type, prefix);
}

// Used by Tango_ConvertFunctionName() and Tango_ConvertVariableName()
float __Tango_ConvertName(char32[] name, char32[] type, char32[] prefix)
{
    float value=__Tango_GetConvertedName(name);
    if(value==-1)
    {
        int error[]="%s name '%s' contains invalid characters\n";
        error[8]='"';
        error[11]='"';
        printf(error, type, name);
    }
    else if(value==-2)
    {
        int error[]="%s name '%s' overflowed\n";
        error[8]='"';
        error[11]='"';
        printf(error, type, name);
    }
    else
        __Tango_PrintConstant(prefix, name, value);
    
    return value;
}

// Used by Tango_ConvertFunctionName() and Tango_ConvertVariableName()
float __Tango_GetConvertedName(char32[] name)
{
    float accumulator=0;
    float prevValue=0;
    int character;
    
    // Find the value
    for(int pos=0; name[pos]!=NULL && pos<31; pos++)
    {
        character=name[pos];
        
        if(character>='a' && character<='z')
        {
            accumulator*=__TANGO_CODE_FACTOR;
            accumulator+=(character+1-'a')/10000;
        }
        else if(character>='A' && character<='Z')
        {
            accumulator*=__TANGO_CODE_FACTOR;
            accumulator+=(character+1-'A')/10000;
        }
        else if(character>='0' && character<='9' && pos>0)
        {
            accumulator*=__TANGO_CODE_FACTOR;
            accumulator+=(character+27-'0')/10000;
        }
        else
            return -1;
        
        // Check for overflow
        if(accumulator<prevValue)
            return -2;
        
        prevValue=accumulator;
    }
    
    return accumulator;
}

// Used by Tango_ConvertFunctionName() and Tango_ConvertVariableName()
void __Tango_PrintConstant(char32[] prefix, char32[] name, float value)
{
    int upperName[32];
    
    for(int pos=0; pos<31; pos++)
    {
        upperName[pos]=LowerToUpper(name[pos]);
        if(name[pos]==NULL)
            break;
    }
    
    upperName[31]=NULL; // Probably unnecessary
    
    int format[]="const float %s%s = %s;\n";
    int valueBuf[13];
    __Tango_FloatToASCII(valueBuf, value, true);
    printf(format, prefix, upperName, valueBuf);
}

float Tango_GetSlotScrollPos(int slot)
{
    return __Tango_SlotData[slot*__TANGO_SIZEOF_DATA+__TSDIDX_OFFSET];
}

float Tango_GetSlotMaxScrollPos(int slot)
{
    int dataStart=slot*__TANGO_SIZEOF_DATA;
    if(__Tango_SlotData[dataStart+__TSDIDX_STATE]==__TANGO_STATE_ADVANCING)
        return 0;
    return __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET];
}

void Tango_ScrollSlot(int slot, float amount)
{
    int dataStart=slot*__TANGO_SIZEOF_DATA;
    
    if(__Tango_SlotData[dataStart+__TSDIDX_STATE]==__TANGO_STATE_ADVANCING)
        return;
    
    if(amount<0)
    {
        if(amount+__Tango_SlotData[dataStart+__TSDIDX_OFFSET]<0)
            amount=-__Tango_SlotData[dataStart+__TSDIDX_OFFSET];
    }
    else
    {
        if(amount+__Tango_SlotData[dataStart+__TSDIDX_OFFSET]>
          __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET])
            amount=__Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET]-
            __Tango_SlotData[dataStart+__TSDIDX_OFFSET];
    }
    
    __Tango_SlotData[dataStart+__TSDIDX_OFFSET]+=amount;
    
    if(__Tango_Data[__TDIDX_MENU_SLOT]==slot)
        __Tango_ShiftMenu(0, -amount);
}
