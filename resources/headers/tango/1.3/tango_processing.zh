// tango.zh
// Version 1.3.3


// Constants and functions related to processing strings.

// String states
const int __TANGO_STATE_INACTIVE     = 0;
const int __TANGO_STATE_ACTIVE       = 1;
const int __TANGO_STATE_FINISHED     = 2;
const int __TANGO_STATE_ADVANCING    = 3;
const int __TANGO_STATE_RESERVED     = 4;
const int __TANGO_STATE_MENU_WAIT    = 5;
const int __TANGO_STATE_SYNC_WAIT    = 6;
const int __TANGO_STATE_WAIT_1_FRAME = 7;
const int __TANGO_STATE_PRESS_A      = 8;

// Added to the state to suspend it
const int __TANGO_SUSPEND = 100;

// Update speeds
const int __TANGO_SPEED_NORMAL  = 0;
const int __TANGO_SPEED_FAST    = 1;
const int __TANGO_SPEED_SUPER = 2;


void __Tango_CheckScreenChange()
{
    int screen=(Game->CurDMap<<8)+Game->CurDMapScreen;
    
    if(__Tango_Data[__TDIDX_PREV_SCREEN]!=screen)
    {
        __Tango_Data[__TDIDX_PREV_SCREEN]=screen;
        
        // Clear every string that doesn't carry over.
        
        int state;
        int flags;
        for(int i=0; i<__TANGO_NUM_SLOTS; i++)
        {
            state=__Tango_GetSlotState(i);
            flags=__Tango_GetSlotFlags(i);
            
            // Reserved state is cleared even if the carry over flag is set.
            if((flags&TANGO_FLAG_CARRY_OVER)==0 ||
               state==__TANGO_STATE_RESERVED)
                Tango_ClearSlot(i);
        }
    }
}

// Updates each slot and the menu.
void Tango_Update1()
{
    bool blockAll=false;
    Screen->SetRenderTarget(__TANGO_BITMAP);    
    __Tango_CheckScreenChange();
    
    // Update the menu first
    if(Tango_MenuIsActive())
    {
        __Tango_UpdateMenu();
        blockAll=true; // Menus always block all input
    }
    
    // Menu keys are cleared before other updates so that holding the button
    // after making a selection doesn't speed through the following text.
    if((__Tango_Data[__TDIDX_GLOBAL_FLAGS]&__TANGO_GFLAG_UNPRESS_MENU)!=0)
    {
        if(__Tango_InputMenu())
            __Tango_UnpressMenu();
        else
            __Tango_Data[__TDIDX_GLOBAL_FLAGS]&=~__TANGO_GFLAG_UNPRESS_MENU;
    }
    
    // Now each text slot is updated.
    for(int i=0; i<__TANGO_NUM_SLOTS; i++)
    {
        __Tango_SetCurrentSlot(i);
        __Tango_UpdateCurrentSlot();
    }
    
    // And then any remaining input blocking is handled.
    int flags=__Tango_Data[__TDIDX_GLOBAL_FLAGS];
    
    // Flags that unset specific buttons stay set for as long as their
    // buttons are held.
    if((flags&__TANGO_GFLAG_UNPRESS_SPEEDUP)!=0)
    {
        if(__Tango_InputSpeedup())
            __Tango_UnpressSpeedup();
        else
            flags&=~__TANGO_GFLAG_UNPRESS_SPEEDUP;
    }
    
    if((flags&__TANGO_GFLAG_UNPRESS_SUPER_SPEED)!=0)
    {
        if(__Tango_InputSuperSpeed())
            __Tango_UnpressSuperSpeed();
        else
            flags&=~__TANGO_GFLAG_UNPRESS_SUPER_SPEED;
    }
    
    if((flags&__TANGO_GFLAG_UNPRESS_ADVANCE)!=0)
    {
        if(__Tango_InputAdvance())
            __Tango_UnpressAdvance();
        else
            flags&=~__TANGO_GFLAG_UNPRESS_ADVANCE;
    }
    
    // The "unpress all" flag isn't persistent.
    if((flags&__TANGO_GFLAG_UNPRESS_ALL)!=0 || blockAll)
    {
        __Tango_UnpressAll();
        flags&=~__TANGO_GFLAG_UNPRESS_ALL;
    }
    
    __Tango_Data[__TDIDX_GLOBAL_FLAGS]=flags;
    
    Screen->SetRenderTarget(RT_SCREEN);
}

// Draws each active slot to the screen.
void Tango_Update2()
{
    Screen->SetRenderTarget(RT_SCREEN);
    
    int state;
    int dataStart;
    
    for(int i=0; i<__TANGO_NUM_SLOTS; i++)
    {
        __Tango_SetCurrentSlot(i);
        state=__Tango_GetCurrSlotData(__TSDIDX_STATE);
        
        if(state!=__TANGO_STATE_INACTIVE &&
           state!=__TANGO_STATE_RESERVED)
            __Tango_DrawToScreen();
    }
    
    if(Tango_MenuIsActive() && __Tango_Data[__TDIDX_MENU_SLOT]<0)
        __Tango_DrawMenuCursor();
    
    if(__Tango_Data[__TDIDX_ERROR_NOTIFICATION]>0)
    {
        int notice[]="tango.zh error logged";
        Screen->DrawString(__TANGO_DRAWING_LAYER, 0, 0, FONT_Z1,
          __TANGO_ERROR_NOTIFICATION_TEXT_COLOR,
          __TANGO_ERROR_NOTIFICATION_BG_COLOR,
          TF_NORMAL, notice, OP_OPAQUE);
        __Tango_Data[__TDIDX_ERROR_NOTIFICATION]--;
    }
}

void __Tango_UpdateCurrentSlot()
{
    int state=__Tango_SlotData[__Tango_Data[__TCS_DATA_START]+__TSDIDX_STATE];
    
    // Check for trivial states first
    
    if(state==__TANGO_STATE_INACTIVE || state==__TANGO_STATE_RESERVED)
        return;
    
    else if(state==__TANGO_STATE_WAIT_1_FRAME)
    {
        __Tango_SlotData[__Tango_Data[__TCS_DATA_START]+__TSDIDX_STATE]=
          __TANGO_STATE_ACTIVE;
        return;
    }
    
    // Check speed and input blocking flags
    
    int flags=__Tango_GetCurrStyleData(TANGO_STYLE_FLAGS);
    int speed=__TANGO_SPEED_NORMAL;
    int ignoreSpeedKeys=__Tango_Data[__TCS_DATA_START]+
      __TSDIDX_IGNORE_SPEED_KEYS;
    
    if((flags&TANGO_FLAG_ENABLE_SPEEDUP)!=0)
    {
        __Tango_Data[__TDIDX_GLOBAL_FLAGS]|=__TANGO_GFLAG_UNPRESS_SPEEDUP;
        if(__Tango_SlotData[ignoreSpeedKeys]==1)
        {
            if(!__Tango_InputSpeedup())
                __Tango_SlotData[ignoreSpeedKeys]=0;
        }
        else if(__Tango_InputSpeedup())
            speed=__TANGO_SPEED_FAST;
    }
    
    if((flags&TANGO_FLAG_ENABLE_SUPER_SPEED)!=0)
    {
        __Tango_Data[__TDIDX_GLOBAL_FLAGS]|=__TANGO_GFLAG_UNPRESS_SUPER_SPEED;
        if(__Tango_SlotData[ignoreSpeedKeys]==2)
        {
            if(!__Tango_InputSuperSpeed())
                __Tango_SlotData[ignoreSpeedKeys]=0;
        }
        else if(__Tango_InputSuperSpeed())
            speed=__TANGO_SPEED_SUPER;
    }
    
    if((flags&TANGO_FLAG_INSTANTANEOUS)!=0)
        speed=__TANGO_SPEED_SUPER;
    
    if((flags&TANGO_FLAG_BLOCK_INPUT)!=0)
        __Tango_Data[__TDIDX_GLOBAL_FLAGS]|=__TANGO_GFLAG_UNPRESS_ALL;
    
    // Now to actually update the string...
    
    if(state==__TANGO_STATE_PRESS_A)
    {
        int timer=__Tango_GetCurrSlotData(__TSDIDX_COUNTER);
        if(__Tango_PressAdvance(timer))
        {
            state=__TANGO_STATE_ACTIVE;
            __Tango_SetCurrSlotData(__TSDIDX_COUNTER, 0);
            __Tango_SetCurrSlotData(__TSDIDX_STATE, __TANGO_STATE_ACTIVE);
            __Tango_Data[__TDIDX_GLOBAL_FLAGS]|=__TANGO_GFLAG_UNPRESS_ADVANCE;
            
            if(__Tango_PressSpeedup())
                __Tango_SlotData[ignoreSpeedKeys]=1;
            else if(__Tango_PressSuperSpeed())
                __Tango_SlotData[ignoreSpeedKeys]=2;
        }
        else
            __Tango_SetCurrSlotData(__TSDIDX_COUNTER, timer+1);
    }
    
    // No else - advance immediately after pressing A
    if(state==__TANGO_STATE_ACTIVE)
        __Tango_UpdateActiveSlot(speed);
    
    else if(state==__TANGO_STATE_ADVANCING)
        __Tango_UpdateAdvancing(speed);
    
    else if(state==__TANGO_STATE_FINISHED)
        __Tango_UpdateFinishedSlot(flags, speed);
}

// Updates an active text slot. Renders text characters, runs functions, etc.
void __Tango_UpdateActiveSlot(int speed)
{
    int dataStart=__Tango_Data[__TCS_DATA_START];
    bool ready=true;
    
    // First, update scrolling and delay
    if(__Tango_SlotData[dataStart+__TSDIDX_COUNTER]>0)
    {
        __Tango_CountDown(speed);
        if(__Tango_SlotData[dataStart+__TSDIDX_COUNTER]>0)
            ready=false;
    }
    if(__Tango_SlotData[dataStart+__TSDIDX_SCROLLING]>0)
    {
        __Tango_Scroll(speed);
        if(__Tango_SlotData[dataStart+__TSDIDX_SCROLLING]>0)
            ready=false;
    }
    
    // If either scrolling or the delay hasn't finished, don't do any more.
    if(ready)
        __Tango_Process(speed);
}

// Updates an advancing text slot. Scrolls the text up and loads
// the next message when scrolling finishes.
void __Tango_UpdateAdvancing(int speed)
{
    if(__TANGO_SCROLL_TO_NEXT!=0)
    {
        if(!__Tango_Scroll(speed))
            // Not done scrolling
            return;
    }
    
    int dataStart=__Tango_Data[__TCS_DATA_START];
    int defStart=__Tango_Data[__TCS_DEF_START];
    
    // Load the next message, reset the text position and string state,
    // and clear the bitmap.
    Tango_LoadMessage(__Tango_Data[__TCS_ID],
        __Tango_SlotData[dataStart+__TSDIDX_NEXT_STRING]);
    __Tango_SlotData[dataStart+__TSDIDX_NEXT_STRING]=0;
    __Tango_SlotData[dataStart+__TSDIDX_POSITION]=
        __Tango_GetCurrSlotDefData(__TSDEF_START);
    __Tango_SlotData[dataStart+__TSDIDX_CHAR_X]=
        __Tango_SlotDefs[defStart+__TSDEF_X];
    __Tango_SlotData[dataStart+__TSDIDX_CHAR_Y]=
        __Tango_SlotDefs[defStart+__TSDEF_Y];
    __Tango_SlotData[dataStart+__TSDIDX_OFFSET]=0;
    __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET]=0;
    __Tango_SlotData[dataStart+__TSDIDX_SCROLLING]=0;
    __Tango_ClearSlotBitmap(__Tango_Data[__TCS_ID]);
    
    __Tango_SlotData[dataStart+__TSDIDX_STATE]=__TANGO_STATE_ACTIVE;
}

// Updates a finished text slot. Counts down the auto advance timer or
// checks if the advance button was pressed, then clears the slot or
// scroll up to make room for the next message.
void __Tango_UpdateFinishedSlot(int flags, int speed)
{
    int dataStart=__Tango_Data[__TCS_DATA_START];
    bool done=false;
    
    if((flags&TANGO_FLAG_AUTO_ADVANCE)!=0)
    {
        // Update the auto advance timer
        if(__Tango_SlotData[dataStart+__TSDIDX_COUNTER]>0)
        {
            __Tango_CountDown(speed);
            if(__Tango_SlotData[dataStart+__TSDIDX_COUNTER]==0)
                done=true;
        }
        else
            done=true;
    }
    else if(__Tango_PressAdvance(__Tango_SlotData[dataStart+__TSDIDX_COUNTER]))
    {
        done=true;
        __Tango_Data[__TDIDX_GLOBAL_FLAGS]|=__TANGO_GFLAG_UNPRESS_ADVANCE;
        
        if(__TANGO_IGNORE_NEWLY_PRESSED_SPEED_KEYS!=0)
        {
            if(__Tango_PressSpeedup())
                __Tango_SlotData[dataStart+__TSDIDX_IGNORE_SPEED_KEYS]=1;
            else if(__Tango_PressSuperSpeed())
                __Tango_SlotData[dataStart+__TSDIDX_IGNORE_SPEED_KEYS]=2;
        }
    }
    else
        __Tango_SlotData[dataStart+__TSDIDX_COUNTER]++;
    
    // The string is finished; either clear it out or get ready for
    // the next one
    if(done)
    {
        if(__Tango_SlotData[dataStart+__TSDIDX_NEXT_STRING]==0)
        {
            // No next string; clear it, unless the persistent flag is set.
            if((flags&TANGO_FLAG_PERSISTENT)==0)
                Tango_ClearSlot(__Tango_Data[__TCS_ID]);
        }
        else
            __Tango_BeginAdvancing();
    }
}

// Processes characters in the string until it encounters a delay.
void __Tango_Process(int speed)
{
    int slot=__Tango_Data[__TCS_ID];
    int dataStart=__Tango_Data[__TCS_DATA_START];
    int styleStart=__Tango_Data[__TCS_STYLE_START];
    
    bool done=false;
    int position=Tango_GetSlotVar(slot, __TSDIDX_POSITION);
    int character=__Tango_Buffer[position];
    int defStart=slot*__TANGO_SIZEOF_SLOTDEF;
    int font=__Tango_Styles[styleStart+TANGO_STYLE_TEXT_FONT];
    int left;
    int right;
    bool newLine;
    bool setDelay;
    bool isMenu=false;
    int choiceCounter=0;
    int scrolling;
    bool lineByLine=
      (__Tango_Styles[styleStart+TANGO_STYLE_FLAGS]&TANGO_FLAG_LINE_BY_LINE)!=0;
    bool lastWasSpace;
    
    __Tango_Data[__TDIDX_REFRESH_STYLE]=0;
    
    while(!done)
    {
        newLine=false;
        setDelay=false;
        lastWasSpace=false;
        
        // Space or printable character
        if(character>=' ')
        {
            // Scroll to the end if this is immediately after a menu
            if(__Tango_SlotData[dataStart+__TSDIDX_WAS_MENU]==1)
            {
                __Tango_SlotData[dataStart+__TSDIDX_WAS_MENU]=0;
                __Tango_SlotData[dataStart+__TSDIDX_OFFSET]=
                  __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET];
            }
            
            lastWasSpace=character==' ';
            __Tango_PrintNextChar(dataStart, character, font);
            if((character>' ' || __TANGO_SFX_ON_SPACE!=0) &&
               !isMenu && speed!=__TANGO_SPEED_SUPER && !lineByLine)
                Audio->PlaySound(__Tango_GetCurrentSFX());
            position++;
        }
        
        else if(character==TANGO_CHAR_NEWLINE)
        {
            newLine=true;
            position++;
        }
        
        // String control code
        else if(character>0)
            position+=__Tango_RunStringControlCode(position);
        
        else if(character==__TANGO_SETTER_MARKER)
        {
            __Tango_RunSetter(position, true);
            position+=6; // It must be at least six characters long;
                         // might as well skip ahead a bit
            
            // If @style was set, reload all the style data
            if(__Tango_Data[__TDIDX_REFRESH_STYLE]!=0)
            {
                styleStart=__Tango_Data[__TCS_STYLE_START];
                font=__Tango_Styles[styleStart+TANGO_STYLE_TEXT_FONT];
                lineByLine=(__Tango_Styles[styleStart+TANGO_STYLE_FLAGS]&
                            TANGO_FLAG_LINE_BY_LINE)!=0;
                
                __Tango_Data[__TDIDX_REFRESH_STYLE]=0;
            }
        }
        
        else if(character==__TANGO_ALT_COLOR_START_MARKER)
        {
            __Tango_SetAlternateColor(__Tango_Buffer[position+1]);
            position+=2;
        }
        
        else if(character==__TANGO_ALT_COLOR_END_MARKER)
        {
            __Tango_ClearAlternateColor();
            position++;
        }
        
        else if(character==__TANGO_FUNC_MARKER)
        {
            int ret=__Tango_RunFunction(position, true);
            if(ret>0 && !isMenu)
                done=true;
            // No position increment - may have put text
        }
        
        else if(character==__TANGO_FLOW_MARKER)
        {
            int ret=__Tango_RunFlowControl(position);
            if(ret>0 && !isMenu)
                done=true;
            // No position increment - may need repeated
        }
        
        else if(character==__TANGO_CHAR_CHOICE)
        {
            if(!isMenu)
            {
                __Tango_InitializeMenu(styleStart);
                isMenu=true;
            }
            
            __Tango_ReadChoice(position, defStart, dataStart, styleStart);
            __Tango_SlotData[dataStart+__TSDIDX_CHAR_X]+=
                __Tango_Styles[styleStart+TANGO_STYLE_MENU_CHOICE_INDENT];
            
            choiceCounter++;
            position+=2;
        }
        
        else if(character==__TANGO_CHAR_MENU_END)
        {
            __Tango_TransferCenteredLine(dataStart, isMenu);
            position++;
            __Tango_SlotData[dataStart+__TSDIDX_WAS_MENU]=1;
            break; // Don't check the next character
        }
        
        else if(character==NULL)
        {
            __Tango_TransferCenteredLine(dataStart, isMenu);
            __Tango_SlotData[dataStart+__TSDIDX_STATE]=__TANGO_STATE_FINISHED;
            Audio->PlaySound(__Tango_Styles[styleStart+TANGO_STYLE_TEXT_END_SFX]);
            if((__Tango_Styles[styleStart+TANGO_STYLE_FLAGS]&TANGO_FLAG_AUTO_ADVANCE)!=0 &&
               speed!=__TANGO_SPEED_SUPER)
                __Tango_SlotData[dataStart+__TSDIDX_COUNTER]=__TANGO_AUTO_ADVANCE_TIME;
            break; // Don't check the next character
        }
        
        else
        {
            // Either filler or something that isn't valid here.
            if(character!=__TANGO_CHAR_FILLER)
                __Tango_LogError(__TANGO_ERROR_INVALID_CHARACTER, character);
            position++;
        }
        
        // Load up the next character. If it's a text character,
        // there should normally be a delay before processing it.
        // It might also need to go on a new line.
        
        character=__Tango_Buffer[position];
        
        if(character>=__TANGO_PRINTABLE_CHAR ||
           (character==' ' && __TANGO_DELAY_ON_SPACE!=0))
        {
            if(speed!=__TANGO_SPEED_SUPER && !isMenu && !lineByLine)
                setDelay=true;
        }
        
        // See if the next character or word is too big to fit
        // on the current line.
        if(!newLine)
            newLine=__Tango_NeedsNewLine(slot, position);
        
        if(newLine)
        {
            // If the last character of the line was a space, undo
            // the character position advance. Otherwise, it would
            // be taken into account when centering the line, putting
            // the line too far left.
            if(lastWasSpace)
                __Tango_SlotData[dataStart+__TSDIDX_CHAR_X]-=
                  __Tango_GetCharacterWidth(' ', font);
            
            scrolling=__Tango_StartNewLine(isMenu);
            if(scrolling>0)
            {
                if(isMenu || speed==__TANGO_SPEED_SUPER)
                {
                    if(__Tango_SlotData[dataStart+__TSDIDX_OFFSET]==
                      __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET])
                        __Tango_SlotData[dataStart+__TSDIDX_OFFSET]+=scrolling;
                    __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET]+=scrolling;
                    if(isMenu)
                        __Tango_ShiftMenuUp(scrolling);
                }
                else
                {
                    __Tango_SlotData[dataStart+__TSDIDX_SCROLLING]=scrolling;
                    done=true;
                }
            }
            
            if(lineByLine)
                setDelay=true;
        } // end if(newLine)
        
        if(setDelay)
        {
            // Add to the delay instead of setting it so this doesn't
            // interfere with @delay
            __Tango_SlotData[dataStart+__TSDIDX_COUNTER]+=
                __Tango_GetCurrentSpeed();
            if(__Tango_SlotData[dataStart+__TSDIDX_COUNTER]>0)
                done=true;
        }
    } // end while(!done)
    
    // Only play the sound once per line.
    if(lineByLine)
        Audio->PlaySound(__Tango_GetCurrentSFX());
    
    __Tango_SlotData[dataStart+__TSDIDX_POSITION]=position;
}

// Draws the next character and advances the text position accordingly.
void __Tango_PrintNextChar(int dataStart, int character, int font)
{
    int flags=__Tango_GetCurrStyleData(TANGO_STYLE_FLAGS);
    int y;
    
    // If the text is centered, the character will be drawn at the bottom
    // of the bitmap area.
    if((flags&TANGO_FLAG_CENTERED)!=0)
        y=__Tango_GetCurrSlotDefData(__TSDEF_Y)+
            __Tango_GetCurrSlotDefData(__TSDEF_HEIGHT)-16;
    else
        y=__Tango_SlotData[dataStart+__TSDIDX_CHAR_Y];
    
    __Tango_SlotData[dataStart+__TSDIDX_CHAR_X]+=
      __Tango_PutChar(character, font,
                      __Tango_GetCurrentCSet(), __Tango_GetCurrentColor(),
                      __Tango_GetCurrentTileOffset(),
                      __Tango_SlotData[dataStart+__TSDIDX_CHAR_X], y,
                      0);
}

// Determines whether the next character or word will fit on the
// current line. Newline characters are not handled here.
// This can also evaluate a function if it comes in a menu choice,
// because the result may depend on text inserted by the function.
bool __Tango_NeedsNewLine(int slot, int pos)
{
    int character=__Tango_Buffer[pos];
    
    int dataStart=__Tango_Data[__TCS_DATA_START];
    int defStart=__Tango_Data[__TCS_DEF_START];
    int styleStart=__Tango_Data[__TCS_STYLE_START];
    int font=__Tango_Data[__TCS_FONT];
    
    int left=__Tango_SlotData[dataStart+__TSDIDX_CHAR_X];
    int right=__Tango_SlotDefs[defStart+__TSDEF_X]+
      __Tango_Styles[styleStart+TANGO_STYLE_TEXT_WIDTH];
    
    // Choices fit on the current line if the following word fits.
    if(character==__TANGO_CHAR_CHOICE)
    {
        character=__Tango_Buffer[pos+2];
        left+=__Tango_Styles[styleStart+TANGO_STYLE_MENU_CHOICE_INDENT];
        
        // If this is a function, it may print text, so evaluate it
        // and reread the character.
        if(character==__TANGO_FUNC_MARKER)
        {
            __Tango_RunFunction(pos+2, true);
            character=__Tango_Buffer[pos+2];
        }
        
        // If the next character is the start of a word, see if it fits.
        // Anything else, just assume it does.
        if(character<=__TANGO_PRINTABLE_CHAR)
            return !__Tango_WordWillFit(pos+2, font, left, right);
        else
            return true;
    }
    
    // Unprintable characters, including spaces, are always considered
    // to fit on the current line.
    else if(character<=' ')
        return false;
    
    // Must be a printable character. Does the character itself fit?
    if(!__Tango_CharacterWillFit(character, font, left, right))
        return true;
    
    // If so, see if it's the start of a word.
    // Look for the previous text character or menu item marker.
    bool wordStart=false;
    int stringStart=__Tango_Data[__TCS_START];
    for(int i=pos-1; i>stringStart; i--)
    {
        character=__Tango_Buffer[i];
        
        if(character==' ' || character==__TANGO_CHAR_CHOICE)
        {
            wordStart=true;
            break;
        }
        else if(character>=__TANGO_PRINTABLE_CHAR)
        {
            wordStart=false;
            break;
        }
    }
    
    // If this is the start of a word, see if the word fits.
    if(wordStart)
        return !__Tango_WordWillFit(pos, font, left, right);
    
    // Otherwise, it must fit.
    return false;
}

// Starts a new line. Returns the amount the text needs to scroll.
int __Tango_StartNewLine(bool isMenu)
{
    int dataStart=__Tango_Data[__TCS_DATA_START];
    
    __Tango_TransferCenteredLine(dataStart, isMenu);
    
    __Tango_SlotData[dataStart+__TSDIDX_CHAR_X]=
      __Tango_GetCurrSlotDefData(__TSDEF_X);
    __Tango_SlotData[dataStart+__TSDIDX_CHAR_Y]+=__Tango_GetLineHeight();
    
    return __Tango_GetTargetOffset()-
             __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET];
}

// When using centered text, the line currently being processed is drawn
// separately from the rest. It needs to be trasnferred to its correct position
// in the bitmap when it's finished.
void __Tango_TransferCenteredLine(int dataStart, bool isMenu)
{
    int flags=__Tango_GetCurrStyleData(TANGO_STYLE_FLAGS);
    
    // If the text isn't centered, there's nothing to do.
    if((flags&TANGO_FLAG_CENTERED)==0)
        return;
    
    int defStart=__Tango_Data[__TCS_DEF_START];
    int srcX=__Tango_SlotDefs[defStart+__TSDEF_X];
    int srcY=__Tango_SlotDefs[defStart+__TSDEF_Y]+
               __Tango_SlotDefs[defStart+__TSDEF_HEIGHT]-16;
    int width=__Tango_GetCurrStyleData(TANGO_STYLE_TEXT_WIDTH);
    int offset=(width-(__Tango_SlotData[dataStart+__TSDIDX_CHAR_X]-srcX))/2;
    
    Screen->DrawBitmap(0, __TANGO_BITMAP, srcX, srcY, width, 16,
                       srcX+offset, __Tango_SlotData[dataStart+__TSDIDX_CHAR_Y],
                       width, 16, 0, true);
    Screen->Rectangle(0, srcX, srcY, srcX+width, srcY+16, 0, -1, 0, 0, 0,
                      true, OP_OPAQUE);
    
    // Any menu items on this line need their positions updated, too.
    if(isMenu)
        __Tango_ShiftMenuRight(offset);
}

// Count down the state counter.
void __Tango_CountDown(int speed)
{
    int dataStart=__Tango_Data[__TCS_DATA_START];
    
    int amount=1;
    if(speed==__TANGO_SPEED_FAST)
        amount*=__TANGO_SPEEDUP_FACTOR;
    
    __Tango_SlotData[dataStart+__TSDIDX_COUNTER]=Max(0, 
        __Tango_SlotData[dataStart+__TSDIDX_COUNTER]-amount);
}

// Scroll down to display the next line or make way for the next string.
// Returns true if scrolling is finished.
bool __Tango_Scroll(int speed)
{
    if(__TANGO_SCROLL_SPEEDUP==0)
        speed=__TANGO_SPEED_NORMAL;
    
    int dataStart=__Tango_Data[__TCS_DATA_START];
    
    if(speed==__TANGO_SPEED_SUPER)
    {
        // Super speed? Jump to the end.
        float amount=__Tango_SlotData[dataStart+__TSDIDX_SCROLLING];
        if(__Tango_SlotData[dataStart+__TSDIDX_OFFSET]==
          __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET])
            __Tango_SlotData[dataStart+__TSDIDX_OFFSET]+=amount;
        __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET]+=amount;
        __Tango_SlotData[dataStart+__TSDIDX_SCROLLING]=0;
        return true;
    }
    else
    {
        float amount=__TANGO_SCROLL_SPEED;
        if(speed==__TANGO_SPEED_FAST)
            amount*=__TANGO_SPEEDUP_FACTOR;
        
        if(__Tango_SlotData[dataStart+__TSDIDX_SCROLLING]<=amount)
        {
            // At the end; scroll the rest of the way, which may not be
            // the maximum possible scroll step
            amount=__Tango_SlotData[dataStart+__TSDIDX_SCROLLING];
            
            if(__Tango_SlotData[dataStart+__TSDIDX_OFFSET]>=
              __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET])
                __Tango_SlotData[dataStart+__TSDIDX_OFFSET]+=amount;
            __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET]+=amount;
            __Tango_SlotData[dataStart+__TSDIDX_SCROLLING]=0;
            return true;
        }

        else
        {
            // Not at the end; advance the full step and keep going
            
            if(__Tango_SlotData[dataStart+__TSDIDX_STATE]==__TANGO_STATE_ADVANCING)
            {
                // The size of the drawing rectangle shrinks as the text
                // scrolls off the top; use the state counter to track that
                if(__Tango_SlotData[dataStart+__TSDIDX_OFFSET]>=
                  __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET])
                    __Tango_SlotData[dataStart+__TSDIDX_COUNTER]+=amount;
                
                // Scrolling to the next string; don't update max offset
                __Tango_SlotData[dataStart+__TSDIDX_OFFSET]+=amount;
            }
            else
            {
                // Just scrolling the current text; only actually scroll
                // if it's already as far down as possible
                if(__Tango_SlotData[dataStart+__TSDIDX_OFFSET]==
                  __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET])
                    __Tango_SlotData[dataStart+__TSDIDX_OFFSET]+=amount;
                __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET]+=amount;
            }
            
            __Tango_SlotData[dataStart+__TSDIDX_SCROLLING]-=amount;
            
            return false;
        }
    }
}

// Sets the slot up to advance to the next message.
void __Tango_BeginAdvancing()
{
    int dataStart=__Tango_Data[__TCS_DATA_START];
    __Tango_SlotData[dataStart+__TSDIDX_STATE]=__TANGO_STATE_ADVANCING;
    __Tango_SlotData[dataStart+__TSDIDX_SCROLLING]=
      __Tango_GetCurrStyleData(TANGO_STYLE_TEXT_HEIGHT)+
      __Tango_SlotData[dataStart+__TSDIDX_MAX_OFFSET]-
      __Tango_SlotData[dataStart+__TSDIDX_OFFSET];
    __Tango_SlotData[dataStart+__TSDIDX_COUNTER]=0;
}

void Tango_SuspendSlot(int slot)
{
    int index=slot*__TANGO_SIZEOF_DATA+__TSDIDX_STATE;
    int state=__Tango_SlotData[index];
    if(state==__TANGO_STATE_INACTIVE || state==__TANGO_STATE_RESERVED)
        return;
    
    __Tango_SlotData[index]=(state%__TANGO_SUSPEND)+__TANGO_SUSPEND;
}

void Tango_ResumeSlot(int slot)
{
    int index=slot*__TANGO_SIZEOF_DATA+__TSDIDX_STATE;
    __Tango_SlotData[index]%=__TANGO_SUSPEND;
}

void __Tango_UnpressAll()
{
    Link->InputUp = false;
    Link->PressUp = false;
    Link->InputDown = false;
    Link->PressDown = false;
    Link->InputLeft = false;
    Link->PressLeft = false;
    Link->InputRight = false;
    Link->PressRight = false;
    
    Link->InputA = false;
    Link->PressA = false;
    Link->InputB = false;
    Link->PressB = false;
    Link->InputL = false;
    Link->PressL = false;
    Link->InputR = false;
    Link->PressR = false;
    
    Link->InputEx1 = false;
    Link->PressEx1 = false;
    Link->InputEx2 = false;
    Link->PressEx2 = false;
    Link->InputEx3 = false;
    Link->PressEx3 = false;
    Link->InputEx4 = false;
    Link->PressEx4 = false;
    
    Link->InputStart = false;
    Link->PressStart = false;
    Link->InputMap = false;
    Link->PressMap = false;
}
