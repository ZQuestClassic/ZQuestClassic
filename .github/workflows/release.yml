name: Release

concurrency: release

on:
  workflow_dispatch:
    inputs:
      number:
        description: Version number (Alpha/Beta/Gamma/Release).
        type: string
        required: false
      versiontype:
        type: choice
        description: Whether the build specified is an Alpha/Beta/Gamma/Release
        options:
          - alpha
          - beta
          - gamma
          - release
        required: true
        default: alpha
      full_release:
        type: boolean
        description: Full Version (i.e. NOT a nightly)
        default: false
      build_web_even_for_nightly:
        type: boolean
        description: Build web even for nightly. If false, web only builds w/ full release
        default: false
      sentry:
        type: boolean
        description: Perform a sentry release
        default: true

jobs:
  create-tag:
    runs-on: ubuntu-latest
    outputs:
      release-tag: ${{ steps.make-vars.outputs.release-tag }}
      release-name: ${{ steps.make-vars.outputs.release-name }}
      previous-release-tag: ${{ steps.make-vars.outputs.previous-release-tag }}
    steps:
      - name: git clone
        uses: actions/checkout@v3
      - run: git fetch --prune --unshallow --tags
      - id: make-vars
        run: |
          python3 .github/workflows/print-release-name-vars.py \
            --github_org=${{ github.repository_owner }} \
            --full_release=${{ github.event.inputs.full_release }} \
            --version_type=${{ github.event.inputs.versiontype }} \
            --number=${{ inputs.number }}

      - name: Setup Sentry CLI
        uses: mathieu-bour/setup-sentry-cli@v1.3.0
        if: inputs.sentry
        with:
          version: '2.20.6'
          token: ${{ secrets.SENTRY_TOKEN }}
          organization: zeldaclassic
          project: zelda-classic
      - run: sentry-cli --version
        if: inputs.sentry
      - run: sentry-cli --log-level=DEBUG releases new 'zelda-classic@${{ steps.make-vars.outputs.release-tag }}'
        if: inputs.sentry

  build-release:
    needs: ["create-tag"]
    strategy:
      matrix:
        include:
          - runs-on: windows-2022
            arch: x64
            compiler: msvc
            config: RelWithDebInfo
            sentry: ${{ inputs.sentry }}
          - runs-on: windows-2022
            arch: win32
            compiler: msvc
            config: RelWithDebInfo
            sentry: ${{ inputs.sentry }}
          - runs-on: macos-12
            arch: intel
            compiler: clang
            config: RelWithDebInfo
            sentry: ${{ inputs.sentry }}
          - runs-on: ubuntu-22.04
            arch: x64
            compiler: clang
            config: RelWithDebInfo
            sentry: ${{ inputs.sentry }}
      fail-fast: false
    # TODO z3 !!!!!!!!!
    # See https://github.com/community/community/discussions/40777
    uses: ./.github/workflows/build.yml
    # uses: ZQuestClassic/ZQuestClassic/.github/workflows/build.yml@main
    with:
      runs-on: ${{ matrix.runs-on }}
      arch: ${{ matrix.arch }}
      compiler: ${{ matrix.compiler }}
      config: ${{ matrix.config }}
      sentry: ${{ matrix.sentry }}
      release-tag: ${{ needs.create-tag.outputs.release-tag }}
      release-name: ${{ needs.create-tag.outputs.release-name }}
      cache: false
      number: ${{ inputs.number }}
      versiontype: ${{ inputs.versiontype }}
      full_release: ${{ inputs.full_release }}
    secrets: inherit

  build-web:
    runs-on: ubuntu-22.04
    if: inputs.full_release || inputs.build_web_even_for_nightly
    needs: create-tag

    steps:
      - name: git clone
        uses: actions/checkout@v3

      - uses: mymindstorm/setup-emsdk@v12
        with:
          version: "3.1.45"
          actions-cache-folder: "emsdk-cache-${{ runner.os }}-${{ runner.arch }}"

      - name: Install Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - run: sudo apt-get update && sudo apt-get install ccache ninja-build flex bison

      # Setup build cache via ccache.
      - name: ccache cache files
        uses: actions/cache@v3
        with:
          path: .ccache
          key: web-ccache-${{ github.run_id }}
          restore-keys: web-ccache-
      - run: ccache -z

      - run: |
          git clone https://github.com/psi29a/unsf.git
          cd unsf
          cmake -S . -B build .
          cmake --build build
          echo "UNSF=$PWD/build/unsf-static" >> $GITHUB_ENV

      - run: cp src/metadata/*.h.sig src/metadata/sigs/
      - run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
      - run: bash scripts/configure_emscripten.sh
        env:
          ZC_EMCC_CMAKE_EXTRA_FLAGS: -DRELEASE_TAG=${{ needs.create-tag.outputs.release-tag }} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      - run: cmake --build build_emscripten --config Release -t web
      - run: ccache -s

      - run: npm install
        working-directory: web
      - run: zip -r ${{ needs.create-tag.outputs.release-tag }}-web.zip build_emscripten/Release/packages/web

      - uses: actions/upload-artifact@v3
        with:
          name: build-web
          path: |
            ${{ github.workspace }}/${{ needs.create-tag.outputs.release-tag }}-web.zip

  publish:
    needs:
      - create-tag
      - build-release
      - build-web
    if: ${{ always() }}
    runs-on: ubuntu-22.04
    steps:
      - name: git clone
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          path: release-packages

      - name: Generate changelog
        # TODO z3 ~ revert before merging
        run: python scripts/generate_changelog.py --format markdown --from ${{ needs.create-tag.outputs.previous-release-tag }} > new_changelog.md
        # run: python scripts/generate_changelog.py --format markdown --from ${{ needs.create-tag.outputs.previous-release-tag }} --for-nightly=${{ github.event.inputs.full_release != 'true' }} > new_changelog.md

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.create-tag.outputs.release-name }}
          tag_name: ${{ needs.create-tag.outputs.release-tag }}
          target_commitish: ${{ github.sha }}
          files: release-packages/**/*
          prerelease: ${{ !inputs.full_release }}
          fail_on_unmatched_files: true
          generate_release_notes: false
          body_path: new_changelog.md

      - name: Setup Sentry CLI
        if: inputs.sentry
        uses: mathieu-bour/setup-sentry-cli@v1.3.0
        with:
          version: '2.20.6'
          token: ${{ secrets.SENTRY_TOKEN }}
          organization: zeldaclassic
          project: zelda-classic
      - name: Finalize sentry
        if: inputs.sentry
        run: |
          sentry-cli --log-level=DEBUG releases set-commits 'zelda-classic@${{ needs.create-tag.outputs.release-tag }}' --auto --ignore-missing
          sentry-cli --log-level=DEBUG releases finalize 'zelda-classic@${{ needs.create-tag.outputs.release-tag }}'

      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WEBSITE_REPO_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'ZQuestClassic',
              repo: 'zquestclassic.com',
              workflow_id: 'deploy.yml',
              ref: 'main',
            })
            await github.rest.actions.createWorkflowDispatch({
              owner: 'ZQuestClassic',
              repo: 'web.zquestclassic.com',
              workflow_id: 'deploy.yml',
              ref: 'main',
            })
