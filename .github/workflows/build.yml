run-name: ${{ inputs.release-name || 'Build' }}, ${{ inputs.runs-on }} ${{ inputs.arch }} ${{ inputs.config }} w/ ${{ inputs.compiler }}

on:
  workflow_call:
    inputs:
      runs-on:
        type: string
      arch:
        type: string
      compiler:
        type: string
        required: false
      config:
        type: string
        default: "Release"
        required: true
      cache:
        type: boolean
        default: true
      debug-info:
        type: boolean
        default: false
        description: "Whether to include debug info in the packaged artifact"
      # The following is for releases only.
      official:
        type: boolean
        default: false
        description: "Do not set this directly! Use release workflow."
      sentry:
        type: boolean
        default: false
        description: "Do not set this directly! Use release workflow."
      release-version:
        type: string
        required: false
        description: "Do not set this directly! Use release workflow."
      release-name:
        type: string
        required: false
        description: "Do not set this directly! Use release workflow."
    outputs:
      artifact-name:
        description: "The name of the artifact that should be downloaded by the caller workflow"
        value: build-${{ inputs.runs-on }}-${{ inputs.arch }}-${{ inputs.compiler }}-${{ inputs.config }}
      package-name:
        description: "The name of the package inside the uploaded artifact"
        value: ${{ jobs.build.outputs.package-name }}

env:
  CCACHE_BASEDIR: ${{ github.workspace }}
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_MAXSIZE: 400M
  CCACHE_SLOPPINESS: time_macros
  TARGET: zplayer zeditor zscript zlauncher zupdater

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      package-name: ${{ steps.set-package-vars.outputs.package-name }}
    steps:
      # Install dependencies.
      - if: ${{ contains(inputs.runs-on, 'mac') }}
        name: Build and install Bison
        run: |
          wget http://ftp.gnu.org/gnu/bison/bison-3.6.tar.gz
          tar -zxvf bison-3.6.tar.gz
          cd bison-3.6
          ./configure
          make
          sudo make install

      - name: git clone
        uses: connorjclark/action-cached-lfs-checkout@e9e548e0068e62830582e21febff8da4bd4e8ca5
        with:
          include: 'resources/**/*'
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12.8'
          cache: pip
      - run: pip install -r requirements.txt

      - if: ${{ contains(inputs.runs-on, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ inputs.arch }}

      - if: ${{ contains(inputs.runs-on, 'windows') }}
        name: Install Dependencies
        uses: crazy-max/ghaction-chocolatey@0e015857dd851f84fcb7fb53380eb5c4c8202333
        with:
          args: install .github/dependencies.config -y
      - name: Install LLVM and Clang
        if: inputs.compiler == 'clang' && runner.os == 'Linux'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: 17.0.2
          env: true
      - if: ${{ contains(inputs.runs-on, 'windows') }}
        name: Set vcpkg env vars
        shell: python
        run: |
          import os

          arch = '${{ inputs.arch }}'
          triplet = 'x64-windows' if arch == 'x64' else 'x86-windows'

          with open(os.environ['GITHUB_ENV'], 'a') as f:
            print('{0}={1}'.format('CMAKE_TOOLCHAIN_FILE', r'${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake'), file=f)
            print('{0}={1}'.format('VCPKG_DEFAULT_TRIPLET', triplet), file=f)
      - if: ${{ contains(inputs.runs-on, 'windows') }}
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: b322364f06308bdd24823f9d8f03fe0cc86fd46f
      - if: ${{ contains(inputs.runs-on, 'windows') }}
        run: vcpkg install libogg libvorbis curl dumb

      - if: ${{ contains(inputs.runs-on, 'ubuntu') }}
        run: sudo apt-get update && sudo apt-get install ccache ninja-build build-essential gcc-multilib g++-multilib libx11-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev libssl-dev libcurl4-openssl-dev libxcursor1 libasound2-dev libgtk-3-dev flex bison elfutils libogg-dev libvorbis-dev libdumb1-dev

      - if: ${{ contains(inputs.runs-on, 'mac') }}
        run: brew install ninja dylibbundler create-dmg ccache dumb libogg libvorbis

      # Setup build cache via ccache.
      - name: ccache cache files
        if: inputs.cache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ${{ inputs.runs-on }}-${{ inputs.arch }}-${{ inputs.compiler }}-${{ inputs.config }}-v3-ccache-${{ github.run_id }}
          restore-keys: ${{ inputs.runs-on }}-${{ inputs.arch }}-${{ inputs.compiler }}-${{ inputs.config }}-v3-
      - if: ${{ !inputs.cache }}
        run: echo "CCACHE_DISABLE=1" >> "$GITHUB_ENV"

      - name: Build ZScript docs
        if: inputs.official
        run: python webdocs/docjson_main.py --in webdocs/zsdocs_main.json --out resources/docs/ZScript_Docs.html -c

      # Configure build.
      - if: inputs.compiler == 'gcc'
        run: |
          echo "CC=gcc" >> "$GITHUB_ENV"
          echo "CXX=g++" >> "$GITHUB_ENV"
      - run: bash .github/workflows/configure-signatures.sh ${{ inputs.compiler }}
      - name: Set release platform
        id: set-platform
        shell: python
        run: |
          import platform
          import os

          arch = '${{ inputs.arch }}'

          system = platform.system()
          if system == 'Windows':
            arch_label = 'x86' if arch == 'win32' else 'x64'
            release_platform = f'windows-{arch_label}'
          elif system == 'Darwin':
            release_platform = 'mac'
          elif system == 'Linux':
            release_platform = 'linux'

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            print('{0}={1}'.format('platform', release_platform), file=f)
      - name: Configure build
        run: >
          cmake -S . -B build -G 'Ninja Multi-Config'
          -DCOPY_RESOURCES=OFF
          -DZC_OFFICIAL="${{ inputs.official }}"
          -DZC_VERSION="${{ inputs.release-version }}"
          -DRELEASE_PLATFORM="${{ steps.set-platform.outputs.platform }}"
          -DRELEASE_CHANNEL="3"
          -DREPO="${{ github.repository }}"
          -DWANT_SENTRY="${{ inputs.sentry }}"
          -DWANT_DEBUG_FILES="${{ inputs.config == 'RelWithDebInfo' }}"
          -DCMAKE_WIN32_EXECUTABLE=1
          -DCMAKE_C_COMPILER_LAUNCHER=ccache
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - run: ccache -z
      - run: cmake --build build --config ${{ inputs.config }} --target ${{ env.TARGET }} -j 4 -- -k 0
      - run: ccache -s

      # Package.
      - if: inputs.debug-info
        run: echo "PACKAGE_DEBUG_INFO=1" >> "$GITHUB_ENV"
      - name: Set package vars
        id: set-package-vars
        shell: python
        run: |
          import platform
          import os

          release_version = '${{ inputs.release-version }}' or 'zc'
          arch = '${{ inputs.arch }}'

          system = platform.system()
          if system == 'Windows':
            arch_label = 'x86' if arch == 'win32' else 'x64'
            package_name = f'{release_version}-windows-{arch_label}.zip'
            package_orig_name = 'zc.zip'
          elif system == 'Darwin':
            package_name = f'{release_version}-mac.dmg'
            package_orig_name = 'ZQuestClassic.dmg'
          elif system == 'Linux':
            package_name = f'{release_version}-linux.tar.gz'
            package_orig_name = 'zc.tar.gz'

          package_script_args = ''
          package_script_args_mac = ''
          if release_version != 'zc':
            package_script_args = f'--version {release_version}'
            package_script_args_mac = release_version

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            print('{0}={1}'.format('package-orig-name', package_orig_name), file=f)
            print('{0}={1}'.format('package-name', package_name), file=f)
            print('{0}={1}'.format('package-script-args', package_script_args), file=f)
            print('{0}={1}'.format('package-script-args-mac', package_script_args_mac), file=f)
      - name: Package
        if: inputs.config != 'Coverage' && !contains(inputs.runs-on, 'mac')
        run: |
          python scripts/package.py ${{ steps.set-package-vars.outputs.package-script-args }} --build_folder build/${{ inputs.config }}
          mv build/${{ inputs.config }}/packages/${{ steps.set-package-vars.outputs.package-orig-name }} build/${{ inputs.config }}/packages/${{ steps.set-package-vars.outputs.package-name }}
      - name: Package
        if: inputs.config != 'Coverage' && contains(inputs.runs-on, 'mac')
        run: |
          sh scripts/package_mac.sh ${{ github.workspace }}/build/${{ inputs.config }} ${{ steps.set-package-vars.outputs.package-script-args-mac }}
          mv build/${{ inputs.config }}/packages/${{ steps.set-package-vars.outputs.package-orig-name }} build/${{ inputs.config }}/packages/${{ steps.set-package-vars.outputs.package-name }}
      # Coverage builds need the entire build folder.
      - name: Package
        if: inputs.config == 'Coverage'
        run: |
          python scripts/package.py --build_folder build/${{ inputs.config }} --copy_to_build_folder
          cd build
          mkdir -p tmp-src/parser
          cp ../src/parser/lex.yy.cpp tmp-src/parser
          cp ../src/parser/y.tab.cpp tmp-src/parser
          cp ../src/parser/y.tab.hpp tmp-src/parser
          tar czpvf build.tar.gz * --preserve-permissions
          mkdir ${{ inputs.config }}/packages
          mv build.tar.gz ${{ inputs.config }}/packages/${{ steps.set-package-vars.outputs.package-name }}

      # Make build result available to other workflows.
      - uses: actions/upload-artifact@v4
        with:
          name: build-${{ inputs.runs-on }}-${{ inputs.arch }}-${{ inputs.compiler }}-${{ inputs.config }}
          path: build/${{ inputs.config }}/packages/${{ steps.set-package-vars.outputs.package-name }}

      # Upload debug symbols to Sentry.
      - name: Setup Sentry CLI
        if: inputs.sentry
        uses: mathieu-bour/setup-sentry-cli@v1.3.0
        with:
          version: '2.20.6'
          token: ${{ secrets.SENTRY_TOKEN }}
          organization: zeldaclassic
          project: zelda-classic
      - run: sentry-cli --version
        if: inputs.sentry
      - name: Upload debugging symbols
        if: inputs.sentry
        run: sentry-cli --log-level=DEBUG upload-dif 'zelda-classic@${{ inputs.release-version }}' --include-sources --wait build
