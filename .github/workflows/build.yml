run-name: ${{ inputs.release-tag || 'Build' }}, ${{ inputs.runs-on }} ${{ inputs.arch }} ${{ inputs.config }} w/ ${{ inputs.compiler }}

on:
  workflow_call:
    inputs:
      runs-on:
        type: string
      arch:
        type: string
      compiler:
        type: string
        required: false
      config:
        type: string
        default: "Release"
        required: true
      cache:
        type: boolean
        default: true
      debug-info:
        type: boolean
        default: false
        description: "Whether to include debug info in the packaged artifact"
      # The following is for releases only.
      sentry:
        type: boolean
        default: false
        description: "Do not set this directly! Use release workflow."
      release-tag:
        type: string
        required: false
        description: "Do not set this directly! Use release workflow."
      release-name:
        type: string
        required: false
        description: "Do not set this directly! Use release workflow."
      number:
        description: Version number (Alpha/Beta/Gamma/Release).
        type: string
        required: false
      versiontype:
        type: string
        description: Whether the build specified is an Alpha/Beta/Gamma/Release
        required: false
      full_release:
        type: boolean
        description: Full Version (i.e. NOT a nightly)
        required: false
    outputs:
      artifact-name:
        description: "The name of the artifact that should be downloaded by the caller workflow"
        value: build-${{ inputs.runs-on }}-${{ inputs.arch }}-${{ inputs.compiler }}-${{ inputs.config }}
      package-name:
        description: "The name of the package inside the uploaded artifact"
        value: ${{ jobs.build.outputs.package-name }}
    secrets:
      SENTRY_TOKEN:
        required: false

env:
  CCACHE_BASEDIR: ${{ github.workspace }}
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_MAXSIZE: 400M
  CCACHE_SLOPPINESS: time_macros
  TARGET: zplayer zquest zscript zlauncher zupdater

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      package-name: ${{ steps.set-package-name.outputs.package-name }}
    steps:
      # Install dependencies.
      - name: git clone
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11.4'

      - if: ${{ contains(inputs.runs-on, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ inputs.arch }}

      - if: ${{ contains(inputs.runs-on, 'windows') }}
        name: Install Dependencies
        uses: crazy-max/ghaction-chocolatey@v2
        with:
          args: install .github/dependencies.config -y
      - if: ${{ contains(inputs.runs-on, 'windows') }}
        name: Set vcpkg env vars
        shell: python
        run: |
          import os

          arch = '${{ inputs.arch }}'
          triplet = 'x64-windows' if arch == 'x64' else 'x86-windows'

          with open(os.environ['GITHUB_ENV'], 'a') as f:
            print('{0}={1}'.format('CMAKE_TOOLCHAIN_FILE', r'${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake'), file=f)
            print('{0}={1}'.format('VCPKG_DEFAULT_TRIPLET', triplet), file=f)
      - if: ${{ contains(inputs.runs-on, 'windows') }}
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: 5b1214315250939257ef5d62ecdcbca18cf4fb1c
      - if: ${{ contains(inputs.runs-on, 'windows') }}
        run: vcpkg install libogg libvorbis curl

      - if: ${{ contains(inputs.runs-on, 'ubuntu') }}
        run: sudo apt-get update && sudo apt-get install ccache ninja-build build-essential gcc-multilib g++-multilib libx11-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev libssl-dev libcurl4-openssl-dev libxcursor1 libasound2-dev libgtk-3-dev flex bison elfutils libogg-dev libvorbis-dev

      - if: ${{ contains(inputs.runs-on, 'mac') }}
        run: brew install ninja dylibbundler create-dmg ccache

      - if: ${{ contains(inputs.runs-on, 'mac') }}
        name: Build and install Bison
        run: |
          wget http://ftp.gnu.org/gnu/bison/bison-3.6.tar.gz
          tar -zxvf bison-3.6.tar.gz
          cd bison-3.6
          ./configure
          make
          sudo make install

      # Setup build cache via ccache.
      - name: ccache cache files
        if: inputs.cache
        uses: actions/cache@v3
        with:
          path: .ccache
          key: ${{ inputs.runs-on }}-${{ inputs.arch }}-${{ inputs.compiler }}-${{ inputs.config }}-ccache-${{ github.run_id }}
          restore-keys: ${{ inputs.runs-on }}-${{ inputs.arch }}-${{ inputs.compiler }}-${{ inputs.config }}-
      - if: ${{ !inputs.cache }}
        run: echo "CCACHE_DISABLE=1" >> "$GITHUB_ENV"

      - name: Build ZScript docs
        if: ${{ inputs.release-tag }}
        run: |
          pip install pytz
          python webdocs/docjson_main.py --in webdocs/zsdocs_main.json --out resources/docs/ZScript_Docs.html -c

      # Configure build.
      - if: inputs.compiler == 'clang'
        run: |
          echo "CC=clang" >> "$GITHUB_ENV"
          echo "CXX=clang++" >> "$GITHUB_ENV"
      - if: inputs.compiler == 'gcc'
        run: |
          echo "CC=gcc" >> "$GITHUB_ENV"
          echo "CXX=g++" >> "$GITHUB_ENV"
      # Coverage builds only need zplayer.
      - name: Set environment variables
        if: inputs.config == 'Coverage'
        run: echo "TARGET=zplayer" >> "$GITHUB_ENV"
      - run: cp src/metadata/*.h.sig src/metadata/sigs/
      - run: bash .github/workflows/configure-signatures.sh ${{ inputs.compiler }} ${{ inputs.versiontype }} ${{ inputs.full_release }} ${{ inputs.number }}
        if: ${{ inputs.versiontype }}
      - name: Set channel
        id: set-channel
        shell: python
        run: |
          import platform
          import os

          arch = '${{ inputs.arch }}'

          system = platform.system()
          if system == 'Windows':
            arch_label = 'x86' if arch == 'win32' else 'x64'
            channel = f'windows-{arch_label}'
          elif system == 'Darwin':
            channel = 'mac'
          elif system == 'Linux':
            channel = 'linux'

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            print('{0}={1}'.format('channel', channel), file=f)
      - name: Configure build
        run: >
          cmake -S . -B build -G 'Ninja Multi-Config'
          -DCOPY_RESOURCES=OFF
          -DRELEASE_TAG="${{ inputs.release-tag }}"
          -DRELEASE_CHANNEL="${{ steps.set-channel.outputs.channel }}"
          -DREPO="${{ github.repository }}"
          -DWANT_SENTRY="${{ inputs.sentry }}"
          -DWANT_MAC_DEBUG_FILES="${{ inputs.config == 'RelWithDebInfo' }}"
          -DCMAKE_WIN32_EXECUTABLE=1
          -DCMAKE_C_COMPILER_LAUNCHER=ccache
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - run: ccache -z
      - run: cmake --build build --config ${{ inputs.config }} --target ${{ env.TARGET }} -j 4 -- -k 0
      - run: ccache -s

      # Package.
      - if: inputs.debug-info
        run: echo "PACKAGE_DEBUG_INFO=1" >> "$GITHUB_ENV"
      - name: Set package name
        id: set-package-name
        shell: python
        run: |
          import platform
          import os

          release_tag = '${{ inputs.release-tag }}' or 'zc'
          arch = '${{ inputs.arch }}'

          system = platform.system()
          if system == 'Windows':
            arch_label = 'x86' if arch == 'win32' else 'x64'
            package_name = f'{release_tag}-windows-{arch_label}.zip'
          elif system == 'Darwin':
            package_name = f'{release_tag}-mac.dmg'
          elif system == 'Linux':
            package_name = f'{release_tag}-linux.tar.gz'

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            print('{0}={1}'.format('package-name', package_name), file=f)
      - name: Package
        if: inputs.config != 'Coverage'
        uses: ferki/os-specific-run@501696f215b5f20b303228bb3e445fe898f90a41
        with:
          windows: |
            python scripts/package.py --build_folder build/${{ inputs.config }}
            mv build/${{ inputs.config }}/packages/zc.zip build/${{ inputs.config }}/packages/${{ steps.set-package-name.outputs.package-name }}
          macos: |
            sh scripts/package_mac.sh ${{ github.workspace }}/build/${{ inputs.config }}
            mv build/${{ inputs.config }}/packages/ZQuestClassic.dmg build/${{ inputs.config }}/packages/${{ steps.set-package-name.outputs.package-name }}
          linux: |
            python scripts/package.py --build_folder build/${{ inputs.config }}
            mv build/${{ inputs.config }}/packages/zc.tar.gz build/${{ inputs.config }}/packages/${{ steps.set-package-name.outputs.package-name }}
      # Coverage builds need the entire build folder.
      - name: Package
        if: inputs.config == 'Coverage'
        run: |
          python scripts/package.py --build_folder build/${{ inputs.config }} --copy_to_build_folder
          cd build
          tar czpvf build.tar.gz * --preserve-permissions
          mkdir ${{ inputs.config }}/packages
          mv build.tar.gz ${{ inputs.config }}/packages/${{ steps.set-package-name.outputs.package-name }}

      # Make build result available to other workflows.
      - uses: actions/upload-artifact@v3
        with:
          name: build-${{ inputs.runs-on }}-${{ inputs.arch }}-${{ inputs.compiler }}-${{ inputs.config }}
          path: build/${{ inputs.config }}/packages/${{ steps.set-package-name.outputs.package-name }}

      # Upload debug symbols to Sentry.
      - name: Setup Sentry CLI
        if: inputs.sentry
        uses: mathieu-bour/setup-sentry-cli@v1.3.0
        with:
          version: '2.20.6'
          token: ${{ secrets.SENTRY_TOKEN }}
          organization: zeldaclassic
          project: zelda-classic
      - run: sentry-cli --version
        if: inputs.sentry
      - name: Upload debugging symbols
        if: inputs.sentry
        run: sentry-cli --log-level=DEBUG upload-dif 'zelda-classic@${{ inputs.release-tag }}' --include-sources --wait build
