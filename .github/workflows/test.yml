name: Test
run-name: Test (${{ inputs.runs-on }}, ${{ inputs.arch }}) ${{ inputs.extra-args }}

on:
  workflow_dispatch:
    inputs:
      runs-on:
        type: string
        description: 'runs-on'
      arch:
        type: string
        description: 'arch'
      compiler:
        type: string
        description: 'compiler'
      config:
        type: choice
        description: 'config'
        default: 'Release'
        options: ['Release', 'Debug', 'RelWithDebInfo', 'Coverage', 'Asan']
      extra-args:
        type: string
        description: 'extra-args'
  workflow_call:
    inputs:
      runs-on:
        type: string
        required: true
      arch:
        type: string
        required: true
      compiler:
        type: string
        required: true
      config:
        type: string
        required: true
      extra-args:
        type: string

env:
  PYTHONUNBUFFERED: '1'

jobs:
  build:
    # See https://github.com/community/community/discussions/40777
    # uses: ./.github/workflows/build.yml
    uses: ArmageddonGames/ZQuestClassic/.github/workflows/build.yml@main
    with:
      runs-on: ${{ inputs.runs-on }}
      arch: ${{ inputs.arch }}
      compiler: ${{ inputs.compiler }}
      config: ${{ inputs.config }}
      debug-info: true

  test:
    needs: ["build"]
    strategy:
      matrix:
        num_shards: [6]
        shard_index: [1, 2, 3, 4, 5, 6]
      fail-fast: false
    name: Replays ${{ matrix.shard_index }}/${{ matrix.num_shards }}
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: git clone
        uses: nschloe/action-cached-lfs-checkout@d6efedcb8fc03d006e1e77743718e26234ed2c97
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11.4'
      - if: ${{ !contains(inputs.runs-on, 'ubuntu') }}
        run: pip install requests PyGithub==1.58.2 requests discord.py watchdog Pillow intervaltree cutie
      - if: ${{ contains(inputs.runs-on, 'ubuntu') }}
        run: sudo pip install requests PyGithub==1.58.2 requests discord.py watchdog Pillow intervaltree cutie
      - if: inputs.config == 'Coverage'
        run: sudo pip install gcovr

      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: ${{ needs.build.outputs.artifact-name }}
      - name: Prepare build folder
        if: inputs.config != 'Coverage'
        uses: ferki/os-specific-run@501696f215b5f20b303228bb3e445fe898f90a41
        with:
          windows: |
            chcp 65001
            echo ("BUILD_FOLDER=$PWD/zc-extracted") >> $env:GITHUB_ENV
            mkdir zc-extracted
            cd zc-extracted
            7z x ../${{ needs.build.outputs.artifact-name }}/${{ needs.build.outputs.package-name }}
          macos: |
            echo "BUILD_FOLDER=$PWD/zc-extracted/ZQuestClassic.app/Contents/Resources" >> "$GITHUB_ENV"
            hdiutil attach -mountpoint zc-mounted ${{ needs.build.outputs.artifact-name }}/${{ needs.build.outputs.package-name }}
            mkdir zc-extracted
            cp -r zc-mounted/ZQuestClassic.app zc-extracted
            cp -r zc-mounted/ZQuestClassic.app.dSYM zc-extracted
            hdiutil unmount zc-mounted
          linux: |
            echo "BUILD_FOLDER=$PWD/zc-extracted" >> "$GITHUB_ENV"
            mkdir zc-extracted
            tar -xvzf ${{ needs.build.outputs.artifact-name }}/${{ needs.build.outputs.package-name }} -C zc-extracted
      - name: Prepare build folder
        if: inputs.config == 'Coverage'
        run: |
            echo "BUILD_FOLDER=build/Coverage" >> "$GITHUB_ENV"
            tar -xvzf ${{ needs.build.outputs.artifact-name }}/${{ needs.build.outputs.package-name }} -C build

      - run: sudo apt-get update && sudo apt-get install libopengl0 libglu1 lldb
        if: ${{ contains(inputs.runs-on, 'ubuntu') }}

      # Note: Uses JIT by default, except for win32.
      - name: Run replay tests
        run: >
          bash .github/workflows/run_python.sh tests/run_replay_tests.py
          --build_folder ${{ env.BUILD_FOLDER }}
          --build_type ${{ inputs.config }}
          --test_results_folder .tmp/test_results
          --retries 1
          --ci ${{ inputs.runs-on }}_${{ inputs.arch }}
          --shard ${{ matrix.shard_index }}/${{ matrix.num_shards }}
          ${{ inputs.extra-args }}

      # Just run a few replays with JIT disabled.
      # Also, without headless.
      - if: ${{ matrix.shard_index == 1 && inputs.extra-args == '' && inputs.arch != 'win32' }}
        name: Test w/o JIT
        run: >
          bash .github/workflows/run_python.sh tests/run_replay_tests.py
          --build_folder ${{ env.BUILD_FOLDER }}
          --build_type ${{ inputs.config }}
          --retries 1
          --ci ${{ inputs.runs-on }}_${{ inputs.arch }}
          --filter playground
          --filter keys.zplay
          --no-jit
          --no-headless

      - if: ${{ matrix.shard_index == 1 && inputs.extra-args == '' && inputs.config != 'Coverage' }}
        name: Updater cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.tmp/test_updater/cache
          key: updater-cache-${{ runner.runs-on }}-${{ runner.arch }}

      - if: ${{ matrix.shard_index == 1 && inputs.extra-args == '' && inputs.config != 'Coverage' }}
        name: Run Python tests
        run: bash .github/workflows/run_python.sh -m unittest discover tests

      - name: Generate coverage json
        if: inputs.config == 'Coverage'
        run: bash tests/generate_coverage_report.sh
        env:
          GCOV: llvm-cov-14 gcov
      - uses: actions/upload-artifact@v3
        if: inputs.config == 'Coverage'
        with:
          name: coverage-${{ inputs.runs-on }}-${{ inputs.arch }}-${{ matrix.shard_index }}-of-${{ matrix.num_shards }}
          path: ${{ github.workspace }}/tests/.coverage/coverage.json

      - uses: actions/upload-artifact@v3
        if: (github.event_name == 'workflow_dispatch' && !contains(inputs.extra-args, '--update')) || failure()
        with:
          name: replays-${{ inputs.runs-on }}-${{ inputs.arch }}-${{ matrix.shard_index }}-of-${{ matrix.num_shards }}
          path: ${{ github.workspace }}/.tmp/test_results

      - uses: actions/upload-artifact@v3
        if: contains(inputs.extra-args, '--update')
        with:
          name: replays-${{ inputs.runs-on }}-${{ inputs.arch }}-${{ matrix.shard_index }}-of-${{ matrix.num_shards }}
          path: ${{ github.workspace }}/.tmp/test_results/updated
